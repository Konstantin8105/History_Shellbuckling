C=DECK      ADS
C --- SUBROUTINE ADS (INFO,ISTRAT,IOPT,IONED,IPRINT,IGRAD,NDV,NCON,
C    1 X,VLB,VUB,OBJ,G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,NRWK,IWK,NRIWK)
C     DIMENSION X(NDV),VLB(NDV),VUB(NDV),G(NCON),IDG(NCON),IC(NCOLA),
C    1 DF(NDV),A(NRA,NCOLA),WK(NRWK),IWK(NRIWK)
C     ------------------------------------------------------------------
C --- MAIN CONTROL ROUTINE FOR THE ADS DESIGN OPTIMIZATION PROGRAM.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT.
C     INFO - CONTROL PARAMETER.
C        -2 - SET SCALAR PARAMETERS TO DEFAULTS, DEFINE WORK ARRAY
C             STORAGE AND EXIT.
C        -1 - FIRST CALL AFTER INFO = -2 CALL.  USER HAS OVER-RIDDEN
C             SOME DEFAULTS.  NOW PROCEED WITH OPTIMIZATION.
C         0 - FIRST CALL.  SET ALL SCALARS TO DEFAULTS, DEFINE STORAGE
C             AND PROCEED WITH OPTIMIZATION.
C      GT.0 - OPTIMIZATION IS IN PROGRESS.  THIS IS A RE-CALL.
C     ISTRAT - OPTIMIZATION STRATEGY IDENTIFIER.
C     IOPT - OPTIMIZER IDENTIFIER.
C     IONED - ONE-DIMENSIONAL SEARCH IDENTIFIER.
C     NDV - NUMBER OF DESIGN VARIABLES.
C     NCON - NUMBER OF CONSTRAINTS.  MAY BE ZERO.
C     IGRAD - GRADIENT CALCULATION IDENTIFIER.
C         0 - ALL GRADIENTS ARE CALCULATED USING FINITE DIFFERENCE.
C         1 - ALL GRADIENTS ARE SUPPLIED BY THE USER.
C     IPRINT - PRINT CONTROL.
C     X - VECTOR OF DESIGN VARIABLES.  INITIAL DESIGN IF FIRST CALL.
C         PREVIOUSLY RETURNED DESIGN IS SUBSEQUENT CALL.  MINIMUM
C         DIMENSION IS NDV.
C     OBJ - VALUE OF THE OBJECTIVE FUNCTION ASSOCIATED WITH X.
C     VLB - LOWER BOUNDS ON THE DESIGN VARIABLES.  MINIMUM DIMENSION
C           IS NDV.
C     VUB - UPPER BOUNDS ON THE DESIGN VARIABLES.  MINIMUM DIMENSION
C           IS NDV.
C     G - CONSTRAINT VALUES ASSOCIATED WITH CURRENT DESIGN.  MINIMUM
C         DIMENSION IS NCON.
C     IDG - CONSTRAINT TYPE IDENTIFIER.  MINIMUM DIMENSION IS NCON.
C     IC - ARRAY IDENTIFYING CONSTRAINTS FOR WHICH GRADIENTS WERE
C          REQUIRED ON LAST RETURN FROM ADS. MINIMUM DIMENSION IS NCOLA.
C     DF - GRADIENT OF OBJECTIVE.  MINIMUM DIMENSION IS NDV.
C     A - ARRAY CONTAINING GRADIENTS OF CONSTRAINTS IDENTIFIED BY ARRAY
C         IC.  GRADIENTS ARE STORED IN COLUMNS OF A.  DIMENSIONED SIZE
C         IS NRA X NCOLA.
C     NRA - NUMBER OF ROWS IN ARRAY A.  NRA.GE.NDV.
C     NCOLA - NUMBER OF COLUMNS OF ARRAY A.  NCOLA.GE.NGT.
C     WK - REAL WORK ARRAY.
C     NRWK - DIMENSIONED SIZE OF WK.
C     IWK INTEGER WORK ARRAY.
C     NRIWK - DIMENSIONED SIZE OF IWK.
C --- OUTPUT.
C     INFO - REQUIRED INFORMATION TO BE PROVIDED ON NEXT CALL.
C       -2 - INITIALIZATION IS COMPLETE.  SET INFO=-1 AND CALL AGAIN
C            FOR OPTIMIZATION.
C        0 - OPTIMIZATION IS COMPLETE.
C        1 - EVALUATE OBJECTIVE AND CONSTRAINTS AND CALL AGAIN.
C        2 - EVALUATE GRADIENT OF OBJECTIVE AND THE NGT SUBSET OF
C            CONSTRAINTS AND CALL AGAIN.
C     OBJ - CURRENT OR OPTIMUM OBJECTIVE FUNCTION VALUE.
C     X - VECTOR OF DESIGN VARIABLES.
C     G - VECTOR OF CONSTRAINTS.
C     NGT - NUMBER OF CURRENTLY ACTIVE/VIOLATED CONSTRAINTS.  IGNORE
C          IF INFO.LE.2.
C     IC - ARRAY IDENTIFYING THE NGT CONSTRAINTS FOR WHICH GRADIENTS
C          ARE REQUIRED.
C
      SUBROUTINE ADS (INFO,ISTRAT,IOPT,IONED,IPRINT,IGRAD,NDV,NCON,X,VLB
     1,VUB,OBJ,G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,NRWK,IWK,NRIWK)
      DIMENSION X(*),VLB(*),VUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK(*
     1),IWK(*)
C
C     PRINT CONTROLS.
      IPGLOB=IPRINT/1000
      I=MOD(IPRINT,1000)
      IPRNT3=I/100
      IPRNT2=(I-100*IPRNT3)/10
      IPRNT1=MOD(I,10)
      NCOLA1=NCOLA
      IF(ISTRAT.EQ.7) NCOLA1=NCOLA1-1
      NGT=MIN0(NCON,NCOLA1)
      IF (INFO.GT.0) GO TO 70
      IF (IPGLOB.EQ.0.OR.INFO.EQ.-1) GO TO 10
      WRITE (8,360)
      WRITE (8,370)
      WRITE (8,380) ISTRAT,IOPT,IONED,IPRINT,IGRAD,NDV,NCON
10    CONTINUE
C     CHECK FOR VALID COMBINATIONS OF OPTIONS.
      IER=0
C     ISTRAT/IOPT COMBINATION.
      IF(ISTRAT.LT.0.OR.ISTRAT.GT.9) WRITE(8,420)ISTRAT
      IF(ISTRAT.LT.0.OR.ISTRAT.GT.9) IER=1
      IF(IOPT.LT.0.OR.IOPT.GT.5) WRITE(8,430)IOPT
      IF(IOPT.LT.0.OR.IOPT.GT.5) IER=1
      IF(IONED.LT.0.OR.IONED.GT.8) WRITE(8,440)IONED
      IF(IONED.LT.0.OR.IONED.GT.8) IER=1
      IF(ISTRAT.GT.0) GO TO 12
      IF(IOPT.LT.4.AND.NCON.EQ.0) GO TO 14
      IF(IOPT.GE.4.AND.NCON.GT.0) GO TO 14
      WRITE(8,390)ISTRAT,IOPT
      IER=1
      GO TO 14
12    IF(ISTRAT.GT.5) GO TO 13
      IF(IOPT.LT.4) GO TO 13
      WRITE(8,390)ISTRAT,IOPT
      IER=1
      GO TO 14
13    IF(ISTRAT.LT.6) GO TO 14
      IF(IOPT.GT.3) GO TO 14
      WRITE(8,390)ISTRAT,IOPT
      IER=1
C     CHECK IOPT/IONED COMBINATION.
14    IF(IOPT.GT.3) GO TO 15
      IF(IONED.LE.4) GO TO 15
      WRITE(8,400)IOPT,IONED
      IER=1
      GO TO 16
15    IF(IOPT.LT.4) GO TO 16
      IF(IONED.GT.4) GO TO 16
      WRITE(8,400)IOPT,IONED
      IER=1
16    IF(IER.GT.0) WRITE(8,410)
      IF(IER.GT.0) INFO=0
      IF(IER.GT.0) RETURN
      IFCALL=0
      IGCALL=0
      IF (INFO.EQ.-1) GO TO 50
C     INFO = -2 OR 0.  PROCEED WITH INITIALIZATION TO DEFAULTS.
C     ------------------------------------------------------------------
C     FIRST CALL.  INITIALIZE ALL NEEDED INFORMATION.
C     ------------------------------------------------------------------
C
C     ZERO OUT WK AND IWK ARRAYS.
      DO 20 I=1,NRWK
20    WK(I)=0.
      DO 30 I=1,NRIWK
30    IWK(I)=0.
C     CHECK FOR SIDE CONSTRAINT VIOLATIONS.
      DO 35 I=1,NDV
      IF(X(I).GE.VLB(I)) GO TO 36
      WRITE(8,37)I,X(I),VLB(I),I
      X(I)=VLB(I)
36    IF(X(I).LE.VUB(I)) GO TO 35
      WRITE(8,38)I,X(I),VUB(I),I
      X(I)=VUB(I)
35    CONTINUE
37    FORMAT (//5X,14H* * * VARIABLE,I5,
     *29H IS LESS THAN ITS LOWER BOUND/5X,3HX =,1PE12.5,5X,5HVLB =,
     *1PE12.5/5X,35HX(I) IS SET EQUAL TO VLB(I) FOR I =,I5)
38    FORMAT(//5X,14H* * * VARIABLE,I5,
     *32H IS GREATER THAN ITS UPPER BOUND/5X,3HX =,1PE12.5,5X,5HVUB =,
     *1PE12.5/5X,35HX(I) IS SET EQUAL TO VUB(I) FOR I =,I5)
C --- IDENTIFY EXISTANCE OF EQUALITY CONSTRAINTS.
      NEQCON=0
      IF(NCON.EQ.0) GO TO 41
      DO 42 I=1,NCON
      IF(IDG(I).LT.0) NEQCON=NEQCON+1
42    CONTINUE
41    CONTINUE
      IWK(71)=NEQCON
C     SCALAR DEFAULTS.
      CALL ADS005 (ISTRAT,IOPT,IONED,NDV,WK,IWK)
C     WORK ARRAY STORAGE ALLOCATIONS.
      CALL ADS004 (ISTRAT,IOPT,IONED,IWK,NDV,NCON,NCOLA,NGT,NEQCON)
      NRB=MIN0(NCON,NCOLA)
C BEG OCT 1993
C  THE FOLLOWING STATEMENT SEEMS WRONG. I THINK THAT NRB (NUMBER OF
C  ROWS OF B) SHOULD ALWAYS BE EQUAL TO NCON + NDV.
C     IF(NRB.LT.(2*NDV)) NRB=NRB+NDV
      NRB=NRB+NDV
C END OCT 1993
      IWK(67)=NRB
C     IF DIMENSIONED SIZE IS TOO SMALL, PRINT WARNING COMENT.
      IF (IWK(150).LE.NRWK.AND.IWK(170).LE.NRIWK) GO TO 40
      WRITE (8,330)
      WRITE (8,340) NRWK,IWK(150),NRIWK,IWK(170)
40    CONTINUE
      NSCFG=IWK(102)
      NSCFX=IWK(105)
C     IF INFO = -2.  INITIALIZATION IS COMPLETE.  SET INFO=-1 AND EXIT.
      IF (INFO.EQ.-2) INFO=-1
      IF (INFO.LT.0) RETURN
C     INFO.NE.-2.  PROCEED.
50    CONTINUE
C     IF DIMENSIONED SIZE IS STILL TOO SMALL, STOP THE OPTIMIZATION.
      IF (IWK(150).LE.NRWK.AND.IWK(170).LE.NRIWK) GO TO 60
      WRITE (8,350)
      WRITE (8,340) NRWK,IWK(150),NRIWK,IWK(170)
      INFO=0
      IMAT=1
      IWK(34)=IMAT
      RETURN
60    CONTINUE
C     -----------------------------------------------------------------
C     INITIALIZATION FOR SCALE FACTORS.
C     -----------------------------------------------------------------
C     REPLACE THE SCALE FACTORS BY OVER-RIDEN VALUES.  IF NOT
C     OVER-RIDEN, THEN SET TO SCALE FACTORS TO 1.0
      SCFO=WK(32)
      ZRO=WK(37)
      NSCFG=IWK(102)
      NSVLB=IWK(103)
      NSVUB=IWK(104)
      NSCFX=IWK(105)
      CALL ADS006 (NDV,NCON,VLB,VUB,ZRO,WK(NSCFX),WK(NSVLB),WK(NSVUB),SC
     1FO,WK(NSCFG))
      WK(32)=SCFO
      IGOTO=1
      IWK(31)=IGOTO
      IMAT=2
      IWK(34)=IMAT
C     INITIAL FUNCTION EVALUATION.
      INFO=1
      RETURN
C
70    CONTINUE
C     UPDATE PRINT CONTROL VALUES IN WORK ARRAYS.
      IWK(38)=IPRNT1
      IWK(39)=IPRNT2
      IWK(40)=IPRNT3
C     ------------------------------------------------------------------
C     GET SCALARS FROM WORK ARRAYS.
C     ------------------------------------------------------------------
C     REAL.
      CT=WK(3)
      CTL=WK(4)
      CTLMIN=WK(5)
      CTMIN=WK(6)
      DABOBJ=WK(8)
      DABOBM=WK(9)
      DABSTR=WK(10)
      DELOBJ=WK(12)
      DELOBM=WK(13)
      EPSPEN=WK(19)
      FDCH=WK(21)
      FDCHM=WK(22)
      OBJS=WK(78)
      PENALT=WK(82)
      PMLT=WK(38)
      RP=WK(27)
      SCFO=WK(32)
      ZRO=WK(37)
C     INTEGER.
      IFCALL=IWK(28)
      IGCALL=IWK(29)
      IGOTO=IWK(31)
      IPRNT1=IWK(38)
      IPRNT2=IWK(39)
      IPRNT3=IWK(40)
      ISCAL=IWK(2)
      ISFLAG=IWK(41)
      JSCAL=IWK(50)
      LGOTOZ=IWK(55)
      MGOTOZ=IWK(57)
      NAC=IWK(58)
      NGOTOZ=IWK(64)
      NVC=IWK(68)
      NXFD=IWK(69)
      NEQCON=IWK(71)
C     ARRAY STARTING LOCATIONS.
      NSCFG=IWK(102)
      NSVLB=IWK(103)
      NSVUB=IWK(104)
      NSCFX=IWK(105)
      NXTMP=IWK(106)
      NXTMP3=IWK(108)
      NS=IWK(109)
      NGL=IWK(114)
      NG1=IWK(115)
      NLAMDA=IWK(123)
      NPARAM=IWK(124)
      NPENLT=IWK(128)
C     DEFAULT VALUE FOR DELOBJ, DABOBJ, DELOBM, DABOBM.
      IF(IGOTO.EQ.1) CALL ADS010 (ISTRAT,NDV,OBJ,X,DELOBJ,DABOBJ,
     1DELOBM,DABOBM,DABSTR,ZRO)
      WK(8)=DABOBJ
      WK(9)=DABOBM
      WK(10)=DABSTR
      WK(12)=DELOBJ
      WK(13)=DELOBM
C     OUTPUT VALUES OF PARAMETERS AND STORAGE REQUIREMENTS.
      IF (IPGLOB.GE.2.AND.IGOTO.EQ.1) CALL ADS403 (WK,NRWK,IWK,NRIWK)
      GO TO (80,100,120,200,240,270), IGOTO
80    CONTINUE
      ISFLAG=-1
      INFO=2
      IF (NCON.EQ.0) GO TO 90
C     SELECT THE NGT ACTIVE CONSTRAINTS.
      CALL ADS201 (NCON,NGT,G,IDG,IC,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
90    CONTINUE
C     ------------------------------------------------------------------
C     CALCULATE SCALE FACTOR AND SCALE EACH VARIABLE.
C     ------------------------------------------------------------------
C     SAVE OBJECTIVE, DESIGN VARIABLE AND CONSTRAINT VALUES.
      OBJS=OBJ
      CALL ADS503 (NDV,X,WK(NXTMP))
      IF (NCON.GT.0) CALL ADS503 (NCON,G,WK(NGL))
C     GRADIENTS.  IF IGRAD.GT.0, GRADIENTS ARE USER-SUPPLIED.
      IGOTO=3
      IF (IGRAD.GT.0.AND.INFO.EQ.2) IGCALL=IGCALL+1
      IMAT=3
      IF (IGRAD.GT.0) GO TO 320
C     IGRAD = 0.  FINITE DIFFERENCE GRADIENTS.
      MGOTOZ=0
100   CONTINUE
      CALL ADS216 (MGOTOZ,OBJ,NDV,X,WK(NSVLB),WK(NSVUB),NCON,NGT,IC,G,WK
     1(NGL),FDCH,FDCHM,DF,A,NRA,WK(NXTMP),ZRO,WK(NXTMP3),NXFD,OBJS)
C     FINISHED?
      INFO=1
      IF (MGOTOZ.EQ.0) GO TO 110
C     NO.  EVALUATE OBJECTIVE AND CONSTRAINT FUNCTIONS AND CALL AGAIN.
      IGOTO=2
      IFCALL=IFCALL+1
      IMAT=4
      GO TO 320
110   CONTINUE
      INFO=2
120   CONTINUE
C     GRADIENT CALCULATIONS COMPLETE. STORE NOMINAL CONSTRAINT VALUES
C     BACK IN OBJ, X AND G.
      OBJ=OBJS
      CALL ADS503 (NDV,WK(NXTMP),X)
      IF (NCON.GT.0) CALL ADS503 (NCON,WK(NGL),G)
C     (IGRAD ISCAL ISFLAG) = (JSCAL)   ,   *; 0 OR 1.
C     (* 1 -1) = 1 ; SCALE FACTOR, SCALE X, G, OBJ, DF AND A.
C     (* 0 -1) = 7 ; SCALE X, G, OBJ, DF AND A.
      IF (ISCAL.EQ.1) JSCAL=1
      IF (ISCAL.EQ.0) JSCAL=6
      CALL ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,NRA,NC
     1OLA,WK(NSCFX),SCFO,WK(NSCFG),VLB,VUB,IPGLOB,WK(NXTMP),WK(NGL),ZRO,
     2WK(NSVLB),WK(NSVUB))
      WK(32)=SCFO
      WK(8)=WK(8)*SCFO
      WK(9)=WK(9)*SCFO
      WK(10)=WK(10)*SCFO
C     ------------------------------------------------------------------
C     SCALE FACTORS ARE GAINED. SET ISFLAG 1.
C     ------------------------------------------------------------------
      ISFLAG=1
C     REORDER IC AND A MATRIX, IF NECESSARY.
      IF (ISTRAT.GE.1.AND.ISTRAT.LE.5) GO TO 130
      IF (NCON.EQ.0) GO TO 130
      CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
130   CONTINUE
      INFO=0
      IF (ISTRAT.EQ.0) GO TO 150
140   CONTINUE
C     ------------------------------------------------------------------
C     STRATEGY LEVEL.
C     ------------------------------------------------------------------
C --- PENALTY PARAMETERS FOR EQUALITY CONSTRAINTS IF IOPT=4 OR 5.
      IF(NEQCON.EQ.0) GO TO 149
      IF(IOPT.NE.4.AND.IOPT.NE.5) GO TO 149
      IF(INFO.GT.0) GO TO 143
      DO 144 ICALC=1,3
144   CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
      OBJ=OBJ+PENALT
      GO TO 149
143   ICALC=2
      CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
      OBJ=OBJ+PENALT
      WK(82)=PENALT
      IF(INFO.EQ.1) GO TO 149
      ICALC=3
      CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
149   CONTINUE
      CALL ADS003 (INFO,ISTRAT,IOPT,IONED,NDV,NCON,IGRAD,OBJ,X,WK(NSVLB)
     1,WK(NSVUB),G,IDG,NGT,NAC,NVC,IC,DF,A,NRA,NCOLA,WK,IWK,ISFLAG)
      IF(NEQCON.EQ.0) GO TO 148
      IF(IOPT.NE.4.AND.IOPT.NE.5) GO TO 148
      ICALC=4
      CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
      OBJ=OBJ-PENALT
148   CONTINUE
C     FINISHED?
      IF (INFO.EQ.0) GO TO 310
C     NO. EVALUATE FUNCTIONS OR GRADIENTS AS REQUIRED.
      LGOTOZ=1
      GO TO 190
150   IF (IOPT.EQ.0) GO TO 170
160   CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION LEVEL.
C     ------------------------------------------------------------------
C --- ADD PENALTY FOR EQUALITY CONSTRAINTS IF IOPT=4 OR 5.
      IF(NEQCON.EQ.0) GO TO 169
      IF(IOPT.NE.4.AND.IOPT.NE.5) GO TO 169
      IF(INFO.GT.0) GO TO 163
      DO 164 ICALC=1,3
164   CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
      OBJ=OBJ+PENALT
      WK(82)=PENALT
      GO TO 169
163   ICALC=2
      CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
      OBJ=OBJ+PENALT
      WK(82)=PENALT
      IF(INFO.EQ.1) GO TO 169
      ICALC=3
      CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
169   CONTINUE
      IWK(58)=NAC
      IWK(68)=NVC
      CALL ADS002 (INFO,ISTRAT,IOPT,IONED,NDV,NCON,OBJ,X,WK(NSVLB),WK(NS
     1VUB),G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK)
      IF(NEQCON.EQ.0) GO TO 168
      IF(IOPT.NE.4.AND.IOPT.NE.5) GO TO 168
      ICALC=4
      CALL ADS237(ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,WK(NPENLT),
     *ZRO,PENALT)
      OBJ=OBJ-PENALT
168   CONTINUE
      NAC=IWK(58)
      NVC=IWK(68)
C     FINISHED?
      IF (INFO.EQ.0) GO TO 310
C     NO. EVALUATE FUNCTIONS OR GRADIENTS AS REQUIRED.
      LGOTOZ=2
      GO TO 190
170   IF (IONED.EQ.0) GO TO 310
180   CONTINUE
C     ------------------------------------------------------------------
C     ONE-DIMENSIONAL SEARCH LEVEL.
C     ------------------------------------------------------------------
      ALPHA=WK(52)
      ALPMAX=WK(57)
      SLOPF=WK(85)
      CALL ADS001 (INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,WK(NSVLB),
     1WK(NSVUB),G,IDG,NGT,IC,WK,IWK,SLOPF,ALPHA,ALPMAX)
      WK(52)=ALPHA
C     FINISHED?
      IF (INFO.EQ.0) GO TO 310
C     NO.  EVALUATE FUNCTIONS.
      LGOTOZ=3
190   CONTINUE
C     ------------------------------------------------------------------
C     FUNCTION OR GRADIENT EVALUATION.
C     ------------------------------------------------------------------
      IF (INFO.GT.1) GO TO 220
C     IF INFO IS EQUAL TO 1, UN-SCALE X, G AND OBJ.
      JSCAL=4
      CALL ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,NRA,NC
     1OLA,WK(NSCFX),SCFO,WK(NSCFG),VLB,VUB,IPGLOB,WK(NXTMP),WK(NGL),ZRO,
     2WK(NSVLB),WK(NSVUB))
C     INFO = 1.  EVALUATE OBJECTIVE.
      IGOTO=4
      IFCALL=IFCALL+1
      IMAT=5
      GO TO 320
200   CONTINUE
C     SCALE X, G AND OBJ.
      JSCAL=3
      CALL ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,NRA,NC
     1OLA,WK(NSCFX),SCFO,WK(NSCFG),VLB,VUB,IPGLOB,WK(NXTMP),WK(NGL),ZRO,
     2WK(NSVLB),WK(NSVUB))
C     IF STRATEGY IS SUMT, EVALUATE PENALIZED FUNCTION.
      IF (ISTRAT.LE.0.OR.ISTRAT.GE.6) GO TO 210
      CALL ADS302 (ISTRAT,NCON,G,IDG,EPSPEN,RP,PENALT,WK(NLAMDA),WK(NPAR
     1AM),NGT,IC)
      OBJ=OBJ+PENALT
      WK(82)=PENALT
210   CONTINUE
      GO TO (140,160,180), LGOTOZ
C
220   CONTINUE
C     CALCULATE REQUIRED GRADIENTS.
C     SAVE OBJECTIVE, DESIGN VARIABLE AND CONSTRAINT VALUES.
      OBJS=OBJ
      CALL ADS503 (NDV,X,WK(NXTMP))
      IF (NCON.GT.0) CALL ADS503 (NCON,G,WK(NGL))
C     UN-SCALE X, G AND OBJ.
      JSCAL=4
      CALL ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,NRA,NC
     1OLA,WK(NSCFX),SCFO,WK(NSCFG),VLB,VUB,IPGLOB,WK(NXTMP),WK(NGL),ZRO,
     2WK(NSVLB),WK(NSVUB))
C     SAVE X IN S.
      CALL ADS503(NDV,X,WK(NS))
C     SAVE G IN G1.
      IF (NCON.GT.0) CALL ADS503 (NCON,G,WK(NG1))
C     GRADIENTS.  IF IGRAD.GT.0, GRADIENTS ARE USER-SUPPLIED.
      IGOTO=6
      IF (IGRAD.GT.0.AND.INFO.EQ.2) IGCALL=IGCALL+1
      IMAT=3
      IF (IGRAD.GT.0) GO TO 320
C     IGRAD = 0.  FINITE DIFFERENCE GRADIENTS.
      NGOTOZ=0
240   CONTINUE
      CALL ADS216 (NGOTOZ,OBJ,NDV,X,VLB,VUB,NCON,NGT,IC,G,WK(NG1),
     1FDCH,FDCHM,DF,A,NRA,WK(NS),ZRO,WK(NXTMP3),NXFD,OBJS)
C     FINISHED?
      INFO=1
      IF (NGOTOZ.EQ.0) GO TO 260
C     NO.  EVALUATE OBJECTIVE AND CONSTRAINT FUNCTIONS AND CALL AGAIN.
      IGOTO=5
      IFCALL=IFCALL+1
      IMAT=4
      GO TO 320
260   CONTINUE
      INFO=2
270   CONTINUE
C     GRADIENT CALCULATIONS COMPLETE. STORE NOMINAL FUNCTION VALUES
C     BACK IN OBJ, X AND G.
      OBJ=OBJ*SCFO
      CALL ADS503 (NDV,WK(NXTMP),X)
      IF (NCON.GT.0) CALL ADS503 (NCON,WK(NGL),G)
C     ------------------------------------------------------------------
C     CALCULATE SCALE FACTOR AND SCALE.
C     ------------------------------------------------------------------
C     SCALE DF AND A.
      JSCAL=2
      CALL ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,NRA,NC
     1OLA,WK(NSCFX),SCFO,WK(NSCFG),VLB,VUB,IPGLOB,WK(NXTMP),WK(NGL),ZRO,
     2WK(NSVLB),WK(NSVUB))
      ISFLAG=1
C     FOR F.D. OR M.F.D., RE-ORDER IC AND A MATRIX.
      IF (ISTRAT.GE.1.AND.ISTRAT.LE.5) GO TO 305
      IF(NCON.EQ.0) GO TO 305
      CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G
     1,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
305   CONTINUE
C     GO BACK TO STRATEGY, OPTIMIZATION, OR ONE-DIMENSIONAL SEARCH.
      GO TO (140,160,180), LGOTOZ
310   CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION IS COMPLETE.
C     ------------------------------------------------------------------
C     UN-SCALE X,OBJ AND G.
      JSCAL=4
      CALL ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,NRA,NC
     1OLA,WK(NSCFX),SCFO,WK(NSCFG),VLB,VUB,IPGLOB,WK(NXTMP),WK(NGL),ZRO,
     2WK(NSVLB),WK(NSVUB))
C     PRINT FINAL RESULTS.
      IF (IPGLOB.GT.0) CALL ADS420 (NDV,NCON,X,VLB,VUB,G,OBJ,IFCALL,IGCA
     1LL,IGRAD)
      IMAT=0
320   CONTINUE
C     ------------------------------------------------------------------
C     PUT PARAMETERS IN WORK ARRAYS.
C     ------------------------------------------------------------------
C     REAL.
      WK(78)=OBJS
      WK(82)=PENALT
C     INTEGER.
      IWK(28)=IFCALL
      IWK(29)=IGCALL
      IWK(31)=IGOTO
      IWK(34)=IMAT
      IWK(41)=ISFLAG
      IWK(50)=JSCAL
      IWK(55)=LGOTOZ
      IWK(57)=MGOTOZ
      IWK(58)=NAC
      IWK(64)=NGOTOZ
      IWK(68)=NVC
      IWK(69)=NXFD
      RETURN
C     ------------------------------------------------------------------
C     FORMATS
C     ------------------------------------------------------------------
330   FORMAT (/,5X,'<< WARNING >>')
340   FORMAT(7X,'DIMENSIONED SIZE OF WK OR IWK IS TOO SMALL ]]',//,14X,
     1'DIMENSIONED  REQUIRED',/,7X,'ARRAY     SIZE        SIZE',/,
     29X,'WK',4X,I6,6X,I6,/,8X,'IWK',4X,I6,6X,I6)
350   FORMAT (/,5X,'<<DISASTER ERROR >>')
360   FORMAT ('1',/////////,21X,
     1' AAAAA    DDDDDD     SSSSSS',/,21X,
     2'A     A   D     D   S',/,21X,
     3'A     A   D     D   S',/,21X,
     4'AAAAAAA   D     D    SSSSS',/,21X,
     5'A     A   D     D         S',/,21X,
     6'A     A   D     D         S',/,21X,
     7'A     A   DDDDDD    SSSSSS')
370   FORMAT (////,20X,'F O R T R A N   P R O G R A M',//,32X,'F O R',
     1//,9X,'A U T O M A T E D   D E S I G N   S Y N T H E S I S',//,
     225X,'V E R S I O N  2.00')
380   FORMAT (////////,5X,'CONTROL PARAMETERS',/,5X,'ISTRAT =',I5,4X,
     1'IOPT   =',I5,4X,'IONED  =',I5,4X,'IPRINT =',I5,/,5X,'IGRAD  =',
     2I5,4X,'NDV    =',I5,4X,'NCON   =',I5)
390   FORMAT (//,5X,'* * * ISTRAT =',I3,' IOPT =',I3,
     1' IS NOT A VALID COMBINATION')
400   FORMAT (//,5X,'* * * IOPT   =',I3,' IONED =',I3,
     1' IS NOT A VALID COMBINATION')
410   FORMAT (/,5X,'* * * THE COMBINATION OF ISTRAT, IOPT AND IONED',
     1' IS NOT VALID',/,5X,'* * * OPTIMIZATION TERMINATED')
420   FORMAT (//,5X,'* * * ISTRAT =',I5,' IS NOT VALID')
430   FORMAT (//,5X,'* * * IOPT =',I5,' IS NOT VALID')
440   FORMAT (//,5X,'* * * IONED =',I5,' IS NOT VALID')
      END
C
C
C
C=DECK      ADS001
C --- SUBROUTINE ADS001 (INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,
C    1IDG,NAVC,IC,WK,IWK)
C     DIMENSION X(NDV),SVLB(NDV),SVUB(NDV),G(NCON),IDG(NCON),IC(NRIC),
C    * WK(NRWK),IWK(NRIWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO CONTROL ONE-DIMENSIONAL SEARCH.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C
C --- OUTPUT
      SUBROUTINE ADS001 (INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,
     1IDG,NAVC,IC,WK,IWK,SLOPF,ALPHA,ALPMAX)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),WK(*),IWK(*),
     1TEMP(10)
C
C     ------------------------------------------------------------------
C     SCALARS AND ARRAY LOCATIONS.
C     ------------------------------------------------------------------
C
C     SCALARS.
C     REAL.
      SCFO=WK(32)
      ALPBST=WK(51)
      ALPL=WK(56)
      ALPU=WK(60)
      CTLMIN=WK(5)
      CTMIN=WK(6)
      DABALP=WK(7)
      DELALP=WK(11)
      EXTRAP=WK(20)
      FBST=WK(64)
      FL=WK(65)
      FU=WK(66)
      F1=WK(67)
      F2=WK(68)
      GBST=WK(69)
      GMAX=WK(70)
      GMCT=WK(72)
      GMCTL=WK(73)
      GMCTU=WK(74)
      GMCT1=WK(75)
      GMCT2=WK(76)
      XL=WK(86)
      XMULT=WK(36)
      XU=WK(87)
      X1=WK(88)
      X2=WK(89)
      ZRO=WK(37)
C     INTEGER.
      II=IWK(32)
      II1=IWK(33)
      IPRNT1=IWK(38)
      ISLOPF=IWK(43)
      ISLOPG=IWK(44)
      IX=IWK(47)
      JJ=IWK(49)
      LGOTO=IWK(54)
      MGOTO=IWK(56)
      NITER=IWK(66)
      ICAL=IWK(72)
C
C     ARRAY STARTING LOCATIONS.
      NSCFG=IWK(102)
      NSCAL=IWK(105)
      NXTMP=IWK(106)
      NS=IWK(109)
      NXOLD=IWK(110)
      NGU=IWK(113)
      NGL=IWK(114)
      NG1=IWK(115)
      NG2=IWK(116)
      NDG=IWK(117)
      NXBST=IWK(125)
C     ------------------------------------------------------------------
C     WRITE OUTPUT INFORMATION AS REQUIRED.
C     ------------------------------------------------------------------
      IF (IPRNT1.EQ.0) GO TO 20
      IF (INFO.GT.0) GO TO 10
C     INITIAL WRITES.
      WRITE (8,120)
      IF (IONED.GE.1.AND.IONED.LE.4) WRITE (8,60)
      IF (IONED.GE.5.AND.IONED.LE.8) WRITE (8,70)
      IF (IONED.EQ.1.OR.IONED.EQ.5) WRITE (8,80) IONED
      IF (IONED.EQ.2.OR.IONED.EQ.6) WRITE (8,90) IONED
      IF (IONED.EQ.3.OR.IONED.EQ.7) WRITE (8,100) IONED
      IF (IONED.EQ.4.OR.IONED.EQ.8) WRITE (8,110) IONED
      Z=0.
      WRITE (8,130) Z
10    CONTINUE
      OBJW=OBJ
      IF(ISTRAT.EQ.0) OBJW=OBJ/SCFO
      WRITE (8,140) OBJW
      ICALC=1
      IF (INFO.EQ.0) CALL ADS402 (ICALC,X,NDV,WK(NSCAL))
      ICALC=4
      IF (IPRNT1.GT.1.AND.NCON.GT.0) CALL ADS402 (ICALC,G,NCON,WK(NSCFG)
     1)
20    CONTINUE
C
      IF (INFO.EQ.0) LGOTO=0
      IF (IONED.GT.4) GO TO 30
C     ------------------------------------------------------------------
C     UNCONSTRAINED FUNCTION.
C     ------------------------------------------------------------------
C
      CALL ADS116 (LGOTO,IONED,IPRNT1,NDV,NCON,OBJ,SLOPF,ISLOPF,ALPHA,AL
     1PMAX,XMULT,EXTRAP,ZRO,DELALP,DABALP,ALPL,ALPU,WK(NXOLD),SVLB,SVUB,
     2WK(NS),X,G,WK(NGL),WK(NXBST),FBST,FL,FU,F1,F2,ALPBST,XL,XU,X1,X2,I
     3CAL,II,MGOTO,II1,IX,NITER,WK(NSCAL),WK(NSCFG),ISTRAT,SCFO)
      GO TO 40
30    CONTINUE
C     ------------------------------------------------------------------
C     CONSTRAINED FUNCTION.
C     ------------------------------------------------------------------
C
C     PUT TRANSFER INFORMATION IN TEMP.
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      CALL ADS115 (LGOTO,IONED,IPRNT1,NDV,NCON,OBJ,SLOPF,ISLOPF,ISLOPG,C
     1TMIN,CTLMIN,ALPHA,ALPMAX,XMULT,EXTRAP,ZRO,DELALP,DABALP,ALPL,ALPU,
     2WK(NXOLD),SVLB,SVUB,WK(NS),X,G,WK(NDG),IDG,WK(NGL),WK(NG1),WK(NG2)
     3,WK(NGU),WK(NXTMP),WK(NXBST),NAVC,IC,ALPBST,FBST,FL,FU,F1,F2,GBST,
     4GMAX,GMCT,GMCTL,GMCTU,GMCT1,GMCT2,ICAL,II,MGOTO,JJ,II1,
     5IX,NITER,WK(NSCAL),WK(NSCFG),ISTRAT,TEMP)
C     GET INFORMATION BACK FROM TEMP.
      XL=TEMP(1)
      XU=TEMP(2)
      X1=TEMP(3)
      X2=TEMP(4)
      SCFO=TEMP(5)
40    CONTINUE
C     SAVE SCALARS IN WORK ARRAYS.
C     REAL.
      WK(51)=ALPBST
      WK(56)=ALPL
      WK(57)=ALPMAX
      WK(60)=ALPU
      WK(64)=FBST
      WK(65)=FL
      WK(66)=FU
      WK(67)=F1
      WK(68)=F2
      WK(69)=GBST
      WK(70)=GMAX
      WK(72)=GMCT
      WK(73)=GMCTL
      WK(74)=GMCTU
      WK(75)=GMCT1
      WK(76)=GMCT2
      WK(86)=XL
      WK(87)=XU
      WK(88)=X1
      WK(89)=X2
C     INTEGER.
      IWK(32)=II
      IWK(33)=II1
      IWK(47)=IX
      IWK(49)=JJ
      IWK(54)=LGOTO
      IWK(56)=MGOTO
      IWK(66)=NITER
      IWK(72)=ICAL
      INFO=1
      IF (LGOTO.EQ.0) INFO=0
      IF (IPRNT1.EQ.0) RETURN
      WRITE (6,130) ALPHA
      OBJW=OBJ
      IF(ISTRAT.EQ.0) OBJW=OBJ/SCFO
      IF(INFO.EQ.0) WRITE (8,140) OBJW
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,WK(NSCAL))
      IF (IPRNT1.LT.2) GO TO 50
      ICALC=4
      IF (INFO.EQ.0.AND.NCON.GT.0) CALL ADS402 (ICALC,G,NCON,WK(NSCFG))
50    IF (INFO.EQ.0) WRITE (8,150)
      RETURN
C     ------------------------------------------------------------------
C     FORMATS.
C     ------------------------------------------------------------------
60    FORMAT (/,5X,'UNCONSTRAINED FUNCTION')
70    FORMAT (/,5X,'CONSTRAINED FUNCTION')
80    FORMAT (5X,'IONED =',I2,'  GOLDEN SECTION METHOD')
90    FORMAT (5X,'IONED =',I2,'  GOLDEN SECTION + POLYNOMIAL REFINEMENT'
     1)
100   FORMAT (5X,'IONED =',I2,'  POLYNOMIAL FIT AFTER GETTING BOUNDS')
110   FORMAT (5X,'IONED =',I2,
     1'  POLYNOMIAL FIT WITHOUT FIRST GETTING BOUNDS')
120   FORMAT(//,5X,'* * * * * BEGIN ONE-DIMENSIONAL SEARCH * * * * *')
130   FORMAT (/,5X,'ALPHA =',1PE13.5)
140   FORMAT (/,5X,'OBJ =',1PE13.5)
150   FORMAT(/,5X,'* * * * * END OF ONE-DIMENSIONAL SEARCH * * * * *')
      END
C
C
C
C=DECK      ADS002
C --- SUBROUTINE ADS002 (INFO,ISTRAT,IOPT,IONED,NDV,NCON,OBJ,X,
C    1SVLB,SVUB,G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK)
C     DIMENSION X(NDV),SVLB(NDV),SVUB(NDV),G(NCON),IDG(NCON),IC(NCOLA),
C    1 DF(NDV),A(NRA,NCOLA),WK(NRWK),IWK(NRIWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO CONTROL OPTIMIZATION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C --- OUTPUT
C
      SUBROUTINE ADS002 (INFO,ISTRAT,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB
     1,G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),TEMP(10),ITEMP(10)
C
C     ------------------------------------------------------------------
C     SCALAR PARAMETERS.
C     ------------------------------------------------------------------
      ALPHA=WK(52)
      ALPMAX=WK(57)
      ALPSAV=WK(58)
      BETA=WK(61)
      CT=WK(3)
      CTL=WK(4)
      CTLMIN=WK(5)
      CTMIN=WK(6)
      DABOBJ=WK(8)
      DABOBM=WK(9)
      DELOBJ=WK(12)
      DELOBM=WK(13)
      DF2=WK(63)
      DLOBJ1=WK(15)
      DLOBJ2=WK(16)
      DX1=WK(17)
      DX2=WK(18)
      GMAX1=WK(71)
      GMX1=WK(90)
      OBJ1=WK(80)
      PHI=WK(83)
      SCFO=WK(32)
      SLOPF=WK(85)
      STOL=WK(34)
      THETAZ=WK(35)
      ZRO=WK(37)
C     INTEGER.
      ICNDIR=IWK(1)
      ICOUNT=IWK(22)
      IDAB=IWK(23)
      IDEL=IWK(25)
      IDIVCT=IWK(27)
      IFCALL=IWK(28)
      IGCALL=IWK(29)
      IPRNT2=IWK(39)
      ITER=IWK(45)
      ITMAX=IWK(3)
      ITRMOP=IWK(4)
      IVAMET=IWK(46)
      KGOTO=IWK(52)
      KOUNT=IWK(53)
      NAC=IWK(58)
      NACS=IWK(59)
      NAVC=IWK(61)
      NGRAD=IWK(65)
      N2GOTO=IWK(70)
      NRB=IWK(67)
      NVC=IWK(68)
C     ARRAY STARTING LOCATIONS.
      NSCFG=IWK(102)
      NSCAL=IWK(105)
      NXTMP1=IWK(106)
      NS=IWK(109)
      NXOLD=IWK(110)
      NB=IWK(111)
      NGL=IWK(114)
      NDG=IWK(117)
      NC=IWK(118)
      NTHETA=IWK(119)
      NH=IWK(120)
      NDX=IWK(121)
      NDFG=IWK(122)
      NGTMP=IWK(112)
      NICQP=IWK(153)
      NISIDC=IWK(152)
      NITMP2=IWK(155)
      IF (INFO.EQ.0) KGOTO=0
C     TURN ON ISLOPF.
      IWK(43)=1
      IF(ISTRAT.EQ.8) IWK(43)=0
C     TURN OFF ISLOPG.
      IWK(44)=0
      GO TO (10,20,20,30,40), IOPT
10    CONTINUE
C     ------------------------------------------------------------------
C     IOPT = 1.  FLETCHER-REEVES UNCONSTRAINED MINIMIZATION.
C     ------------------------------------------------------------------
      IVAMET=3
      CALL ADS204 (KGOTO,INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,ITMAX,ICNDIR,D
     1F,WK(NS),ZRO,DLOBJ1,DLOBJ2,DX1,DX2,WK(NXOLD),SVLB,SVUB,DELOBJ,DABO
     2BJ,ITRMOP,WK(NXTMP1),IPRNT2,WK,IWK,G,WK(NSCAL),WK(NH),WK(NDX),WK(N
     3DFG),IVAMET,IC,IDG,IWK(NICQP),SCFO,IFCALL,IGCALL,ALPHA,ALPSAV,DF2,
     4OBJ1,ICOUNT,IDAB,IDEL,ITER,N2GOTO,ALPMAX,WK(NSCFG))
      GO TO 50
20    CONTINUE
C     ------------------------------------------------------------------
C     IOPT = 2 OR 3.  DFP OR BFGS METHOD.
C     ------------------------------------------------------------------
      IVAMET=1
      IF (IOPT.EQ.3) IVAMET=2
      CALL ADS235 (KGOTO,INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,ITMAX,ICNDIR,D
     1F,WK(NS),ZRO,DLOBJ1,DLOBJ2,DX1,DX2,WK(NXOLD),SVLB,SVUB,DELOBJ,DABO
     2BJ,ITRMOP,WK(NXTMP1),IPRNT2,WK,IWK,G,WK(NSCAL),WK(NH),WK(NDX),WK(N
     3DFG),IVAMET,IC,IDG,IWK(NISIDC),SCFO,IFCALL,IGCALL,ALPHA,ALPSAV,DF2
     4,OBJ1,ICOUNT,IDAB,IDEL,IDIVCT,ITER,N2GOTO,ALPMAX,WK(NSCFG))
      GO TO 50
30    CONTINUE
C     ------------------------------------------------------------------
C     IOPT = 4.  METHOD OF FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     TURN ON ISLOPG.
      IWK(44)=1
C     PUT INFORMATION IN TEMP FOR TRANSFER (TO REDUCE NUMBER OF PARAM)
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      CALL ADS205 (KGOTO,INFO,IONED,NDV,NCON,ITMAX,ICNDIR,NGT,NAC,NVC,IP
     1RNT2,ITRMOP,OBJ,ZRO,CT,CTMIN,CTL,CTLMIN,STOL,THETAZ,DELOBJ,DABOBJ,
     2SCFO,SLOPF,ALPHA,ALPMAX,X,SVLB,SVUB,DF,WK(NS),G,IC,IDG,WK(NDG),WK(
     3NTHETA),WK(NC),IWK(NISIDC),WK(NXOLD),WK(NXTMP1),WK(NGL),WK(NSCAL),
     4IWK(NITMP2),WK(NSCFG),A,NRA,NCOLA,WK(NB),NRB,WK,IWK,
     5ICOUNT,IDAB,IDEL,ITER,N2GOTO,NACS,NAVC,NGRAD,ISTRAT,TEMP)
C     GET INFORMATION BACK FROM TEMP.
      ALPSAV=TEMP(1)
      BETA=TEMP(2)
      DF2=TEMP(3)
      OBJ1=TEMP(4)
      PHI=TEMP(5)
      DLOBJ1=TEMP(6)
      DLOBJ2=TEMP(7)
      DX1=TEMP(8)
      DX2=TEMP(9)
      GO TO 50
40    CONTINUE
C     ------------------------------------------------------------------
C     IOPT = 5.  MODIFIED METHOD OF FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     TURN ON ISLOPG.
      IWK(44)=1
C     PUT INFO IN TEMP TO SHORTEN PARAMETER LIST.
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      TEMP(10)=GMAX1
      ITEMP(1)=ICOUNT
      ITEMP(2)=IDAB
      ITEMP(3)=IDEL
      ITEMP(4)=ITER
      ITEMP(5)=KOUNT
      ITEMP(6)=LGOTO
      ITEMP(7)=NACS
      ITEMP(8)=NAVC
      ITEMP(9)=NGRAD
      ITEMP(10)=ISTRAT
      CALL ADS231 (KGOTO,INFO,IONED,NDV,NCON,ITMAX,ICNDIR,NGT,NAC,NVC,IP
     1RNT2,ITRMOP,OBJ,ZRO,CT,CTMIN,CTL,CTLMIN,STOL,THETAZ,DELOBJ,DABOBJ,
     2SCFO,SLOPF,ALPHA,ALPMAX,X,SVLB,SVUB,DF,WK(NS),G,IC,IDG,WK(NDG),WK(
     3NTHETA),WK(NC),IWK(NISIDC),WK(NXOLD),WK(NXTMP1),WK(NGL),WK(NSCAL),
     4IWK(NITMP2),WK(NSCFG),A,NRA,NCOLA,WK(NB),NRB,WK,IWK,WK(NGTMP),
     5ITEMP,TEMP,GMX1)
C     GET INFO BACK FROM TEMP.
      ALPSAV=TEMP(1)
      BETA=TEMP(2)
      DF2=TEMP(3)
      OBJ1=TEMP(4)
      PHI=TEMP(5)
      DLOBJ1=TEMP(6)
      DLOBJ2=TEMP(7)
      DX1=TEMP(8)
      DX2=TEMP(9)
      GMAX1=TEMP(10)
      ICOUNT=ITEMP(1)
      IDAB=ITEMP(2)
      IDEL=ITEMP(3)
      ITER=ITEMP(4)
      KOUNT=ITEMP(5)
      LGOTO=ITEMP(6)
      NACS=ITEMP(7)
      NAVC=ITEMP(8)
      NGRAD=ITEMP(9)
      ISTRAT=ITEMP(10)
50    CONTINUE
C     STORE CHANGED VALUES IN WORK ARRAYS.
C     REAL.
      WK(52)=ALPHA
      WK(57)=ALPMAX
      WK(58)=ALPSAV
      WK(61)=BETA
      WK(3)=CT
      WK(4)=CTL
      WK(63)=DF2
      WK(71)=GMAX1
      WK(80)=OBJ1
      WK(83)=PHI
      WK(85)=SLOPF
      WK(90)=GMX1
C     INTEGER.
      IWK(22)=ICOUNT
      IWK(23)=IDAB
      IWK(25)=IDEL
      IWK(27)=IDIVCT
      IWK(28)=IFCALL
      IWK(29)=IGCALL
      IWK(45)=ITER
      IWK(46)=IVAMET
      IWK(52)=KGOTO
      IWK(53)=KOUNT
      IWK(58)=NAC
      IWK(59)=NACS
      IWK(61)=NAVC
      IWK(65)=NGRAD
      IWK(68)=NVC
      IWK(70)=N2GOTO
      IF (KGOTO.GT.0) GO TO 60
      IF (ISTRAT.LT.1.OR.ISTRAT.GT.5) GO TO 60
      WK(12)=AMAX1(0.6*WK(12),DELOBM)
      WK(8)=AMAX1(0.6*WK(8),DABOBM)
60    CONTINUE
      IF (KGOTO.EQ.0) INFO=0
      IF(INFO.EQ.0) RETURN
      IWK(43)=0
      IWK(44)=0
      RETURN
      END
C
C
C
C=DECK      ADS003
C --- SUBROUTINE ADS003 (INFO,ISTRAT,IOPT,IONED,NDV,NCON,IGRAD,
C    1 OBJ,X,SVLB,SVUB,G,IDG,NGT,NAC,NVC,IC,DF,A,NRA,NCOLA,WK,IWK,
C    2 ISFLAG)
C     DIMENSION X(NDV),SVLB(NDV),SVUB(NDV),G(NCON),A(NRA,NCOLA),WK(NRWK)
C    1,IWK(NRIWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO CONTROL OPTIMIZATION STRATEGY.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATSJUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C
C --- OUTPUT
      SUBROUTINE ADS003 (INFO,ISTRAT,IOPT,IONED,NDV,NCON,IGRAD,OBJ,X,SVL
     1B,SVUB,G,IDG,NGT,NAC,NVC,IC,DF,A,NRA,NCOLA,WK,IWK,ISFLAG)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),TEMP2(10)
C
C     REAL.
      ALAMDZ=WK(1)
      ALPHA3=WK(53)
      ALPHB3=WK(55)
      ALPSV3=WK(59)
      BETAMC=WK(2)
      CT=WK(3)
      CTL=WK(4)
      CTLMIN=WK(5)
      CTMIN=WK(6)
      DABSTR=WK(10)
      DELSTR=WK(14)
      EPSPEN=WK(19)
      GMAX=WK(70)
      GMULTZ=WK(23)
      OBJR=WK(77)
      OBJZ=WK(79)
      OBJ1B=WK(81)
      PENALT=WK(82)
      PSAIZ=WK(24)
      RMULT=WK(25)
      RMVLMT=WK(84)
      RMVLMZ=WK(26)
      RP=WK(27)
      RPMAX=WK(28)
      RPMULT=WK(29)
      RPPMIN=WK(30)
      RPPRIM=WK(31)
      SCFO=WK(32)
      SCLMIN=WK(33)
      STOL=WK(34)
      SLOPF=WK(85)
      ZRO=WK(37)
C     INTEGER.
      IDAB3=IWK(25)
      IDEL3=IWK(26)
      IFCALL=IWK(28)
      IGCALL=IWK(29)
      IGMXC=IWK(30)
      IMVCH=IWK(35)
      IMVCM=IWK(36)
      INFO2C=IWK(37)
      IPRNT3=IWK(40)
      ISLOP=IWK(42)
      ITRMST=IWK(5)
      JGOTO=IWK(48)
      JONED=IWK(6)
      JTER=IWK(51)
      JTMAX=IWK(7)
      NACT=IWK(60)
      NAVC=IWK(61)
      NGOTO=IWK(63)
      NRB=IWK(67)
      NRAA=NDV+1
C     ARRAY STARTING LOCATIONS.
      NSCFG=IWK(102)
      NSCAL=IWK(105)
      NXTMP=IWK(106)
      NXTMP2=IWK(107)
      NXTMP3=IWK(108)
      NS=IWK(109)
      NXOLD=IWK(110)
      NB=IWK(111)
      NGL=IWK(114)
      NC=IWK(118)
      NTHETA=IWK(119)
      NH=IWK(120)
      NDX=IWK(121)
      NDFG=IWK(122)
      NLAMDA=IWK(123)
      NPARAM=IWK(124)
      NVLBTP=IWK(126)
      NVUBTP=IWK(127)
      NISIDC=IWK(152)
      NICQP=IWK(153)
      NITMP=IWK(154)
      GO TO (10,20,30,40,50,60,70,80,85), ISTRAT
C     ------------------------------------------------------------------
C     ISTRAT = 1.  EXTERIOR PENALTY FUNCTION METHOD.
C     ------------------------------------------------------------------
10    CONTINUE
      CALL ADS301 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,WK(NXTMP
     2),CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,WK(NSCAL),WK(NLAMDA),WK(
     3NPARAM),SCFO,ISFLAG,IFCALL,IGCALL,OBJZ,OBJ1B,PENALT,IDAB,IDEL,INFO
     42C,JTER,IWK(NITMP),IWK(NISIDC),WK(NSCFG))
      GO TO 90
20    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 2.  LINEAR EXTENDED INTERIOR PENALTY FUNCTION METHOD.
C     ------------------------------------------------------------------
      CALL ADS303 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,WK(NXTMP
     2),CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RPM
     3ULT,WK(NSCAL),WK(NLAMDA),WK(NPARAM),SCFO,ISFLAG,IFCALL,IGCALL,OBJZ
     4,OBJ1B,PENALT,IDAB,IDEL,INFO2C,JTER,IWK(NITMP),IWK(NISIDC),WK(NSCF
     5G))
      GO TO 90
30    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 3.  QUADRATIC EXTENDED INTERIOR PENALTY FUNCTION METHOD.
C     ------------------------------------------------------------------
      CALL ADS304 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,WK(NXTMP
     2),CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RPM
     3ULT,WK(NSCAL),WK(NLAMDA),WK(NPARAM),SCFO,ISFLAG,IFCALL,IGCALL,OBJZ
     4,OBJ1B,PENALT,IDAB,IDEL,INFO2C,JTER,IWK(NITMP),IWK(NISIDC),WK(NSCF
     5G))
      GO TO 90
40    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 4.  CUBIC EXTENDED INTERIOR PENALTY FUNCTION METHOD.
C     ------------------------------------------------------------------
      CALL ADS305 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,WK(NXTMP
     2),CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RPM
     3ULT,WK(NSCAL),WK(NLAMDA),WK(NPARAM),SCFO,ISFLAG,IFCALL,IGCALL,OBJZ
     4,OBJ1B,PENALT,IDAB,IDEL,INFO2C,JTER,IWK(NITMP),IWK(NISIDC),WK(NSCF
     5G))
      GO TO 90
50    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 5.  AUGMENTED LAGRANGE MULTIPLIER METHOD.
C     ------------------------------------------------------------------
      CALL ADS306 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,WK(NXTMP
     2),CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RPM
     3ULT,WK(NSCAL),ALAMDZ,WK(NLAMDA),WK(NPARAM),SCFO,ISFLAG,IFCALL,IGCA
     4LL,CK,OBJZ,OBJ1B,PENALT,IDAB,IDEL,INFO2C,JTER,IWK(NITMP),IWK(NISID
     5C),WK(NSCFG))
      GO TO 90
60    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 6.  SEQUENTIAL LINEAR PROGRAMMING.
C     ------------------------------------------------------------------
      CALL ADS320 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,A,NCOL
     1A,NRA,X,IDG,WK,IWK,IWK(NICQP),SVLB,SVUB,WK(NS),WK(NLAMDA),WK(NDFG)
     2,WK(NDX),ZRO,IPRNT3,RMVLMZ,WK(NSCAL),WK(NXTMP),SCLMIN,DELSTR,DABST
     3R,ITRMST,JTMAX,SCFO,IWK(NITMP),CT,CTMIN,CTL,CTLMIN,NAC,NVC,WK(NXTM
     4P2),WK(NXTMP3),OBJR,OBJ1B,RMVLMT,IDAB,IDEL,IMVCM,JTER,IWK(NISIDC),
     5WK(NSCFG))
      GO TO 90
70    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 7.  METHOD OF CENTERS.
C     ------------------------------------------------------------------
      CALL ADS330 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,A,NCOL
     1A,NRA,X,IDG,WK,IWK,IWK(NICQP),SVLB,SVUB,WK(NS),WK(NLAMDA),WK(NPARA
     2M),WK(NVLBTP),WK(NVUBTP),ZRO,IPRNT3,RMVLMZ,WK(NSCAL),WK(NXTMP),SCL
     3MIN,DELSTR,DABSTR,ITRMST,JTMAX,BETAMC,SCFO,IWK(NITMP),CT,CTMIN,CTL
     4,CTLMIN,NAC,NVC,WK(NDX),WK(NXTMP2),WK(NXTMP3),GMAX,OBJR,OBJ1B,IDAB
     5,IDEL,IGMXC,IMVCH,JTER,IWK(NISIDC),WK(NSCFG))
      GO TO 90
80    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 8.  VARIABLE METRIC METHOD FOR CONSTRAINED OPTIMIZATION.
C     ------------------------------------------------------------------
C     PUT INFO IN TEMP2 TO REDUCE NUMBER OF CALLING PARAMETERS.
      TEMP2(1)=CTMIN
      TEMP2(2)=CTL
      TEMP2(3)=CTLMIN
      TEMP2(4)=GMULTZ
      TEMP2(5)=ALPHA3
      TEMP2(6)=ALPHB3
      TEMP2(7)=ALPSV3
      TEMP2(8)=OBJ1B
      TEMP2(9)=SLOPF
      TEMP2(10)=STOL
      CALL ADS310 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,A,NCOL
     1A,NRA,WK(NH),X,IDG,WK,IWK,IWK(NICQP),SVLB,SVUB,WK(NS),WK(NLAMDA),W
     2K(NPARAM),WK(NXOLD),WK(NDFG),WK(NDX),ZRO,IPRNT3,PSAIZ,WK(NSCAL),WK
     3(NXTMP2),DELSTR,DABSTR,ITRMST,JTMAX,IWK(NISIDC),WK(NGL),WK(NXTMP),
     4SCFO,IWK(NITMP),WK(NB),NRB,WK(NTHETA),CT,NAC,NVC,
     5WK(NC),JONED,WK(NXTMP3),WK(NVLBTP),WK(NVUBTP),
     6IDAB,IDEL,ISLOP,JTER,NGOTO,NACT,NAVC,TEMP2,WK(NSCFG))
C     GET INFO BACK FROM TEMP2.
      CTMIN=TEMP2(1)
      CTL=TEMP2(2)
      CTLMIN=TEMP2(3)
      GMULTZ=TEMP2(4)
      ALPHA3=TEMP2(5)
      ALPHB3=TEMP2(6)
      ALPSV3=TEMP2(7)
      OBJ1B=TEMP2(8)
      SLOPF=TEMP2(9)
      STOL=TEMP2(10)
      GO TO 90
85    CONTINUE
C     ------------------------------------------------------------------
C     ISTRAT = 9.  SEQUENTIAL CONVEX PROGRAMMING.
C     ------------------------------------------------------------------
      CALL ADS325 (JGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,A,NCOL
     1A,NRA,X,IDG,WK,IWK,IWK(NICQP),SVLB,SVUB,WK(NS),WK(NLAMDA),WK(NDFG)
     2,WK(NDX),ZRO,IPRNT3,WK(NSCAL),WK(NXTMP),SCLMIN,DELSTR,DABST
     3R,ITRMST,JTMAX,SCFO,IWK(NITMP),CT,CTMIN,CTL,CTLMIN,NAC,NVC,WK(NXTM
     4P2),WK(NXTMP3),OBJR,OBJ1B,IDAB,IDEL,JTER,IWK(NISIDC),
     5WK(NB),NRB,WK(NC),WK(NTHETA),WK(NGL),WK(NH),NRAA,RMVLMZ,RMVLMT,
     6WK(NSCFG))
90    CONTINUE
C     STORE PARAMETERS BACK IN WORK ARRAYS.
C     REAL.
      WK(53)=ALPHA3
      WK(55)=ALPHB3
      WK(59)=ALPSV3
      WK(19)=EPSPEN
      WK(70)=GMAX
      WK(77)=OBJR
      WK(79)=OBJZ
      WK(81)=OBJ1B
      WK(82)=PENALT
      WK(84)=RMVLMT
      WK(27)=RP
      WK(31)=RPPRIM
      WK(85)=SLOPF
C     INTEGER.
      IWK(25)=IDAB3
      IWK(26)=IDEL3
      IWK(28)=IFCALL
      IWK(29)=IGCALL
      IWK(30)=IGMXC
      IWK(35)=IMVCH
      IWK(37)=INFO2C
      IWK(42)=ISLOP
      IWK(48)=JGOTO
      IWK(51)=JTER
      IWK(60)=NACT
      IWK(61)=NAVC
      IWK(63)=NGOTO
      IF (JGOTO.EQ.0) INFO=0
      RETURN
      END
C
C
C
C=DECK      ADS004
C --- SUBROUTINE ADS004 (ISTRAT,IOPT,IONED,IWK,NDV,NCON,NCOLA,NGT,
C    *NEQCON)
C     DIMENSION IWK(NRIWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO DEFINE WORK ARRAY STORAGE ALLOCATIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT.
C     ISTRAT - OPTIMIZATION STRATEGY IDENTIFIER.
C     IOPT - OPTIMIZER NUMBER.
C     IONED - ONE-DIMENSIONAL SEARCH IDENTIFIER.
C     NDV - NUMBER OF DESIGN VARIABLES.
C     NCON - NUMBER OF CONSTRAINTS.
C     NCOLA - DIMENSIONED COLUMNS OF MATRIX A.
C     NEQCON - NUMBER OF EQUALITY CONSTRAINTS.
C
C --- OUTPUT.
C     IWK(I), I=101,200 - STORAGE ALLOCATION POINTERS FOR WORK ARRAYS.
C
      SUBROUTINE ADS004 (ISTRAT,IOPT,IONED,IWK,NDV,NCON,NCOLA,NGT,
     *NEQCON)
      DIMENSION IWK(*)
C
C     ------------------------------------------------------------------
C     REAL ARRAY STORAGE.
C     ------------------------------------------------------------------
C
C     RSCALR, REAL SCALAR VARIABLES.
C     100 LOCATIONS PRESENTLY RESERVED.
C     IF METHOD OF CENTERS , NCON,NDV SHOULD BE ADDED 1.
      NRB=MIN0(NCON,NCOLA)
C BEG OCT 1993
C  THE FOLLOWING STATEMENT SEEMS WRONG. I THINK THAT NRB (NUMBER OF
C  ROWS OF B) SHOULD ALWAYS BE EQUAL TO NCON + NDV.
C     IF(NRB.LT.(2*NDV)) NRB=NRB+NDV
      NRB=NRB+NDV
C END OCT 1993
      IWK(101)=1
C     SCFG. SCALE FACTORS FOR CONSTRAINTS.
      IWK(102)=101
C     SVLB, SCALED VLB-VECTOR.
      IWK(103)=IWK(102)+NCON
C     SVUB, SCALED VUB-VECTOR.
      IWK(104)=IWK(103)+NDV+1
C     SCFX, SCALE FACTORS FOR DESIGN VARIABLES.
      IWK(105)=IWK(104)+NDV+1
C     XTMP, TEMPORARY X-VECTOR.
      IWK(106)=IWK(105)+NDV+1
C     XTMP2, TEMPORARY X-VECTOR.
      IWK(107)=IWK(106)+NDV+1
C     XTMP3, TEMPORARY X-VECTOR.
      IWK(108)=IWK(107)+NDV+1
C     S, SEARCH DIRECTION.
      IWK(109)=IWK(108)+NDV+1
C     XOLD, X-VECTOR AT ALPHA=0.
      IWK(110)=IWK(109)+NDV+1
C     B, BTMP MATRIX USED TO FIND USABLE-FEASIBLE DIRECTION.
      IWK(111)=IWK(110)+NDV+1
C     GTMP, TEMPORARY STORAGE OF ACTIVE CONSTRAINTS.
      IWK(112)=IWK(111)+NRB**2
C
      IF (IOPT.LT.4.AND.ISTRAT.LT.8) IWK(112)=IWK(111)
C
C     GGU, TEMPORARY STORAGE FOR G-VECTOR.
      IWK(113)=IWK(112)+NCON+NDV+1
C     GGL, TEMPORARY STORAGE FOR G-VECTOR.
      IWK(114)=IWK(113)+NCON+1
C     GG1, TEMPORARY STORAGE FOR G-VECTOR.
      IWK(115)=IWK(114)+NCON+NDV+1
C     GG2, TEMPORARY STORAGE FOR G-VECTOR.
      IWK(116)=IWK(115)+NCON+1
C     DG, GRADIENT OF ACTIVE/VIOLATED CONSTRAINTS W.R.T. ALPHA.
      IWK(117)=IWK(116)+NCON+1
C     C.  METHOD OF FEASIBLE DIRECTIONS SUB-PROBLEM.
      IWK(118)=IWK(117)+NCON+1
C     THETA.  METHOD OF FEASIBLE DIRECTIONS.
      IWK(119)=IWK(118)+NRB
C
      IF (IOPT.LT.4) IWK(119)=IWK(118)
C
C     H-MATRIX.
      IWK(120)=IWK(119)+NRB
C
      IF (IOPT.LT.4) IWK(120)=IWK(119)
C
C     DX.
      IWK(121)=IWK(120)+(NRB*(NRB+1))/2
      IF(ISTRAT.EQ.9) IWK(121)=IWK(120)+(NDV+1)*NGT
C
      IF (IOPT.GT.3.AND.ISTRAT.LT.8) IWK(121)=IWK(120)
C
C     DFG.
      IWK(122)=IWK(121)+NRB
C     ALAMDA.
      IWK(123)=IWK(122)+NDV+1
C     PPARAM.
      NFORLG=MAX0(NCON,NDV+NRB)
      IWK(124)=IWK(123)+NFORLG+1
C     XBST.
      IWK(125)=IWK(124)+NCON+1
C     VLBTMP.
      IWK(126)=IWK(125)+NDV+1
C     VUBTMP.
      IWK(127)=IWK(126)+NDV+1
C     PENLT.
      IWK(128)=IWK(127)+NDV+1
C     NEXT AVAILABLE STORAGE.
      IWK(129)=IWK(128)
      IF (NEQCON.GT.0) IWK(129)=IWK(128)+NCON
C     STORAGE USED.
      IWK(150)=IWK(129)
C     ------------------------------------------------------------------
C     INTEGER ARRAY STORAGE.
C     ------------------------------------------------------------------
C
C     ISCALR, INTEGER SCALAR INFORMATION.
C     RESERVE 100 STORAGE ALLOCATIONS FOR NOW.
      IWK(151)=1
C     ISIDC, SIDE CONSTRAINT IDENTIFIERS.
      IWK(152)=IWK(151)+170
C     ICQP. IC FOR QP SUB=PROBLEM.
      IWK(153)=IWK(152)+NDV+1
C     ITMP, TEMPORARY INTEGER ARRAY USED IN STRATEGIES FOR IDG.
      IWK(154)=IWK(153)+NCON
C     ITMP2, TEMPORARY INTEGER ARRAY USED IN FEASIBLE DIRECTIONS.
      IWK(155)=IWK(154)+NCON
C     NEXT AVAILABLE STORAGE.
      IWK(156)=IWK(155)+NRB+NDV
C     STORAGE USED.
      IWK(170)=IWK(156)
      RETURN
      END
C
C
C
C=DECK      ADS005
C --- SUBROUTINE ADS005 (ISTRAT,IOPT,IONED,NDV,WK,IWK)
C     DIMENSION WK(NRWK),IWK(NRIWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO INITIALIZE SCALAR PARAMETERS TO THEIR DEFAULT VALUES.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C
C --- OUTPUT
C     WK(I), I=1,50 - SCALAR REAL VARIABLES.
C     IWK(I), I=101,150 - SCALAR INTEGER VARIABLES.
C
      SUBROUTINE ADS005 (ISTRAT,IOPT,IONED,NDV,WK,IWK)
      DIMENSION WK(*),IWK(*)
C     DATA STATEMENTS FOR DEFAULTS.
C     ------------------------------------------------------------------
C     REAL SCALARS.
C     ------------------------------------------------------------------
C     FIRST 50 LOCATIONS ARE RESERVED FOR USER-CONTROLED VALUES.
C     ( 1) ALAMDZ ( 2) BETAMC ( 3) CT     ( 4) CTL    ( 5) CTLMIN
C     ( 6) CTMIN  ( 7) DABALP ( 8) DABOBJ ( 9) DABOBM (10) DABSTR
C     (11) DELALP (12) DELOBJ (13) DELOBM (14) DELSTR (15) DLOBJ1
C     (16) DLOBJ2 (17) DX1    (18) DX2    (19) EPSPEN (20) EXTRAP
C     (21) FDCH   (22) FDCHM  (23) GMULTZ (24) PSAIZ  (25) RMULT
C     (26) RMVLMZ (27) RP     (28) RPMAX  (29) RPMULT (30) RPPMIN
C     (31) RPPRIM (32) SCFO   (33) SCLMIN (34) STOL   (35) THETAZ
C     (36) XMULT  (37) ZRO    (38) PMLT
      WK(1)=0.0
      WK(2)=0.
      WK(3)=-0.03
      IF (IOPT.EQ.4) WK(3)=-.1
      WK(4)=-0.005
      WK(5)=0.001
      WK(6)=0.004
      WK(7)=0.0001
      IF (IONED.EQ.3.OR.IONED.EQ.8) WK(7)=.001
      WK(8)=0.0
      WK(9)=0.0
      WK(10)=0.0
      WK(11)=0.005
      IF (IONED.EQ.3.OR.IONED.EQ.8) WK(11)=.05
      WK(12)=0.001
      WK(13)=0.01
      WK(14)=0.001
      WK(15)=0.1
      WK(16)=1000.
      WK(17)=0.01
      WK(18)=0.2
      WK(19)=-0.05
      WK(20)=5.0
      WK(21)=0.01
      WK(22)=0.001
      WK(23)=10.
      WK(24)=0.95
      WK(25)=5.
      WK(26)=0.2
      IF(ISTRAT.EQ.9) WK(26)=.4
      WK(27)=10.
      WK(28)=1.0E+10
      WK(29)=0.2
      WK(30)=1.0E-10
      WK(31)=100.
      WK(32)=0.
      WK(33)=0.001
      WK(34)=0.001
      WK(35)=0.1
      WK(36)=2.618034
      WK(37)=0.00001
      WK(38)=10.
C     ------------------------------------------------------------------
C     INTEGER SCALARS.
C     ------------------------------------------------------------------
C     ( 1) ICNDIR ( 2) ISCAL  ( 3) ITMAX  ( 4) ITRMOP ( 5) ITRMST
C     ( 6) JONED  ( 7) JTMAX
      IWK(1)=NDV+1
      IWK(2)=1
      IWK(3)=40
      IWK(4)=3
      IWK(5)=2
      IWK(6)=IONED
      IWK(7)=20
      RETURN
      END
C
C
C
C=DECK      ADS006
C --- SUBROUTINE ADS006 (NDV,NCON,VLB,VUB,ZRO,SCFX,SVLB,SVUB,SCFO,SCFG)
C     DIMENSION VLB(NDV),VUB(NDV),SVLB(NDV),SVUB(NDV),SCFX(NDV),
C    1SCFG(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO INITIALIZE SCALE FACTORS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                JULY. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      NDV  - NUMBER OF DESIGN VARIABLES.
C      NCON - NUMBER OF CONSTRAINTS.
C      VLB  - LOWER BOUND OF DESIGN VARIABLES.
C      VUB  - UPPER BOUND OF DESIGN VARIABLES.
C
      SUBROUTINE ADS006 (NDV,NCON,VLB,VUB,ZRO,SCFX,SVLB,SVUB,SCFO,SCFG)
      DIMENSION VLB(*),VUB(*),SVLB(*),SVUB(*),SCFX(*),SCFG(*)
C
      IF (SCFX(1).GT.ZRO) GO TO 20
      DO 10 I=1,NDV
      SCFX(I)=1.
10    CONTINUE
20    CONTINUE
      DO 30 I=1,NDV
      SVLB(I)=VLB(I)*SCFX(I)
      SVUB(I)=VUB(I)*SCFX(I)
30    CONTINUE
C     SCALE FACTOR FOR OBJECTIVE.
      IF (SCFO.LE.ZRO) SCFO=1.
      IF (NCON.EQ.0) RETURN
      IF (SCFG(1).GT.ZRO) RETURN
      DO 40 J=1,NCON
      SCFG(J)=1.
40    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS007
      SUBROUTINE ADS007 (JSCAL,INFO,ISTRAT,NDV,NCON,NGT,IC,OBJ,X,G,DF,A,
     1NRA,NCOLA,SCFX,SCFO,SCFG,VLB,VUB,IPRT,SXTMP,SGTMP,ZRO,SVLB,SVUB)
      DIMENSION IC(*),X(*),G(*),DF(*),A(NRA,*),SCFX(*),SCFG(*),VLB(*),VU
     1B(*),SXTMP(*),SGTMP(*),SVLB(*),SVUB(*)
C
        IF (JSCAL.LE.0.OR.JSCAL.GE.7) RETURN
        GO TO (10,110,260,340,340,260), JSCAL
10      CONTINUE
C     ------------------------------------------------------------------
C     CALCULATE SCALE FACTORS NEWLY.  JSCAL=1
C     ------------------------------------------------------------------
        DO 20 I=1,NDV
         D=AMAX1(0.1,ABS(X(I)))
         SCFX(I)=1./D
         IF(SCFX(I).LT.0.001) SCFX(I)=0.001
 20     CONTINUE
        DO 30 I=1,NDV
         SVLB(I)=SCFX(I)*VLB(I)
         SVUB(I)=SCFX(I)*VUB(I)
         IF(SVLB(I).LT.-1.0E+20) SVLB(I)=-1.0E+20
         IF(SVUB(I).GT.+1.0E+20) SVUB(I)=+1.0E+20
 30     CONTINUE
C
        VF=0.
        DO 40 I=1,NDV
 40     VF=VF+DF(I)**2
        VF=SQRT(VF)*FLOAT(NDV)
        D=AMAX1(0.1,VF)
        SCFO=1./D
        IF(SCFO.LT.0.001) SCFO=0.001
C
        IF(NGT.EQ.0.OR.NCON.EQ.0) GOTO 100
        DO 60 K=1,NGT
         J=IC(K)
         VG=0.
         DO 50 I=1,NDV
 50      VG=VG+A(I,K)**2
         VG=SQRT(VG)*FLOAT(NDV)
         D=AMAX1(0.001,VG)
         SCFG(J)=1./D
C
         IF(SCFG(J).LT.1.0) SCFG(J)=1.001
 60     CONTINUE
C
100     IF(IPRT.LT.3) GOTO 260
        WRITE (8,410) SCFO
        II=(NDV+4)/5
        I1=1
        I2=5
        DO 103 I=1,II
         IF (I2.GT.NDV) I2=NDV
         WRITE (8,420) I1,(SCFX(K),K=I1,I2)
         I1=I1+5
         I2=I2+5
103     CONTINUE
        IF (NCON.EQ.0.OR.NGT.EQ.0) GOTO 260
        WRITE (8,430)
        WRITE (8,440) (IC(I),I=1,NGT)
        WRITE (8,450)
        DO 106 I=1,NGT
         J=IC(I)
         SGTMP(I)=SCFG(J)
106     CONTINUE
        WRITE (8,460) (SGTMP(I),I=1,NGT)
        IF (NGT.LT.NCON) WRITE (8,470)
        GOTO 260
C
110   CONTINUE
C     ------------------------------------------------------------------
C     CALCULATE ADDITIONAL SCALE FACTOR. JSCAL=2
C     ------------------------------------------------------------------
        IF (NGT.EQ.0.OR.NCON.EQ.0) GO TO 260
        IPP=0
        DO 150 K=1,NGT
         J=IC(K)
         R=ABS(1.-SCFG(J))
         IF (R.GT.0.0005) GO TO 150
         IF (IPP.EQ.0.AND.IPRT.GE.3) WRITE (8,480)
         IPP=1
         VG=0.
         DO 145 I=1,NDV
145      VG=VG+A(I,K)**2
         VG=SQRT(VG)*FLOAT(NDV)
         D=AMAX1(0.001,VG)
         SCFG(J)=1./D
         IF(SCFG(J).LT.1.0) SCFG(J)=1.001
         G(J)=SCFG(J)*G(J)
         IF(IPRT.GE.3) WRITE(8,490) J,SCFG(J)
150     CONTINUE
C
260     CONTINUE
C     ------------------------------------------------------------------
C     SCALE.  JSCAL=1,2,3,6
C     ------------------------------------------------------------------
      IF (JSCAL.EQ.2) GO TO 290
      OBJ=SCFO*OBJ
      DO 270 I=1,NDV
      X(I)=SCFX(I)*X(I)
270   CONTINUE
      IF (NCON.EQ.0) GO TO 290
      DO 280 J=1,NCON
      G(J)=SCFG(J)*G(J)
280   CONTINUE
290   CONTINUE
      IF (JSCAL.EQ.3) RETURN
      DO 300 I=1,NDV
      DF(I)=SCFO*DF(I)/SCFX(I)
300   CONTINUE
      IF (NGT.EQ.0.OR.NCON.EQ.0) GO TO 320
      DO 310 I=1,NDV
      DO 310 K=1,NGT
      J=IC(K)
      A(I,K)=SCFG(J)*A(I,K)/SCFX(I)
310   CONTINUE
320   CONTINUE
      RETURN
C
340   CONTINUE
C     ------------------------------------------------------------------
C     UN-SCALE.  JSCAL=4
C     ------------------------------------------------------------------
      DO 350 I=1,NDV
      X(I)=X(I)/SCFX(I)
350   CONTINUE
      IF (JSCAL.EQ.5) RETURN
      OBJ=OBJ/SCFO
      IF (NCON.EQ.0) RETURN
      DO 360 J=1,NCON
      G(J)=G(J)/SCFG(J)
360   CONTINUE
      RETURN
C
C     ------------------------------------------------------------------
C                            FORMATS
C     ------------------------------------------------------------------
410   FORMAT (//,5X,37HSCALING INFORMATION CALCULATED BY ADS,//,5X,
     139HOBJECTIVE FUNCTION SCALE FACTOR, SCFO =,1PE12.5,//,5X,
     229HDESIGN VARIABLE SCALE FACTORS)
420   FORMAT (I10,5(1PE12.5))
430   FORMAT (/,5X,24HCONSTRAINT SCALE FACTORS,//,5X,
     118HCONSTRAINT NUMBERS)
440   FORMAT (5I12)
450   FORMAT (/,5X,'SCALE FACTORS')
460   FORMAT (5X,1PE12.5,1PE12.5,1PE12.5,1PE12.5,1PE12.5)
470   FORMAT (/,5X,'ALL OTHER SCALE FACTORS = 1.0')
480   FORMAT (/,5X,
     1'ADDITIONAL CONSTRAINT SCALE FACTORS CALCULATED BY ADS',/,5X,
     1'CONSTRAINT   SCALE FACTOR')
490   FORMAT (5X,I6,6X,1PE12.5)
      END
C
C
C
C=DECK      ADS008
C --- SUBROUTINE ADS008 (NDV,ISTRAT,NCON,NGT,A,NRA,IC,G,IDG,DF,ALAMDA,
C    *PPARAM,RP,EPSPEN)
C     DIMENSION G(NCON),IDG(NCON),A(NRA,NCOLA),IC(NCOLA),DF(NDV),
C    *ALAMDA(NCON),PPARAM(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE THE GRADIENTS OF PSEUDO OBJECTIVE FUNCTION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                JULY. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      NDV    ; NUMBER OF DESIGN VARIABLES.
C      ISTRAT ; OPTIMIZATION STRATEGY IDENTIFIER.
C      NGT   ; NUMBER OF ACTIVE CONSTRAINTS.
C      A      ; ARRAY CONTAINING GRADIENTS OF CONSTRAINTS IDENTIFIED BY
C               ARRAY IC.
C      NRA    ; NUMBER OF ROWS IN ARRAY A.
C      IC     ; ARRAY IDENTIFYING NGT ACTIVE CONSTRAINTS.
C      G      ; CONSTRAINT VALUES ASSOCIATED WITH CURRENT DESIGN.
C      IDG    ; CONSTRAINT TYPE IDENTIFIER.
C      ALAMDA ; ARRAY FOR LAGRANGE MULTIPLIER.
C      PPARAM ; ARRAY FOR PENALTY PARAMETER.
C      RP     ; PENALTY PARAMETER FOR EXTERIOR PENALTY FUNCTION METHOD.
C      EPSPEN ; TRANSITION POINT.
C --- OUTPUT
C      DF     ; GRADIENTS OF PSEUDO PBJECTIVE FUNCTION.
      SUBROUTINE ADS008 (NDV,ISTRAT,NCON,NGT,A,NRA,IC,G,IDG,DF,ALAMDA,PP
     1ARAM,RP,EPSPEN)
      DIMENSION G(*),IDG(*),A(NRA,*),IC(*),DF(*),ALAMDA(*),PPARAM(*)
      RETURN
      END
C
C
C
C=DECK      ADS009
C --- SUBROUTINE ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,
C    *NVC)
C     DIMENSION A(NRA,NCOLA),IC(NCOLA),IDG(NCON),G(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO REORDER IC AND A MATRIX
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                JULY. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      NDV  - NUMBER OF DESIGN VARIABLES.
C      A    - ARRAY CONTAINING GRADIENTS OF CONSTRAINTS IDENTIFIED BY
C             ARRAY IC.
C      NRA  - NUMBER OF ROWS IN ARRAY A.
C      NGT  - NUMBER OF CONSTRAINT GRADIENTS STORED IN A.
C      IC   - ARRAY IDENTIFYING CONSTRAINTS THAT ARE ACTIVE.
C      IDG  - CONSTRAINTS TYPE IDENTIFIER.
C      G    - CONSTRAINT VALUES.
C      CT   - CONSTRAINT TOLORANCE DEFINING ACTIVE NONLINEAR
C             CONSTRAINTS.
C      CTMIN- CONSTRAINT TOLORANCE DEFINING VIOLATION OF NONLINEAR
C             CONSTRAINTS.
C      CTL  - CONSTRAINT TOLORANCE DEFINING ACTIVE LINEAR CONSTRAINTS.
C      CTLMIN- CONSTRAINT TOLORANCE DEFINING VIOLATION OF LINEAR
C             CONSTRAINTS.
C --- OUTPUT
C      A    - REORDERED ARRAY A.
C      IC   - REORDERED ARRAY IC.
C      NAC  - NUMBER OF ACTIVE CONSTRAINTS.
C      NVC  - NUMBER OF VIOLATED CONSTRAINTS.
C
C --- NOTE
C     ORDERING OF A IS EQUALITY CONSTRAINTS, ACTIVE AND VIOLATED
C     INEQUALITY CONSTRAINTS, REMAINING CONSTRAINTS IN OREDER OF
C     DECREASING CRITICALITY.
C
      SUBROUTINE ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,
     1NVC)
      DIMENSION A(NRA,*),IC(*),IDG(*),G(*)
C
      NAC=0
      NVC=0
      DO 90 K=1,NGT
      ICK=IC(K)
      C1=CT
      C2=CTMIN
      IF (IABS(IDG(ICK)).LT.2) GO TO 30
C     LINEAR CONSTRAINT.
      C1=CTL
      C2=CTLMIN
30    CONTINUE
      GMAX=G(ICK)
      IF (GMAX.LT.C1) GO TO 40
C     THIS CONSTRAINT IS ACTIVE OR VIOLATED.  NO NEED TO SHIFT.
      IF (GMAX.GE.C1.AND.GMAX.LE.C2) NAC=NAC+1
      IF (GMAX.GT.C2) NVC=NVC+1
      GO TO 90
40    CONTINUE
      IF (K.EQ.NGT) GO TO 90
C     SEARCH FOR NEXT ACTIVE OR VIOLATED CONSTRAINT.
      K1=K+1
      IK=0
      DO 60 J=K1,NGT
      ICJ=IC(J)
      IK=J
      C1=CT
      C2=CTMIN
      IF (IABS(IDG(ICJ)).LT.2) GO TO 50
C     LINEAR CONSTRAINT.
      C1=CTL
      C2=CTLMIN
50    CONTINUE
      GG=G(ICJ)
      IF (GG.GE.C1.AND.GG.LE.C2) NAC=NAC+1
      IF (GG.GT.C2) NVC=NVC+1
      IF (GG.GE.C1) GO TO 70
60    CONTINUE
      GO TO 90
C     SHIFT.
70    ICS=IC(K)
      IC(K)=IC(IK)
      IC(IK)=ICS
      DO 80 I=1,NDV
      TMP=A(I,K)
      A(I,K)=A(I,IK)
      A(I,IK)=TMP
80    CONTINUE
90    CONTINUE
      NN=NAC+NVC+1
      IF (NN.GE.NGT) RETURN
      NGT1=NGT-1
      DO 120 K=NN,NGT1
      ICK=IC(K)
      GMAX=G(ICK)
      K1=K+1
      IK=0
      DO 100 J=K1,NGT
      ICJ=IC(J)
      IF (GMAX.GT.G(ICJ)) GO TO 100
      IK=J
      GMAX=G(ICK)
100   CONTINUE
      IF (IK.EQ.0) GO TO 120
      ICS=IC(K)
      IC(K)=IC(IK)
      IC(IK)=ICS
      DO 110 I=1,NDV
      TMP=A(I,K)
      A(I,K)=A(I,IK)
110   A(I,IK)=TMP
120   CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS010
C --- SUBROUTINE ADS010 (ISTRAT,NDV,OBJ,X,DELOBJ,DABOBJ,DELOBM,DABOBM,DA
C    1BSTR,ZRO)
C     DIMENSION X(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE PARAMETERS FOR CONVERGENCE CRITERIA.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                JULY  1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      ISTRAT - OPTIMIZATION STRATEGY IDENTIFIER.
C      NDV    - NUMBER OF DESIGN VARIABLES.
C      OBJ    - OBJECTIVE.
C      X      - DESIGN VARIABLES.
C      DELOBJ - RELATIVE CHANGE CRITERION FOR OPTIMIZATION LEVEL.
C      DABOBJ - ABSOLUTE CHANGE CRITERION FOR OPTIMIZATION LEVEL.
C      DELOBM - MINIMUM RELATIVE CHANGE CRITERION FOR OPTIMIZATION LEVEL
C               IN SUMT METHOD.
C      DABOBM - MINIMUM ABSOLUTE CHANGE CRITERION FOR OPTIMIZATION LEVEL
C               IN SUMT METHOD.
C      DABSTR - ABSOLUTE CHANGE CRITERION FOR STRATEGY LEVEL.
C --- OUTPUT
C
      SUBROUTINE ADS010 (ISTRAT,NDV,OBJ,X,DELOBJ,DABOBJ,DELOBM,DABOBM,DA
     1BSTR,ZRO)
      DIMENSION X(*)
C
C     RELATIVE CHANGE.
      IF (DELOBM.LE.ZRO) DELOBM=.01
      IF (DELOBJ.LE.ZRO) DELOBJ=.001
C     ABSOLUTE CHANGE.
      ABSOB=ABS(OBJ)
      DABA=0.001*ABSOB
      IF (DABA.LE.ZRO) DABA=.001
      IF (ISTRAT.NE.7) GO TO 20
C     IF STRATEGY IS METHOD OF CENTER, THEN CALCULATE THE AVERAGE VALUE
C     OF INITIAL DESIGN VARIABLES.
      XT=0.
      DO 10 I=1,NDV
      ABSX=ABS(X(I))
      XT=XT+ABSX
10    CONTINUE
      XT=XT/NDV
      IF (XT.LT.1.) XT=1.
      DABA=0.001*XT
20    CONTINUE
      IF(DABOBJ.LE.ZRO) DABOBJ=DABA
      IF (DABOBM.LE.ZRO) DABOBM=2.*DABA
      IF (DABSTR.LE.ZRO) DABSTR=DABA
      RETURN
      END
C
C
C
C=DECK      ADS101
C --- SUBROUTINE ADS101(ICALC,X1,F1,FP1,X2,F2,AZ,A1)
C     ------------------------------------------------------------------
C --- LINEAR POLYNOMIAL APPROXIMATION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.  IF ICALC=1 DO ONE-POINT
C             INTERPOLATION.  IF ICALC=2, DO TWO-POINT INTERPOLATION.
C     X1,F1,FP1 - FIRST X-F PAIR AND SLOPE.
C                 F1 AND YP1 ARE FUNCTION VALUE AND SLOPE AT X=X1.
C                 FP1 IS NOT USED IF ICALC=2.
C     X2,F2 - SECOND POINT AT WHICH FUNCTION IS GIVEN.  F2=FUNCTION
C             VALUE AT X=X2.  X2 AND F2 ARE NOT USED IF ICALC=1.
C
C --- OUTPUT
C     AZ,A1 - POLYNOMIAL COEFFICIENTS OF LINEAR INTERPOLATING
C             POLYNOMIAL.
C
C     APPROXIMATING FUNCTION IS F = AZ + A1*X.
C
      SUBROUTINE ADS101 (ICALC,X1,F1,FP1,X2,F2,AZ,A1)
C
C     EVALUATE COEFFICIENTS.
      IF (ICALC.EQ.1) A1=FP1
      IF (ICALC.GT.1) A1=(F2-F1)/(X2-X1)
      AZ=F1-A1*X1
      RETURN
      END
C
C
C
C=DECK      ADS102
C --- SUBROUTINE ADS102(ICALC,X1,F1,FP1,X2,F2,X3,F3,AZ,A1,A2)
C     ------------------------------------------------------------------
C --- QUADRATIC POLYNOMIAL APPROXIMATION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                           AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.  IF ICALC=1, DO TWO-POINT
C             APPROXIMATION.  IF ICALC=2, DO THREE-POINT APPROXIMATION.
C     X1,F1,FP1 - FIRST X-F PAIR AND SLOPE.
C                 F1 AND FP1 ARE FUNCTION VALUE AND SLOPE AT X=X1.
C                 FP1 IS NOT USED IF ICALC=2.
C     X2,F2 - SECOND X-F PAIR.
C     X3,F3 - THIRD X-F PAIR.  NOT USED IF ICALC=1.
C
C --- OUTPUT
C     AZ,A1,A2 - COEFFICIENTS OF INTERPOLATING POLYNOMIAL.
C
C     APPROXIMATING FUNCTION IS
C         F = AZ + A1*X + A2*X**2
C
      SUBROUTINE ADS102 (ICALC,X1,F1,FP1,X2,F2,X3,F3,AZ,A1,A2)
C
C     EVALUATE COEFFICIENTS.
      IF (ICALC.GT.1) GO TO 10
C     TWO-POINT APPROXIMATION, GIVEN (X1,F1,FP1), (X2,F2).
      A2=((F2-F1)/(X2-X1)-FP1)/(X2-X1)
      A1=FP1-2.*A2*X1
      AZ=F1-A1*X1-A2*X1*X1
      RETURN
C     THREE-POINT APPROXIMATION, GIVEN (X1,F1), (X2,F2), (X3,F3).
10    CONTINUE
      A1=(F2-F1)/(X2-X1)
      A2=((F3-F1)/(X3-X1)-A1)/(X3-X2)
      A1=A1-(X2+X1)*A2
      AZ=F1-A1*X1-A2*X1*X1
      RETURN
      END
C
C
C
C=DECK      ADS103
C --- SUBROUTINE ADS103 (ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,AZ,A1,A2,
C    * A3)
C     ------------------------------------------------------------------
C --- CUBIC POLYNOMIAL APPROXIMATION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                         AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.  IF ICALC=1, DO THREE-POINT
C             CURVE FIT.  IF ICALC=2, DO FOUR-POINT CURVE FIT.
C     X1,F1,FP1 - FIRST X-F PAIR AND SLOPE.
C                 F1 AND FP1 ARE FUNCTION VALUE AND SLOPE.
C                 IF ICALC=2, FP1 IS NOT USED.
C     X2,F2 - SECOND X-F PAIR.
C     X3,F3 - THIRD X-F PAIR.
C     X4,F4 - FOURTH X-F PAIR.  NOT USED IF ICALC=1.
C     ZRO - SMALL POSITIVE NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.
C
C --- OUTPUT
C     AZ,A1,A2,A3 - COEFFICIENTS OF INTERPOLATING POLYNOMIAL.
C
C     APPROXIMATING FUNCTION IS
C         F = AZ + A1*X + A2*X**2 + A3*X**3
C
      SUBROUTINE ADS103 (ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,AZ,A1,A2,
     1A3)
C
C     EVALUTE COEFFICIENTS.
C     CONSTANTS.
      X21=X2-X1
      X31=X3-X1
      X32=X3-X2
      X11=X1**2
      X22=X2**2
      X33=X3**2
      IF (ICALC.GT.1) GO TO 10
C     THREE-POINT APPROXIMATION, GIVEN (X1,F1,FP1), (X2,F2), (X3,F3).
      A3=(X21*(F3-F1)/X31-X31*(F2-F1)/X21+X32*FP1)/(X21*X31*X32)
      A2=((F2-F1)/X21-FP1)/X21-(2.*X1+X2)*A3
      A1=FP1-2.*A2*X1-3.*A3*X1*X1
      AZ=F1-X1*(A1+X1*(A2+A3*X1))
      RETURN
C     FOUR-POINT APPROXIMATION, GIVEN (X1,F1), (X2,F2), (X3,F3),
C     (X4,F4).
10    CONTINUE
      X42=X4-X2
      X41=X4-X1
      Q1=X33*X3*X21-X22*X2*X31+X11*X1*X32
      Q2=(X4**3)*X21-X22*X2*X41+X11*X1*X42
      Q3=X32*X21*X31
      Q4=X42*X21*X41
      Q5=F3*X21-F2*X31+F1*X32
      Q6=F4*X21-F2*X41+F1*X42
      DENOM=Q2*Q3-Q1*Q4
      A3=0.
      ANUM=Q3*Q6-Q4*Q5
      CHK=ZRO*ANUM
      IF (ABS(CHK).LT.ABS(DENOM).AND.ABS(DENOM).GT.1.0E-15) A3=ANUM/DENO
     1M
      A2=(Q5-Q1*A3)/Q3
      A1=(F2-F1)/X21-(X22*X2-X11*X1)*A3/X21-(X1+X2)*A2
      AZ=F1-X1*(A1+X1*(A2+X1*A3))
      RETURN
      END
C
C
C
C=DECK      ADS104
C --- SUBROUTINE ADS104(ICALC,AZ,A1,A2,A3,ZRO,XZ1,XZ2,XZ3,IER)
C     ------------------------------------------------------------------
C --- FIND ZERO(S) OF POLYNOMIAL TO 3RD ORDER.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.
C             ICALC=1, FIRST ORDER POLYNOMIAL.  FIND ONLY FIRST ZERO.
C             ICALC=2, SECOND ORDER POLYNOMIAL.  FIND TWO ZEROES.
C             ICALC=3, THIRD ORDER POLYNOMIAL.  FIND THREE ZEROES IF
C             ALL ARE REAL.
C     AZ, A1, A2, A3 - COEFFICIENTS OF THE POLYNOMIAL,
C         Y = AZ + A1*X + A2*X**2 + A3*X**3.
C     ZRO - SMALL POSITIVE NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.  ALSO THE PRECISION WITH WHICH
C         FIRST ZERO IS FOUND IN CUBIC INTERPOLATION.
C
C --- OUTPUT
C     XZ1, XZ2, XZ3 - THE VALUES OF X AT WHICH Y = 0.
C         ONLY REAL VALUES ARE FOUND.
C         IF ICALC = 1, ONLY XZ1 IS FOUND.
C         IF ICALC = 2, XZ1 AND XZ2 ARE FOUND.
C         IF ICALC = 3, XZ1, XZ2 AND XZ3 ARE FOUND.
C     IER - ERROR CODE.  IF IER=1, NEWTON'S METHOD DID NOT CONVERGE
C         IN 50 ITERATIONS.  THE RESULTS MAY NOT BE VALID.
C --- NOTE.  IF XZ1, XZ2 OR XZ3 ARE NOT FOUND, OR ARE IMAGINARY,
C     A VALUE OF -1.0E+20 IS RETURNED.
      SUBROUTINE ADS104 (ICALC,AZ,A1,A2,A3,ZRO,XZ1,XZ2,XZ3,IER)
C
      ZRO10=10.*ZRO
C     INITIALIZE OUTPUT PARAMETERS.
      XZ1=-1.0E+20
      XZ2=-1.0E+20
      XZ3=-1.0E+20
      IF (ICALC.GT.1) GO TO 20
10    CONTINUE
C     ICALC = 1.
C     LINEAR APPROXIMATION.  FIND XZ1 ONLY.
      IF (ABS(A1).GT.ZRO) XZ1=-AZ/A1
      RETURN
20    IF (ICALC.GT.2) GO TO 40
C     ICALC = 2.
30    CONTINUE
C     QUADRATIC APPROXIMATION.  FIND XZ1 AND XZ2.
C     IF QUADRATIC TERM IS SMALL, GO USE LINEAR INTERPOLATION.
      IF (ABS(A2).LT.ZRO10) GO TO 10
C     Y=0.
      B=A1**2-4.*A2*AZ
      IF (B.LT.-1.0E-6) RETURN
      IF (B.LT.0.) B=0.
      IF (ABS(A2).GT.ZRO) XX=-.5*A1/A2
      IF (ABS(A2).GT.ZRO) YY=.5*SQRT(B)/A2
      X1=XX+YY
      X2=XX-YY
      XZ1=AMIN1(X1,X2)
      XZ2=AMAX1(X1,X2)
      RETURN
40    CONTINUE
C     ICALC = 3.
C     CUBIC APPROXIMATION.
C     FIND XZ1, XZ2, XZ3 IF ALL ARE REAL.
C     IF CUBIC TERM IS SMALL, GO DO QUADRATIC INTERPOLATION.
      IF (ABS(A3).LT.ZRO10) GO TO 30
C     FIND XZ1 BY NEWTON'S METHOD.
C     INITIAL ESTIMATE.
      X=0.
      IF (ABS(A1).GT.ZRO) X=-AZ/A1
C     ITERATE.
      KOUNT=0
50    Y=AZ+X*(A1+X*(A2+X*A3))
      YP=A1+X*(2.*A2+3.*X*A3)
      IF (ABS(YP).LT.1.) YP=0.9*YP/(ABS(YP)+ZRO)
      IF (ABS(YP).LT.ZRO) YP=ZRO
      DX=-Y/YP
      DEL=AMAX1(ABS(X),0.01)
      DEL=ABS(DX)/DEL
      KOUNT=KOUNT+1
      IF (DEL.LT.ZRO.OR.KOUNT.GT.50) GO TO 60
      X=X+DX
      GO TO 50
C     IF NON-CONVERGENCE, SET ERROR CODE TO 1.
60    IER=1
      IF (DEL.LT.ZRO) IER=0
      XZ1=X
C     REDUCE POLYNOMIAL TO SECOND ORDER AND SOLVE FOR REMAINING ROOTS.
      B3=A3
      B2=A2+XZ1*A3
      B1=A1+XZ1*B2
C     LINEAR ESTIMATE.
      IF (ABS(B2).GT.ZRO) XZ2=-B1/B2
C     IF QUADRATIC TERM IS SMALL, END.
      IF (ABS(B3).LT.ZRO10) GO TO 80
      AC=B2*B2-4.*B3*B1
C     IF ROOTS ARE COMPLEX, END SEARCH.
      IF (AC.GE.0.) GO TO 70
      XZ2=-1.0E+20
      RETURN
70    AC=SQRT(AC)
      IF (ABS(B3).GT.ZRO) XZ2=(-B2+AC)/(2.*B3)
      IF (ABS(B3).GT.ZRO) XZ3=(-B2-AC)/(2.*B3)
C     PUT XZ1, XZ2 AND XZ3 IN ASCENDING ORDER.
80    CONTINUE
      IF (XZ2.GT.XZ1) GO TO 90
      TMP=XZ1
      XZ1=XZ2
      XZ2=TMP
90    IF (XZ3.GT.XZ1) GO TO 100
      TMP=XZ1
      XZ1=XZ3
      XZ3=TMP
100   IF (XZ2.LT.XZ3) RETURN
      TMP=XZ3
      XZ3=XZ2
      XZ2=TMP
      RETURN
      END
C
C
C
C=DECK      ADS105
C --- SUBROUTINE ADS105(ICALC,A1,A2,A3,ZRO,XMN1,XMX1)
C     ------------------------------------------------------------------
C --- FIND MINIMUM(S) OF POLYNOMIAL TO 3RD ORDER.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.
C             ICALC=1, FIRST ORDER POLYNOMIAL.  NO MINIMUM OR
C             MAXIMUM EXISTS.  RETURN.
C             ICALC=2, SECOND ORDER POLYNOMIAL.  FIND MINIMUM OR
C                      MAXIMUM.
C             ICALC=3, THIRD ORDER POLYNOMIAL.  FIND MINIMUM AND MAXIMUM
C                 IF THEY ARE REAL.
C     A1, A2, A3 - COEFFICIENTS OF THE POLYNOMIAL,
C         Y = AZ + A1*X + A2*X**2 + A3*X**3.
C     ZRO - SMALL NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.
C     NOTE - AZ IS NOT NEED IN CALCULATIONS, SO IS NOT BROUGHT
C         THROUGH THE PARAMETER LIST.
C
C --- OUTPUT
C     XMN1, XMX1 - VALUE OF X AT WHICH Y IS MINIMUM AND/OR MAXIMUM.
C         IF ICALC = 1, XMN1 AND XMX1 ARE NOT FOUND.
C         IF ICALC = 2, XMN1 OR XMX1 IS FOUND, BUT NOT BOTH.
C         IF ICALC = 3, XMN1 AND XMX1 ARE FOUND.
C
C --- NOTE.  IF XMN1 OR XMX1 IS NOT FOUND, OR IS IMAGINARY, A
C     VALUE OF -1.0E+20 IS RETURNED.
C
      SUBROUTINE ADS105 (ICALC,A1,A2,A3,ZRO,XMN1,XMX1)
C
      ZRO10=10.*ZRO
C     INITIALIZE OUTPUT PARAMETERS.
      XMN1=-1.0E+20
      XMX1=-1.0E+20
C     ICALC = 1.
C     LINEAR APPROXIMATION.  NO MINIMUM OR MAXIMUM EXISTS.  RETURN.
      IF (ICALC.LT.2) RETURN
      IF (ICALC.GT.2) GO TO 20
C     ICALC = 2.
C     QUADRATIC APPROXIMATION.  FIND EITHER XMN1 OR XMX1.
10    CONTINUE
C     IF A2 IS NEAR ZERO, NO SOLUTION.
      IF (ABS(A2).LT.ZRO) RETURN
      XX=-.5*A1/A2
      IF (A2.GT.0.) XMN1=XX
      IF (A2.LT.0.) XMX1=XX
      RETURN
20    CONTINUE
C     ICALC = 3.
C     IF A3 IS NEAR ZERO, USE QUADRATIC INTERPOLATION.
      IF (ABS(A3).LT.ZRO10) GO TO 10
C     CUBIC APPROXIMATION.  FIND XMN1 AND XMX1.
      B=A2**2-3.*A1*A3
      IF (B.LT.-1.0E-6) GO TO 30
      IF (B.LT.0.) B=0.
      B=SQRT(B)
      XMN1=(-A2+B)/(3.*A3)
      XMX1=(-A2-B)/(3.*A3)
30    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS106
C --- SUBROUTINE ADS106(N,A,X,Y)
C     ------------------------------------------------------------------
C --- ROUTINE TO EVALUATE N-TH ORDER POLYNOMIAL, Y=F(X).
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N - ORDER OF POLYNOMIAL.
C     A - ARRAY CONTAINING COEFFICIENTS OF POLYNOMIAL, STARTING
C         WITH A(1)=A0, A(2)=A1, ETC.
C         MINIMUM DIMENSION OF A IS N.
C     X - POINT AT WHICH THE POLYNOMIAL IS TO BE EVALUATED.
C
C --- OUTPUT
C     Y - VALUE OF THE POLYNOMIAL AT X.
C         Y = A(1) + A(2)*X + A(3)*(X**2) + .... + A(N+1)*(X**N).
C
      SUBROUTINE ADS106 (N,A,X,Y)
      DIMENSION A(*)
C     EVALUATE Y.
      Y=A(1)
      IF (N.LT.1) RETURN
      XX=X
      DO 10 I=1,N
      IP1=I+1
      Y=Y+XX*A(IP1)
10    XX=XX*X
      RETURN
      END
C
C
C
C=DECK      ADS108
C --- SUBROUTINE ADS108(ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,XMN1,
C    * FMN1)
C     ------------------------------------------------------------------
C --- ROUTINE TO FIND THE MINIMUM OF A FUNCTION F(X) BY
C     POLYNOMIAL INTERPOLATION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            DEC. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL
C         1 - 2-POINT QUADRATIC INTERPOLATION.
C         2 - 3-POINT QUADRATIC INTERPOLATION.
C         3 - 3-POINT CUBIC INTERPOLATION.
C         4 - 4-POINT CUBIC INTERPOLATION.
C     X1,F1...X4,F4 - FOUR X-COORDINATES WITH CORRESPONDING F-VALUES.
C     FP1 - SLOPE AT X1.
C     ZRO - SMALL POSITIVE NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.
C
C --- OUTPUT
C     XMN1 - X AT WHICH F IS ESTIMATED TO BE MINIMUM.
C     FMN1 - POLYNOMIAL APPROXIMATION TO F AT XMN1.
C
C --- NOTE.  IF XMN1 CANNOT BE FOUND OR IS IMAGINARY, XMN1 AND FMN1
C     ARE SET TO -1.0E+20.
C
C --- EXTERNALS
C     ADS102, ADS103, ADS105, ADS106.
C
      SUBROUTINE ADS108 (ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,XMN1,FMN1
     1)
      DIMENSION A(4)
      IF (ICALC.GT.2) GO TO 10
C     QUADRATIC INTERPOLATION.
C     COEFFICIENTS.
      CALL ADS102 (ICALC,X1,F1,FP1,X2,F2,X3,F3,AZ,A1,A2)
C     GO FIND MINIMUM.
      A3=0.
      JCALC=2
      GO TO 20
10    CONTINUE
C     CUBIC INTERPOLATION.
C     COEFFICIENTS.
      JCALC=ICALC-2
      CALL ADS103 (JCALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,AZ,A1,A2,A3)
C     GO FIND MINIMUM.
      JCALC=3
20    CALL ADS105 (JCALC,A1,A2,A3,ZRO,XMN1,XMX1)
C     CHECK FOR SOLUTION.  IF NO, RETURN.
      FMN1=-1.0E+20
      IF (XMN1.LT.-0.9E+20) RETURN
C     EVALUATE POLYNOMIAL APPROXIMATION TO FMN1.
      N=3
      IF (ICALC.LT.3) N=2
      A(1)=AZ
      A(2)=A1
      A(3)=A2
      A(4)=A3
      CALL ADS106 (N,A,XMN1,FMN1)
      RETURN
      END
C
C
C
C=DECK      ADS109
C --- SUBROUTINE ADS109(ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,
C    * XZ1,Z1,ZP1,XZ2,Z2,ZP2,XZ3,Z3,ZP3,IER)
C     DIMENSION AA(4)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM POLYNOMIAL INTERPOLATION UP TO 3RD-ORDER
C     FOR THE ZEROES OF A FUNCTION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              JULY 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.
C         1 = 1-POINT LINEAR INTERPOLATION.
C         2 = 2-POINT LINEAR INTERPOLATION.
C         3 = 2-POINT QUADRATIC INTERPOLATION.
C         4 = 3-POINT QUADRATIC INTERPOLATION.
C         5 = 3-POINT CUBIC INTERPOLATION.
C         6 = 4-POINT CUBIC INTERPOLATION.
C     X1,F1,X2,F2,X3,F3,X4,F4 - X-F PAIRS OF DATA.
C     FP1 - SLOPE AT X1.
C     ZRO - SMALL POSITIVE NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.
C --- NOTE
C     ONLY SUFFICIENT DATA NEED BE GIVEN TO PERFORM THE CALCULATIONS
C         REQUIRED BY ICALC.  REMAINING DATA MAY BE INPUT AS 0.0.
C
C --- OUTPUT
C     XZ1,Z1,ZP1....XZ3,Z3,ZP3 - PROPOSED X-VALUES AT WHICH F=0,
C         AND THEIR CORRESPONDING FUNCTION VALUES AND SLOPES (BASED
C         ON THE POLYNOMIAL INTERPOLATION).
C     IER - ERROR CODE.  IF IER=1, NEWTON'S METHOD DID NOT CONVERGE
C         IN 50 ITERATIONS.  THE RESULTS MAY NOT BE VALID.
C --- NOTE
C     IF ICALC=1 OR 2, ONLY Z1 AND ZP1 ARE OUTPUT.
C     IF ICALC=3 OR 4, Z1, ZP1, Z2 AND ZP2 ARE OUTPUT.
C     IF ICALC=5 OR 6, Z1 THROUGH ZP3 ARE OUTPUT.
C
C --- EXTERNALS
C     ADS101, ADS102, ADS103, ADS104.
C
      SUBROUTINE ADS109 (ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,XZ1,Z1,ZP
     11,XZ2,Z2,ZP2,XZ3,Z3,ZP3,IER)
      DIMENSION AA(4)
      A2=0.
      A3=0.
      GO TO (10,10,20,20,30,30), ICALC
10    CONTINUE
C     LINEAR INTERPOLATION.
      JCALC=ICALC
      CALL ADS101 (JCALC,X1,F1,FP1,X2,F2,AZ,A1)
      GO TO 40
C     QUADRATIC INTERPOLATION.
20    CONTINUE
      JCALC=ICALC-2
      CALL ADS102 (JCALC,X1,F1,FP1,X2,F2,X3,F3,AZ,A1,A2)
      GO TO 40
30    CONTINUE
C     CUBIC INTERPOLATION.
      JCALC=ICALC-4
      CALL ADS103 (JCALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,AZ,A1,A2,A3)
40    CONTINUE
C     FIND ZEROES.
      JCALC=(ICALC+1)/2
      CALL ADS104 (JCALC,AZ,A1,A2,A3,ZRO,XZ1,XZ2,XZ3,IER)
C     EVALUATE SLOPE OF POLYNOMIAL AT ZEROES.
      Z1=-1.0E+20
      Z2=-1.0E+20
      Z3=-1.0E+20
      ZP1=-1.0E+20
      ZP2=-1.0E+20
      ZP3=-1.0E+20
      AA(1)=AZ
      AA(2)=A1
      AA(3)=A2
      AA(4)=A3
      N=(ICALC+1)/2
      IF (XZ1.GT.-1.0E+20) CALL ADS106 (N,AA,XZ1,Z1)
      IF (XZ2.GT.-1.0E+20) CALL ADS106 (N,AA,XZ2,Z2)
      IF (XZ3.GT.-1.0E+20) CALL ADS106 (N,AA,XZ3,Z3)
      IF (XZ1.GT.-1.0E+20) CALL ADS110 (N,AA,XZ1,ZP1)
      IF (XZ2.GT.-1.0E+20) CALL ADS110 (N,AA,XZ2,ZP2)
      IF (XZ3.GT.-1.0E+20) CALL ADS110 (N,AA,XZ3,ZP3)
      RETURN
      END
C
C
C
C=DECK      ADS110
C --- SUBROUTINE ADS110(N,A,X,YP)
C     DIMENSION A(N+1)
C     ------------------------------------------------------------------
C --- ROUTINE TO EVALUATE SLOPE OF N-TH ORDER POLYNOMIAL, Y=F(X).
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N - ORDER OF POLYNOMIAL.
C     A - ARRAY CONTAINING COEFFICIENTS OF POLYNOMIAL, STARTING
C         WITH A(1)=A0, A(2)=A1, ETC.
C         MINIMUM DIMENSION OF A IS N.
C     X - POINT AT WHICH THE POLYNOMIAL IS TO BE EVALUATED.
C
C --- OUTPUT
C     YP - VALUE OF THE SLOPE OF THE POLYNOMIAL AT X.
C      YP = A(2) + 2*A(3)*X + 3*A(4)*(X**2) + ... + N*A(N+1)*(X**(N-1)).
C
      SUBROUTINE ADS110 (N,A,X,YP)
      DIMENSION A(*)
C     EVALUATE YP.
      YP=0.
      IF (N.LT.1) RETURN
      YP=A(2)
      IF (N.LT.2) RETURN
      XX=X
      DO 10 I=2,N
      IP1=I+1
      YP=YP+FLOAT(I)*A(IP1)*XX
10    XX=XX*X
      RETURN
      END
C
C
C
C=DECK      ADS111
C --- SUBROUTINE ADS111 (NCON,NX,ISLOPG,CTMIN,CTLMIN,ZRO,X1,X2,X3,X4,
C    1DG,GGL,GG1,GG2,GGU,IDG,ALPL,ALPU)
C     ------------------------------------------------------------------
C --- POLYNOMIAL INTERPOLATION FOR CONSTRAINT BOUNDARIES.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                                 ***** 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
      SUBROUTINE ADS111 (NCON,NX,ISLOPG,CTMIN,CTLMIN,ZRO,X1,X2,X3,X4,DG,
     1GGL,GG1,GG2,GGU,IDG,ALPL,ALPU)
      DIMENSION DG(*),GGL(*),GG1(*),GG2(*),GGU(*),IDG(*)
      ALPL1=ALPL
      ALPU1=ALPU
C     BEGIN INTERPOLATION.
      DO 40 I=1,NCON
C     IS THIS CONSTRAINT INITIALLY ACTIVE OR VIOLATED?
      FP1=0.
      IAV=0
      IF (ISLOPG.EQ.0) GO TO 10
      FP1=DG(I)
      IF (ABS(FP1).GT.0.01) IAV=I
10    CONTINUE
C     CONSTRAINT VIOLATION THRESHOLD.
      CC=CTMIN
      IF (IABS(IDG(I)).GT.1) CC=CTLMIN
C     FUNCTION VALUES.
      F1=GGL(I)
      IF (IABS(IDG(I)).GT.1.AND.ABS(F1).LE.CC) GO TO 40
      F2=GG1(I)
      F3=0.
      F4=0.
      IF (NX.GE.3) F3=GG2(I)
      IF (NX.GE.4) F4=GGU(I)
C     IGNORE THIS CONSTRAINT IF ALL ARE WITHIN A TOLORANCE CC OF ZERO.
      AF1=ABS(F1)
      AF2=ABS(F2)
      AF3=ABS(F3)
      AF4=ABS(F4)
      AF=AMAX1(AF1,AF2,AF3,AF4)
      IF (AF.LE.CC) GO TO 40
      IF(IAV.EQ.0.AND.NX.LT.2) GO TO 40
      ICALC=2*(NX-1)
      IF (ICALC.GT.6) ICALC=6
      IF (IAV.GT.0.AND.NX.LT.4) ICALC=ICALC+1
      CALL ADS109 (ICALC,X1,F1,FP1,X2,F2,X3,F3,X4,F4,ZRO,XZ1,Z1,ZP1,XZ2,
     1Z2,ZP2,XZ3,Z3,ZP3,IER)
      DO 30 II=1,3
      XZ=XZ1
      ZP=ZP1
      IF (II.EQ.2) XZ=XZ2
      IF (II.EQ.2) ZP=ZP2
      IF (II.EQ.3) XZ=XZ3
      IF (II.EQ.3) ZP=ZP3
      IF (ABS(XZ).GT.0.9E+20) GO TO 30
      IF (F1.LE.CC) GO TO 20
C     INITIALLY INFEASIBLE CASE, BUT DECREASING.
      IF (XZ.GT.ALPL.AND.ZP.LT.0.) ALPL=XZ
      GO TO 30
20    CONTINUE
      IF (XZ.LT.ALPL1) GO TO 30
C     INITIALLY FEASIBLE, AND F1.LT.0.
      IF (XZ.LT.ALPU.AND.ZP.GT.0.) ALPU=XZ
      IF (FP1.GT.ZRO) GO TO 30
C     INITIALLY FEASIBLE.  SECOND INTERCEPT.
      IF (XZ.LT.ALPU.AND.(F1.LT.0.0.AND.ZP.GT.0.)) ALPU=XZ
30    CONTINUE
40    CONTINUE
      IF (ALPL.GT.ALPU1) ALPL=ALPU1
      RETURN
      END
C
C
C
C=DECK      ADS112
C --- SUBROUTINE ADS112 (NDV,X,S,SVLB,SVUB,ZRO,ALPMAX)
C     DIMENSION X(NDV),S(NDV),SVLB(NDV),SVUB(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO FIND ALPMAX SO NDV SIDE CONSTRAINTS ARE ACTIVE.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             AUG. 1982
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     X - CURRENT VECTOR OF DESIGN VARIABLES.  MINIMUM DIMENSION IS NDV.
C     S - SEARCH DIRECTION.  MINIMUM DIMENSION IS NDV.
C     SVLB - LOWER BOUNDS ON X.  MINIMUM DIMENSION IS NDV.
C     SVUB - UPPER BOUNDS ON X.  MINIMUM DIMENSION IS NDV.
C     ZRO - SMALL POSITIVE NUMBER INDICATING NUMERICAL ZERO.
C
C --- OUTPUT
C     ALPMAX - MOVE, ALPHA SUCH THAT NDV SIDE CONSTRAINTS ARE ACTIVE.
C
      SUBROUTINE ADS112 (NDV,X,S,SVLB,SVUB,ZRO,ALPMAX)
      DIMENSION X(*),S(*),SVLB(*),SVUB(*)
C
      ALPMAX=0.
      DO 10 I=1,NDV
      IF (ABS(S(I)).LE.ZRO) GO TO 10
      ALP=(SVUB(I)-X(I))/S(I)
      IF (ALP.GT.ALPMAX) ALPMAX=ALP
      ALP=(SVLB(I)-X(I))/S(I)
      IF (ALP.GT.ALPMAX) ALPMAX=ALP
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS115
C --- SUBROUTINE ADS115(IGOTO,IONED,IPRNT1,NDV,NCON,OBJ,SLOPF,ISLOPF,
C    *ISLOPG,CTMIN,CTLMIN,ALPMAX,XMULT,EXTRAP,ZRO,DELALP,DABALP,ALPL,
C    * ALPU,XOLD,SVLB,SVUB,S,X,G,DG,IDG,GGL,GG1,GG2,XTMP,XBST,NAVC,IC)
C     DIMENSION X(NDV),S(NDV),XOLD(NDV),SVLB(NDV),SVUB(NDV),G(NCON),
C    * DG(NACG),IDG(NCON),GGL(NCON),GG1(NCON),GG2(NCON),XTMP(NDV),
C    * XBST(NDV),IC(NAVC)
C     ------------------------------------------------------------------
C --- ROUTINE TO CONTROL ONE-DIMENSIONAL SEARCH FOR CONSTRAINED
C     FUNCTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                          MAY, 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT.
C     IGOTO - POINTER.  INITIALLY INPUT AS ZERO.  ON SUBSEQUENT CALLS,
C         IGOTO = VALUE RETURNED FROM LAST CALL.
C     IONED - METHOD
C         5 - USE GOLDEN SECTION METHOD.
C         6 - GOLDEN SECTION FOLLOWED BY POLYNOMIAL INTERPOLATION.
C         7 - POLYNOMIAL INTERPOLATION WITH BOUNDS.
C         8 - POLYNOMIAL INTERPOLATION/EXTRAPOLATION WITHOUT FIRST
C             GETTING BOUNDS.
C     IPRNT1 - PRINT CONTROL.
C         0 - NO PRINT.
C         2 - PRINT TITLE, METHOD, EACH PROPOSED ALPHA, OBJ AND GMAX.
C         3 - PRINT ALL OF ABOVE PLUS CONTROL PARAMETERS, S-VECTOR,
C             X-VECTOR AND G-VECTOR.
C         NOTE; IPRNT1 IS USUALLY USED FOR DEBUG PRINTING ONLY.
C     NDV - NUMBER OF DESIGN VARIABLES CONTAINED IN X.
C     NCON - NUMBER OF CONSTRAINT VALUES STORED IN G-VECTOR.
C     OBJ - ON FIRST CALL, OBJ = OBJECTIVE FUNCTION CORRESPONDING TO
C         ALPHA = 0.  ON SUBSEQUENT CALLS, OBJ = OBJECTIVE FUNCTION
C         CORRESPONDING TO X-VECTOR RETURNED FROM LAST CALL.
C     SLOPF - SLOPF OF OBJ.VS.ALPHA CURVE.  NOT USED IF ISLOPF=0.
C     ISLOPF _ TELLS IF SLOPE OF OBJ.VS.ALPHA CURVE IS AVAILABLE.  IF
C         ISLOPF = 1, SLOPF IS AVAILABLE FOR USE IN POLYNOMIAL
C         INTERPOLATION.
C     ISLOPG - TELLS IF SLOPE OF G(I).VS.ALPHA IS AVAILABLE.  IF
C         ISLOPG = 1, DG CONTAINS THE DESIRED GRADIENTS.
C     CTMIN - NONLINEAR CONSTRAINT TOLORANCE.  IF G(I).GT.CTMIN,
C         CONSTRAINT I IS VIOLATED.
C     CTLMIN - LINEAR CONSTRAINT TOLORANCE.  IF G(I).GT.CTLMIN,
C         CONSTRAINT IS VIOLATED.
C     ALPHA - ON FIRST CALL, ALPHA = PROPOSED MOVE PARAMETER.  ON
C         SUBSEQUENT CALLS, ALPHA = ALPHA RETURNED FROM PREVIOUS CALL.
C     ALPMAX - MAXIMUM ALPHA THAT WILL BE CONSIDERED.
C     XMULT - MULTIPLIER FOR FINDING BRACKETS ON THE MINIMUM OF OBJ.
C         XMULT = 1.5 + SQRT(5)/2 IS RECOMMENDED, SINCE THIS WILL GIVE
C         ONE INTERIOR POINT FOR THE GOLDEN SECTION METHOD.
C     EXTRAP - THE FACTOR BY WHICH ALPHA MAY BE EXTRAPOLATED IN
C         POLYNOMIAL FIT WITHOUT FIRST GETTING BOUNDS.
C     ZRO - IDENTIFIES NUMERICAL ZERO, SAY 1.0E-5.  A MEASURE OF
C         MACHINE ACCURACY.
C     DELALP - RELATIVE CONVERGENCE CRITERION FOR GOLDEN SECTION.
C     DABALP - ABSOLUTE CONVERGENCE CRITERION FOR GOLDEN SECTION.
C     XOLD - VECTOR FOR STORAGE OF DESIGN VARIABLES AT ALPHA = 0.
C         MINIMUM DIMENSION IS NDV.
C     SVLB - LOWER BOUNDS ON THE VARIABLES.  IF ANY COMPONENT OF
C         X VIOLATES SVLB, IT IS SET EQUAL TO ITS LOWER BOUND.  MINIMUM
C         DIMENSION IS NDV.
C     SVUB - UPPER BOUNDS ON THE VARIABLES.  IF ANY COMPONENT OF
C         X VIOLATES SVUB, IT IS SET EQUAL TO ITS UPPER BOUND.  MINIMUM
C         DIMENSION IS NDV.
C     S - SEARCH DIRECTION.  MINIMUM DIMENSION IS NDV.
C     G - CONSTRAINT VECTOR.  MINIMUM DIMENSION IS NCON.
C     DG - GRADIENTS OF CURRENTLY ACTIVE/VIOLATED CONSTRAINTS.
C         MINIMUM DIMENSION IS NACG.  IF THIS INFORMATION IS NOT TO BE
C         USED, NACG SHOULD BE DEFINED AS ZERO, EVEN THOUGH CONSTRAINTS
C         MAY BE ACTIVE/VIOLATED.
C     IDG - CONSTRAINT TYPE IDENTIFIER.  MINIMUM DIMENSION IS NCON.
C     GGL, GG1, GG2 - TEMPORARY STORAGE OF G-VECTOR.  MINIMUM DIMENSION
C         FOR EACH IS NCON.
C     XTMP - TEMPORARY STORAGE OF THE X-VECTOR.  MINIMUM DIMENSION IS
C         NDV.
C     NAVC - NUMBER OA ACTIVE AND VIOLATED CONSTRAINTS AT ALPHA=0.
C     IC - VECTOR IDENTIFYING ACTIVE AND VIOLATED CONSTRAINTS.
C     XBST - TEMPORARY STORAGE OF BEST X-VECTOR.
C
C --- OUTPUT.
C     IGOTO - POINTER.  IF IGOTO.GT.0, EVALUATE OBJ AND CALL ADS115
C         AGAIN.  IF IGOTO = 0, THE ONE-DIMENSIONAL SEARCH IS COMPLETE.
C     OBJ - MINIMUM OBJECTIVE FUNCTION VALUE WHEN IGOTO = 0.
C     ALPHA - CURRENT MOVE PARAMETER IF IGOTO.GT.0.  OPTIMUM MOVE
C         PARAMETER IF IGOTO = 0.
C     ALPL - BEST KNOWN LOWER BOUND ON ALPHA.
C     ALPU - BEST KNOWN UPPER BOUND ON ALPHA.
C     X - VECTOR OF DESIGN VARIABLES FOR THE CURRENT VALUE OF ALPHA
C         IF IGOTO.GT.0.  IN THIS CASE EVALUATE OBJ AND CALL AGAIN.
C         VECTOR OF DESIGN VARIABLES CORRESPONDING TO THE OPTIMUM
C         ALPHA IF IGOGO = 0.  MINIMUM DIMENSION IS NDV.
C     G - VECTOR OF CONSTRAINT VALUES ASSOCIATED WITH OPTIMUM ALPHA.
C
C --- EXTERNALS ADS102, ADS103, ADS105, ADS503, ADS206, ADS121,
C         ADS126.
      SUBROUTINE ADS115 (IGOTO,IONED,IPRNT1,NDV,NCON,OBJ,SLOPF,ISLOPF,IS
     1LOPG,CTMIN,CTLMIN,ALPHA,ALPMAX,XMULT,EXTRAP,ZRO,DELALP,DABALP,ALPL
     2,ALPU,XOLD,SVLB,SVUB,S,X,G,DG,IDG,GGL,GG1,GG2,GGU,XTMP,XBST,NAVC,I
     3C,ALPBST,FBST,FL,FU,F1,F2,GBST,GMAX,GMCT,GMCTL,GMCTU,GMCT1,GMCT2,
     4ICAL,II,JGOTO,JJ,II1,IX,NITER,SCFX,SCFG,ISTRAT,TEMP)
      DIMENSION X(*),S(*),XOLD(*),SVLB(*),SVUB(*),G(*),DG(*),IDG(*),GGL(
     1*),GG1(*),GG2(*),GGU(*),XTMP(*),XBST(*),IC(*),SCFX(*),SCFG(*),
     2TEMP(10)
      XL=TEMP(1)
      XU=TEMP(2)
      X1=TEMP(3)
      X2=TEMP(4)
      SCFO=TEMP(5)
C
C     FIND MAXIMUM CONSTRAINT TOLORANCE VALUE.
      CALL ADS502 (NCON,G,IDG,CTMIN,CTLMIN,GMCT,IGMAX)
      IEVAL=1
      IF (IGOTO.GT.0) GO TO 40
C     IGOTO = 0, FIRST CALL.
      X1=-10.*ZRO
      X2=-10.*ZRO
      XU=-10.*ZRO
      FBST=OBJ
      ALPBST=0.
      GBST=GMCT
      ICAL=0
C     SAVE X-VECTOR IN XOLD AND XBST.
      CALL ADS503 (NDV,X,XOLD)
      CALL ADS503 (NDV,X,XBST)
      IF (IPRNT1.GT.1) WRITE (8,360) SLOPF,ALPHA,ALPMAX,XMULT,EXTRAP,ZRO
     1,DELALP,DABALP,ISLOPF,ISLOPG
      ICALC=13
      IF (IPRNT1.GT.1) CALL ADS402 (ICALC,DG,NCON,TMP1)
40    IGOTO1=IGOTO+1
      ICAL=ICAL+1
      IF (ICAL.EQ.1) GO TO 80
C     ------------------------------------------------------------------
C     IDENTIFY BEST DESIGN.
C     ------------------------------------------------------------------
C     IS THIS DESIGN LESS INFEASIBLE?
      IF (GBST.GT.0.0.AND.GMCT.LT.GBST) GO TO 50
C     NO.  IS THIS DESIGN FEASIBLE WITH LOWER OBJECTIVE?
      IF (OBJ.LT.FBST.AND.GMCT.LE.0.) GO TO 50
C     NO. THIS IS NOT THE BEST DESIGN.
      GO TO 80
C     SAVE THIS DESIGN.
50    FBST=OBJ
      ALPBST=ALPHA
      GBST=GMCT
      CALL ADS503 (NDV,X,XBST)
      IF (GBST.GT.0.) GO TO 80
C     IF THIS DESIGN ENCOUNTERED A NEW CONSTRAINT AND IT IS ACTIVE
C     WITHIN A TOLORANCE OF CTMIN (CTLMIN) THEN END ONE-D SEARCH.
      DO 70 I=1,NCON
      I1=IDG(I)
      CC=CTMIN
      IF (IABS(I1).EQ.1) CC=CTLMIN
      CC=ABS(G(I))-CC
      IF (CC.GT.0.) GO TO 70
C     ACTIVE CONSTRAINT.  IS IT NEW?
      IF (NAVC.EQ.0) GO TO 290
      DO 60 J=1,NAVC
      IF (IC(J).EQ.I) GO TO 70
60    CONTINUE
C     NEW CONSTRAINT.  GO PICK BEST DESIGN.
      GO TO 290
70    CONTINUE
80    CONTINUE
      GO TO (90,100,120,290,200,270), IGOTO1
C     IGOTO = 0.  FIRST CALL.
90    CONTINUE
C     DO WE NEED TO BRACKET THE MINIMUM?
      IF (IONED.GT.7) GO TO 260
C     YES.
C     ------------------------------------------------------------------
C     FIND BRACKETS ON MINIMUM.
C     ------------------------------------------------------------------
      JGOTO=0
      II=1
      IF (IPRNT1.GT.0) WRITE (8,370)
100   CONTINUE
      CALL ADS125 (JGOTO,NCON,OBJ,GMCT,ALPHA,XMULT,ALPMAX,XL,X1,X2,XU,FL
     1,F1,F2,FU,GMCTL,GMCT1,GMCT2,GMCTU,G,GGL,GG1,GG2,GGU)
      II=II+1
      IF (JGOTO.EQ.0) GO TO 110
C     UPDATE X.
      CALL ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
C     EVALUATE OBJECTIVE AND CONSTRAINT FUNCTIONS AND CALL AGAIN.
      IGOTO=1
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      RETURN
110   CONTINUE
C     IF ONLY TWO DESIGNS ARE AVAILABLE, PUT G IN GGU.
      IF(II.EQ.2) CALL ADS503(NCON,G,GGU)
      IF (IPRNT1.GT.1) WRITE (8,380) XL,XU
C     ------------------------------------------------------------------
C     MINIMUM IS BRACKETED.  REFINE SOLUTION AS REQUIRED.
C     ------------------------------------------------------------------
      IF (IONED.GT.6) GO TO 170
C     ------------------------------------------------------------------
C     IONED = 5 OR 6.  REFINE SOLUTION USING THE GOLDEN SECTION METHOD.
C     ------------------------------------------------------------------
      JGOTO=0
      IF (IPRNT1.GT.0) WRITE (8,390)
      NPTS=ICAL
      IF (NPTS.GT.4) NPTS=4
      XX=XMULT-2.618034
      IF (ABS(XX).GT.0.0001) NPTS=2
      XX=XU-ALPMAX
      IF (ABS(XX).LT.0.0001) NPTS=2
      IF (NPTS.NE.3) GO TO 120
      X1=X2
      F1=F2
      GMCT1=GMCT2
      CALL ADS503 (NCON,GG2,GG1)
120   CONTINUE
      CALL ADS123 (JGOTO,NCON,ICAL,NPTS,OBJ,GMCT,ALPHA,ALPMAX,DELALP,DAB
     1ALP,ZRO,XL,X1,X2,XU,FL,F1,F2,FU,GMCTL,GMCT1,GMCT2,GMCTU,IDL,ID1,ID
     22,IDU,G,GGL,GG1,GG2,GGU,II1,IX,NITER)
C     FINISHED?
      IF (JGOTO.EQ.0) GO TO 130
C     NO. UPDATE X.
      CALL ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
C     EVALUATE OBJECTIVE FUNCTION AND CALL AGAIN.
      IGOTO=2
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      RETURN
130   CONTINUE
      IF (IPRNT1.GT.0) WRITE (8,400)
C     IF IONED = 5, SOLUTION IS COMPLETE.  GO FIND BEST DESIGN.
C     IF IONED = 6, DO POLYNOMIAL INTERPOLATION.
      IGOTO=0
      IF (IONED.EQ.5) GO TO 290
C     ------------------------------------------------------------------
C     IONED = 6.  POLYNOMIAL INTERPOLATION USING LAST FOUR GOLDEN
C     SECTION POINTS.
C     ------------------------------------------------------------------
      IF (IPRNT1.GT.0) WRITE (8,410)
      GMIN=AMIN1(GMCTL,GMCT1,GMCT2,GMCTU)
      GMAX=AMAX1(GMCTL,GMCT1,GMCT2,GMCTU)
      ALPL=XL
      ALPU=XU
      ALPHA=ALPU
      IF (GMIN.GT.0.0.OR.GMAX.LT.0.) GO TO 140
C     SOME DESIGNS ARE FEASIBLE AND SOME INFEASIBLE.  UPDATE BOUNDS.
      II=4
      CALL ADS111 (NCON,II,ISLOPG,CTMIN,CTLMIN,ZRO,XL,X1,X2,XU,DG,GGL,GG
     11,GG2,GGU,IDG,ALPL,ALPU)
      ALPHA=ALPL
      IF (GMCTL.LT.0.) ALPHA=ALPU
      IF (ALPL.GT.ALPU) ALPHA=.5*(ALPL+ALPU)
C     GO FIND ALPHA TO MINIMIZE THE OBJECTIVE.
      GO TO 150
140   CONTINUE
C     NO CONSTRAINTS ARE VIOLATED OR ALL ARE VIOLATED.
      IF (GMIN.LT.0.) GO TO 150
C     ALL ARE VIOLATED.  INTERPOLATE FOR MINIMUM VIOLATION.
      ICALC=2
      CALL ADS103 (ICALC,XL,GMCTL,YP1,X1,GMCT1,X2,GMCT2,XU,GMCTU,ZRO,AZ,
     1A1,A2,A3)
      GO TO 160
C     MINIMUM OF OBJECTIVE FUNCTION.
150   ICALC=2
      CALL ADS103 (ICALC,XL,FL,YP1,X1,F1,X2,F2,XU,FU,ZRO,AZ,A1,A2,A3)
160   ICALC=3
      CALL ADS105 (ICALC,A1,A2,A3,ZRO,ALP,XMX1)
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      IF (IPRNT1.GT.1) WRITE (8,420) XL,FL,X1,F1,X2,F2,XU,FU,AZ,A1,A2,A3
     1,ALPHA
C     REJECT IF ALPHA IS NOT UNIQUE.  GO PICK BEST AVAILABLE.
      DXL=ABS(XL-ALPHA)
      DX1=ABS(ALPHA-X1)
      DX2=ABS(ALPHA-X2)
      DXU=ABS(ALPHA-XU)
      DX=AMIN1(DXL,DX1,DX2,DXU)
      IEVAL=0
      IF (DX.LE.ZRO) GO TO 290
C     TRY THIS DESIGN.
C     UPDATE X.
      CALL ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
C     EVALUATE OBJECTIVE FUNCTION AND CALL AGAIN.
      IGOTO=3
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      RETURN
C     GO PICK BEST DESIGN UPON RETURN.
170   CONTINUE
      IF (IONED.GT.7) GO TO 260
C     ------------------------------------------------------------------
C     IONED = 7.  POLYNOMIAL INTERPOLATION WITH BOUNDS.
C     ------------------------------------------------------------------
      ALPU1=XU
      JJ=0
      II=ICAL
      IF (II.GT.4) II=4
      IF (II.GT.2) GO TO 180
C     II=2.  SET GG1 = GGU.
      CALL ADS503 (NCON,GGU,GG1)
      X1=XU
      GMCT1=GMCTU
      F1=FU
      X2=XU
      GO TO 220
180   CONTINUE
      IF (II.GT.3) GO TO 190
C     II=3. SET GG1=GG2 AND GG2=GGU.
      CALL ADS503 (NCON,GG2,GG1)
      CALL ADS503 (NCON,GGU,GG2)
      X1=X2
      GMCT1=GMCT2
      F1=F2
      X2=XU
      GMCT2=GMCTU
      F2=FU
      GO TO 220
190   CONTINUE
C     II=4.  SET G=GGU.
      CALL ADS503 (NCON,GGU,G)
      GO TO 220
200   CONTINUE
C     IF FINISHED, GO FIND BEST DESIGN.
      IF (JJ.GE.3) GO TO 290
      IF (II.GT.3) GO TO 210
C     II=3, ALPHA=X2.
      X2=ALPHA
      F2=OBJ
      GMCT2=GMCT
      CALL ADS503 (NCON,G,GG2)
      GO TO 220
210   CONTINUE
C     II=4, ALPHA=XU.
      XU=ALPHA
      FU=OBJ
      GMCTU=GMCT
      CALL ADS503 (NCON,G,GGU)
220   CONTINUE
      ALPL=XL
      ALPU=ALPU1
      GMIN=AMIN1(GMCTL,GMCT1,GMCT2,GMCTU)
      ALPHA=.25*(XL+X1+X2+XU)
      IF (GMIN.LE.0.) GO TO 230
C     ALL DESIGNS ARE INFEASIBLE.  FIND MINIMUM CONSTRAINT VIOLATION.
      IF (II.LT.3) GO TO 250
      ICALC=2
      IF (II.GT.3) ICALC=4
      CALL ADS108 (ICALC,XL,GMCTL,YP1,X1,GMCT1,X2,GMCT2,XU,GMCTU,ZRO,ALP
     1,YMN1)
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      GO TO 250
230   CONTINUE
C     A FEASIBLE DESIGN EXISTS.  FIND NEW BOUNDS ON ALPHA.
      CALL ADS111 (NCON,II,ISLOPG,CTMIN,CTLMIN,ZRO,XL,X1,X2,XU,DG,GGL,GG
     11,GG2,G,IDG,ALPL,ALPU)
      IF (ABS(ALPU-ALPU1).GT.ZRO) ALPHA=ALPU
C     FIND ALPHA TO MINIMIZE OBJECTIVE.
      ALP=-1.
      IF (II.EQ.2.AND.ISLOPF.EQ.0) GO TO 240
C     2-POINT QUADRATIC FIT.
      ICALC=1
C     3-POINT QUADRATIC FIT.
      IF (II.EQ.3.AND.ISLOPF.EQ.0) ICALC=2
C     3-POINT CUBIC FIT.
      IF (II.EQ.3.AND.ISLOPF.GT.0) ICALC=3
C     4-POINT CUBIC FIT.
      IF (II.GT.3) ICALC=4
      CALL ADS108 (ICALC,XL,FL,SLOPF,X1,F1,X2,F2,XU,FU,ZRO,ALP,YMN1)
240   CONTINUE
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      IF (FU.GT.FL.AND.GMCTL.GT.0.) ALPHA=ALPL
      IF (ALPL.GT.ALPU) ALPHA=.5*(ALPL+ALPU)
250   CONTINUE
C     INSURE THAT ALPHA IS UNIQUE.  IF NOT, GO PICK BEST DESIGN.
      DXL=ABS(ALPHA-XL)
      DX1=ABS(ALPHA-X1)
      DX2=ABS(ALPHA-X2)
      DXU=ABS(ALPHA-XU)
      DX=AMIN1(DXL,DX1,DX2,DXU)
      IEVAL=0
      IF (DX.LE.ZRO) GO TO 290
      JJ=II-1
      IF (ISLOPF.GT.0) JJ=JJ+1
      II=II+1
C     UPDATE X.
      CALL ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
C     EVALUATE OBJECTIVE AND CONSTRAINT FUNCTIONS AND CALL AGAIN.
      IGOTO=4
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      RETURN
260   CONTINUE
C     ------------------------------------------------------------------
C     IONED = 9.  POLYNOMIAL SEARCH WITHOUT FIRST GETTING BOUNDS.
C     ------------------------------------------------------------------
      IF (IPRNT1.GT.0) WRITE (8,340)
      JGOTO=0
270   CONTINUE
      CALL ADS119 (JGOTO,NCON,XMULT,EXTRAP,ALPMAX,SLOPF,ISLOPF,ISLOPG,ZR
     1O,CTMIN,CTLMIN,GMCT,G,DG,GGL,GG1,GG2,GGU,IDG,ALPHA,OBJ,XL,X1,X2,XU
     2,GMCTL,GMCT1,GMCT2,GMCTU,FL,F1,F2,FU)
C     INSURE THAT ALPHA IS UNIQUE.  IF NOT, GO PICK BEST DESIGN.
      DXL=ABS(ALPHA-XL)
      DX1=ABS(ALPHA-X1)
      DX2=ABS(ALPHA-X2)
      DXU=ABS(ALPHA-XU)
      DX=AMIN1(DXL,DX1,DX2,DXU)
      IF (DX.LE.ZRO) GO TO 290
      IF (JGOTO.EQ.0) GO TO 280
C     UPDATE X.
      CALL ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
C     EVALUATE FUNCTION AND CALL AGAIN.
      IGOTO=5
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      RETURN
280   CONTINUE
290   CONTINUE
C     ------------------------------------------------------------------
C     PICK BEST OF ALL DESIGNS CONSIDERED.  FIND ALPL AND ALPU.
C     ------------------------------------------------------------------
C     RETRIEVE XBST.
      CALL ADS503 (NDV,XBST,X)
      OBJ=FBST
      GMCT=GBST
      DXZ=ABS(ALPHA-ALPBST)
      IF (DXZ.LE.ZRO.AND.IEVAL.EQ.1) GO TO 330
      DXL=ABS(ALPBST-XL)
      DX1=ABS(ALPBST-X1)
      DX2=ABS(ALPBST-X2)
      DXU=ABS(ALPBST-XU)
C     COMPARE WITH XL.
      IF (DXL.GT.DXZ) GO TO 300
C     XL IS BETTER.
      DXZ=DXL
      CALL ADS503 (NCON,GGL,G)
C     COMPARE WITH X1.
300   IF (DX1.GT.DXZ) GO TO 310
C     X1 IS BETTER.
      DXZ=DX1
      CALL ADS503 (NCON,GG1,G)
C     COMPARE WITH X2.
310   IF (DX2.GT.DXZ) GO TO 320
C     X2 IS BETTER.
      DXZ=DX2
      CALL ADS503 (NCON,GG2,G)
C     COMPARE WITH XU.
320   IF (DXU.GT.DXZ) GO TO 330
C     XU IS BETTER.
      CALL ADS503 (NCON,GGU,G)
330   CONTINUE
      ALPHA=ALPBST
C     FIND ALPL AND ALPU.
      ALPL=AMIN1(XL,X1,X2,XU)
      ALPU=AMAX1(XL,X1,X2,XU)
      IF (XL.GT.ALPL.AND.XL.LT.ALPHA) ALPL=XL
      IF (X1.GT.ALPL.AND.X1.LT.ALPHA) ALPL=X1
      IF (X2.GT.ALPL.AND.X2.LT.ALPHA) ALPL=X2
      IF (XU.GT.ALPL.AND.XU.LT.ALPHA) ALPL=XU
      IF (XL.LT.ALPU.AND.XL.GT.ALPHA) ALPU=XL
      IF (X1.LT.ALPU.AND.X1.GT.ALPHA) ALPU=X1
      IF (X2.LT.ALPU.AND.X2.GT.ALPHA) ALPU=X2
      IF (XU.LT.ALPU.AND.XU.GT.ALPHA) ALPU=XU
      IGOTO=0
      TEMP(1)=XL
      TEMP(2)=XU
      TEMP(3)=X1
      TEMP(4)=X2
      TEMP(5)=SCFO
      IF (IPRNT1.LE.0) RETURN
      OBJW=OBJ
      IF(ISTRAT.EQ.0) OBJW=OBJ/SCFO
      WRITE (8,350) ALPL,ALPU,ALPHA,OBJW
      RETURN
C     ------------------------------------------------------------------
C     FORMATS.
C     ------------------------------------------------------------------
340   FORMAT (/,5X,'BEGIN POLYNOMIAL INTERPOLATION WITHOUT FIRST ',
     1'GETTING BOUNDS')
350   FORMAT (/,5X,'RESULTS OF ONE-DIMENSIONAL SEARCH',/,6X,'ALPL =',
     11PE13.5,2X,'ALPU =',1PE13.5,/,5X,'ALPHA =',1PE13.5,3X,'OBJ =',
     21PE13.5)
360   FORMAT (/,5X,'CONTROL PARAMETERS',/,5X,'SLOPF, ALPHA, ALPMAX,',
     1' XMULT,  EXTRAP',/,5X,5(1PE13.5),/,5X,'ZRO, DELALP, DABALP',/,5X,
     23(1PE13.5),/,5X,'ISLOPF, ISLOPG',2I5)
370   FORMAT (/,5X,'FIND BRACKETS ON MINIMUM')
380   FORMAT (/,5X,'BRACKETS, XL =',1PE13.5,2X,'XU =',1PE13.5)
390   FORMAT (/,5X,'BEGIN GOLDEN SECTION SEARCH')
400   FORMAT (/,5X,'GOLDEN SECTION SEARCH IS COMPLETE')
410   FORMAT (/,5X,'BEGIN CUBIC INTERPOLATION ON RESULTS OF GOLDEN',
     1' SECTION SEARCH')
420   FORMAT (/,8X,'ALPHA',11X,'F',4(/,5X,2(1PE13.5)),/,12X,'A0',11X,
     1'A1',11X,'A2',11X,'A3',/,5X,4(1PE13.5),/,5X,'ESTIMATED ALPHA =',
     21PE13.5,2X,'(NOT USED IF LT.XL OR GT.XU)')
      END
C
C
C
C=DECK      ADS116
C --- SUBROUTINE ADS116(IGOTO,IONED,IPRNT1,NDV,NCON,OBJ,SLOPE,ISLOPE,
C    * ALPHA,ALPMAX,XMULT,EXTRAP,ZRO,DELALP,DABALP,ALPL,ALPU,
C    * XOLD,SVLB,SVUB,S,X,G,GGL,XSAV)
C     DIMENSION X(NDV),S(NDV),XOLD(NDV),SVLB(NDV),SVUB(NDV),G(NCON),
C    * GGL(NCON),XSAV(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO CONTROL ONE-DIMENSIONAL SEARCH FOR UNCONSTRAINED
C     FUNCTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                                 ***** 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
      SUBROUTINE ADS116 (IGOTO,IONED,IPRNT1,NDV,NCON,OBJ,SLOPE,ISLOPE,AL
     1PHA,ALPMAX,XMULT,EXTRAP,ZRO,DELALP,DABALP,ALPL,ALPU,XOLD,SVLB,SVUB
     2,S,X,G,GGL,XSAV,FBST,FL,FU,F1,F2,ALPBST,XL,XU,X1,X2,ICAL,II,JGOTO,
     3II1,IX,NITER,SCFX,SCFG,ISTRAT,SCFO)
      DIMENSION X(*),S(*),XOLD(*),SVLB(*),SVUB(*),G(*),GGL(*),XSAV(*),
     1SCFX(*),SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS117
C --- SUBROUTINE ADS117 (IGOTO,II,XL,X1,X2,XU,FL,F1,F2,FU,SLOPE,ISLOPE,
C    * ALPHA,OBJ,ZRO)
C     ------------------------------------------------------------------
C --- POLYNOMIAL INTERPOLATION FOR MINIMUM OF UNCONSTRAINED FUNCTION,
C     GIVEN INITIAL BOUNDS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C
C --- OUTPUT
      SUBROUTINE ADS117 (IGOTO,II,XL,X1,X2,XU,FL,F1,F2,FU,SLOPE,ISLOPE,A
     1LPHA,OBJ,ZRO)
      RETURN
      END
C
C
C
C=DECK      ADS118
C --- SUBROUTINE ADS118 (IGOTO,ZRO,XMULT,EXTRAP,ALPMAX,SLOPE,
C    * ISLOPE,ALPHA,OBJ)
C     ------------------------------------------------------------------
C --- POLYNOMIAL INTERPOLATION/EXTRAPOLATION FOR UNCONSTRAINED MINIMUM
C     WITHOUT FIRST GETTING BOUNDS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C
C --- OUTPUT
      SUBROUTINE ADS118 (IGOTO,ZRO,XMULT,EXTRAP,ALPMAX,SLOPE,ISLOPE,ALPH
     1A,OBJ,FL,FU,F1,F2,XL,XU,X1,X2)
C
      RETURN
      END
C
C
C
C=DECK      ADS119
C --- SUBROUTINE ADS119 (IGOTO,NCON,XMULT,EXTRAP,ALPMAX,SLOPE,ISLOPE,
C    1ISLOPG,ZRO,CTMIN,CTLMIN,GMCT,G,DG,GGL,GG1,GG2,GGU,
C    2IDG,ALPHA,OBJ,XL,X1,X2,XU,GMCTL,GMCT1,GMCT2,GMCTU,FL,F1,F2,FU)
C     ------------------------------------------------------------------
C --- ROUTINE TO INTERPOLATE/EXTRAPOLATE FOR CONSTRAINED MINIMUM
C     WITHOUT FIRST GETTING BOUNDS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               JUNE 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONETERY, CALIF.
C
C --- INPUT
C
C --- OUTPUT
      SUBROUTINE ADS119 (IGOTO,NCON,XMULT,EXTRAP,ALPMAX,SLOPE,ISLOPE,ISL
     1OPG,ZRO,CTMIN,CTLMIN,GMCT,G,DG,GGL,GG1,GG2,GGU,IDG,ALPHA,OBJ,XL,X1
     2,X2,XU,GMCTL,GMCT1,GMCT2,GMCTU,FL,F1,F2,FU)
      DIMENSION G(*),DG(*),GGL(*),GG1(*),GG2(*),IDG(*),GGU(*)
      IGOTO1=IGOTO+1
      GO TO (10,20,30,60,90), IGOTO1
10    CONTINUE
C     FIRST CALL.  EVALUATE FUNCTIONS AT X1=ALPHA AND CALL AGAIN.
      XL=0.
      FL=OBJ
      GMCTL=GMCT
      CALL ADS503 (NCON,G,GGL)
      IGOTO=1
      RETURN
20    CONTINUE
C     ------------------------------------------------------------------
C     2-POINT INTERPOLATION/EXTRAPOLATION.
C     ------------------------------------------------------------------
      X1=ALPHA
      F1=OBJ
      GMCT1=GMCT
      CALL ADS503 (NCON,G,GG1)
      ALPL=0.
      ALPU=EXTRAP*X1
      IF (GMCT1.GT.GMCTL.AND.GMCT1.GE.0.) ALPU=X1
C     UPDATE BOUNDS.
      II=2
      CALL ADS111 (NCON,II,ISLOPG,CTMIN,CTLMIN,ZRO,XL,X1,X2,XU,DG,GGL,GG
     11,GG2,G,IDG,ALPL,ALPU)
C     MINIMUM OBJECTIVE.
      ALP=-1.
      ICALC=1
      IF (ISLOPE.GT.0) CALL ADS108 (ICALC,XL,FL,SLOPE,X1,F1,X2,F2,XU,FU,
     1ZRO,ALP,YMN1)
C     PICK BEST MOVE.
      ALPHA=ALPU
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      IF (F1.GT.FL.AND.GMCTL.GT.0.) ALPHA=ALPL
      IF (ALPL.GT.ALPU) ALPHA=.5*(ALPL+ALPU)
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     CHECK TO BE SURE THIS ALPHA IS UNIQUE.
      DXL=ABS(ALPHA)
      DX1=ABS(ALPHA-X1)
C     IF NOT UNIQUE AND ISLOPE.GT.0, EXIT.
      DX=AMIN1(DXL,DX1)
      IF (DX.LE.ZRO.AND.ISLOPE.GT.0) GO TO 90
C     IF ALPHA IS NOT UNIQUE, PICK AVERAGE.
      IF (DX.LE.ZRO) ALPHA=.5*X1
C     EVALUATE FUNCTIONS AND CALL AGAIN.
      IGOTO=2
      RETURN
30    CONTINUE
C     ------------------------------------------------------------------
C     3-POINT INTERPOLATION/EXTRAPOLATION.
C     ------------------------------------------------------------------
      X2=ALPHA
      F2=OBJ
      GMCT2=GMCT
      CALL ADS503 (NCON,G,GG2)
C     BOUNDS.
      ALPL=0.
      ALPU=EXTRAP*AMAX1(XL,X1,X2)
      IF (GMCT2.GT.GMCT1.AND.GMCT1.GT.0.) ALPU=X2
      GMIN=AMIN1(GMCTL,GMCTL,GMCT2)
      IF (ALPU.GT.X2.OR.GMIN.LT.0.) GO TO 40
C     ALL DESIGNS ARE INFEASIBLE AND X2 IS UPPER BOUND.
C     INTERPOLATE FOR MINIMUM CONSTRAINT VIOLATION.
      ICALC=2
      CALL ADS108 (ICALC,XL,GMCTL,YP1,X1,GMCT1,X2,GMCT2,XU,GMCTU,ZRO,ALP
     1,YMN1)
      ALPHA=.5*X1
      IF (GMCT2.LT.GMCTL) ALPHA=.5*(X1+X2)
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      GO TO 50
40    CONTINUE
C     UPDATE BOUNDS.
      II=3
      CALL ADS111 (NCON,II,ISLOPG,CTMIN,CTLMIN,ZRO,XL,X1,X2,XU,DG,GGL,GG
     11,GG2,G,IDG,ALPL,ALPU)
C     MINIMIZE OBJECTIVE.
      ALP=-1.
      ICALC=2
      IF (ISLOPE.GT.0) ICALC=3
      CALL ADS108 (ICALC,XL,FL,SLOPE,X1,F1,X2,F2,XU,FU,ZRO,ALP,YMN1)
C     PICK BEST MOVE.
      ALPHA=ALPU
      IF (F2.GT.FL.AND.GMCTL.GT.0.) ALPHA=ALPL
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      IF (ALPL.GT.ALPU) ALPHA=.5*(ALPL+ALPU)
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     CHECK TO BE SURE ALPHA IS UNIQUE.
50    DXL=ABS(ALPHA)
      DX1=ABS(ALPHA-X1)
      DX2=ABS(ALPHA-X2)
      DX=AMIN1(DXL,DX1,DX2)
C     IF NOT UNIQUE, EXIT.
      IF (DX.LE.ZRO) GO TO 90
C     EVALUATE FUNCTIONS AND CALL AGAIN.
      IGOTO=3
      RETURN
60    CONTINUE
C     ------------------------------------------------------------------
C     4-POINT INTERPOLATION/EXTRAPOLATION.
C     ------------------------------------------------------------------
      IF (ISLOPE.GT.0.AND.ISLOPG.GT.0) GO TO 90
      XU=ALPHA
      FU=OBJ
      GMCTU=GMCT
      CALL ADS503 (NCON,G,GGU)
C     BOUNDS.
      ALPL=0.
      ALPU=EXTRAP*AMAX1(XL,X1,X2,XU)
      IF (GMCTU.GT.GMCT2.AND.GMCT2.GT.0.) ALPU=XU
      GMIN=AMIN1(GMCTL,GMCT1,GMCT2,GMCTU)
      IF (ALPU.GT.XU.OR.GMIN.LT.0.) GO TO 70
C     ALL DESIGNS ARE INFEASIBLE AND XU IS UPPER BOUND.
C     INTERPOLATE FOR MINIMUM CONSTRAINT VIOLATION.
      ICALC=4
      CALL ADS108 (ICALC,XL,GMCTL,YP1,X1,GMCT1,X2,GMCT2,XU,GMCTU,ZRO,ALP
     1,YMN1)
      ALPHA=.5*(X2+XU)
      IF (GMCT1.LT.GMCTU) ALPHA=.5*(X1+X2)
      IF (GMCTL.LT.GMCT2) ALPHA=.5*X1
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      GO TO 80
70    CONTINUE
C     UPDATE BOUNDS.
      II=4
      CALL ADS111 (NCON,II,ISLOPG,CTMIN,CTLMIN,ZRO,XL,X1,X2,XU,DG,GGL,GG
     11,GG2,G,IDG,ALPL,ALPU)
C     MINIMIZE OBJECTIVE.
      ALP=-1.
      ICALC=4
      CALL ADS108 (ICALC,XL,FL,SLOPE,X1,F1,X2,F2,XU,FU,ZRO,ALP,YMN1)
C     PICK BEST MOVE.
      ALPHA=ALPU
      IF (FU.GT.FL.AND.GMCTL.GT.0.) ALPHA=ALPL
      IF (ALP.GT.ALPL.AND.ALP.LT.ALPU) ALPHA=ALP
      IF (ALPL.GT.ALPU) ALPHA=.5*(ALPL+ALPU)
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     CHECK TO SEE IF THIS ALPHA IS UNIQUE.
80    DXL=ABS(ALPHA)
      DX1=ABS(ALPHA-X1)
      DX2=ABS(ALPHA-X2)
      DXU=ABS(ALPHA-XU)
      DX=AMIN1(DXL,DX1,DX2,DXU)
C     IF NOT UNIQUE, EXIT.
      IF (DX.LE.ZRO) GO TO 90
C     EVALUATE FUNCTIONS AND CALL AGAIN.
      IGOTO=4
      RETURN
90    CONTINUE
C     ------------------------------------------------------------------
C     SEARCH IS COMPLETE.  EXIT.
C     ------------------------------------------------------------------
      IGOTO=0
      RETURN
      END
C
C
C
C=DECK      ADS121
C --- SUBROUTINE ADS121 (JGOTO,OBJ,ALPHA,XMULT,ALPMAX,XL,X1,XU,FL,F1,FU)
C     ------------------------------------------------------------------
C --- ROUTINE TO FIND BRACKETS ON MINIMUM IN UNCONSTRAINED ONE-
C     DIMENSIONAL SEARCH
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             NOV. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     JGOTO - INITIALLY ZERO TO INDICATE FIRST CALL.  SUBSEQUENTLY
C          JGOTO IS LEFT AT THE VALUE RETURNED ON PREVIOUS CALL.
C     ICAL - NUMBER OF FUNCTION VALUE THIS CALL CORRESPONDS TO.
C     OBJ - VALUE OF THE OBJECTIVE FUNCTION CORRESPONDING TO X.
C     ALPHA - INITIAL ESTIMATE FOR THE MOVE PARAMETER OR THE VALUE
C         RETURNED FROM THE LAST CALL TO ASDS013.
C     XMULT - MULTIPLIER TO UPDATE THE BOUNDS ON ALPHA.
C     ALPMAX - MAXIMUM ALPHA ALLOWED.  IF ALPHA EXCEEDS THIS,
C         THE ROUTINE TEMINNATES AND THE SOLUTION IS ASSUMED
C         TO BE UNBOUNDED.  SEE NOTE BELOW.
C
C --- OUTPUT
C     JGOTO - IF ZERO, BRACKETS HAVE BEEN FOUND.  ELSE, EVALUATE
C         OBJ AND CALL ASD013 AGAIN.
C     ALPHA - MOVE PARAMETER FOR NEW X.
C     XL, X1, XU - ALPHA VALUES FOR LATER USE IN THE GOLDEN
C         SECTION METHOD.  IGNORE X1 IF ICAL.LT.3.
C     FL, F1, FU - FUNCTION VALUES CORRESPONDING TO XL, X1 AND XU.
C
C --- NOTE
C     IF AT THE END, ALPHA EXCEEDS ALPMAX, THIS IS AN ERROR CODE.
C     THE OBJECTIVE CORRESPONDING TO THIS ALPHA IS NOT EVALUATED, BUT
C         THE XI AND FI ARRAYS CONTAIN USEFUL INFORMATION
C         (ASSUMING THE INPUT INITIAL ALPHA WAS LESS THAN ALPMAX).
C
C --- NOTE
C     IF GOLDEN SECTION IS TO BE USED, IT IS SUGGESTED THAT
C     XMULT=(3+SQRT(5))/2.
C     THIS WILL RESULT IN EVALUATION OF F AT XL, X1 AND XU.
C
      SUBROUTINE ADS121 (JGOTO,OBJ,ALPHA,XMULT,ALPMAX,XL,X1,X2,XU,FL,F1,
     1F2,FU)
      RETURN
      END
C
C
C
C=DECK      ADS122
C --- SUBROUTINE ADS122(XL,X1,X2,XU)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE INITIAL INTERIOR POINTS, X1 AND X2 FOR
C     FINDING THE MINIMUM OF A FUNCTION USING THE GOLDEN SECTION METHOD.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                           AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     XL - LOWER BOUND ON SOLUTION.
C     XU - UPPER BOUND ON SOLUTION.
C
C --- OUTPUT
C     X1 - FIRST INTERMEDIATE POINT.  X1=GOLD*(XU-XL).
C     X2 - SECOND INTERMEDIATE POINT.  X2=XU-GOLD*(XU-XL).
C          GOLD IS THE GOLDEN SECTION NUMBER (3-SQRT(5))/2.
C
      SUBROUTINE ADS122 (XL,X1,X2,XU)
      GOLDX=0.38196601*(XU-XL)
      X1=XL+GOLDX
      X2=XU-GOLDX
      RETURN
      END
 
C
C
C
C=DECK      ADS123
C --- SUBROUTINE ADS123(IGOTO,NCON,ICAL,NPTS,OBJ,GMAX,ALPHA,ALPMAX,
C    *DELALP,DABALP,ZRO,XL,X1,X2,XU,FL,F1,F2,FU,GL,G1,G2,GU,
C    *IDL,ID1,ID2,IDU,G,GGL,GG1,GG2,GGU)
C     DIMENSION G(NCON),GGL(NCON),GG1(NCON),GG2(NCON),GGU(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM CONSTRAINED ONE-DIMENSIONAL SEARCH USING
C     THE GOLDEN SECTION METHOD AFTER INITIAL BOUNDS HAVE BEEN FOUND.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               NOV. 1980.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     IGOTO - CONTROL PARAMETER.  ON FIRST CALL IGOTO=0, ON
C         SUBSEQUENT CALLS, IGOTO = VALUE RETURNED FROM PREVIOUS CALL.
C     ICAL - ANALYSIS NUMBER ASSOCIATED WITH CURRENT DESIGN.
C     NPTS - NUMBER OF POINTS INITIALLY AVAILABLE. MUST BE GE.2.
C     OBJ - OBJECTIVE FUNCTION VALUE CORRESPONDING TO X.
C     GMAX - MAXIMUM CONSTRAINT VALUE FOR CURRENT DESIGN.
C     ALPHA - INITIAL SEARCH PARAMETER.
C     ALPMAX - MAX ALPHA THAT WILL BE ALLOWED.
C     DELALP - RELATIVE CONVERGENCE TOLERANCE ON ALPHA.
C     DABALP - ABSOLUTE CONVERGENCE TOLERANCE ON ALPHA.  THE
C         CONVERGENCE CRITERION GIVING THE LARGEST TOLERANCE WILL
C         BE USED.
C     ZRO - SMALL POSITIVE NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.
C     XL-XU - UP TO FOUR ALPHA VALUES, THE FIRST AND LAST OF WHICH
C         BRACKET THE MINIMUM.
C     FL-FU - FUNCTIONS ASSOCIATED WITH XL-XU.
C     GL-GU - GMAX VALUES ASSOCIATED WITH XL-XU.
C     IDL-IDU - ANALYSIS NUMBERS ASSOCIATED WITH XL-XU.
C
C --- OUTPUT
C     IGOTO - CALCULATION PARAMETER.  IF IGOTO = 0, SOLUTION IS
C         COMPLETE.  ELSE CALCULATE OBJ AND CALL ADS123 AGAIN.
C     OBJ - OPTIMUM OBJECTIVE IF IGOTO = 0.
C     ALPHA - OPTIMUM MOVE PARAMETER IF IGOTO = 0.
C     XL-XU - UPDATED VALUES OF XL-XU.
C     FL-FU - UPDATED VALUES OF FL-FU.
C     GL-GU - UPDATED VALUES OF GL-GU.
C     IDL-IDU - UPDATED VALUES OF IDL-IDU.
C
C --- EXTERNALS
C     ADS122, ADS124
C
      SUBROUTINE ADS123 (IGOTO,NCON,ICAL,NPTS,OBJ,GMAX,ALPHA,ALPMAX,DELA
     1LP,DABALP,ZRO,XL,X1,X2,XU,FL,F1,F2,FU,GL,G1,G2,GU,IDL,ID1,ID2,IDU,
     2G,GGL,GG1,GG2,GGU,II,IX,NITER)
      DIMENSION G(*),GGL(*),GG1(*),GG2(*),GGU(*)
      IGOTO1=IGOTO+1
      GO TO (10,20,40,50), IGOTO1
10    CONTINUE
C     EVALUATE INTERIOR POINT(S) AS REQUIRED.
C     INTERIOR POINTS.
      CALL ADS122 (XL,X1,X2,XU)
      IF (NPTS.GT.2) GO TO 30
C     ICAL=2.  EVALUATE F1 THEN F2.
      ALPHA=X1
      IGOTO=1
      RETURN
20    CONTINUE
      ID1=ICAL
      F1=OBJ
      G1=GMAX
      CALL ADS503 (NCON,G,GG1)
30    CONTINUE
C     EVALUATE F2.
      ALPHA=X2
      IGOTO=2
      RETURN
40    CONTINUE
      ID2=ICAL
      F2=OBJ
      G2=GMAX
      CALL ADS503 (NCON,G,GG2)
C     BRACKETS HAVE BEEN FOUND AND INTERIOR POINTS EVALUATED.
C     UPDATE TO CONVERGENCE.
      DAB=DELALP*(XU-XL)
      IF (DAB.LT.DABALP) DAB=DABALP
      IF (DAB.LT.ZRO) DAB=ZRO
      EPS=DAB/(XU-XL)
      AITER=-2.0780869*ALOG(EPS)
      NITER=AITER
      II=0
      IX=0
50    II=II+1
      IF (IX.NE.1) GO TO 60
C     IX=1.
      ID1=ICAL
      F1=OBJ
      G1=GMAX
      CALL ADS503 (NCON,G,GG1)
      GO TO 70
60    IF (IX.NE.2) GO TO 70
C     IX=2.
      ID2=ICAL
      F2=OBJ
      G2=GMAX
      CALL ADS503 (NCON,G,GG2)
70    CONTINUE
      IF (II.GT.NITER) GO TO 80
C     UPDATE BOUNDS.
      CALL ADS124 (XL,X1,X2,XU,FL,F1,F2,FU,GL,G1,G2,GU,IDL,ID1,ID2,IDU,Z
     1RO,IX,NCON,G,GGL,GG1,GG2,GGU)
      ALPHA=X1
      IF (IX.GT.1) ALPHA=X2
C     EVALUATE FUNCTION.
      IGOTO=3
      RETURN
80    CONTINUE
C     SOLUTION IS COMPLETE.
      IGOTO=0
      RETURN
      END
C
C
C
C=DECK      ADS124
C --- SUBROUTINE ADS124(XL,X1,X2,XU,FL,F1,F2,FU,GL,G1,G2,GU,IDL,ID1,
C     ID2,IDU,GTOL,IX,NCON,G,GGL,GG1,GG2,GGU)
C     DIMENSION G(NCON),GGL(NCON),GG1(NCON),GG2(NCON),GGU(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO UPDATE THE BOUNDS ON THE MINIMUM AND ESTIMATE A NEW
C     INTERIOR POINT FOR THE GOLDEN SECTION METHOD FOR CONSTRAINED
C     FUNCTION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     XL-XU - FOUR ALPHA VALUES FOR GOLDEN SECTION METHOD.
C     FL-FU - FUNCTION VALUES ASSOCIATED WITH XL-XU.
C     GL-GU - GMAX VALUES ASSOCIATED WITH XL-XU.
C     IDL-IDU - ANALYSIS NUMBERS ASSOCIATED WITH XL-XU.
C     GTOL - TOLORANCE DETERMINING ACCEPTABILITY OF CONSTRAINT VALUES.
C
C --- OUTPUT
C     XL-XU - UPDATED VALUES OF XL-XU.
C     FL-FU - UPDATED VALUES OF FL-FU.
C         IF IX=1, F1 IS NOT UPDATED.  IF IX=2, F2 IS NOT UPDATED.
C     GL-GU - UPDATED VALUES OF GL-GU.
C         IF IX=1, G1 IS NOT UPDATED.  IF IX=2, G2 IS NOT UPDATED.
C     IDL-IDU - UPDATED VALUES OF IDL-IDU.
C         IF IX=1, ID1 IS NOT UPDATED.  IF IX=2, ID2 IS NOT UPDATED.
C     IX - NUMBER IDENTIFYING NEW INTERIOR POINT WHICH WAS CREATED.
C          IX=1 OR 2, CORRESPONDING TO X1 OR X2.  THE CORRESPONDING
C         FUNCTION VALUE, F1 OR F2 MUST BE CALCULATED LATER.
C
      SUBROUTINE ADS124 (XL,X1,X2,XU,FL,F1,F2,FU,GL,G1,G2,GU,IDL,ID1,ID2
     1,IDU,GTOL,IX,NCON,G,GGL,GG1,GG2,GGU)
      DIMENSION G(*),GGL(*),GG1(*),GG2(*),GGU(*)
C     GOLDEN SECTION FRACTION.
      GOLD=0.38196601
      IF (IX.EQ.1) CALL ADS503 (NCON,G,GG1)
      IF (IX.EQ.2) CALL ADS503 (NCON,G,GG2)
C     PICK BEST POINT AND REDUCE BOUNDS.
C     ARE G1 AND G2 FEASIBLE.
      IF (G1.LE.GTOL.AND.G2.LE.GTOL) GO TO 10
C     NO. G1 AND/OR G2 IS INFEASIBLE.
C     IF G1 IS FEASIBLE, G2 IS NOT.  THUS X2 IS NEW UPPER BOUND.
      IF (G1.LT.GTOL) GO TO 30
C     G1 IS INFEASIBLE.
C     FIND MINIMUM CONSTRAINT VIOLATION.
      IF (G2.GT.G1) GO TO 30
C     G2 IS LEAST VIOLATED CONSTRAINT.  X1 IS NEW LOWER BOUND.
      GO TO 20
10    IF (F2.GT.F1) GO TO 30
C     F2.LT.F1 .... X1 = NEW LOWER BOUND.
20    XL=X1
      FL=F1
      GL=G1
      CALL ADS503 (NCON,GG1,GGL)
      IDL=ID1
      X1=X2
      F1=F2
      G1=G2
      CALL ADS503 (NCON,GG2,GG1)
      ID1=ID2
      X2=XU-GOLD*(XU-XL)
      IX=2
      RETURN
30    CONTINUE
C     F1.LT.F2 .... X2 = NEW UPPER BOUND.
      XU=X2
      FU=F2
      GU=G2
      CALL ADS503 (NCON,GG2,GGU)
      IDU=ID2
      X2=X1
      F2=F1
      G2=G1
      CALL ADS503 (NCON,GG1,GG2)
      ID2=ID1
      X1=XL+GOLD*(XU-XL)
      IX=1
      RETURN
      END
C
C
C
C=DECK      ADS125
C --- SUBROUTINE ADS125(JGOTO,NCON,ICAL,OBJ,GMCT,ALPHA,XMULT,ALPMAX,
C     *XL,X1,XU,FL,F1,FU,GL,G1,GU,IDL,ID1,IDU,G,GGL,GG1,GGU)
C     DIMENSION G(NCON),GGL(NCON),GG1(NCON),GGU(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO FIND BRACKETS ON MINIMUM IN CONSTRAINED ONE-
C     DIMENSIONAL SEARCH
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             NOV. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     JGOTO - INITIALLY ZERO TO INDICATE FIRST CALL.  SUBSEQUENTLY
C          JGOTO IS LEFT AT THE VALUE RETURNED ON PREVIOUS CALL.
C     ICAL - ANALYSIS NUMBER ASSOCIATED WITH CURRENT DESIGN.
C     OBJ - VALUE OF THE OBJECTIVE FUNCTION CORRESPONDING TO X.
C     GMCT - MAXIMUM OF (CONSTRAINT VALUE - CONSTRAINT VIOLATION
C         TOLORANCE) FOR THE CURRENT DESIGN.
C     ALPHA - INITIAL ESTIMATE FOR THE MOVE PARAMETER OR THE VALUE
C         RETURNED FROM THE LAST CALL TO ASDS030.
C     XMULT - MULTIPLIER TO UPDATE THE BOUNDS ON ALPHA.
C     ALPMAX - MAXIMUM ALPHA ALLOWED.  IF ALPHA EXCEEDS THIS,
C         THE ROUTINE TEMINNATES AND THE SOLUTION IS ASSUMED
C         TO BE UNBOUNDED.  SEE NOTE BELOW.
C     GGL,GG1,GGU - CONSTRAINT VECTORS.
C
C --- OUTPUT
C     JGOTO - IF ZERO, BRACKETS HAVE BEEN FOUND.  ELSE, EVALUATE
C         OBJ AND CALL ASD013 AGAIN.
C     ALPHA - MOVE PARAMETER CORRESPONDING TO NEW X.
C     XL-XU - THREE ALPHA VALUES FOR LATER USE IN GOLDEN SECTION METHOD.
C     FL-FU - FUNCTION VALUES ASSOCIATED WITH XL-XU.
C     GL-GU - GMCT VALUES ASSOCIATED WITH XL-XU.
C
C --- NOTE
C     IF AT THE END, ALPHA EXCEEDS ALPMAX, THIS IS AN ERROR CODE.
C         THE OBJECTIVE CORRESPONDING TO THIS ALPHA IS NOT EVALUATED,
C         BUT THE XI AND FI ARRAYS CONTAIN USEFUL INFORMATION
C         (ASSUMING THE INPUT INITIAL ALPHA WAS LESS THAN ALPMAX).
C
C --- NOTE
C     IF GOLDEN SECTION IS TO BE USED, IT IS SUGGESTED THAT
C     XMULT=(3+SQRT(5))/2.
C     THIS WILL RESULT IN EVALUATION OF F AT XL, X1 AND XU.
C
      SUBROUTINE ADS125 (JGOTO,NCON,OBJ,GMCT,ALPHA,XMULT,ALPMAX,XL,X1,X2
     1,XU,FL,F1,F2,FU,GL,G1,G2,GU,G,GGL,GG1,GG2,GGU)
      DIMENSION G(*),GGL(*),GG1(*),GG2(*),GGU(*)
C
      IF (JGOTO.GT.0) GO TO 10
C     FIRST CALL.  INITIALIZE XL, FL, GL.
      XL=0.
      FL=OBJ
      GL=GMCT
      X1=0.
      F1=FL
      G1=GL
      X2=0.
      F2=FL
      G2=GL
      CALL ADS503 (NCON,G,GGL)
      CALL ADS503 (NCON,G,GG1)
      CALL ADS503 (NCON,G,GG2)
C     CHECK FOR INPUT ALPHA GREATER THAN ALPMAX.
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     SET XU=ALPHA.
      XU=ALPHA
      JGOTO=1
C     EVALUATE OBJ.
      RETURN
10    CONTINUE
      FU=OBJ
      GU=GMCT
      CALL ADS503 (NCON,G,GGU)
      IF (ALPHA.GE.(0.999999*ALPMAX)) GO TO 40
      IF (GU.LE.0.0.AND.G1.LE.0.0) GO TO 20
C     SOME CONSTRAINT IS VIOLATED.
C     IS A NEW CONSTRAINT CRITICAL OR THE MAXIMUM CONSTRAINT VALUE
C     INCREASING.
      IF (GU.GT.G1) GO TO 40
C     NO. IF CONSTRAINT GU IS VIOLATED, GO INCREASE ALPHA.
      IF (GU.GT.0.) GO TO 30
20    CONTINUE
C     CHECK FOR INCREASING FUNCTION VALUE.
      IF (OBJ.GT.F1) GO TO 40
30    CONTINUE
C     NO.
C     PICK NEW ALPHA.
      ALPHA=X2+XMULT*(XU-X2)
      XL=X1
      X1=X2
      X2=XU
      FL=F1
      F1=F2
      F2=FU
      GL=G1
      G1=G2
      G2=GU
      CALL ADS503 (NCON,GG1,GGL)
      CALL ADS503 (NCON,GG2,GG1)
      CALL ADS503 (NCON,GGU,GG2)
C     CHECK FOR UNBOUNDED SOLUTION.
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
      XU=ALPHA
C     EVALUATE OBJ.
      JGOTO=1
      RETURN
40    CONTINUE
C     XU IS UPPER BOUND UNLESS ALPHA EXCEEDS ALPMAX.
C     SOLUTION IS COMPLETE.
      JGOTO=0
      RETURN
      END
C
C
C
C=DECK      ADS126
C --- SUBROUTINE ADS126(IGOTO,NPTS,OBJ,ALPHA,ALPMAX,DELALP,DABALP,ZRO,X,
C    *XL,X1,X2,XU,FL,F1,F2,FU)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM UNCONSTRAINED ONE-DIMENSIONAL SEARCH USING
C     THE GOLDEN SECTION METHOD.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               NOV. 1980.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     IGOTO - CONTROL PARAMETER.  ON FIRST CALL IGOTO=0, ON
C         SUBSEQUENT CALLS, IGOTO = VALUE RETURNED FROM PREVIOUS CALL.
C     ICAL - FUNCTION NUMBER ASSOCIATED WITH OBJ.
C     OBJ - OBJECTIVE FUNCTION VALUE CORRESPONDING TO X.
C     ALPHA - INITIAL SEARCH PARAMETER.
C     ALPMAX - MAX ALPHA THAT WILL BE ALLOWED.
C     DELALP - RELATIVE CONVERGENCE TOLERANCE ON ALPHA.
C     ZRO - SMALL POSITIVE NUMBER TO INDICATE NUMERICAL ZERO.
C         INDICATOR OF MACHINE ACCURACY.
C
C --- OUTPUT
C     IGOTO - CALCULATION PARAMETER.  IF IGOTO = 0, SOLUTION IS
C         COMPLETE.  ELSE CALCULATE OBJ AND CALL ADS126 AGAIN.
C     OBJ - OPTIMUM OBJECTIVE IF IGOTO = 0.
C     ALPHA - OPTIMUM MOVE PARAMETER IF IGOTO = 0.
C
C --- NOTE
C     IF ALPHA EXCEEDS ALPMAX ON RETURN, THE SOLUTION
C     IS ASSUMED UNBOUNDED AND ALPHA=ALPMAX IS USED.
C
C --- EXTERNALS
C     ADS122, ADS127
C
      SUBROUTINE ADS126 (IGOTO,NPTS,OBJ,ALPHA,ALPMAX,DELALP,DABALP,ZRO,X
     1L,X1,X2,XU,FL,F1,F2,FU,II,IX,NITER)
      RETURN
      END
C
C
C
C=DECK      ADS127
C --- SUBROUTINE ADS127(XL,X1,X2,XU,FL,F1,F2,FU,IX)
C     ------------------------------------------------------------------
C --- ROUTINE TO UPDATE THE BOUNDS ON THE MINIMUM AND ESTIMATE A NEW
C     INTERIOR POINT FOR THE GOLDEN SECTION METHOD.  UNCONSTRAINED
C     FUNCTION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             AUG. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     XL,FL - LOWER BOUND AND FUNCTION VALUE.
C     X1,F1 - FIRST INTERMEDIATE POINT AND FUNCTION VALUE.
C     X2,F2 - SECOND INTERMEDIATE POINT AND FUNCTION VALUE.
C     XU,FU - UPPER BOUND AND FUNCTION VALUE.
C
C --- OUTPUT
C     XL,FL - UPDATED XL AND FL.
C     X1,F1 - UPDATED X1 AND F1 IF IX=2.  X1 ONLY IF IX=1.
C     X2,F2 - UPDATED X2 AND F2 IF IX=1.  X2 ONLY IF IX=2.
C     XU,FU - UPDATED XU AND FU.
C     IX - NUMBER IDENTIFYING NEW INTERIOR POINT WHICH WAS CREATED.
C          IX=1 OR 2, CORRESPONDING TO X1 OR X2.  THE CORRESPONDING
C         FUNCTION VALUE, F1 OR F2 MUST BE CALCULATED LATER.
C
      SUBROUTINE ADS127 (XL,X1,X2,XU,FL,F1,F2,FU,IX)
C     GOLDEN SECTION FRACTION.
      RETURN
      END
C
C
C
C=DECK      ADS201
C --- SUBROUTINE ADS201 (NCON,NGT,G,IDG,IC,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
C     DIMENSION G(NCON),IDG(NCON),IC(NCOLA)
C     ------------------------------------------------------------------
C --- ROUTINE TO IDENTIFY THE NGT MOST CRITICAL CONSTRAINTS
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                JULY  1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NCON - NUMBER OF CONSTRAINTS.
C     NGT - NUMBER OF MOST CRITICAL CONSTRAINTS TO BE IDENTIFIED.
C     G - VECTOR OF CONSTRAINT VALUES.  MINIMUM DIMENSION IS NCON.
C     IDG - VECTOR IDENTIFYING CONSTRAINT TYPE.
C         MINIMUM DIMENSION IS NCON.
C         -2 - LINEAR EQUALITY CONSTRAINT.
C         -1 - NONLINEAR EQUALITY CONSTRAINT.
C         0,1 - NONLINEAR INEQUALITY CONSTRAINT.
C         2 - LINEAR INEQUALITY CONSTRAINT.
C
C --- OUTPUT.
C     IC - VECTOR CONTAINING NUMBER OF NGT ACTIVE CONSTRAINTS.
C
      SUBROUTINE ADS201 (NCON,NGT,G,IDG,IC,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
      DIMENSION G(*),IDG(*),IC(*)
C
      NAC=0
      NVC=0
C     IDENTIFY ALL EQUALITY CONSTRAINTS.
      N=0
      DO 10 I=1,NGT
10    IC(I)=0
      DO 20 I=1,NCON
      IF (IDG(I).GE.0) GO TO 20
      C1=CTMIN
      IF (IDG(I).EQ.-2) C1=CTLMIN
      IF (ABS(G(I)).LE.C1) NAC=NAC+1
      IF (G(I).GT.C1) NVC=NVC+1
      N=N+1
      IC(N)=I
20    CONTINUE
      IF (N.GE.NGT) RETURN
C     INEQUALITY CONSTRAINTS.
C     FIND ACTIVE AND VIOLATED G(I)
      DO 60 I=1,NCON
      IF (N.EQ.0) GO TO 40
C     IS THIS CONSTRAINT ALREADY IN IC?
      DO 30 K=1,N
      IF (I.EQ.IC(K)) GO TO 60
30    CONTINUE
40    CONTINUE
      C1=CT
      C2=CTMIN
      I1=IDG(I)
      IF (IABS(I1).LT.2) GO TO 50
C     LINEAR CONSTRAINT.
      C1=CTL
      C2=CTLMIN
50    G1=G(I)
      IF (G1.LT.C1) GO TO 60
      IF (G1.GE.C1.AND.G1.LE.C2) NAC=NAC+1
      IF (G1.GT.C2) NVC=NVC+1
      N=N+1
      IC(N)=I
60    CONTINUE
C     FIND REMAINING NGT-N MOST CRITICAL CONSTRAINTS BY MAXIMUM VALUE.
      M=NGT-N
      IF (M.LE.0) RETURN
      DO 100 II=1,M
      GMAX=-1.0E+20
      IMX=0
C     FIND MAXIMUM G(I).
      DO 90 I=1,NCON
      IF (N.EQ.0) GO TO 80
      DO 70 K=1,N
      IF (IC(K).EQ.I) GO TO 90
70    CONTINUE
80    IF (G(I).LT.GMAX) GO TO 90
      IMX=I
      GMAX=G(I)
90    CONTINUE
      IF (IMX.EQ.0) GO TO 110
      N=N+1
      IC(N)=IMX
100   CONTINUE
110   CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS202
C --- SUBROUTINE ADS202 (NDB,ZRO,B,NRB)
C     DIMENSION B(NRB,NRB)
C     ------------------------------------------------------------------
C --- ROUTINE TO INVERT MATRIX B AND STORE BACK IN B.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               AUG. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDB - DIMENSIONED SIZE OF THE MATRIX CONTAINED IN B.
C     ZRO - NUMERICAL ZERO FOR COMPUTATIONAL PURPOSES.
C     B - MATRIX TO BE INVERTED.
C     NRB - DIMENSION OF B.
C
C --- OUTPUT
C     B - INVERSE OF B, CALCULATED BY ELIMINATION WITHOUT PIVOT SEARCH.
C
      SUBROUTINE ADS202 (NDB,ZRO,B,NRB)
      DIMENSION B(NRB,*)
C
      ZRO10=10.*ZRO
C     BEGIN INVERSION.
      DO 60 I=1,NDB
C     IF ZERO ROW, IGNORE.
      BMX=B(I,I)
      IF (ABS(BMX).GT.ZRO10) GO TO 20
C     ZERO OUT THIS ROW AND COLUMN.
      DO 10 J=1,NDB
      B(I,J)=0.
10    B(J,I)=0.
      GO TO 60
C     PIVOT.
20    BMX=1./BMX
      DO 30 J=1,NDB
30    B(I,J)=BMX*B(I,J)
      DO 50 II=1,NDB
      IF (II.EQ.I) GO TO 50
      B1=B(II,I)
      DO 40 J=1,NDB
40    B(II,J)=B(II,J)-B1*B(I,J)
      B(II,I)=-BMX*B1
50    CONTINUE
      B(I,I)=BMX
60    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS203
C --- SUBROUTINE ADS203 (NDV,NAVC,NACS,A,NRA,B,NRB,XTMP,GTMP,ISIDC)
C     DIMENSION A(NRA,NAVC,B(NRB,NRB),XTMP(NDV),GTMP(NACT)
C     DIMENSION ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE DELTA-X TO MOVE BACK TO CONSTRAINT
C     BOUNDARIES IN ROBUST METHOD OF FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                                AUG. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     NAVC - NUMBER OF ACTIVE CONSTRAINTS.
C     NACS - NUMBER OF ACTIVE SIDE CONSTRAINTS.
C     A - MATRIX, THE COLUMNS OF WHICH CONTAIN GRADIENTS OF THE NAVC
C         ACTIVE CONSTRAINTS.
C     NRA - DIMENSIONED ROWS OF A.
C     B - INVERSE OF A-TRANS TIMES A.
C     NRB - DIMENSIONED ROWS OF B.
C     GTMP - CURRENT VALUES OF ACTIVE CONSTRAINTS.
C     ISIDC - INTEGER ARRAY IDENTIFYING ACTIVE SIDE CONSTRAINTS.
C
C --- OUTPUT.
C     XTMP - DELTA-X VECTOR TO DRIVE CONSTRAINTS TO ZERO.
C
      SUBROUTINE ADS203 (NDV,NAVC,NACS,A,NRA,B,NRB,XTMP,GTMP,ISIDC)
      DIMENSION A(NRA,*),B(NRB,*),XTMP(*),GTMP(*),ISIDC(*)
C
      NACT=NAVC+NACS
C     STORE G IN XTMP FOR NOW.
      DO 10 I=1,NACT
10    XTMP(I)=GTMP(I)
C     PUT B*XTMP IN GTMP.
      DO 30 I=1,NACT
      GG=0.
      DO 20 J=1,NACT
20    GG=GG+B(I,J)*XTMP(J)
30    GTMP(I)=GG
C     PUT -A*GTMP IN XTMP.
      DO 40 I=1,NDV
40    XTMP(I)=0.
      DO 50 J=1,NAVC
      GG=GTMP(J)
      DO 50 I=1,NDV
50    XTMP(I)=XTMP(I)-A(I,J)*GG
C     LINEAR CONSTRAINT TERMS.
      IF (NACS.EQ.0) GO TO 80
      NN=NAVC
      DO 70 I=1,NDV
      II=ISIDC(I)
      IF (II.EQ.0) GO TO 70
      IF (II.EQ.1) GO TO 60
C     LOWER BOUND IS ACTIVE.
      NN=NN+1
      XTMP(I)=XTMP(I)+GTMP(NN)
      IF (II.LT.0) GO TO 70
C     UPPER BOUND IS ACTIVE.
60    NN=NN+1
      XTMP(I)=XTMP(I)-GTMP(NN)
70    CONTINUE
80    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS204
C --- SUBROUTINE ADS204 (KGOTO,INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,ITMAX,
C    1 ICNDIR,DF,S,ZRO,DLOBJ1,DLOBJ2,DX1,DX2,XOLD,SVLB,SVUB,DELOBJ,
C    2 DABOBJ,ITRM,XTMP,IPRNT2,WK,IWK,G,SCFX,H,DX,DFG,IVAMET,IC,
C    3 IDG,ISIDC,SCFO,IFCALL,IGCALL,ALPMAX)
C     DIMENSION X(NDV),S(NDV),DF(NDV),XOLD(NDV),SVLB(NDV),SVUB(NDV),
C    1XTMP(NDV),WK(NRWK),IWK(NRIWK),G(NCON),SCFX(NDV),DX(NDV),DFG(NDV),
C    2H(NDV*(NDV+1)/2),IC(NCOLA),IDG(NCON),ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM FLETCHER-REEVES UNCONSTRAINED MINIMIZATION.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                        FEB. 1982
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      KGOTO  - CONTROL PQRAMETER.
C      INFO   - CONTROL PARAMETER.
C      ISTRAT - STRATEGY IDENTIFIER.
C      IONED  - ONE D. SEARCH IDENTIFIER.
C      NDV    - NUMBER OF DESIGN VARIABLES.
C      NCON   - NUMBER OF CONSTRAINTS.
C      OBJ    - OBJECTIVE.
C      X      - DESIGN VARIABLES.
C      ITMAX  - MAXIMUM ITERATION NUMBER.
C      ICNDIR - ITERATION NUMBER RETURN TO STEETEST DESCENT METHOD.
C      DF     - GRADIENT OF OBJECTIVE.
C      S      - ARRAY FOR SEARCH DIRECTION.
C      ZRO    - ZERO.
C      DLOBJ1,DLOBJ2,DX1,DX2 - PARAMETERS TO ESTIMATE INITIAL ALPHA.
C      XOLD   - FORMER DESIGN VARIABLE.
C      SVLB,SVUB - LOWER AND UPPER BOUND OF DESIGN VARIABLES.
C      DELOBJ,DABOBJ,ITRM - PARAMETERS FOR CONVERGENCE CROTERIA.
C      XTMP   - TEMPORARY ARRAY FOR DESIGN VARIABLES.
C      IPRNT2 - PRINT CONTROL IDENTIFIER FOR OPTIMIZATION LEVEL.
C      WK,IWK - REAL AND INTEGER WORK ARRAY.
C      G      - CONSTRAINT VALUE.
C      SCFX   - SCALE FACTOR FOR DESIGN VARIABLES.
C      H,DX,DFG - ARRAY FOR VARIABLE METRIC METHOD.
C      IVAMET - VARIABLE METRIC METHOD CONTROL IDENTIFIER.
C      IC     - ARRAY IDENTIFYING ACTIVE CONSTRAINTS.
C      IDG    - CONSTRAINT TYPE IDENTIFIER.
C      ISIDC  - ARRAY FOR IDENTIFY ACTIVE SIDE CONSTRAINTS.
C      SCFO   - SCALE FACTOR OF OBJECTIVE.
C      IFCALL,IGCALL - NUMBER OF FUNCTION AND GRADIENTS CALL.
C --- OUTPUT
C      OBJ    - OPTIMUM OBJECTIVE.
C      X      - OPTIMUM DESIGN VARIABLES.
C      G      - CONSTRAIN VALUE CORESPOND TO  OPTIMUM DESIGN VARIABLES.
C
      SUBROUTINE ADS204 (KGOTO,INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,ITMAX,IC
     1NDIR,DF,S,ZRO,DLOBJ1,DLOBJ2,DX1,DX2,XOLD,SVLB,SVUB,DELOBJ,DABOBJ,I
     2TRM,XTMP,IPRNT2,WK,IWK,G,SCFX,H,DX,DFG,IVAMET,IC,IDG,ISIDC,SCFO,IF
     3CALL,IGCALL,ALPHA,ALPSAV,DF2,OBJ1,ICOUNT,IDAB,IDEL,ITER,LGOTO,ALPM
     4AX,SCFG)
      DIMENSION X(*),S(*),DF(*),XOLD(*),SVLB(*),SVUB(*),XTMP(*),WK(*),IW
     1K(*),G(*),SCFX(*),DX(*),DFG(*),H(*),IC(*),IDG(*),ISIDC(*),SCFG(*)
C
      RETURN
      END
C
C
C
C=DECK      ADS205
C --- SUBROUTINE ADS205 (IGOTO,INFO,IONED,NDV,NCON,ITMAX,ICNDIR,NGT,
C    1 NAC,NVC,IPRNT2,ITRMOP,OBJ,ZRO,CT,CTMIN,CTL,CTLMIN,STOL,
C    2 THETAZ,DELOBJ,DABOBJ,SCFO,SLOPF,ALPHA,ALPMAX,X,SVLB,SVUB,DF,S,G
C    3 ,IC,IDG,DG,THETA,C,ISIDC,XOLD,XTMP,GGL,SCFX,ITMP,SCFG,A,NRA,NCOLA
C    4 ,B,NRB,WK,IWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM CONSTRAINED MINIMIZATION BY THE METHOD OF
C     FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                                  FEB. 1982
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C     IDG(I) - CONSTRAINT TYPE INDICATOR.
C       0,1 - NONLINEAR INEQUALITY CONSTRAINT.
C         2 - LINEAR INEQUALITY CONSTRAINT.
C        -1 - NONLINEAR EQUALITY CONSTRAINT.
C        -2 - LINEAR EQUALITY CONSTRAINT.
C
C --- OUTPUT
C
      SUBROUTINE ADS205 (IGOTO,INFO,IONED,NDV,NCON,ITMAX,ICNDIR,NGT,NAC,
     1NVC,IPRNT2,ITRMOP,OBJ,ZRO,CT,CTMIN,CTL,CTLMIN,STOL,THETAZ,DELOBJ,D
     2ABOBJ,SCFO,SLOPF,ALPHA,ALPMAX,X,SVLB,SVUB,DF,S,G,IC,IDG,DG,THETA,C
     3,ISIDC,XOLD,XTMP,GGL,SCFX,ITMP,SCFG,A,NRA,NCOLA,B,NRB,WK,IWK,
     4ICOUNT,IDAB,IDEL,ITER,LGOTO,NACS,NAVC,NGRAD,ISTRAT,TEMP)
      DIMENSION X(*),SVLB(*),SVUB(*),DF(*),S(*),G(*),IC(*),IDG(*),DG(*),
     1THETA(*),C(*),ISIDC(*),XOLD(*),XTMP(*),GGL(*),SCFX(*),ITMP(*),SCFG
     2(*),A(NRA,*),B(NRB,*),WK(*),IWK(*),TEMP(10)
C
C     GET INFO FROM TEMP
      ALPSAV=TEMP(1)
      BETA=TEMP(2)
      DF2=TEMP(3)
      OBJ1=TEMP(4)
      PHI=TEMP(5)
      DLOBJ1=TEMP(6)
      DLOBJ2=TEMP(7)
      DX1=TEMP(8)
      DX2=TEMP(9)
      ZRO10=10.*ZRO
      IGOTO1=IGOTO+1
      GO TO (10,60,240), IGOTO1
10    CONTINUE
C     ------------------------------------------------------------------
C     INITIAL CALL.  SET UP PARAMETERS.
C     ------------------------------------------------------------------
C     PRINT AS REQUIRED.
      IF (ISTRAT.EQ.0.AND.IPRNT2.GT.0) WRITE (8,350)
      IF (IPRNT2.GT.0) WRITE (8,460)
C     INITIALIZE PARAMETERS.
      ITER=0
      ICOUNT=0
      ALPSAV=0.
      PHI=5.
      IDEL=0
      IDAB=0
      NGRAD=1
C     INITIALIZE S-VECTOR AND ISIDC-VECTOR TO ZERO.
      DO 20 I=1,NDV
      ISIDC(I)=0
20    S(I)=0.
      IF (IPRNT2.EQ.0) GO TO 30
      OBJA=OBJ/SCFO
      WRITE (8,560) OBJA
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
      ICALC=5
      CALL ADS402 (ICALC,SVLB,NDV,SCFX)
      ICALC=6
      CALL ADS402 (ICALC,SVUB,NDV,SCFX)
      ICALC=4
      CALL ADS402 (ICALC,G,NCON,SCFG)
30    CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION.  BEGIN NEW ITERATION.
C     ------------------------------------------------------------------
40    CONTINUE
      ITER=ITER+1
      OBJ1=OBJ
      IF (IPRNT2.GT.2) WRITE (8,570) ITER
      IF (NGRAD.EQ.0) GO TO 60
C     ------------------------------------------------------------------
C     CALCULATE GRADIENT OF OBJECTIVE AND ACTIVE AND/OR VIOLATED
C     CONSTRAINTS.
C     ------------------------------------------------------------------
      IF (ITER.GT.1) GO TO 50
C     GRADIENTS ARE ALREADY AVAILABLE.  SHIFT A AND IC AS REQUIRED.
      CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
      GO TO 60
50    CONTINUE
C     DETERMINE THE ACTIVE CONSTRAINT SET.
C     GENERAL CONSTRAINTS, G.
      IF (NGT.LT.NCON) CALL ADS201 (NCON,NGT,G,IDG,IC,CT,CTMIN,CTL,CTLMI
     1N,NAC,NVC)
      IF (NGT.EQ.NCON) CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,
     1CTLMIN,NAC,NVC)
C     EVALUATE GRADIENTS OF OBJECTIVE AND ALL ACTIVE/VIOLATED
C     CONSTRAINTS.
      IGOTO=1
      INFO=2
C     PUT INFO IN TEMP FOR TRANSFER
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      RETURN
60    CONTINUE
      NAVC=NAC+NVC
C     IDENTIFY ACTIVE SIDE CONSTRAINTS.
      CALL ADS223 (NDV,NACS,CTLMIN,X,SVLB,SVUB,ISIDC)
      IF (IPRNT2.LT.4) GO TO 90
C     WRITE ACTIVE/VIOLATED CONSTRAINT NUMBERS.
      WRITE (8,470) NAC,NVC
      IF (NAVC.GT.0) WRITE (8,480)
      IF (NAVC.GT.0) WRITE (8,490) (IC(I),I=1,NAVC)
      WRITE (8,500) NACS
      IF (NACS.EQ.0) GO TO 90
      N=0
      DO 80 I=1,NDV
      IF (ISIDC(I).EQ.0) GO TO 80
      IF (ISIDC(I).EQ.1) GO TO 70
C     LOWER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=-I
70    IF (ISIDC(I).LT.0) GO TO 80
C     UPPER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=I
80    CONTINUE
      WRITE (8,510)
      WRITE (8,490) (ITMP(I),I=1,NACS)
90    CONTINUE
      IF (IPRNT2.LT.5) GO TO 110
C     WRITE GRADIENT OF OBJECTIVE.
      ICALC=3
      CALL ADS402 (ICALC,DF,NDV,SCFX)
      IF (NAVC.EQ.0) GO TO 110
C     WRITE GRADIENT OF ACTIVE/VIOLATED CONSTRAINTS.
      ISCAL=0
      DO 100 J=1,NAVC
      WRITE (8,520) IC(J)
      CALL ADS401 (A(1,J),NDV,SCFX,ISCAL)
100   CONTINUE
110   CONTINUE
C     ------------------------------------------------------------------
C     SEARCH DIRECTION.
C     ------------------------------------------------------------------
      NACT=NAVC+NACS
      IF (NACT.GT.0) GO TO 130
C     NO ACTIVE OR VIOLATED CONSTRAINTS.  FIND STEEPEST DESCENT OR
C     FLETCHER-REEVES CONJUGATE DIRECTION.
      ICOUNT=ICOUNT+1
      IF (IDEL.EQ.1.OR.IDAB.EQ.1) ICOUNT=1
      IF (ICOUNT.GT.ICNDIR) ICOUNT=1
C     STEEPEST DESCENT.
120   IF (ICOUNT.EQ.1) SCALS=0.
      IF (ICOUNT.EQ.1) DF2=1.
C     CONJUGATE DIRECTION.
      ICALC=3
      CALL ADS236 (NDV,ICALC,DF,DM1,DM2,DM3,DF2,S,S2,SCALS,ZRO,ISIDC)
C     SLOPE OF F(ALPHA) FUNCTION.
      CALL ADS501 (NDV,DF,S,SLOPF)
      ZROM=-ZRO
      IF (SLOPF.LT.ZROM.OR.ICOUNT.EQ.1) GO TO 160
C     SLOPE IS BAD (POSITIVE).  GO USE STEEPEST DESCENT.
      ICOUNT=1
      GO TO 120
130   CONTINUE
C     CONSTRAINTS ARE ACTIVE/VIOLATED.  FIND USABLE-FEASIBLE
C     SEARCH DIRECTION.
      ICOUNT=0
      IF (NVC.EQ.0) PHI=5.
      PHI=10.*PHI
      IF (PHI.GT.1000.) PHI=1000.
C     CALCULATE SCALE FACTOR FOR GRADIENT OF OBJECTIVE.
      N2=1
      CALL ADS207 (NDV,N2,DF,NDV,ZRO,SCALF)
C     CALCULATE NORMALIZATION FACTORS FOR CONSTRAINTS.
C     STORE FACTORS IN GGL.
      IF (NAVC.GT.0) CALL ADS207 (NDV,NAVC,A,NRA,ZRO,GGL)
C     CALCULATE USABLE-FEASIBLE SEARCH DIRECTION.
      CALL ADS217 (NDV,NAC,NVC,NACS,CT,CTMIN,CTLMIN,THETAZ,ZRO,PHI,GGL,G
     1,DF,A,NRA,IDG,IC,ISIDC,ITMP,B,NRB,SCALF,S,THETA,C,BETA,SCALS)
      IF (IPRNT2.GT.3) WRITE (8,530) BETA,SCALS
C     ------------------------------------------------------------------
C     CHECK KUHN-TUCKER CONDITIONS.
C     ------------------------------------------------------------------
C     IF NDV SIDE CONSTRAINTS ARE ACTIVE AND BETA=0, TERMINATE.
      IF (NACS.EQ.NDV.AND.BETA.LE.ZRO10) GO TO 300
      IF (SCALS.GT.STOL.AND.BETA.GT.ZRO10) GO TO 150
C     EITHER SCALS OR BETA INDICATES K-T CONDITIONS ARE SATISFIED.
C     CHECK CONSTRAINT VALUES.
      ALPHA=0.
      DO 140 I=1,NAVC
      II=IC(I)
      JJ=IABS(IDG(II))
      CC=CTMIN
      IF (JJ.GT.1) CC=CTLMIN
C     IF G.GT.CC, GO CHECK CONVERGENCE.
      IF (ABS(G(II)).GT.CC) GO TO 250
140   CONTINUE
C     K-T CONDITIONS ARE SATISFIED.  GO EXIT.
      GO TO 300
150   CONTINUE
C     SLOPE OF F(ALPHA) FUNCTION.
      CALL ADS501 (NDV,DF,S,SLOPF)
160   CONTINUE
      IF (IPRNT2.LT.4) GO TO 170
      ICALC=2
      CALL ADS402 (ICALC,S,NDV,SCFX)
170   CONTINUE
C     ------------------------------------------------------------------
C     ESTIMATE ALPHA.
C     ------------------------------------------------------------------
      IF (ITER.GT.1) GO TO 180
C     FIRST ITERATION ESTIMATE.
      CALL ADS213(OBJ,SLOPF,DLOBJ1,DLOBJ2,ALPHA)
      CALL ADS214(NDV,X,S,DX1,DX2,ALP1)
      IF(ALP1.LT.ALPHA) ALPHA=ALP1
      ALPSAV=ALPHA
180   CONTINUE
      OBJ1=OBJ
      ALP1=ALPHA
      ALPHA=.5*(ALPHA+ALPSAV)
      ALPSAV=ALP1
      IF (ALPHA.LE.0.001) ALPHA=0.001
C     ESTIMATE ALPMAX TO ENCOUNTER NDV SIDE CONSTRAINTS.
      CALL ADS112 (NDV,X,S,SVLB,SVUB,ZRO,ALPMAX)
      IF (ALPMAX.LE.ZRO) GO TO 300
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     ------------------------------------------------------------------
C     CALCULATE DG/DALPHA VECTOR AND MOVE TO ENCOUNTER NEW CONSTRAINT,
C     OR OVERCOME CONSTRAINT VIOLATION.
C     ------------------------------------------------------------------
      ALP1=5.*ALPHA
      ALP2=0.
      II=0
      DO 220 I=1,NCON
      DG(I)=0.
      DO 190 J=1,NGT
      J1=J
      IF (IC(J).EQ.I) GO TO 200
190   CONTINUE
C     THIS GRADIENT IS NOT AVAILABLE.
      GO TO 220
200   CONTINUE
C     GRADIENT IS AVAILABLE.  CALCULATE DG(I)
      DO 210 J=1,NDV
210   DG(I)=DG(I)+A(J,J1)*S(J)
      IF (ABS(DG(I)).LE.0.001) GO TO 220
      ALP=-G(I)/DG(I)
      IF (ALP.LT.ALP1.AND.ALP.GT.ZRO.AND.J1.GT.NAVC) ALP1=ALP
      IF (ALP.GT.ALP2.AND.J1.LE.NAVC) ALP2=ALP
      II=1
220   CONTINUE
      IF(NVC.GT.0.AND.ALP2.GT.0.) ALPHA=ALP2
      IF (II.EQ.1.AND.ALP1.LT.ALP2) ALPHA=ALP1
C     LIMIT FIRST ESTIMATE TO MOVE TO SIDE CONSTRAINT.
      ALP=1.0E+20
      DO 230 I=1,NDV
      IF (ABS(S(I)).LE.ZRO) GO TO 230
      D1=(SVLB(I)-X(I))/S(I)
      IF (D1.GT.ZRO.AND.D1.LT.ALP) ALP=D1
      D1=(SVUB(I)-X(I))/S(I)
      IF (D1.GT.ZRO.AND.D1.LT.ALP) ALP=D1
230   CONTINUE
      IF (ALP.LT.ALPHA) ALPHA=ALP
C     ------------------------------------------------------------------
C     DO ONE-DIMENSIONAL SEARCH.
C     ------------------------------------------------------------------
      LGOTO=0
      IF (IPRNT2.GE.4) WRITE (8,540) ALPHA
240   CONTINUE
      CALL ADS001 (LGOTO,ISTRAT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NAVC,IC,WK,IWK,SLOPF,ALPHA,ALPMAX)
      IF (LGOTO.EQ.0) GO TO 250
C     CALCULATE FUNCTION VALUES.
      IGOTO=2
      INFO=1
C     PUT INFO IN TEMP FOR TRANSFER
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      RETURN
250   CONTINUE
C     ONE-DIMENSIONAL SEARCH IS COMPLETE.
      OBJA=OBJ/SCFO
      IF (IPRNT2.EQ.2) WRITE (8,580) ITER,OBJA
      IF (IPRNT2.GE.4) WRITE (8,590) ALPHA
      IF (IPRNT2.GT.2) WRITE (8,550) OBJA
      ICALC=1
      IF (IPRNT2.GE.2) CALL ADS402 (ICALC,X,NDV,SCFX)
      ICALC=4
      IF (IPRNT2.GT.2) CALL ADS402 (ICALC,G,NCON,SCFG)
C     ------------------------------------------------------------------
C     CHECK CONVERGENCE.
C     ------------------------------------------------------------------
      NGRAD=1
      CALL ADS211 (OBJ,OBJ1,DELOBJ,DABOBJ,DEL1,DAB1,IDEL,IDAB)
      IF (ITER.GE.ITMAX) GO TO 300
      IF (NVC.GT.0.AND.ITER.LT.10) IDEL=0
C
C BEG AUG 1993
C  IN THE FOLLOWING STATEMENT NVD IS NOT INITIALIZED.  SHOULD IT BE
C  NVC OR NDV OR PERHAPS SOME OTHER VARIABLE ???
C
      IF (NVC.GT.0.AND.ITER.LT.10) IDAB=0
C
C END AUG 1993
C
      IF (IDEL.GE.ITRMOP.OR.IDAB.GE.ITRMOP) GO TO 300
      IF (IDEL.GE.1.OR.IDAB.GE.1) GO TO 260
      IF (ALPHA.LE.ZRO10) GO TO 260
      II=MAX0(IDEL,IDAB)+1
      IF (II.LT.ITRMOP) GO TO 40
C     REDUCE CONSTRAINT TOLERANCE.
260   CONTINUE
      DCT=.5*(CT+CTMIN)
      DCTL=.5*(CTL+CTLMIN)
      CT=CT-DCT
      IF (CT.GT.-CTMIN) CT=-CTMIN
      CTL=CTL-DCTL
      IF (CTL.GT.-CTLMIN) CTL=-CTLMIN
      IF (IPRNT2.GT.3) WRITE (8,360) CT,CTL
C     IF LAST MOVE WAS GT.ZRO10, GO START NEW ITERATION.
      IF (ALPHA.GT.ZRO10.OR.NAVC.EQ.0) GO TO 40
C     ------------------------------------------------------------------
C     LAST ALPHA.LE.ZRO10.  DELETE CONSTRAINTS THAT ARE NO LONGER
C     CRITICAL AND CONTINUE OPTIMIZATION WITHOUT GETTING NEW GRADIENTS.
C     ------------------------------------------------------------------
      IF (NGT.GE.NCON) GO TO 290
C     CHECK FOR NEW CRITICAL CONSTRAINTS.
      DO 280 I=1,NCON
      I1=IDG(I)
      IF (I1.LT.0) GO TO 280
      CC=CT
      IF (I1.GT.1) CC=CTL
      IF (G(I).LT.CC) GO TO 280
C     THIS CONSTRAINT IS CRITICAL.  IS IT ALREADY IN IC?
      DO 270 J=1,NGT
      IF (IC(J).EQ.I) GO TO 280
270   CONTINUE
C     NEW CRITICAL CONSTRAINT.  MUST EVALUATE GRADIENTS.
      NGRAD=1
      GO TO 40
280   CONTINUE
290   CONTINUE
      CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
      NAVC=NAC+NVC
C     WE HAVE GRADIENTS OF ALL CRITICAL CONSTRAINTS.
C     CONTINUE OPTIMIZATION WITHOUT GETTING NEW GRADIENTS.
      NGRAD=0
      GO TO 40
300   CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION IS COMPLETE.
C     ------------------------------------------------------------------
      IF (IPRNT2.LE.0) GO TO 340
C     PRINT FINAL RESULTS.
      WRITE (8,380)
      WRITE (8,390) ITER
      OBJA=OBJ/SCFO
      WRITE (8,550) OBJA
C     X-VECTOR.
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
C     G-VECTOR.
      ICALC=4
      CALL ADS402 (ICALC,G,NCON,SCFG)
C     IDENTIFY ACTIVE/VIOLATED CONSTRAINTS.
      CALL ADS201 (NCON,NGT,G,IDG,ITMP,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
C     SIDE CONSTRAINTS.
      CALL ADS223 (NDV,NACS,CTLMIN,X,SVLB,SVUB,ISIDC)
C     WRITE FINAL CONSTRAINT TOLERANCES.
      WRITE (8,370) CT,CTL
C     WRITE ACTIVE/VIOLATED CONSTRAINT NUMBERS.
      NAVC=NAC+NVC
      WRITE (8,470) NAC,NVC
      IF (NAVC.GT.0) WRITE (8,480)
      IF (NAVC.GT.0) WRITE (8,490) (ITMP(I),I=1,NAVC)
      WRITE (8,500) NACS
      IF (NACS.EQ.0) GO TO 330
      N=0
      DO 320 I=1,NDV
      IF (ISIDC(I).EQ.0) GO TO 320
      IF (ISIDC(I).EQ.1) GO TO 310
C     LOWER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=-I
310   IF (ISIDC(I).LT.0) GO TO 320
C     UPPER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=I
320   CONTINUE
      WRITE (8,510)
      WRITE (8,490) (ITMP(I),I=1,NACS)
330   WRITE (8,400)
      IF (ITER.GE.ITMAX) WRITE (8,410)
      IF (IDEL.GE.ITRMOP) WRITE (8,420) ITRMOP
      IF (IDAB.GE.ITRMOP) WRITE (8,430) ITRMOP
      IF (SCALS.LE.STOL) WRITE (8,440) SCALS,STOL
      IF (BETA.LE.ZRO10.AND.NACT.GT.0) WRITE (8,450) BETA,ZRO10
340   CONTINUE
C     PUT FINAL INFO IN TEMP FOR TRANSFER
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
C
C BEG AUG 1993 (FOLLOWING STATEMENT COMMENTED OUT BECAUSE GMAX1 IS
C NOT INITIALIZED IN THIS SUBROUTINE OR TRANSFERRED FROM ANOTHER
C SUBROUTINE. IS THIS CORRECT ???
C
C     TEMP(10)=GMAX1
C
C END AUG 1993
C
      IGOTO=0
      RETURN
C     ------------------------------------------------------------------
C     FORMATS.
C     ------------------------------------------------------------------
350   FORMAT ('1')
360   FORMAT (/,5X,'NEW CONSTRAINT TOLERANCE',2X,'CT =',1PE13.5,2X,
     1'CTL =',1PE13.5)
370   FORMAT (/,5X,'CONSTRAINT TOLERANCE, CT =',1PE13.5,2X,'CTL =',
     11PE13.5)
380   FORMAT (////,5X,'FINAL OPTIMIZATION RESULTS')
390   FORMAT (/,5X,'NUMBER OF ITERATIONS =',I5)
400   FORMAT (/,5X,'TERMINATION CRITERIA')
410   FORMAT (/,5X,'NUMBER OF ITERATIONS = ITMAX')
420   FORMAT (/,5X,'RELATIVE CONVERGENCE CRITERION WAS MET FOR',I3,
     1' CONSECUTIVE ITERATIONS')
430   FORMAT (/,5X,'ABSOLUTE CONVERGENCE CRITERION WAS MET FOR',I3,
     1' CONSECUTIVE ITERATIONS')
440   FORMAT (/,5X,'MAXIMUM K-T RESIDUAL =',1PE13.5,' IS LESS THAN',
     11PE13.5)
450   FORMAT (/,5X,'KUHN-TUCKER PARAMETER, BETA =',1PE13.5,
     1' IS LESS THAN',1PE13.5)
460   FORMAT (//,5X,75('-'),/,23X,
     1'IOPT = 4; METHOD OF FEASIBLE DIRECTIONS',/,5X,75('-'))
470   FORMAT (/,5X,'THERE ARE',I5,' ACTIVE CONSTRAINTS AND',I5,
     1' VIOLATED CONSTRAINTS')
480   FORMAT (5X,'CONSTRAINT NUMBERS')
490   FORMAT (5X,10I5)
500   FORMAT (/,5X,'THERE ARE',I5,' ACTIVE SIDE CONSTRAINTS')
510   FORMAT (5X,'VARIABLE NUMBERS (MINUS INDICATES LOWER BOUND)')
520   FORMAT (/,5X,'GRADIENT OF CONSTRAINT NUMBER',I5)
530   FORMAT (/,5X,'K-T PARAMETERS, BETA =',1PE13.5,'  MAX. RESIDUAL =',
     11PE13.5)
540   FORMAT (/,5X,'PROPOSED ALPHA =',1PE13.5)
550   FORMAT (/,5X,11HOBJECTIVE =,1PE12.5)
560   FORMAT (/,5X,'-- INITIAL DESIGN',//,5X,'OBJ =',1PE12.5)
570   FORMAT (//,5X,'-- BEGIN ITERATION NUMBER',I5)
580   FORMAT (//,5X,'-- ITERATION',I5,5X,'OBJ =',1PE12.5)
590   FORMAT (/,5X,'CALCULATED ALPHA =',1PE13.5)
      END
C
C
C
C=DECK      ADS206
C --- SUBROUTINE ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
C     DIMENSION XOLD(NDV),S(NDV),SVLB(NDV),SVUB(NDV),X(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO UPDATE THE X-VECTOR SUBJECT TO BOUNDS SVLB AND SVUB.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                          SEPT. 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     ALPHA - MOVE PARAMETER IN ONE-DIMENSIONAL SEARCH.
C     XOLD - OLD X-VECTOR.  MINIMUM DIMENSION IS NDV.
C     S - SEARCH DIRECTION.  MINIMUM DIMENSION IS NDV.
C     SVLB - LOWER BOUNDS ON X.  MINIMUM DIMENSION IS NDV.
C     SVUB - UPPER BOUNDS ON X.  MINIMUM DIMENSION IS NDV.
C
C --- OUTPUT
C     X - NEW VECTOR OF DESIGN VARIABLES.  X = XOLD + ALPHA*S.
C         IF X(I).LT.SVLB(I), X(I)=SVLB(I).
C         IF X(I).GT.SVUB(I), X(I)=SVUB(I).
C         MINIMUM DIMENSION OF X IS NDV.
C
      SUBROUTINE ADS206 (NDV,ALPHA,XOLD,S,SVLB,SVUB,X)
      DIMENSION XOLD(*),S(*),SVLB(*),SVUB(*),X(*)
C
      DO 10 I=1,NDV
      X(I)=XOLD(I)+ALPHA*S(I)
      IF (X(I).GT.SVUB(I)) X(I)=SVUB(I)
      IF (X(I).LT.SVLB(I)) X(I)=SVLB(I)
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS207
C --- SUBROUTINE ADS207(N1,N2,A,NRA,ZRO,GGL)
C     DIMENSION A(N1,N2),GGL(N2)
C     ------------------------------------------------------------------
C --- ROUTINE TO FIND THE MAXIMUM COMPONENT MAGNITUDE OF EACH VECTOR
C     CONTAINED IN ARRAY A.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              AUG 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N1 - NUMBER OR VARIABLES (ROWS).
C     N2 - NUMBER OF VECTORS (COLUMNS).
C     A - ARRAY CONTAINING VECTORS TO BE NORMALIZED.
C         MINIMUM DIMENSION IS (N1,N2).
C     NRA - DIMENSIONED ROWS OF ARRAY A IN CALLING PROGRAM.  NRA MUST
C         BE AT LEAST EQUAL TO N1.
C     ZRO - TOLERANCE IDENTIFYING ZERO ON THE COMPUTER.  A SMALL
C         POSITIVE NUMBER IDENTIFYING MACHINE PRECISION.
C
C --- OUTPUT
C     GGL - ARRAY CONTAINING NORMALIZATION FACTORS.
C         MINIMUM DIMENSION IS N2.
C
C --- NOTE
C     IF A COLUMN OF A CONTAINS ALL ZEROS, THE NORMALIZATION FACTOR
C         IS SET TO ZRO.
C
      SUBROUTINE ADS207 (N1,N2,A,NRA,ZRO,GGL)
      DIMENSION A(NRA,*),GGL(*)
C
C     BEGIN CALCULATION OF NORMALIZATION FACTORS.
      DO 20 J=1,N2
C     MAGNITUDE OF MAXIMUM COMPONENT.
      AMXI=ZRO
      DO 10 I=1,N1
      AI=ABS(A(I,J))
      IF (AI.GT.AMXI) AMXI=AI
10    CONTINUE
      GGL(J)=1./AMXI
20    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS209
C --- SUBROUTINE ADS209(NDV,NAVC,NACS,A,NRA,B,NRB,ISIDC)
C     DIMENSION A(NRA,NCOLA),B(NRB,NRB),ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE B = A-TRANS TIMES A FOR USE IN THE ROBUST
C     FEASIBLE DIRECTIONS METHOD.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              AUG. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     NAVC - NUMBER OF ACTIVE/VIOLATED CONSTRAINTS.
C     NACS - NUMBER OF ACTIVE SIDE CONSTRAINTS.
C     A - ARRAY CONTAINING GRADIENTS OF CONSTRAINTS STORED IN COLUMNS.
C     NRA - DIMENSIONED ROWS OF A.
C     ISIDC - VECTOR IDENTIFYING ACTIVE SIDE CONSTRAINTS.
C
C --- OUTPUT
C     B = A-TRANSPOSE TIMES A, AUGMENTED TO INCLUDE GRADIENTS OF ACTIVE
C         SIDE CONSTRAINTS.
C
      SUBROUTINE ADS209 (NDV,NAVC,NACS,A,NRA,B,NRB,ISIDC)
      DIMENSION A(NRA,*),B(NRB,*),ISIDC(*)
C
      NACT=NAVC+NACS
      IF (NAVC.EQ.0) GO TO 70
C     ------------------------------------------------------------------
C     BUILD A-TRANS TIMES A, LOWER TRIANGLE.
C     ------------------------------------------------------------------
      DO 20 I=1,NAVC
      DO 20 J=I,NAVC
      B(J,I)=0.
C     DEL-G TRANS TIMES DEL-G.
      DO 10 K=1,NDV
10    B(J,I)=B(J,I)+A(K,I)*A(K,J)
20    CONTINUE
C     ------------------------------------------------------------------
C     SIDE CONSTRAINT TERMS.
C     ------------------------------------------------------------------
      IF (NACS.EQ.0) GO TO 110
      J=NAVC
      DO 60 II=1,NDV
      ID=ISIDC(II)
      IF (ID.EQ.0) GO TO 60
      IF (ID.EQ.1) GO TO 40
C     LOWER BOUND IS ACTIVE.
      J=J+1
      DO 30 I=1,NAVC
30    B(J,I)=-A(II,I)
      IF (ID.LT.0) GO TO 60
40    CONTINUE
C     UPPER BOUND IS ACTIVE.
      J=J+1
      DO 50 I=1,NAVC
50    B(J,I)=A(II,I)
60    CONTINUE
70    CONTINUE
C     ------------------------------------------------------------------
C     TERMS IN B UNIQUE TO SIDE CONSTRAINTS.
C     ------------------------------------------------------------------
      J=NAVC
      DO 100 II=1,NDV
      ID=ISIDC(II)
      IF (ID.EQ.0) GO TO 100
C     ACTIVE SIDE CONSTRAINT(S).
      JD=IABS(ID)
      DO 90 K=1,JD
      J=J+1
      DO 80 I=J,NACT
      B(I,J)=0.
      IF (ID.EQ.2) B(I,J)=-1.
80    CONTINUE
90    B(J,J)=1.
100   CONTINUE
110   CONTINUE
C     ------------------------------------------------------------------
C     IMPOSE SYMMETRY.
C     ------------------------------------------------------------------
      DO 120 I=1,NACT
      DO 120 J=I,NACT
120   B(I,J)=B(J,I)
      RETURN
      END
C
C
C
C=DECK      ADS211
C --- SUBROUTINE ADS211(OBJ,OBJ1,DEL,DAB,DEL1,DAB1,IDEL,IDAB)
C     ------------------------------------------------------------------
C --- ROUTINE TO UPDATE CONVERGENCE PARAMETERS IDEL AND IDAB TO
C     IDENTIFY CONVERGENCE OF THE OBJECTIVE FUNCTION, OBJ.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                  SEPT. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     OBJ - PRESENT VALUE OF THE OBJECTIVE FUNCTION.
C     OBJ1 - VALUE OF THE OBJECTIVE FUNCTION ON THE PREVIOUS ITERATION.
C     DEL - RELATIVE CONVERGENCE TOLERANCE.
C         CONVERGENCE IF 1.-ABS(OBJ)/ABS(OBJ1).LE.DEL.
C     DAB - ABSOLUTE CONVERGENCE CRITERION.
C         CONVERGED IF ABS(OBJ)-ABS(OBJ1).LE.DAB.
C     IDEL - CONVERGENCE IDENTIFIER.  IDEL=0 ON FIRST CALL.  ON
C         SUBSEQUENT CALLS, IDEL=THE VALUE RETURNED FROM PREVIOUS CALL.
C     IDAB - CONVERGENCE IDENTIFIER.  IDAB=0 ON FIRST CALL.  ON
C         SUBSEQUENT CALLS, IDAB=THE VALUE RETURNED FROM PREVIOUS CALL.
C
C --- OUTPUT
C     DEL1 - RELATIVE CHANGE IN THE OBJECTIVE FUNCTION.
C     DAB1 - ABSOLUTE CHANGE IN THE OBJECTIVE FUNCTION.
C     IDEL - CONVERGENCE IDENTIFIER.
C         IDEL = 0 IF DEL CONVERGENCE CRITERION IS NOT SATISFIED.
C         IDEL = IDEL + 1 IF DEL CONVERGENCE CRITERION IS SATISFIED.
C     IDAB - CONVERGENCE IDENTIFIER.
C         IDAB = 0 IS DAB CONVERGENCE CRITERION IS NOT SATISFIED.
C         IDAB = IDAB + 1 IF DAB CONVERGENCE CRITERION IS SATISFIED.
C
      SUBROUTINE ADS211 (OBJ,OBJ1,DEL,DAB,DEL1,DAB1,IDEL,IDAB)
      DENOM=AMAX1(ABS(OBJ1),1.0E-10)
      DEL1=1.-ABS(OBJ)/DENOM
      IDEL=IDEL+1
      IF (ABS(DEL1).GT.DEL) IDEL=0
      DAB1=ABS(OBJ1)-ABS(OBJ)
      IDAB=IDAB+1
      IF (ABS(DAB1).GT.DAB) IDAB=0
      RETURN
      END
C
C
C
C=DECK      ADS213
C --- SUBROUTINE ADS213(OBJ,DFDALP,DLOBJ1,DLOBJ2,ALPHA)
C     ------------------------------------------------------------------
C --- ROUTINE TO ESTIMATE AN INITIAL STEP, ALPHA, TO CHANGE OBJ BY THE
C     FRACTION DLOBJ1 OR THE MAGNITUDE DLOBJ2, WHICHEVER IS LESS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                         NOV. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     OBJ - PRESENT VALUE OF THE OBJECTIVE FUNCTION.
C     DFDALP - THE SLOPE OF THE OBJ VS. ALPHA CURVE AT ALPHA=0.
C         DFDALP = THE VECTOR PRODUCT OF DF AND S.
C     DLOBJ1 - RELATIVE CHANGE DESIRED IN THE OBJECTIVE.
C     DLOBJ2 - MINIMUM ABSOLUTE CHANGE DESIRED IN THE OBJECTIVE.
C
C --- OUTPUT
C     ALPHA - INITIAL STEP FOR ONE-DIMENSIONAL SEARCH TO REDUCE THE
C         OBJECTIVE BY THE FRACTION DLOBJ1 OR THE ABSOLUTE AMOUNT
C         DLOBJ2, WHICHEVER IS LESS.
C
      SUBROUTINE ADS213 (OBJ,DFDALP,DLOBJ1,DLOBJ2,ALPHA)
      DENOM=DFDALP
      IF (ABS(DFDALP).LT.1.0E-20) DENOM=1.0E-20
      ANUM=(DLOBJ1*OBJ)
      IF (ANUM.LT.0.01) ANUM=0.01
      ALP1=ANUM/DENOM
      ALPHA=ABS(ALP1)
      ALP1=DLOBJ2/DENOM
      ALP1=ABS(ALP1)
      IF (ALP1.LT.ALPHA) ALPHA=ALP1
      RETURN
      END
C
C
C
C=DECK      ADS214
C --- SUBROUTINE ADS214(NDV,X,S,DX1,DX2,ALPHA)
C     DIMENSION X(NDV),S(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO ESTIMATE AN INITIAL STEP, ALPHA, TO CHANGE SOME
C     COMPONENT OF X BY THE GREATEST OF DX1*X(I) AND DX2.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            NOV. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     X - PRESENT DESIGN VARIABLES.  MINIMUM DIMENSION OF X IS NDV.
C     S - SEARCH DIRECTION.  MINIMUM DIMENSION OF S IS NDV.
C     DX1 - RELATIVE CHANGE DESIRED IN SOME COMPONENT OF X.
C     DX2 - MINIMUM ABSOLUTE CHANGE DESIRED IN SOME COMPONENT OF X.
C
C --- OUTPUT
C     ALPHA - INITIAL PROPOSED STEP IN THE ONE-DIMENSIONAL SEARCH.
C
C     NOTE - FOR EACH X(I), THE MAXIMUM OF X(I)*DX1/S(I) AND DX2/S(I)
C         IN MAGNITUDE IS FOUND.  FROM AMONG THESE NDV VALUES FOR ALPHA,
C         THE SMALLEST IS CHOSEN AS THE PROPOSED MOVE.
C
      SUBROUTINE ADS214 (NDV,X,S,DX1,DX2,ALPHA)
      DIMENSION X(*),S(*)
      ALPHA=1.0E+20
      DO 10 I=1,NDV
      SI=ABS(S(I))
C     PREVENT DIVIDE BY ZERO.
      IF (SI.LT.1.0E-20) SI=1.0E-20
      DX=X(I)
C     MOVE TO CHANGE X(I) BY THE FRACTION DX1.
      ALP=DX*DX1/SI
      ALP=ABS(ALP)
C     MOVE TO CHANGE X(I) BY THE AMOUNT DX2.
      ALP2=DX2/SI
      ALP2=ABS(ALP2)
C     PICK MAXIMUM OF ALP AND ALP2.
      IF (ALP2.GT.ALP) ALP=ALP2
C     PICK MINIMUM OF ALPHA AND ALP.
      IF (ALP.LT.ALPHA) ALPHA=ALP
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS216
C --- SUBROUTINE ADS216 (JGOTO,OBJ,NDV,X,SVLB,SVUB,NCON,NCG,IC,G,GOLD,
C    1 FDCH,FDCHM,DF,A,NRA,XSAV,ZRO,S,NXFD,OBJS)
C     DIMENSION X(NDV),SVLB(NDV),SVUB(NDV),IC(NCG),G(NCON),GOLD(NCON),
C    1 DF(NDV),A(NRA,NCOLA),XSAV(NDV),S(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE GRADIENT OF FUNCTION  SUBJECT TO SIDE
C     CONSTRAINTS AND A SPECIFIED SET OF GENERAL CONSTRAINTS BY FIRST
C     FORWARD FINITE DIFFERENCE
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                      NOV. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C     JGOTO - MUST BE INPUT AS ZERO ON FIRST CALL TO ADS216.  ON
C         SUBSEQUENT CALLS, JGOTO SHOULD BE WHAT WAS RETURNED FROM
C         PREVIOUS CALL.
C     OBJ - VALUE OF THE OBJECTIVE FUNCTION ASSOCIATED WITH X.
C     NDV - NUMBER OF DESIGN VARIABLES.
C     X - VECTOR OF DESIGN VARIABLES.  MINIMUM DIMENSION IS NDV.
C     SVLB - LOWER BOUNDS ON X.  MINIMUM DIMENSION IS NDV.
C     SVUB - UPPER BOUNDS ON X.  MINIMUM DIMENSION IS NDV.
C     NCON - NUMBER OF CONSTRAINT FUNCTIONS STORED IN G AND GOLD.
C     NCG - NUMBER OF CONSTRAINTS FOR WHICH GRADIENTS ARE TO BE
C         EVALUATED.  NCG MAY BE ZERO.
C     IC - LOCATIONS OF CONSTRAINTS IN G FOR WHICH GRADIENTS ARE TO
C     BE EVALUATED.  MINIMUM DIMENSION IS NCG.
C     G - ARRAY OF CONSTRAINT VALUES ASSOCIATED WITH THE CURRENT
C         X-VECTOR.  MINIMUM DIMENSION IS NCON.
C     GOLD - ARRAY OF CONSTRAINT VALUES ASSOCIATED WITH THE NOMINAL
C         X-VECTOR.  MINIMUM DIMENSION IS NCON.
C     NRA - NUMBER OF ROWS IN ARRAY A.
C     FDCH - FINITE DIFFERENCE STEP AS A FRACTION OF X(I).
C     FDCHM - MINIMUM ABSOLUTE STEP FOR FINITE DIFFERENCE.
C     XSAV - OLD VALUES OF DESIGN VARIABLES.
C     S    - WORK ARRAY TO SAVE DX.
C --- OUTPUT
C     JGOTO - CALCULATE CONTROL.  IF JGOTO IS GREATER THAN ZERO,
C     EVALUATE OBJ FOR THE CURRENT VALUE OF X AND CALL ADS216 AGAIN.
C         IF JGOTO = 0, CALCULATION OF FINITE DIFFERENCE GRADIENTS IS
C         COMPLETE.
C     X - NEW PERTURBED X VECTOR.  IF JGOTO = 0, X IS THE ORIGINAL
C         X-VECTOR.
C     DF - VECTOR CONTAINING FIRST PARTIAL DERIVATIVES.  DF IS COMPLETE
C         WHEN JGOTO IS RETURNED AS ZERO.
C     A - ARRAY CONTAINING GRADIENTS OF THE SPECIFIED CONSTRAINTS.
C         THE REQUIRED DIMENSIONS ARE (NRA,NCG).
C     NXFD - DESIGN VARIABLE ASSOCIATED WITH CURRENT F.D. STEP.
C      OBJS - NOMINAL OBJECTIVE.
C
      SUBROUTINE ADS216 (JGOTO,OBJ,NDV,X,SVLB,SVUB,NCON,NCG,IC,G,GOLD,FD
     1CH,FDCHM,DF,A,NRA,XSAV,ZRO,S,NXFD,OBJS)
      DIMENSION X(*),DF(*),IC(*),G(*),GOLD(*),A(NRA,*),SVLB(*),SVUB(*),X
     1SAV(*),S(*)
      IF (JGOTO.GT.0) GO TO 10
C     FIRST CALL.
      OBJS=OBJ
      NXFD=1
C     FINITE DIFFERENCE STEP.
      DX=FDCH*ABS(XSAV(1))
      IF (DX.LT.FDCHM) DX=FDCHM
      X1=XSAV(1)+DX
      IF (X1.GT.SVUB(1)) DX=-DX
      S(NXFD)=DX
      X(1)=XSAV(1)+DX
C     EVALUATE OBJECTIVE AND CONSTRAINTS.
      JGOTO=1
      RETURN
10    CONTINUE
C     GRADIENT OF OBJECTIVE AND CONSTRAINTS.
      DF(NXFD)=(OBJ-OBJS)/S(NXFD)
      IF (ABS(DF(NXFD)).LT.ZRO) DF(NXFD)=0.
      IF (NCG.EQ.0) GO TO 30
      DO 20 J=1,NCG
      JX=IC(J)
      A(NXFD,J)=G(JX)-GOLD(JX)
20    CONTINUE
30    X(NXFD)=XSAV(NXFD)
      NXFD=NXFD+1
      JGOTO=0
C     TERMINATE IF SOLUTION IS COMPLETE.
      OBJ=OBJS
      IF (NXFD.GT.NDV) GO TO 40
C     CONTINUE WITH FINITE DIFFERENCE GRADIENT COMPUTATIONS.
      DX=FDCH*ABS(XSAV(NXFD))
      IF (DX.LT.FDCHM) DX=FDCHM
      X1=XSAV(NXFD)+DX
      IF (X1.GT.SVUB(NXFD)) DX=-DX
      S(NXFD)=DX
      X(NXFD)=XSAV(NXFD)+DX
C     EVALUATE OBJECTIVE FUNCTION.
      OBJ=OBJS
      JGOTO=1
      RETURN
40    CONTINUE
      NXFD=0
      IF (NCG.EQ.0) RETURN
      DO 90 J=1,NCG
      NZRO=0
      DO 50 I=1,NDV
      DG=ABS(A(I,J))
      IF (DG.LE.ZRO) NZRO=NZRO+1
50    CONTINUE
      IF (NZRO.EQ.NDV) GO TO 70
      DO 60 I=1,NDV
      DG=ABS(A(I,J))
      IF (DG.LE.ZRO) A(I,J)=0.
      A(I,J)=A(I,J)/S(I)
60    CONTINUE
      GO TO 90
70    CONTINUE
      DO 80 I=1,NDV
      A(I,J)=A(I,J)/S(I)
80    CONTINUE
90    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS217
C --- SUBROUTINE ADS217 (NDV,NAC,NVC,NACS,CT,CTMIN,CTLMIN,THETAZ,ZRO,
C    *PHI,GGL,G,DF,A,NRA,IDG,IC,ISIDC,ITMP,B,NRB,SCALF,S,THETA,BETA,
C    *RSDMX)
C     DIMENSION G(NCON),DF(1),A(NDV+1,NAC+1),IDG(NCON),IC(NAC),
C    * S(1),THETA(NAC),C(NACT+1),ISIDC(NDV),ITMP(NACT),GGL(NACT)
C     NACT=NAC+NVC+NACS
C     ------------------------------------------------------------------
C --- ROUTINE TO SOLVE DIRECTION FINDING PROBLEM IN MODIFIED METHOD OF
C     FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            JAN 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     NAC - NUMBER OF ACTIVE CONSTRAINTS.
C     NVC - NUMBER OF VIOLATED CONSTRAINTS.
C     NACS - NUMBER OF ACTIVE SIDE CONSTRAINTS.
C     CT - CONSTRAINT TOLERANCE DEFINING WHEN A NONLINEAR INEQUALITY
C         CONSTRAINT IS ACTIVE.  CT IS A SMALL NEGATIVE NUMBER.
C     CTMIN - CONSTRAINT TOLERANCE DEFINING WHEN A NONLINEAR INEQUALITY
C         CONSTRAINT IS VIOLATED.  CTMIN IS A SMALL POSITIVE NUMBER.
C     CTLMIN - CONSTRAINT TOLERANCE DEFINING WHEN A LINEAR INEQUALITY
C         CONSTRAINT IS VIOLATED.  CTLMIN IS A SMALL POSITIVE NUMBER.
C     THETAZ - NOMINAL PUSH-OFF FACTOR.  THE PUSH-OFF FACTOR WHEN
C         CONSTRAINT G(I) IS PRECISELY ZERO.  THE ACTUAL PUSH-OFF FACTOR
C         IS A QUADRATIC FUNCTION OF G(I).
C     ZRO - TOLERANCE TO IDENTIFY ZERO VALUE.  ESTIMATE OF REASONALBE
C         PRECISION FOR A GIVEN COMPUTER.
C     PHI - PARTICIPATION COEFFICIENT FOR MODIFIED METHOD OF FEASIBLE
C         DIRECTIONS.
C     GGL - NORMALIZATION FACTORS FOR CONSTRAINT GRADIENTS.
C     G - VECTOR OF CONSTRAINT VALUES.  MINIMUM DIMENSION IS NCON.
C     DF - GRADIENT OF THE OBJECTIVE FUNCTION.  MINIMUM DIMENSION
C         IS NDV.
C     A - ARRAY CONTAINING GRADIENTS OF ACTIVE AND VIOLATED
C         CONSTRAINTS.  THE CONSTRAINT GRADIENTS ARE CONTAINED IN THE
C         FIRST NAC COLUMNS OF A.  MINIMUM DIMENSONS ARE (NDV+1,NACG)
C     NRA - DIMENSIONED NUMBER OF ROWS IN ARRAY A IN CALLING PROGRAM.
C     IDG - CONSTRAINT TYPE IDENTIFIER.
C         IDG(I) = 0, NONLINEAR INEQUALITY CONSTRAINT.
C         IDG(I) = 1, LINEAR INEQUALITY CONSTRAINT.
C     IC - ACTIVE AND VIOLATED CONSTRAINT IDENTIFIER.  IC(I) IS THE
C         LOCATION IN VECTOR G OF THE ITH ACTIVE OR VIOLATED CONSTRAINT.
C     ISIDC - IDENTIFIES NACS ACTIVE SIDE CONSTRAINTS.
C         MINIMUM DIMENSION IS NDV.
C     ITMP - WORK ARRAY.  MINIMUM DIMENSION IS NACT.
C     B - WORK ARRAY.  MINIMUM DIMENSION IS (NRB,NRB).
C     NRB - DIMENSIONED ROWS OF B.  MINIMUM VALUE = NACT+1.
C     SCALF - SCALING FACTOR FOR GRADIENT OF OBJECTIVE.
C
C --- OUTPUT
C     S - SEARCH DIRECTION.  MINIMUM DIMENSION IS NDV.
C     THETA - VECTOR CONTAINING VALUES OF THE PUSH-OFF FACTORS.
C         MINIMUM DIMENSION IS NAC.
C     C - ESTIMATE OF THE LAGRANGE MULTIPLIERS.
C     BETA - KUHN-TUCKER PARAMETER.
C     RSDMX - MAXIMUM RESIDUAL FROM THE KUHN-TUCKER CONDITIONS.
C
C --- EXTERNALS
C     ADS201,ADS501,ADS507,ADS218,ADS220,ADS221,ADS222
C
C --- NOTE
C     NORM OF S VECTOR USED HERE IS S-TRANSPOSE TIMES S.LE.1.
C     IF NVC = 0 FIND DIRECTION BY ZOUTENDIJK'S METHOD.  OTHERWISE
C     FIND MODIFIED DIRECTION.
C
C --- NOTE
C     IF THIS ROUTINE IS USED TO CALCULATE THE LAGRANGE MULTIPLIERS
C     ONLY, THEN THETAZ=0 SHOULD BE INPUT.
C
      SUBROUTINE ADS217 (NDV,NAC,NVC,NACS,CT,CTMIN,CTLMIN,THETAZ,ZRO,PHI
     1,GGL,G,DF,A,NRA,IDG,IC,ISIDC,ITMP,B,NRB,SCALF,S,THETA,C,BETA,RSDMX
     2)
      DIMENSION G(*),DF(*),A(NRA,*),IDG(*),IC(*),S(*),C(*),ISIDC(*),THET
     1A(*),ITMP(*),B(NRB,*),GGL(*)
C
C     NUMBER OF ACTIVE AND VIOLATED CONSTRAINTS.
      NAVC=NAC+NVC
      NAVC1=NAVC+1
C     TOTAL NUMBER OF ACTIVE/VIOLATED CONSTRAINTS.
      NACT=NAVC+NACS
C     ------------------------------------------------------------------
C     CALCULATE USABLE-FEASIBLE DIRECTION.
C     ------------------------------------------------------------------
C     CALCULATE PUSH-OFF FACTORS, THETA.
      IF (NAVC.GT.0) CALL ADS221 (NAVC,CT,CTMIN,CTLMIN,THETAZ,G,IC,IDG,T
     1HETA)
C     ------------------------------------------------------------------
C     BUILD COEFICIENT MATRIX FOR SPECIAL SUB-PROBLEM.
C     ------------------------------------------------------------------
C     BUILD A-TRANS TIMES DF TERMS OF C AND DF*DF TERM OF C.
      NACT1=NACT+1
      DO 10 I=1,NACT1
10    C(I)=0.
      DO 60 J=1,NDV
      D=DF(J)*SCALF
      C(NACT1)=C(NACT1)+D*D
      IF (NAVC.EQ.0) GO TO 30
C     GENERAL CONSTRAINTS.
      DO 20 I=1,NAVC
20    C(I)=C(I)+D*A(J,I)*GGL(I)
30    IF (NAVC.GE.NACT) GO TO 60
C     SIDE CONSTRAINTS.
      I=NAVC
      DO 50 II=1,NDV
      ID=ISIDC(II)
      IF (ID.EQ.0) GO TO 50
      IF (ID.EQ.1) GO TO 40
C     LOWER BOUND.
      I=I+1
      IF (II.EQ.J) C(I)=C(I)-D
      IF (ID.LT.0) GO TO 50
40    CONTINUE
C     UPPER BOUND.
      I=I+1
      IF (II.EQ.J) C(I)=C(I)+D
50    CONTINUE
60    CONTINUE
      IF (NAVC.EQ.0) GO TO 130
C     BUILD A-TRANS TIMES A, LOWER TRIANGLE.
      DO 80 I=1,NAVC
      GA=GGL(I)
      DO 80 J=I,NAVC
      B(J,I)=0.
C     DEL-G TRANS TIMES DEL-G.
      GG=GA*GGL(J)
      DO 70 K=1,NDV
70    B(J,I)=B(J,I)-A(K,I)*A(K,J)*GG
80    CONTINUE
C     SIDE CONSTRAINT TERMS.
      IF (NACS.EQ.0) GO TO 130
      J=NAVC
      DO 120 II=1,NDV
      ID=ISIDC(II)
      IF (ID.EQ.0) GO TO 120
      IF (ID.EQ.1) GO TO 100
C     LOWER BOUND IS ACTIVE.
      J=J+1
      DO 90 I=1,NAVC
90    B(J,I)=A(II,I)*GGL(I)
      IF (ID.LT.0) GO TO 120
100   CONTINUE
C     UPPER BOUND IS ACTIVE.
      J=J+1
      DO 110 I=1,NAVC
110   B(J,I)=-A(II,I)*GGL(I)
120   CONTINUE
130   CONTINUE
      IF (NACS.EQ.0) GO TO 170
C     TERMS IN B FOR SIDE CONSTRAINTS.
      J=NAVC
      DO 160 II=1,NDV
      ID=ISIDC(II)
      IF (ID.EQ.0) GO TO 160
C     ACTIVE SIDE CONSTRAINT(S).
      JD=IABS(ID)
      DO 150 K=1,JD
      J=J+1
      DO 140 I=J,NACT
      B(I,J)=0.
      IF (ID.EQ.2) B(I,J)=1.
140   CONTINUE
150   B(J,J)=-1.
160   CONTINUE
170   CONTINUE
      IF (NAVC.EQ.0) GO TO 190
C     SUBTRACT THETA TIMES THETA-TRANS FROM A.
      DO 180 I=1,NAVC
      DO 180 J=1,I
180   B(I,J)=B(I,J)-THETA(I)*THETA(J)
190   CONTINUE
C     ARE CONSTRAINTS VIOLATED.
      IF (NVC.GT.0) GO TO 210
C     ------------------------------------------------------------------
C     NO CONSTRAINTS ARE VIOLATED. BUILD NACT+1 ROW OF B MATRIX AND
C     FINAL C-VECTOR.
C     ------------------------------------------------------------------
      NDB=NACT+1
      SAVC=C(NDB)
      DO 200 J=1,NDB
      B(NDB,J)=-C(J)
      C(J)=0.
      IF (J.GT.NAVC) GO TO 200
      B(NDB,J)=B(NDB,J)-THETA(J)
      C(J)=-THETA(J)
200   CONTINUE
      B(NDB,NDB)=-SAVC-1.
      C(NDB)=-1.
      GO TO 240
210   CONTINUE
C     ------------------------------------------------------------------
C     MODIFIED METHOD OF FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     B IS COMPLETE.  BUILD FINAL C-VECTOR.
      NDB=NACT
      IF (NAVC.EQ.0) GO TO 230
      DO 220 I=1,NAVC
      C(I)=C(I)-PHI*THETA(I)
220   CONTINUE
230   CONTINUE
240   CONTINUE
C     IMPOSE SYMMETRY.
      DO 250 I=1,NDB
      DO 250 J=I,NDB
250   B(I,J)=B(J,I)
C     ------------------------------------------------------------------
C     SOLVE SPECIAL L. P. PROBLEM
C     ------------------------------------------------------------------
      CALL ADS218 (NDB,B,NRB,C,ITMP,ZRO)
C     ------------------------------------------------------------------
C     CALCULATE RESULTING DIRECTION VECTOR, S.
C     ------------------------------------------------------------------
C     USABLE-FEASIBLE DIRECTION
C     MULTIPLIER ON DF.
      AMULT=C(NDB)
      IF (NVC.GT.0) AMULT=1.
      AMULT=AMULT*SCALF
      DO 270 I=1,NDV
      S(I)=-AMULT*DF(I)
      IF (NAVC.EQ.0) GO TO 270
C     GENERAL CONSTRAINT CASE.
      DO 260 J=1,NAVC
260   S(I)=S(I)-A(I,J)*C(J)*GGL(J)
270   CONTINUE
      IF (NACS.EQ.0) GO TO 300
C     SIDE CONSTRAINT.
      J=NAVC
      DO 290 II=1,NDV
      ID=ISIDC(II)
      IF (ID.EQ.0) GO TO 290
C     ACTIVE SIDE CONSTRAINT(S).
      IF (ID.EQ.1) GO TO 280
C     LOWER BOUND IS ACTIVE.
      J=J+1
      S(II)=S(II)+C(J)
      IF (ID.LT.0) GO TO 290
280   CONTINUE
C     UPPER BOUND IS ACTIVE.
      J=J+1
      S(II)=S(II)-C(J)
290   CONTINUE
300   CONTINUE
C     ------------------------------------------------------------------
C     KUHN-TUCKER PARAMETER, BETA.
C     ------------------------------------------------------------------
C     IF CONSTRAINTS ARE VIOLATED, SET BETA = 1.
      BETA=1.
      IF (NVC.GT.0) GO TO 320
      BETA=1.-C(NDB)
      IF (NAVC.EQ.0) GO TO 320
C     SUBTRACT THETA-TRANSPOSE TIMES U FROM BETA.
      DO 310 I=1,NAVC
310   BETA=BETA-THETA(I)*C(I)
320   CONTINUE
C     ------------------------------------------------------------------
C     NORMALIZE S.
C     ------------------------------------------------------------------
      CALL ADS507 (NDV,S,ZRO,RSDMX,IER)
C     ------------------------------------------------------------------
C     SET NEAR ZERO COMPONENTS OF S TO PRECISE ZERO.
C     ------------------------------------------------------------------
      DO 330 I=1,NDV
      IF (ABS(S(I)).LE.ZRO) S(I)=0.
330   CONTINUE
      IF (NACS.EQ.0) GO TO 350
C     ------------------------------------------------------------------
C     CHECK TO AVOID SIDE CONSTRAINT VIOLATIONS.
C     ------------------------------------------------------------------
      DO 340 I=1,NDV
      I1=ISIDC(I)
      IF (I1.GT.0.AND.S(I).GT.0.) S(I)=0.
      IF (I1.LT.0.AND.S(I).LT.0.) S(I)=0.
340   CONTINUE
350   CONTINUE
C     ------------------------------------------------------------------
C     IF S IS NULL VECTOR, SET BETA TO ZERO.
C     ------------------------------------------------------------------
      IF (RSDMX.LE.ZRO) BETA=0.
C     ------------------------------------------------------------------
C     UNSCALE LAGRANGE MULTIPLIERS.
C     ------------------------------------------------------------------
      IF (NAVC.EQ.0) GO TO 370
      DO 360 I=1,NAVC
360   C(I)=C(I)*GGL(I)/SCALF
370   IF (NACS.EQ.0) GO TO 390
      NAVC1=NAVC+1
      DO 380 I=NAVC1,NACT
380   C(I)=C(I)/SCALF
390   CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS218
C --- SUBROUTINE ADS218 (NDB,B,NRB,C,ITMP,ZRO)
C     DIMENSION B(NRB,NRB),C(NRB),ITMP(NRB)
C     ------------------------------------------------------------------
C --- ROUTINE TO SOLVE SPECIAL LINEAR PROBLEM FOR IMPOSING S-TRANSPOSE
C     TIMES S.LE.1 BOUNDS IN THE MODIFIED METHOD OF FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                             JAN 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDB - SIZE OF ARRAY STORED IN B.  NDB = NAC+1 WHERE NAC IS THE
C         NUMBER OF ACTIVE AND VIOLATED CONSTRAINTS.
C     B - ARRAY OF COEFFICIENTS FOR THE SPECIAL L.P. PROBLEM IN
C         THE METHOD OF FEASIBLE DIRECTIONS.  MINIMUM DIMENSONS
C         ARE (NRB,NRB).
C     NRB - DIMENSIONED SIZE OF ARRAY B IN THE CALLING PROGRAM.
C     C - RIGHT HAND SIDE OF SPECIAL L.P. PROBLEM.  MINIMUM DIMENSION
C         IS NDB.
C     ITMP - WORK ARRAY.  MINIMUM DIMENSION IS NDB.
C     ZRO - NUMERICAL ZERO FOR COMPUTATIONAL PURPOSES.
C
C --- OUTPUT
C     C - MODIFIED RIGHT HAND SIDE OF THE SPECIAL L.P. EQUATION.
C         MINIMUM DIMENSION IS NDB.
C
C     NOTE - IF THE ITERATION PROCESS DOES NOT CONVERGE IN 5*NDB
C         ITERATIONS, THAT RESULT IS USED.  NO ERROR MESSAGE IS PRINTED.
C
C     REF.  'STRUCTURAL OPTIMIZATION BY METHODS OF FEASIBLE DIRECTIONS',
C     G. N. VANDERPLAATS AND F. MOSES, JOURNAL OF COMPUTERS
C     AND STRUCTURES, VOL 3, PP 739-755, 1973.
C     FORM OF L. P. IS BX=C WHERE 1ST NDB COMPONENTS OF X CONTAIN VECTOR
C     U AND LAST NDB COMPONENTS CONTAIN VECTOR V.  CONSTRAINTS ARE
C     U.GE.0, V.GE.0, AND U-TRANSPOSE TIMES V = 0.
C
      SUBROUTINE ADS218 (NDB,B,NRB,C,ITMP,ZRO)
      DIMENSION B(NRB,*),C(*),ITMP(*)
C     VECTOR ITMP IDENTIFIES THE SET OF BASIC VARIABLES.
C     CHOOSE INITIAL BASIC VARIABLES AS V, AND INITIALIZE VECTOR ITMP
C     INITIALIZE ITMP.
      DO 10 I=1,NDB
10    ITMP(I)=0
      ITER=0
      EPS=-ZRO
      NMAX=5*NDB
C     BEGIN NEW ITERATION
20    ITER=ITER+1
C     FIND MAX. C(I)/B(I,I) FOR I=1,NDB.
      CBMAX=0.
      ICHK=0
      DO 30 I=1,NDB
      C1=C(I)
      BI=B(I,I)
      IF (BI.GT.EPS.OR.C1.GT.0.) GO TO 30
      CB=C1/BI
      IF (CB.LE.CBMAX) GO TO 30
      ICHK=I
      CBMAX=CB
30    CONTINUE
      IF (CBMAX.LT.ZRO.OR.ITER.GT.NMAX) GO TO 70
      IF (ICHK.EQ.0) GO TO 70
C     UPDATE VECTOR ITMP.
      JJ=ITMP(ICHK)
      IF (JJ.EQ.0) ITMP(ICHK)=ICHK
      IF (JJ.GT.0) ITMP(ICHK)=0
C     PIVOT OF B(ICHK,ICHK)
      BB=1./B(ICHK,ICHK)
      DO 40 J=1,NDB
40    B(ICHK,J)=BB*B(ICHK,J)
      C(ICHK)=CBMAX
      B(ICHK,ICHK)=BB
C     ELIMINATE COEFICIENTS ON VARIABLE ENTERING BASIS AND STORE
C     COEFICIENTS ON VARIABLE LEAVING BASIS IN THEIR PLACE.
      DO 60 I=1,NDB
      IF (I.EQ.ICHK) GO TO 60
      BB1=B(I,ICHK)
      B(I,ICHK)=0.
C     WRITE(8,*)' I,ICHK,NRB,NDB,BB1=',I,ICHK,NRB,NDB,BB1
      DO 50 J=1,NDB
C     WRITE(8,*)' J,B(ICHK,J)=',J,B(ICHK,J)
      B(I,J)=B(I,J)-BB1*B(ICHK,J)
C     WRITE(8,*)' B(I,J)=',B(I,J)
50    CONTINUE
      C(I)=C(I)-BB1*CBMAX
60    CONTINUE
      GO TO 20
70    CONTINUE
      NER=0
C     STORE ONLY COMPONENTS OF U-VECTOR IN 'C'.  USE B(I,1) FOR
C     TEMPORARY STORAGE
      DO 80 I=1,NDB
      B(I,1)=C(I)
80    CONTINUE
      DO 90 I=1,NDB
      C(I)=0.
      J=ITMP(I)
      IF (J.GT.0) C(I)=B(J,1)
      IF (C(I).LT.0.) C(I)=0.
90    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS221
C --- SUBROUTINE ADS221(NAVC,CT,CTMIN,CTLMIN,THETAZ,G,IC,IDG,THETA)
C     DIMENSION G(NCON),IC(NAVC),IDG(NCON),THETA(NAVC)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE THE PUSH-OFF FACTORS THETA(I) FOR THE
C     METHOD OF FEASIBLE DIRECTIONS.  THETA(I) IS QUADRATIC IN G.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            JAN 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NAVC - NUMBER OF ACTIVE/VIOLATED CONSTRAINTS.
C     CT - CONSTRAINT TOLERANCE DEFINING WHEN A NONLINEAR INEQUALITY
C         CONSTRAINT IS ACTIVE.  CT IS A SMALL NEGATIVE NUMBER.
C     CTMIN - CONSTRAINT TOLERANCE DEFINING WHEN A NONLINEAR INEQUALITY
C         CONSTRAINT IS VIOLATED.  CTMIN IS A SMALL POSITIVE NUMBER.
C     CTLMIN - CONSTRAINT TOLERANCE DEFINIGNG  WHEN A LINEAR INEQUALITY
C         CONSTRAINT IS VIOLATED.  CTLMIN IS A SMALL POSITIVE NUMBER.
C     THETAZ - NOMINAL PUSH-OFF FACTOR.  THE PUSH-OFF FACTOR WHEN
C         CONSTRAINT G(I) IS PRECISELY ZERO.  THE ACTUAL PUSH-OFF FACTOR
C         IS A QUADRATIC FUNCTION OF G(I).
C     G - VECTOR OF CONSTRAINT VALUES.  MINIMUM DIMENSION IS NCON.
C     IC - ACTIVE AND VIOLATED CONSTRAINT IDENTIFIER.  IC(I) IS THE
C         LOCATION IN VECTOR G OF THE ITH ACTIVE OR VIOLATED CONSTRAINT.
C     IDG - CONSTRAINT TYPE IDENTIFIER.
C     -2 - LINEAR EQUALITY CONSTRAINT.
C     -1 - NONLINEAR EQUALITY CONSTRAINT.
C     0,1 - NONLINEAR INEQUALITY CONSTRAINT.
C     2 - LINEAR INEQUALITY CONSTRAINT.
C         MINIMUM DIMENSION IS NCON.
C
C --- OUTPUT
C     THETA - VECTOR OF PUSH-OFF FACTORS FOR ALL CONSTRAINTS.
C         MINIMUM DIMENSION IS NAVC.
C
      SUBROUTINE ADS221 (NAVC,CT,CTMIN,CTLMIN,THETAZ,G,IC,IDG,THETA)
      DIMENSION G(*),IC(*),IDG(*),THETA(*)
C
C     CONSTANTS.
      THT10=10.*THETAZ
C     CALCULATE THETAS.
      DO 20 I=1,NAVC
      NCI=IC(I)
      NCJ=IDG(NCI)
      NCJ=IABS(NCJ)
C     ASSUME NONLINEAR CONSTRAINT FOR NOW.
      GI=G(NCI)
      CTC=CT
      CTV=CTMIN
C     IS CONSTRAINT ACTUALLY LINEAR.
      IF (NCJ.LT.2) GO TO 10
C     YES.
      CTC=-CTLMIN
      CTV=CTLMIN
10    CONTINUE
      GG=GI/CTC-1.
C     THETA VALUE.
      THT=0.
C     NON-LINEAR PUSH-OFF.
      THT1=THETAZ*GG*GG
      IF (NCJ.EQ.0.OR.NCJ.EQ.1) THT=THT1
      IF (GI.GT.CTV) THT=THT1
C     LIMIT THETA TO 10*THETAZ.
      IF (THT.GT.THT10) THT=THT10
      THETA(I)=THT
20    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS223
C --- SUBROUTINE ADS223(NDV,NACS,CTMIN,X,SVLB,SVUB,ISIDC)
C     DIMENSION X(NDV),SVLB(NDV),SVUB(NDV),ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO IDENTIFY ACTIVE SIDE CONSTRAINTS
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               JAN 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     CTMIN - TOLERANCE TO IDENTIFY ACTIVE SIDE CONSTRAINT.
C     X - VECTOR OF DESIGN VARIABLES.  MINIMUM DIMENSION IS NDV.
C     SVLB - VECTOR CONTAINING LOWER BOUNDS ON DESIGN VARIABLES, X.
C         MINIMUM DIMENSION IS NDV.
C     SVUB - VECTOR CONTAINING UPPER BOUNDS ON DESIGN VARIABLES, X.
C         MINIMUM DIMENSION IS NDV.
C
C --- OUTPUT
C     NACS - THE NUMBER OF ACTIVE/VIOLATED SIDE CONSTRAINTS.
C     ISIDC - VECTOR IDENTIFYING ACTIVE/VIOLATED CONSTRAINTS.
C         MINIMUM DIMENSION IS NACS.
C
C --- NOTE
C     IF SVLB(I) IS ACTIVE, ISIDC(I)=-1.
C     IF SVUB(I) IS ACTIVE, ISIDC(I)=1.
C     IF BOTH SVLB(I) AND SVUB(I) ARE ACTIVE, ISIDC(I)=2.
C
      SUBROUTINE ADS223 (NDV,NACS,CTMIN,X,SVLB,SVUB,ISIDC)
      DIMENSION X(*),SVLB(*),SVUB(*),ISIDC(*)
C
C     BEGIN SEARCH FOR ACTIVE CONSTRAINTS.
      NACS=0
      DO 30 I=1,NDV
      II=0
      JJ=0
C     LOWER BOUND.
      DX=X(I)-SVLB(I)
      IF (DX.GT.CTMIN) GO TO 10
C     ACTIVE LOWER BOUND.
      NACS=NACS+1
      II=1
      JJ=-1
10    CONTINUE
C     UPPER BOUND.
      DX=SVUB(I)-X(I)
      IF (DX.GT.CTMIN) GO TO 20
C     ACTIVE UPPER BOUND.
      NACS=NACS+1
      JJ=1
      IF (II.GT.0) JJ=2
20    CONTINUE
      ISIDC(I)=JJ
30    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS231
C --- SUBROUTINE ADS231 (IGOTO,INFO,IONED,NDV,NCON,ITMAX,ICNDIR,NGT,NAC,
C    1 NVC,IPRNT2,ITRMOP,OBJ,ZRO,CT,CTMIN,CTL,CTLMIN,STOL,THETAZ,
C    2 DELOBJ,DABOBJ,SCFO,SLOPF,ALPHA,ALPMAX,X,SVLB,SVUB,DF,S,G,IC,IDG,
C    3 DG,THETA,C,ISIDC,XOLD,XTMP,GGL,SCFX,ITMP,SCFG,A,NRA,NCOLA,B,NRB,
C    4 WK,IWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM CONSTRAINED MINIMIZATION BY THE MODIFIED
C     METHOD OF FEASIBLE DIRECTIONS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                                  AUG. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C     IDG(I) - CONSTRAINT TYPE INDICATOR.
C       0,1 - NONLINEAR INEQUALITY CONSTRAINT.
C         2 - LINEAR INEQUALITY CONSTRAINT.
C        -1 - NONLINEAR EQUALITY CONSTRAINT.
C        -2 - LINEAR EQUALITY CONSTRAINT.
C
C --- OUTPUT
C
      SUBROUTINE ADS231 (IGOTO,INFO,IONED,NDV,NCON,ITMAX,ICNDIR,NGT,NAC,
     1NVC,IPRNT2,ITRMOP,OBJ,ZRO,CT,CTMIN,CTL,CTLMIN,STOL,THETAZ,DELOBJ,D
     2ABOBJ,SCFO,SLOPF,ALPHA,ALPMAX,X,SVLB,SVUB,DF,S,G,IC,IDG,DG,THETA,C
     3,ISIDC,XOLD,XTMP,GGL,SCFX,ITMP,SCFG,A,NRA,NCOLA,B,NRB,WK,IWK,GTMP,
     4ITEMP,TEMP,GMX1)
      DIMENSION X(*),SVLB(*),SVUB(*),DF(*),S(*),G(*),IC(*),IDG(*),DG(*),
     1THETA(*),C(*),ISIDC(*),XOLD(*),XTMP(*),GGL(*),SCFX(*),ITMP(*),SCFG
     2(*),A(NRA,*),B(NRB,*),WK(*),IWK(*),GTMP(*),ITEMP(10),TEMP(10)
C
C     GET INFO FROM TEMP
      ALPSAV=TEMP(1)
      BETA=TEMP(2)
      DF2=TEMP(3)
      OBJ1=TEMP(4)
      PHI=TEMP(5)
      DLOBJ1=TEMP(6)
      DLOBJ2=TEMP(7)
      DX1=TEMP(8)
      DX2=TEMP(9)
      GMAX1=TEMP(10)
      ICOUNT=ITEMP(1)
      IDAB=ITEMP(2)
      IDEL=ITEMP(3)
      ITER=ITEMP(4)
      KOUNT=ITEMP(5)
      LGOTO=ITEMP(6)
      NACS=ITEMP(7)
      NAVC=ITEMP(8)
      NGRAD=ITEMP(9)
      ISTRAT=ITEMP(10)
      ZRO10=10.*ZRO
      IGOTO1=IGOTO+1
      GO TO (10,60,330), IGOTO1
10    CONTINUE
C     ------------------------------------------------------------------
C     INITIAL CALL.  SET UP PARAMETERS.
C     ------------------------------------------------------------------
C     PRINT AS REQUIRED.
      IF (ISTRAT.EQ.0.AND.IPRNT2.GT.0) WRITE (8,510)
      IF (IPRNT2.GT.0) WRITE (8,610)
C     INITIALIZE PARAMETERS.
      ITER=0
      ICOUNT=0
      PHI=5.
      IDEL=0
      IDAB=0
      NGRAD=1
C     INITIALIZE S-VECTOR AND ISIDC-VECTOR TO ZERO.
      DO 20 I=1,NDV
      ISIDC(I)=0
20    S(I)=0.
      IF (IPRNT2.EQ.0) GO TO 30
      OBJA=OBJ/SCFO
      WRITE (8,710) OBJA
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
      ICALC=5
      CALL ADS402 (ICALC,SVLB,NDV,SCFX)
      ICALC=6
      CALL ADS402 (ICALC,SVUB,NDV,SCFX)
      ICALC=4
      CALL ADS402 (ICALC,G,NCON,SCFG)
30    CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION.  BEGIN NEW ITERATION.
C     ------------------------------------------------------------------
40    CONTINUE
      ITER=ITER+1
      OBJ1=OBJ
      IF (IPRNT2.GT.2) WRITE (8,720) ITER
      IF (NGRAD.EQ.0) GO TO 60
C     ------------------------------------------------------------------
C     CALCULATE GRADIENT OF OBJECTIVE AND ACTIVE AND/OR VIOLATED
C     CONSTRAINTS.
C     ------------------------------------------------------------------
      IF (ITER.GT.1) GO TO 50
C     GRADIENTS ARE ALREADY AVAILABLE.  SHIFT A AND IC AS REQUIRED.
      CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
      GO TO 60
50    CONTINUE
C     DETERMINE THE ACTIVE CONSTRAINT SET.
C     GENERAL CONSTRAINTS, G.
      IF (NGT.LT.NCON) CALL ADS201 (NCON,NGT,G,IDG,IC,CT,CTMIN,CTL,CTLMI
     1N,NAC,NVC)
      IF (NGT.EQ.NCON) CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,
     1CTLMIN,NAC,NVC)
C     EVALUATE GRADIENTS OF OBJECTIVE AND ALL ACTIVE/VIOLATED
C     CONSTRAINTS.
      IGOTO=1
      INFO=2
C     PUT INFO IN TEMP FOR TRANSFER
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      TEMP(10)=GMAX1
      ITEMP(1)=ICOUNT
      ITEMP(2)=IDAB
      ITEMP(3)=IDEL
      ITEMP(4)=ITER
      ITEMP(5)=KOUNT
      ITEMP(6)=LGOTO
      ITEMP(7)=NACS
      ITEMP(8)=NAVC
      ITEMP(9)=NGRAD
      ITEMP(10)=ISTRAT
      RETURN
60    CONTINUE
      NAVC=NAC+NVC
C     IDENTIFY ACTIVE SIDE CONSTRAINTS.
      CALL ADS223 (NDV,NACS,CTLMIN,X,SVLB,SVUB,ISIDC)
      IF (IPRNT2.LT.4) GO TO 90
C     WRITE ACTIVE/VIOLATED CONSTRAINT NUMBERS.
      WRITE (8,620) NAC,NVC
      IF (NAVC.GT.0) WRITE (8,630)
      IF (NAVC.GT.0) WRITE (8,640) (IC(I),I=1,NAVC)
      WRITE (8,650) NACS
      IF (NACS.EQ.0) GO TO 90
      N=0
      DO 80 I=1,NDV
      IF (ISIDC(I).EQ.0) GO TO 80
      IF (ISIDC(I).EQ.1) GO TO 70
C     LOWER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=-I
70    IF (ISIDC(I).LT.0) GO TO 80
C     UPPER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=I
80    CONTINUE
      WRITE (8,660)
      WRITE (8,640) (ITMP(I),I=1,NACS)
90    CONTINUE
      IF (IPRNT2.LT.5) GO TO 110
C     WRITE GRADIENT OF OBJECTIVE.
      ICALC=3
      CALL ADS402 (ICALC,DF,NDV,SCFX)
      IF (NAVC.EQ.0) GO TO 110
C     WRITE GRADIENT OF ACTIVE/VIOLATED CONSTRAINTS.
      ISCAL=0
      DO 100 J=1,NAVC
      WRITE (8,670) IC(J)
      CALL ADS401 (A(1,J),NDV,SCFX,ISCAL)
100   CONTINUE
110   CONTINUE
C     ------------------------------------------------------------------
C     SEARCH DIRECTION.
C     ------------------------------------------------------------------
      NACT=NAVC+NACS
      IF (NACT.GT.0) GO TO 130
C     NO ACTIVE OR VIOLATED CONSTRAINTS.  FIND STEEPEST DESCENT OR
C     FLETCHER-REEVES CONJUGATE DIRECTION.
      ICOUNT=ICOUNT+1
      IF (IDEL.EQ.1.OR.IDAB.EQ.1) ICOUNT=1
      IF (ICOUNT.GT.ICNDIR) ICOUNT=1
C     STEEPEST DESCENT.
120   IF (ICOUNT.EQ.1) SCALS=0.
      IF (ICOUNT.EQ.1) DF2=1.
C     CONJUGATE DIRECTION.
      ICALC=3
      CALL ADS236 (NDV,ICALC,DF,DM1,DM2,DM3,DF2,S,S2,SCALS,ZRO,ISIDC)
C     SLOPE OF F(ALPHA) FUNCTION.
      CALL ADS501 (NDV,DF,S,SLOPF)
      ZROM=-ZRO
      IF (SLOPF.LT.ZROM.OR.ICOUNT.EQ.1) GO TO 160
C     SLOPE IS BAD (POSITIVE).  GO USE STEEPEST DESCENT.
      ICOUNT=1
      GO TO 120
130   CONTINUE
C     CONSTRAINTS ARE ACTIVE/VIOLATED.  FIND USABLE-FEASIBLE
C     SEARCH DIRECTION.
      ICOUNT=0
      IF (NVC.EQ.0) PHI=5.
      PHI=10.*PHI
      IF (PHI.GT.1000.) PHI=1000.
C     CALCULATE SCALE FACTOR FOR GRADIENT OF OBJECTIVE.
      NN=1
      CALL ADS207 (NDV,NN,DF,NDV,ZRO,SCALF)
C     CALCULATE NORMALIZATION FACTORS FOR CONSTRAINTS.
C     STORE FACTORS IN GGL.
      IF (NAVC.GT.0) CALL ADS207 (NDV,NAVC,A,NRA,ZRO,GGL)
C     CALCULATE USABLE-FEASIBLE SEARCH DIRECTION.
      THETA1=THETAZ
      THETAZ=0.
      IF (NVC.GT.0) THETAZ=THETA1
      CALL ADS217 (NDV,NAC,NVC,NACS,CT,CTMIN,CTLMIN,THETAZ,ZRO,PHI,GGL,G
     1,DF,A,NRA,IDG,IC,ISIDC,ITMP,B,NRB,SCALF,S,THETA,C,BETA,RSDMX)
      THETAZ=THETA1
      IF (IPRNT2.GT.3) WRITE (8,680) BETA,RSDMX
C     ------------------------------------------------------------------
C     CHECK KUHN-TUCKER CONDITIONS.
C     ------------------------------------------------------------------
      IF (NVC.GT.0.AND.BETA.GT.0.01) GO TO 150
C     IF NDV SIDE CONSTRAINTS ARE ACTIVE AND BETA=0, TERMINATE.
      IF (NACS.EQ.NDV.AND.BETA.LE.0.01) GO TO 460
      IF (RSDMX.GT.STOL.AND.BETA.GT.ZRO10) GO TO 150
C     EITHER RSDMX OR BETA INDICATES K-T CONDITIONS ARE SATISFIED.
C     CHECK CONSTRAINT VALUES.
      ALPHA=0.
      DO 140 I=1,NAVC
      II=IC(I)
      JJ=IABS(IDG(II))
      CC=CTMIN
      IF (JJ.GT.1) CC=CTLMIN
C     IF G.GT.CC, GO CHECK CONVERGENCE.
      IF (ABS(G(II)).GT.CC) GO TO 420
140   CONTINUE
C     K-T CONDITIONS ARE SATISFIED.  GO EXIT.
      GO TO 460
150   CONTINUE
C     SLOPE OF F(ALPHA) FUNCTION.
      CALL ADS501 (NDV,DF,S,SLOPF)
160   CONTINUE
      IF (IPRNT2.LT.4) GO TO 170
      ICALC=2
      CALL ADS402 (ICALC,S,NDV,SCFX)
170   CONTINUE
C     ------------------------------------------------------------------
C     ESTIMATE ALPHA.
C     ------------------------------------------------------------------
      IF (ITER.GT.1) GO TO 180
C     FIRST ITERATION ESTIMATE.
      CALL ADS213 (OBJ,SLOPF,DLOBJ1,DLOBJ2,ALPHA)
      CALL ADS214 (NDV,X,S,DX1,DX2,ALP1)
      IF (ALP1.LT.ALPHA) ALPHA=ALP1
      ALPSAV=ALPHA
180   CONTINUE
      OBJ1=OBJ
      ALP1=ALPHA
      ALPHA=.5*(ALPHA+ALPSAV)
      ALPSAV=ALP1
      IF (ALPHA.LE.0.001) ALPHA=0.001
C     ESTIMATE ALPMAX TO ENCOUNTER NDV SIDE CONSTRAINTS.
      CALL ADS112 (NDV,X,S,SVLB,SVUB,ZRO,ALPMAX)
      IF (ALPMAX.LE.ZRO) GO TO 460
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     ------------------------------------------------------------------
C     CALCULATE DG/DALPHA VECTOR AND MOVE TO ENCOUNTER NEW CONSTRAINT,.
C     OR OVERCOME CONSTRAINT VIOLATION.
C     ------------------------------------------------------------------
      ALP1=5.*ALPHA
      ALP2=-1.
      II=0
      DO 220 I=1,NCON
      DG(I)=0.
      DO 190 J=1,NGT
      J1=J
      IF (IC(J).EQ.I) GO TO 200
190   CONTINUE
C     THIS GRADIENT IS NOT AVAILABLE.
      GO TO 220
200   CONTINUE
C     GRADIENT IS AVAILABLE.  CALCULATE DG(I)
      DO 210 J=1,NDV
210   DG(I)=DG(I)+A(J,J1)*S(J)
      IF (ABS(DG(I)).LE.0.001) GO TO 220
      ALP=-G(I)/DG(I)
      IF (ALP.LT.ALP1.AND.ALP.GT.ZRO.AND.J1.GT.NAVC) ALP1=ALP
      IF(ALP.GT.ALP2.AND.J1.LE.NAVC) ALP2=ALP
      II=1
220   CONTINUE
      IF(NVC.GT.0.AND.ALP2.GT.0.) ALPHA=ALP2
      IF (ALP1.LT.ALP2.AND.II.EQ.1) ALPHA=ALP1
C     LIMIT FIRST ESTIMATE TO MOVE TO SIDE CONSTRAINT.
      ALP=1.0E+20
      DO 230 I=1,NDV
      IF (ABS(S(I)).LE.ZRO) GO TO 230
      CC=(SVLB(I)-X(I))/S(I)
      IF (CC.GT.ZRO.AND.CC.LT.ALP) ALP=CC
      CC=(SVUB(I)-X(I))/S(I)
      IF (CC.GT.ZRO.AND.CC.LT.ALP) ALP=CC
230   CONTINUE
      IF (ALP.LT.ALPHA) ALPHA=ALP
C     ------------------------------------------------------------------
C     CREATE B-MATRIX AND INVERT.
C     ------------------------------------------------------------------
      IF (NVC.GT.0.OR.NACT.EQ.0) GO TO 320
C     B-MATRIX.
      CALL ADS209 (NDV,NAVC,NACS,A,NRA,B,NRB,ISIDC)
C     ZERO OUT ROWS AND COLUMNS OF B FOR DESIGNS LEAVING A CONSTRAINT.
      IF (NAVC.EQ.0) GO TO 260
      DO 250 I=1,NAVC
      I1=IC(I)
      IF (DG(I1).GT.-0.01) GO TO 250
C     ZERO THIS ROW AND COLUMN.
      DO 240 J=1,NACT
      B(I,J)=0.
240   B(J,I)=0.
250   CONTINUE
260   CONTINUE
      IF (NACS.EQ.0) GO TO 310
C     SIDE CONSTRAINTS.
      NN=NAVC
      DO 300 I=1,NDV
      ID=ISIDC(I)
      IF (ID.EQ.0) GO TO 300
      IF (ID.EQ.1) GO TO 280
C     LOWER BOUND.
      NN=NN+1
      IF (S(I).LE.ZRO) GO TO 280
C     LEAVING THIS SIDE.  ZERO ROW AND COLUMN OF B.
      DO 270 J=1,NACT
      B(NN,J)=0.
270   B(J,NN)=0.
280   NACT=NAVC+NACS
      IF (ID.LT.0) GO TO 300
C     UPPER BOUND.
      NN=NN+1
      IF (S(I).GE.-ZRO) GO TO 300
C     LEAVING THIS SIDE.  ZERO ROW AND COLUMN OF B.
      DO 290 J=1,NACT
      B(NN,J)=0.
290   B(J,NN)=0.
300   CONTINUE
310   CONTINUE
C     INVERT B.
      CALL ADS202 (NACT,ZRO,B,NRB)
320   CONTINUE
C     ------------------------------------------------------------------
C     DO ONE-DIMENSIONAL SEARCH.
C     ------------------------------------------------------------------
      LGOTO=0
      KCOUNT=0
      IF (IPRNT2.GE.4) WRITE (8,690) ALPHA
      GMX1=1.0E+20
      GO TO 410
330   CONTINUE
      NACT=NAVC+NACS
      IF (NVC.GT.0.OR.NACT.EQ.0) GO TO 410
      KCOUNT=KCOUNT+1
      IF (KCOUNT.GT.10) GO TO 410
      IQ=0
      GMX=0.
C     BUILD GTMP.
      IF (NAVC.EQ.0) GO TO 350
      DO 340 I=1,NAVC
      I1=IC(I)
      I2=IDG(I1)
      CC=CTMIN
      IF (IABS(I2).GT.1) CC=CTLMIN
      GI=G(I1)
      IF (DG(I1).LT.-0.002) GI=0.
      GIA=ABS(GI)
      IF (GIA.GT.CC) IQ=1
      IF (GIA.GT.GMX) GMX=GIA
340   GTMP(I)=GI
350   CONTINUE
C     SIDE CONSTRAINTS.
      IF (NACS.EQ.0) GO TO 380
      NN=NAVC
      DO 370 I=1,NDV
      I1=ISIDC(I)
      IF (I1.EQ.0) GO TO 370
      IF (I1.EQ.1) GO TO 360
C     LOWER BOUND IS ACTIVE.
      NN=NN+1
      GTMP(NN)=SVLB(I)-X(I)
      GIA=ABS(GTMP(NN))
      IF (GIA.GT.GMX) GMX=GIA
      IF (GIA.GT.CTLMIN) IQ=1
      IF (I1.LT.0) GO TO 370
360   CONTINUE
C     UPPER BOUND IS ACTIVE.
      NN=NN+1
      GTMP(NN)=X(I)-SVUB(I)
      GIA=ABS(GTMP(NN))
      IF (GIA.GT.GMX) GMX=GIA
      IF (GIA.GT.CTLMIN) IQ=1
370   CONTINUE
380   CONTINUE
      GMX2=.9*GMX1
      IF (GMX.GT.GMX2.OR.IQ.EQ.0) GO TO 410
      GMX1=GMX
C     CALCULATE DELTA-X.
      CALL ADS203 (NDV,NAVC,NACS,A,NRA,B,NRB,XTMP,GTMP,ISIDC)
C     ITERATE.
C     UPDATE X.
      XMX=0.
      DO 390 I=1,NDV
      IF (ABS(XTMP(I)).GT.XMX) XMX=ABS(XTMP(I))
390   CONTINUE
      IF (XMX.LE.ZRO) GO TO 410
      DO 400 I=1,NDV
      X(I)=X(I)+XTMP(I)
      IF (X(I).LT.SVLB(I)) X(I)=SVLB(I)
      IF (X(I).GT.SVUB(I)) X(I)=SVUB(I)
400   CONTINUE
      ITEMP(1)=ICOUNT
      ITEMP(2)=IDAB
      ITEMP(3)=IDEL
      ITEMP(4)=ITER
      ITEMP(5)=KOUNT
      ITEMP(6)=LGOTO
      ITEMP(7)=NACS
      ITEMP(8)=NAVC
      ITEMP(9)=NGRAD
      ITEMP(10)=ISTRAT
      RETURN
410   CONTINUE
      GMX1=1.0E+20
      CALL ADS001 (LGOTO,ISTRAT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NAVC,IC,WK,IWK,SLOPF,ALPHA,ALPMAX)
      IF (LGOTO.EQ.0) GO TO 420
C     CALCULATE FUNCTION VALUES.
      KCOUNT=0
      IGOTO=2
      INFO=1
C     PUT INFO BACK IN TEMP FOR TRANSFER.
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      TEMP(10)=GMAX1
      ITEMP(1)=ICOUNT
      ITEMP(2)=IDAB
      ITEMP(3)=IDEL
      ITEMP(4)=ITER
      ITEMP(5)=KOUNT
      ITEMP(6)=LGOTO
      ITEMP(7)=NACS
      ITEMP(8)=NAVC
      ITEMP(9)=NGRAD
      ITEMP(10)=ISTRAT
      RETURN
420   CONTINUE
C     ONE-DIMENSIONAL SEARCH IS COMPLETE.
      OBJA=OBJ/SCFO
      IF (IPRNT2.EQ.2) WRITE (8,730) ITER,OBJA
      IF (IPRNT2.GE.4) WRITE (8,740) ALPHA
      IF (IPRNT2.GT.2) WRITE (8,700) OBJA
      ICALC=1
      IF (IPRNT2.GE.2) CALL ADS402 (ICALC,X,NDV,SCFX)
      ICALC=4
      IF (IPRNT2.GT.2) CALL ADS402 (ICALC,G,NCON,SCFG)
C     ------------------------------------------------------------------
C     CHECK CONVERGENCE.
C     ------------------------------------------------------------------
      NGRAD=1
      CALL ADS211 (OBJ,OBJ1,DELOBJ,DABOBJ,DEL1,DAB1,IDEL,IDAB)
      IF (ITER.GE.ITMAX) GO TO 460
      IF (NVC.GT.0.AND.ITER.LT.10) IDEL=0
      IF (NVC.GT.0.AND.ITER.LT.10) IDAB=0
      IF (IDEL.GE.ITRMOP.OR.IDAB.GE.ITRMOP) GO TO 460
C     REDUCE CT AND CTL IF NO PROGRESS IS BEING MADE.
      IF (IDEL.EQ.0.AND.IDAB.EQ.0) GO TO 425
      CT=.5*CT
      IF(ABS(CT).LT.CTMIN) CT=-CTMIN
      CTL=.5*CTL
      IF(ABS(CTL).LT.CTLMIN) CTL=-CTLMIN
425   CONTINUE
C     IF LAST MOVE WAS GT.ZRO10, GO START NEW ITERATION.
      IF (ALPHA.GT.ZRO10.OR.NAVC.EQ.0) GO TO 40
C     ------------------------------------------------------------------
C     LAST ALPHA.LE.ZRO10.  DELETE CONSTRAINTS THAT ARE NO LONGER
C     CRITICAL AND CONTINUE OPTIMIZATION WITHOUT GETTING NEW GRADIENTS.
C     ------------------------------------------------------------------
      IF (NGT.GE.NCON) GO TO 450
C     CHECK FOR NEW CRITICAL CONSTRAINTS.
      DO 440 I=1,NCON
      I1=IDG(I)
      IF (I1.LT.0) GO TO 440
      CC=CT
      IF (I1.GT.1) CC=CTL
      IF (G(I).LT.CC) GO TO 440
C     THIS CONSTRAINT IS CRITICAL.  IS IT ALREADY IN IC?
      DO 430 J=1,NGT
      IF (IC(J).EQ.I) GO TO 440
430   CONTINUE
C     NEW CRITICAL CONSTRAINT.  MUST EVALUATE GRADIENTS.
      NGRAD=1
      GO TO 40
440   CONTINUE
450   CONTINUE
      CALL ADS009 (NDV,A,NRA,NGT,IC,IDG,G,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
      NAVC=NAC+NVC
C     WE HAVE GRADIENTS OF ALL CRITICAL CONSTRAINTS.
C     CONTINUE OPTIMIZATION WITHOUT GETTING NEW GRADIENTS.
      NGRAD=0
      GO TO 40
460   CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION IS COMPLETE.
C     ------------------------------------------------------------------
      IF (IPRNT2.LE.0) GO TO 500
C     PRINT FINAL RESULTS.
      WRITE (8,530)
      WRITE (8,540) ITER
      OBJA=OBJ/SCFO
      WRITE (8,700) OBJA
C     X-VECTOR.
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
C     G-VECTOR.
      ICALC=4
      CALL ADS402 (ICALC,G,NCON,SCFG)
C     IDENTIFY ACTIVE/VIOLATED CONSTRAINTS.
      CALL ADS201 (NCON,NGT,G,IDG,ITMP,CT,CTMIN,CTL,CTLMIN,NAC,NVC)
C     SIDE CONSTRAINTS.
      CALL ADS223 (NDV,NACS,CTLMIN,X,SVLB,SVUB,ISIDC)
C     WRITE FINAL CONSTRAINT TOLERANCES.
      WRITE (8,520) CT,CTL
C     WRITE ACTIVE/VIOLATED COSNTRAINT NUMBERS.
      NAVC=NAC+NVC
      WRITE (8,620) NAC,NVC
      IF (NAVC.GT.0) WRITE (8,630)
      IF (NAVC.GT.0) WRITE (8,640) (ITMP(I),I=1,NAVC)
      WRITE (8,650) NACS
      IF (NACS.EQ.0) GO TO 490
      N=0
      DO 480 I=1,NDV
      IF (ISIDC(I).EQ.0) GO TO 480
      IF (ISIDC(I).EQ.1) GO TO 470
C     LOWER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=-I
470   IF (ISIDC(I).LT.0) GO TO 480
C     UPPER BOUND IS ACTIVE.
      N=N+1
      ITMP(N)=I
480   CONTINUE
      WRITE (8,660)
      WRITE (8,640) (ITMP(I),I=1,NACS)
490   WRITE (8,550)
      IF (ITER.GE.ITMAX) WRITE (8,560)
      IF (IDEL.GE.ITRMOP) WRITE (8,570) ITRMOP
      IF (IDAB.GE.ITRMOP) WRITE (8,580) ITRMOP
      CC=.001
      IF (RSDMX.LE.0.001) WRITE (8,590) RSDMX,CC
      NACT=NAVC+NACS
      IF (BETA.LE.0.001.AND.NACT.GT.0) WRITE (8,600) BETA,CC
500   CONTINUE
C     PUT INFO BACK IN TEMP FOR TRANSFER.
      TEMP(1)=ALPSAV
      TEMP(2)=BETA
      TEMP(3)=DF2
      TEMP(4)=OBJ1
      TEMP(5)=PHI
      TEMP(6)=DLOBJ1
      TEMP(7)=DLOBJ2
      TEMP(8)=DX1
      TEMP(9)=DX2
      TEMP(10)=GMAX1
      ITEMP(1)=ICOUNT
      ITEMP(2)=IDAB
      ITEMP(3)=IDEL
      ITEMP(4)=ITER
      ITEMP(5)=KOUNT
      ITEMP(6)=LGOTO
      ITEMP(7)=NACS
      ITEMP(8)=NAVC
      ITEMP(9)=NGRAD
      ITEMP(10)=ISTRAT
      IGOTO=0
      RETURN
C     ------------------------------------------------------------------
C     FORMATS.
C     ------------------------------------------------------------------
510   FORMAT ('1')
520   FORMAT (/,5X,'CONSTRAINT TOLERANCE, CT =',1PE13.5,'  CTL =',
     11PE13.5)
530   FORMAT (////,5X,'FINAL OPTIMIZATION RESULTS')
540   FORMAT (/,5X,'NUMBER OF ITERATIONS =',I5)
550   FORMAT (/,5X,'TERMINATION CRITERIA')
560   FORMAT (/,5X,'NUMBER OF ITERATIONS = ITMAX')
570   FORMAT (/,5X,'RELATIVE CONVERGENCE CRITERION WAS MET FOR',I3,
     1' CONSECUTIVE ITERATIONS')
580   FORMAT (/,5X,'ABSOLUTE CONVERGENCE CRITERION WAS MET FOR',I3,
     1' CONSECUTIVE ITERATIONS')
590   FORMAT (/,5X,'MAXIMUM K-T RESIDUAL =',1PE13.5,' IS LESS THAN',
     11PE13.5)
600   FORMAT (/,5X,'KUHN-TUCKER PARAMETER, BETA =',1PE13.5,
     1' IS LESS THAN',1PE13.5)
610   FORMAT (//,5X,75('-'),/,19X,
     1'IOPT = 5; MODIFIED METHOD OF FEASIBLE DIRECTIONS',/,5X,75('-'))
620   FORMAT (/,5X,'THERE ARE',I5,' ACTIVE CONSTRAINTS AND',I5,
     1' VIOLATED CONSTRAINTS')
630   FORMAT (5X,'CONSTRAINT NUMBERS')
640   FORMAT (5X,10I5)
650   FORMAT (/,5X,'THERE ARE',I5,' ACTIVE SIDE CONSTRAINTS')
660   FORMAT (5X,'VARIABLE NUMBERS (MINUS INDICATES LOWER BOUND)')
670   FORMAT (/,5X,'GRADIENT OF CONSTRAINT NUMBER',I5)
680   FORMAT (/,5X,'K-T PARAMETERS, BETA =',1PE13.5,'  MAX. RESIDUAL =',
     11PE13.5)
690   FORMAT (/,5X,'PROPOSED ALPHA =',1PE13.5)
700   FORMAT (/,5X,'OBJECTIVE =',1PE12.5)
710   FORMAT (/,5X,'-- INITIAL DESIGN',//,5X,'OBJ =',1PE12.5)
720   FORMAT (//,5X,'-- BEGIN ITERATION NUMBER',I5)
730   FORMAT (//,5X,'-- ITERATION',I5,5X,'OBJ =',1PE12.5)
740   FORMAT (/,5X,'CALCULATED ALPHA =',1PE13.5)
      END
C
C
C
C=DECK      ADS235
C --- SUBROUTINE ADS235 (IGOTO,INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,ITMAX
C    1 ,ICNDIR,DF,S,ZRO,DLOBJ1,DLOBJ2,DX1,DX2,XOLD,SVLB,SVUB,DELOBJ,
C    2 DABOBJ,ITRM,XTMP,IPRNT2,WK,IWK,G,SCFX,H,DX,DFG,IVAMET,IC,
C    3 IDG,ISIDC,SCFO,IFCALL,IGCALL,ALPMAX)
C     DIMENSION X(NDV),S(NDV),DF(NDV),XOLD(NDV),SVLB(NDV),SVUB(NDV),
C    1 XTMP(NDV),WK(NRWK),IWK(NRIWK),G(NCON),SCFX(NDV),DX(NDV),DFG(NDV),
C    2 H(NDV*(NDV+1)/2),IC(NCOLA),IDG(NCON),ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO PERFORM UNCONSTRAINED MINIMIZATION BY VARIABLE METRIC
C     METHODS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                 NOV. 1982
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      IGOTO  - CONTROL PQRAMETER.
C      INFO   - CONTROL PARAMETER.
C      ISTRAT - STRATEGY IDENTIFIER.
C      IONED  - ONE D. SEARCH IDENTIFIER.
C      NDV    - NUMBER OF DESIGN VARIABLES.
C      NCON   - NUMBER OF CONSTRAINTS.
C      OBJ    - OBJECTIVE.
C      X      - DESIGN VARIABLES.
C      ITMAX  - MAXIMUM ITERATION NUMBER.
C      ICNDIR - ITERATION NUMBER RETURN TO STEEPEST DESCENT METHOD.
C      DF     - GRADIENT OF OBJECTIVE.
C      S      - ARRAY FOR SEARCH DIRECTION.
C      ZRO    - ZERO.
C      DLOBJ1,DLOBJ2,DX1,DX2 - PARAMETERS TO ESTIMATE INITIAL ALPHA.
C      XOLD   - FORMER DESIGN VARIABLE.
C      SVLB,SVUB - LOWER AND UPPER BOUND OF DESIGN VARIABLES.
C      DELOBJ,DABOBJ,ITRM - PARAMETERS FOR CONVERGENCE CROTERIA.
C      XTMP   - TEMPORARY ARRAY FOR DESIGN VARIABLES.
C      IPRNT2 - PRINT CONTROL IDENTIFIER FOR OPTIMIZATION LEVEL.
C      WK,IWK - REAL AND INTEGER WORK ARRAY.
C      G      - CONSTRAINT VALUE.
C      SCFX   - SCALE FACTOR FOR DESIGN VARIABLES.
C      H      - ARRAY FOR HESSIAN MATRIX.
C      DX     - ARRAY FOR THE DIFFERENCE BETWEEN X AND XOLD.
C      DFG    - ARRAY FOR THE DIFFERENCE BETWEEN DF AND DFOLD.
C      IVAMET - VARIABLE METRIC METHOD CONTROL IDENTIFIER.
C      IC     - ARRAY IDENTIFYING ACTIVE CONSTRAINTS.
C      IDG    - CONSTRAINT TYPE IDENTIFIER.
C      ISIDC  - ARRAY FOR IDENTIFY ACTIVE SIDE CONSTRAINTS.
C      SCFO   - SCALE FACTOR OF OBJECTIVE.
C      IFCALL,IGCALL - NUMBER OF FUNCTION AND GRADIENT CALL.
C --- OUTPUT
C      OBJ    - OPTIMUM OBJECTIVE.
C      X      - OPTIMUM DESIGN VARIABLES.
C      G      - CONSTRAIN VALUE CORESPOND TO  OPTIMUM DESIGN VARIABLES.
C
      SUBROUTINE ADS235 (IGOTO,INFO,ISTRAT,IONED,NDV,NCON,OBJ,X,ITMAX,IC
     1NDIR,DF,S,ZRO,DLOBJ1,DLOBJ2,DX1,DX2,XOLD,SVLB,SVUB,DELOBJ,DABOBJ,I
     2TRM,XTMP,IPRNT2,WK,IWK,G,SCFX,H,DX,DFG,IVAMET,IC,IDG,ISIDC,SCFO,IF
     3CALL,IGCALL,ALPHA,ALPSAV,DF2,OBJ1,ICOUNT,IDAB,IDEL,IDIVCT,ITER,LGO
     4TO,ALPMAX,SCFG)
      DIMENSION X(*),S(*),DF(*),XOLD(*),SVLB(*),SVUB(*),XTMP(*),WK(*),IW
     1K(*),G(*),SCFX(*),DX(*),DFG(*),H(*),IC(*),IDG(*),ISIDC(*),SCFG(*)
C
      IGOTO1=IGOTO+1
      GO TO (10,40,170), IGOTO1
10    CONTINUE
C     INITIAL CALL.
C     PRINT AS REQUIRED.
      IF (IPRNT2.GT.0.AND.ISTRAT.EQ.0) WRITE (8,280)
      IF (ICNDIR.EQ.1) GO TO 20
      IF (IPRNT2.GT.0.AND.IVAMET.LE.1) WRITE (8,290)
      IF (IPRNT2.GT.0.AND.IVAMET.EQ.2) WRITE (8,300)
20    IF (IPRNT2.GT.0.AND.ICNDIR.EQ.1) WRITE (8,310)
C     SET UP PARAMETERS.
      ITER=0
      ICOUNT=0
      IDEL=0
      IDAB=0
      ALPSAV=0.
C     IDENTIFIER FOR CONTROL OF DIVIDE CHECK ERROR DUE TO DFG , DX.
      IDIVCT=0
      IF (IPRNT2.EQ.0) GO TO 30
      OBJW=OBJ
      IF (ISTRAT.EQ.0) OBJW=OBJ/SCFO
      WRITE (8,320) OBJW
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
      ICALC=4
      IF (NCON.NE.0) CALL ADS402 (ICALC,G,NCON,SCFG)
C     INITIAL FUNCTION EVALUATION IS ALREADY AVAILABLE.
C     ------------------------------------------------------------------
C     OPTIMIZATION.  BEGIN NEW ITERATION.
C     ------------------------------------------------------------------
30    CONTINUE
      ITER=ITER+1
      IF (IPRNT2.GT.2) WRITE (8,340) ITER
      OBJ1=OBJ
C     CALCULATE GRADIENT OF OBJECTIVE.
      IGOTO=1
      INFO=2
      IF (ISTRAT.EQ.0.AND.ITER.EQ.1) GO TO 40
      IF (ITER.GT.1.AND.ALPHA.LE.ZRO) GO TO 40
      RETURN
40    CONTINUE
      OBJ=OBJ1
      ICALC=3
      IF (IPRNT2.GT.4) CALL ADS402 (ICALC,DF,NDV,SCFX)
C     IDENTIFY ACTIVE SIDE CONSTRAINTS.
      CALL ADS509 (NDV,X,SVLB,SVUB,ZRO,ISIDC,NACS)
C     SEARCH DIRECTION.
      ICOUNT=ICOUNT+1
      IF (ICOUNT.GT.ICNDIR) ICOUNT=1
C     STEEPEST DESCENT.
50    IF (ICOUNT.EQ.1) JVAMET=0
      IF (ICOUNT.EQ.1) CALL ADS236 (NDV,JVAMET,DF,DX,DFG,H,DF2,S,S2,SCAL
     1S,ZRO,ISIDC)
C     DIRECTION BY VARIABLE METRIC METHODS.
C     CALCULATE DFG.
      IF (ICOUNT.LE.1) GO TO 130
      SQY=0.
      SQDX=0.
      DO 110 I=1,NDV
      DFG(I)=DF(I)-DFG(I)
      SQY=SQY+DFG(I)*DFG(I)
      IF (ISIDC(I).EQ.0) GO TO 100
      DXOL=ABS(DX(I)-SVLB(I))
      DXOU=ABS(SVUB(I)-DX(I))
      VLIM=AMIN1(DXOL,DXOU)
      IF (VLIM.GT.ZRO) GO TO 70
      IF (DXOL.LE.ZRO.AND.DF(I).LE.-ZRO) GO TO 60
      IF (DXOU.LE.ZRO.AND.DF(I).GE.ZRO) GO TO 60
      GO TO 70
60    ICOUNT=1
      GO TO 50
70    CONTINUE
      NA=I*(I-1)/2
      DX(I)=0.
      J1=NA+1
      J2=NA+I
      DO 80 J=J1,J2
80    H(J)=0.
      JZ=NA+I
      J1=I+1
      DO 90 J=J1,NDV
      JZ=JZ+J-1
90    H(JZ)=0.
      GO TO 110
100   CONTINUE
      DX(I)=X(I)-DX(I)
      SQDX=SQDX+DX(I)*DX(I)
110   CONTINUE
      SQY=SQRT(SQY)
      SQDX=SQRT(SQDX)
      IF (SQY.GT.ZRO.AND.SQDX.GT.ZRO) GO TO 120
      IDIVCT=IDIVCT+1
      IF (IDIVCT.GE.2) GO TO 200
      ICOUNT=1
      GO TO 50
120   CONTINUE
      IF (ICOUNT.EQ.2) IDIVCT=0
      ICALC=8
      IF (IPRNT2.GT.4) CALL ADS402 (ICALC,DX,NDV,SCFX)
      ICALC=9
      IF (IPRNT2.GT.4) CALL ADS402 (ICALC,DFG,NDV,SCFX)
      IF (ICOUNT.GT.1) CALL ADS236 (NDV,IVAMET,DF,DX,DFG,H,DF2,S,S2,SCAL
     1S,ZRO,ISIDC)
130   CONTINUE
      IF (IPRNT2.GE.5) CALL ADS404 (NDV,H)
      ICALC=2
      IF (IPRNT2.GT.3) CALL ADS402 (ICALC,S,NDV,SCFX)
C     ONE-DIMENSIONAL SEARCH.
C     SLOPE OF F(ALPHA) FUNCTION.
      CALL ADS501 (NDV,DF,S,SLOPF)
      ZROM=-ZRO
      IF (SLOPF.LT.ZROM.OR.ICOUNT.EQ.1) GO TO 150
C     SLOPE IS BAD (POSITIVE).  RETURN TO STEEPEST DESCENT.
C     IF ALL VARIABLES ARE EQUAL TO THEIR LIMIT VALUES , THEN TERMINATE.
      ICOUNT=1
      IISID=0
      DO 140 I=1,NDV
      IF (ISIDC(I).EQ.0) GO TO 50
140   CONTINUE
      IISID=1
      GO TO 200
150   CONTINUE
C     IF FIRST ITERATION, ESTIMATE ALPHA.
      IF (ITER.GT.1) GO TO 160
      CALL ADS213 (OBJ,SLOPF,DLOBJ1,DLOBJ2,ALPHA)
      CALL ADS214 (NDV,X,S,DX1,DX2,ALP1)
      IF (ALP1.LT.ALPHA) ALPHA=ALP1
160   CONTINUE
      ALP1=ALPSAV
      ALPSAV=ALPHA
      ALPHA=.5*(ALPHA+ALP1)
      IF (ALPHA.LT.ZRO) ALPHA=ZRO
C     ALPMAX.
      CALL ADS112 (NDV,X,S,SVLB,SVUB,ZRO,ALPMAX)
      IF (ALPMAX.LE.ZRO) GO TO 200
      IF (ALPHA.GT.ALPMAX) ALPHA=ALPMAX
C     ------------------------------------------------------------------
C     DO ONE-DIMENSIONAL SEARCH.
C     ------------------------------------------------------------------
C     SAVE XOLD IN DX.
      CALL ADS503 (NDV,X,DX)
C     SAVE DF IN DFG.
      CALL ADS503 (NDV,DF,DFG)
      LGOTO=0
      IF (IPRNT2.GT.3) WRITE (8,220) ALPHA
170   CONTINUE
      NACG=0
      CALL ADS001 (LGOTO,ISTRAT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,G,IDG,
     1NACG,IC,WK,IWK,SLOPF,ALPHA,ALPMAX)
      IF (LGOTO.EQ.0) GO TO 180
C     EVALUATE OBJECTIVE FUNCTION.
      IGOTO=2
      INFO=1
      RETURN
C
180   CONTINUE
C     ONE-DIMENSIONAL SEARCH IS COMPLETE.
C     RE-SET COUNTER IF ALPHA=0.
      IF (ALPHA.LE.ZRO) ICOUNT=0
      OBJW=OBJ
      IF (ISTRAT.EQ.0) OBJW=OBJ/SCFO
      IF (IPRNT2.EQ.2) WRITE (8,350) ITER,OBJW
      IF (IPRNT2.EQ.3) WRITE (8,330) OBJW
      IF (IPRNT2.GE.4) WRITE (8,360) ALPHA,OBJW
      IF (IPRNT2.LT.2) GO TO 190
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
      IF (IPRNT2.LT.3) GO TO 190
      ICALC=4
      IF (NCON.NE.0) CALL ADS402 (ICALC,G,NCON,SCFG)
190   CONTINUE
C     ------------------------------------------------------------------
C     CHECK CONVERGENCE.
C     ------------------------------------------------------------------
      CALL ADS211 (OBJ,OBJ1,DELOBJ,DABOBJ,DEL1,DAB1,IDEL,IDAB)
      IF (ITER.GE.ITMAX) GO TO 200
      IF (IDEL.LT.ITRM.AND.IDAB.LT.ITRM) GO TO 30
200   CONTINUE
C     ------------------------------------------------------------------
C     OPTIMIZATION IS COMPLETE.
C     ------------------------------------------------------------------
      IF (IPRNT2.EQ.0) GO TO 210
      WRITE (8,370)
      OBJW=OBJ
      IF (ISTRAT.EQ.0) OBJW=OBJ/SCFO
      WRITE (8,330) OBJW
      ICALC=1
      CALL ADS402 (ICALC,X,NDV,SCFX)
      ICALC=4
      IF (NCON.NE.0) CALL ADS402 (ICALC,G,NCON,SCFG)
      WRITE (8,230)
      IF (ITER.GE.ITMAX) WRITE (8,240)
      IF (IDEL.GE.ITRM) WRITE (8,250) ITRM
      IF (IDAB.GE.ITRM) WRITE (8,260) ITRM
      IF (IDIVCT.GE.2.OR.IISID.EQ.1) WRITE (8,270)
      IF (ALPMAX.LE.ZRO) WRITE (8,270)
210   CONTINUE
      IGOTO=0
      RETURN
C     ------------------------------------------------------------------
C     FORMATS
C     ------------------------------------------------------------------
220   FORMAT (/,5X,'PROPOSED ALPHA =',1PE12.5)
230   FORMAT (/,5X,'TERMINATION CRITERIA')
240   FORMAT (/,5X,'NUMBER OF ITERATIONS = ITMAX')
250   FORMAT (/,5X,'RELATIVE CONVERGENCE CRITERION WAS MET FOR',I3,
     1' CONSECUTIVE ITERATIONS')
260   FORMAT (/,5X,'ABSOLUTE CONVERGENCE CRITERION WAS MET FOR',I3,
     1' CONSECUTIVE ITERATIONS')
270   FORMAT (/,5X,'KUHN-TUCKER CONDITIONS ARE SATISFIED')
280   FORMAT ('1')
290   FORMAT (//,5X,75('-'),/,20X,
     1'IOPT = 2; VARIABLE METRIC METHOD -- DFP ---',/,5X,75('-'))
300   FORMAT (//,5X,75('-'),/,20X,
     1'IOPT = 3; VARIABLE METRIC METHOD -- BFGS ---',/,5X,75('-'))
310   FORMAT (//,5X,75('-'),/,25X,' ICNDIR = 1; STEEPEST DESCENT METHOD'
     1,/,5X,75('-'))
320   FORMAT (//,5X,'INITIAL DESIGN',//,5X,'OBJ =',1PE12.5)
330   FORMAT (/,5X,'OBJECTIVE =',1PE12.5)
340   FORMAT (//,5X,'-- BEGIN ITERATION',I3)
350   FORMAT (//,5X,'-- ITERATION',I5,3X,'OBJ =',1PE12.5)
360   FORMAT (/,5X,'CALCULATED ALPHA =',1PE12.5,//,5X,'OBJECTIVE =',
     11PE12.5)
370   FORMAT (////,5X,'FINAL OPTIMIZATION RESULTS')
      END
C
C
C
C=DECK      ADS236
C --- SUBROUTINE ADS236 (NDV,ICONT,DF,P,Y,H,DF2,S,S2,SCAL,ZRO,ISIDC)
C     DIMENSION DF(NDV),P(NDV),Y(NDV),H(NDV*(NDV+1)/2),S(NDV),ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE FOR VARIABLE METRIC METHODS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                 OCT. 1982
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C     NDV - NUMBER OF DESIGN VARIABLES.
C     ICONT - METHOD CONTROL. ICONT=1;DFP , ICONT=2;BFGS , ICONT=3;FR ,
C         ICONT=0;STEEPEST DESCENT.
C     DF - GRADIENT OF THE OBJECTIVE FUNCTION. MINIMUM DIMENSION IS NDV.
C     P - DIFFERENCE OF X AND XOLD. MINIMUM DIMENSION IS NDV.
C     Y - DIFFERENCE OF DF AND DFOLD. MINIMUM DIMENSION IS NDV.
C     H - THE FORMER INVERSE HESSIAN MATRIX APPROXIMATED. NDV * NDV
C         MATRIX, UPPER TRIANGLE ONLY, STORED COLUMN BY COLUMN.
C     DF2 - DF**2 FROM THE PREVIOUS OPTIMIZATION ITERATION.
C     S - SEARCH DIRECTION FROM THE PREVIOUS OPTIMIZATION ITERATION.
C     SCAL - SCALING FACTOR FROM THE PREVIOUS OPTIMIZATION ITERATION.
C     ISIDC - =0 ; DESIGN VARIABLE IS NOT SIDE LIMIT.
C             =1 ; DESIGN VARIABLE IS UPPER SIDE LIMIT.
C            =-1 ; DESIGN VARIABLE IS LOWER SIDE LIMIT.
C --- OUTPUT
C     S - NEW SEARCH DIRECTION.
C     H - NEW APPROXIMATION TO INVERSE HESSIAN MATRIX.
C     S2 - S**2, SQUARE OF MAGNITUDE OF S.
C     SCAL - SCALING FACTOR FOR S.
C     DF2 - NEW DF2.
C
      SUBROUTINE ADS236 (NDV,ICONT,DF,P,Y,H,DF2,S,S2,SCAL,ZRO,ISIDC)
      DIMENSION DF(*),P(*),Y(*),H(*),S(*),ISIDC(*)
      IF (ICONT.EQ.0) GO TO 10
      IF (ICONT.EQ.3) GO TO 60
      CALL ADS504 (NDV,H,Y,S)
      CALL ADS501 (NDV,P,Y,SIGMA)
      CALL ADS501 (NDV,Y,S,TAU)
      SIGMB=1./SIGMA
      TBU=1./TAU
      IF (ICONT.EQ.1) GO TO 20
      IF (ICONT.EQ.2) GO TO 40
10    CONTINUE
C     ------------------------------------------------------------------
C     STEEPEST DESCENT FORMULATION.
C     ------------------------------------------------------------------
      CALL ADS506 (NDV,H)
      CALL ADS504 (NDV,H,DF,S)
      GO TO 90
20    CONTINUE
C     ------------------------------------------------------------------
C     D.F.P. FORMULATION.
C     ------------------------------------------------------------------
      NA=0
      DO 30 J=1,NDV
      DO 30 I=1,J
      NA=NA+1
      H(NA)=H(NA)+SIGMB*P(I)*P(J)-TBU*S(I)*S(J)
30    CONTINUE
      CALL ADS504 (NDV,H,DF,S)
      GO TO 90
40    CONTINUE
C     ------------------------------------------------------------------
C     B.F.G.S. FORMULATION.
C     ------------------------------------------------------------------
      BB=(1.+TAU*SIGMB)*SIGMB
      NA=0
      DO 50 J=1,NDV
      DO 50 I=1,J
      NA=NA+1
50    H(NA)=H(NA)+BB*P(I)*P(J)-SIGMB*(S(I)*P(J)+S(J)*P(I))
      CALL ADS504 (NDV,H,DF,S)
      GO TO 90
60    CONTINUE
C     ------------------------------------------------------------------
C     FLETCHER-REEVES FORMULATION.
C     ------------------------------------------------------------------
      DFDF=0.
      DO 70 I=1,NDV
      DFD=DF(I)*DF(I)
      IF (ISIDC(I).GE.1.AND.DF(I).GE.0.) DFD=0.
      IF (ISIDC(I).LE.-1.AND.DF(I).LE.0.) DFD=0.
70    DFDF=DFDF+DFD
C     FLETCHER-REEVES MULTIPLIER.
      BETA=SCAL*DFDF/DF2
C     UPDATE DF2.
      DF2=DFDF
      IF (DF2.LE.ZRO) RETURN
C     UPDATE S.
      DO 80 I=1,NDV
      S(I)=DF(I)-BETA*S(I)
80    CONTINUE
90    CONTINUE
C     ------------------------------------------------------------------
C     CALCULATION OF DIRECTION ; S.
C     ------------------------------------------------------------------
C     CALCULATE S**2 AND MAX ABS(S(I))
      S2=0.
      SCAL=ZRO
      DO 100 I=1,NDV
      S(I)=-S(I)
      IF (ISIDC(I).EQ.-1.AND.S(I).LT.0.) S(I)=0.
      IF (ISIDC(I).EQ.1.AND.S(I).GT.0.) S(I)=0.
      IF (ISIDC(I).EQ.2) S(I)=0.
      SI=ABS(S(I))
      S2=S2+SI*SI
      IF (SI.GT.SCAL) SCAL=SI
100   CONTINUE
      IF (ICONT.NE.0) GO TO 120
      DF2=0.
      DO 110 I=1,NDV
110   DF2=DF2+S(I)*S(I)
120   CONTINUE
C     ------------------------------------------------------------------
C     NORMALIZATION.
C     ------------------------------------------------------------------
      SD=1./SCAL
      DO 130 I=1,NDV
130   S(I)=SD*S(I)
      S2=S2*SD*SD
      RETURN
      END
C
C
C
C=DECK      ADS237
C     SUBROUTINE ADS237 (ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,
C    *G,PENLT,ZRO,PENALT)
C ---------------------------------------------------------------------
C     ROUTINE TO CREATE PENALTY FOR EQUALITY CONSTRAINTS OR ADD PENALTY
C     TO OBJECTIVE.  USED IN FEASIBLE DIRECTIONS METHODS.
C ---------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              MAY 1985
C     UCSB
C
C --- INPUT
C     ICALC - CALCULATION CONTROL
C         1 - CREATE PENALTY MULTIPLIER FOR EACH EQUALITY CONSTRAINT.
C         2 - ADD PENALTY TO OBJ AND MULTIPLY G BY -1 IF NEEDED.
C         3 - MULTIPLY GRADIENT OF CONSTRIANT BY -1 IF NEEDED.
C             MODIFY DF TO INCLUDE PENALTY.
C
      SUBROUTINE ADS237 (ICALC,NDV,PMLT,DF,A,NRA,IC,NGT,IDG,G,
     *PENLT,ZRO,PENALT)
      DIMENSION DF(*),A(NRA,*),IC(*),IDG(*),G(*),PENLT(*)
      IF(ICALC.GT.1) GO TO 30
C --------------------------------------------------------------------
C     1: CREATE PENALTY MULTIPLIERS.
C --------------------------------------------------------------------
      DO 10 J=1,NGT
      K=IC(J)
      IF(IDG(K).GE.0) GO TO 10
C     THIS IS AN EQUALITY CONSTRIANT.
C     NORM OF DH.
      N1=1
      CALL ADS501 (NDV,A(N1,J),A(N1,J),H2)
      HNORM=SQRT(H2)
C     NORM OF DF.
      CALL ADS501 (NDV,DF,DF,DF2)
      DFNORM=SQRT(DF2)
C     DH DOT DF.
      CALL ADS501 (NDV,A(N1,J),DF,HDF)
      ZK=1.
      IF(ABS(HDF).GT.ZRO) ZK=-HDF/ABS(HDF)
      PENLT(K)=PMLT*DFNORM*ZK/HNORM
      IF(ABS(PENLT(K)).LT.ZRO) PENLT(K)=ZRO
10    CONTINUE
      RETURN
30    IF(ICALC.EQ.3) GO TO 60
C --------------------------------------------------------------------
C     2 OR 4: CREATE PENALTY AND MULT. G BY -1 IF NEEDED.
C --------------------------------------------------------------------
      PENALT=0.
      DO 40 J=1,NGT
      K=IC(J)
      IF(IDG(K).GE.0) GO TO 40
C     THIS IS AN EQUALITY CONSTRIANT.
      AMULT=PENLT(K)
      GK=G(K)
      IF(AMULT.LT.0.) G(K)=-GK
      IF(ICALC.EQ.4.AND.AMULT.LT.0.) GK=-GK
      PENALT=PENALT-AMULT*GK
40    CONTINUE
      RETURN
C --------------------------------------------------------------------
C     3: MULTIPLY DH BY -1 IF NEEDED.  MODIFY DF TO INCLUDE PENALTY.
C --------------------------------------------------------------------
60    CONTINUE
      DO 70 J=1,NGT
      K=IC(J)
      IF(IDG(K).GE.0) GO TO 70
C     EQUALITY CONSTRAINT.
C     MODIFY DF.
      FCT=PENLT(K)
      DO 62 I=1,NDV
62    DF(I)=DF(I)-FCT*A(I,J)
      IF(FCT.GT.0.) GO TO 70
C     MULTIPLY DH BY -1.
      DO 65 I=1,NDV
65    A(I,J)=-A(I,J)
70    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS301
      SUBROUTINE ADS301 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,
     1G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,XT
     2MP,CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,SCFX,ALAMDA,PPARAM,SCFO
     3,ISFLAG,IFCALL,IGCALL,OBJZ,OBJZ1,PENALT,IDAB,IDEL,INFO2C,JTER,ITMP
     4,ISIDC,SCFG)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),XTMP(*),SCFX(*),ALAMDA(*),PPARAM(*),ITMP(*),ISIDC(*),
     2SCFG(*)
C
      RETURN
      END
C
C
C
C=DECK      ADS302
      SUBROUTINE ADS302 (ISTRAT,NCON,G,IDG,EPSPEN,RP,PENALT,ALAMDA,PPARA
     1M,NGT,IC)
      DIMENSION G(*),IDG(*),ALAMDA(*),PPARAM(*),IC(*)
      RETURN
      END
C
C
C
C=DECK      ADS303
      SUBROUTINE ADS303 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,
     1G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,XT
     2MP,CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RP
     3MULT,SCFX,ALAMDA,PPARAM,SCFO,ISFLAG,IFCALL,IGCALL,OBJZ,OBJZ1,PENAL
     4T,IDAB,IDEL,INFO2C,JTER,ITMP,ISIDC,SCFG)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),XTMP(*),SCFX(*),ALAMDA(*),PPARAM(*),ITMP(*),ISIDC(*),
     2SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS304
      SUBROUTINE ADS304 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,
     1G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,XT
     2MP,CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RP
     3MULT,SCFX,ALAMDA,PPARAM,SCFO,ISFLAG,IFCALL,IGCALL,OBJZ,OBJZ1,PENAL
     4T,IDAB,IDEL,INFO2C,JTER,ITMP,ISIDC,SCFG)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),XTMP(*),SCFX(*),ALAMDA(*),PPARAM(*),ITMP(*),ISIDC(*),
     2SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS305
      SUBROUTINE ADS305 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,
     1G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,XT
     2MP,CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RP
     3MULT,SCFX,ALAMDA,PPARAM,SCFO,ISFLAG,IFCALL,IGCALL,OBJZ,OBJZ1,PENAL
     4T,IDAB,IDEL,INFO2C,JTER,ITMP,ISIDC,SCFG)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),XTMP(*),SCFX(*),ALAMDA(*),PPARAM(*),ITMP(*),ISIDC(*),
     2SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS306
      SUBROUTINE ADS306 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,X,SVLB,SVUB,
     1G,IDG,NGT,IC,DF,A,NRA,NCOLA,WK,IWK,IPRNT3,ITRMST,JTMAX,RP,RMULT,XT
     2MP,CT,CTL,CTMIN,CTLMIN,DELSTR,DABSTR,RPMAX,RPPMIN,EPSPEN,RPPRIM,RP
     3MULT,SCFX,ALAMDZ,ALAMDA,PPARAM,SCFO,ISFLAG,IFCALL,IGCALL,CK,OBJZ,O
     4BJZ1,PENALT,IDAB,IDEL,INFO2C,JTER,ITMP,ISIDC,SCFG)
      DIMENSION X(*),SVLB(*),SVUB(*),G(*),IDG(*),IC(*),DF(*),A(NRA,*),WK
     1(*),IWK(*),XTMP(*),SCFX(*),ALAMDA(*),PPARAM(*),ITMP(*),ISIDC(*),
     2SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS307
      SUBROUTINE ADS307 (NCON,BETA,CK,G,PPARAM,ALAMDA,IDG,RMULT,RPMAX)
      DIMENSION G(*),ALAMDA(*),PPARAM(*),IDG(*)
      RETURN
      END
C
C
C
C=DECK      ADS308
      SUBROUTINE ADS308 (NCON,IDG,RPPRIM,RP,PPARAM)
      DIMENSION IDG(*),PPARAM(*)
      RETURN
      END
C
C
C
C=DECK      ADS310
      SUBROUTINE ADS310 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,
     1A,NCOLA,NRA,B,X,IDG,WK,IWK,ICQP,SVLB,SVUB,S,RAG,GMULT,XOLD,P,Y,ZRO
     2,IPRNT3,PSAIZ,SCFX,XSUB,DELSTR,DABSTR,ITRMST,JTMAX,ISIDC,GGL,XTMP,
     3SCFO,ITMP,BTMP,NRB,THETA,CT,NAC,NVC,C,JONED,
     4DFSUB,VLBST,VUBST,IDAB,IDEL,ISLOP,JTER,LGOTO,NACT,NAVC,TEMP2,
     5SCFG)
      DIMENSION G(*),IC(*),DF(*),A(NRA,*),B(*),X(*),IDG(*),WK(*),IWK(*),
     1ICQP(*),SVLB(*),SVUB(*),S(*),RAG(*),GMULT(*),XOLD(*),P(*),Y(*),SCF
     2X(*),XSUB(*),ISIDC(*),GGL(*),XTMP(*),ITMP(*),BTMP(NRB,*),THETA(*),
     3C(*),DFSUB(*),VLBST(*),VUBST(*),TEMP2(10),SCFG(*)
C
      RETURN
      END
C
C
C
C=DECK      ADS320
      SUBROUTINE ADS320 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,
     1A,NCOLA,NRA,X,IDG,WK,IWK,ICLP,SVLB,SVUB,S,GS,VLBST,VUBST,ZRO,IPRNT
     23,RMVLMZ,SCFX,XTMP,SCLMIN,DELSTR,DABSTR,ITRMST,JTMAX,SCFO,ITMP,CT,
     3CTMIN,CTL,CTLMIN,NAC,NVC,XSUB,DFSUB,OBJR,OBJ1,RMVLMT,IDAB,IDEL,IMV
     4CM,JTER,ISIDC,SCFG)
      DIMENSION G(*),IC(*),DF(*),A(NRA,*),X(*),IDG(*),WK(*),IWK(*),ICLP(
     1*),SVLB(*),SVUB(*),S(*),GS(*),VLBST(*),VUBST(*),SCFX(*),XTMP(*),IT
     2MP(*),XSUB(*),DFSUB(*),ISIDC(*),SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS321
      SUBROUTINE ADS321 (IOPT,IONED,NDV,NGT,X,D,A,NRA,DF,GS,ICLP,G,DFL,D
     1LB,DUB,IDGLP,NCOLA,WK,IWK,RMVLMT)
      DIMENSION D(*),A(NRA,*),DF(*),GS(*),ICLP(*),G(*),DFL(*),IDGLP(*),W
     1K(*),IWK(*),DLB(*),DUB(*),X(*)
      RETURN
      END
C
C
C
C=DECK      ADS323
      SUBROUTINE ADS323 (IMVCH,RLOB,ABOB,DELSTR,DABSTR,OBJ,OBJR,ZRO,RMVL
     1MT)
      RETURN
      END
C
C
C
C=DECK      ADS325
      SUBROUTINE ADS325 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,
     1A,NCOLA,NRA,X,IDG,WK,IWK,ICLP,SVLB,SVUB,S,GS,VLBST,VUBST,ZRO,IPRNT
     23,SCFX,XTMP,SCLMIN,DELSTR,DABSTR,ITRMST,JTMAX,SCFO,ITMP,CT,
     3CTMIN,CTL,CTLMIN,NAC,NVC,XSUB,DFSUB,OBJR,OBJ1,IDAB,IDEL,
     4JTER,ISIDC,B,NRB,C,THETA,GGL,AA,NRAA,RMVLMZ,RMVLMT,SCFG)
      DIMENSION G(*),IC(*),DF(*),A(NRA,*),X(*),IDG(*),WK(*),IWK(*),ICLP(
     1*),SVLB(*),SVUB(*),S(*),GS(*),VLBST(*),VUBST(*),SCFX(*),XTMP(*),IT
     2MP(*),XSUB(*),DFSUB(*),ISIDC(*),B(NRB,*),C(*),THETA(*),GGL(*),
     3AA(NRAA,*),SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS326
      SUBROUTINE ADS326 (IOPT,IONED,NDV,NGT,X,D,A,NRA,DF,GS,ICLP,G,DFL,
     1IDGLP,NCOLA,WK,IWK,OBJ,VLBST,VUBST,AA,NRAA,ZRO)
      DIMENSION D(*),A(NRA,*),DF(*),GS(*),ICLP(*),G(*),DFL(*),IDGLP(*),W
     1K(*),IWK(*),X(*),VLBST(*),VUBST(*),AA(NRAA,*)
      RETURN
      END
C
C
C
C=DECK      ADS330
      SUBROUTINE ADS330 (IGOTO,INFO,IOPT,IONED,NDV,NCON,OBJ,G,NGT,IC,DF,
     1A,NCOLA,NRA,X,IDG,WK,IWK,ICCT,SVLB,SVUB,S,GS,SQRTG,VLBST,VUBST,ZRO
     2,IPRNT3,RMVLMZ,SCFX,XTMP,SCLMIN,DELSTR,DABSTR,ITRMST,JTMAX,BETA,SC
     3FO,ITMP,CT,CTMIN,CTL,CTLMIN,NAC,NVC,XOLD,XSUB,DFSUB,GMAX,OBJR,OBJ1
     4,IDAB,IDEL,IGMXC,IMVCH,JTER,ISIDC,SCFG)
      DIMENSION G(*),IC(*),DF(*),A(NRA,*),X(*),IDG(*),WK(*),IWK(*),ICCT(
     1*),SVLB(*),SVUB(*),S(*),GS(*),SQRTG(*),VLBST(*),VUBST(*),SCFX(*),X
     2TMP(*),ITMP(*),XOLD(*),XSUB(*),DFSUB(*),ISIDC(*),SCFG(*)
      RETURN
      END
C
C
C
C=DECK      ADS331
      SUBROUTINE ADS331 (IOPT,IONED,NDV,NDVR,NGT,NGT1,X,D,A,NRA,GS,ICCT,
     1G,DFCT,DLB,DUB,IDGCT,NCOLA,WK,IWK,RMVLMT,SQRTG)
      DIMENSION D(*),A(NRA,*),GS(*),ICCT(*),G(*),DFCT(*),IDGCT(*),WK(*),
     1IWK(*),DLB(*),DUB(*),SQRTG(*),X(*)
      RETURN
      END
C
C
C
C=DECK      ADS333
      SUBROUTINE ADS333 (NCON,IDG,G,GMAX)
      DIMENSION G(*),IDG(*)
      RETURN
      END
C
C
C
C=DECK      ADS371
      SUBROUTINE ADS371 (IOPT,IONED,NDV,NGT,X,D,A,NRA,B,DF,GZ,ICQP,GSUB,
     1DQ,DLB,DUB,IDGQP,NCOLA,WK,IWK,P)
      DIMENSION D(*),A(NRA,*),B(*),DF(*),GZ(*),ICQP(*),GSUB(*),DQ(*),IDG
     1QP(*),WK(*),IWK(*),DLB(*),DUB(*),P(*),X(*)
      RETURN
      END
C
C
C
C=DECK      ADS375
      SUBROUTINE ADS375 (NCON,IDG,G,GMULT,PENAL)
      DIMENSION IDG(*),G(*),GMULT(*)
      RETURN
      END
C
C
C
C=DECK      ADS376
      SUBROUTINE ADS376 (NDV,NGT,G,IDG,IC,ICQP,DF,GMULT,A,NRA,S)
      DIMENSION G(*),IDG(*),IC(*),ICQP(*),DF(*),GMULT(*),A(NRA,*),S(*)
      RETURN
      END
C
C
C
C=DECK      ADS377
C
      SUBROUTINE ADS377 (NDV,P,Y,B,S)
      DIMENSION P(*),Y(*),B(*),S(*)
      RETURN
      END
C
C
C
C=DECK      ADS378
      SUBROUTINE ADS378 (NDV,P,Y,B,S,ZRO,ILL)
      DIMENSION P(*),Y(*),B(*),S(*)
      RETURN
      END
C
C
C
C=DECK      ADS401
C --- SUBROUTINE ADS401 (A,N,SCAL,ISCAL)
C     DIMENSION A(N),SCAL(N),B(5)
C     ------------------------------------------------------------------
C --- ROUTINE TO PRINT ARRAY A ON OUTPUT FILE 6.
C     ------------------------------------------------------------------
C     BY L. E. MADSEN                                      APRIL, 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     A - VECTOR CONTAINING PARAMETERS TO PRINTED.  MINIMUM
C        DIMENSION IS N.
C     N - NUMBER OF PARAMETERS IN A WHICH ARE TO BE WRITTEN.
C     SCAL - SCAL FACTORS.
C     ISCAL - SCALING ID.  IF 0 DO NOT UNSCALE VECTOR A.
C
C --- OUTPUT - NONE TO CALLING PROGRAM.  ARGUMENTS REMAIN UNCHANGED.
C
      SUBROUTINE ADS401 (A,N,SCAL,ISCAL)
      DIMENSION A(*),SCAL(*),B(5)
C     WRITE THE ARRAY.
C     WRITE FIVE VALUES PER ROW.
      IMAX=(N-1)/5+1
C BEG JULY 1989
      IF (IMAX.EQ.0) IMAX = 1
C END JULY 1989
      I1=1
      DO 10 I=1,IMAX
      I2=I1+4
      I2=MIN0(I2,N)
      J1=1
      DO 20 J=I1,I2
      B(J1)=A(J)
      IF(ISCAL.GT.0) B(J1)=B(J1)/SCAL(J)
20    J1=J1+1
      NN=I2-I1+1
      CALL ADS405(I1,B,NN)
      I1=I1+5
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS402
C --- SUBROUTINE ADS402(ICALC,A,N,SCAL)
C     DIMENSION A(N),SCAL(N)
C     ------------------------------------------------------------------
C --- ROUTINE TO WRITE ARRAY A ON OUTPUT FILE 6.  ICALC DETERMINES
C     THE TITLE TO BE PRINTED.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                            JAN 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     ICALC - CALCULATION CONTROL.
C         1 - A IS THE X-VECTOR.
C         2 - A IS THE S-VECTOR.
C         3 - A IS THE DF-VECTOR.
C         4 - A IS THE G-VECTOR.
C         5 - A IS THE VLB-VECTOR.
C         6 - A IS THE VUB-VECTOR.
C         7 - A IS THE SCALING VECTOR, SCAL.
C         8 - A IS THE DX-VECTOR.
C         9 - A IS THE DG-VECTOR.
C        10 - A IS THE ALAMDA-VECTOR.
C        11 - A IS THE GSCALE-VECTOR.
C        12 - A IS THE DF-VECTOR OF TEMPORARY OBJECTIVE.
C        13 - A IS THE DG/D-ALPHA VECTOR.
C     A - VECTOR CONTAINING PARAMETERS TO BE WRITTEN ON UNIT 6.
C         MINIMUM DIMENSION IS N.
C     N - NUMBER OF PARAMETERS CONTAINED IN A WHICH ARE TO BE WRITTEN.
C     SCAL - SCALING VECTOR USED WITH X, VLB AND VUB PRINT. MINIMUM
C         DIMENSION IS N.
C
C --- OUTPUT - NONE TO CALLING PROGRAM. ICALC, A, AND N ARE UNCHANGED.
C
C --- EXTERNALS
C     ADS401, ADS510
C
      SUBROUTINE ADS402 (ICALC,A,N,SCAL)
      DIMENSION A(*),SCAL(*)
      JCALC=3
      ISCAL=0
      GO TO (10,20,30,40,50,60,70,80,90,110,120,100,115), ICALC
C     X-VECTOR
10    WRITE (8,160)
      ISCAL=1
      GO TO 130
C     S-VECTOR.
20    WRITE (8,170)
      GO TO 130
C     DF-VECTOR.
30    WRITE (8,190)
      GO TO 130
C     G-VECTOR.
40    WRITE (8,180)
      ISCAL=1
      GO TO 130
C     VLB-VECTOR.
50    WRITE (8,140)
      ISCAL=1
      GO TO 130
C     VUB-VECTOR.
60    WRITE (8,150)
      ISCAL=1
      GO TO 130
70    WRITE (8,200)
      GO TO 130
C     DX-VECTOR
80    WRITE (8,210)
      GO TO 130
C     DG-VECTOR
90    WRITE (8,220)
      GO TO 130
100   WRITE (8,250)
      GO TO 130
C     ALAMDA-VECTOR
110   WRITE (8,230)
      GO TO 130
C     GSCALE-VECTOR
120   WRITE (8,240)
      GO TO 130
115   WRITE (8,255)
130   CONTINUE
C     WRITE THE ARRAY.
      CALL ADS401 (A,N,SCAL,ISCAL)
      RETURN
140   FORMAT (/,5X,'LOWER BOUNDS ON THE DECISION VARIABLES (VLB-VECTOR)'
     1)
150   FORMAT (/,5X,'UPPER BOUNDS ON THE DECISION VARIABLES (VUB-VECTOR)'
     1)
160   FORMAT (/,5X,'DECISION VARIABLES (X-VECTOR)')
170   FORMAT (/,5X,'SEARCH DIRECTION (S-VECTOR)')
180   FORMAT (/,5X,'CONSTRAINT VALUES (G-VECTOR)')
190   FORMAT (/,5X,'GRADIENT OF THE OBJECTIVE FUNCTION (DF-VECTOR)')
200   FORMAT (/,5X,'SCALING VECTOR (SCAL)')
210   FORMAT (/,5X,'DIFFERENCE BETWEEN X AND XOLD')
220   FORMAT (/,5X,'DIFFERENCE BETWEEN DF AND DFOLD')
230   FORMAT (/,5X,'LAGRANGE MULTIPLIERS')
240   FORMAT (/,5X,'PENALTY FACTOR OF EACH CONSTRAINT')
250   FORMAT (/,5X,'GRADIENT OF THE TEMPORARY OBJECTIVE FUNCTION')
255   FORMAT (/,5X,'GRADIENTS OF CONSTRAINTS WITH RESPECT TO ALPHA',/,
     15X,'(IGNORE ZERO VALUES)')
      END
C
C
C
C=DECK      ADS403
C --- SUBROUTINE ADS403 (WK,NRWK,IWK,NRIWK)
C     DIMENSION WK(NRWK),IWK(NRIWK)
C     ------------------------------------------------------------------
C --- ROUTINE TO PRINT VALUES OF CONTROL PARAMETERS AND ARRAY STORAGE.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                                AUG. 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     WK - REAL WORK ARRAY.  SCALAR PARAMETERS STORED AT THE BEGINNING
C         OF WK.  DIMENSION IS NRWK.
C  ETC.
C
C --- OUTPUT.
C     NONE TO CALLING PROGRAM.  PRINTED OUTPUT TO FILE 6.
C
      SUBROUTINE ADS403 (WK,NRWK,IWK,NRIWK)
      DIMENSION WK(NRWK),IWK(NRIWK)
C     ------------------------------------------------------------------
C     SCALAR PARAMETERS.
C     ------------------------------------------------------------------
C     REAL PARAMETERS.
      WRITE (8,10)
      WRITE (8,20) (WK(I),WK(I+19),I=1,10)
      WRITE (8,30) (WK(I),WK(I+19),I=11,19)
C
C     INTEGER PARAMETERS.
      WRITE (8,40)
      WRITE (8,50) (IWK(I),IWK(I+3),IWK(I+5),I=1,2),IWK(3)
      WRITE (8,60) NRWK,IWK(150),NRIWK,IWK(170)
      RETURN
10    FORMAT ('1',//,5X,'SCALAR PROGRAM PARAMETERS',/,
     15X,'REAL PARAMETERS')
20    FORMAT (5X,'  1) ALAMDZ =',1PE13.5,4X,' 20) EXTRAP =',1PE13.5,/,
     15X,'  2) BETAMC =',1PE13.5,4X,' 21) FDCH   =',1PE13.5,/,5X,
     2'  3) CT     =',1PE13.5,4X,' 22) FDCHM  =',1PE13.5,/,5X,
     3'  4) CTL    =',1PE13.5,4X,' 23) GMULTZ =',1PE13.5,/,5X,
     4'  5) CTLMIN =',1PE13.5,4X,' 24) PSAIZ  =',1PE13.5,/,5X,
     5'  6) CTMIN  =',1PE13.5,4X,' 25) RMULT  =',1PE13.5,/,5X,
     6'  7) DABALP =',1PE13.5,4X,' 26) RMVLMZ =',1PE13.5,/,5X,
     7'  8) DABOBJ =',1PE13.5,4X,' 27) RP     =',1PE13.5,/,5X,
     8'  9) DABOBM =',1PE13.5,4X,' 28) RPMAX  =',1PE13.5,/,5X,
     9' 10) DABSTR =',1PE13.5,4X,' 29) RPMULT =',1PE13.5)
30    FORMAT (5X,' 11) DELALP =',1PE13.5,4X,' 30) RPPMIN =',1PE13.5,/,
     15X,' 12) DELOBJ =',1PE13.5,4X,' 31) RPPRIM =',1PE13.5,/,5X,
     2' 13) DELOBM =',1PE13.5,4X,' 32) SCFO   =',1PE13.5,/,5X,
     3' 14) DELSTR =',1PE13.5,4X,' 33) SCLMIN =',1PE13.5,/,5X,
     4' 15) DLOBJ1 =',1PE13.5,4X,' 34) STOL   =',1PE13.5,/,5X,
     5' 16) DLOBJ2 =',1PE13.5,4X,' 35) THETAZ =',1PE13.5,/,5X,
     6' 17) DX1    =',1PE13.5,4X,' 36) XMULT  =',1PE13.5,/,5X,
     7' 18) DX2    =',1PE13.5,4X,' 37) ZRO    =',1PE13.5,/,5X,
     8' 19) EPSPEN =',1PE13.5,4X,' 38) PMLT   =',1PE13.5)
40    FORMAT (/5X,18HINTEGER PARAMETERS)
50    FORMAT (5X,'  1) ICNDIR =',I5,4X,'  4) ITRMOP =',I5,4X,
     1'  6) JONED  =',I5/5X,'  2) ISCAL  =',I5,4X,'  5) ITRMST =',I5,4X,
     2'  7) JTMAX  =',I5/5X,'  3) ITMAX  =',I5)
60    FORMAT (/,5X,'ARRAY STORAGE REQUIREMENTS',/,12X,
     2'DIMENSIONED  REQUIRED',/,5X,'ARRAY     SIZE        SIZE',/,
     37X,'WK',4X,I6,6X,I6/6X,'IWK',4X,I6,6X,I6)
      END
C
C
C
C=DECK      ADS404
      SUBROUTINE ADS404 (NDV,H)
      DIMENSION H(*)
      RETURN
      END
C
C
C
C=DECK      ADS405
C     SUBROUTINE ADS405(I1,B,NN)
C     DIMENSION B(NN)
C     ------------------------------------------------------------------
C --- ROUTINE TO PRINT ONE LINE OF AN ARRAY.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                               SEPT. 1986
C     ENGINEERING DESIGN OPTIMIZATION, INC., SANTA BARBARA, CALIF.
C --- INPUT
C     I1 - STARTING NUMBER TO BE PRINTED.
C     B - ARRAY OF NUMBERS.
C     NN - LENGTH OF B.
C --- OUTPUT
C     PRINTED ONLY.
      SUBROUTINE ADS405(I1,B,NN)
      DIMENSION B(NN)
      WRITE(8,10)I1,B
10    FORMAT(I9,')',5(1PE14.5))
      RETURN
      END
C
C
C
C=DECK      ADS420
C --- SUBROUTINE ADS420 (NDV,NCON,X,VLB,VUB,G,OBJ,IFCALL,IGCALL,IGRAD)
C     DIMENSION X(NDV),VLB(NDV),VUB(NDV),G(NCON)
C     ------------------------------------------------------------------
C --- ROUTINE TO PRINT THE FINAL RESULTS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                MARCH 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      NDV    - NUMBER OF DESIGN VARIABLES.
C      NCON   - NUMBER OF CONSTRAINTS.
C      X      - FINAL DESIGN VARIABLE VALUES.
C      VLB    - LOWER BOUND ON DESIGN VARIABLE.
C      VUB    - UPPER BOUND ON DESIGN VARIABLE.
C      G      - FINAL CONSTRAINT VALUES.
C      OBJ    - FINAL OBJECTIVE VALUE.
C      IFCALL - NUMBER OF FUNCTION EVALUATION CALL.
C      IGCALL - NUMBER OF GRADIENT EVALUATION CALL.
C      IGRAD  - GRADIENT CALCULATION CONTROL.
C
      SUBROUTINE ADS420 (NDV,NCON,X,VLB,VUB,G,OBJ,IFCALL,IGCALL,IGRAD)
      DIMENSION X(*),VLB(*),VUB(*),G(*)
      WRITE (8,40)
      WRITE (8,50) OBJ
      WRITE (8,60)
      DO 10 I=1,NDV
10    WRITE (8,70) I,VLB(I),X(I),VUB(I)
      IF (NCON.EQ.0) GO TO 30
      N=(NCON-1)/5+1
      WRITE (8,80)
      DO 20 I=1,N
      I1=5*(I-1)+1
      I2=5*I
      IF (I2.GT.NCON) I2=NCON
20    WRITE (8,90) I1,(G(II),II=I1,I2)
30    CONTINUE
      WRITE (8,100) IFCALL
      IF (IGRAD.GT.0) WRITE (8,110) IGCALL
      RETURN
C     ------------------------------------------------------------------
C     FORMATS.
C     ------------------------------------------------------------------
40    FORMAT ('1',//,23X,22('-'),/,24X,'OPTIMIZATION RESULTS',/,23X,
     122('-'))
50    FORMAT (//,5X,'OBJECTIVE FUNCTION VALUE',1PE15.5)
60    FORMAT (//,5X,'DESIGN VARIABLES',//,18X,'LOWER',23X,'UPPER',/,5X,
     1'VARIABLE',5X,'BOUND',9X,'VALUE',9X,'BOUND')
70    FORMAT (5X,I5,2X,3(1PE14.5))
80    FORMAT (//,5X,'DESIGN CONSTRAINTS',/)
90    FORMAT (5X,I5,')',5(1PE12.4))
100   FORMAT (/,5X,'FUNCTION EVALUATIONS =',I6)
110   FORMAT (/,5X,'GRADIENT EVALUATIONS =',I6)
      END
C
C
C
C=DECK      ADS501
C --- SUBROUTINE ADS501(N,X,Y,PROD)
C     DIMENSION X(N),Y(N)
C     ------------------------------------------------------------------
C --- ROUTINE TO EVALUATE THE VECTOR PRODUCT OF X AND Y.
C     ------------------------------------------------------------------
C     BY G. N. VANDER PLAATS                            NOV. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N - NUMBER OF PARAMETERS IN X AND Y (DIMENSION OF ACTUAL
C         ARRAY STORED IN X AND Y)
C     X - FIRST INPUT VECTOR.  MINIMUM DIMENSION IS N.
C     Y - SECOND INPUT VECTOR.  MINIMUM DIMENSION IS N.
C
C --- OUTPUT
C     PROD - VECTOR PRODUCT, X TIMES Y.
C
      SUBROUTINE ADS501 (N,X,Y,PROD)
      DIMENSION X(*),Y(*)
      PROD=0.
      DO 10 I=1,N
10    PROD=PROD+X(I)*Y(I)
      RETURN
      END
C
C
C
C=DECK      ADS502
C --- SUBROUTINE ADS502(N,G,IDG,CTMIN,CTLMIN,GMCT,IG)
C     DIMENSION G(N),IDG(N)
C     ------------------------------------------------------------------
C --- ROUTINE TO FIND MAXIMUM CONSTRAINT TOLORANCE RELATIVE TO CTMIN
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                           NOV. 1986
C     ENGINEERING DESIGN OPTIMIZATION, INC., SANTA BARBARA, CA
C
C --- INPUT
C     N - NUMBER OF PARAMETERS CONTAINED IN ARRAY G AND IDG.
C     G - ARRAY OF CONSTRAINTS.  MINIMUM DIMENSION IS N.
C     IDG - CONSTRAINT TYPE IDENTIFIER.
C     CTMIN - NONLINEAR CONSTRAINT TOLORANCE.
C     CTLMIN - LINEAR CONSTRAINT TOLORANCE.
C
C --- OUTPUT
C     GMCT - VALUE OF MAXIMUM COMPONENT OF G MINUS CTMIN OR CTLMIN.
C     IG - LOCATION IN G OF MAXIMUM COMPONENT.
C
      SUBROUTINE ADS502 (N,G,IDG,CTMIN,CTLMIN,GMCT,IG)
      DIMENSION G(*),IDG(*)
      IG=1
      GMCT=G(1)-CTMIN
      IF(IABS(IDG(1)).EQ.2) GMCT=G(1)-CTLMIN
      IF (N.LE.1) RETURN
      DO 10 I=2,N
      GG=G(I)-CTMIN
      IF(IABS(IDG(I)).EQ.2) GG=G(I)-CTLMIN
      IF (GG.LT.GMCT) GO TO 10
      GMCT=GG
      IG=I
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS503
C --- SUBROUTINE ADS503(N,X,Y)
C     DIMENSION X(N),Y(N)
C     ------------------------------------------------------------------
C --- ROUTINE TO EQUATE VECTOR Y TO VECTOR X
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                        DEC. 1980
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N - NUMBER OF PARAMETERS CONTAINED IN X.
C     X - VECTOR OF PARAMETERS.  MINIMUM DIMENSION IS N.
C
C --- OUTPUT
C     Y - VECTOR OF PARAMETERS, Y=X.  MINIMUM DIMENSION IS N.
C
      SUBROUTINE ADS503 (N,X,Y)
      DIMENSION X(*),Y(*)
      DO 10 I=1,N
10    Y(I)=X(I)
      RETURN
      END
C
C
C
C=DECK      ADS504
C --- SUBROUTINE ADS504 (N,H,Y,S)
C     DIMENSION H(1),Y(1),S(1)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE H(N,N)*Y(N)=S(N)
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO.                 NIV. 1982
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C     H IS STORED AS .....
C        I 1 2 4 7...I
C        I X 3 5 8...I
C        I X X 6 9...I
C        I X X X10...I = ( 1 2 3 4 5 6 7 8 9 10 .......)
C        I . . . ....I
C        I . . . ....I
C        I . . . ....I
C
      SUBROUTINE ADS504 (N,H,Y,S)
      DIMENSION H(*),Y(*),S(*)
      DO 10 I=1,N
      S(I)=0.
10    CONTINUE
      NA=0
      DO 30 I=1,N
      DO 20 J=1,I
      NA=NA+1
      S(I)=S(I)+H(NA)*Y(J)
      IF (J.EQ.I) GO TO 30
      S(J)=S(J)+H(NA)*Y(I)
20    CONTINUE
30    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS506
C --- SUBROUTINE ADS506(N,A)
C     DIMENSION A(N*(N+1)/2)
C     ------------------------------------------------------------------
C --- ROUTINE TO INITIALIZE A SYMMETRIC MATRIX OF DIMENSION N TO THE
C     IDENTITY MATRIX, WHERE THE MATRIX IS STORED COLUMN AFTER COLUMN
C     IN ARRAY A.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                           JAN 1981
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N - DIMENSION OF ARRAY STORED IN A.
C
C --- OUTPUT
C     A - IDENTITY MATRIX, I.
C
      SUBROUTINE ADS506 (N,A)
      DIMENSION A(*)
C     INITIALIZE TO ZERO.
      NN=N*(N+1)/2
      DO 10 I=1,NN
10    A(I)=0.
C     SET DIAGONAL TO 1.
      II=1
      DO 20 I=1,N
      A(II)=1.
20    II=II+I+1
      RETURN
      END
C
C
C
C=DECK      ADS507
C --- SUBROUTINE ADS507 (N,A,ZRO,SCAL,IER)
C     DIMENSION A(N)
C     ------------------------------------------------------------------
C --- ROUTINE TO NORMALIZE VECTOR A BY DIVIDING BY MAX ABS(A(I)).
C     BY G. N. VANDERPLAATS                           JAN 1981
C     ------------------------------------------------------------------
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C
C --- INPUT
C     N - NUMBER OF PARAMETERS CONTAINED IN A.
C     A - VECTOR OF PARAMETERS.  MINIMUM DIMENSION IS N.
C     ZRO - TOLERANCE.  IF ABS(A(I)).LE.ZRO, IT IS ASSUMED TO BE ZERO.
C         THIS IS A MEASURE OF MACHINE ACCURACY.
C
C --- OUTPUT
C     A - NORMALIZED ARRAY.
C     SCAL - NORMALIZATION FACTOR.
C     IER - ERROR CODE.  IF IER.GT.0, ALL COMPONENTS OF A ARE LESS
C         IN MAGNITUDE THAN ZRO.
C
      SUBROUTINE ADS507 (N,A,ZRO,SCAL,IER)
      DIMENSION A(*)
C     BEGIN NORMALIZATION.
      AMAX=0.
      DO 10 I=1,N
      AA=ABS(A(I))
      IF (AA.GT.AMAX) AMAX=AA
10    CONTINUE
C     CHECK FOR ZERO ARRAY.
      IER=1
      SCAL=ZRO
      IF (AMAX.LE.ZRO) RETURN
C     A HAS NON-ZERO COMPONENTS.
      IER=0
C     SCALE FACTOR.
      SCAL=AMAX
C     PERFORM SCALING.
C     GUARD AGAINST ZERO SCALE FACTOR (ONLY HAPPENS IF ZRO=0).
      SS=1./SCAL
      DO 20 I=1,N
20    A(I)=SS*A(I)
      RETURN
      END
C
C
C
C=DECK      ADS508
C --- SUBROUTINE ADS508 (NDV,NMG,GMULT,A,NRA,DF)
C     DIMENSION A(NRA,NCOLA),DF(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO CALCULATE THE GRADIENTS OF PSEUDO-OBJECTIVE FOR SUMT.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                JULY. 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      NDV   - NUMBER OF DESIGN VARIABLES.
C      NMG   - NUMBER OF COLUMN IN ARRAY A.
C      GMULT - FACTOR OF GRADIENT OF SPECIFIED CONSTRAINT.
C      A     - ARRAY CONTAINING GRADIENTS OF ACTIVE CONSTRAINTS.
C     NRA    - NUMBER OF ROWS IN ARRAY A.
C     DF     - GRADIENT OF PRIMAL OBJECTIVE.
C --- OUTPUT
C      DF    - GRADIENT OF PSEUDO-OBJECTIVE.
C
      SUBROUTINE ADS508 (NDV,NMG,GMULT,A,NRA,DF)
      DIMENSION A(NRA,*),DF(*)
C
      DO 10 I=1,NDV
      DF(I)=DF(I)+GMULT*A(I,NMG)
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS509
C --- SUBROUTINE ADS509 (NDV,X,SVLB,SVUB,ZRO,ISIDC,NACS)
C     DIMENSION X(NDV),SVLB(NDV),SVUB(NDV),ISIDC(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO IDENTIFY ACTIVE SIDE CONSTRAINTS.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS AND H. SUGIMOTO                 JULY 1983
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C      NDV  - NUMBER OF DESIGN VARIABLES.
C      X    - DESIGN VARIABLES.
C      SVLB,SVUB - LOWER AND UPPER BOUNDS ON DESIGN VARIABLE.
C      ZRO  - NUMERICAL ZERO VALUE.
C --- OUTPUT
C      ISIDC - = 0;SIDE CONSTRAINTS ARE NOT ACTIVE.
C              =-1;LOWER SIDE CONSTRAINT IS ACTIVE.
C              = 1;UPPER SIDE CONSTRAINT IS ACTIVE.
C              = 2;BOTH SIDE CONSTRAINTS ARE ACTIVE.
C      NACS  - NUMBER OF ACTIVE SIDE CONSTRAINTS.
C
      SUBROUTINE ADS509 (NDV,X,SVLB,SVUB,ZRO,ISIDC,NACS)
      DIMENSION X(*),SVLB(*),SVUB(*),ISIDC(*)
C
      NACS=0
      DO 10 I=1,NDV
      DXL=ABS(X(I)-SVLB(I))
      DXU=ABS(SVUB(I)-X(I))
      ISIDC(I)=0
      IF (DXL.LE.ZRO) ISIDC(I)=-1
      IF (DXU.LE.ZRO) ISIDC(I)=1
      IF (DXL.LE.ZRO.AND.DXU.LE.ZRO) ISIDC(I)=2
      IF (ISIDC(I).EQ.0) GO TO 10
      NACS=NACS+1
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ADS510
C --- SUBROUTINE ADS510 (ICALC,NDV,X,SX,SCAL,SCLMIN)
C     DIMENSION X(NDV),SX(NDV),SCAL(NDV)
C     ------------------------------------------------------------------
C --- ROUTINE TO SET UP SCALING VECTOR, SCAL, SCALE THE X-VECTOR, OR
C     UN-SCALE THE X-VECTOR.
C     ------------------------------------------------------------------
C     BY G. N. VANDERPLAATS                              MARCH, 1982.
C     NAVAL POSTGRADUATE SCHOOL, MONTEREY, CALIF.
C --- INPUT
C     ICALC - CALCULATION CONTROL.
C         0 - SET SCALING VECTOR TO UNITY (NO SCALING).
C         1 - DEFINE SCALING VECTOR.
C         2 - SCALE THE X-VECTOR.
C         3 - UN-SCALE THE X-VECTOR.
C     NDV - NUMBER OF DESIGN VARIABLES.
C     X - VECTOR OF DESIGN VARIABLES, UNSCALED.
C         MINIMUM DIMENSION IS NDV.
C     SX - VECTOR OF SCALED DESIGN VARIABLES.  MINIMUM DIMENSION IS NDV.
C     SCAL - SCALING VECTOR.  SX(I)=SCAL(I)*X(I), I=1,NDV.
C         MINIMUM DIMENSION IS NDV.
C     SCLMIN - MINIMUM VALUE FOR SCALING PARAMETER.  USED WHEN X(I) IS
C         NEAR ZERO.
C --- OUTPUT
C     X, SX OR SCAL, DEPENDING ON THE VALUE OF ICALC.
C
      SUBROUTINE ADS510 (ICALC,NDV,X,SX,SCAL,SCLMIN)
      DIMENSION X(*),SX(*),SCAL(*)
C
      ICALC1=ICALC+1
      GO TO (10,30,50,70), ICALC1
10    CONTINUE
C     SET SCALING VECTOR TO UNITY.
      DO 20 I=1,NDV
20    SCAL(I)=1.
      RETURN
30    CONTINUE
C     DEFINE THE SCALING VECTOR, SCAL, AS THE MAGNITUDE OF THE
C     COMPONENTS OF THE X-VECTOR OR SCLMIN, WHICHEVER IS LARGER.
      DO 40 I=1,NDV
      XI=ABS(X(I))
      IF (XI.LT.SCLMIN) XI=SCLMIN
40    SCAL(I)=1./XI
      RETURN
50    CONTINUE
C     SCALE THE X-VECTOR.
      DO 60 I=1,NDV
60    SX(I)=X(I)*SCAL(I)
      RETURN
70    CONTINUE
C     UN-SCALE THE X-VECTOR.
      DO 80 I=1,NDV
80    X(I)=SX(I)/SCAL(I)
      RETURN
      END
