C=DECK      STAGSUNIT
C  PURPOSE IS TO SET UP A STAGS FINITE ELEMENT MODEL FOR ENTIRE PANEL.
C
      PROGRAM STAGUN
C BEG UNIX
#if hp700
$hp9000_800 intrinsics
#endif
C END UNIX
C
      DOUBLE PRECISION PIRAD,THETA,DTHETA,THETAW,EPSTHT,PI
      DOUBLE PRECISION CTHETA,STHETA,THETA1,THETA2,DTHET2,DTHET0
C BEG OCT 2004
C The OCT 2004 mods are to incorporate substringers and subrings in the
C STAGS model. Here is a limited glossary. (Many of the substringer and
C subring names end in "SB" or "SUB":
C     LNKSB1    = 1 means use substringer fasteners. 0 means no fasteners.
C     LNKSB2    = 1 means use subring fasteners.     0 means no fasteners.
C     ISTRSB    = substringer model: 1=smeared, 2=beam, 3=shell unit
C     IRNGSB    = subring     model, as above
C     NSTSUB    = number of substringers between major stringers
C     NRGSUB    = number of subrings between major rings
C     NSTRSB    = number of substringers in STAGS model (derived)
C     NRNGSB    = number of subrings     in STAGS model (derived)
C     NSTSBX    = number of substringers used in unit counting.
C     NRGSBX    = number of subrings     used in unit counting.
C     NELSSB    = number of finite elements between substringers
C     NELRSB    = number of finite elements between subrings
C     NELSTR    = number of finite elements between major stringers
C     NELRNG    = number of finite elements between major rings
C     NSURFX(1) = skin surface to which substringers are attached:
C                 0 = layer 1 surface; 1 = layer n surface
C     NSURFX(2) = skin surface to which subrings are attached:
C                 0 = layer 1 surface; 1 = layer n surface
C     GAPSB1    = gap between substringer root and skin reference surface.
C     GAPSB2    = gap between subring     root and skin reference surface.
C     DX(i)     = axial stations of rows in STAGS model
C     THETSB(i) = angles in degrees to substringers
C     YSTSB(i)  = y-distances to substringers for flat panel
C     ICSTSB(i) = column numbers of substringers
C     IRRGSB(i) = row numbers of subrings
C     BSUBXM(i) = i=1: possibly modified spacing of substringers
C                 i=2: possibly modified spacing of subrings
C     XRINGX(i) = axial stations of major rings
C     YSTRGX(i) = circumferential stations of major stringers
C     ITABSB(i) = i=1 cross section pointers for substringers as beams
C                 i=2 cross section pointers for subrings     as beams
C     IWALSB(i) = i=1 wall properties for substringers as shell units
C                 i=2 wall properties for subrings     as shell units
C     SPACST(i) = spacing of substringers in smeared model
C     SPACRG(i) = spacing of subrings     in smeared model
C     YSTRSB(i) = local y=coords (+ and - thickness/2) of substringers
C     ZSTRSB(i) = local z=coords (+ and - height/2)    of substringers
C     YRNGSB(i) = local y=coords (+ and - thickness/2) of subrings
C     ZRNGSB(i) = local z=coords (+ and - height/2)    of subrings
C     EZSTSB    = eccentricity of substringer relative to reference surf.
C     EZRGSB    = eccentricity of subrings    relative to reference surf.
C     XSUBX(i)  = axial stations of subrings
C     BSUBX,B2SUBX,HSUBX,WSUBX,W2SUBX=
C      i=1: substringer module cross section dimensions
C      i=2: subring     module cross section dimensions
C      NOTE: The substiffeners must be rectangular, so WSUBX and W2SUBX
C            are not used. To date, there is no discretized substiffener
C            module model in PANDA2. However, BSUBX (substiffener
C            spacings) are used in this program.
C     IMTSUB(i,j) = material types of substiffeners (i always equal 1):
C                   j = 1 means substringers; j = 2 means subrings.
C     TSUB,HSUB,THSUB,BSUB = thickness, height, angle (0 or 90 deg.), spacing
C                            of substiffeners. Of the three dimensions in
C                            the arrays, i,j,k, only i,1,1 are used, with
C                            i = 1 being the first set of substiffeners input
C                            in PANDA2's BEGIN processor, and i = 2 being the
C                            second set of substiffeners input in PANDA2.
C     CSKIN(6,6) = constitutive coefficients for panel skin
C     TSKINX(5)  = thicknesses of skin and major stringer parts without substringers
C     TXKINY(5)  = thickneeses of skin and major ring     parts without subrings
C     FNXSMR(2)  = axial resultant with substringers smeared: i=1 Load Set A
C                                                             i=2 Load Set B
C     FNYSMR(2)  = hoop resultant  with subrings     smeared: i=1 Load Set A
C                                                             i=2 Load Set B
C     FNXSUB(2)  = axial resultant in  substringers: i=1 Load Set A
C                                                    i=2 Load Set B
C     FNYSUB(2)  = hoop resultant  in  subrings:     i=1 Load Set A
C                                                    i=2 Load Set B
C     STLDSB(2)  = load   in substringer: i=1=Load Set A; i=2=Load Set B
C     STFMSB(2)  = moment in substringer: i=1=Load Set A; i=2=Load Set B
C     RGLDSB(2)  = load   in subring:     i=1=Load Set A; i=2=Load Set B
C     RGFMSB(2)  = moment in subring:     i=1=Load Set A; i=2=Load Set B
C     ICOLAL( )  = column numbers of all stringers (major and sub) to be linked
C                  to the cylindrical wall
C     IROWAL( )  = row numbers of all rings (major and sub) to be linked
C                  to the cylindrical wall
C
C BEG AUG 2006
C     NPSTRW(i) = number of nodal points along height of ith stringer web
C     NPRNGW(i) = number of nodal points along height of ith   ring   web
C     NPSTRF(i) = number of nodal points across width of ith stringer flange 
C     NPRNGF(i) = number of nodal points across width of ith   ring   flange
C     NPSTRB(i) = number of nodal points across width of ith stringer fayflange
C     NPRNGB(i) = number of nodal points across width of ith   ring   fayflange
C     NUMSTR(j) = jth number of a stringer with high nodal point density
C                 over its cross section
C     NUMRNG(j) = jth number of a  ring    with high nodal point density
C                 over its cross section
C     IEDGE = index for in-plane warping of the two edges normal to the plane
C             of the screen: IEDGE = 0 in-plane warping permitted
C                            IEDGE = 1 in-plane warping not permitted
C     IEDGE2= index for in-plane warping of the two edges parallel to the plane
C             of the screen: IEDGE2= 0 in-plane warping permitted
C                            IEDGE2= 1 in-plane warping not permitted
C     IBCX0XL=index for control of the distribution of axial displacement u
C             over the height of the webs of the stringers at axial stations
C             x = 0 and x = XSTAGS:
C             IBCX0XL = 0 means no constraint of u over the stringer web height
C             IBCX0XL = 1 means u = constant over the height of the stringer web
C
      DIMENSION NPSTRW(500),NPRNGW(500),NPSTRF(500),NPRNGF(500)
      DIMENSION NPSTRB(500),NPRNGB(500),NUMSTR(50),NUMRNG(50)
C END AUG 2006
C BEG DEC 2006
C     IPLAST = 0 for no plasticity; 1 for plasticity
C     The following are non-zero only if IPLAST = 1:
C     IPLST  = plasticity indicator for each material type
C     NLIP   = number of integration points thru wall thickness
C     IPLAS  = plasticity indicator for each shell unit; =1 if IPLAST=1
C     NESP   = number of specified points on the stress-strain curve.
C     SSCURV(i,j)=stress-strain curve: j=1=strain; j=2=stress
C     SSCUR2(i,j)=stress-strain curve for stiffeners along edges of panel.
C                 (same as SSCURV except stress coordinates are 1/2 of
C                  those in SSCURV.)
      DIMENSION SSCURV(20,2),SSCUR2(20,2)
C END DEC 2006
C BEG JAN 2007
C     NGCP = 0 for old material and wall fabrication method
C     NGCP = 1 for "GCP" material and wall fabrication method
C END JAN 2007
C
C BEG FEB 2005
      DIMENSION THETSB(500)
C END FEB 2005
C BEG MAR 2005
      DIMENSION YSTSB(500)
C END MAR 2005
C BEG DEC 2004
      DIMENSION ICSTSB(500),IRRGSB(500),BSUBXM(2),XRINGX(500)
C END DEC 2004
C BEG MAR 2006
      DIMENSION YSTRGX(500)
C END MAR 2006
      DIMENSION ITABSB(2),IWALSB(2),SPACST(20),SPACRG(20)
      DIMENSION YSTRSB(2),ZSTRSB(2),YRNGSB(2),ZRNGSB(2),XSUBX(500)
C BEG MAR 2005
      DIMENSION XSUBX1(500)
C END MAR 2005
C BEG MAR 2006
      DIMENSION YSUBY(500),YSUBY1(500)
C END MAR 2006
      COMMON/GEOM2S/BSUBX(2),B2SUBX(2),HSUBX(2),WSUBX(2),W2SUBX(2)
      COMMON/GEOM3S/ISTFSB(2),NLAYSB(4,2),NSEGSB(2),INTXSB(2)
      COMMON/GEOM4S/IMTSUB(4,2)
      COMMON/SUBSTX/TSUB(2,4,2),HSUB(2,4,2),THSUB(2,4,2),
     1              BSUB(2,4,2)
      COMMON/ISBSTF/KLAYER(4,2),NSURF(2,4,2),NB2(2,4,2),
     1              ISOSUB(2,4,2),ISOTYP(2,4,2),MATSUB(2,4,2)
      COMMON/CSKINX/CSKIN(6,6),TSKINX(5),TSKINY(5)
      DIMENSION FNXSMR(2),FNYSMR(2),FNXSUB(2),FNYSUB(2)
      DIMENSION FMXSUB(2),FMYSUB(2)
      DIMENSION STLDSB(2),STFMSB(2),RGLDSB(2),RGFMSB(2)
C BEG DEC 2004
      DIMENSION NSURFX(2),ICOLAL(500),IROWAL(500)
C END DEC 2004
C BEG APR 2006
C     LOGICAL ILOGST, ILOGRG, PEDG
      LOGICAL ILOGST, ILOGRG, PEDG, ILOGWAL
C END APR 2006
C END OCT 2004
      COMMON/INTRGX/INTRNG
      COMMON/GEOM1/AXIAL,CIRC,R
      COMMON/GEOM2/B(2),B2(2),H(2),W(2),W2(2)
      COMMON/GEOM3/ISTIF(2),NLAYER(4,2),NSEG(2),INTEXT(2)
      COMMON/GEOM6/IFAY(2),ITRTOT,IRESET,NLOADX,NSTEPX,WMAX,NCROSS,
     1       NOPLOT,KMAX,ILAYPL,XMXX,XMIN,YMXX,YMIN,N3DPLT,NOBJ,NSTRNS,
     1       NPLTST,NABSCI,IDIAG,ITRALL,IFAYT(2),IBEAM,IMISCL(5)
      COMMON/IZSTIX/IZSTIF(2)
      COMMON/LAYER/MATL(90),LTYPE(99,5,2),T(90),ANGLE(90)
      COMMON/THICK/TX(5),TY(5)
      COMMON/MATER1/E1(20),E2(20),G(20),FNU(20),DENS(20)
      COMMON/MATERT/ALPHA1(20),ALPHA2(20),CURETP(20),ICOCUR(2)
      COMMON/MATRAN/G13(20),G23(20)
      COMMON/LOADS/FNX,FNY,FNXY,RESULT(3,5,2)
      COMMON/LOADS2/FNX0,FNY0,FNXY0,RESFIX(3,5,2)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)   
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      COMMON/IDEFAU/IDEFLT,IDDATA,IINPUT,IITYPE
C BEG AUG 2006 (dimension of IPOINT increased from 95 to 195)
C BEG APR 2007 (increas dimension of IPOINT from 195 to 295 for use with bigbosor4)
      COMMON/BOSEGS/NSEGB5,IPOINT(295)
C END APR 2007
C END AUG 2006
      COMMON/SEGSR/NSEGR,M2R,I5R(95),I2GR,I2GGR   
      COMMON/GNNSTB/EIGGEN(1),EIGLOC,FNLOC,FBOUND,LENMOD
      COMMON/GENPRE/FBPRE,PRELEN,FMISC(28)
      COMMON/ALLCIJ/CX(6,6,5),CY(6,6,5),CS(6,6)
C BEG APR 2011
      COMMON/ORGCIJ/CXORIG(6,6,5),CYORIG(6,6,5),CSORIG(6,6)
C END APR 2011
      DIMENSION DX(500),IRUN(30),PLDS(50)
      DIMENSION XCALL(50),NCALL(50),WIMPL(30),ISTEP(30),IMODE(30)
      DIMENSION VELOC(30),IMSTEP(30),IMMODE(30),IMRUN(30)
C BEG FEB 2006
      DIMENSION YCALL(50),NCALLY(50),SEGLY(50),NSEGY(50),DY(500)
C END FEB 2006
C BEG OCT 2004
      DIMENSION JMAT(90,20),THIK(90,20),ANGL(90,20),NLAYRS(20)
      DIMENSION E1MAT(90,20),E2MAT(90,20),G12MAT(90,20)
      DIMENSION AL1MAT(90,20),AL2MAT(90,20),RHOMAT(90,20)
      DIMENSION G13MAT(90,20),G23MAT(90,20),FNUMAT(90,20)
C END OCT 2004
      DIMENSION IWALNO(4,2,2),ITABNO(4,2,2)
C BEG OCT 2004
      DIMENSION Y1(20),Y2(20),Z1(20),Z2(20),TORJ(20)
C END OCT 2004
      DIMENSION ECZSTR(3),ECYSTR(3),ECZRNG(3),ECYRNG(3)
      DIMENSION ECCSTR(3),ECCRNG(3),ICRSTR(3),ICRRNG(3)
C BEG NOV 2003
      DIMENSION FNXSTR(3,2),FMXSTR(3,2),FNXRNG(3,2),FMXRNG(3,2)
C END NOV 2003
      DIMENSION ZSTR(2,3),YSTR(2,3),ZRNG(2,3),YRNG(2,3)
C BEG OCT 2004
      DIMENSION E1TAB(20),E2TAB(20),G12TAB(20),FNUTAB(20)
      DIMENSION AL1TAB(20),AL2TAB(20),RHOAVE(20),RHOTAB(20)
C END OCT 2004
C BEG DEC 2004
      DIMENSION SEGLX(50),NSEGX(50),IROWRG(500),ICOLST(500)
C END DEC 2004
C BEG OCT 2004
C BEG DEC 2004
      DIMENSION IDATA(500),NDATA(500),NROWS(500),NCOLS(500)
C END DEC 2004
C BEG FEB 2005
      COMMON/CSORIG/CS0(6,6)
C END FEB 2005
      DIMENSION STLD(2),STEP(2),FACM(2)
      DIMENSION WRDWAL(10),WRDTOT(20),WRDTAB(20),WRDMAT(50)
C BEG NOV 2003
      DIMENSION FNXI(2),FNYI(2),FNXYI(2),FNXSKN(2),FNYSKN(2)
      DIMENSION FMXSKN(2),FMYSKN(2),FMTSTR(2),FMTRNG(2)
      DIMENSION STRLOD(2),RNGLOD(2),FMXFAY(2),FMYFAY(2)
C END NOV 2003
      CHARACTER*8 WRDWAL
      CHARACTER*57 WRDTOT,WRDTAB,WRDMAT
C BEG VMS
C     CHARACTER*12 CASE
C     CHARACTER*16 CASE2,CASE3,CASE4,CASE5,CASE8,CASE16
C END VMS
C BEG UNIX
      CHARACTER*28 CASE
      CHARACTER*32 CASE2,CASE3,CASE4,CASE5,CASE8,CASE16
C END UNIX
      CHARACTER*4 QUAL,ANSOUT
      CHARACTER*4 CHARAC
      LOGICAL ANSL1     
C BEG UNIX
      integer lastch
      logical exists
      common/caseblock/case
#if hp700
C     call getarg(2, case)
      call getarg(1, case)
#else
      call getarg(1, case)
#endif
C END UNIX
C BEG VMS
C     CALL CASNAM(5,CASE)
C END VMS
      I=INDEX(CASE,' ')
      IF(I.NE.0) THEN
         CASE2=CASE(:I-1)//'.inp'
         CASE3=CASE(:I-1)//'.CBL'
         CASE4=CASE(:I-1)//'.ELE'
         CASE5=CASE(:I-1)//'.ppn'
         CASE8=CASE(:I-1)//'.TUT'
         CASE16=CASE(:I-1)//'.bin'
      ELSE
         CASE2=CASE//'.inp'
         CASE3=CASE//'.CBL'
         CASE4=CASE//'.ELE'
         CASE5=CASE//'.ppn'
         CASE8=CASE//'.TUT'
         CASE16=CASE//'.bin'
      ENDIF
      NLET = I - 1
      IF (I.EQ.0) NLET = 12
      IDDATA = 1
      IFILE = 2
      IOUTFL = 3
      IFIL14 = 14
      IFIL15 = 15
      IFIL16 = 16
      IFILE7 = 7
      IFILE4 = 4
      IFILE8 = 8
C BEG VMS
C     OPEN(UNIT=2,FILE='PANDA2:PROMPT.DAT',STATUS='OLD',READONLY)
C     OPEN(UNIT=14,FILE=CASE2,STATUS='UNKNOWN')
C     OPEN(UNIT=15,FILE=CASE5,STATUS='UNKNOWN')
C     OPEN(UNIT=16,FILE=CASE16,STATUS='UNKNOWN')
C     OPEN(UNIT=8,FILE=CASE8,STATUS='UNKNOWN')
C     OPEN(UNIT=3,FILE=CASE,STATUS='UNKNOWN')
C     OPEN(UNIT=4,FILE=CASE4,STATUS='UNKNOWN')
C     OPEN(UNIT=7,FILE=CASE3,STATUS='UNKNOWN',FORM='UNFORMATTED')
C END VMS
C BEG UNIX
C BEG UNIX
      OPEN(UNIT=ifile,FILE='PROMPT.DAT',STATUS='OLD')
      inquire(FILE=case2(1:lastch(case2)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifil14, FILE=case2(1:lastch(case2)), STATUS='OLD')
#if rs6k
        rewind(ifil14)
#endif
      else
        OPEN(UNIT=ifil14, FILE=case2(1:lastch(case2)), STATUS='NEW')
      endif
c
      inquire(FILE=case5(1:lastch(case5)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifil15, FILE=case5(1:lastch(case5)), STATUS='OLD')
#if rs6k
        rewind(ifil15)
#endif
      else
        OPEN(UNIT=ifil15, FILE=case5(1:lastch(case5)), STATUS='NEW')
      endif
c
      inquire(FILE=case16(1:lastch(case16)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifil16, FILE=case16(1:lastch(case16)), STATUS='OLD')
#if rs6k
        rewind(ifil16)
#endif
      else
        OPEN(UNIT=ifil16, FILE=case16(1:lastch(case16)), STATUS='NEW')
      endif
c
      inquire(FILE=case8(1:lastch(case8)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile8, FILE=case8(1:lastch(case8)), STATUS='OLD')
#if rs6k
        rewind(ifile8)
#endif
      else
        OPEN(UNIT=ifile8, FILE=case8(1:lastch(case8)), STATUS='NEW')
      endif
c
      inquire(FILE=case(1:lastch(case)), EXIST=exists) 
      if (exists) then
        OPEN(UNIT=ioutfl, FILE=case(1:lastch(case)), STATUS='OLD')
#if rs6k
        rewind(ioutfl)
#endif
      else
        OPEN(UNIT=ioutfl, FILE=case(1:lastch(case)), STATUS='NEW')
      endif
c
      inquire(FILE=case4(1:lastch(case4)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile4, FILE=case4(1:lastch(case4)), STATUS='OLD')
#if rs6k
        rewind(ifile4)
#endif
      else
        OPEN(UNIT=ifile4, FILE=case4(1:lastch(case4)), STATUS='NEW')
      endif
c
      inquire(FILE=case3(1:lastch(case3)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile7, FILE=case3(1:lastch(case3)), STATUS='OLD',
     1       FORM='UNFORMATTED')
#if rs6k
        rewind(ifile7)
#endif
      else
        OPEN(UNIT=ifile7, FILE=case3(1:lastch(case3)), STATUS='NEW',
     1       FORM='UNFORMATTED')
      endif
C END UNIX
C
      CALL GETCOM(IFILE7)
C
      WRITE(6,5)
    5 FORMAT(//'  ****************  STAGSUNIT *******************'//
     1'  The purpose of STAGSUNIT is to produce input files,'//
     1'            NAME.inp,  NAME.bin  and  NAME.ppn'//
     1'  for a multi-module model of a panel. NAME is your name for'/
     1'  the case. The files NAME.inp, NAME.bin can be used as input'/
     1'  for the  STAGS  computer program.  STAGS is a general finite'/
     1'  element code for the nonlinear static and dynamic analysis'/
     1'  of stiffened shell structures.  You should use STAGS to'/
     1'  check the load-carrying capacity of the panels you designed'/
     1'  with PANDA2. The file NAME.ppn can be used directly as input'/
     1'  for the STAGS postprocessor, POSTP.  STAGSUNIT also creates'/
     1'  a file called NAME.STG, which can be used as input for'/
     1'  future runs of STAGSUNIT.'/
     1'  ***********************************************'/)
C
      IF (ISTIF(1).EQ.4.OR.ISTIF(1).EQ.5.OR.
     1    ISTIF(2).EQ.4.OR.ISTIF(2).EQ.5) THEN
         WRITE(6,*)' **********************************************'
         WRITE(6,*)' STAGSUNIT works only for panels with stiffeners'
         WRITE(6,*)' with rectangular, 	tee, z or j cross sections.'
         WRITE(6,*)' **********************************************'
         CALL EXIT
      ENDIF
C BEG APR 2011
      CALL MOVER(CXORIG,1,CX,1,180)
      CALL MOVER(CYORIG,1,CY,1,180)
      CALL MOVER(CSORIG,1,CS,1,36)
C END APR 2011
C BEG FEB 2006
      NCOLS(1) = 0
C END FEB 2006
      QUAL = '.STG'
      CALL NFILE(IFILE,INFILE,IOUT,QUAL,IPROMP,IFILE8,CASE,IOUTFL)
      AR = ABS(R)
      REWIND IFILE
      IPOSTP = 0
      CALL DATUM(IFILE,52,1,2,INDIC,REALL,CHARAC,IOUT,0,IPROMP)
      INDICX = INDIC
      IF (INDICX.EQ.4) INDIC = 3
      IF (IPOSTP.EQ.1) WRITE(6,7)
    7 FORMAT(/' Next, you will be asked to provide a load step number.'/
     1' In response to the prompt:'//
     1' Restart from ISTARTth load step (0=1st nonlinear soln),ISTART'//
     1' type the load step number for which you want postprocessing.'/)
      CALL DATUM(IFILE,53,1,2,ISTART,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,54,1,2,INT,EIGLOC,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,55,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IGRAV = 0
      IF (ANSL1('N',ANSOUT,INFILE)) THEN
         IGRAV = 1
         CALL DATUM(IFILE,56,1,2,INT,GRAV,CHARAC,IOUT,0,IPROMP)
      ENDIF
C BEG APR 2006
      ILIN = 0
      IF (INDIC.EQ.5)
     1CALL DATUM(IFILE,57,1,2,INT,CPS,CHARAC,IOUT,0,IPROMP)
      IF (INDIC.NE.5) THEN
         CALL DATUM(IFILE,90,1,2,ILIN,REALL,CHARAC,IOUT,0,IPROMP)
         REWIND IFILE
      ENDIF
      ITOTAL = 0
      IF (INDIC.EQ.6)
     1CALL DATUM(IFILE,58,1,2,INT,DAMPNG,CHARAC,IOUT,0,IPROMP)
      IF (INDIC.NE.6) THEN
         CALL DATUM(IFILE,91,1,2,ITOTAL,REALL,CHARAC,IOUT,0,IPROMP)
         REWIND IFILE
      ENDIF
C END APR 2006
    8 CONTINUE
C BEG APR 1998
      ISTAGS = 2
      ISOLVR = -1
      NEWT = -20
   71 CONTINUE
      CALL DATUM(IFILE,96,1,2,INT,XSTAGS,CHARAC,IOUT,0,IPROMP)
      IF (XSTAGS.GT.(1.01*AXIAL)) THEN
         WRITE(6,*)' PANEL IS TOO LONG. MAXIMUM LENGTH PERMITTED IS'
         WRITE(6,*)' THE PANEL LENGTH, AXIAL=',AXIAL
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 71
      ENDIF
   72 CONTINUE
      CALL DATUM(IFILE,97,1,2,INT,YSTAGS,CHARAC,IOUT,0,IPROMP)
      YSTGSV = YSTAGS
      NSTR1 = 0
      IF (ISTIF(1).NE.0) THEN
         NSTR1 = YSTAGS/B(1) + 0.5 + 1.0
         YSTAGS = FLOAT(NSTR1-1)*B(1)
      ENDIF
      IF (NSTR1.EQ.1) THEN
         WRITE(6,*)' PANEL IS TOO NARROW. MINIMUM PANEL WIDTH IS'
         WRITE(6,*)' ONE STRINGER SPACING, B(1)=',B(1)
         WRITE(6,*)' TRY AGAIN.'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 72
      ENDIF
      IF (ISTIF(1).NE.0) WRITE(6,'(A,/,A,1P,E12.4,/,A,1P,E12.4,/,A)')
     1' STAGSUNIT MAY HAVE CHANGED YOUR INPUT VALUE OF YSTAGS:',
     1' YOUR INPUT VALUE OF ARC LENGTH OF THE PANEL, YSTAGS=',YSTGSV,
     1' STAGSUNIT HAS CHANGED THE ARC LENGTH TO      YSTAGS=',YSTAGS,
     1' WHICH IS EXACTLY EQUAL TO A MULTIPLE OF THE STRINGER SPACING.'
      ICLOSE = 0
      PI = 3.14159265
      PIRAD = PI/180.
C BEG MAR 2006
C     IF (YSTAGS.GT.0.8*2.0*PI*ABS(R)) THEN
C BEG FEB 2010
C     IF (YSTAGS.GT.0.98*2.0*PI*ABS(R)) THEN
      IF (YSTAGS.GT.0.99*2.0*PI*ABS(R)) THEN
C END FEB 2010
C END MAR 2006
         YSTAGS = 2.0*PI*ABS(R)
         ICLOSE = 1
         NSTR1 = 0
      ENDIF
C BEG APR 2006
      ICLOSED = 0
      IF (ICLOSE.EQ.1.OR.ITOTAL.EQ.1) ICLOSED = 1
      ANGBEG = 0.0
      IUNITX = 0
      IF (ITOTAL.EQ.1.AND.ICLOSE.EQ.0) THEN
         REWIND IFILE
         CALL DATUM(IFILE,92,1,2,INT,ANGBEG,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,93,1,2,IUNITX,REALL,CHARAC,IOUT,0,IPROMP)
      ENDIF
C END APR 2006
C BEG FEB 2007
      IUNITR = 0
      IUNITC = 0
      IF (IUNITX.GT.0)
     1   CALL DATUM(IFILE,392,1,2,IUNITC,REALL,CHARAC,IOUT,0,IPROMP)
      IF (IUNITX.GT.0)
     1   CALL DATUM(IFILE,393,1,2,IUNITR,REALL,CHARAC,IOUT,0,IPROMP)
C END FEB 2007
      CALL DATUM(IFILE,811,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IXUNI = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) IXUNI = 1
      IF (IXUNI.EQ.1) THEN
    9    CONTINUE
         CALL DATUM(IFILE,812,1,2,NODEX,REALL,CHARAC,IOUT,0,IPROMP)
         IF (MOD(NODEX,2).EQ.0) THEN
            WRITE(6,*)' NODEX MUST BE AN ODD INTEGER. TRY AGAIN.'
             BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 9
         ENDIF
         IF (NODEX.GT.299) THEN
            WRITE(6,*)' NODEX EXCEEDS MAX. ALLOWABLE VALUE OF 299.'
            WRITE(6,*)' PLEASE REDUCE THE NUMBER OF AXIAL NODES.'
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 9
         ENDIF
         REWIND IFILE
         IX = 1
         XCALL(1) = XSTAGS
         NCALL(1) = NODEX
         DXX = XSTAGS/FLOAT(NODEX-1)
         DO 909 I = 1,NODEX
  909    DX(I) = DXX
      ELSE
C     End of (IXUNI.EQ.1) condition
C     Begin of (IXUNI.EQ.0) condition
         IX = 0
         NODEX = 1
   91    CONTINUE
         IX = IX + 1
         REWIND IFILE
         IF (IX.EQ.1)
     1      CALL DATUM(IFILE,813,0,0,INT,REALL,CHARAC,IOUT,IX,IPROMP)
         CALL DATUM(IFILE,814,1,2,INT,XCALL(IX),CHARAC,IOUT,IX,IPROMP)
  913    CONTINUE
         CALL DATUM(IFILE,815,1,2,NCALL(IX),REALL,CHARAC,IOUT,
     1      IX,IPROMP)
         IF (MOD(NCALL(IX),2).EQ.0) THEN
            WRITE(6,*)' n(i) MUST BE AN ODD INTEGER. TRY AGAIN.'
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 913
         ENDIF
         FCALL = NCALL(IX) - 1
         IF (IX.EQ.1) THEN
            DXX = XCALL(IX)/FCALL
         ELSE
            DXX = (XCALL(IX)-XCALL(IX-1))/FCALL
         ENDIF
C BEG JUN 2006
C        IBEG = NODEX + 1
         IBEG = NODEX
C END JUN 2006
         IEND   = NODEX + NCALL(IX) - 1
         DO 911 I = IBEG,IEND
  911    DX(I) = DXX
         SEGLX(IX) = DXX*FCALL
         NSEGX(IX) = NCALL(IX) - 1
         NODEX  = IEND
         CALL DATUM(IFILE,816,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 91
         IX = IX + 1
  914    CONTINUE
         CALL DATUM(IFILE,817,1,2,NCALL(IX),REALL,CHARAC,IOUT,
     1      IX,IPROMP)
         IF (MOD(NCALL(IX),2).EQ.0) THEN
            WRITE(6,*)' n(i) MUST BE AN ODD INTEGER. TRY AGAIN.'
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 914
         ENDIF
         XCALL(IX) = XSTAGS
         FCALL = NCALL(IX) - 1
         DXX = (XCALL(IX)-XCALL(IX-1))/FCALL
C BEG JUN 2006
C        IBEG = NODEX + 1
         IBEG = NODEX
C END JUN 2006
         IEND   = NODEX + NCALL(IX) - 1
         DO 912 I = IBEG,IEND
  912    DX(I) = DXX
         SEGLX(IX) = DXX*FCALL
         NSEGX(IX) = NCALL(IX) - 1
         NNX = IX
         NODEX = IEND
         IF (NODEX.GT.299) THEN
            WRITE(6,*)' NUMBER OF AXIAL NODAL POINTS EXCEEDS 299.'
            WRITE(6,*)' PLEASE REDUCE THE NUMBER OF AXIAL NODES.'
            CALL ERREX
         ENDIF
      ENDIF
C     End of (IXUNI.EQ.0) condition
C BEG JUN 2006 (comment out the following statement)
C     DX(1) = DX(2)
C END JUN 2006
      DX(NODEX+1) = DX(NODEX)
C BEG MAR 2005
C  Remove writing out DX(i) here and move it down.
C END MAR 2005
C
C BEG FEB 2010
   99 CONTINUE
      CALL DATUM(IFILE,819,1,2,NODEY,REALL,CHARAC,IOUT,0,IPROMP)
      IF (MOD(NODEY,2).EQ.0) THEN
         WRITE(6,*)' NODEY MUST BE AN ODD INTEGER. TRY AGAIN.'
          BACKSPACE(IOUT)
          REWIND IFILE
      GO TO 99
      ENDIF
      IF (NODEY.GT.299) THEN
         WRITE(6,*)' NODEY EXCEEDS MAX. ALLOWABLE VALUE OF 299.'
         WRITE(6,*)' PLEASE REDUCE THE NUMBER OF AXIAL NODES.'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 99
      ENDIF
      REWIND IFILE
C END FEB 2010
C BEG OCT 2004
      CALL MOVER(0,0,ICSTSB,1,500)
      CALL MOVER(0,0,IRRGSB,1,500)
C BEG DEC 2004
      CALL MOVER(0,0,ICOLAL,1,500)
      CALL MOVER(0,0,IROWAL,1,500)
      CALL MOVER(0.,0,XRINGX,1,500)
C END DEC 2004
C BEG MAR 2006
      CALL MOVER(0.,0,YSTRGX,1,500)
C END MAR 2006
      CALL MOVER(0.,0,XSUBX,1,500)
      TX(1) = TSKINX(1)
      TX(2) = TSKINX(2)
      TY(1) = TSKINX(1)
      TY(2) = TSKINY(2)
C END OCT 2004
C BEG DEC 2004
      CALL MOVER(0,0,ICOLST,1,200)
      CALL MOVER(0,0,IROWRG,1,200)
      CALL MOVER(0,0,NDATA,1,500)
      CALL MOVER(0,0,IDATA,1,500)
C END DEC 2004
C
      REWIND IFILE
  212 CONTINUE
      CALL DATUM(IFILE,313,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,314,1,2,INT,FNX,CHARAC,IOUT,0,IPROMP)
      IF (FNX.GT.0.) THEN
         WRITE(6,*)' Nx is positive, indicating axial tension'
         CALL DATUM(IFILE,315,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('N',ANSOUT,INFILE)) THEN
            BACKSPACE(IOUT)
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 212
         ENDIF
         CALL DATUM(IFILE,316,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('N',ANSOUT,INFILE)) THEN
            BACKSPACE(IOUT)
            BACKSPACE(IOUT)
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 212
         ENDIF
      ENDIF
C
  214 CONTINUE
      CALL DATUM(IFILE,317,1,2,INT,FNY,CHARAC,IOUT,0,IPROMP)
      IF (FNY.GT.0.) THEN
         WRITE(6,*)' Ny is positive, indicating circum. tension'
         CALL DATUM(IFILE,318,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('N',ANSOUT,INFILE)) THEN
            BACKSPACE(IOUT)
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 214
         ENDIF
         CALL DATUM(IFILE,319,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('N',ANSOUT,INFILE)) THEN
            BACKSPACE(IOUT)
            BACKSPACE(IOUT)
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 214
         ENDIF
      ENDIF
C
      CALL DATUM(IFILE,320,1,2,INT,FNXY,CHARAC,IOUT,0,IPROMP)
C BEG OCT 2004
      RADXX = ABS(R)
      RTEST = 10000.*SQRT(AXIAL**2 + CIRC**2)
      DIFRAD  = ABS(RADXX - RTEST)/RADXX
      IFLAT = 0
      IF (DIFRAD.LT.0.5) IFLAT = 1
      PEDG = IFLAT.EQ.0
      KOUNT = 0
      KOUNT2= 0
  215 CONTINUE
C END OCT 2004
      CALL DATUM(IFILE,964,1,2,INT,P,CHARAC,IOUT,0,IPROMP)
C     PRESS = P*R/ABS(R)
      PRESS = P
C BEG OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (PEDG.AND.P.NE.0.0.AND.SIGN(1.0,P).NE.SIGN(1.0,FNY)) THEN
         KOUNT = KOUNT + 1
         WRITE(6,'(/,A,/,A)')
     1 ' INPUT ERROR: The sign of the pressure p is inconsistent',
     1 ' with the sign of the hoop resultant, Ny. Please try again.'
         IF (KOUNT.GT.1) CALL EXIT
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 215
      ENDIF
C
      DIFFP = 0.
      IF (P.NE.0.0) DIFFP = (ABS(P*RADXX) - ABS(FNY))/ABS(P)
      IF (PEDG.AND.P.NE.0.0.AND.DIFFP.GT.0.001) THEN
         KOUNT2= KOUNT2+ 1
         WRITE(6,'(/,A,/,A)')
     1 ' INPUT ERROR: The value of the pressure p is inconsistent',
     1 ' with the value of the hoop resultant, Ny. Please try again.'
         IF (KOUNT2.GT.1) CALL EXIT
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 215
      ENDIF
C END OCT 2004
      REWIND IFILE
      CALL DATUM(IFILE,329,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,332,1,2,INT,FNX0,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,333,1,2,INT,FNY0,CHARAC,IOUT,0,IPROMP)
C BEG OCT 2004
      KOUNT = 0
      KOUNT2=0
  216 CONTINUE
C END OCT 2004
      CALL DATUM(IFILE,965,1,2,INT,P0,CHARAC,IOUT,0,IPROMP)
C BEG NOV 2003
      PRESS0 = P0
C END NOV 2003
C BEG OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (PEDG.AND.P0.NE.0.0.AND.SIGN(1.0,P0).NE.SIGN(1.0,FNY0)) THEN
         KOUNT = KOUNT + 1
         WRITE(6,'(/,A,/,A)')
     1 ' INPUT ERROR: The sign of the pressure p0 is inconsistent',
     1 ' with the sign of the hoop resultant, Nyo. Please try again.'
         IF (KOUNT.GT.1) CALL EXIT
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 216
      ENDIF
C
      DIFFP = 0.
      IF (P0.NE.0.0) DIFFP = (ABS(P0*RADXX) - ABS(FNY0))/ABS(P0)
      IF (PEDG.AND.P0.NE.0.0.AND.DIFFP.GT.0.001) THEN
         KOUNT2 = KOUNT2 + 1
         WRITE(6,'(/,A,/,A)')
     1 ' INPUT ERROR: The value of the pressure p0 is inconsistent',
     1 ' with the value of the hoop resultant, Nyo. Please try again.'
         IF (KOUNT2.GT.1) CALL EXIT
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 216
      ENDIF
      REWIND IFILE
C END OCT 2004
  458 CONTINUE
      IBOUND = FBOUND
      CALL DATUM(IFILE,371,1,2,INT,STLD(1),CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,372,1,2,INT,STEP(1),CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,373,1,2,INT,FACM(1),CHARAC,IOUT,0,IPROMP)
      IF (INDICX.EQ.4) THEN
       CALL DATUM(IFILE,395,1,2,NLDS,REALL,CHARAC,IOUT,0,IPROMP)
       DO 396 I = 1,NLDS
        REWIND IFILE
        CALL DATUM(IFILE,396,1,2,INT,PLDS(I),CHARAC,IOUT,I,IPROMP)
  396  CONTINUE
       CALL DATUM(IFILE,397,1,2,IXEV,REALL,CHARAC,IOUT,0,IPROMP)
      ENDIF
      REWIND IFILE
      CALL DATUM(IFILE,374,1,2,INT,STLD(2),CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,375,1,2,INT,STEP(2),CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,376,1,2,INT,FACM(2),CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,377,1,2,NEIGS,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,378,1,2,IELMNT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,818,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
C BEG MAR 2006
C Following two statements moved up from below...
      MULT = 1
      IF (IELMNT.EQ.480) MULT = 2
C END MAR 2006
      NIMPFS = 0
      IWIMPL = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) IWIMPL = 1
      IF (IWIMPL.EQ.1) THEN
         CALL DATUM(IFILE,970,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,971,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IWIMP2 = 0
         IF (ANSL1('Y',ANSOUT,INFILE)) IWIMP2 = 1
         IF (IWIMP2.EQ.1) THEN
            NWIMPL = 0
  465       CONTINUE
            IF (NWIMPL.EQ.30) GO TO 466
            NWIMPL = NWIMPL + 1
            REWIND IFILE
            CALL DATUM(IFILE,972,1,2,INT,WIMPL(NWIMPL),CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
            CALL DATUM(IFILE,973,1,2,IRUN(NWIMPL),REALL,CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
            CALL DATUM(IFILE,974,1,2,ISTEP(NWIMPL),REALL,CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
            CALL DATUM(IFILE,975,1,2,IMODE(NWIMPL),REALL,CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
            CALL DATUM(IFILE,976,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
            IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 465
  466       CONTINUE
            NIMPFS = NWIMPL
         ENDIF
         IF (INDIC.EQ.6) THEN
          CALL DATUM(IFILE,980,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
          CALL DATUM(IFILE,981,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
          IWIMP2 = 0
          IF (ANSL1('Y',ANSOUT,INFILE)) IWIMP2 = 1
          IF (IWIMP2.EQ.1) THEN
             NWIMPL = 0
  565        CONTINUE
             IF (NWIMPL.EQ.30) GO TO 566
             NWIMPL = NWIMPL + 1
             REWIND IFILE
             CALL DATUM(IFILE,982,1,2,INT,VELOC(NWIMPL),CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
             CALL DATUM(IFILE,983,1,2,IMRUN(NWIMPL),REALL,CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
             CALL DATUM(IFILE,984,1,2,IMSTEP(NWIMPL),REALL,CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
             CALL DATUM(IFILE,985,1,2,IMMODE(NWIMPL),REALL,CHARAC,IOUT,
     1                 NWIMPL,IPROMP)
             CALL DATUM(IFILE,986,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
             IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 565
  566        CONTINUE
             IVELO = NWIMPL
          ENDIF
         ENDIF
      ENDIF
C
      REWIND IFILE
C BEG FEB 2005
      IF (IFLAT.EQ.0) THEN
         CALL DATUM(IFILE,987,1,2,NSTRNG,REALL,CHARAC,IOUT,0,IPROMP)
      ELSE
         CALL DATUM(IFILE,394,1,2,NSTRNG,REALL,CHARAC,IOUT,0,IPROMP)
      ENDIF
C END FEB 2005
      IF (ICLOSE.EQ.0) NSTRNG = NSTR1
      IF (ISTIF(1).EQ.0) NSTRNG = 0
      CALL DATUM(IFILE,988,1,2,NRINGS,REALL,CHARAC,IOUT,0,IPROMP)
      IF (ISTIF(2).EQ.0) NRINGS = 0
      CALL DATUM(IFILE,989,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IRENDS = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) IRENDS = 1
C BEG OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
      ISTRSB = 0
      IRNGSB = 0
      NPSUBS = 0
      NPSUBR = 0
      REWIND IFILE
      IF (IMTSUB(1,1).GT.0) THEN
         CALL DATUM(IFILE,978,1,2,ISTRSB,REALL,CHARAC,IOUT,0,IPROMP)
         IF (ISTRSB.GE.2.AND.NSTRNG.LT.2) THEN
         WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' ********* RUN ABORT ******** RUN ABORT ************',
     1 ' Invalid STAGS model: There are less than two stringers',
     1 ' yet there are sub-stringers to be treated as discrete',
     1 ' beams or as shell units. If there are no major stringers',
     1 ' please set up the sub-stringers in the PANDA2 model as',
     1 ' major stringers rather than as sub-stringers.',
     1 ' ********* RUN ABORT ******** RUN ABORT ************'
         ENDIF
         REWIND IFILE
         CALL DATUM(IFILE,968,1,2,NPSUBS,REALL,CHARAC,IOUT,0,IPROMP)
         IF (NPSUBS.LT.3) NPSUBS = 3
         IF (MOD(NPSUBS,2).EQ.0) NPSUBS = NPSUBS + 1
      ENDIF
C
      IF (IMTSUB(1,2).GT.0) THEN
         CALL DATUM(IFILE,979,1,2,IRNGSB,REALL,CHARAC,IOUT,0,IPROMP)
         IF (IRNGSB.GE.2.AND.NRINGS.LT.2) THEN
         WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' ********* RUN ABORT ******** RUN ABORT ************',
     1 ' Invalid STAGS model: There are less than two rings',
     1 ' yet there are sub-rings to be treated as discrete',
     1 ' beams or as shell units. If there are no major rings',
     1 ' please set up the sub-rings in the PANDA2 model as',
     1 ' major rings rather than as sub-rings.',
     1 ' ********* RUN ABORT ******** RUN ABORT ************'
         ENDIF
         REWIND IFILE
         CALL DATUM(IFILE,969,1,2,NPSUBR,REALL,CHARAC,IOUT,0,IPROMP)
         IF (NPSUBR.LT.3) NPSUBR = 3
         IF (MOD(NPSUBR,2).EQ.0) NPSUBR = NPSUBR + 1
      ENDIF
C
      REWIND IFILE
      NELSSB = 0
      NELRSB = 0
      IF (ISTRSB.GT.1)
     1CALL DATUM(IFILE,966,1,2,NELSSB,REALL,CHARAC,IOUT,0,IPROMP)
      IF (IRNGSB.GT.1)
     1CALL DATUM(IFILE,967,1,2,NELRSB,REALL,CHARAC,IOUT,0,IPROMP)
C BEG FEB 2005
C BEG APR 2009
C     IF (IELMNT.EQ.410) THEN
      IF (IELMNT.EQ.410.OR.IELMNT.EQ.411.OR.IELMNT.EQ.940) THEN
C END APR 2009
         IF (ISTRSB.GT.1.AND.NELSSB.LT.2) NELSSB = 2
         IF (IRNGSB.GT.1.AND.NELRSB.LT.2) NELRSB = 2
      ENDIF
C END FEB 2005
      IF (NELSSB.EQ.0)
     1CALL DATUM(IFILE,990,1,2,NELSTR,REALL,CHARAC,IOUT,0,IPROMP)
C BEG FEB 2006
C23456789012345678901234567890123456789012345678901234567890123456789012
      NELCIR = 0
      IF (NELSSB.EQ.0.AND.NELSTR.EQ.0) THEN
C BEG MAR 2009
         WRITE(6,
     1 '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' You have specified zero finite elements between stringers.',
     1 ' There can be either one or two of two reasons you do this:',
     1 ' 1. The stringers are smeared out or there are no stringers',
     1 ' and/or',
     1 ' 2. Later you want the mesh spacing to vary in the circum-',
     1 '    ferential direction. You are permitted to specify zero',
     1 '    even if there exist stringers. Specifying zero is the',
     1 '    only way to get into the branch where STAGSUNIT asks you',
     1 '    to provide the input data for circumferentially varying',
     1 '    nodal point spacing.',
     1 ' Next, you will be asked to provide the number of finite',
     1 ' elements over the circumference of the model. This input',
     1 ' datum is only relevant if the mesh spacing is uniform in the',
     1 ' circumferential direction. If the mesh spacing is nonuniform',
     1 ' just give any number greater than 4  . STAGSUNIT ignores it.'
C END MAR 2009
         REWIND IFILE
         CALL DATUM(IFILE,89,1,2,NELCIR,REALL,CHARAC,IOUT,0,IPROMP)
         IF (NELCIR.LE.4) THEN
            WRITE(6,'(/,A)')' Bad input. NELCIR must be > 4'
            CALL EXIT
         ENDIF
      ENDIF
C END FEB 2006
      IF (NELRSB.EQ.0)
     1CALL DATUM(IFILE,991,1,2,NELRNG,REALL,CHARAC,IOUT,0,IPROMP)
      BSUBXM(1) = B(1)
      NSTSUB = 0
      IF (NELSSB.GT.0) THEN
C BEG FEB 2005
         NSTSUB = B(1)/BSUBX(1) + 0.5
         BSUBXM(1) = B(1)/FLOAT(NSTSUB)
C END FEB 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(6,'(/,A,1P,2E12.4,/,A,/,A,/,A,/,A,/,A,/,A,/,A,1P,E12.4)')
     1 ' Original (BSUBX) and modified (BSUBXM) sub-stringer spacings=',
     1   BSUBX(1),BSUBXM(1),
     1 ' These should be very close to eachother. If they are not,',
     1 ' please adjust the PANDA2 model so that there are an integral',
     1 ' number of substringers between adjacent major stringers.',
     1 ' You might want to re-optimize with substringer spacing fixed',
     1 ' at whatever integral number is closest to the existing design',
     1 ' with substringer spacing eliminated as a decision variable.',
     1 ' The STAGS model assumes that the substringer spacing is',
     1   BSUBXM(1)
C
C BEG FEB 2005
C        NELSTR = NELSSB*(NSTSUB + 1)
         NELSTR = NELSSB*(NSTSUB + 0)
C END FEB 2005
      ENDIF
      BSUBXM(2) = B(2)
      NRGSUB = 0
      IF (NELRSB.GT.0) THEN
C BEG FEB 2005
C        NRGSUB = B(2)/BSUBX(2) - 0.5
C        BSUBXM(2) = B(2)/FLOAT(NRGSUB+1)
         NRGSUB = B(2)/BSUBX(2) + 0.5
         BSUBXM(2) = B(2)/FLOAT(NRGSUB)
C END FEB 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(6,'(/,A,1P,2E12.4,/,A,/,A,/,A,/,A,/,A,/,A,/,A,1P,E12.4)')
     1 ' Original (BSUBX) and modified (BSUBXM) sub-ring spacings=',
     1   BSUBX(2),BSUBXM(2),
     1 ' These should be very close to eachother. If they are not,',
     1 ' please adjust the PANDA2 model so that there are an integral',
     1 ' number of subrings between adjacent major rings.',
     1 ' You might want to re-optimize with subring spacing fixed',
     1 ' at whatever integral number is closest to the existing design',
     1 ' with subring spacing eliminated as a decision variable.',
     1 ' The STAGS model assumes that the subring spacing is',
     1   BSUBXM(2)
C
C BEG FEB 2005
C        NELRNG = NELRSB*(NRGSUB + 1)
         NELRNG = NELRSB*(NRGSUB + 0)
C END FEB 2005
      ENDIF
C
      ICHNGE = 0
      IF (IRNGSB.GE.2.AND.IRENDS.EQ.0) THEN
         WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' ********* MODEL CHANGE ********** MODEL CHANGE **************',
     1 ' There are subrings to be modelled either as discrete beams',
     1 ' or as shell units. You have chosen a STAGS model in which',
     1 ' major rings do not occur at the ends (IRENDS = 0). With',
     1 ' non-smeared subrings present, you MUST have major rings and',
     1 ' you must have a major ring at each end of the STAGS model.',
     1 ' IRENDS will now be changed from zero to one and one major.',
     1 ' ring will be added to NRINGS.',
     1 ' ********* MODEL CHANGE ********** MODEL CHANGE **************'
         ICHNGE = 1
      ENDIF
      IF (ICHNGE.EQ.1) THEN
         IRENDS = 1
         NRINGS = NRINGS + 1
      ENDIF
C
      IF (NRINGS.GT.0) THEN
         B2SAVE = B(2)
         IF (IRENDS.EQ.1) B(2) = XSTAGS/FLOAT(NRINGS-1)
         IF (IRENDS.NE.1) B(2) = XSTAGS/FLOAT(NRINGS)
         DIFFB2 = ABS(B2SAVE-B(2))/B2SAVE
         IF (DIFFB2.GT.0.0001) WRITE(6,'(A,/,A,/,A,1P,2E12.4,/,A)')
     1 ' ********* WARNING  WARNING  WARNING  WARNING **************',
     1 ' Ring spacing in STAGS model is different from PANDA2 model.',
     1 ' Ring spacings, B(2), in PANDA2, STAGS models=',
     1   B2SAVE,B(2),
     1 ' ********* END WARNING   END WARNING   END WARNING **********'
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (DIFFB2.GT.0.01) THEN
            WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' ********* RUN ABORT ********** RUN ABORT ***********',
     1 ' Ring spacing B(2) in the STAGS model is too different from',
     1 ' that in the PANDA2 model. This run now aborts. Please',
     1 ' change either the value XSTAGS (XSTAGS= axial length of the',
     1 ' panel in the STAGS model) or rerun PANDA2 with an integral',
     1 ' number of equally spaced rings in the PANDA2 model or change',
     1 ' your input here with regard to the number of rings in the',
     1 ' STAGS model.',
     1 ' ********* RUN ABORT ********** RUN ABORT ***********'
            CALL EXIT
         ENDIF
      ENDIF
C END OCT 2004
      CALL DATUM(IFILE,992,1,2,IBMSTR,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,993,1,2,IBMRNG,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,994,1,2,IREF,REALL,CHARAC,IOUT,0,IPROMP)
      ILINKS = 0
      CALL DATUM(IFILE,995,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) ILINKS = 1
C BEG FEB 2007 (It was decided never to use fasteners. )
      ILINKS = 0
C END FEB 2007
C BEG OCT 2004
C  11 statements concerning ILINK1 and ILINK2, etc. moved down.
C END OCT 2004
      ISMRST = 0
      CALL DATUM(IFILE,996,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) ISMRST = 1
C BEG OCT 2004
      IF (ISTRSB.GE.2.AND.ISMRST.EQ.1) THEN
         WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A)')
     1 ' ********* RUN ABORT ******** RUN ABORT ************',
     1 ' Invalid STAGS model: The major stringers are smeared',
     1 ' yet there are sub-stringers to be treated as discrete',
     1 ' beams or as shell units. If the major stringers are',
     1 ' to be smeared, you must also smear the substringers.',
     1 ' ********* RUN ABORT ******** RUN ABORT ************'
      ENDIF
C END OCT 2004
C
C BEG FEB 2006
      IYUNI = 1
      NNY   = 0
C BEG MAR 2006
      FMULT = 1.0
      IF (IFLAT.EQ.0) FMULT = 1./(PIRAD*ABS(R))
C     IF (ISMRST.EQ.1.AND.NELSTR.EQ.0.AND.IXUNI.EQ.1
C    1                               .AND.NELSSB.EQ.0) THEN
      IF (NELSTR.EQ.0.AND.NELSSB.EQ.0) THEN
C END MAR 2006
       IYUNI = 0
       YEND = YSTAGS
       IF (IFLAT.EQ.0) YEND = YSTAGS*FMULT
       DIFF = ABS(360. - YEND)
       IF (DIFF.LT.1.0) YEND = 360.
       REWIND IFILE
       CALL DATUM(IFILE,911,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
       IF (ANSL1('Y',ANSOUT,INFILE)) IYUNI = 1
C BEG FEB 2010
C      NODEY = 121 
       IF (ISMRST.EQ.0.AND.NELCIR.GT.0) NODEY = MULT*NELCIR + 1
       IF (ISMRST.EQ.0.AND.NELSTR.GT.0)
     1                       NODEY = MULT*NELSTR*(NSTRNG-1) + 1
C END FEB 2010
       IF (IYUNI.EQ.1) THEN
         IY = 1
         YCALL(1) = YEND
         NCALLY(1) = NODEY
         DYY = YEND/FLOAT(NODEY-1)
         DO 9090 I = 1,NODEY
 9090    DY(I) = DYY
       ELSE
C      End of (IYUNI.EQ.1) condition
C      Begin of (IYUNI.EQ.0) condition
         IY = 0
         NODEY = 1
 9100    CONTINUE
         IY = IY + 1
         REWIND IFILE
         IF (IY.EQ.1)
     1      CALL DATUM(IFILE,913,0,0,INT,REALL,CHARAC,IOUT,IY,IPROMP)
         CALL DATUM(IFILE,914,1,2,INT,YINPUT,CHARAC,IOUT,IY,IPROMP)
         YCALL(IY) = YINPUT
 9130    CONTINUE
         CALL DATUM(IFILE,915,1,2,NCALLY(IY),REALL,CHARAC,IOUT,
     1      IY,IPROMP)
         IF (MOD(NCALLY(IY),2).EQ.0) THEN
            WRITE(6,*)' n(i) MUST BE AN ODD INTEGER. TRY AGAIN.'
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 9130
         ENDIF
         FCALL = NCALLY(IY) - 1
         IF (IY.EQ.1) THEN
            DYY = YCALL(IY)/FCALL
         ELSE
            DYY = (YCALL(IY)-YCALL(IY-1))/FCALL
         ENDIF
C BEG JUN 2006
C        IBEG = NODEY + 1
         IBEG = NODEY
C END JUN 2006
         IEND   = NODEY + NCALLY(IY) - 1
         DO 9110 I = IBEG,IEND
 9110    DY(I) = DYY
         SEGLY(IY) = DYY*FCALL
         NSEGY(IY) = NCALLY(IY) - 1
         NODEY  = IEND
         CALL DATUM(IFILE,916,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 9100
         IY = IY + 1
 9140    CONTINUE
         CALL DATUM(IFILE,917,1,2,NCALLY(IY),REALL,CHARAC,IOUT,
     1      IY,IPROMP)
         IF (MOD(NCALLY(IY),2).EQ.0) THEN
            WRITE(6,*)' n(i) MUST BE AN ODD INTEGER. TRY AGAIN.'
            BACKSPACE(IOUT)
            REWIND IFILE
            GO TO 9140
         ENDIF
         YCALL(IY) = YEND
         FCALL = NCALLY(IY) - 1
         DYY = (YCALL(IY)-YCALL(IY-1))/FCALL
C BEG JUN 2006
C        IBEG = NODEY + 1
         IBEG = NODEY
C END JUN 2006
         IEND   = NODEY + NCALLY(IY) - 1
         DO 9120 I = IBEG,IEND
 9120    DY(I) = DYY
         SEGLY(IY) = DYY*FCALL
         NSEGY(IY) = NCALLY(IY) - 1
         NNY = IY
         NODEY = IEND
         IF (NODEY.GT.299) THEN
            WRITE(6,*)' NUMBER OF CIRC. NODAL POINTS EXCEEDS 299.'
            WRITE(6,*)' PLEASE REDUCE THE NUMBER OF CIRC. NODES.'
            CALL ERREX
         ENDIF
       ENDIF
C      End of (IYUNI.EQ.0) condition
C BEG JUN 2006 (comment out the following statement)
C      DY(1) = DY(2)
C END JUN 2006
       DY(NODEY+1) = DY(NODEY)
       NCOLS(1) = NODEY
       WRITE(6,'(/,A,I5)')' **** NODEY=',NODEY
      ENDIF
C     End of (NELSTR.EQ.0.AND.NELSSB.EQ.0) condition
C END FEB 2006
C
C BEG MAR 2006
      IDRILX = 1
C     IF (IELMNT.EQ.480.AND.IXUNI.EQ.0) THEN
C        CALL DATUM(IFILE,918,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
C        IF (ANSL1('N',ANSOUT,INFILE)) IDRILX = 0
C        IF (IDRILX.EQ.0) WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A)')
C    1 ' ******************** WARNING **************************',
C    1 ' You are using STAGS element 480 and have elected NOT to',
C    1 ' suppress the drilling degrees of freedom. Because of this',
C    1 ' you MUST include the string, RK1 , in the first line of',
C    1 ' the *.inp file.',
C    1 ' *******************************************************' 
C     ENDIF
C END MAR 2006
      ISMRRG = 0
      CALL DATUM(IFILE,997,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) ISMRRG = 1
C BEG OCT 2004
      IF (IRNGSB.GE.2.AND.ISMRRG.EQ.1) THEN
         WRITE(6,'(A,/,A,/,A,/,A,/,A,/,A)')
     1 ' ********* RUN ABORT ******** RUN ABORT ************',
     1 ' Invalid STAGS model: The major rings are smeared',
     1 ' yet there are sub-rings to be treated as discrete',
     1 ' beams or as shell units. If the major rings are',
     1 ' to be smeared, you must also smear the subrings.',
     1 ' ********* RUN ABORT ******** RUN ABORT ************'
      ENDIF
C END OCT 2004
C
      IF (NSTRNG.EQ.0) ISMRST = 1
      IF (NRINGS.EQ.0) ISMRRG = 1
      IF (IBMSTR.EQ.5) ISMRST = 0
      IF (IBMRNG.EQ.5) ISMRRG = 0
      IF (ISMRST.EQ.1) IBMSTR = 1
      IF (ISMRRG.EQ.1) IBMRNG = 1
      IF (IBMSTR.EQ.1.AND.IBMRNG.EQ.1) IREF = 0
      IF (IBMSTR.EQ.5.AND.IBMRNG.EQ.5) IREF = 0
      IF (IBMSTR.EQ.2.AND.TX(2).EQ.TX(1).AND.ISTIF(1).EQ.3) IBMSTR = 3
      IF (IBMRNG.EQ.2.AND.TY(2).EQ.TX(1).AND.ISTIF(2).EQ.3) IBMRNG = 3
      IF ((IBMSTR.EQ.2.OR.IBMSTR.EQ.4).AND.IZSTIF(1).EQ.1) IBMSTR = 3
      IF ((IBMRNG.EQ.2.OR.IBMRNG.EQ.4).AND.IZSTIF(2).EQ.1) IBMRNG = 3
C BEG OCT 2004
C  statements about changing ILINK1 and ILINK2 and ILINKS brought
C  down here from above...
      IF (NSTRNG.EQ.0) IBMSTR = 1
      IF (NRINGS.EQ.0) IBMRNG = 1
      ILINK1 = ILINKS
      IF (IBMSTR.EQ.5.OR.IBMSTR.EQ.1) ILINK1 = 0
      ILINK2 = ILINKS
      IF (IBMRNG.EQ.5.OR.IBMRNG.EQ.1) ILINK2 = 0
      IF (ILINK1.EQ.0.AND.ILINK2.EQ.0) ILINKS = 0
      IF (ILINK1.EQ.1.AND.ILINK2.EQ.1) IREF = 0
      IF (NSTRNG.EQ.0.AND.NRINGS.EQ.0) IREF = 0
      IF (ILINK1.EQ.1.AND.(IBMRNG.EQ.1.OR.IBMRNG.EQ.5)) IREF = 0
      IF ((IBMSTR.EQ.1.OR.IBMSTR.EQ.5).AND.ILINK2.EQ.1) IREF = 0
      IF (IBMSTR.EQ.1.AND.ISTRSB.EQ.3) ISTRSB = 2
      IF (IBMRNG.EQ.1.AND.IRNGSB.EQ.3) IRNGSB = 2
C substiffener links...
      LNKSB1 = 0
      LNKSB2 = 0
      IF (ISTRSB.EQ.3) LNKSB1 = ILINK1
      IF (IRNGSB.EQ.3) LNKSB2 = ILINK2
C END OCT 2004
C
      IPOSNR = -1
      IF (NRINGS.GT.0.AND.INTRNG.EQ.0) IPOSNR = 1
C
      IF (IZSTIF(1).EQ.0) THEN
         ZSTR(1,1) = -0.5*(TX(2) - TX(1))
         ZSTR(2,1) =  0.5*(TX(2) - TX(1))
      ELSE
         ZSTR(1,1) = -0.5*TX(2)
         ZSTR(2,1) =  0.5*TX(2)
      ENDIF
      YSTR(1,1) = -0.5*B2(1)
      YSTR(2,1) =  0.5*B2(1)
      ZSTR(1,2) = -0.5*H(1)
      ZSTR(2,2) =  0.5*H(1)
      YSTR(1,2) = -0.5*TX(3)
      YSTR(2,2) =  0.5*TX(3)
      ZSTR(1,3) = -0.5*TX(4)
      ZSTR(2,3) =  0.5*TX(4)
      YSTR(1,3) = -0.5*W(1)
      YSTR(2,3) =  0.5*W(1)
C      
      IF (IZSTIF(2).EQ.0) THEN
         ZRNG(1,1) = -0.5*(TY(2) - TX(1))
         ZRNG(2,1) =  0.5*(TY(2) - TX(1))
      ELSE
         ZRNG(1,1) = -0.5*TY(2)
         ZRNG(2,1) =  0.5*TY(2)
      ENDIF
      YRNG(1,1) = -0.5*B2(2)
      YRNG(2,1) =  0.5*B2(2)
      ZRNG(1,2) = -0.5*H(2)
      ZRNG(2,2) =  0.5*H(2)
      YRNG(1,2) = -0.5*TY(3)
      YRNG(2,2) =  0.5*TY(3)
      ZRNG(1,3) = -0.5*TY(4)
      ZRNG(2,3) =  0.5*TY(4)
      YRNG(1,3) = -0.5*W(2)
      YRNG(2,3) =  0.5*W(2)
C      
      ECZADD = 0.0
      IF (IREF.EQ.1)  ECZADD = -0.5*TX(1)
      IF (IREF.EQ.-1) ECZADD =  0.5*TX(1)
C BEG OCT 2004
      RADD = 0.
      IF (IREF.EQ.1) RADD = TX(1)/2.
      IF (IREF.EQ.-1) RADD = -TX(1)/2.
      RADIUS = ABS(R) + RADD
C END OCT 2004
      IF (R.GT.0.) THEN
         IF (IZSTIF(1).EQ.0) THEN
            ECZSTR(1) = 0.5*TX(2) + ECZADD
            ECZSTR(2) = 0.5*H(1) + TX(2) - 0.5*TX(1) + ECZADD
            ECZSTR(3) =     H(1) + TX(2) - 0.5*TX(1) + ECZADD
         ELSE
            ECZSTR(1) = 0.5*(TX(1) + TX(2)) + ECZADD
            ECZSTR(2) = 0.5*H(1) + 0.5*(TX(1) + TX(2)) + ECZADD
            ECZSTR(3) =     H(1) + 0.5*(TX(1) + TX(2)) + ECZADD
         ENDIF
      ELSE
         IF (IZSTIF(1).EQ.0) THEN
            ECZSTR(1) = -0.5*TX(2) + ECZADD
            ECZSTR(2) = -(0.5*H(1) + TX(2) - 0.5*TX(1)) + ECZADD
            ECZSTR(3) = -(    H(1) + TX(2) - 0.5*TX(1)) + ECZADD
         ELSE
            ECZSTR(1) = -0.5*(TX(1) + TX(2)) + ECZADD
            ECZSTR(2) = -(0.5*H(1) + 0.5*(TX(1) + TX(2))) + ECZADD
            ECZSTR(3) = -(    H(1) + 0.5*(TX(1) + TX(2))) + ECZADD
         ENDIF
      ENDIF
      ECYSTR(1) = 0.0
      ECYSTR(2) = 0.0
      IF (ISTIF(1).EQ.2.AND.IZSTIF(1).EQ.1) ECYSTR(2) = 0.5*B2(1)
      ECYSTR(3) = 0.0
      IF (ISTIF(1).EQ.2) ECYSTR(3) = 0.5*W(1)
      IF (ISTIF(1).EQ.2.AND.IZSTIF(1).EQ.1)
     1                               ECYSTR(3) = 0.5*(B2(1)+W(1))
C
      IF (IBMSTR.EQ.2) THEN
         ECYSTR(3) = 0.0
         ECZSTR(3) = 0.0
         IF (ISTIF(1).EQ.2) ECZSTR(3) = 0.5*W(1)
      ENDIF
C
      IF (IPOSNR.EQ.1) THEN
         IF (IZSTIF(2).EQ.0) THEN
            ECZRNG(1) = 0.5*TY(2) + ECZADD
            ECZRNG(2) = 0.5*H(2) + TY(2) - 0.5*TX(1) + ECZADD
            ECZRNG(3) =     H(2) + TY(2) - 0.5*TX(1) + ECZADD
         ELSE
            ECZRNG(1) = 0.5*(TX(1) + TY(2)) + ECZADD
            ECZRNG(2) = 0.5*H(2) + 0.5*(TX(1) + TY(2)) + ECZADD
            ECZRNG(3) =     H(2) + 0.5*(TX(1) + TY(2)) + ECZADD
         ENDIF
      ELSE
         IF (IZSTIF(2).EQ.0) THEN
            ECZRNG(1) = -0.5*TY(2) + ECZADD
            ECZRNG(2) = -(0.5*H(2) + TY(2) - 0.5*TX(1)) + ECZADD
            ECZRNG(3) = -(    H(2) + TY(2) - 0.5*TX(1)) + ECZADD
         ELSE
            ECZRNG(1) = -0.5*(TX(1) + TY(2)) + ECZADD
            ECZRNG(2) = -(0.5*H(2) + 0.5*(TX(1) + TY(2))) + ECZADD
            ECZRNG(3) = -(    H(2) + 0.5*(TX(1) + TY(2))) + ECZADD
         ENDIF
      ENDIF
C
      ECYRNG(1) = 0.0
      ECYRNG(2) = 0.0
      IF (ISTIF(2).EQ.2.AND.IZSTIF(2).EQ.1) ECYRNG(2) = 0.5*B2(2)
      ECYRNG(3) = 0.0
      IF (ISTIF(2).EQ.2) ECYRNG(3) = 0.5*W(2)
      IF (ISTIF(2).EQ.2.AND.IZSTIF(2).EQ.1)
     1                               ECYRNG(3) = 0.5*(B2(2)+W(2))
C
      IF (IBMRNG.EQ.2) THEN
         ECYRNG(3) = 0.0
         ECZRNG(3) = 0.0
         IF (ISTIF(2).EQ.2) ECZRNG(3) = 0.5*W(2)
      ENDIF
C
C BEG OCT 2004
C  substringer and subring logic...
      EZSTSB = 0.
      ZSTRSB(1) = 0.
      ZSTRSB(2) = 0.
      YSTRSB(1) = 0.
      YSTRSB(2) = 0.
      EZRGSB = 0.
      ZRNGSB(1) = 0.
      ZRNGSB(2) = 0.
      YRNGSB(1) = 0.
      YRNGSB(2) = 0.
      IF (ISOSUB(1,1,1).EQ.0) THEN
        IF (IMTSUB(1,1).GT.0) THEN
C   substringer dimensions and eccentricity:
         ISUBST = 1
         IF (THSUB(1,1,1).GE.45.) ISUBST = 2
         IF (ISUBST.EQ.2.AND.THSUB(2,1,1).GE.45.) CALL EXIT
         HEIGHT = HSUB(ISUBST,1,1)
         THICKS  = TSUB(ISUBST,1,1)
         ZSTRSB(1) = -0.5*HEIGHT
         ZSTRSB(2) =  0.5*HEIGHT
         YSTRSB(1) = -0.5*THICKS
         YSTRSB(2) =  0.5*THICKS
         NSF = NSURF(ISUBST,1,1)
         NSURFX(1) = NSF
         EYSTSB = 0.
         GAPSB1 = 0.
         IF (R.GT.0.0.AND.NSF.EQ.0) THEN
             GAPSB1 =  0.5*TX(1) + ECZADD
             EZSTSB =  0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB1.EQ.0.) GAPSB1 = 0.0000001
         ENDIF
         IF (R.GT.0.0.AND.NSF.EQ.1) THEN
             GAPSB1 = -0.5*TX(1) + ECZADD
             EZSTSB = -0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB1.EQ.0.) GAPSB1 = -0.0000001
         ENDIF
         IF (R.LT.0.0.AND.NSF.EQ.0) THEN
             GAPSB1 = -0.5*TX(1) + ECZADD
             EZSTSB = -0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB1.EQ.0.) GAPSB1 = -0.0000001
         ENDIF
         IF (R.LT.0.0.AND.NSF.EQ.1) THEN
             GAPSB1 =  0.5*TX(1) + ECZADD
             EZSTSB =  0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB1.EQ.0.) GAPSB1 = 0.0000001
         ENDIF
        ENDIF
C
        IF (IMTSUB(1,2).GT.0) THEN
C   subring dimensions and eccentricity:
         ISUBST = 2
         IF (THSUB(2,1,1).LT.45.) ISUBST = 1
         IF (ISUBST.EQ.1.AND.THSUB(1,1,1).LT.45.) CALL EXIT
         HEIGHT = HSUB(ISUBST,1,1)
         THICKS  = TSUB(ISUBST,1,1)
         ZRNGSB(1) = -0.5*HEIGHT
         ZRNGSB(2) =  0.5*HEIGHT
         YRNGSB(1) = -0.5*THICKS
         YRNGSB(2) =  0.5*THICKS
         NSF = NSURF(ISUBST,1,1)
         NSURFX(2) = NSF
         EYRGSB = 0.
         GAPSB2 = 0.
         IF (R.GT.0.0.AND.NSF.EQ.0) THEN
             GAPSB2 =  0.5*TX(1) + ECZADD
             EZRGSB =  0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB2.EQ.0.) GAPSB2 = 0.0000001
         ENDIF
         IF (R.GT.0.0.AND.NSF.EQ.1) THEN
             GAPSB2 = -0.5*TX(1) + ECZADD
             EZRGSB = -0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB2.EQ.0.) GAPSB2 = -0.0000001
         ENDIF
         IF (R.LT.0.0.AND.NSF.EQ.0) THEN
             GAPSB2 = -0.5*TX(1) + ECZADD
             EZRGSB = -0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB2.EQ.0.) GAPSB2 = -0.0000001
         ENDIF
         IF (R.LT.0.0.AND.NSF.EQ.1) THEN
             GAPSB2 =  0.5*TX(1) + ECZADD
             EZRGSB =  0.5*(HEIGHT+TX(1)) + ECZADD
             IF (GAPSB2.EQ.0.) GAPSB2 = 0.0000001
         ENDIF
        ENDIF
      ENDIF
C END OCT 2004
      REWIND IFILE
  570 CONTINUE
C BEG OCT 2004
      CALL DATUM(IFILE,977,1,2,NODWEB,REALL,CHARAC,IOUT,0,IPROMP)
C END OCT 2004
      IF (MOD(NODWEB,2).EQ.0) THEN
         WRITE(6,*)' NODWEB MUST BE AN ODD INTEGER. TRY AGAIN.'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 570 
      ENDIF
      IF (NODWEB.GT.20) THEN
         WRITE(6,*)' NODWEB EXCEEDS MAX. ALLOWABLE VALUE OF 20.'
         WRITE(6,*)' PLEASE REDUCE THE NUMBER OF WEB NODES.'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 570 
      ENDIF
      IF (NODWEB.LT.3) THEN
         WRITE(6,*)' NODWEB IS SMALLER THAN MINIMUM ALLOWABLE OF 3.'
         WRITE(6,*)' PLEASE INCREASE THE NUMBER OF WEB NODES.'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 570 
      ENDIF
      IF (NODWEB.LT.3) NODWEB = 3
      IF (NODWEB.GT.20) NODWEB = 19
C BEG APR 2006
      REWIND IFILE
      CALL DATUM(IFILE,87,1,2,NDFLGS,REALL,CHARAC,IOUT,0,IPROMP)
      IF (NDFLGS.LT.5) NDFLGS = 5
      IF (NDFLGS.GT.13) NDFLGS = 13
      IF (NDFLGS.NE.5.AND.NDFLGS.NE.9.AND.NDFLGS.NE.13) NDFLGS = 5
C
      CALL DATUM(IFILE,88,1,2,NDFLGR,REALL,CHARAC,IOUT,0,IPROMP)
      IF (NDFLGR.LT.5) NDFLGR = 5
      IF (NDFLGR.GT.13) NDFLGR = 13
      IF (NDFLGR.NE.5.AND.NDFLGR.NE.9.AND.NDFLGR.NE.13) NDFLGR = 5
      REWIND IFILE
C END APR 2006
C BEG AUG 2006
      CALL MOVER(0,0,NUMSTR,1,50)
      CALL MOVER(0,0,NUMRNG,1,50) 
      CALL DATUM(IFILE,700,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,701,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      NUMMXS = 0
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 1805 
 1801 CONTINUE
      NUMMXS = NUMMXS + 1
      CALL DATUM(IFILE,702,1,2,NUMSTR(NUMMXS),REALL,CHARAC,
     1                                          IOUT,0,IPROMP)
      IF (NUMSTR(NUMMXS).GT.NSTRNG) THEN
         WRITE(6,'(A)') ' NUMSTR is too high. Try again.'
         CALL EXIT
      ENDIF
      IF (NUMSTR(NUMMXS).LE.0) THEN
         WRITE(6,'(A)') ' NUMSTR is too low. Try again.'
         CALL EXIT
      ENDIF
      NUMMXM = NUMMXS-1
      IF (NUMMXM.NE.0) THEN
         DO 1803 IBEFOR = 1,NUMMXM
            IF (NUMSTR(NUMMXS).EQ.NUMSTR(IBEFOR)) THEN
               WRITE(6,'(A)')
     1       ' You have already selected this one. Try again.'
               CALL EXIT
            ENDIF
 1803    CONTINUE
      ENDIF
      CALL DATUM(IFILE,703,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
        REWIND IFILE
        GO TO 1801
      ENDIF
 1805 CONTINUE
C
      CALL DATUM(IFILE,704,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      NUMMXR = 0
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 1810
 1806 CONTINUE
      NUMMXR = NUMMXR + 1
      CALL DATUM(IFILE,705,1,2,NUMRNG(NUMMXR),REALL,CHARAC,
     1                                          IOUT,0,IPROMP)
      IF (NUMRNG(NUMMXR).GT.NRINGS) THEN
         WRITE(6,'(A)') ' NUMRNG is too high. Try again.'
         CALL EXIT
      ENDIF
      IF (NUMRNG(NUMMXR).LE.0) THEN
         WRITE(6,'(A)') ' NUMRNG is too low. Try again.'
         CALL EXIT
      ENDIF
      NUMMXM = NUMMXR-1
      IF (NUMMXM.NE.0) THEN
         DO 1808 IBEFOR = 1,NUMMXM
            IF (NUMRNG(NUMMXR).EQ.NUMRNG(IBEFOR)) THEN
               WRITE(6,'(A)')
     1       ' You have already selected this one. Try again.'
               CALL EXIT
            ENDIF
 1808    CONTINUE
      ENDIF
      CALL DATUM(IFILE,706,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
        REWIND IFILE
        GO TO 1806
      ENDIF
 1810 CONTINUE
C
      INDXRV = 0
      IF (PEDG.AND.INDIC.NE.1) THEN
       CALL DATUM(IFILE,710,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
       IF (ANSL1('Y',ANSOUT,INFILE)) INDXRV = 1 
      ENDIF
C
C END AUG 2006
C
C BEG DEC 2006
C  plasticity?
      CALL DATUM(IFILE,751,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,752,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IPLAST = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) IPLAST = 1
C
C  The use of plasticity is quite limited: only for shells of one layer
C  and if the shells have stiffeners, their segments must all be of one layer.
C  The stiffener model must be as an assemblage of shell units; there must
C  be no beams. The stiffeners cannot be smeared out. The material is
C  assumed to be isotropic, so non-isotropic material must be elastic.
      IF (ISMRST.NE.0) IPLAST = 0
      IF (ISMRRG.NE.0) IPLAST = 0
      IF (ISTRSB.NE.0.AND.ISTRSB.NE.3) IPLAST = 0
      IF (IRNGSB.NE.0.AND.IRNGSB.NE.3) IPLAST = 0
      IF (IBMSTR.NE.0.AND.IBMSTR.NE.3) IPLAST = 0
      IF (IBMRNG.NE.0.AND.IBMRNG.NE.3) IPLAST = 0
      DO 1809 ILOOP = 1,2
         NSEGIL = NSEG(ILOOP)
C        DO 1807 ISEG  = 1,NSEGIL
C           IF (NLAYER(ISEG,ILOOP).GT.1) IPLAST=0
C1807    CONTINUE
 1809 CONTINUE
C
      NESP = 0
      NLIP = 0
      IPLAS = 0
      IPLST = 0
      IF (IPLAST.EQ.1) THEN
         IPLAS = 1
         IPLST = 1
C provide stress-strain curve, etc.
 1812 CONTINUE
         NESP = NESP + 1
         REWIND IFILE
         CALL DATUM(IFILE,753,1,2,INT,SSCURV(NESP,1),CHARAC,
     1                                                IOUT,NESP,IPROMP)
         CALL DATUM(IFILE,754,1,2,INT,SSCURV(NESP,2),CHARAC,
     1                                                IOUT,NESP,IPROMP)
         CALL DATUM(IFILE,755,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 1812 
         CALL DATUM(IFILE,756,1,2,NLIP,REALL,CHARAC,IOUT,0,IPROMP)
C23456789012345678901234567890123456789012345678901234567890123456789012
         CALL MOVER(SSCURV,1,SSCUR2,1,40)
         DO 1813 I=1,NESP
            SSCUR2(I,2) = SSCURV(I,2)/2.
 1813    CONTINUE
      ENDIF
C END DEC 2006
      IBC12 = 2
      CALL DATUM(IFILE,998,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('N',ANSOUT,INFILE)) IBC12 = 1
      IF (YSTAGS/ABS(R).LT.PI) IBC12 = 1
C BEG MAR 2005
      IF (IFLAT.EQ.1) IBC12 = 1
C END MAR 2005
C BEG MAR 2007
      IF (ITOTAL.EQ.1) IBC12 = 2
C END MAR 2007
C  IBC12 = 1 means apply -Nxy to cyl. end at x=0
C  IBC12 = 2 means apply torque, 2*pi*r**2*(Nxy), at x=0 and
C            use the "least squares" loading on the one f.e. unit.
C
      REWIND IFILE
      CALL DATUM(IFILE,380,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      ISWAY = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) ISWAY = 1
      IF (IBMSTR.EQ.1.AND.IBMRNG.EQ.1) ISWAY = 1
      IF (IBMSTR.EQ.5.AND.IBMRNG.EQ.5) ISWAY = 1
      IF (NSTRNG.EQ.0.AND.NRINGS.EQ.0) ISWAY = 1
C BEG OCT 2004
C     IF (ISTIF(1).EQ.3.AND.ISTIF(2).EQ.3
C    1 .AND.TX(2).EQ.TX(1).AND.TY(2).EQ.TX(1)) ISWAY = 1
C END OCT 2004
C
      REWIND IFILE
      IEDGE = 0
      NCONST = 0
C BEG AUG 2006
      ISYMM = 0
      IF (ICLOSE.EQ.0) THEN
       CALL DATUM(IFILE,496,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
       IF (ANSL1('Y',ANSOUT,INFILE)) ISYMM = 1
       IF (ISYMM.EQ.0)
     1 CALL DATUM(IFILE,499,1,2,IEDGE,REALL,CHARAC,IOUT,0,IPROMP)
C BEG FEB 2007
       IF (IFLAT.EQ.1) IEDGE=0
C END FEB 2007
      ENDIF
C END AUG 2006
C BEG OCT 2009
      IEDGE2 = 0
      REWIND IFILE
      CALL DATUM(IFILE,400,1,2,IEDGE2,REALL,CHARAC,IOUT,0,IPROMP)
C END OCT 2009
C BEG NOV 2009
      IBCX0XL = 0
      CALL DATUM(IFILE,404,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,405,1,2,IBCX0XL,REALL,CHARAC,IOUT,0,IPROMP)
      IF (IBMSTR.EQ.1.OR.IBMSTR.EQ.5) IBCX0XL = 0
      IF (ISMRST.EQ.1) IBCX0XL = 0
C END NOV 2009
C BEG JAN 2010
      IF (ISMRST.EQ.1) IEDGE2 = 0
      IF (ICLOSE.EQ.1) IEDGE2 = 0
C END JAN 2010
C END NEW INPUT DATA
C
C BEG OCT 2004
C  About 30 output statements modified and moved down below.
C END OCT 2004
C
C BEG MAR 2006
C Following statements moved up:
C     MULT = 1
C     IF (IELMNT.EQ.480) MULT = 2
C END MAR 2006
C BEG OCT 2004
C     Statements about B2SAVE, etc. moved up.
C END OCT 2004
C
C NEXT, DO THE F-1 CARDS (NROWS,NCOLS) FOR EACH SHELL UNIT):
C
C FIRST, GET NUMBER OF ROWS (NROWS) AND COLUMNS (NCOLS) IN CYL. SHELL...
      NROWS(1) = NODEX
      IF (NRINGS.GE.2.AND.IXUNI.EQ.1) THEN
         IF (IRENDS.EQ.1) THEN
            NNX = 0
            NROWS(1) = MULT*NELRNG*(NRINGS-1) + 1
            DXX = XSTAGS/FLOAT(NROWS(1)-1)
            NNODES = NROWS(1)
            DO 575 I = 1,NNODES
               DX(I) = DXX
  575       CONTINUE
C BEG FEB 2005
C           IF (IRNGSB.GT.1) THEN
C              L = 0
C              DX0 = BSUBXM(2)/FLOAT(MULT*NELRSB)
C              NRNGS1 = NRINGS - 1
C              NRGSB1 = NRGSUB + 1
C              KUP = MULT*NELRSB
C              DO 600 IRING = 1,NRNGS1
C              DO 590 J = 1,NRGSB1
C              DO 580 K = 1,KUP
C                 L = L + 1
C                 DX(L) = DX0
C                 IF (J.EQ.1.OR.J.EQ.NRGSB1) DX(L) = DX0/2.
C 580          CONTINUE
C 590          CONTINUE
C 600          CONTINUE
C           ENDIF
C END FEB 2005
         ELSE
            NNX = 3
            NELEND = NELRNG/2
            IF (NELEND.LT.1) NELEND = 1
            NNODES = MULT*NELEND + 1
            NROWS(1) = MULT*NELRNG*(NRINGS-1) + 2 * (NNODES-1) + 1
            SEGLX(1) = 0.5*B(2)
            SEGLX(3) = SEGLX(1)
            SEGLX(2) = XSTAGS - B(2)
            NSEGX(1)   = NNODES - 1
            NSEGX(3)   = NNODES - 1
            NSEGX(2)   = NROWS(1) - 2*(NNODES-1) - 1
            DO 605 I = 1,NNODES
             DX(I) = 0.5*B(2)/FLOAT(NNODES-1)
  605       CONTINUE
            IROWSI = NROWS(1)
            NNODS1 = NNODES + 1
            DO 610 I = NNODS1,IROWSI
             DX(I) = B(2)/FLOAT(MULT*NELRNG)
  610       CONTINUE
            IROWSM = NROWS(1) - NSEGX(3) + 1
            DO 615 I = IROWSM,IROWSI
             DX(I) = DX(1)
  615       CONTINUE
         ENDIF
         NODEX = NROWS(1)
      ENDIF
C     End of (NRINGS.GE.2.AND.IXUNI.EQ.1) condition
C BEG MAR 2005
C     NCOLS(1) = 121
C BEG FEB 2006
C BEG FEB 2010
      NCOLS(1) = NODEY
      IF (ISMRST.EQ.0.AND.IYUNI.EQ.1) NCOLS(1) = MULT*NELSTR + 1
C END FEB 2010
      IF (IYUNI.EQ.1.AND.NELSTR.LT.1) THEN
C BEG FEB 2010
         NCOLS(1) = NODEY 
C END FEB 2010
         IF (NELCIR.GT.0) THEN
            NCOLS(1) = MULT*NELCIR + 1
         ENDIF
C END FEB 2006
         IF (ISTIF(1).EQ.0.AND.ICLOSE.EQ.0) THEN
            RATIO = B(1)/(PI*ABS(R))
            NCOLS(1) = FLOAT(NCOLS(1))*RATIO
            IF (MOD(NCOLS(1),2).EQ.0) NCOLS(1) = NCOLS(1) + 1
         ENDIF
      ENDIF
C END MAR 2005
C BEG FEB 2006
C     IF (NSTRNG.GT.1) THEN
C BEG FEB 2010
C     IF (NSTRNG.GT.1.AND.NELSTR.GT.0) THEN
      IF (NSTRNG.GT.1.AND.NELSTR.GT.0.AND.ISMRST.EQ.0) THEN
C END FEB 2006
         IF (ICLOSE.EQ.1) NCOLS(1) = MULT*NELSTR*NSTRNG + 1
         IF (ICLOSE.EQ.0) NCOLS(1) = MULT*NELSTR*(NSTRNG-1) + 1
      ENDIF
      ICOLST(NSTRNG+1) = NCOLS(1)
C BEG MAR 2005
      WRITE(6,'(A,I4,A,/,(1P,5E12.4))')
     1' NODEX=',NODEX,'; AXIAL NODAL SPACING, DX=',(DX(I),I=1,NODEX)
C END MAR 2005
C
C FIND THE ROWS CORRESPONDING TO THE LINES OF ATTACHMENT OF THE RINGS...
      IF (NRINGS.GT.0) THEN
         KRING = 1
         XRING = -B(2)
         IF (IRENDS.NE.1) XRING = -B(2)/2.
         DO 625 I = 1,NRINGS
            XRING = XRING + B(2)
C BEG JUN 2006
C           XPOS = -DX(1)
C           DO 620 J = 1,NODEX
C              XPOS = XPOS + DX(J)
            XPOS = 0. 
            DO 620 J = 2,NODEX
               XPOS = XPOS + DX(J-1)
C END JUN 2006
               XDIF = ABS(XRING - XPOS)/B(2)
               IF (XPOS.GE.XRING) THEN
                  XDIF1 = ABS(XPOS - XRING)
C BEG JUN 2006
C                 XDIF2 = ABS(XRING -(XPOS-DX(J)))
                  XDIF2 = ABS(XRING -(XPOS-DX(J-1)))
C END JUN 2006
                  XMIN = MIN(XDIF1,XDIF2)
                  XMIN1 = ABS(XMIN-XDIF1)/B(2)
                  XMIN2 = ABS(XMIN-XDIF2)/B(2)
                  IF (XMIN1.LT.0.00001) K = J
                  IF (XMIN2.LT.0.00001) K = J - 1
                  IF (XDIF.LT.0.00001)  K = J
                  IF (K.EQ.J) XRINGX(KRING) = XPOS
C BEG JUN 2006
C                 IF (K.EQ.(J-1)) XRINGX(KRING) = XPOS - DX(J)
                  IF (K.EQ.(J-1)) XRINGX(KRING) = XPOS - DX(J-1)
C END JUN 2006
                  IROWRG(KRING) = K
                  KRING = KRING + 1
                  GO TO 621
               ENDIF
  620       CONTINUE
  621       CONTINUE
  625    CONTINUE
C BEG OCT 2004
         IF (IRENDS.EQ.1) THEN
            IROWRG(NRINGS) = NROWS(1)
            XRINGX(NRINGS) = XSTAGS
         ENDIF
C
         WRITE(6,'(A,/,(5I10))')
     1 ' Row numbers of major ring locations, IROWRG(i)=',
     1   (IROWRG(I),I=1,NRINGS)
         WRITE(6,'(A,/,(1P,5E12.4))')
     1 ' Axial stations of major rings, XRINGX(i)=',
     1   (XRINGX(I),I=1,NRINGS)
C END OCT 2004
      ENDIF
C     End of (NRINGS.GT.0) condition
C
C BEG OCT 2004
C  Find the rows corresponding to the sub-ring lines of attachment...
      IF (IRNGSB.GE.2.AND.NRINGS.GE.2) THEN
         IENDX = NRINGS - 1
C BEG MAR 2005
         NRNGSB = NRGSUB*IENDX
         XSUBX1(1) =  BSUBXM(2)/2.
         DO 622 I = 2,NRNGSB
            XSUBX1(I) = XSUBX1(I-1) + BSUBXM(2)
  622    CONTINUE
         WRITE(6,'(/,A,I3,A,/,(1P,5E12.4))')
     1 ' Axial stations of ',NRNGSB,' subrings, XSUBX1(i)=',
     1   (XSUBX1(I),I=1,NRNGSB)
         DO 624 I = 1,NRNGSB
            XCOORD = -DX(1)
            DO 623 J = 1,NODEX
C BEG MAR 2007
               J1 = J
               IF (J.GT.1) J1 = J - 1
               XCOORD = XCOORD + DX(J1)
C END MAR 2007
C              WRITE(6,'(A,2I3,1P,3E12.4)')
C    1       ' I,J,DX(J),XSUBX1(I),XCOORD=',
C    1         I,J,DX(J),XSUBX1(I),XCOORD
               IF (XCOORD/BSUBXM(2).LT.(XSUBX1(I)/BSUBXM(2) - 0.001))
     1                                              GO TO 623
               DIFF = ABS((XCOORD - XSUBX1(I))/XSUBX1(I))
C              WRITE(6,'(A,1P,E12.4)')' DIFF=',DIFF
               IF (DIFF.LE.0.001) THEN
                  XSUBX(I) = XSUBX1(I)
                  IRRGSB(I) = J
                  GO TO 624
               ELSE
                  WRITE(6,'(A,I3,A,A,1P,E12.4,A,1P,E12.3)')
     1          ' Axial shift of subring no.',I,' required.',
     1          ' Proper  location=',XSUBX1(I),
     1          ' Shifted location=',XCOORD
                  XSUBX(I) = XCOORD
                  IRRGSB(I) = J
                  IF (DIFF.LE.0.1) GO TO 624
                  WRITE(6,'(/,A,/,A,A)') ' Axial shift is too large.',
     1          ' Arrange your variable nodal point spacing',
     1          ' more carefully, please.'
                  CALL EXIT
                ENDIF
  623       CONTINUE
  624    CONTINUE
         LRINGS = NRNGSB
C END MAR 2005
      ENDIF
C     End of (IRNGSB.GE.2.AND.NRINGS.GE.2) condition
C END OCT 2004
C
C  FIND THE COLUMNS CORRESPONDING TO THE STRINGER LINES OF ATTACHMENT...
C BEG MAR 2006
C     IF (NSTRNG.GT.0) THEN
      IF (NSTRNG.GT.0.AND.IYUNI.EQ.1) THEN
C END MAR 2006
         JS = -MULT*NELSTR + 1
C BEG MAR 2006
         YSTRGX(1) = 0.0
C END MAR 2006
         DO 629 I = 1,NSTRNG
          JS = JS + MULT*NELSTR
          ICOLST(I) = JS
C BEG MAR 2006
          IF (I.GT.1) YSTRGX(I) = YSTRGX(I-1) + FMULT*B(1)
C END MAR 2006
  629    CONTINUE
C BEG MAR 2006
C
         IF (NELSTR.GT.0) WRITE(6,'(A,/,(5I10))')
     1 ' Column numbers of major stringer locations, ICOLST(i)=',
     1   (ICOLST(I),I=1,NSTRNG)
         WRITE(6,'(A,/,(1P,5E12.4))')
     1 ' Circumferential stations of major stringers, YSTRGX(i)=',
     1   (YSTRGX(I),I=1,NSTRNG)
C END MAR 2006
      ENDIF
C BEG OCT 2004
C  Find the columns corresponding to the sub-stringer lines of attachment...
C BEG MAR 2006
C     IF (ISTRSB.GE.2.AND.NSTRNG.GE.2) THEN
      IF (ISTRSB.GE.2.AND.NSTRNG.GE.2.AND.IYUNI.EQ.1) THEN
C END MAR 2006
         IENDX = NSTRNG
         IF (ICLOSE.EQ.0) IENDX = NSTRNG - 1
         L = 0
         DO 635 I = 1,IENDX
            K = ICOLST(I)
            DO 630 J = 1,NSTSUB
               L = L + 1
               IDIVX = 1
C BEG FEB 2005  (take the comment away)
C              IF (J.EQ.1) IDIVX = 2
               IF (J.EQ.1) IDIVX = 2
C END FEB 2005
               K = K + MULT*NELSSB/IDIVX
               IF (L.GT.500) THEN
C BEG DEC 2004
                  WRITE(6,'(A)')
C END DEC 2004
     1          ' Dimension of ICSTSB (500) exceeded. CALL EXIT'
                  CALL EXIT
               ENDIF
               ICSTSB(L) = K
  630       CONTINUE
  635    CONTINUE
         LSTRGS = L
         NSTRSB = L
C BEG FEB 2005
         THETA2 = 360.
         DTHET2 = THETA2/FLOAT(NSTRNG)
         NSTRX1 = NSTRNG
         IF (ICLOSE.EQ.0) THEN
            THETA2 = 360.0*YSTAGS/(2.*PI*ABS(R))
            DTHET2 = THETA2/FLOAT(NSTRNG-1)
            NSTRX1 = NSTRNG - 1
         ENDIF
         DTHET0 = DTHET2/FLOAT(NSTSUB)
C BEG APR 2006
         THETA = -DTHET2 + ANGBEG
C END APR 2006
         K = 0
         DO 640 ISTR = 1,NSTRX1
            THETA = THETA + DTHET2
            DO 638 J = 1,NSTSUB
               K = K + 1
               IF (J.EQ.1) THEN
                  THETSB(K) = THETA + DTHET0/2.
               ELSE
                  THETSB(K) = THETA + DTHET0/2. + FLOAT(J-1)*DTHET0
               ENDIF
  638       CONTINUE
  640    CONTINUE
C END FEB 2005
C BEG MAR 2005
         IF (IFLAT.EQ.1) THEN
            DYSTRG = YSTAGS/FLOAT(NSTRNG-1)
            DYSTSB = DYSTRG/FLOAT(NSTSUB)
            YSTRG  = -DYSTRG
            K = 0
            DO 642 ISTR = 1,NSTRX1
               YSTRG = YSTRG + DYSTRG 
               DO 641 J = 1,NSTSUB
                  K = K + 1
                  IF (J.EQ.1) THEN
                     YSTSB(K) = YSTRG + DYSTSB/2.
                  ELSE
                     YSTSB(K) = YSTRG + DYSTSB/2. + FLOAT(J-1)*DYSTSB
                  ENDIF
  641          CONTINUE
  642       CONTINUE
         ENDIF
C END MAR 2005
      ENDIF
C     End of (ISTRSB.GE.2.AND.NSTRNG.GE.2.AND.IYUNI.EQ.1) condition
C BEG MAR 2006
C FIND THE COLUMNS CORRESPONDING TO THE LINES OF ATTACHMENT OF THE STRINGERS...
      IF (NSTRNG.GT.0.AND.IYUNI.EQ.0) THEN
         KSTRNG = 1
         YSTRNG = -B(1)*FMULT
         DO 6250 I = 1,NSTRNG
            YSTRNG = YSTRNG + B(1)*FMULT
C BEG JUN 2006
C           YPOS = -DY(1)
C           DO 6200 J = 1,NODEY
C              YPOS = YPOS + DY(J)
            YPOS = 0. 
            DO 6200 J = 2,NODEY
               YPOS = YPOS + DY(J-1)
C END JUN 2006
               YDIF = ABS(YSTRNG - YPOS)/(B(1)*FMULT)
               IF (YPOS.GE.YSTRNG) THEN
                  YDIF1 = ABS(YPOS - YSTRNG)
C BEG JUN 2006
C                 YDIF2 = ABS(YSTRNG -(YPOS-DY(J)))
                  YDIF2 = ABS(YSTRNG -(YPOS-DY(J-1)))
C END JUN 2006
                  YMIN = MIN(YDIF1,YDIF2)
                  YMIN1 = ABS(YMIN-YDIF1)/(B(1)*FMULT)
                  YMIN2 = ABS(YMIN-YDIF2)/(B(1)*FMULT)
                  IF (YMIN1.LT.0.00001) K = J
                  IF (YMIN2.LT.0.00001) K = J - 1
                  IF (YDIF.LT.0.00001)  K = J
                  IF (K.EQ.J) YSTRGX(KSTRNG) = YPOS
C BEG JUN 2006
C                 IF (K.EQ.(J-1)) YSTRGX(KSTRNG) = YPOS - DY(J)
                  IF (K.EQ.(J-1)) YSTRGX(KSTRNG) = YPOS - DY(J-1)
C END JUN 2006
                  ICOLST(KSTRNG) = K
                  KSTRNG = KSTRNG + 1
                  GO TO 6210
               ENDIF
 6200       CONTINUE
 6210       CONTINUE
 6250    CONTINUE
C
         IF (ICLOSE.EQ.0) THEN
            ICOLST(NSTRNG) = NCOLS(1)
            YSTRGX(NSTRNG) = YSTAGS*FMULT
         ENDIF
C
C BEG JUN 2006
         WRITE(6,'(/,A,I4,A,/,(1P,5E12.4))')
     1  ' NODEY=',NODEY,'; CIRCUMFERENTIAL NODAL SPACING, DY=',
     1    (DY(I),I=1,NODEY)
C END JUN 2006
         WRITE(6,'(A,/,(5I10))')
     1 ' Column numbers of major stringer locations, ICOLST(i)=',
     1   (ICOLST(I),I=1,NSTRNG)
         WRITE(6,'(A,/,(1P,5E12.4))')
     1 ' Circumferential stations of major stringers, YSTRGX(i)=',
     1   (YSTRGX(I),I=1,NSTRNG)
      ENDIF
C     End of (NSTRNG.GT.0.AND.IYUNI.EQ.0) condition
C
C  Find the columns corresponding to the sub-stringer lines of attachment...
      IF (ISTRSB.GE.2.AND.NSTRNG.GE.2.AND.IYUNI.EQ.0) THEN
         IENDY = NSTRNG - 1
         NSTRSB = NSTSUB*IENDY
         YSUBY1(1) =  FMULT*BSUBXM(1)/2.
         DO 6220 I = 2,NSTRSB
            YSUBY1(I) = YSUBY1(I-1) + FMULT*BSUBXM(1)
 6220    CONTINUE
         WRITE(6,'(/,A,I3,A,/,(1P,5E12.4))')
     1 ' Circumferential stations of ',NSTRSB,
     1 ' substringers, YSUBY1(i)=', (YSUBY1(I),I=1,NSTRSB)
         DO 6240 I = 1,NSTRSB
            YCOORD = -DY(1)
            DO 6230 J = 1,NODEY
C BEG MAR 2007
               J1 = J
               IF (J.GT.1) J1 = J - 1
               YCOORD = YCOORD + DY(J1)
C END MAR 2007
C              WRITE(6,'(A,2I3,1P,3E12.4)')
C    1       ' I,J,DY(J),YSUBY1(I),YCOORD=',
C    1         I,J,DY(J),YSUBY1(I),YCOORD
               IF (YCOORD/(FMULT*BSUBXM(1))
     1          .LT.(YSUBY1(I)/(FMULT*BSUBXM(1)) - 0.001)) GO TO 6230
               DIFF = ABS((YCOORD - YSUBY1(I))/YSUBY1(I))
C              WRITE(6,'(A,1P,E12.4)')' DIFF=',DIFF
               IF (DIFF.LE.0.001) THEN
                  YSUBY(I) = YSUBY1(I)
                  ICSTSB(I) = J
                  GO TO 6240
               ELSE
                  WRITE(6,'(A,I3,A,A,1P,E12.4,A,1P,E12.3)')
     1          ' Circumferential shift of substringer no.',I,
     1          ' required.',
     1          ' Proper  location=',YSUBY1(I),
     1          ' Shifted location=',YCOORD
                  YSUBY(I) = YCOORD
                  ICSTSB(I) = J
                  IF (DIFF.LE.0.1) GO TO 6240
                  WRITE(6,'(/,A,/,A,A)')
     1          ' Circumfer. shift is too large.',
     1          ' Arrange your variable nodal point spacing',
     1          ' more carefully, please.'
                  CALL EXIT
                ENDIF
 6230       CONTINUE
 6240    CONTINUE
         LSTRGS = NSTRSB
      ENDIF
C     End of (ISTRSB.GE.2.AND.NSTRNG.GE.2.AND.IYUNI.EQ.0) condition
C END MAR 2006
C
C BEG OCT 2004: following section moved down from above and modified...
C  WRITE OUT STUFF TO SCREEN TO REASSURE THE USER...
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(6,'(/,A)')
     1' ==============================================================='
      WRITE(6,'(A)')' VALUES USED TO GENERATE STAGS INPUT FILE *.INP'
      WRITE(6,'(A,1P,E12.4,A,1P,E12.4,A)')
     1' Panel dimensions (axial,circ.)=(XSTAGS=',XSTAGS,', YSTAGS=',
     1 YSTAGS,')'
      WRITE(6,'(/,A,/,6I6)') '   IREF,ISWAY,IBC12,IEDGE,ICLOSE,NODWEB=',
     1                           IREF,ISWAY,IBC12,IEDGE,ICLOSE,NODWEB
      WRITE(6,'(/,A,/,A,/,6I7,1PE12.4)')
     1' MAJOR STRINGER QUANTITIES:',
     1'   NSTRNG,ISMRST,IBMSTR,NELSTR,ILINK1,IZSTIF(1),R=',
     1    NSTRNG,ISMRST,IBMSTR,NELSTR,ILINK1,IZSTIF(1),R
C
      NSTRSX = 0
      IF (NELSSB.GT.0) THEN
         IF (ICLOSE.EQ.0) NSTRSX = (NSTRNG-1)*NSTSUB
         IF (ICLOSE.EQ.1) NSTRSX =   FLOAT(NSTRNG)*NSTSUB
         HEIGHT = ZSTRSB(2) - ZSTRSB(1)
         THICKX = YSTRSB(2) - YSTRSB(1)
         WRITE(6,'(/,A,/,A,/,4I7,1P,3E12.4)')
     1 ' SUBSTRINGER QUANTITIES:',
     1 ' NSTRSB,ISTRSB,NSTSUB,NELSSB, BSUBXM(1),    HEIGHT,    THICK=',
     1   NSTRSX,ISTRSB,NSTSUB,NELSSB,BSUBXM(1),HEIGHT,THICKX
         WRITE(6,'(/,A,I5,/,A,1P,E12.4,/,A,/,(10I7))')
     1 ' Linking for substringers, LNKSB1 =',LNKSB1,
     1 ' Gap between substringer root and skin ref. surf, GAPSB1=',
     1   GAPSB1,
     1 ' Column numbers for substringer locations, ICSTSB(i)=',
     1   (ICSTSB(I),I=1,NSTRSB)
         IF (NSTRSB.NE.LSTRGS) WRITE(6,'(/,A,2I10,/)')
     1 ' MISMATCH IN NUMBER OF SUBSTRINGERS: NSTRSB,LSTRGS=',
     1    NSTRSB,LSTRGS
      ENDIF
C
C BEG FEB 2007
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(6,'(/,A,/,A,A,/,7I7,1P,2E12.4)')
     1' MAJOR RING QUANTITIES:',
     1'   NRINGS,ISMRRG,IBMRNG,NELRNG,ILINK2,IZSTIF(2),IPOSNR,',
     1   'TY(2),TX(1)=',
     1    NRINGS,ISMRRG,IBMRNG,NELRNG,ILINK2,IZSTIF(2),IPOSNR,
     1    TY(2),TX(1)
C END FEB 2007
C
      NRNGSX = 0
      IF (NELRSB.GT.0) THEN
         NRNGSX = (NRINGS-1)*NRGSUB
         HEIGHT = ZRNGSB(2) - ZRNGSB(1)
         THICKX = YRNGSB(2) - YRNGSB(1)
         WRITE(6,'(/,A,/,A,/,4I7,1P,3E12.4)')
     1 ' SUBRING QUANTITIES:',
     1 ' NRNGSB,IRNGSB,NRGSUB,NELRSB, BSUBXM(2),    HEIGHT,    THICK=',
     1   NRNGSX,IRNGSB,NRGSUB,NELRSB,BSUBXM(2),HEIGHT,THICKX
         WRITE(6,'(/,A,I5,/,A,1P,E12.4,/,A,/,(10I7))')
     1 ' Linking for subrings, LNKSB2 =',LNKSB2,
     1 ' Gap between subring root and skin ref. surf, GAPSB2=',
     1   GAPSB2,
     1 ' Row numbers for subring locations, IRRGSB(i)=',
     1   (IRRGSB(I),I=1,NRNGSB)
         WRITE(6,'(/,A,/,(1P,5E12.4))')
     1 ' Axial locations of subrings, XSUBX(i)=',
     1   (XSUBX(I),I=1,NRNGSB)
         IF (NRNGSX.NE.LRINGS) WRITE(6,'(/,A,2I10,/)')
     1 ' MISMATCH IN NUMBER OF SUBRINGS: NRNGSB,LRINGS=',NRNGSB,LRINGS
      ENDIF
      WRITE(6,'(A,/)')
     1' ==============================================================='
C END OCT 2004
C
      INDICP = INDIC
      IF (INDIC.EQ.1.AND.ISTIF(1).EQ.0) INDICP = -INDIC
      PI = 3.14159265
C
      IBG = 1
      INND = 2
      IF (ISTIF(2).EQ.0) INND = 1
      MAXMAT = 0
      MAXWLL = 0
      IWALL = 0
      WRDWAL(1) = 'Not edge'
      WRDWAL(2) = '        '
      WRDWAL(3) = '        '
C BEG OCT 2004
      WRDWAL(4) = '        '
      WRDWAL(5) = '        '
C END OCT 2004
C  Following pertain to material properties for members not at an edge...
      DO 1010 ILOOP = IBG,INND
      NSEGUP = NSEG(ILOOP)
      ISEGB = 1
      IF (ILOOP.EQ.2) ISEGB = 2
      IF (ILOOP.EQ.2.AND.B2(2).EQ.0.0) ISEGB = 3
      DO 1000 ISEG = ISEGB,NSEGUP
         IF (ISEG.EQ.1) THEN 
            WRDWAL(2) = 'cyl.skin'
            WRDWAL(3) = '  skin  '
C BEG OCT 2004
            IF (IMTSUB(1,1).GT.0) WRDWAL(4) = 'substrng'
            IF (IMTSUB(1,2).GT.0) WRDWAL(5) = 'subring '
C END OCT 2004
         ENDIF
         IF (ISEG.NE.1) THEN
            IF (ILOOP.EQ.1) WRDWAL(2) = 'stringer'
            IF (ILOOP.EQ.2) WRDWAL(2) = '  ring  '
         ENDIF
         IF (ISEG.EQ.2) WRDWAL(3) = 'fayflnge'
         IF (ISEG.EQ.3) WRDWAL(3) = '  web   '
         IF (ISEG.EQ.4) WRDWAL(3) = 'outflnge'
         NLAY = NLAYER(ISEG,ILOOP)
         IF (ISEG.EQ.2.AND.IZSTIF(ILOOP).EQ.0)
     1   NLAY = NLAY - NLAYER(1,1)
C BEG OCT 2004
         IF (NLAY.EQ.0) GO TO 500 
C END OCT 2004
         IWALL = IWALL + 1
         IWALNO(ISEG,ILOOP,1) = IWALL
         IWALL1 = IWALL - 1
         ITABNO(ISEG,ILOOP,1) = IWALL1
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRDTOT(IWALL) =
     1            'C '//WRDWAL(1)//'; '//WRDWAL(2)//'; '//WRDWAL(3)
     1                                 //' (shell unit wall props   )'
         WRDTAB(IWALL1) =
     1              WRDTOT(IWALL)(1:30)//' (beam cross section props)'
         WRDMAT(IWALL1) = 
     1              WRDTOT(IWALL)(1:30)//' (equivalent matl for beam)'
         NLAYRS(IWALL) = NLAY
         RHOAVE(IWALL) = 0.0
         DO 350 ILAY = 1,NLAY
            K = LTYPE(ILAY,ISEG,ILOOP)
            M = MATL(K)
            MAXMAT = MAX(MAXMAT,M)
            JLAY = NLAY + 1 - ILAY
            JMAT(JLAY,IWALL) = M
            THIK(JLAY,IWALL) = T(K)
            ANGL(JLAY,IWALL) = ANGLE(K)
            E1MAT(JLAY,IWALL) = E1(M)
            E2MAT(JLAY,IWALL) = E2(M)
            G12MAT(JLAY,IWALL) = G(M)
            AL1MAT(JLAY,IWALL) = ALPHA1(M)
            AL2MAT(JLAY,IWALL) = ALPHA2(M)
            FNUMAT(JLAY,IWALL) = FNU(M)
            RHOMAT(JLAY,IWALL) = DENS(M)
            G13MAT(JLAY,IWALL) = G13(M)
            G23MAT(JLAY,IWALL) = G23(M)
            RHOAVE(IWALL) = RHOAVE(IWALL) +T(K)*DENS(M)
  350    CONTINUE
C BEG OCT 2004
         IF (ISEG.EQ.1) GO TO 500 
C END OCT 2004
         IF (NLAY.EQ.1) THEN
            E1TAB(IWALL1) = E1MAT(1,IWALL)
            E2TAB(IWALL1) = E2MAT(1,IWALL)
            G12TAB(IWALL1)= G12MAT(1,IWALL)
            FNUTAB(IWALL1)= FNUMAT(1,IWALL)
            AL1TAB(IWALL1)= AL1MAT(1,IWALL)
            AL2TAB(IWALL1)= AL2MAT(1,IWALL)
            RHOTAB(IWALL1)= RHOMAT(1,IWALL)
            GO TO 360 
         ENDIF
         IF (ILOOP.EQ.1) THEN
           IF (ISEG.NE.2.OR.IZSTIF(ILOOP).EQ.1) THEN
              E1TAB(IWALL1) =
     1          (CX(1,1,ISEG)-CX(1,2,ISEG)**2/CX(2,2,ISEG))/TX(ISEG)
              E2TAB(IWALL1) =
     1          (CX(2,2,ISEG)-CX(1,2,ISEG)**2/CX(1,1,ISEG))/TX(ISEG)
              G12TAB(IWALL1) = CX(3,3,ISEG)/TX(ISEG)
              FNUTAB(IWALL1) = CX(1,2,ISEG)/CX(1,1,ISEG)
              RHOTAB(IWALL1) = RHOAVE(IWALL)/TX(ISEG)
           ELSE
             C112 = CX(1,1,2) - CX(1,1,1)
             C222 = CX(2,2,2) - CX(2,2,1)
             C122 = CX(1,2,2) - CX(1,2,1)
             IF (C122.LT.0.) C122 = 0.
             C332 = CX(3,3,2) - CX(3,3,1)
             TX2 = TX(2) - TX(1)
             E1TAB(IWALL1) = (C112 - C122**2/C222)/TX2
             E2TAB(IWALL1) = (C222 - C122**2/C112)/TX2
             G12TAB(IWALL1) = C332/TX2
             FNUTAB(IWALL1) = C122/C112
             RHOTAB(IWALL1) = RHOAVE(IWALL)/TX2
           ENDIF
         ELSE
           IF (ISEG.NE.2.OR.IZSTIF(ILOOP).EQ.1) THEN
              E1TAB(IWALL1) =
     1          (CY(1,1,ISEG)-CY(1,2,ISEG)**2/CY(2,2,ISEG))/TY(ISEG)
              E2TAB(IWALL1) =
     1          (CY(2,2,ISEG)-CY(1,2,ISEG)**2/CY(1,1,ISEG))/TY(ISEG)
              G12TAB(IWALL1) = CY(3,3,ISEG)/TY(ISEG)
              FNUTAB(IWALL1) = CY(1,2,ISEG)/CY(1,1,ISEG)
              RHOTAB(IWALL1) = RHOAVE(IWALL)/TY(ISEG)
           ELSE
             C112 = CY(1,1,2) - CX(2,2,1)
             C222 = CY(2,2,2) - CX(1,1,1)
             C122 = CY(1,2,2) - CX(1,2,1)
             IF (C122.LT.0.) C122 = 0.
             C332 = CY(3,3,2) - CX(3,3,1)
             TY2 = TY(2) - TX(1)
             E1TAB(IWALL1) = (C112 - C122**2/C222)/TY2
             E2TAB(IWALL1) = (C222 - C122**2/C112)/TY2
             G12TAB(IWALL1) = C332/TY2
             FNUTAB(IWALL1) = C122/C112
             RHOTAB(IWALL1) = RHOAVE(IWALL)/TY2
           ENDIF
         ENDIF
  360    CONTINUE
         IF (ISEG.GT.1) THEN
            ISEG1 = ISEG - 1
            IF (ILOOP.EQ.1) THEN
               Y1(IWALL1) = YSTR(1,ISEG1)
               Y2(IWALL1) = YSTR(2,ISEG1)
               Z1(IWALL1) = ZSTR(1,ISEG1)
               Z2(IWALL1) = ZSTR(2,ISEG1)
               WIDTH  = ABS(YSTR(2,ISEG1) - YSTR(1,ISEG1))
               HEIGHT = ABS(ZSTR(2,ISEG1) - ZSTR(1,ISEG1))
C BEG OCT 2004
C              IF (HEIGHT.GE.WIDTH) THEN
               IF (HEIGHT.LT.WIDTH) THEN
C END OCT 2004
                  TORJ(IWALL1) = WIDTH*HEIGHT**3/3.
               ELSE
                  TORJ(IWALL1) = HEIGHT*WIDTH**3/3.
               ENDIF
            ELSE
               Y1(IWALL1) = YRNG(1,ISEG1)
               Y2(IWALL1) = YRNG(2,ISEG1)
               Z1(IWALL1) = ZRNG(1,ISEG1)
               Z2(IWALL1) = ZRNG(2,ISEG1)
               WIDTH  = ABS(YRNG(2,ISEG1) - YRNG(1,ISEG1))
               HEIGHT = ABS(ZRNG(2,ISEG1) - ZRNG(1,ISEG1))
C BEG OCT 2004
C              IF (HEIGHT.GE.WIDTH) THEN
               IF (HEIGHT.LT.WIDTH) THEN
C END OCT 2004
                  TORJ(IWALL1) = WIDTH*HEIGHT**3/3.
               ELSE
                  TORJ(IWALL1) = HEIGHT*WIDTH**3/3.
               ENDIF
            ENDIF
         ENDIF
C BEG OCT 2004
  500    CONTINUE
C Subsstiffener stuff: substiffeners only on panel skin (ISEG=1):
         IF (ISEG.EQ.1) THEN
            IF (IMTSUB(1,1).GT.0) THEN 
               IWALL = IWALL + 1
               IWALL1= IWALL - 1
               IWALSB(1) = IWALL
               ITABSB(1) = IWALL1
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRDTOT(IWALL) =
     1            'C '//WRDWAL(1)//'; '//WRDWAL(4)//';         '
     1                                 //' (substringer shell wall  )'
               WRDTAB(IWALL1) =
     1              WRDTOT(IWALL)(1:30)//' (substringer crosssection)'
               WRDMAT(IWALL1) = 
     1              WRDTOT(IWALL)(1:30)//' (equivalent matl for beam)'
               NLAYRS(IWALL) = 1 
C
               M = IMTSUB(1,1) 
               MAXMAT = MAX(MAXMAT,M)
               JMAT(1,IWALL) = M
               THIK(1,IWALL) = YSTRSB(2) - YSTRSB(1) 
               ANGL(1,IWALL) = 0. 
               E1MAT(1,IWALL) = E1(M)
               E2MAT(1,IWALL) = E2(M)
               G12MAT(1,IWALL) = G(M)
               AL1MAT(1,IWALL) = ALPHA1(M)
               AL2MAT(1,IWALL) = ALPHA2(M)
               FNUMAT(1,IWALL) = FNU(M)
               RHOMAT(1,IWALL) = DENS(M)
               G13MAT(1,IWALL) = G13(M)
               G23MAT(1,IWALL) = G23(M)
C
               E1TAB(IWALL1) = E1MAT(1,IWALL)
               E2TAB(IWALL1) = E2MAT(1,IWALL)
               G12TAB(IWALL1)= G12MAT(1,IWALL)
               FNUTAB(IWALL1)= FNUMAT(1,IWALL)
               AL1TAB(IWALL1)= AL1MAT(1,IWALL)
               AL2TAB(IWALL1)= AL2MAT(1,IWALL)
               RHOTAB(IWALL1)= RHOMAT(1,IWALL)
C
               Y1(IWALL1) = YSTRSB(1)
               Y2(IWALL1) = YSTRSB(2)
               Z1(IWALL1) = ZSTRSB(1)
               Z2(IWALL1) = ZSTRSB(2)
               WIDTH  = ABS(YSTRSB(2) - YSTRSB(1))
               HEIGHT = ABS(ZSTRSB(2) - ZSTRSB(1))
               IF (HEIGHT.LT.WIDTH) THEN
                  TORJ(IWALL1) = WIDTH*HEIGHT**3/3.
               ELSE
                  TORJ(IWALL1) = HEIGHT*WIDTH**3/3.
               ENDIF
            ENDIF
C           End of (IMTSUB(1,1).GT.0) condition
C
            IF (IMTSUB(1,2).GT.0) THEN 
               IWALL = IWALL + 1
               IWALL1= IWALL - 1
               IWALSB(2) = IWALL
               ITABSB(2) = IWALL1
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRDTOT(IWALL) =
     1            'C '//WRDWAL(1)//'; '//WRDWAL(5)//';         '
     1                                 //' (subring shell wall prop.)'
               WRDTAB(IWALL1) =
     1              WRDTOT(IWALL)(1:30)//' (subring cross section   )'
               WRDMAT(IWALL1) = 
     1              WRDTOT(IWALL)(1:30)//' (equivalent matl for beam)'
               NLAYRS(IWALL) = 1 
C
               M = IMTSUB(1,2) 
               MAXMAT = MAX(MAXMAT,M)
               JMAT(1,IWALL) = M
               THIK(1,IWALL) = YRNGSB(2) - YRNGSB(1) 
               ANGL(1,IWALL) = 0. 
               E1MAT(1,IWALL) = E1(M)
               E2MAT(1,IWALL) = E2(M)
               G12MAT(1,IWALL) = G(M)
               AL1MAT(1,IWALL) = ALPHA1(M)
               AL2MAT(1,IWALL) = ALPHA2(M)
               FNUMAT(1,IWALL) = FNU(M)
               RHOMAT(1,IWALL) = DENS(M)
               G13MAT(1,IWALL) = G13(M)
               G23MAT(1,IWALL) = G23(M)
C
               E1TAB(IWALL1) = E1MAT(1,IWALL)
               E2TAB(IWALL1) = E2MAT(1,IWALL)
               G12TAB(IWALL1)= G12MAT(1,IWALL)
               FNUTAB(IWALL1)= FNUMAT(1,IWALL)
               AL1TAB(IWALL1)= AL1MAT(1,IWALL)
               AL2TAB(IWALL1)= AL2MAT(1,IWALL)
               RHOTAB(IWALL1)= RHOMAT(1,IWALL)
C
               Y1(IWALL1) = YRNGSB(1)
               Y2(IWALL1) = YRNGSB(2)
               Z1(IWALL1) = ZRNGSB(1)
               Z2(IWALL1) = ZRNGSB(2)
               WIDTH  = ABS(YRNGSB(2) - YRNGSB(1))
               HEIGHT = ABS(ZRNGSB(2) - ZRNGSB(1))
               IF (HEIGHT.LT.WIDTH) THEN
                  TORJ(IWALL1) = WIDTH*HEIGHT**3/3.
               ELSE
                  TORJ(IWALL1) = HEIGHT*WIDTH**3/3.
               ENDIF
            ENDIF
C           End of (IMTSUB(1,2).GT.0) condition
         ENDIF
C        End of (ISEG.EQ.1) condition
C END OCT 2004
 1000 CONTINUE
C End of "do loop": ISEG = ISEGB,NSEGUP
C
 1010 CONTINUE
      MAXWLL = IWALL
      MAXMT2 = 0
      MAXWL2 = 0
C
      IF ((ICLOSE.EQ.0.AND.NSTRNG.GT.0).OR.
     1    (IRENDS.EQ.1.AND.NRINGS.GT.0)) THEN
C  Following pertain to material properties for edge members...
         IBG = 2
         IF (ICLOSE.EQ.0) IBG = 1
         INND = 1
         IF (IRENDS.EQ.1) INND = 2
         IWALL  = MAXWLL
         WRDWAL(1) = ' At edge'
         WRDWAL(2) = '        '
         WRDWAL(3) = '        '
         DO 1013 ILOOP = IBG,INND
         NSEGUP = NSEG(ILOOP)
         ISEGB = 2
         IF (ILOOP.EQ.2.AND.B2(2).EQ.0.0) ISEGB = 3
         DO 1012 ISEG = ISEGB,NSEGUP
            IF (ISEG.EQ.1) THEN 
               WRDWAL(2) = 'cyl.skin'
               WRDWAL(3) = '  skin  '
            ENDIF
            IF (ISEG.NE.1) THEN
               IF (ILOOP.EQ.1) WRDWAL(2) = 'stringer'
               IF (ILOOP.EQ.2) WRDWAL(2) = '  ring  '
            ENDIF
            IF (ISEG.EQ.2) WRDWAL(3) = 'fayflnge'
            IF (ISEG.EQ.3) WRDWAL(3) = '  web   '
            IF (ISEG.EQ.4) WRDWAL(3) = 'outflnge'
            NLAY = NLAYER(ISEG,ILOOP)
            IF (ISEG.EQ.2.AND.IZSTIF(ILOOP).EQ.0)
     1      NLAY = NLAY - NLAYER(1,1)
            IF (NLAY.EQ.0) GO TO 1012
            IWALL = IWALL + 1
            IWALL1 = IWALL - 1
            MAXWL2 = MAXWL2 + 1
            IWALNO(ISEG,ILOOP,2) = IWALL
            ITABNO(ISEG,ILOOP,2) = IWALL1
C23456789012345678901234567890123456789012345678901234567890123456789012
            WRDTOT(IWALL) =
     1            'C '//WRDWAL(1)//'; '//WRDWAL(2)//'; '//WRDWAL(3)
     1                                 //' (shell unit wall props   )'
            WRDTAB(IWALL1) =
     1              WRDTOT(IWALL)(1:30)//' (beam cross section props)'
            WRDMAT(IWALL1) = 
     1              WRDTOT(IWALL)(1:30)//' (equivalent matl for beam)'
            NLAYRS(IWALL) = NLAY
            RHOAVE(IWALL) = 0.0
            DO 1011 ILAY = 1,NLAY
               K = LTYPE(ILAY,ISEG,ILOOP)
               M = MATL(K)
               MAXMT2 = MAX(MAXMT2,M)
               JLAY = NLAY + 1 - ILAY
               JMAT(JLAY,IWALL) = M + MAXMAT
               M2 = M + MAXMAT
               IF (M2.GT.20) THEN
                WRITE(6,'(A)')' Material array exceeded. Aborting'
                CALL EXIT
               ENDIF
               E1(M2) = E1(M)/2.
               E2(M2) = E2(M)/2.
               G(M2)  = G(M)/2.
               ALPHA1(M2) = ALPHA1(M)
               ALPHA2(M2) = ALPHA2(M)
               FNU(M2) = FNU(M)
               DENS(M2) = DENS(M)/2.
               G13(M2) = G13(M)/2.
               G23(M2) = G23(M)/2.
               THIK(JLAY,IWALL) = T(K)
               ANGL(JLAY,IWALL) = ANGLE(K)
               E1MAT(JLAY,IWALL) = E1(M)/2.
               E2MAT(JLAY,IWALL) = E2(M)/2.
               G12MAT(JLAY,IWALL) = G(M)/2.
               AL1MAT(JLAY,IWALL) = ALPHA1(M)
               AL2MAT(JLAY,IWALL) = ALPHA2(M)
               FNUMAT(JLAY,IWALL) = FNU(M)
               RHOMAT(JLAY,IWALL) = DENS(M)/2.
               G13MAT(JLAY,IWALL) = G13(M)/2.
               G23MAT(JLAY,IWALL) = G23(M)/2.
               RHOAVE(IWALL) = RHOAVE(IWALL) +T(K)*DENS(M)/2.
 1011       CONTINUE
C           End of "do loop": ILAY = 1,NLAY
            IF (ISEG.EQ.1) GO TO 1012
            IF (NLAY.EQ.1) THEN
               E1TAB(IWALL1) = E1MAT(1,IWALL)
               E2TAB(IWALL1) = E2MAT(1,IWALL)
               G12TAB(IWALL1)= G12MAT(1,IWALL)
               FNUTAB(IWALL1)= FNUMAT(1,IWALL)
               AL1TAB(IWALL1)= AL1MAT(1,IWALL)
               AL2TAB(IWALL1)= AL2MAT(1,IWALL)
               RHOTAB(IWALL1)= RHOMAT(1,IWALL)
               GO TO 1112
            ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
            IF (ILOOP.EQ.1) THEN
              IF (ISEG.NE.2.OR.IZSTIF(ILOOP).EQ.1) THEN
                 E1TAB(IWALL1) =
     1          0.5*(CX(1,1,ISEG)-CX(1,2,ISEG)**2/CX(2,2,ISEG))/TX(ISEG)
                 E2TAB(IWALL1) =
     1          0.5*(CX(2,2,ISEG)-CX(1,2,ISEG)**2/CX(1,1,ISEG))/TX(ISEG)
                 G12TAB(IWALL1) = 0.5*CX(3,3,ISEG)/TX(ISEG)
                 FNUTAB(IWALL1) = CX(1,2,ISEG)/CX(1,1,ISEG)
                 RHOTAB(IWALL1) = RHOAVE(IWALL)/TX(ISEG)
              ELSE
                C112 = CX(1,1,2) - CX(1,1,1)
                C222 = CX(2,2,2) - CX(2,2,1)
                C122 = CX(1,2,2) - CX(1,2,1)
                IF (C122.LT.0.) C122 = 0.
                C332 = CX(3,3,2) - CX(3,3,1)
                TX2 = TX(2) - TX(1)
                E1TAB(IWALL1) = 0.5*(C112 - C122**2/C222)/TX2
                E2TAB(IWALL1) = 0.5*(C222 - C122**2/C112)/TX2
                G12TAB(IWALL1) = 0.5*C332/TX2
                FNUTAB(IWALL1) = C122/C112
                RHOTAB(IWALL1) = RHOAVE(IWALL)/TX2
              ENDIF
            ELSE
C23456789012345678901234567890123456789012345678901234567890123456789012
              IF (ISEG.NE.2.OR.IZSTIF(ILOOP).EQ.1) THEN
                 E1TAB(IWALL1) =
     1          0.5*(CY(1,1,ISEG)-CY(1,2,ISEG)**2/CY(2,2,ISEG))/TY(ISEG)
                 E2TAB(IWALL1) =
     1          0.5*(CY(2,2,ISEG)-CY(1,2,ISEG)**2/CY(1,1,ISEG))/TY(ISEG)
                 G12TAB(IWALL1) = 0.5*CY(3,3,ISEG)/TY(ISEG)
                 FNUTAB(IWALL1) = CY(1,2,ISEG)/CY(1,1,ISEG)
                 RHOTAB(IWALL1) = RHOAVE(IWALL)/TY(ISEG)
              ELSE
                C112 = CY(1,1,2) - CX(2,2,1)
                C222 = CY(2,2,2) - CX(1,1,1)
                C122 = CY(1,2,2) - CX(1,2,1)
                IF (C122.LT.0.) C122 = 0.
                C332 = CY(3,3,2) - CX(3,3,1)
                TY2 = TY(2) - TX(1)
                E1TAB(IWALL1) = 0.5*(C112 - C122**2/C222)/TY2
                E2TAB(IWALL1) = 0.5*(C222 - C122**2/C112)/TY2
                G12TAB(IWALL1) = 0.5*C332/TY2
                FNUTAB(IWALL1) = C122/C112
                RHOTAB(IWALL1) = RHOAVE(IWALL)/TY2
              ENDIF
            ENDIF
C           End of ILOOP condition
 1112       CONTINUE
            IF (ISEG.GT.1) THEN
               ISEG1 = ISEG - 1
               IF (ILOOP.EQ.1) THEN
                  Y1(IWALL1) = YSTR(1,ISEG1)
                  Y2(IWALL1) = YSTR(2,ISEG1)
                  Z1(IWALL1) = ZSTR(1,ISEG1)
                  Z2(IWALL1) = ZSTR(2,ISEG1)
                  WIDTH  = ABS(YSTR(2,ISEG1) - YSTR(1,ISEG1))
                  HEIGHT = ABS(ZSTR(2,ISEG1) - ZSTR(1,ISEG1))
C BEG OCT 2004
                  IF (HEIGHT.LT.WIDTH) THEN
C END OCT 2004
                     TORJ(IWALL1) = WIDTH*HEIGHT**3/3.
                  ELSE
                     TORJ(IWALL1) = HEIGHT*WIDTH**3/3.
                  ENDIF
               ELSE
                  Y1(IWALL1) = YRNG(1,ISEG1)
                  Y2(IWALL1) = YRNG(2,ISEG1)
                  Z1(IWALL1) = ZRNG(1,ISEG1)
                  Z2(IWALL1) = ZRNG(2,ISEG1)
                  WIDTH  = ABS(YRNG(2,ISEG1) - YRNG(1,ISEG1))
                  HEIGHT = ABS(ZRNG(2,ISEG1) - ZRNG(1,ISEG1))
C BEG OCT 2004
                  IF (HEIGHT.LT.WIDTH) THEN
C END OCT 2004
                     TORJ(IWALL1) = WIDTH*HEIGHT**3/3.
                  ELSE
                     TORJ(IWALL1) = HEIGHT*WIDTH**3/3.
                  ENDIF
               ENDIF
            ENDIF
C           End of (ISEG.GT.1) condition
 1012    CONTINUE
C        End of "do loop": ISEG = ISEGB,NSEGUP
 1013    CONTINUE
C        End of "do loop": ILOOP = IBG,INND
C        MAXMAT = MAXMAT + MAXMT2
C        MAXWLL = IWALL
      ENDIF
C     End of IF ((ICLOSE.EQ.0.AND.NSTRNG.GT.0).OR.
C    1           (IRENDS.EQ.1.AND.NRINGS.GT.0)) condition. 
C
C NEXT, GET INFORMATION FOR STAGS INPUT FOR EACH UNIT...
C
C START GENERATING THE STAGS INPUT DECKS, NAME.INP AND NAME.BIN:
C
C FIRST, SOME "inp" FILE ENTRIES...
      WRITE(IFIL14,'(A,A,A)')
     1' ',CASE(1:NLET),
     2' STAGS INPUT FOR STIFFENED CYL.(STAGSUNIT=SHELL UNITS)'
      WRITE(IFIL16,'(A,A,A)')
     1' ',CASE(1:NLET),
     2' STAGS INPUT FOR STIFFENED CYL.(STAGSUNIT=SHELL UNITS)'
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Begin B-1 input data...'
      WRITE(IFIL14,'(I2,A)') IGRAV,
     1  ', $ IGRAV =0 means g = 386.4 inches per sec.**2; else B-4'
      WRITE(IFIL14,'(A)')
     1' 0, $ ICHECK=0 means normal execution'
      WRITE(IFIL14,'(A)')
     1' 0, $ ILIST =0 means normal batch-oriented output'
      INCBC = 0
      IF (INDICP.EQ.-1) INCBC = 1 
C BEG JAN 2005
      ICHLDB = 0
      NOLODB = 0
      IF (INDICP.NE.-1) THEN
         FNORMB = SQRT(FNX0**2 + FNY0**2 + PRESS0**2)
         FNORMA = SQRT(FNX**2  + FNY**2  + PRESS**2 + FNXY**2)
         IF (INDIC.EQ.1.AND.FNORMB.LT.0.00001*FNORMA) NOLODB = 1
         IF (INDIC.EQ.1.AND.NOLODB.EQ.1) THEN
            ICHLDB = 1
            INCBC = 1
         ENDIF
      ENDIF
C END JAN 2005
      WRITE(IFIL14,'(I2,A)') INCBC,
     1',  $ INCBC=0:buck. bcs same as prebuc; 1: different.'
      NRUNIT = 0
      WRITE(IFIL14,'(I2,A)') NRUNIT,
     1',  $ NRUNIT=0 means plot entire model.'
      NROTS = 3
      WRITE(IFIL14,'(I2,A)') NROTS,
     1',  $ NROTS=3 means plot model with 3 rotations, as on B-1b.'
C BEG DEC 2004
      KDEV = 0
C END DEC 2004
      WRITE(IFIL14,'(I2,A)') KDEV,
     1'  $ KDEV=1 means use PostScript file format for plot.END B-1'
      IROT = 1
      WRITE(IFIL14,'(I2,A)') IROT,
     1',  $ IROT=1 means rotation about global X-axis.BEGIN B-1b'
C BEG DEC 2004
      ROT = -35.84 
C END DEC 2004
      WRITE(IFIL14,'(1PE10.3,A)') ROT,
     1'  $ ROT=0 means rotate 0 deg. about global X-axis.END B-1b'
      IROT = 2
      WRITE(IFIL14,'(I2,A)') IROT,
     1',  $ IROT=2 means rotation about global Y-axis.BEGIN B-1b'
C BEG DEC 2004
      ROT = -13.14
C END DEC 2004 
      WRITE(IFIL14,'(1PE10.3,A)') ROT,
     1'  $ ROT=80 means rotate 80 deg. about global Y-axis.END B-1b'
      IROT = 3
      WRITE(IFIL14,'(I2,A)') IROT,
     1',  $ IROT=3 means rotation about global Z-axis.BEGIN B-1b'
C BEG DEC 2004
      ROT = 35.63
C END DEC 2004 
      WRITE(IFIL14,'(1PE10.3,A)') ROT,
     1'  $ ROT=0 means rotate 0 deg. about global Z-axis.END B-1b'
C
      ICOR = 0
      IMPTHE = 0
      IF (IELMNT.EQ.480) IMPTHE = 1
C
C  NEXT, SOME 'bin' FILE ENTRIES...
      IF (INDICX.NE.4) THEN
         WRITE(IFIL16,'(I2,A)') INDIC,
     1  ', $ INDIC=1 is bifur.buckling; INDIC=3 is nonlinear BEGIN B-1'
      ELSE
         WRITE(IFIL16,'(I2,A)') INDICX,
     1  ', $ INDIC=4 is bifur.buckling from nonlinear state BEGIN B-1'
      ENDIF
      IF (INDIC.NE.6) WRITE(IFIL16,'(A)')
     1' 1, $ IPOST=1 means save displacements every IPOSTth step'
      IF (INDIC.EQ.6) WRITE(IFIL16,'(A)')
     1' 10, $ IPOST=10 means save displacements every 10th step'
      WRITE(IFIL16,'(A)')
     1' 0, $ ILIST =0 means normal batch-oriented output'
      WRITE(IFIL16,'(I2,A)') ICOR,
     1  ', $ ICOR  =0 means projection in; 1 means not in.'
      WRITE(IFIL16,'(I2,A)') IMPTHE,
     1  ', $ IMPTHE=index for imperfection theory.'
      WRITE(IFIL16,'(A)')
     1' 0, $ ICHIST=index for crack archive option'
      WRITE(IFIL16,'(A)')
     1' 0, $ IFLU  =0 means no fluid interaction.'
      WRITE(IFIL16,'(I3,A)') ISOLVR,
     1 ' $ ISOLVR= 0 means original solver; -1 new solver.END B-1 rec'
C
C  NEXT, MORE "inp" FILE ENTRIES...
      NUNITS = 1
      IF (IBMSTR.EQ.3.AND.(IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)))
     1   NUNITS = NUNITS + NSTRNG
      IF (IBMSTR.EQ.2.OR.IBMSTR.EQ.3.OR.IBMSTR.EQ.4)
     1   NUNITS = NUNITS + NSTRNG
      IF ((IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
     1    (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) NUNITS = NUNITS + NSTRNG
C BEG OCT 2004
      NSTSBX = 0
      IF (ISTRSB.EQ.3) THEN
         NUNITS = NUNITS + NSTRSB
         NSTSBX = NSTRSB
      ENDIF
C END OCT 2004
C
      IF (IBMRNG.EQ.3.AND.(IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)))
     1   NUNITS = NUNITS + NRINGS
      IF (IBMRNG.EQ.2.OR.IBMRNG.EQ.3.OR.IBMRNG.EQ.4)
     1   NUNITS = NUNITS + NRINGS
      IF ((IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.
     1    (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) NUNITS = NUNITS + NRINGS
C BEG OCT 2004
      NRGSBX = 0
      IF (IRNGSB.EQ.3) THEN
         NUNITS = NUNITS + NRNGSB
         NRGSBX = NRNGSB
      ENDIF
C END OCT 2004
C
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Begin B-2 input data...'
      WRITE(IFIL14,'(I4,A)') NUNITS,
     1', $ NUNITS=number of shell units.            BEGIN B-2 rec.'
      NUNITE = 1
      IF (IBC12.EQ.1) NUNITE = 0
      IF (ILINK1.EQ.1) NUNITE = NUNITE + NSTRNG
      IF (ILINK2.EQ.1) NUNITE = NUNITE + NRINGS
C BEG OCT 2004
      IF (LNKSB1.EQ.1) NUNITE = NUNITE + NSTRSB
      IF (LNKSB2.EQ.1) NUNITE = NUNITE + NRNGSB
C END OCT 2004
      IF (IBC12.EQ.1) WRITE(IFIL14,'(I4,A)') NUNITE,
     1', $ NUNITE=number of fastener strips = finite element units'
      IF (IBC12.EQ.2) WRITE(IFIL14,'(I4,A)') NUNITE,
     1', $ NUNITE=number of fastener strips + 1 = finite element units'
      NSTFS = 0
C BEG OCT 2004
      IF (ISTRSB.EQ.2.OR.IRNGSB.EQ.2) NSTFS = 1
C END OCT 2004
      IF ((IBMSTR.EQ.1.AND.ISMRST.EQ.0).OR.
     1    (IBMRNG.EQ.1.AND.ISMRRG.EQ.0)) NSTFS = 1
      IF ((IBMSTR.EQ.2.OR.IBMSTR.EQ.4).AND.
     1   (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2.OR.ISTIF(1).EQ.3)) THEN
         IF (TX(2).GT.TX(1).OR.IZSTIF(1).EQ.1) NSTFS = 1
         IF (IBMSTR.EQ.2.AND.(ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2))
     1      NSTFS = NSTFS + NSTRNG
      ENDIF
      IF ((IBMRNG.EQ.2.OR.IBMRNG.EQ.4).AND.
     1   (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2.OR.ISTIF(2).EQ.3)) THEN
         IF (NSTFS.EQ.0.AND.(TY(2).GT.TX(1).OR.IZSTIF(2).EQ.1)) NSTFS=1
         IF (IBMRNG.EQ.2.AND.(ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2))
     1      NSTFS = NSTFS + NRINGS
      ENDIF
      WRITE(IFIL14,'(I4,A)') NSTFS,
     1', $ NSTFS = number of shell units with discrete stiffeners'
      NINTS = 1
C BEG APR 2006 (ICLOSE changed to ICLOSED)
      IF (ICLOSED.EQ.0) NINTS = 0
      IF (IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.ICLOSED.EQ.1)
     1                 NINTS = NINTS + NRINGS
      IF (IRNGSB.EQ.3.AND.ICLOSED.EQ.1) NINTS = NINTS + NRNGSB
      IF ((IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.ICLOSED.EQ.1) THEN
C END APR 2006
         IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)  NINTS = NINTS + NRINGS
         IF (IZSTIF(2).EQ.1)                  NINTS = NINTS + NRINGS
         IF (IBMRNG.EQ.3.AND.TY(2).GT.TX(1).AND.IZSTIF(2).EQ.0)
     1                                        NINTS = NINTS + NRINGS
      ENDIF
C BEG FEB 2007
      IF (IUNITX.EQ.0) WRITE(IFIL14,'(I4,A)') NINTS,
     1', $ NINTS means number of connections between shell units'
      IF (IUNITX.GT.0) WRITE(IFIL14,'(I4,A)') 2*NINTS,
     1', $ NINTS means number of connections between shell units'
C END FEB 2007
C
      NPATS = 5
      IF (IBMRNG.EQ.5.AND.IRENDS.EQ.1) NPATS = 3
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0.AND.IBMSTR.NE.5)    NPATS = NPATS + 2
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0.AND.IBMSTR.NE.5)
     1                                     NPATS = NPATS + 2
C END AUG 2006
C END APR 2006
C     IF (ICLOSE.EQ.0)                    NPATS = NPATS + 2
      IF (IBMSTR.NE.1.AND.ILINK1.EQ.0)    NPATS = NPATS + NSTRNG
C BEG OCT 2004
      IF (ISTRSB.EQ.3.AND.LNKSB1.EQ.0)    NPATS = NPATS + NSTRSB
C END OCT 2004
C BEG NOV 2009
      IF (IBCX0XL.EQ.1) NPATS = NPATS + 2*NSTRNG
C END NOV 2009
      IF ((IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
     1    (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) THEN
                                          NPATS = NPATS + NSTRNG
         IF (ISWAY.EQ.0)                  NPATS = NPATS + 2*NSTRNG
      ENDIF
      IF (IBMSTR.EQ.3.AND.(IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1))) THEN
                                          NPATS = NPATS + NSTRNG
         IF (ISWAY.EQ.0)                  NPATS = NPATS + 2*NSTRNG
      ENDIF
C     IF (ISWAY.EQ.0.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5)
C    1                                    NPATS = NPATS + NSTRNG
      IF (IBMRNG.NE.1.AND.ILINK2.EQ.0)    NPATS = NPATS + NRINGS
C BEG OCT 2004
      IF (IRNGSB.EQ.3.AND.LNKSB2.EQ.0)    NPATS = NPATS + NRNGSB
C END OCT 2004
      IF ((IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.
     1    (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) THEN
                                          NPATS = NPATS + NRINGS
C BEG APR 2006
C BEG AUG 2006
C        IF (ISWAY.EQ.0.AND.ICLOSED.EQ.0)  NPATS= NPATS + 2*NRINGS
         IF (ISWAY.EQ.0.AND.ICLOSED.EQ.0.AND.ISYMM.EQ.0) 
     1                                     NPATS= NPATS + 2*NRINGS
C END AUG 2006
C END APR 2006
      ENDIF
      IF (IBMRNG.EQ.3.AND.(IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1))) THEN
                                          NPATS = NPATS + NRINGS
C BEG APR 2006
C BEG AUG 2006
C        IF (ISWAY.EQ.0.AND.ICLOSED.EQ.0)  NPATS= NPATS + 2*NRINGS
         IF (ISWAY.EQ.0.AND.ICLOSED.EQ.0.AND.ISYMM.EQ.0)
     1                                     NPATS= NPATS + 2*NRINGS
C END AUG 2006
C END APR 2006
      ENDIF
C BEG FEB 2007
      IF (IFLAT.EQ.1) NPATS = NPATS - 1
C END FEB 2007
      WRITE(IFIL14,'(I4,A)') NPATS,
     1', $ NPATS=number of records for partial nodal compatibility'
C
      IF (ISWAY.EQ.0) THEN
         IF (IBMSTR.NE.1.AND.IBMSTR.NE.5) NCONST = -4*NSTRNG
C BEG APR 2006
C BEG AUG 2006
C        IF (IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.ICLOSED.EQ.0)
C    1                                    NCONST = NCONST - 2*NRINGS
         IF (IBMRNG.NE.1.AND.IBMRNG.NE.5
     1                  .AND.ICLOSED.EQ.0.AND.ISYMM.EQ.0)
     1                                    NCONST = NCONST - 2*NRINGS
C END AUG 2006
C END APR 2006
C BEG OCT 2004
         IF (ISTRSB.EQ.3) NCONST = NCONST -4*NSTRSB
C BEG APR 2006
C BEG AUG 2006
C        IF (IRNGSB.EQ.3.AND.ICLOSED.EQ.0) NCONST= NCONST -2*NRNGSB
         IF (IRNGSB.EQ.3.AND.ICLOSED.EQ.0.AND.ISYMM.EQ.0)
     1                                     NCONST= NCONST -2*NRNGSB
C END AUG 2006
C END APR 2006
C END OCT 2004
      ENDIF
C
C BEG APR 2006
C BEG AUG 2006
      ISUBTR = 0
      IF (ICLOSED.EQ.1) ISUBTR = 1
      IF (ISYMM.EQ.1)   ISUBTR = 1
C     NCONST =NCONST -2*(1-ICLOSED)*(NROWS(1)-2) -2*IEDGE*(NROWS(1)-2) 
      NCONST =NCONST -2*(1-ISUBTR )*(NROWS(1)-2) -2*IEDGE*(NROWS(1)-2)
C BEG OCT 2009
     1 -2*IEDGE2*(NCOLS(1)-2)
C END OCT 2009
C END AUG 2006
C END APR 2006
      WRITE(IFIL14,'(I5,A)') NCONST,
     1  ', $ NCONST= number of Lagrange constraint conditions'
      WRITE(IFIL14,'(I2,A)') NIMPFS,
     1', $ NIMPFS=number of bucklng modal imperfections.'
      INERT = 0
      NINSR = 0
      WRITE(IFIL14,'(I2,A)') INERT,
     1', $ INERT = 0 means no inertial load records'
      WRITE(IFIL14,'(I2,A)') NINSR,
     1'  $ NINSR = 0 means no crack tip element sets. END B-2 rec.'
      MATADD = MAXWLL - 1 + MAXWL2
      IF (MATADD.LT.0) MATADD = 0
C BEG OCT 2004
      MATAD2 = 0
      IF (ISTRSB.GT.0) MATAD2 = 1
      IF (IRNGSB.GT.0) MATAD2 = MATAD2 + 1
C END OCT 2004
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Begin B-3 input data...'
C BEG OCT 2004
      WRITE(IFIL14,'(I2,A)') MAXMAT + MAXMT2 + MATADD,
     1  ', $ NTAM = number of entries in material tabl.BEGIN B-3 rec.'
      NTAB = MATADD
C END OCT 2004
      WRITE(IFIL14,'(I2,A)') NTAB,
     1  ', $ NTAB = number of beam cross section entries'
C BEG APR 2006
C     NTAW = MAXWLL + MAXWL2
      IADDWAL = 0
      IF ((ISMRST.EQ.1.AND.ISTIF(1).NE.0).OR.
     1    (ISMRRG.EQ.1.AND.ISTIF(2).NE.0)) IADDWAL = 1
      NTAW = MAXWLL + MAXWL2 + IADDWAL
C END APR 2006
      WRITE(IFIL14,'(I2,A)') NTAW,
     1  ', $ NTAW = number of entries in shell wall table.'
      WRITE(IFIL14,'(A)')
     1' 0, $ NTAP = 0 means user parameters not included.'
C BEG DEC 2006
C     WRITE(IFIL14,'(A)')
C    1' 2  $ NTAMT = 2 means two fastener element tables.END B-3 rec.'
      WRITE(IFIL14,'(A)')
     1' 2, $ NTAMT = 2 means two fastener element tables.'
C BEG JAN 2007
C     NGCP = 0
C     IF (IPLAST.EQ.1) NGCP = 1
      NGCP = 1
      IMULT = 1
      IF (NGCP.EQ.1) IMULT = -1
      WRITE(IFIL14,'(I2,A)') NGCP,
     1'    $ NGCP = 1 means the GCP system will be used. END B-3 rec.'
C END DEC 2006
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Begin B-4, B-5 input data, if any...'
      IF (IGRAV.NE.0) WRITE(IFIL14,'(1PE10.3,A)') GRAV,
     1' $ GRAV=gravitational acceleration.                   B-4 rec.'
      IF (NIMPFS.GT.0) THEN
C BEG MAR 2006
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFIL14,'(A)')
     1'C            imperfection amplitude  loadstep  mode no.  run no.'
C END MAR 2006
         DO 468 I = 1,NIMPFS
C BEG MAR 2006
         WRITE(IFIL14,'(1PE10.3,I4,I4,I4,A,I3,A)') 
     1    WIMPL(I),ISTEP(I),IMODE(I),IRUN(I),
     1'   $ WIMPFA,    ISTEP,   IMODE,    IRUN (imperf.',I,') B-5'
C END MAR 2006
  468    CONTINUE
      ENDIF
C
C  NEXT, PROVIDE MORE ENTRIES IN "bin" FILE...
      IF (INDIC.NE.3.OR.IPOSTP.EQ.1) THEN
         STEP(1) = 0.
         FACM(1) = STLD(1)
      ENDIF
      WRITE(IFIL16,'(1PE10.3,A)') STLD(1),
     1  ', $ STLD(1) = starting load factor, System A. BEGIN C-1 rec.'
      WRITE(IFIL16,'(1PE10.3,A)') STEP(1),
     1  ', $ STEP(1) = load factor increment, System A'
      WRITE(IFIL16,'(1PE10.3,A)') FACM(1),
     1  ', $ FACM(1) = maximum load factor, System A'
      WRITE(IFIL16,'(1PE10.3,A)') STLD(2),
     1  ', $ STLD(2) = starting load factor, System B'
      WRITE(IFIL16,'(1PE10.3,A)') STEP(2),
     1  ', $ STEP(2) = load factor increment, System B'
      WRITE(IFIL16,'(1PE10.3,A)') FACM(2),
     1  ', $ FACM(2) = maximum load factor, System B'
      WRITE(IFIL16,'(A)')
     1' 0  $ ITEMP =0 means no thermal loads. END C-1 rec.'
      IF (INDIC.EQ.4.OR.INDIC.EQ.5) THEN
         WRITE(IFIL16,'(A)')
     1' 1, $ NLDS = 1 means 1 load factor used for eig. soln. BEG C-3'
         IF (ISTAGS.EQ.1) WRITE(IFIL16,'(A)')
     1' 2  $ IXEV = 2 means eigvalue soln not saved on Tape 8.END C-3'
         IF (ISTAGS.EQ.2) WRITE(IFIL16,'(I2,A)') NEIGS,
     1'  $ NEIGS=number of eigenvalues to calculate. END C-3 rec.'
         WRITE(IFIL16,'(1PE10.3,A)') STLD(1),
     1' $ PLDS(1)=System A load factor for eig. analysis.  C-4'
      ENDIF
      IF (INDICX.EQ.4) THEN
         WRITE(IFIL16,'(I4,A)') NLDS,
     1', $ NLDS = no. of load factors used for eigenv. soln. BEG C-3'
         WRITE(IFIL16,'(I4,A)') IXEV,
     1'  $ IXEV=number of eigenvalues to calculate. END C-3 rec.'
         IF (NLDS.GT.0) THEN
           NLDS1 = NLDS - 1
           IF (NLDS1.GE.1) THEN
            DO 397 I = 1,NLDS1
             WRITE(IFIL16,'(1PE10.3,A)') PLDS(I),
     1   ', $ PLDS(i)=System A load factor for eigenv. analysis.  C-4'
  397       CONTINUE
           ENDIF
           WRITE(IFIL16,'(1PE10.3,A)') PLDS(NLDS),
     1' $ PLDS(i)=System A load factor for eigenv. analysis.  End C-4'
         ENDIF
      ENDIF
C
      IF (INDIC.EQ.3.OR.INDIC.EQ.4.OR.INDIC.EQ.5.OR.INDIC.EQ.6) THEN
         NSTRAT = -1
         IF (INDIC.EQ.4.OR.INDIC.EQ.5) NSTRAT = -1
         IF (STEP(1).EQ.0.0) NSTRAT = -1
         DELX = 0.00005
         IF (INDIC.EQ.4) DELX = 0.05
         WRITE(IFIL16,'(I4,A)') ISTART,
     1  ', $ ISTART=restart from ISTARTth load step.   BEGIN D-1 rec.'
         WRITE(IFIL16,'(A)')
     1' 30000,$ NSEC= number of CPU seconds before run termination'
         WRITE(IFIL16,'(A)')
     1' 15,$ NCUT = number of times step size may be cut'
         WRITE(IFIL16,'(I4,A)') NEWT,
     1  ', $ NEWT = number of refactorings allowed'
         IF (NSTRAT.EQ.-1) WRITE(IFIL16,'(I2,A)') NSTRAT,
     1  ',$ NSTRAT=-1 means path length used as independent parameter'
         IF (NSTRAT.EQ.1) WRITE(IFIL16,'(I2,A)') NSTRAT,
     1  ',$ NSTRAT=1 means previous solution used as initial estimate'
         WRITE(IFIL16,'(F7.4,A)') DELX,',$ DELX=convergence tolerance'
         WRITE(IFIL16,'(A)')
     1' 0. $ WUND = 0 means initial relaxation factor =1.END D-1 rec.'
      ENDIF
      IF (INDIC.EQ.1.OR.INDIC.EQ.4.OR.INDIC.EQ.5) THEN
         SHIFT = ABS(EIGLOC/2.)
         IF (IELMNT.EQ.480) SHIFT = ABS(0.70*EIGLOC)
         IF (INDIC.EQ.3.OR.INDIC.EQ.4.OR.INDIC.EQ.5) SHIFT = 0.
         EIGA = EIGLOC/2.
         EIGB = 2.*EIGLOC
         EIGA = 0.
         EIGB = 0.
      ENDIF
      IF (INDIC.EQ.1
     1         .OR.(ISTAGS.EQ.1.AND.(INDIC.EQ.4.OR.INDIC.EQ.5))) THEN
         WRITE(IFIL16,'(A)')
     1' 10000, $ NSEC= number of CPU seconds before run termination'
         WRITE(IFIL16,'(A)')
     1' 0., $ DELEV is eigenvalue error tolerance (0=.00001)'
         WRITE(IFIL16,'(A)')
     1' 0  $ IPRINT=0 means print modes, iteration data, END D-2 rec.'
         WRITE(IFIL16,'(I3,A)') NEIGS,
     1', $ NEIGS= number of eigenvalues sought.  BEGIN D-3 rec.'
         WRITE(IFIL16,'(1PE10.3,A)') SHIFT,
     1  ', $ SHIFT=initial eigenvalue shift'
         WRITE(IFIL16,'(1PE10.3,A)') EIGA,
     1  ', $ EIGA =lower bound of eigenvalue range'
         WRITE(IFIL16,'(1PE10.3,A)') EIGB,
     1  '  $ EIGB =upper bound of eigenvalue range.      END D-3 rec.'
      ENDIF
C  NONLINEAR TRANSIENT INPUT...INDIC = 6
      IF (INDIC.EQ.6) THEN
         WRITE(IFIL16,'(A)')
     1' 0.,$ TMIN = 0. means starting time is zero.    BEGIN E-1 rec.'
         TMAX = 0.001
         WRITE(IFIL16,'(1PE10.3,A)') TMAX,
     1', $ TMAX = final time for transient analysis.'
         DT = 0.001*TMAX
         WRITE(IFIL16,'(1PE10.3,A)') DT,
     1', $ DT   = time increment for transient analysis.'
         WRITE(IFIL16,'(A)')
     1' 0., $ SUP = maximum expected displacement (irrelevant)'
         OMEGA = 2.*PI*CPS
         ALPHA = 0.15
         BETA  = DT
         GAMMA = 0.
         THOLD = 0.
         WRITE(IFIL16,'(1PE10.3,A)') ALPHA,
     1', $ ALPHA=damping factor for mass matrix=DAMPNG*2*PI*CPS'
         WRITE(IFIL16,'(1PE10.3,A)') BETA,
     1', $ BETA =damping factor for stiffness matrix=DAMPNG/2*PI*CPS'
         WRITE(IFIL16,'(1PE10.3,A)') GAMMA,
     1', $ GAMMA=damping factor for velocity-dependent forces'
         WRITE(IFIL16,'(1PE10.3,A)') THOLD,
     1'  $ THOLD can be used to suppress time step changes. END E-1'
C
         WRITE(IFIL16,'(A)')
     1' 0, $ IMPL = 0 means implicit time integration. BEGIN E-2 rec.'
         WRITE(IFIL16,'(A)')
     1' 4, $ METHOD=4 means use Parks formula for time integration'
         WRITE(IFIL16,'(A)')
     1' 1, $ IERRF =1 means use variable (automatic) time step'
         WRITE(IFIL16,'(I3,A)') IVELO,
     1', $ IVELO =0 means number of modal initial velocities'
         WRITE(IFIL16,'(A)')
     1' 0, $ IFORCE=0 means no user-written FORCET'
         WRITE(IFIL16,'(A)')
     1' 1, $ IPA  = 1 means linear variation (constant) applied load'
         WRITE(IFIL16,'(A)')
     1' 0  $ IPB  = 0 means load system B is not included.  END E-2'
         CA1 = STLD(1)*1.02
         CA2 = 0.
         CA3 = 0.
         CA4 = 1000000.*TMAX
         CA5 = CA4
         CA6 = 0.
         WRITE(IFIL16,'(1PE10.3,A)') CA1,
     1', $ CA1 = transient load parameter(case (a), p3-21) BEGIN E-3'
         WRITE(IFIL16,'(1PE10.3,A)') CA2,
     1', $ CA2 = transient load parameter(case (a), p3-21)'
         WRITE(IFIL16,'(1PE10.3,A)') CA3,
     1', $ CA3 = transient load parameter(case (a), p3-21)'
         WRITE(IFIL16,'(1PE10.3,A)') CA4,
     1', $ CA4 = transient load parameter(case (a), p3-21)'
         WRITE(IFIL16,'(1PE10.3,A)') CA5,
     1', $ CA5 = transient load parameter(case (a), p3-21)'
         WRITE(IFIL16,'(1PE10.3,A)') CA6,
     1'  $ CA6 = transient load parameter(case (a), p3-21)   END E-3'
         IF (IVELO.GT.0) THEN
            DO 568 I = 1,IVELO
            WRITE(IFIL16,'(1PE10.3,I4,I4,I4,A)') 
     1       VELOC(I),IMSTEP(I),IMMODE(I),IMRUN(I),
     1   ' $ EIGA,IMSTEP,IMMODE,IMRUN(init.veloc.mode)E-5'
  568       CONTINUE
         ENDIF
      ENDIF
C     End of (INDIC.EQ.6) condition
      IF (INDIC.NE.6) THEN
       IF (INDICX.NE.4) THEN
         IF(NSTRAT.EQ.-1)
     1     WRITE(IFIL16,'(A,I3,A,A)') ' 0,',NEIGS,', 0 ',
     1' $ NPATH=0: Riks method, NEIGS=no.of eigs, NSOL=0: contin.  ET-1'
         IF(NSTRAT.EQ.1) WRITE(IFIL16,'(A)')
     1' 0  $ NPATH = 0 means extrapolate from previous solution.   ET-1'
       ELSE
         WRITE(IFIL16,'(A,I3,A)') ' 0,',NEIGS,
     1' $ NPATH=0 get eigenmodes at PA, NEIGS=no. of eigenvalues.  ET-1'
C23456789012345678901234567890123456789012345678901234567890123456789012
       ENDIF
      ENDIF
C      
C  END OF INPUT FOR "bin" FILE.
C
      NPWEBS = NODWEB
      NPWEBR = NODWEB
      MPWEBS = 2*NODWEB + 1
      MPWEBR = 2*NODWEB + 1
      IF (NODWEB.GE.7) THEN
         MPWEBS = NODWEB
         MPWEBR = NODWEB
      ENDIF
C BEG APR 2006
      IF (MOD(NDFLGS-1,4).NE.0.AND.IELMNT.EQ.480) NDFLGS = NDFLGS + 2
      IF (MOD(NDFLGR-1,4).NE.0.AND.IELMNT.EQ.480) NDFLGR = NDFLGR + 2
      NPOUTS = NDFLGS
      NPOUTR = NDFLGR
      NPFAYS = NDFLGS
      IF (IBMSTR.EQ.3.AND.IZSTIF(1).EQ.1) NPFAYS = MAX(NODWEB,NDFLGS)
      IF (MOD(NPFAYS-1,4).NE.0.AND.IELMNT.EQ.480) NPFAYS = NPFAYS + 2
      NPFAYR = NDFLGR
      IF (IBMRNG.EQ.3.AND.IZSTIF(2).EQ.1) NPFAYR = MAX(NODWEB,NDFLGR)
      IF (MOD(NPFAYR-1,4).NE.0.AND.IELMNT.EQ.480) NPFAYR = NPFAYR + 2
C END APR 2006
C BEG AUG 2006
      CALL MOVER(NPWEBS,0,NPSTRW,1,NSTRNG)
      CALL MOVER(NPWEBR,0,NPRNGW,1,NRINGS)
      CALL MOVER(NPOUTS,0,NPSTRF,1,NSTRNG)
      CALL MOVER(NPOUTR,0,NPRNGF,1,NRINGS)
      CALL MOVER(NPFAYS,0,NPSTRB,1,NSTRNG)
      CALL MOVER(NPFAYR,0,NPRNGB,1,NRINGS)
      NUMHI = 13
      IF (NUMMXS.GT.0) THEN
         DO 1820 I = 1,NUMMXS
            INUMB = NUMSTR(I)
            IF (INUMB.NE.0) THEN
               NPSTRW(INUMB) = NUMHI
               NPSTRF(INUMB) = NUMHI
               NPSTRB(INUMB) = NUMHI
            ENDIF
 1820    CONTINUE
      ENDIF
C
      IF (NUMMXR.GT.0) THEN
         DO 1830 I = 1,NUMMXR
            INUMB = NUMRNG(I)
            IF (INUMB.NE.0) THEN
               NPRNGW(INUMB) = NUMHI
               NPRNGF(INUMB) = NUMHI
               NPRNGB(INUMB) = NUMHI
            ENDIF
 1830    CONTINUE
      ENDIF
C END AUG 2006
C
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Begin F-1 input data (discretization)...'
      IUNIT = 1
      IF (IUNIT.LT.NUNITS) THEN
C BEG FEB 2007
         IF (IUNITX.EQ.0)
     1   WRITE(IFIL14,'(2I4,A)') NROWS(1),NCOLS(1),
     1  ', $ F-1 NROWS( 1),  NCOLS( 1) unit 1 = cyl. shell'
         IF (IUNITX.GT.0) THEN
            IUP = IUNITX + 1
            WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A)') NROWS(1),NCOLS(1),
     1  ', $ F-1 NROWS(',IUP,'), NCOLS(',IUP,') unit ',IUP,' =cyl.shell'
         ENDIF
C END FEB 2007
      ELSE
         WRITE(IFIL14,'(2I4,A)') NROWS(1),NCOLS(1),
     1  '  $ F-1 NROWS( 1),  NCOLS( 1) unit 1 = cyl. shell'
      ENDIF
C
C BEG OCT 2004
C substringer input...
      IF (ISTRSB.EQ.3) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 1101 I = 1,NSTRSB
            IUNIT = IUNIT + 1
C BEG FEB 2007
            IUP = IUNIT + IUNITX
C END FEB 2007
            NROWS(IUNIT) = NROWS(1)
            NCOLS(IUNIT) = NPSUBS 
            IF (IUNIT.LT.NUNITS) THEN
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        ', $ f-1 substrng.web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,' substringer ',I
            ELSE
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        '  $ f-1 substrng.web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,' substringer ',I
            ENDIF
 1101    CONTINUE
      ENDIF
C     End of (ISTRSB.EQ.3) condition
C END OCT 2004
      IF (IBMSTR.GT.1.AND.IBMSTR.NE.5) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 1001 I = 1,NSTRNG
            IF (IBMSTR.EQ.3.AND.(TX(2).GT.TX(1).OR.IZSTIF(1).EQ.1)) THEN
               IUNIT = IUNIT + 1
C BEG FEB 2007
               IUP = IUNIT + IUNITX
C END FEB 2007
               NROWS(IUNIT) = NROWS(1)
C BEG AUG 2006
               NCOLS(IUNIT) = NPSTRB(I)
C END AUG 2006
               IF (IUNIT.LT.NUNITS) THEN
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           ', $ f-1 fayflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,' stringer no. ',I
               ELSE
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           '  $ f-1 fayflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,' stringer no. ',I
               ENDIF
            ENDIF
            IUNIT = IUNIT + 1
C BEG FEB 2007
            IUP = IUNIT + IUNITX
C END FEB 2007
            NROWS(IUNIT) = NROWS(1)
C BEG AUG 2006
            NCOLS(IUNIT) = NPSTRW(I)
C END AUG 2006
            IF (IUNIT.LT.NUNITS) THEN
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        ', $ f-1 strng.web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,' stringer no. ',I
            ELSE
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        '  $ f-1 strng.web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,' stringer no. ',I
            ENDIF
            IF ((IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
     1          (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) THEN
               IUNIT = IUNIT + 1
C BEG FEB 2007
               IUP = IUNIT + IUNITX
C END FEB 2007
               NROWS(IUNIT) = NROWS(1)
C BEG AUG 2006
               NCOLS(IUNIT) = NPSTRF(I)
C END AUG 2006
               IF (IUNIT.LT.NUNITS) THEN
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           ', $ f-1 outflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,' stringer no. ',I
               ELSE
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           '  $ f-1 outflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,' stringer no. ',I
               ENDIF
            ENDIF
 1001    CONTINUE
      ENDIF
C     End of (IBMSTR.GT.1.AND.IBMSTR.NE.5) condition
C
C BEG OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
C subring input...
      IF (IRNGSB.EQ.3) THEN
         DO 1102 I = 1,NRNGSB
            IUNIT = IUNIT + 1
C BEG FEB 2007
            IUP = IUNIT + IUNITX
C END FEB 2007
            NROWS(IUNIT) = NPSUBR 
            NCOLS(IUNIT) = NCOLS(1)
            IF (IUNIT.LT.NUNITS) THEN
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        ', $ f-1 subring web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,' subring ',I
            ELSE
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        '  $ f-1 subring web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,' subring ',I
            ENDIF
 1102    CONTINUE
      ENDIF
C END OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (IBMRNG.GT.1.AND.IBMRNG.NE.5) THEN
         DO 1002 I = 1,NRINGS
            IF (IBMRNG.EQ.3.AND.(TY(2).GT.TX(1).OR.IZSTIF(2).EQ.1)) THEN
               IUNIT = IUNIT + 1
C BEG FEB 2007
               IUP = IUNIT + IUNITX
C END FEB 2007
C BEG AUG 2006
               NROWS(IUNIT) = NPRNGB(I)
C END AUG 2006
               NCOLS(IUNIT) = NCOLS(1)
               IF (IUNIT.LT.NUNITS) THEN
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           ', $ f-1 fayflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,'   ring   no. ',I
               ELSE
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           '  $ f-1 fayflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,'   ring   no. ',I
               ENDIF
            ENDIF
            IUNIT = IUNIT + 1
C BEG FEB 2007
            IUP = IUNIT + IUNITX
C END FEB 2007
C BEG AUG 2006
            NROWS(IUNIT) = NPRNGW(I)
C END AUG 2006
            NCOLS(IUNIT) = NCOLS(1)
            IF (IUNIT.LT.NUNITS) THEN
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        ', $ f-1  ring web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,'   ring   no. ',I
            ELSE
               WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1         NROWS(IUNIT),NCOLS(IUNIT),
     1        '  $ f-1  ring web NROWS(',IUP,'),NCOLS(',IUP,
     1        ') Unit ',IUP,'   ring   no. ',I
            ENDIF
            IF ((IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.
     1          (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) THEN
               IUNIT = IUNIT + 1
C BEG FEB 2007
               IUP = IUNIT + IUNITX
C END FEB 2007
C BEG AUG 2006
               NROWS(IUNIT) = NPRNGF(I)
C END AUG 2006
               NCOLS(IUNIT) = NCOLS(1)
               IF (IUNIT.LT.NUNITS) THEN
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           ', $ f-1 outflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,'   ring   no. ',I
               ELSE
                  WRITE(IFIL14,'(2I4,A,I3,A,I3,A,I3,A,I3)')
     1            NROWS(IUNIT),NCOLS(IUNIT),
     1           '  $ f-1 outflange NROWS(',IUP,'),NCOLS(',IUP,
     1           ') Unit ',IUP,'   ring   no. ',I
               ENDIF
            ENDIF
 1002    CONTINUE
      ENDIF
C     End of (IBMRNG.GT.1.AND.IBMRNG.NE.5) condition
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C  UNIT NUMBERING FOR SHELL UNITS IN STRINGERS
      GAP = 0.
      IUNSTR = 0
      IFYSTR = 0
      IWBSTR = 0
      IOTSTR = 0
      IF (ISMRST.EQ.0) THEN
         YADD = 0.
         IF (IREF.EQ.0) YADD = TX(1)/2.
         IF (IREF.EQ.1.AND.R.LT.0.)  YADD = TX(1)
         IF (IREF.EQ.-1.AND.R.GT.0.) YADD = TX(1)
         YADD2 = 0.
         IF (IZSTIF(1).EQ.0) YADD2 = TX(2) - TX(1)
         YADD3 = 0.
         IF (IZSTIF(1).EQ.1) YADD3 = TX(2)/2.
         GAP = YADD + YADD2 + YADD3
C
         IF (IBMSTR.EQ.2) THEN
            IUNSTR = 1
            IWBSTR = 1
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (IBMSTR.EQ.3.OR.IBMSTR.EQ.4) THEN
            IF (IBMSTR.EQ.3.AND.(IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1))) THEN
               IUNSTR = IUNSTR + 1
               IFYSTR = IUNSTR
            ENDIF
            IUNSTR = IUNSTR + 1
            IWBSTR = IUNSTR
            IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) THEN
               IUNSTR = IUNSTR + 1
               IOTSTR = IUNSTR
            ENDIF
         ENDIF
      ENDIF
C     End of (ISMRST.EQ.0) condition
C
C  UNIT NUMBERING FOR SHELL UNITS IN RINGS
      IUNRNG = 0
      IFYRNG = 0
      IWBRNG = 0
      IOTRNG = 0
      IF (ISMRRG.EQ.0) THEN
         IF (IBMRNG.EQ.2) THEN
            IUNRNG = 1
            IWBRNG = 1
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (IBMRNG.EQ.3.OR.IBMRNG.EQ.4) THEN
            IF (IBMRNG.EQ.3.AND.(IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1))) THEN
               IUNRNG = IUNRNG + 1
               IFYRNG = IUNRNG
            ENDIF
            IUNRNG = IUNRNG + 1
            IWBRNG = IUNRNG
            IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
               IUNRNG = IUNRNG + 1
               IOTRNG = IUNRNG
            ENDIF
         ENDIF
      ENDIF
C
C  DISCRETE BEAMS ATTACHED TO UNIT 1, THE CYL. SHELL...
      NRGS = 0
      NSTR = 0
      IUNIT = 1
      IF (ISMRST.EQ.0) THEN
         IF (IBMSTR.EQ.1) THEN
            NSTR = NSTRNG
            IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) NSTR = NSTR + NSTRNG
            IF (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)) NSTR = NSTR + NSTRNG
         ENDIF
         IF (IBMSTR.EQ.2.OR.IBMSTR.EQ.4) THEN
            IF (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)) NSTR = NSTR + NSTRNG
         ENDIF
C BEG OCT 2004
         IF (ISTRSB.EQ.2.AND.NSTRSB.GT.0) THEN
            IF (ICLOSE.EQ.1) NSTR = NSTR + NSTSUB*NSTRNG
            IF (ICLOSE.EQ.0) NSTR = NSTR + NSTSUB*(NSTRNG-1)
         ENDIF
C END OCT 2004
      ENDIF
C
      IF (ISMRRG.EQ.0) THEN
         IF (IBMRNG.EQ.1) THEN
            NRGS = NRINGS
            IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) NRGS = NRGS + NRINGS
            IF (IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)) NRGS = NRGS + NRINGS
         ENDIF
         IF (IBMRNG.EQ.2.OR.IBMRNG.EQ.4) THEN
            IF (IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)) NRGS = NRGS + NRINGS
         ENDIF
C BEG OCT 2004
         IF (IRNGSB.EQ.2.AND.NRNGSB.GT.0) THEN
            IF (IRENDS.EQ.0) NRGS = NRGS + NRGSUB*NRINGS
            IF (IRENDS.EQ.1) NRGS = NRGS + NRGSUB*(NRINGS-1)
         ENDIF
C END OCT 2004
      ENDIF
C
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)')
     1'C Begin F-2 input data, if any (units with discrete beams)...'
      IF (NRGS.NE.0.OR.NSTR.NE.0)
     1  WRITE(IFIL14,'(3I4,A)') IUNIT,NRGS,NSTR,
     1' $ f-2 IUNIT,NRGS,NSTR discrete beams attached to cyl.'
C
      NRGS = 0
      NSTR = 0
C BEG OCT 2004
      IUNIT = 1 + NSTSBX
C END OCT 2004
      IF (IBMSTR.EQ.2.AND.ISMRST.EQ.0.AND.
     1                   (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) THEN
         DO 1003 I = 1,NSTRNG
            IUNIT = IUNIT + 1
            NSTR  = 1
            WRITE(IFIL14,'(3I4,A)') IUNIT,NRGS,NSTR,
     1    ' $ f-2 IUNIT,NRGS,NSTR discrete beam attached to str.webtip'
 1003    CONTINUE
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C
      NRGS = 0
      NSTR = 0
C BEG OCT 2004
      IUNIT = 1 + NSTSBX + NRGSBX + IUNSTR*NSTRNG
C END OCT 2004
      IF (IBMRNG.EQ.2.AND.ISMRRG.EQ.0.AND.
     1                   (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) THEN
         DO 1004 I = 1,NRINGS
            IUNIT = IUNIT + 1
            NRGS  = 1
            WRITE(IFIL14,'(3I4,A)') IUNIT,NRGS,NSTR,
     1    ' $ f-2 IUNIT,NRGS,NSTR discrete beam attached to ring webtip'
 1004    CONTINUE
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C   
C BEG APR 2006
      IF (ICLOSED.EQ.1) THEN
C END APR 2006
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)') 'C Begin G-1 input data (junctions)...'
         MUNIT = 1
         MBOUND = 2
C BEG FEB 2007
         NUNIT = 1 + IUNITX
C END FEB 2007
         NBOUND = 4
         WRITE(IFIL14,'(4I4,A)') MUNIT, MBOUND, NUNIT, NBOUND,
     1   ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed cyl.'
C BEG FEB 2007
         IF (IUNITX.GT.0) THEN
            MBOUND = 4
            NBOUND = 2
            WRITE(IFIL14,'(4I4,A)') MUNIT, MBOUND, NUNIT, NBOUND,
     1    ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed cyl.'
         ENDIF
C END FEB 2007
      ENDIF
C BEG MAR 2007
      MUNITC = 0
      IF (IUNITR.GT.0) MUNITC = IUNITR - 1
C END MAR 2007
C BEG OCT 2004
C BEG APR 2006
      IF (ICLOSED.EQ.1.AND.IRNGSB.EQ.3) THEN
C END APR 2006
C  CLOSED SUBRING CONDITIONS..
         MBOUND = 2
         NBOUND = 4
C BEG FEB 2007
         MBOUND2 = 4
         NBOUND2 = 2
C END FEB 2007
         IUSTRT = 1 + IUNSTR*NSTRNG + 1 + NSTSBX
         DO 1105 I = 1,NRNGSB
          IUNIT = IUSTRT + I-1
C BEG FEB 2007
          IF (IUNITR.GT.0) MUNITC = MUNITC + 1
          MUNIT = IUNIT
          NUNIT = MUNIT + IUNITX
          J = MUNIT + IUNITX
          MUNITP = MUNIT
          IF (IUNITR.GT.0) MUNITP = MUNITC
          WRITE(IFIL14,'(4I4,A,I3,A,I3)') MUNITP,MBOUND,NUNIT,NBOUND,
     1' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed subring ',I,', unit ',J
C23456789012345678901234567890123456789012345678901234567890123456789012
          IF (IUNITX.GT.0) THEN
             WRITE(IFIL14,'(4I4,A,I3,A,I3)')
     1       MUNITP, MBOUND2, NUNIT, NBOUND2,
     1  ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed subring ',I,', unit ',J
          ENDIF
C END FEB 2007
 1105    CONTINUE
      ENDIF
C END OCT 2004
C BEG APR 2006
      IF (ICLOSED.EQ.1.AND.IUNRNG.GE.1) THEN
C END APR 2006
C  CLOSED RING CONDITIONS..
         MBOUND = 2
         NBOUND = 4
C BEG FEB 2007
         MBOUND2 = 4
         NBOUND2 = 2
C END FEB 2007
C BEG OCT 2004
         IUSTRT = 1 + IUNSTR*NSTRNG + 1 + NSTSBX + NRGSBX
C END OCT 2004
         DO 1005 I = 1,NRINGS
          IUNIT = IUSTRT + IUNRNG*(I-1)
C BEG FEB 2007
          IF (IUNITR.GT.0) MUNITC = MUNITC + 1
          MUNIT = IUNIT
          NUNIT = MUNIT + IUNITX
          J = MUNIT +IUNITX
          MUNITP = MUNIT
          IF (IUNITR.GT.0) MUNITP = MUNITC
           WRITE(IFIL14,'(4I4,A,I3,A,I3)') MUNITP,MBOUND,NUNIT,NBOUND,
     1 ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed ring no.',I,', unit ',J
          IF (IUNITX.GT.0) THEN
            WRITE(IFIL14,'(4I4,A,I3,A,I3)')
     1      MUNITP, MBOUND2, NUNIT, NBOUND2,
     1  ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed ring no.',I,', unit ',J
C23456789012345678901234567890123456789012345678901234567890123456789012
          ENDIF
          IF (IUNRNG.GE.2) THEN
             IF (IUNITR.GT.0) MUNITC = MUNITC + 1
             MUNIT = MUNIT + 1
             NUNIT = MUNIT + IUNITX
             J = MUNIT + IUNITX
             MUNITP = MUNIT
             IF (IUNITR.GT.0) MUNITP = MUNITC
             WRITE(IFIL14,'(4I4,A,I3,A,I3)') MUNITP,MBOUND,NUNIT,NBOUND,
     1 ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed ring no.',I,', unit ',J
           IF (IUNITX.GT.0) THEN
            WRITE(IFIL14,'(4I4,A,I3,A,I3)')
     1      MUNITP, MBOUND2, NUNIT, NBOUND2,
     1  ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed ring no.',I,', unit ',J
           ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
          ENDIF
          IF (IUNRNG.GE.3) THEN
             IF (IUNITR.GT.0) MUNITC = MUNITC + 1
             MUNIT = MUNIT + 1
             NUNIT = MUNIT + IUNITX
             J = MUNIT + IUNITX
             MUNITP = MUNIT
             IF (IUNITR.GT.0) MUNITP = MUNITC
             WRITE(IFIL14,'(4I4,A,I3,A,I3)') MUNITP,MBOUND,NUNIT,NBOUND,
     1 ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed ring no.',I,', unit ',J
           IF (IUNITX.GT.0) THEN
            WRITE(IFIL14,'(4I4,A,I3,A,I3)')
     1      MUNITP, MBOUND2, NUNIT, NBOUND2,
     1  ' $ g-1 MUNIT,MBOUND,NUNIT,NBOUND closed ring no.',I,', unit ',J
           ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END FEB 2007
          ENDIF
 1005    CONTINUE
      ENDIF
C     End of (ICLOSE.EQ.1.AND.IUNRNG.GE.1) condition
C
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Begin partial compatability (g-2) records.'
C NEXT, DO PARTIAL COMPATABILITY RECORDS (NPATS G-2 RECORDS)...
C FIRST, IMPOSE v = constant and w = constant along row 1
C                            and w = constant along row NROWS(1)
      WRITE(IFIL14,'(A)')
     1 'C Partial compatability (g-2) records for the cylindrical shell'
      IU1 = 1
      IR1 = 1
      IC1 = 1
      ID1 = 2
C BEG APR 2006
      IU2 = 1 + IUNITX
C END APR 2006
      IR2 = 1
      IC2 = 0
      ID2 = 2
C BEG FEB 2007
      IF (IFLAT.EQ.0)
     1WRITE(IFIL14,'(I2,I4,I2,I2,I4,I4,I2,I2,A)')
     1 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1 ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;v=const.,row 1'
C END FEB 2007
      ID1 = 3
      ID2 = 3
      IF (IRENDS.EQ.0.OR.IBMRNG.NE.5)
     1 WRITE(IFIL14,'(I2,I4,I2,I2,I4,I4,I2,I2,A)')
     1 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1 ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=const.,row 1'
      ID1 = 4
      ID2 = 4
      WRITE(IFIL14,'(I2,I4,I2,I2,I4,I4,I2,I2,A)')
     1 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1 ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;ru=const,row 1'
      IR1 = NROWS(1)
      IR2 = NROWS(1)
      WRITE(IFIL14,'(I2,I4,I2,I2,I4,I4,I2,I2,A,I3)')
     1 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1 ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;ru=const,row',NROWS(1)
      ID1 = 3
      ID2 = 3
      IF (IRENDS.EQ.0.OR.IBMRNG.NE.5)
     1 WRITE(IFIL14,'(I2,I4,I2,I2,I4,I4,I2,I2,A,I3)')
     1 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=const.,row ',NROWS(1)
      IF (IBMRNG.EQ.5) THEN
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C w=constant imposed along ring lines of attachment...'
         DO 1151 I = 1,NRINGS
            IR1 = IROWRG(I)
            IR2 = IROWRG(I)
            WRITE(IFIL14,'(I2,I4,I2,I2,I4,I4,I2,I2,A,I3)')
     1      IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1    ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=const.,row ',
     1      IROWRG(I)
 1151    CONTINUE
      ENDIF
C
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0.OR.IBMSTR.EQ.5) THEN
      IF ((ISYMM.EQ.0.AND.ICLOSED.EQ.0).OR.IBMSTR.EQ.5) THEN
C END AUG 2006
C END APR 2006
         IU1 = 1
         IR1 = 1
         IC1 = 1
         ID1 = 3
         IU2 = 1
         IR2 = 0
         IC2 = 1
         ID2 = 3
         IF (IBMSTR.EQ.5) THEN
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A)')
     1     'C w=constant imposed along stringer lines of attachment...'
            DO 1152 I = 1,NSTRNG
               IC1 = ICOLST(I)
               IC2 = ICOLST(I)
               WRITE(IFIL14,'(I2,I2,I4,I2,I2,I2,I4,I2,A,I3)')
     1         IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1       ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=const.,col ',
     1         ICOLST(I)
 1152       CONTINUE
         ELSE
            WRITE(IFIL14,'(I2,I2,I4,I2,I2,I2,I4,I2,A)')
     1      IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1    ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=const.,col. 1'
            IC1 = NCOLS(1)
            IC2 = NCOLS(1)
            WRITE(IFIL14,'(I2,I2,I4,I2,I2,I2,I4,I2,A,I3)')
     1      IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1    ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=const.,col ',
     1      NCOLS(1)
         ENDIF
      ENDIF
C     End of (ICLOSE.EQ.0.OR.IBMSTR.EQ.5) condition
C
C BEG OCT 2004
C NEXT, ATTACH SUBSTRINGERS TO CYL. SHELL...
      IF (LNKSB1.EQ.0.AND.ISTRSB.EQ.3) THEN
        WRITE(IFIL14,'(A)')
     1'C Partial compatability (g-2) records for the substringers.'
        DO 1106 I = 1,NSTRSB
         WRITE(IFIL14,'(A,I3)')
     1  'C Partial compatability (g-2) records for substringer ',I
C
C BEG FEB 2007
          IU1 = 1 + IUNITX
C END FEB 2007
          IR1 = 0
          IC1 = ICSTSB(I)
          ID1 = 0
C
C BEG FEB 2007
          IU2 = 1 + I + IUNITX
C END FEB 2007
          IR2 = 0
          IC2 = 1
          IF (GAPSB1.LT.0.) IC2 = NPSUBS 
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 substringer ',I
 1106   CONTINUE
      ENDIF
C     End of (LNKSB1.EQ.0.AND.ISTRSB.EQ.3) condition
C END OCT 2004
C NEXT, ATTACH STRINGERS TO CYL. SHELL AND IMPOSE w=CONSTANT IF NO SWAY...
      IF (IBMSTR.NE.1.AND.IBMSTR.NE.5) THEN
        WRITE(IFIL14,'(A)')
     1'C Partial compatability (g-2) records for the stringers.'
        DO 1006 I = 1,NSTRNG
         WRITE(IFIL14,'(A,I3)')
     1  'C Partial compatability (g-2) records for stringer ',I
C
         IF (IBMSTR.EQ.3.AND.(IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1))) THEN
C BEG FEB 2007
          IU1 = 1 + IUNITX
C END FEB 2007
          IR1 = 0
          IC1 = ICOLST(I)
          ID1 = 0
C BEG OCT 2004
C BEG FEB 2007
          IU2 = 1 + IUNSTR*(I-1) + 1 + NSTSBX + IUNITX
C END FEB 2007
C END OCT 2004
          IR2 = 0
C BEG AUG 2006
          IC2 = NPSTRB(I)/2 + 1
C BEG AUG 2006
          ID2 = 0
          IF (ILINK1.EQ.0)
     1    WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 fayflange,stringer ',I
          IF (ISWAY.EQ.0) THEN
             IR1 = 1
             ID1 = 3
             IR2 = 1
             IC2 = 0
             ID2 = 3
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,row 1 fayflg',I
             IR1 = NROWS(1)
             IR2 = NROWS(1)
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,row n fayflg',I
          ENDIF
         ENDIF
C        End of (IBMSTR.EQ.3.AND.(IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1))) condition
C
         IF (IZSTIF(1).EQ.0) THEN
          IADD = 1
          IF (IBMSTR.EQ.3.AND.TX(2).GT.TX(1)) IADD = 2
          IF (ILINK1.EQ.1.AND.IADD.EQ.1) GO TO 1154
          IF (ILINK1.EQ.0.OR.IADD.EQ.1) THEN
C BEG FEB 2007
             IU1 = 1 + IUNITX
C END FEB 2007
             IR1 = 0
             IC1 = ICOLST(I)
             ID1 = 0
          ELSE
C BEG OCT 2004
C BEG FEB 2007
             IU1 = 1 + IUNSTR*(I-1) + 1 + NSTSBX + IUNITX
C END FEB 2007
C END OCT 2004
             IR1 = 0
             IC1 = NCOLS(IU1)/2 + 1
             ID1 = 0
          ENDIF
C BEG OCT 2004
C BEG FEB 2007
          IU2 = 1 + IUNSTR*(I-1) + IADD + NSTSBX + IUNITX
C END FEB 2007
C END OCT 2004
          IR2 = 0
          IC2 = 1
C BEG AUG 2006
          IF (R.LT.0.) IC2 = NPSTRW(I)
C END AUG 2006
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I3)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of stringer ',I
C BEG NOV 2009
          IF (IBCX0XL.EQ.1) THEN
           WRITE(IFIL14,'(I4,A,I4,A,I4,A,A,I3)')
     1     IU1,' 1 ',IC1,' 1 ',IU2,' 1 0 1 ',
     1   ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of stringer:u=C ',I
           WRITE(IFIL14,'(I4,I4,I4,A,I4,I4,A,A,I3)')
     1     IU1,NROWS(IU1),IC1,' 1 ',IU2,NROWS(IU2),' 0 1 ',
     1   ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of stringer:u=C ',I
          ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END NOV 2009
 1154     CONTINUE
         ENDIF
C        End of (IZSTIF(1).EQ.0) condition
C
         IF (IZSTIF(1).EQ.1) THEN
C BEG OCT 2004
C BEG FEB 2007
          IU1 = 1 + IUNSTR*(I-1) + 1 + NSTSBX + IUNITX
C END FEB 2007
C END OCT 2004
          IR1 = 0
C BEG AUG 2006
          IC1 = NPSTRB(I)
C END AUG 2006
          ID1 = 0
          IU2 = IU1 + 1
          IR2 = 0
          IC2 = 1
C BEG AUG 2006
          IF (R.LT.0.) IC2 = NPSTRW(I)
C END AUG 2006
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of stringer ',I
C BEG NOV 2009
          IF (IBCX0XL.EQ.1) THEN
           WRITE(IFIL14,'(I4,A,I4,A,I4,A,A,I3)')
     1     IU1,' 1 ',IC1,' 1 ',IU2,' 1 0 1 ',
     1   ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of stringer:u=C ',I
           WRITE(IFIL14,'(I4,I4,I4,A,I4,I4,A,A,I3)')
     1     IU1,NROWS(IU1),IC1,' 1 ',IU2,NROWS(IU2),' 0 1 ',
     1   ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of stringer:u=C ',I
          ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END NOV 2009
         ENDIF
C        End of (IZSTIF(1).EQ.1) condition
C
C BEG OCT 2004
C  about 20 commented statements for "(ISWAY.EQ.0)" removed.
C END OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
C
         IF ((IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
     1       (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) THEN
          IADD = 1
          IF (IBMSTR.EQ.3.AND.(IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)))
     1     IADD = 2
C BEG OCT 2004
C BEG FEB 2007
          IU1 = 1 + IUNSTR*(I-1) + IADD + NSTSBX + IUNITX
C END FEB 2007
C END OCT 2004
          IR1 = 0
C BEG AUG 2006
          IC1 = NPSTRW(I)
C END AUG 2006
          IF (R.LT.0.) IC1 = 1
          ID1 = 0
          IU2 = IU1 + 1
          IR2 = 0
          IC2 = 1
C BEG AUG 2006
          IF (ISTIF(1).EQ.1) IC2 = NPSTRF(I)/2 + 1
C END AUG 2006
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I3)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 outflangestringer ',I
C
          IF (ISWAY.EQ.0) THEN
             IR1 = 1
             ID1 = 2
             IR2 = 1
             IC2 = 0
             ID2 = 3
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,row 1 outflg',I
             IR1 = NROWS(1)
             IR2 = NROWS(1)
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,row n outflg',I
          ENDIF
         ENDIF
C        End of IF ((IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
C    1            (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) condition 
C
 1006   CONTINUE
C       End of "do loop": I = 1,NSTRNG
      ENDIF
C     End of (IBMSTR.NE.1.AND.IBMSTR.NE.5) condition
C
C BEG OCT 2004
C NEXT, ATTACH SUBRINGS TO CYL. SHELL...
      IF (LNKSB2.EQ.0.AND.IRNGSB.EQ.3) THEN
        WRITE(IFIL14,'(A)')
     1 'C Partial compatability (g-2) records for the subrings.'
        DO 1107 I = 1,NRNGSB
         WRITE(IFIL14,'(A,I3)')
     1  'C Partial compatability (g-2) records for subring ',I
C BEG APR 2006
          IU1 = 1 + IUNITX
C END APR 2006
          IR1 = IRRGSB(I)
          IC1 = 0
          ID1 = 0
C
C BEG APR 2006
          IU2 = 1 + IUNSTR*NSTRNG + NSTSBX + I + IUNITX
C END APR 2006
          IR2 = 1
          IF (GAPSB2.LT.0.) IR2 = NPSUBR
          IC2 = 0
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 subring ',I
 1107   CONTINUE
      ENDIF
C END OCT 2004
C NEXT, ATTACH RINGS TO CYL. SHELL AND IMPOSE w=CONSTANT IF NO SWAY...
      IF (IBMRNG.NE.1.AND.IBMRNG.NE.5) THEN
        WRITE(IFIL14,'(A)')
     1 'C Partial compatability (g-2) records for the rings.'
        DO 1007 I = 1,NRINGS
         WRITE(IFIL14,'(A,I3)')
     1  'C Partial compatability (g-2) records for ring ',I
         IF (IBMRNG.EQ.3.AND.(IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1))) THEN
C BEG APR 2006
          IU1 = 1 + IUNITX
C END APR 2006
          IR1 = IROWRG(I)
          IC1 = 0
          ID1 = 0
C BEG OCT 2004
C BEG APR 2006
          IU2 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + 1
     1                                 +NSTSBX +NRGSBX + IUNITX
C END APR 2006
C END OCT 2004
C BEG AUG 2006
          IR2 = NPRNGB(I)/2 + 1
C END AUG 2006
          IC2 = 0
          ID2 = 0
          IF (ILINK2.EQ.0)
     1    WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 fayflange, ring ',I
C BEG APR 2006
C BEG AUG 2006
C         IF (ICLOSED.EQ.0.AND.ISWAY.EQ.0) THEN
          IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0.AND.ISWAY.EQ.0) THEN
C END AUG 2006
C END APR 2006
             IC1 = 1
             ID1 = 3
             IR2 = 0
             IC2 = 1
             ID2 = 3
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,col 1 fayflg',I
             IC1 = NCOLS(1)
             IC2 = NCOLS(1)
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,col n fayflg',I
          ENDIF
         ENDIF
         IF (IZSTIF(2).EQ.0) THEN
          IADD = 1
          IF (IBMRNG.EQ.3.AND.TY(2).GT.TX(1)) IADD = 2
C BEG JUN 2006
C         WRITE(6,'(A,4I5)')
C    1  ' ring partial compat: I,IADD,IBMRNG,ILINK2=',
C    1                         I,IADD,IBMRNG,ILINK2
C END JUN 2006
          IF (ILINK2.EQ.1.AND.IADD.EQ.1) GO TO 1158
          IF (ILINK2.EQ.0.OR.IADD.EQ.1) THEN
C BEG APR 2006
             IU1 = 1 + IUNITX
C END APR 2006
             IR1 = IROWRG(I)
             IC1 = 0
             ID1 = 0
C BEG JUN 2006
C            WRITE(6,'(A,3I5)')
C    1     ' ring partial compat: I,IROWRG(I),IR1=',
C    1                            I,IROWRG(I),IR1
C END JUN 2006
          ELSE
C BEG OCT 2004
C BEG APR 2006
             IU1 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + 1
     1                                   +NSTSBX +NRGSBX + IUNITX
C END APR 2006
C END OCT 2004
             IR1 = NROWS(IU1)/2 + 1
             IC1 = 0
             ID1 = 0
          ENDIF
C BEG OCT 2004
C BEG APR 2006
          IU2 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + IADD
     1                                   +NSTSBX +NRGSBX + IUNITX
C END APR 2006
C END OCT 2004
          IR2 = 1
C BEG AUG 2006
          IF (IPOSNR.EQ.-1) IR2 = NPRNGW(I)
C END AUG 2006
          IC2 = 0
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of ring ',I
 1158     CONTINUE
         ENDIF
         IF (IZSTIF(2).EQ.1) THEN
C BEG OCT 2004
          IU1 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + 1
     1                                           +NSTSBX +NRGSBX
C END OCT 2004
C BEG AUG 2006
          IR1 = NPRNGB(I)
C END AUG 2006
          IC1 = 0
          ID1 = 0
          IU2 = IU1 + 1
          IR2 = 1
C BEG AUG 2006
          IF (IPOSNR.EQ.-1) IR2 = NPRNGW(I)
C END AUG 2006
          IC2 = 0
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 web of ring ',I
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF ((IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.
     1       (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) THEN
          IADD = 1
          IF (IBMRNG.EQ.3.AND.(IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)))
     1    IADD = 2
C BEG OCT 2004
C BEG APR 2006
          IU1 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + IADD
     1                                   +NSTSBX +NRGSBX + IUNITX
C END APR 2006
C END OCT 2004
C BEG AUG 2006
          IR1 = NPRNGW(I)
C END AUG 2006
          IF (IPOSNR.EQ.-1) IR1 = 1
          IC1 = 0
          ID1 = 0
          IU2 = IU1 + 1
          IR2 = 1
C BEG AUG 2006
          IF (ISTIF(2).EQ.1) IR2 = NPRNGF(I)/2 + 1
C END AUG 2006
          IC2 = 0
          ID2 = 0
          WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1    IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1  ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2 outflange, ring ',I
C BEG APR 2006
C BEG AUG 2006
C         IF (ICLOSED.EQ.0.AND.ISWAY.EQ.0) THEN
          IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0.AND.ISWAY.EQ.0) THEN
C END AUG 2006
C END APR 2006
             IC1 = 1
             ID1 = 1
             IR2 = 0
             IC2 = 1
             ID2 = 3
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,col 1 outflg',I
             IC1 = NCOLS(1)
             IC2 = NCOLS(1)
             WRITE(IFIL14,'(I4,I4,I4,I2,I4,I4,I4,I2,A,I2)')
     1       IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2,
     1     ' $ g-2 IU1,IR1,IC1,ID1,IU2,IR2,IC2,ID2;w=c,col n outflg',I
          ENDIF
         ENDIF
C        End of IF ((IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.
C    1            (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) condition 
C
 1007   CONTINUE
C       End of "do loop": I = 1,NRINGS
      ENDIF
C     End of (IBMRNG.NE.1.AND.IBMRNG.NE.5) condition
C
C BEG MAR 2007
      ILGRNG = 0
C END MAR 2007
      IF (ISWAY.EQ.0) THEN
C BEG OCT 2004
        SCALE = CSKIN(1,1)
C first, substringer sway constraints...
        IF (ISTRSB.EQ.3.AND.NSTRSB.GT.0) THEN
          WRITE(IFIL14,'(A)') 
     1    'C lagrange constraints for substringer sidesway'
          DO 1175 I = 1,NSTRSB
C BEG FEB 2007
             IU2 = 1 + I + IUNITX
             IU1 = 1 + IUNITX
C END FEB 2007
             IX1 = 1
             IX2 = 1
             IY1 = ICSTSB(I)
             IY21 = NPSUBS/2 + 1
             IY22 = NPSUBS
             IF (GAPSB1.LT.0.) IY22 = 1
             ID1 = 2
             ID2 = 3
             FSIGN = 1.0
             IF (GAPSB1.LT.0.) FSIGN = -1.0
             HEIGHT = ZSTRSB(2) - ZSTRSB(1)
             IF (LNKSB1.EQ.0) THEN
                CC11 = 
     1          ((RADIUS +FSIGN*0.5*(ABS(GAPSB1)+HEIGHT))/RADIUS)*SCALE
                CC12 =
     1          ((RADIUS +    FSIGN*(ABS(GAPSB1)+HEIGHT))/RADIUS)*SCALE
             ELSE
                CC11 = 
     1          ((RADIUS + FSIGN*(ABS(GAPSB1)+0.5*HEIGHT))/RADIUS)*SCALE
                CC12 = 
     1          ((RADIUS + FSIGN*(ABS(GAPSB1) +   HEIGHT))/RADIUS)*SCALE
             ENDIF
             CC2 = SCALE
             NTERMS = 2
C23456789012345678901234567890123456789012345678901234567890123456789012
C at row 1...
C  at web midheight...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $g-3=row 1 substringer sway constraint for substringer  ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC11,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY21,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
C  at web tip...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $g-3=row 1 substringer sway constraint for substringer  ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC12,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY22,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
C
C at row n...
             IX1 = NROWS(1)
             IX2 = NROWS(1)
C  at web midheight...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $g-3=row n substringer sway constraint for substringer  ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC11,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY21,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
C  at web tip...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $g-3=row n substringer sway constraint for substringer  ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC12,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY22,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
 1175     CONTINUE
C         End of "do loop": I = 1,NSTRSB
        ENDIF
C       End of (ISTRSB.EQ.3.AND.NSTRSB.GT.0) condition
C END OCT 2004
C Next, major stringer sway constraints...
        IF (IBMSTR.NE.1.AND.IBMSTR.NE.5.AND.NSTRNG.GT.0) THEN
          WRITE(IFIL14,'(A)') 
     1    'C lagrange constraints for stringer sidesway'
          DO 1075 I = 1,NSTRNG
C BEG OCT 2004
C BEG FEB 2007
             IU2 = 1 + IUNSTR*(I-1) + IWBSTR + NSTSBX +IUNITX
C END OCT 2004
             IU1 = 1 + IUNITX
C END FEB 2007
C BEG OCT 2004
             IF (IZSTIF(1).EQ.1) 
C BEG FEB 2007
     1        IU1 = 1 + IUNSTR*(I-1) + IFYSTR +NSTSBX +IUNITX
C END FEB 2007
C END OCT 2004
             IX1 = 1
             IX2 = 1
             IY1 = ICOLST(I)
C BEG MAR 2007
             IF ((I.EQ.1.OR.I.EQ.NSTRNG).AND.IUNITX.GT.0
     1                                  .AND.IZSTIF(1).EQ.0) THEN
                IU1 = 1
                IF (I.EQ.1) IY1 = IUNITC 
                IF (I.EQ.NSTRNG) IY1 = 1 
             ENDIF
C END MAR 2007 
C END MAR 2007
C BEG AUG 2006
             IF (IZSTIF(1).EQ.1) IY1 = NPSTRB(I)
             IY21 = NPSTRW(I)/2 + 1
             IY22 = NPSTRW(I)
C END AUG 2006
             IF (R.LT.0.) IY22 = 1
             ID1 = 2
             ID2 = 3
C BEG OCT 2004
C  six commented statements removed.
C END OCT 2004
             IF (ILINK1.EQ.0) THEN
                CC11 = ABS((R + 0.5*(GAP+H(1)))/R)*SCALE
                CC12 = ABS((R +     (GAP+H(1)))/R)*SCALE
             ELSE
                CC11 = ABS((R + GAP + 0.5*H(1))/R)*SCALE
                CC12 = ABS((R + GAP +     H(1))/R)*SCALE
             ENDIF
             CC2 = SCALE
             NTERMS = 2
C23456789012345678901234567890123456789012345678901234567890123456789012
C at row 1...
C  at web midheight...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = row 1 stringer sway constraint for stringer no. ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC11,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY21,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
C  at web tip...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = row 1 stringer sway constraint for stringer no. ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC12,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY22,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
C
C at row n...
             IX1 = NROWS(1)
             IX2 = NROWS(1)
C  at web midheight...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = row n stringer sway constraint for stringer no. ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC11,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY21,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
C  at web tip...
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = row n stringer sway constraint for stringer no. ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC12,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY22,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
 1075     CONTINUE
C         End of "do loop": I = 1,NSTRNG
        ENDIF
C       End of (IBMSTR.NE.1.AND.IBMSTR.NE.5.AND.NSTRNG.GT.0) condition
C
C BEG OCT 2004
C Next, subring sway constraints...
C BEG APR 2006
C BEG AUG 2006
C       IF (ICLOSED.EQ.0.AND.IRNGSB.EQ.3.AND.NRNGSB.GT.0) THEN
        IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0
     1                .AND.IRNGSB.EQ.3.AND.NRNGSB.GT.0) THEN
C END AUG 2006
C END APR 2006
          WRITE(IFIL14,'(A)') 
     1            'C lagrange constraints for subring sidesway'
          DO 1176 I = 1,NRNGSB
C BEG FEB 2007
             IU1 = 1 + IUNITX
             IU2 = 1 + NSTSBX + IUNSTR*NSTRNG + I + IUNITX
C END FEB 2007
             IX1 = IRRGSB(I)
             IX2 = NPSUBR
             IF (GAPSB2.LT.0.) IX2 = 1
             IY1 = 1
             IY2 = 1
             ID1 = 1
             ID2 = 3
             CC1 = SCALE
             CC2 = SCALE
             NTERMS = 2
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = col.1 subring sway constraint for subring ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC1,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY2,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
             IY1 = NCOLS(1)
             IY2 = NCOLS(1)
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = col.n subring sway constraint for subring ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC1,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY2,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
 1176     CONTINUE
C         End of "do loop": I = 1,NRNGSB
        ENDIF
C       End of (ICLOSE.EQ.0.AND.IRNGSB.EQ.3.AND.NRNGSB.GT.0) condition 
C END OCT 2004
C  Next major ring sway constraints...
C BEG APR 2006
C BEG AUG 2006
C       IF (IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.NRINGS.GT.0
C    1                                 .AND.ICLOSED.EQ.0) THEN
        IF (IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.NRINGS.GT.0
     1                  .AND.ISYMM.EQ.0.AND.ICLOSED.EQ.0) THEN
C END AUG 2006
C END APR 2006
          WRITE(IFIL14,'(A)') 'C lagrange constraints for ring sidesway'
          DO 1076 I = 1,NRINGS
C BEG FEB 2007
             IU1 = 1 + IUNITX
C BEG OCT 2004
             IF (IZSTIF(2).EQ.1)
     1       IU1 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + IFYRNG
     1               + NSTSBX + NRGSBX + IUNITX
             IU2 = 1 + IUNSTR*NSTRNG + IUNRNG*(I-1) + IWBRNG
     1               + NSTSBX + NRGSBX + IUNITX
C END FEB 2007
C END OCT 2004
             IX1 = IROWRG(I)
C BEG AUG 2006
             IF (IZSTIF(2).EQ.1) IX1 = NPRNGB(I)
             IX2 = NPRNGW(I)
C END AUG 2006
             IF (IPOSNR.EQ.-1) IX2 = 1
             IY1 = 1
             IY2 = 1
             ID1 = 1
             ID2 = 3
C BEG OCT 2004
C  six commented statements removed.
C END OCT 2004
             CC1 = SCALE
             CC2 = SCALE
             NTERMS = 2
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = col.1 ring sway constraint for ring no. ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC1,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY2,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
             IY1 = NCOLS(1)
             IY2 = NCOLS(1)
C BEG MAR 2007
             ILGRNG = ILGRNG + 1
             WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
             WRITE(IFIL14,'(I3,A,I3)') NTERMS,
     1     ' $ g-3 = col.n ring sway constraint for ring no. ',I
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU1,IX1,IY1,ID1,CC1,
     1     ' $ g-4 IU1,IX1,IY1,ID1,CC1'
             WRITE(IFIL14,'(I4,I4,I4,I2,1P,E13.5,A)')
     1       IU2,IX2,IY2,ID2,CC2,
     1     ' $ g-4 IU2,IX2,IY2,ID2,CC2'
 1076     CONTINUE
C         End of "do loop": I = 1,NRINGS
        ENDIF
C       End of IF (IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.NRINGS.GT.0
C    1                                      .AND.ICLOSE.EQ.0) condition 
C
      ENDIF
C     End of (ISWAY.EQ.0) condition
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0) THEN
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0) THEN
C END AUG 2006
C END APR 2006
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Lagrange constraints for linear variation of u at y=0'
C  FIRST, DO THE PLANAR (LINEAR U) CONSTRAINTS FOR THE EDGE AT Y = 0:
         NROWS1 = NROWS(1) - 1
         STIFF = CX(1,1,1)
         X = 0.
         DO 1077 I = 2,NROWS1
          I1 = I-1
          X = X + DX(I1)
C BEG MAR 2007
          ILGRNG = ILGRNG + 1
          WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
          WRITE(IFIL14,'(A)')
     1' 2  $ NTERMS= no. of terms in linear-u constraint at y=0.  G-3'
          CC    = -X/XSTAGS
          CC1   = -STIFF*(CC + 1.)
          CC2   = 1.0*STIFF
          IROW1 = 1
          ICOL1 = 1
C BEG JUN 2006
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,ICOL1,' 1 ',
     1    CC1,' $ IU(1),IX(1),IY(1),ID(1),CC(1). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',I,    ICOL1,' 1 ',
     1    CC2,' $ IU(2),IX(2),IY(2),ID(2),CC(2). G-4'
C END JUN 2006
 1077    CONTINUE
C
C  NEXT, DO THE PLANAR (LINEAR u) CONSTRAINTS FOR THE EDGE AT y =YSTAGS:
C
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Lagrange constraints for linear variation of u at y=YSTAGS'
         X = 0.
         DO 1078 I = 2,NROWS1
          I1 = I-1
          X = X + DX(I1)
C BEG MAR 2007
          ILGRNG = ILGRNG + 1
          WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
C BEG NOV 2003
          WRITE(IFIL14,'(A)')
     1' 2  $ NTERMS=no. of terms in linear-u constraint at y=CIRC.G-3'
C END NOV 2003
          CC    = -X/XSTAGS
          CC1   = -STIFF*(CC + 1.)
          CC2   = 1.0*STIFF
          IROW1 = 1
          ICOL1 = NCOLS(1)
C BEG JUN 2006
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,ICOL1,' 1 ',
     1    CC1,' $ IU(1),IX(1),IY(1),ID(1),CC(1). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',I,    ICOL1,' 1 ',
     1    CC2,' $ IU(2),IX(2),IY(2),ID(2),CC(2). G-4'
C END JUN 2006
 1078    CONTINUE
      ENDIF
C     End of (ISYMM.EQ.0.AND.ICLOSE.EQ.0) condition
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0.AND.IEDGE.EQ.1) THEN
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0.AND.IEDGE.EQ.1) THEN
C END AUG 2006
C END APR 2006
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Lagrange constraints for linear variation of v at y=0'
C  FIRST, DO THE PLANAR (LINEAR V) CONSTRAINTS FOR THE EDGE AT Y = 0:
         NROWS1 = NROWS(1) - 1
         STIFF = CX(1,1,1)
         X = 0.
         DO 1017 I = 2,NROWS1
          I1 = I-1
          X = X + DX(I1)
C BEG MAR 2007
          ILGRNG = ILGRNG + 1
          WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
          WRITE(IFIL14,'(A)')
     1' 2  $ NTERMS= no. of terms in linear-v constraint at y=0.  G-3'
          CC    = -X/XSTAGS
          CC1   = -STIFF*(CC + 1.)
          CC2   = 1.0*STIFF
          IROW1 = 1
          ICOL1 = 1
C BEG JUN 2006
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,ICOL1,' 2 ',
     1    CC1,' $ IU(1),IX(1),IY(1),ID(1),CC(1). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',I,    ICOL1,' 2 ',
     1    CC2,' $ IU(2),IX(2),IY(2),ID(2),CC(2). G-4'
C END JUN 2006
 1017    CONTINUE
C
C  NEXT, DO THE PLANAR (LINEAR V) CONSTRAINTS FOR THE EDGE AT y = CIRC:
C
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Lagrange constraints for linear variation of v at y=YSTAGS'
         X = 0.
         DO 1019 I = 2,NROWS1
          I1 = I-1
          X = X + DX(I1)
C BEG MAR 2007
          ILGRNG = ILGRNG + 1
          WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
C END MAR 2007
          WRITE(IFIL14,'(A)')
     1' 2  $ NTERMS=no. of terms in linear-v constraint at y=CIRC.G-3'
          CC    = -X/XSTAGS
          CC1   = -STIFF*(CC + 1.)
          CC2   = 1.0*STIFF
          IROW1 = 1
          ICOL1 = NCOLS(1)
C BEG JUN 2006
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,ICOL1,' 2 ',
     1    CC1,' $ IU(1),IX(1),IY(1),ID(1),CC(1). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',I,    ICOL1,' 2 ',
     1    CC2,' $ IU(2),IX(2),IY(2),ID(2),CC(2). G-4'
C END JUN 2006
 1019    CONTINUE
      ENDIF
C     End of (ISYMM.EQ.0.AND.ICLOSE.EQ.0.AND.IEDGE.EQ.1) condition
C
C BEG OCT 2009
      IF (IEDGE2.EQ.1) THEN
         IF (IYUNI.EQ.1) THEN
            DYUNI = YSTAGS/FLOAT(NCOLS(1)-1)
            NCOLSP = NCOLS(1) + 1
            DO 1125 I = 1,NCOLSP
             DY(I) = DYUNI
 1125       CONTINUE
         ENDIF
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Lagrange constraints for linear variation of u at x=0'
C  FIRST, DO THE PLANAR (LINEAR U) CONSTRAINTS FOR THE EDGE AT X = 0:
         NCOLS1 = NCOLS(1) - 1
         STIFF = CX(1,1,1)
         Y = 0.
         DO 1121 I = 2,NCOLS1
          I1 = I-1
          Y = Y + DY(I1)
          ILGRNG = ILGRNG + 1
          WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
          WRITE(IFIL14,'(A)')
     1' 3  $ NTERMS= no. of terms in linear-u constraint at x=0.  G-3'
          CC    = -Y/YSTAGS
          CC1   = -STIFF*(CC + 1.)
          CC2   = 1.0*STIFF
          CC3   = STIFF*CC
          IROW1 = 1
          ICOL1 = 1
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,ICOL1,' 1 ',
     1    CC1,' $ IU(1),IX(1),IY(1),ID(1),CC(1). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,    I,' 1 ',
     1    CC2,' $ IU(2),IX(2),IY(2),ID(2),CC(2). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,NCOLS(1),' 1 ',
     1    CC3,' $ IU(3),IX(3),IY(3),ID(3),CC(3). G-4'
 1121    CONTINUE
C
C  NEXT, DO THE PLANAR (LINEAR u) CONSTRAINTS FOR THE EDGE AT X =XSTAGS:
C
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Lagrange constraints for linear variation of u at x=XSTAGS'
         Y = 0.
         DO 1123 I = 2,NCOLS1
          I1 = I-1
          Y = Y + DY(I1)
          ILGRNG = ILGRNG + 1
          WRITE(IFIL14,'(A,I4)') 'C Lagrange constraint no. ',ILGRNG
          WRITE(IFIL14,'(A)')
     1' 3  $ NTERMS=no. of terms in linear-u constraint at x=XSTAGS;G-3'
          CC    = -Y/YSTAGS
          CC1   = -STIFF*(CC + 1.)
          CC2   = 1.0*STIFF
          CC3   = STIFF*CC
          IROW1 = NROWS(1) 
          ICOL1 = 1 
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,ICOL1,' 1 ',
     1    CC1,' $ IU(1),IX(1),IY(1),ID(1),CC(1). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,    I,' 1 ',
     1    CC2,' $ IU(2),IX(2),IY(2),ID(2),CC(2). G-4'
          WRITE(IFIL14,'(A,2I4,A,1PE13.6,A)')' 1 ',IROW1,NCOLS(1),' 1 ',
     1    CC3,' $ IU(3),IX(3),IY(3),ID(3),CC(3). G-4'
 1123    CONTINUE
      ENDIF
C  End of IEDGE2.EQ.1 condition
C END OCT 2009
      WRITE(IFIL14,'(A)') 'C '
      NUPT = 0
      IF (IBC12.EQ.2.AND.NUNITE.GT.0) THEN
         NUPT = 1
         WRITE(IFIL14,'(I3,A)') NUPT,
     1 ' $ h-1 NUPT (user-point for torque at beg. of cyl. shell.'
      ENDIF
C
C BEG OCT 2004
C NEXT, DO FASTENERS, SUB-STRINGERS FIRST...
      IF (LNKSB1.EQ.1.AND.ISTRSB.EQ.3) THEN
         NUPT = 2*NROWS(1)
         NSPRI =  NROWS(1)
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)') 'C Fasteners for substringers...'
         DO 1108 I = 1,NSTRSB
          WRITE(IFIL14,'(2I4,A,I3)') NUPT,NSPRI,
     1  ' $ h-1 NUPT,NSPRI fastener cyl. skin to substringer ',I
 1108    CONTINUE
      ENDIF
C END OCT 2004
C NEXT, DO FASTENERS FOR STRINGERS...
      IF (ILINK1.EQ.1.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5) THEN
         IF (NSTRNG.GT.0.AND.IBMSTR.NE.1) THEN
            NUPT = 2*NROWS(1)
            NSPRI =  NROWS(1)
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A)') 'C Fasteners for stringers...'
            DO 1008 I = 1,NSTRNG
             WRITE(IFIL14,'(2I4,A,I3)') NUPT,NSPRI,
     1   ' $ h-1 NUPT,NSPRI fastener cyl. skin to stringer no. ',I
 1008       CONTINUE
         ENDIF
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG OCT 2004
C  NEXT, DO FASTENERS FOR SUBRINGS...
      IF (LNKSB2.EQ.1.AND.IRNGSB.EQ.3) THEN
C BEG APR 2006
         IF (ICLOSED.EQ.1) THEN
C END APR 2006
            NUPT = 2*(NCOLS(1)-1)
            NSPRI =  NCOLS(1)-1
         ELSE
            NUPT = 2*NCOLS(1)
            NSPRI =  NCOLS(1)
         ENDIF
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)') 'C Fasteners for subrings...'
         DO 1109 I = 1,NRNGSB
          WRITE(IFIL14,'(2I4,A,I3)') NUPT,NSPRI,
     1  ' $ h-1 NUPT,NSPRI fastener cyl. skin to subring  no. ',I
 1109    CONTINUE
      ENDIF
C END OCT 2004
C
C  NEXT, DO FASTENERS FOR RINGS...
      IF (ILINK2.EQ.1.AND.IBMRNG.NE.1.AND.IBMRNG.NE.5) THEN
         IF (NRINGS.GT.0.AND.IBMRNG.NE.1) THEN
C BEG APR 2006
            IF (ICLOSED.EQ.1) THEN
C END APR 2006
               NUPT = 2*(NCOLS(1)-1)
               NSPRI =  NCOLS(1)-1
            ELSE
               NUPT = 2*NCOLS(1)
               NSPRI =  NCOLS(1)
            ENDIF
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A)') 'C Fasteners for rings...'
            DO 1009 I = 1,NRINGS
            WRITE(IFIL14,'(2I4,A,I3)') NUPT,NSPRI,
     1   ' $ h-1 NUPT,NSPRI fastener cyl. skin to   ring   no. ',I
 1009       CONTINUE
         ENDIF
      ENDIF
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      MAXMT = MAXMAT + MAXMT2
      DO 1014 IMAT = 1,MAXMT
         WRITE(IFIL14,'(A)') 'C '
         IF (IMAT.LE.MAXMAT) WRITE(IFIL14,'(A)')
     1  'C Material in one or more of shell unit walls NOT at an edge'
         IF (IMAT.GT.MAXMAT) WRITE(IFIL14,'(A)')
     1'C Matl in one or more shell unit walls that form edge stiffners'
         WRITE(IFIL14,'(I2,A)') IMAT,
     1  ', $ ITAM = material number.                  BEGIN I-1 rec.'
C BEG DEC 2006
         IF (IPLAST.EQ.0) THEN
          WRITE(IFIL14,'(A)')
     1' 0, $ NESP = 0 means zero points on stress-strain curve'
          WRITE(IFIL14,'(A)')
     1' 0, $ IPLST =0 means no plasticity in this material type'
         ELSE
          WRITE(IFIL14,'(I2,A)') NESP,
     1 ', $ NESP = number of points on the stress-strain curve'
          WRITE(IFIL14,'(I2,A)') IPLST,
     1 ', $ IPLST =there is plasticity in this material type.'
         ENDIF
C END DEC 2006
         WRITE(IFIL14,'(A)')
     1' 0  $ ITANST=0 means Initial Strain method used. END I-1 rec.'
         ESTAGS = E1(IMAT)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') ESTAGS,', $ Matl', IMAT,
     1  ': E1=Modulus along fibers.         BEGIN I-2 rec.'
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNU(IMAT),', $ Matl', IMAT,
     1  ': U12=Poisson ratio NU12 (NU12*E1 = NU21*E2)'
         GSTAGS = G(IMAT)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)')  GSTAGS,', $ Matl', IMAT,
     1  ': G  = In-plane shear modulus'
         RHO = DENS(IMAT)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') RHO,', $ Matl', IMAT,
     1  ': RHO=weight density'
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') ALPHA1(IMAT),', $ Matl',IMAT,
     1  ': A1 =thermal expansion coefficient along fibers'
         ESTAGS = E2(IMAT)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') ESTAGS,', $ Matl', IMAT,
     1  ': E2 =Modulus normal to fibers (normal to PHI1)'
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') ALPHA2(IMAT),' $ Matl',IMAT,
     1  ': A2 =thermal expansion coef. normal to fibers. END I-2 rec.'
C BEG DEC 2006
         IF (IPLAST.EQ.1) THEN
            DO 1814 I = 1,NESP
               IF (IMAT.LE.MAXMAT) THEN
                  IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCURV(I,1), SSCURV(I,2),
     1          ',   $I-3 E(i), S(i) s-s curve, stiffener NOT at edge'
                  IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCURV(I,1), SSCURV(I,2),
     1          '    $I-3 E(i), S(i) s-s curve, stiffener NOT at edge'
               ELSE
                  IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCUR2(I,1), SSCUR2(I,2),
     1          ',    $I-3 E(i), S(i) s-s curve for edge stiffener'
                  IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCUR2(I,1), SSCUR2(I,2),
     1          '     $I-3 E(i), S(i) s-s curve for edge stiffener'
               ENDIF
 1814       CONTINUE
         ENDIF
C END DEC 2006
 1014 CONTINUE
C
C BEG OCT 2004
      IF (NSTRNG.GT.0.OR.NRINGS.GT.0.OR.KLAYER(1,1).GT.0) THEN
         IBEG = MAXMAT + MAXMT2 + 1
C BEG OCT 2004
         IEND = MAXMAT + MAXMT2 + MATADD 
C END OCT 2004
         DO 1142 IMAT = IBEG,IEND
         WRITE(IFIL14,'(A)') 'C '
         IWALL1 = IMAT - IBEG + 1
         WRITE(IFIL14,'(A)') WRDMAT(IWALL1)   
         WRITE(IFIL14,'(I2,A)') IMAT,
     1  ', $ ITAM = material number.                  BEGIN I-1 rec.'
C BEG DEC 2006
         IF (IPLAST.EQ.0) THEN
          WRITE(IFIL14,'(A)')
     1' 0, $ NESP = 0 means zero points on stress-strain curve'
          WRITE(IFIL14,'(A)')
     1' 0, $ IPLST =0 means no plasticity in this material type'
         ELSE
          WRITE(IFIL14,'(I2,A)') NESP,
     1 ', $ NESP = number of points on the stress-strain curve'
          WRITE(IFIL14,'(I2,A)') IPLST,
     1 ', $ IPLST =there is plasticity in this material type.'
         ENDIF
C END DEC 2006
         WRITE(IFIL14,'(A)')
     1' 0  $ ITANST=0 means Initial Strain method used. END I-1 rec.'
         ESTAGS = E1TAB(IWALL1)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') ESTAGS,', $ Matl', IMAT,
     1  ': E1=Modulus along fibers.         BEGIN I-2 rec.'
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNUTAB(IWALL1),
     1                                           ', $ Matl', IMAT,
     1  ': U12=Poisson ratio NU12 (NU12*E1 = NU21*E2)'
         GSTAGS = G12TAB(IWALL1)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)')  GSTAGS,', $ Matl', IMAT,
     1  ': G  = In-plane shear modulus'
         RHO = RHOTAB(IWALL1)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') RHO,', $ Matl', IMAT,
     1  ': RHO=weight density'
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') AL1TAB(IWALL1),
     1                                            ', $ Matl',IMAT,
     1  ': A1 =thermal expansion coefficient along fibers'
         ESTAGS = E2TAB(IWALL1)
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') ESTAGS,', $ Matl', IMAT,
     1  ': E2 =Modulus normal to fibers (normal to PHI1)'
         WRITE(IFIL14,'(1PE10.3,A,I2,A)') AL2TAB(IWALL1),
     1                                             ' $ Matl',IMAT,
     1  ': A2 =thermal expansion coef. normal to fibers. END I-2 rec.'
C BEG DEC 2006
         IF (IPLAST.EQ.1) THEN
            DO 1815 I = 1,NESP
               IF (WRDMAT(IWALL1)(3:10).EQ.'Not edge') THEN
                  IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCURV(I,1), SSCURV(I,2),
     1          ',   $I-3 E(i), S(i) s-s curve, stiffener NOT at edge'
                  IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCURV(I,1), SSCURV(I,2),
     1          '    $I-3 E(i), S(i) s-s curve, stiffener NOT at edge'
               ELSE
                  IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCUR2(I,1), SSCUR2(I,2),
     1          ',    $I-3 E(i), S(i) s-s curve for edge stiffener'
                  IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1            SSCUR2(I,1), SSCUR2(I,2),
     1          '     $I-3 E(i), S(i) s-s curve for edge stiffener'
               ENDIF
 1815       CONTINUE
         ENDIF
C END DEC 2006
 1142    CONTINUE
      ENDIF
C     End of (NSTRNG.GT.0.OR.NRINGS.GT.0.OR.KLAYER(1,1).GT.0) condition
C
C  TWO FASTENER ELEMENT TABLES...
C   FIRST TABLE (FOR ALL SPRING CONSTANTS EXCEPT rw (drilling freedom)):
      SPRING = 3.0*(CX(1,1,1) + CX(2,2,1))
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)')
     1'C  Fastener property table 1 (five springs: u,v,w,ru,rv)...'
      WRITE(IFIL14,'(A)')
     1' 1 2 1 $ i-4a IMNT,NRD,NRV(table no., no.rel.disp., no.rel. vel)'
      WRITE(IFIL14,'(A)')
     1' -1.0  1.0  $ i-4b DISP(i),1=1,NRD(relative displacement vector)'
      WRITE(IFIL14,'(A)')
     1'  0.0       $ i-4c RVEL(i),i=1,NRV (relative velocity vector)'
      WRITE(IFIL14,'(1P,2E12.4,A)') -SPRING,SPRING,
     1' $ i-4d FORCE(j),j=1,NRD (spring forces for unit neg.,pos.disp.)'
C
C   2nd TABLE (FOR rw (drilling freedom)):
C     SPRING = 0.00001*SPRING
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)')
     1'C  Fastener property table 2 (weak spring governing rw)...'
      WRITE(IFIL14,'(A)')
     1' 2 2 1 $ i-4a IMNT,NRD,NRV(table no., no.rel.disp., no.rel. vel)'
      WRITE(IFIL14,'(A)')
     1' -1.0  1.0  $ i-4b DISP(i),1=1,NRD(relative displacement vector)'
      WRITE(IFIL14,'(A)')
     1'  0.0       $ i-4c RVEL(i),i=1,NRV (relative velocity vector)'
      WRITE(IFIL14,'(1P,2E12.4,A)') -SPRING,SPRING,
     1' $ i-4d FORCE(j),j=1,NRD (spring forces for unit neg.,pos.disp.)'
C
C BEG DEC 2006
C23456789012345678901234567890123456789012345678901234567890123456789012
C add new records if NGCP = 1 (GCP process to be used)
      IF (NGCP.NE.1) GO TO 1148
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)')
     1'C New section added for GCP records'
      MAXMT = MAXMAT + MAXMT2
      DO 1016 IMAT = 1,MAXMT
C BEG FEB 2007
         IF (E1(IMAT).EQ.0.0) THEN
            E1(IMAT) = 0.0001
            E2(IMAT) = 0.0001
            G(IMAT)  = 0.00005 
            G13(IMAT)  = 0.00005
            G23(IMAT)  = 0.00005
         ENDIF
C END FEB 2007
         WRITE(IFIL14,'(A)') 'C '
         IF (IMAT.LE.MAXMAT) WRITE(IFIL14,'(A)')
     1  'C GCP Material in one or more of shell unit walls NOT at edge'
         IF (IMAT.GT.MAXMAT) WRITE(IFIL14,'(A)')
     1'C GCP Matl in one or more shell unit walls that form edge stiff.'
         ngroups = 1
         nstates = 1
         ionetwo = 2
C BEG JAN 2007
         IF (IPLAST.EQ.1) THEN
C END JAN 2007
          WRITE(IFIL14,'(A,4I2,A)')
     1   'PLASTIC_WB_MATERIAL ',IMAT,ngroups,nstates,ionetwo,
     1   ' 0 $ I-5a ITAM,ngroups,nstates.ionetwo,0'
           ESTAGS = E1(IMAT)
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') ESTAGS,', $ Matl', IMAT,
     1   ': E1=Modulus along fibers.         BEGIN I-9a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNU(IMAT),', $ Matl', IMAT,
     1   ': U12=Poisson ratio NU12 (NU12*E1 = NU21*E2)'
          RHO = DENS(IMAT)
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') RHO,', $ Matl', IMAT,
     1   ': RHO=weight density'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') ALPHA1(IMAT),', $ Matl',IMAT,
     1   ': A1 =thermal expansion coefficient along fibers'
          WRITE(IFIL14,'(I2,A)') NESP,
     1 '  $ NESP = number of points on the stress-strain curve END I-9a'
C23456789012345678901234567890123456789012345678901234567890123456789012
          DO 1816 I = 1,NESP
            IF (IMAT.LE.MAXMAT) THEN
               IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCURV(I,1), SSCURV(I,2),
     1       ',   $I-9b E(i), S(i) s-s curve, stiffener NOT at edge'
               IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCURV(I,1), SSCURV(I,2),
     1       '    $I-9b E(i), S(i) s-s curve, stiffener NOT at edge'
            ELSE
               IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCUR2(I,1), SSCUR2(I,2),
     1       ',    $I-9b E(i), S(i) s-s curve for edge stiffener'
               IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCUR2(I,1), SSCUR2(I,2),
     1       '     $I-9b E(i), S(i) s-s curve for edge stiffener'
            ENDIF
 1816     CONTINUE
C BEG JAN 2007
         ELSE
C BEG MAR 2011
          WRITE(IFIL14,'(A,3I3,A)')
C END MAR 2011
     1   'ORTHOELAST_MATERIAL ',IMAT,ngroups,nstates,
     1   ' 0  0 $ I-5a MATID,ngroups,nstates.0,0'
C23456789012345678901234567890123456789012345678901234567890123456789012
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') E1(IMAT),', $Matl ',IMAT,
     1  ' : E1=modulus along fibers.       BEGIN I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') E2(IMAT),', $Matl ',IMAT,
     1  ' : E2=modulus normal to fibers. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') E2(IMAT),', $Matl ',IMAT,
     1  ' : E3=modulus normal to fibers. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)')  G(IMAT),', $Matl ',IMAT,
     1  ' :G12=in-plane shear modulus.   I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') G13(IMAT),', $Matl ',IMAT,
     1  ' :G13=x-z shear modulus.        I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') G23(IMAT),', $Matl ',IMAT,
     1  ' :G23=y-z shear modulus.        I-7a rec.'
          FNUGCP = FNU(IMAT)*E1(IMAT)/E2(IMAT)
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNUGCP,', $Matl ',IMAT,
     1  ' :FNU12=large Poisson ratio.    I-7a rec.'
          FNU13 = 0.3
          FNU23 = 0.3
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNU13,', $Matl ',IMAT,
     1  ' :FNU13=x-z Poisson ratio.      I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNU23,', $Matl ',IMAT,
     1  ' :FNU23=y-z Poisson ratio.      I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') DENS(IMAT),', $Matl ',IMAT,
     1  ' : RHO=material density.        I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') ALPHA1(IMAT),', $Matl ',IMAT,
     1  ' :A1=thermal coef.along fibers. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') ALPHA2(IMAT),', $Matl ',IMAT,
     1  ' :A2=thermal coef.normal to fib.I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') ALPHA2(IMAT),', $Matl ',IMAT,
     1  ' :A3=thermal coef.normal to fib.I-7a rec.'
C23456789012345678901234567890123456789012345678901234567890123456789012
          BHYDRO = 0.
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') BHYDRO,', $Matl ',IMAT,
     1  ' :B1=hydroscopic coef.along fib.I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') BHYDRO,', $Matl ',IMAT,
     1  ' :B2=hydroscp.coef.norm.to fib. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') BHYDRO,', $Matl ',IMAT,
     1  ' :B3=hydroscp.coef.norm.to fib. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') CURETP(IMAT),', $Matl ',IMAT,
     1  ' : T=material cure temperature. I-7a rec.'
          FMOIST = 0.
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FMOIST,'  $Matl ',IMAT,
     1  ' : M=reference moisture content.  END I-7a rec.'
         ENDIF
C END JAN 2007
 1016 CONTINUE
C
      IF (NSTRNG.GT.0.OR.NRINGS.GT.0.OR.KLAYER(1,1).GT.0) THEN
         IBEG = MAXMAT + MAXMT2 + 1
         IEND = MAXMAT + MAXMT2 + MATADD 
         DO 1144 IMAT = IBEG,IEND
         WRITE(IFIL14,'(A)') 'C '
         IWALL1 = IMAT - IBEG + 1
         WRITE(IFIL14,'(A)') WRDMAT(IWALL1)   
         ngroups = 1
         nstates = 1
         ionetwo = 2
C BEG FEB 2007
         IF (E1TAB(IWALL1).EQ.0.0) THEN
            E1TAB(IWALL1) = 0.0001
            E2TAB(IWALL1) = 0.0001
            G12TAB(IWALL1)= 0.00005
         ENDIF
C END FEB 2007
C BEG JAN 2007
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (IPLAST.EQ.1) THEN
C END JAN 2007
          WRITE(IFIL14,'(A,4I2,A)')
     1   'PLASTIC_WB_MATERIAL ',IMAT,ngroups,nstates,ionetwo,
     1   ' 0 $ I-5a ITAM,ngroups,nstates.ionetwo,0'
          ESTAGS = E1TAB(IWALL1)
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') ESTAGS,', $ Matl', IMAT,
     1   ': E1=Modulus along fibers.         BEGIN I-9a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNUTAB(IWALL1),
     1                                            ', $ Matl', IMAT,
     1   ': U12=Poisson ratio NU12 (NU12*E1 = NU21*E2)'
          RHO = RHOTAB(IWALL1)
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') RHO,', $ Matl', IMAT,
     1   ': RHO=weight density'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') AL1TAB(IWALL1),
     1                                             ', $ Matl',IMAT,
     1   ': A1 =thermal expansion coefficient along fibers'
           WRITE(IFIL14,'(I2,A)') NESP,
     1 '  $ NESP = number of points on the stress-strain curve END I-9a'
C23456789012345678901234567890123456789012345678901234567890123456789012
C
          DO 1817 I = 1,NESP
            IF (WRDMAT(IWALL1)(3:10).EQ.'Not edge') THEN
               IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCURV(I,1), SSCURV(I,2),
     1       ',   $I-9b E(i), S(i) s-s curve, stiffener NOT at edge'
               IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCURV(I,1), SSCURV(I,2),
     1       '    $I-9b E(i), S(i) s-s curve, stiffener NOT at edge'
            ELSE
               IF (I.LT.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCUR2(I,1), SSCUR2(I,2),
     1       ',    $I-9b E(i), S(i) s-s curve for edge stiffener'
               IF (I.EQ.NESP) WRITE(IFIL14,'(1P,2E12.4,A)')
     1         SSCUR2(I,1), SSCUR2(I,2),
     1       '     $I-9b E(i), S(i) s-s curve for edge stiffener'
            ENDIF
 1817     CONTINUE
C BEG JAN 2007
         ELSE
C BEG MAR 2011
          WRITE(IFIL14,'(A,3I3,A)')
C END MAR 2011
     1   'ORTHOELAST_MATERIAL ',IMAT,ngroups,nstates,
     1   ' 0  0 $ I-5a MATID,ngroups,nstates.0,0'
C23456789012345678901234567890123456789012345678901234567890123456789012
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') E1TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' : E1=modulus along fibers.       BEGIN I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') E2TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' : E2=modulus normal to fibers. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') E2TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' : E3=modulus normal to fibers. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') G12TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' :G12=in-plane shear modulus.   I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') G12TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' :G13=x-z shear modulus.        I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') G12TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' :G23=y-z shear modulus.        I-7a rec.'
          FNUGCP = FNUTAB(IWALL1)*E1TAB(IWALL1)/E2TAB(IWALL1)
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNUGCP,', $Matl ',IMAT,
     1  ' :FNU12=large Poisson ratio.    I-7a rec.'
          FNU13 = 0.3
          FNU23 = 0.3
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNU13,', $Matl ',IMAT,
     1  ' :FNU13=x-z Poisson ratio.      I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FNU23,', $Matl ',IMAT,
     1  ' :FNU23=y-z Poisson ratio.      I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') RHOTAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' : RHO=material density.        I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') AL1TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' :A1=thermal coef.along fibers. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') AL2TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' :A2=thermal coef.normal to fib.I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') AL2TAB(IWALL1),
     1                                              ', $Matl ',IMAT,
     1  ' :A3=thermal coef.normal to fib.I-7a rec.'
C23456789012345678901234567890123456789012345678901234567890123456789012
          BHYDRO = 0.
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') BHYDRO,', $Matl ',IMAT,
     1  ' :B1=hydroscopic coef.along fib.I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') BHYDRO,', $Matl ',IMAT,
     1  ' :B2=hydroscp.coef.norm.to fib. I-7a rec.'
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') BHYDRO,', $Matl ',IMAT,
     1  ' :B3=hydroscp.coef.norm.to fib. I-7a rec.'
          CURTAB = 0.
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') CURTAB,', $Matl ',IMAT,
     1  ' : T=material cure temperature. I-7a rec.'
          FMOIST = 0.
          WRITE(IFIL14,'(1PE10.3,A,I2,A)') FMOIST,'  $Matl ',IMAT,
     1  ' : M=reference moisture content.  END I-7a rec.'
         ENDIF
C END JAN 2007
 1144 CONTINUE
      ENDIF
C     End of (NSTRNG.GT.0.OR.NRINGS.GT.0.OR.KLAYER(1,1).GT.0) condition
C
C NEXT, DO THE VARIOUS WALL TYPES FOR GCP...
      IEND = MAXWLL + MAXWL2 + IADDWAL
      DO 1022 ITAW = 1,IEND
         ILOGWAL = ITAW.EQ.1.OR.(ITAW.EQ.IEND.AND.IADDWAL.EQ.1)
         ITAWWR = ITAW
         IF (ILOGWAL) ITAWWR = 1
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)') WRDTOT(ITAWWR)
         NLAY = NLAYRS(ITAWWR)
         ipts = 1
C BEG JAN 2007
         IF (IPLAST.EQ.0) ipts = 0
C END JAN 2007
         ishr = 0 
         isym = 0 
C BEG MAR 2011
         WRITE(IFIL14,'(A,5I3,A)')
C END MAR 2011
     1  'SHELL_FABRICATION ',ITAW,NLAY,ipts,ishr,isym,
     1  ' $ I-5a fabid,nlayer,ipts,ishr,isym'
C BEG JAN 2007
         DO 1116 ILAY = 1,NLAY
            IF (ILAY.LT.NLAY)
     1      WRITE(IFIL14,'(I2,A,I2,A,I2)') JMAT(ILAY,ITAWWR),
     1 ', $ I-21a MATL=layer matl no. Wall type:',ITAW,', Layer: ',ILAY
            IF (ILAY.EQ.NLAY)
     1      WRITE(IFIL14,'(I2,A,I2,A,I2)') JMAT(ILAY,ITAWWR),
     1 '  $ I-21a MATL=layer matl no. Wall type:',ITAW,', Layer: ',ILAY
 1116    CONTINUE
         IF (ipts.EQ.1) THEN
          DO 1117 ILAY = 1,NLAY
            IF (ILAY.LT.NLAY) WRITE(IFIL14,'(I2,A)') NLIP,
     1 ', $ I-21b NLIP = no. of integration points thru layer thickness'
            IF (ILAY.EQ.NLAY) WRITE(IFIL14,'(I2,A)') NLIP,
     1 '  $ I-21b NLIP = no. of integration points thru layer thickness'
 1117     CONTINUE
         ENDIF
         DO 1118 ILAY = 1,NLAY
            IF (ILAY.LT.NLAY)
     1      WRITE(IFIL14,'(1PE10.3,A,I2,A,I2)') THIK(ILAY,ITAWWR),
     1 ', $ I-21c TL=layer thickness. Wall type:',ITAW,', Layer: ',ILAY
            IF (ILAY.EQ.NLAY)
     1      WRITE(IFIL14,'(1PE10.3,A,I2,A,I2)') THIK(ILAY,ITAWWR),
     1 '  $ I-21c TL=layer thickness. Wall type:',ITAW,', Layer: ',ILAY
 1118    CONTINUE
         DO 1119 ILAY = 1,NLAY
            IF (ILAY.LT.NLAY)
     1      WRITE(IFIL14,'(1PE10.3,A,I2,A,I2)') ANGL(ILAY,ITAWWR),
     1 ', $ I-21d ZETL=fiber angle.   Wall type:',ITAW,', Layer: ',ILAY
            IF (ILAY.EQ.NLAY)
     1      WRITE(IFIL14,'(1PE10.3,A,I2,A,I2)') ANGL(ILAY,ITAWWR),
     1 '  $ I-21d ZETL=fiber angle.   Wall type:',ITAW,', Layer: ',ILAY
C23456789012345678901234567890123456789012345678901234567890123456789012
 1119    CONTINUE
C END JAN 2007
 1022 CONTINUE
C     End of "do loop": ITAW = 1,IEND
C
      WRITE(IFIL14,'(A)')
     1'END     $ I-5a cease (end of GCP input data, all matl,all walls)'
 1148 CONTINUE
C END DEC 2006
C BEG APR 2009
      IF (IELMNT.EQ.940) THEN
        WRITE(IFIL14,'(A)') ' $======================================='
        WRITE(IFIL14,'(A)') ' $ User Element Definitions -------------'
        WRITE(IFIL14,'(A)') ' $======================================='
        WRITE(IFIL14,'(A)') ' $'
        WRITE(IFIL14,'(A,/)')
     1'*userElement  name="Uniform Plate Element"  type=940  nodes=4'
        WRITE(IFIL14,'(A,/)') '*dofOrdering'
        WRITE(IFIL14,'(A)') ' $  Node DOF...'
        WRITE(IFIL14,'(A)') ' $  ----------------------'
        WRITE(IFIL14,'(A)')   '     1     1 2 3 4 5 6'
        WRITE(IFIL14,'(A)')   '     2     1 2 3 4 5 6'
        WRITE(IFIL14,'(A)')   '     3     1 2 3 4 5 6'
        WRITE(IFIL14,'(A,/)') '     4     1 2 3 4 5 6'
        WRITE(IFIL14,'(A,/)') '*nodeSequence'
        WRITE(IFIL14,'(A)') ' $  Nodes...'
        WRITE(IFIL14,'(A)') ' $  --------'
        WRITE(IFIL14,'(A)') '    1 2 3 4'
        WRITE(IFIL14,'(A,/)') '*floatVariables'
        WRITE(IFIL14,'(A)')   ' $  Name             Size'
        WRITE(IFIL14,'(A)')   ' $  ---------------------'
        WRITE(IFIL14,'(A)')   '     UniformPressure  2'
        WRITE(IFIL14,'(A,/)') '     Drilling         1'
        WRITE(IFIL14,'(A,/)') '*integerVariables'
        WRITE(IFIL14,'(A)')   ' $  Name             Size'
        WRITE(IFIL14,'(A)')   ' $  ----------------------'
        WRITE(IFIL14,'(A)')   '     IntegOrder          1'
        WRITE(IFIL14,'(A,/)') '     LoadType            1'
        WRITE(IFIL14,'(A,/)') '*end userElement'
        WRITE(IFIL14,'(A,A,/)')
     1'*userProperty  name="Standard Data -- Uniform Plate Element"',
     1'  id=940'
        WRITE(IFIL14,'(A,/)') '*integerProps'
        WRITE(IFIL14,'(A)')   ' $  Required Standard Data'
        WRITE(IFIL14,'(A)')   ' $  ----------------------'
        WRITE(IFIL14,'(A)')   '     ActiveNodes    4'
        WRITE(IFIL14,'(A)')   '     SamplingCount  1'
        WRITE(IFIL14,'(A)')   '     StrainCount    8'
        WRITE(IFIL14,'(A,/)') '     StressCount    8'
        WRITE(IFIL14,'(A)')   ' $  Data for GCP Interface'
        WRITE(IFIL14,'(A)')   ' $  ----------------------'
        WRITE(IFIL14,'(A)')   '     Class           2'
        WRITE(IFIL14,'(A,/)') '     Kintype         1'
        WRITE(IFIL14,'(A)')   '*end userProperty'
      ENDIF
C END APR 2009
C
C  BEAM CROSS-SECTION DATA 
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (MATADD.GT.0) THEN
       DO 1150 I = 1,MATADD
          WRITE(IFIL14,'(A)') 'C '
          WRITE(IFIL14,'(A)') WRDTAB(I)
          ITAB = I
          MATB = MAXMAT + MAXMT2 + I
          WRITE(IFIL14,'(I3,A)') ITAB,
     1  ', $ ITAB is beam cross-section number.               BEGIN J-1'
          WRITE(IFIL14,'(A)')
     1  ' 3, $ KCROSS=3 means cross-section composed of rect. subsegs.'
          WRITE(IFIL14,'(I3,A)') MATB,
     1  ', $ MATB = material number of beam'
          WRITE(IFIL14,'(A)')
     1  ' 1, $ NSUB = means number of rectangular subelements'
          WRITE(IFIL14,'(1PE10.3,A)') TORJ(I),
     1  ', $ TORJ = torsional constant, h*t**3/3 J'
          WRITE(IFIL14,'(A)')
     1  ' 0., $ SCY = local ybar coordinate of beam shear center.'
          WRITE(IFIL14,'(A)')
     1  ' 0., $ SCZ = local zbar coordinate of beam shear center.'
          WRITE(IFIL14,'(A)')
     1  ' 0,  $ NSOYZ =0 means no stress output.'
          WRITE(IFIL14,'(A)')
     1  ' 0., $ KAPY = transverse shear shape factor, bend about zbar'
          WRITE(IFIL14,'(A)')
     1  ' 0.8333 $ KAPZ=trans. shear factor, bend about ybar.   END J-1'
          WRITE(IFIL14,'(1P,E14.6,A)') Y1(I),
     1  ', $ Y1(1)= ybar(1) for the first rect. subelement.  BEGIN J-3b'
          WRITE(IFIL14,'(1P,E14.6,A)') Y2(I),
     1  ', $ Y2(1)= ybar(2) for the first rect. subelement.'
          WRITE(IFIL14,'(1P,E14.6,A)') Z1(I),
     1  ', $ Z1(1)= zbar(1) for the first rect. subelement.'
          WRITE(IFIL14,'(1P,E14.6,A)') Z2(I),
     1  ', $ Z2(1)= zbar(2) for the first rect. subelement.'
          WRITE(IFIL14,'(A)')
     1  ' 0 $ ISOC(I) =0 means no stress output,ith subelement.END J-3b'
 1150  CONTINUE
C      End of "do loop": I = 1,MATADD
      ENDIF
C     End of (MATADD.GT.0) condition
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C NEXT, DO THE VARIOUS WALL TYPES...
C BEG APR 2006
C     IEND = MAXWLL + MAXWL2
      IEND = MAXWLL + MAXWL2 + IADDWAL
C END APR 2006
      DO 1020 ITAW = 1,IEND
C BEG APR 2006
         ILOGWAL = ITAW.EQ.1.OR.(ITAW.EQ.IEND.AND.IADDWAL.EQ.1)
         ITAWWR = ITAW
         IF (ILOGWAL) ITAWWR = 1
C END APR 2006
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)') WRDTOT(ITAWWR)
         WRITE(IFIL14,'(I2,A)') ITAW,
     1  ', $ ITAW = wall configuration number.        BEGIN K-1 rec.'
         WRITE(IFIL14,'(A)')
     1' 1, $ KWALL = 1 means general layered wall (composite layup)'
         WRITE(IFIL14,'(I3,A)') NLAYRS(ITAWWR),
     1  ',$ NLAY = number of layers thru the thickness'
C BEG DEC 2006
         IF (IPLAST.EQ.0) THEN
          WRITE(IFIL14,'(A)')
     1' 0, $ NLIP = 0 means properties are uniform within each layer'
         ELSE
          WRITE(IFIL14,'(I2,A)') NLIP,
     1  ', $ NLIP = number of integration points thru wall thickness'
         ENDIF
C END DEC 2006
         NSMRS = 0
         NSMRST = 0
         NSMRRG = 0
C BEG OCT 2004
C BEG APR 2006
         ILOGWAL = ITAW.EQ.1.OR.(ITAW.EQ.IEND.AND.IADDWAL.EQ.1)
         IF (ILOGWAL.AND.ISTRSB.EQ.1) THEN
C END APR 2006
            NSMRS = NSMRS + 1
            NSMRST = NSMRST + 1
            ICRSTR(NSMRST) = ITABSB(1)
            ECCSTR(NSMRST) = EZSTSB
            SPACST(NSMRST) = BSUBX(1)
         ENDIF
C BEG APR 2006
         IF (ILOGWAL.AND.IRNGSB.EQ.1) THEN
C END APR 2006
            NSMRS = NSMRS + 1
            NSMRRG = NSMRRG + 1
            ICRRNG(NSMRRG) = ITABSB(2)
            ECCRNG(NSMRRG) = EZRGSB
            SPACRG(NSMRRG) = BSUBX(2)
         ENDIF
C END OCT 2004
C BEG APR 2006
         IF (ILOGWAL.AND.ISMRST.EQ.1.AND.ISTIF(1).NE.0) THEN
C END APR 2006
            IF (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)) THEN
               NSMRS = NSMRS + 1
               NSMRST = NSMRST + 1
               ICRSTR(NSMRST) = ITABNO(2,1,1)
               ECCSTR(NSMRST) = ECZSTR(1)
C BEG OCT 2004
               SPACST(NSMRST) = B(1)
C END OCT 2004
            ENDIF
            NSMRS = NSMRS + 1
            NSMRST = NSMRST + 1
            ICRSTR(NSMRST) = ITABNO(3,1,1)
            ECCSTR(NSMRST) = ECZSTR(2)
C BEG OCT 2004
            SPACST(NSMRST) = B(1)
C END OCT 2004
            IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) THEN
               NSMRS = NSMRS + 1
               NSMRST = NSMRST + 1
               ICRSTR(NSMRST) = ITABNO(4,1,1)
               ECCSTR(NSMRST) = ECZSTR(3)
C BEG OCT 2004
               SPACST(NSMRST) = B(1)
C END OCT 2004
            ENDIF
         ENDIF
C        End of (ITAW.EQ.1.AND.ISMRST.EQ.1.AND.ISTIF(1).NE.0) condition
C BEG APR 2006
         IF (ILOGWAL.AND.ISMRRG.EQ.1.AND.ISTIF(2).NE.0) THEN
C END APR 2006
            IF (IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)) THEN
               NSMRS = NSMRS + 1
               NSMRRG = NSMRRG + 1
               ICRRNG(NSMRRG) = ITABNO(2,2,1)
               ECCRNG(NSMRRG) = ECZRNG(1)
C BEG OCT 2004
               SPACRG(NSMRRG) = B(2)
C END OCT 2004
            ENDIF
            NSMRS = NSMRS + 1
            NSMRRG = NSMRRG + 1
            ICRRNG(NSMRRG) = ITABNO(3,2,1)
            ECCRNG(NSMRRG) = ECZRNG(2)
C BEG OCT 2004
            SPACRG(NSMRRG) = B(2)
C END OCT 2004
            IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
               NSMRS = NSMRS + 1
               NSMRRG = NSMRRG + 1
               ICRRNG(NSMRRG) = ITABNO(4,2,1)
               ECCRNG(NSMRRG) = ECZRNG(3)
C BEG OCT 2004
               SPACRG(NSMRRG) = B(2)
C END OCT 2004
            ENDIF
         ENDIF
C        End of (ITAW.EQ.1.AND.ISMRRG.EQ.1.AND.ISTIF(2).NE.0) condition
         WRITE(IFIL14,'(I3,A)') NSMRS,
     1' $ NSMRS=no. of sets of smeared stiffeners.      END K-1 rec.'
C BEG APR 2006
         NLAY = NLAYRS(ITAWWR)
         DO 1015 ILAY = 1,NLAY
            WRITE(IFIL14,'(I2,A,I2,A,I2,A)') JMAT(ILAY,ITAWWR),
     1  ', $ MATL=layer matl no.   Wall type:',ITAW,', Layer: ',ILAY,
     1  '   BEGIN K-2 rec.'
            WRITE(IFIL14,'(1PE10.3,A,I2,A,I2)') THIK(ILAY,ITAWWR),
     1  ', $ TL  =layer thickness. Wall type:',ITAW,', Layer: ',ILAY
            WRITE(IFIL14,'(1PE10.3,A,I2,A,I2)') ANGL(ILAY,ITAWWR),
     1  ', $ ZETL=fiber angle.     Wall type:',ITAW,', Layer: ',ILAY
            WRITE(IFIL14,'(A)')
     1' 1  $ LSO = 1 means print stresses this layer.   END K-2 rec.'
 1015    CONTINUE
C END APR 2006
C
         IF (NSMRRG.GT.0) THEN
C  NEXT, DO THE SMEARED RINGS...
           DO 1055 I = 1,NSMRRG
              ICROSM = ICRRNG(I)
C BEG OCT 2004
              SPASM = SPACRG(I) 
C END OCT 2004
              ZETSM = 90.
              XSISM = 0.
              ECZSM = ECCRNG(I)
              WRITE(IFIL14,'(I2,1P,E11.3,A,1P,E12.3,A)')
     1        ICROSM, SPASM,' 90. 0.', ECZSM,
     1        ' $ k-6 (rings) ICROSM,SPASM,ZETSM,XSISM,ECZSM'
 1055      CONTINUE
         ENDIF
C DO THE STRINGERS NEXT...
         IF (NSMRST.GT.0) THEN
C  NEXT, DO THE SMEARED STRINGERS...
           DO 1056 I = 1,NSMRST
              ICROSM = ICRSTR(I)
C BEG OCT 2004
              SPASM = SPACST(I)
C END OCT 2004 
              ZETSM = 0.
              XSISM = 0.
              ECZSM = ECCSTR(I)
              WRITE(IFIL14,'(I2,1P,E11.3,A,1P,E12.3,A)')
     1        ICROSM, SPASM,' 0. 0.', ECZSM,
     1        ' $ k-6(strngers)ICROSM,SPASM,ZETSM,XSISM,ECZSM'
 1056      CONTINUE
         ENDIF
C
 1020 CONTINUE
C     End of "do loop": ITAW = 1,IEND
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C NEXT, DO THE SHELL UNITS...
C BEG MAR 2005
      IF (IFLAT.EQ.0) THEN
C unit 1 = cylindrical shell...
        WRITE(IFIL14,'(A)') 'C '
        WRITE(IFIL14,'(A,/,A)') 'C Begin unit 1: cylindrical shell',
     1' 5  0  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
        X1 = 0.
        X4 = XSTAGS
        THETA1 = 0.
        THETA2 = 360.
        IF (ICLOSE.EQ.0) THETA2 = 360.0*YSTAGS/(2.*PI*ABS(R))
C BEG OCT 2004
C  4 statements about RADIUS removed and moved above.
C END OCT 2004
C BEG APR 2006
        THETA1X = ANGBEG + THETA1
        THETA2X = ANGBEG + THETA2
C BEG AUG 2006
        IF (ITOTAL.EQ.1.AND.ANGBEG.GT.1.0.AND.THETA2X.GT.358.0)
     1    THETA2X = 360.
C END AUG 2006
        WRITE(IFIL14,'(1X,F3.1,1PE13.5,1P3E14.6,A)')
     1  X1,X4,THETA1X,THETA2X,RADIUS,
     1' $ m-2 X1,X4,th1,th2,r'
C END APR 2006
      ELSE
        WRITE(IFIL14,'(A)') 'C '
        WRITE(IFIL14,'(A,/,A)') 'C Begin unit 1: flat panel skin',
     1' 2  0  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
        X1 = 0.
        X4 = XSTAGS
        Y1D = 0.
        Y2D = YSTAGS
        WRITE(IFIL14,'(1X,F3.1,1PE13.5,1X,F3.1,1PE13.5,A)')
     1  X1,X4,Y1D,Y2D,
     1' $ m-2 X1,X4,Y1,Y2'
      ENDIF
C     End of IFLAT condition
C END MAR 2005
C BEG DEC 2006
      IWALLX = 1*IMULT
C END DEC 2006
C BEG JAN 2007
      IF (ISTRSB.EQ.1.OR.IRNGSB.EQ.1) IWALLX = 1
      IF ((NSTRNG.GT.0.AND.ISMRST.GT.0).OR.
     1    (NRINGS.GT.0.AND.ISMRRG.GT.0)) IWALLX = 1
C END JAN 2007
      IWIMP  = 0
      ZETA   = 0.
      ECZ    = 0.
      IF (IREF.EQ.1)  ECZ = -TX(1)/2.
      IF (IREF.EQ.-1) ECZ =  TX(1)/2.
C BEG APR 2006 (ILIN now read in as input data)
C     ILIN = 0
C END APR 2006
C BEG DEC 2006 (value of IPLAS is 1 if IPLAST=1)
C     IPLAS = 0
C END DEC 2006
      IRAMP = 0
      WRITE(IFIL14,'(2I3,1X,F3.1,1PE13.5,3I2,A)')
     1 IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
C BEG FEB 2006
      WRITE(IFIL14,'(3I5,A)') IELMNT,NNX,NNY,
     1' 0  0  0  0 $ n-1 KELT,NNX,NNY,IRREG,IUGRID,INTEG,IPENL'
C END FEB 2006
C BEG APR 2009
      IF (IELMNT.EQ.940) THEN
         WRITE(IFIL14,'(1P2E14.6,A)') PRESS,PRESS0,' 0. $n-1A PA,PB,drl'
         WRITE(IFIL14,'(A)') ' 0  2          $n-1B integ.scheme,PA & PB'
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END APR 2009
      IF (NNX.EQ.0) GO TO 1040
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for variable nodal point spacing..'
      NDIV = NNX/4
      NMOD = MOD(NNX,4)
C First, do segment lengths...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1030 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
C BEG APR 2006 (increase precision of SEGLX)
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  ', $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
        ENDIF
 1030  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(1P3E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(1P2E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(1PE13.6,A)') SEGLX(NNX),
     1'  $ n-2 SEGLX(NNX), last segment length'
C END APR 2006
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C Next, do number of intervals in each segment...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1035 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  ', $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
        ENDIF
 1035  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(3I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(2I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(I5,A)') NSEGX(NNX),
     1'  $ n-3 NSEGX(NNX), last segment intervals'
C
 1040 CONTINUE
C BEG FEB 2006
      IF (NNY.EQ.0) GO TO 1240
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for variable nodal point spacing..'
      NDIV = NNY/4
      NMOD = MOD(NNY,4)
C First, do segment lengths...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1230 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
C BEG APR 2006 (increase precision of SEGLY)
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  ', $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
        ENDIF
 1230  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(1P3E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(1P2E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(1PE13.6,A)') SEGLY(NNY),
     1'  $ n-2 SEGLY(NNY), last seg.length'
C END APR 2006
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C Next, do number of intervals in each segment...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1235 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  ', $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
        ENDIF
 1235  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(3I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(2I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(I5,A)') NSEGY(NNY),
     1'  $ n-3 NSEGY(NNY), last segment intervals'
C
 1240 CONTINUE
C END FEB 2006
C
C NEXT, PROVIDE THE BEAM STIFFENERS...
C DO THE RINGS FIRST...
      IF ((IBMRNG.EQ.1.OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4)
     1                              .AND.ISMRRG.EQ.0) THEN
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Input for rings or ring fayflanges as discrete beams...'
         DO 1045 I = 1,NRINGS
          IR = IROWRG(I)
          JR1 = 1
          JR2 = NCOLS(1)
          IARG = 1
          IF (IRENDS.EQ.1.AND.(I.EQ.1.OR.I.EQ.NRINGS)) IARG = 2
          IF (IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)) THEN
             ICROSS = ITABNO(2,2,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS = 1 if there is plasticity, IPLAST=1)
             WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1       ECYRNG(1),ECZRNG(1),ILIN,IPLAS,
     1     ' $ o-1a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
             WRITE(IFIL14,'(3I5,A,I3)') IR,JR1,JR2,
     1     ' $ o-1b IR,JR1,JR2  fayflange of ring no.',I
          ENDIF
          IF (IBMRNG.EQ.1) THEN
             ICROSS = ITABNO(3,2,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity, IPLAST=1)
             WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1       ECYRNG(2),ECZRNG(2),ILIN,IPLAS,
     1     ' $ o-1a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
             WRITE(IFIL14,'(3I5,A,I3)') IR,JR1,JR2,
     1     ' $ o-1b IR,JR1,JR2     web    of ring no.',I
             IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
                ICROSS = ITABNO(4,2,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticicty)
                WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1          ECYRNG(3),ECZRNG(3),ILIN,IPLAS,
     1       ' $ o-1a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
                WRITE(IFIL14,'(3I5,A,I3)') IR,JR1,JR2,
     1        ' $ o-1b IR,JR1,JR2  outflange of ring no.',I
             ENDIF
          ENDIF
 1045    CONTINUE
      ENDIF
C     End of ((IBMRNG.EQ.1.OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4)
C    1                              .AND.ISMRRG.EQ.0) condition
C
C BEG OCT 2004
C Subrings modeled as discrete beams...
      IF (IRNGSB.EQ.2) THEN
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Input for sub-rings as discrete beams...'
         DO 1047 I = 1,NRNGSB
          IR = IRRGSB(I)
          JR1 = 1
          JR2 = NCOLS(1)
          ICROSS = ITABSB(2)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
          WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1       EYRGSB,EZRGSB,ILIN,IPLAS,
     1     ' $ o-1a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
             WRITE(IFIL14,'(3I5,A,I3)') IR,JR1,JR2,
     1     ' $ o-1b IR,JR1,JR2  sub-ring no.',I
 1047    CONTINUE
      ENDIF
C END OCT 2004
C
C DO THE STRINGERS NEXT...
      IF ((IBMSTR.EQ.1.OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
     1                                .AND.ISMRST.EQ.0) THEN
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A,A)')
     1  'C Input for stringers or stringer',
     1  ' fayflanges as discrete beams...'
         DO 1050 I = 1,NSTRNG
          JS = ICOLST(I)
          IS1 = 1
          IS2 = NROWS(1)
          IARG = 1
          IF (ICLOSE.EQ.0.AND.(I.EQ.1.OR.I.EQ.NSTRNG)) IARG = 2
          IF (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)) THEN
             ICROSS = ITABNO(2,1,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS = 1 if there is plasticity)
             WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1       ECYSTR(1),ECZSTR(1),ILIN,IPLAS,
     1     ' $ o-2a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
             WRITE(IFIL14,'(3I5,A,I3)') JS,IS1,IS2,
     1     ' $ o-2b JS,IS1,IS2  fayflange of stringer no.',I
          ENDIF
          IF (IBMSTR.EQ.1) THEN
             ICROSS = ITABNO(3,1,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
             WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1       ECYSTR(2),ECZSTR(2),ILIN,IPLAS,
     1     ' $ o-2a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
             WRITE(IFIL14,'(3I5,A,I3)') JS,IS1,IS2,
     1     ' $ o-2b JS,IS1,IS2     web    of stringer no.',I
             IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
                ICROSS = ITABNO(4,1,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
                WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1          ECYSTR(3),ECZSTR(3),ILIN,IPLAS,
     1        ' $ o-2a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
                WRITE(IFIL14,'(3I5,A,I3)') JS,IS1,IS2,
     1        ' $ o-2b JS,IS1,IS2  outflange of stringer no.',I
             ENDIF
          ENDIF
 1050    CONTINUE
      ENDIF
C     End of ((IBMSTR.EQ.1.OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
C    1                                .AND.ISMRST.EQ.0) condition 
C
C BEG OCT 2004
C  Substringers modeled as discrete beams...
      IF (ISTRSB.EQ.2) THEN
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Input for sub-stringers as discrete beams...'
         DO 1048 I = 1,NSTRSB
          JS = ICSTSB(I)
          IS1 = 1
          IS2 = NROWS(1)
          ICROSS = ITABSB(1)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
          WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2,A)') ICROSS,' 0. ',
     1       EYSTSB,EZSTSB,ILIN,IPLAS,
     1     ' $ o-2a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
             WRITE(IFIL14,'(3I5,A,I3)') JS,IS1,IS2,
     1     ' $ o-2b JS,IS1,IS2  sub-stringer no.',I
 1048    CONTINUE
      ENDIF
C END OCT 2004
C
C NEXT, PROVIDE THE BOUNDARY CONDITIONS AT THE ENDS OF THE CYL. SHELL..
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for boundary conditions...'
      IBOND = 0
C BEG JAN 2005
C     IF (INCBC.EQ.1) IBOND = 1
      IF (INCBC.EQ.1.AND.ICHLDB.EQ.0) IBOND = 1
C END JAN 2005
C BEG JULY 2006
C BEG AUG 2006
C     IF (INCBC.EQ.1.AND.ICLOSED.EQ.0) IBOND = 1
      IF (INCBC.EQ.1.AND.ICLOSED.EQ.0.AND.ISYMM.EQ.0) IBOND=1
C END AUG 2006
C END JULY 2006
C BEG APR 2006
      IF (ICLOSED.EQ.1) THEN
C END APR 2006
         WRITE(IFIL14,'(A,I3,A)')' 0  6  0  6',IBOND,
     1 ' $ p-1 (IBLN(i), i=1,4), IBOND'
         WRITE(IFIL14,'(A)')
     1 ' 111  111    $ p-2 ITRA, IROT (boundary no. 1 is free)'
         WRITE(IFIL14,'(A)')
     1 ' 101  111    $ p-2 ITRA, IROT (v=0 on boundary no. 3)'
         IF (IBOND.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 1  6  1  6  $ P-3 (JBLN(i), i=1,4) for incremental buckling'
      ELSE
C BEG AUG 2006
         IBND1 = 0
         IBND2 = 0
         IF (ISYMM.EQ.1) IBND2 = 4
         IBND3 = 0
         IBND4 = 0
         IF (ISYMM.EQ.1) IBND4 = 4
C        WRITE(IFIL14,'(A,I3,A)')' 0  0  0  0',IBOND,
         WRITE(IFIL14,'(5I3,A)') IBND1,IBND2,IBND3,IBND4,IBOND,
     1 ' $ p-1 (IBLN(i), i=1,4), IBOND'
C BEG AUG 2006
         IF (INDXRV.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 111  111    $ p-2 ITRA, IROT (boundary no. 1, prebuckling)'
         IF (INDXRV.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 111  101    $ p-2 ITRA, IROT (boundary no. 1, prebuckling)'
C END AUG 2006
         IF (ISYMM.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 111  111    $ p-2 ITRA, IROT (boundary no. 2, prebuckling)'
C BEG AUG 2006
C BEG FEB 2007
         IF (INDXRV.EQ.0.AND.IFLAT.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 101  111    $ p-2 ITRA, IROT (boundary no. 3, prebuckling)'
         IF (INDXRV.EQ.0.AND.IFLAT.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 111  111    $ p-2 ITRA, IROT (boundary no. 3, prebuckling)'
         IF (INDXRV.EQ.1.AND.IFLAT.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 101  101    $ p-2 ITRA, IROT (boundary no. 3, prebuckling)'
         IF (INDXRV.EQ.1.AND.IFLAT.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 111  101    $ p-2 ITRA, IROT (boundary no. 3, prebuckling)'
C END FEB 2007
C END AUG 2006
         IF (ISYMM.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 111  111    $ p-2 ITRA, IROT (boundary no. 4, prebuckling)'
         IF (IBOND.EQ.1) THEN
          WRITE(IFIL14,'(A)')
     1'C See panda2 news item no. 660 for explanation of next line:'
          IF (ISYMM.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 1  1  1  1  $ P-3 (JBLN(i), i=1,4) for incremental buckling'
          IF (ISYMM.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 1  4  1  4  $ P-3 (JBLN(i), i=1,4) for incremental buckling'
         ENDIF
C END AUG 2006
      ENDIF
C
C NEXT, GET RESULTANTS IN THE SKIN, IN EACH STRINGER, AND IN EACH RING,
C NEEDED LATER FOR LOAD INPUT...
C BEG FEB 2005
      DET = CS0(1,1)*CS0(2,2) - CS0(1,2)**2
C END FEB 2005
C BEG NOV 2003
      FNXI(1) = FNX
      FNXI(2) = FNX0
      FNYI(1) = FNY
      FNYI(2) = FNY0
      FNXYI(1)= FNXY
      FNXYI(2)= 0.
      DO 1051 I = 1,2
C BEG FEB 2005
      EPS1 = (CS0(2,2)*FNXI(I) - CS0(1,2)*FNYI(I))/DET
      EPS2 = (CS0(1,1)*FNYI(I) - CS0(1,2)*FNXI(I))/DET
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(6,'(/,A,/,A,1P,3E12.4,/)')
     1' Membrane constitutive coefficients used to get EPS1 and EPS2',
     1' CS0(1,1),CS0(1,2),CS0(2,2)=',CS0(1,1),CS0(1,2),CS0(2,2)
C END FEB 2005
      FNXSKN(I) = CSKIN(1,1)*EPS1 + CSKIN(1,2)*EPS2
      FNYSKN(I) = CSKIN(1,2)*EPS1 + CSKIN(2,2)*EPS2
      FNXSMR(I) = CX(1,1,1)*EPS1 + CX(1,2,1)*EPS2
      FNYSMR(I) = CX(1,2,1)*EPS1 + CX(2,2,1)*EPS2
      FMXSUB(I) = 0.
      FNXSUB(I) = 0.
      FMYSUB(I) = 0.
      FNYSUB(I) = 0.
      STLDSB(I) = 0.
      STFMSB(I) = 0.
      RGLDSB(I) = 0.
      RGFMSB(I) = 0.
      IF (ISTRSB.GT.0) THEN
         HEIGHT = ZSTRSB(2) - ZSTRSB(1)
         FNXSUB(I) = BSUBXM(1)*(FNXSMR(I) - FNXSKN(I))/HEIGHT
         IF (ISTRSB.EQ.2) STLDSB(I) = FNXSUB(I)*HEIGHT
      ENDIF
      IF (ISTRSB.EQ.1.OR.ISTRSB.EQ.2) THEN 
         HEIGHT = ZSTRSB(2) - ZSTRSB(1)
         FMXSUB(I) = -EZSTSB*FNXSUB(I)*HEIGHT/BSUBXM(1)
         IF (ISTRSB.EQ.2) STFMSB(I) = FMXSUB(I)*BSUBXM(1)
         IF (ISTRSB.EQ.1) FNXSKN(I) = FNXSMR(I)
      ENDIF
      IF (IRNGSB.GT.0) THEN
         HEIGHT = ZRNGSB(2) - ZRNGSB(1)
         FNYSUB(I) = BSUBXM(2)*(FNYSMR(I) - FNYSKN(I))/HEIGHT
         IF (IRNGSB.EQ.2) RGLDSB(I) = FNYSUB(I)*HEIGHT
      ENDIF
      IF (IRNGSB.EQ.1.OR.IRNGSB.EQ.2) THEN
         HEIGHT = ZRNGSB(2) - ZRNGSB(1)
         FMYSUB(I) =  EZRGSB*FNYSUB(I)*HEIGHT/BSUBXM(2)
         IF (IRNGSB.EQ.2) RGFMSB(I) = FMYSUB(I)*BSUBXM(2)
         IF (IRNGSB.EQ.1) FNYSKN(I) = FNYSMR(I)
      ENDIF
C END OCT 2004
      IF (ISMRST.EQ.1) FNXSKN(I) = FNXI(I)
      IF (ISMRRG.EQ.1) FNYSKN(I) = FNYI(I)
C23456789012345678901234567890123456789012345678901234567890123456789012
      FMXSKN(I) = 0.0 
      IF (IREF.EQ.1)  FMXSKN(I) =  FNXSKN(I)*TX(1)/2.
      IF (IREF.EQ.-1) FMXSKN(I) = -FNXSKN(I)*TX(1)/2.
      FMYSKN(I) = 0.0 
      IF (IREF.EQ.1)  FMYSKN(I) = -FNYSKN(I)*TX(1)/2.
      IF (IREF.EQ.-1) FMYSKN(I) =  FNYSKN(I)*TX(1)/2.
C BEG OCT 2004
      IF (ISTRSB.EQ.1) FMXSKN(I) = FMXSKN(I) + FMXSUB(I)
      IF (IRNGSB.EQ.1) FMYSKN(I) = FMYSKN(I) + FMYSUB(I)
C END OCT 2004
C LOADS IN STRINGERS...
      FNXSTR(1,I) = 0.
      FMXSTR(1,I) = 0.
      FNXSTR(2,I) = 0.
      FMXSTR(2,I) = 0.
      FNXSTR(3,I) = 0.
      FMXSTR(3,I) = 0.
      IF (NSTRNG.GT.0) THEN
         IF (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1)) THEN
            IWALL1 = ITABNO(2,1,1)
            TX2 = TX(2)
            IF (IZSTIF(1).EQ.0) TX2 = TX(2) - TX(1)
            FNXSTR(1,I) = E1TAB(IWALL1)*EPS1*TX2
C
            write(6,'(A,/,I4,1P,4E12.4)')
     1    ' strg fayflange:iwall1,fnxstr(1),e1tab(iwall1),eps1,tx2=',
     1      IWALL1,FNXSTR(1,I),E1TAB(IWALL1),EPS1,TX2
            write(6,'(A,1P,2E12.4)') '      TX(1),TX(2)=', TX(1),TX(2)
C
            FMXSTR(1,I) = -ECZSTR(1)*FNXSTR(1,I)*B2(1)
            IF (ISMRST.EQ.1) FMXSKN(I) = FMXSKN(I) + FMXSTR(1,I)/B(1)
         ENDIF
         IWALL1 = ITABNO(3,1,1)
         FNXSTR(2,I) = E1TAB(IWALL1)*EPS1*TX(3)
C
         write(6,'(A,/,I4,1P,4E12.4)')
     1 ' stringer web:iwall1,fnxstr(2),e1tab(iwall1),eps1,tx(3)=',
     1   IWALL1,FNXSTR(2,I),E1TAB(IWALL1),EPS1,TX(3)
C
         FMXSTR(2,I) = -ECZSTR(2)*FNXSTR(2,I)*H(1)
         IF (ISMRST.EQ.1) FMXSKN(I) = FMXSKN(I) + FMXSTR(2,I)/B(1)
         IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) THEN
            IWALL1 = ITABNO(4,1,1)
            FNXSTR(3,I) = E1TAB(IWALL1)*EPS1*TX(4)
C
            write(6,'(A,/,I4,1P,4E12.4)')
     1    ' strng outflange:iwall1,fnxstr(3),e1tab(iwall1),eps1,tx(4)=',
     1      IWALL1,FNXSTR(3,I),E1TAB(IWALL1),EPS1,TX(4)
C
            FMXSTR(3,I) = -ECZSTR(3)*FNXSTR(3,I)*W(1)
            IF (ISMRST.EQ.1) FMXSKN(I) = FMXSKN(I) + FMXSTR(3,I)/B(1)
         ENDIF
      ENDIF
C     End of (NSTRNG.GT.0) condition
C
      STRLOD(I) = 0.
      IF (IBMSTR.EQ.1)
     1   STRLOD(I)=FNXSTR(1,I)*B2(1) +FNXSTR(2,I)*H(1) +FNXSTR(3,I)*W(1)
      IF (IBMSTR.EQ.2.OR.IBMSTR.EQ.4) STRLOD(I) = FNXSTR(1,I)*B2(1)
      FMTSTR(I) = 0.
      IF (IBMSTR.EQ.1) FMTSTR(I) =FMXSTR(1,I)+FMXSTR(2,I)+FMXSTR(3,I)
      IF (IBMSTR.EQ.2.OR.IBMSTR.EQ.4) FMTSTR(I) = FMXSTR(1,I)
C
C LOADS IN RINGS...
      FNXRNG(1,I) = 0.
      FMXRNG(1,I) = 0.
      FNXRNG(2,I) = 0.
      FMXRNG(2,I) = 0.
      FNXRNG(3,I) = 0.
      FMXRNG(3,I) = 0.
      IF (NRINGS.GT.0) THEN
         IF (IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1)) THEN
            IWALL1 = ITABNO(2,2,1)
            TY2 = TY(2)
            IF (IZSTIF(2).EQ.0) TY2 = TY(2) - TX(1)
            FNXRNG(1,I) = E1TAB(IWALL1)*EPS2*TY2
C
            write(6,'(A,/,I4,1P,4E12.4)')
     1    ' ring fayflange:iwall1,fnxrng(1),e1tab(iwall1),eps2,ty(2)=',
     1      IWALL1,FNXRNG(1,I),E1TAB(IWALL1),EPS2,TY2
            write(6,'(A,1P,2E12.4)') '      TX(1),TY(2)=', TX(1),TY(2)
C
            FMXRNG(1,I) = ECZRNG(1)*FNXRNG(1,I)*B2(2)
            IF (ISMRRG.EQ.1) FMYSKN(I) = FMYSKN(I) + FMXRNG(1,I)/B(2)
         ENDIF
         IWALL1 = ITABNO(3,2,1)
         FNXRNG(2,I) = E1TAB(IWALL1)*EPS2*TY(3)
C
         write(6,'(A,/,I4,1P,4E12.4)')
     1 ' ring web:iwall1,fnxrng(2),e1tab(iwall1),eps2,ty(3)=',
     1   IWALL1,FNXRNG(2,I),E1TAB(IWALL1),EPS2,TY(3)
C
         FMXRNG(2,I) = ECZRNG(2)*FNXRNG(2,I)*H(2)
         IF (ISMRRG.EQ.1) FMYSKN(I) = FMYSKN(I) + FMXRNG(2,I)/B(2)
         IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
            IWALL1 = ITABNO(4,2,1)
            FNXRNG(3,I) = E1TAB(IWALL1)*EPS2*TY(4)
C
            write(6,'(A,/,I4,1P,4E12.4)')
     1    ' ring outflange:iwall1,fnxrng(3),e1tab(iwall1),eps2,ty(4)=',
     1      IWALL1,FNXRNG(3,I),E1TAB(IWALL1),EPS2,TY(4)
C
            FMXRNG(3,I) = ECZRNG(3)*FNXRNG(3,I)*W(2)
            IF (ISMRRG.EQ.1) FMYSKN(I) = FMYSKN(I) + FMXRNG(3,I)/B(2)
         ENDIF
      ENDIF
C     End of (NRINGS.GT.0) condition
C
      RNGLOD(I) = 0.
      IF (IBMRNG.EQ.1)
     1  RNGLOD(I) =FNXRNG(1,I)*B2(2)+FNXRNG(2,I)*H(2)+FNXRNG(3,I)*W(2)
      IF (IBMRNG.EQ.2.OR.IBMRNG.EQ.4) RNGLOD(I) = FNXRNG(1,I)*B2(2)
      FMTRNG(I) = 0.
      IF (IBMRNG.EQ.1) FMTRNG(I) =FMXRNG(1,I)+FMXRNG(2,I)+FMXRNG(3,I)
      IF (IBMRNG.EQ.2.OR.IBMRNG.EQ.4) FMTRNG(I) = FMXRNG(1,I)
C
C  Check for equilibrium...
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG SEP 2004
      FNXTOT = FNXSKN(I)
      IF (ISMRST.EQ.0) FNXTOT = FNXSKN(I) +
     1        (FNXSTR(1,I)*B2(1)+FNXSTR(2,I)*H(1)+FNXSTR(3,I)*W(1))/B(1)
C BEG OCT 2004
      IF (ISTRSB.GT.1) 
     1     FNXTOT = FNXTOT + FNXSUB(I)*(ZSTRSB(2) - ZSTRSB(1))/BSUBXM(1)
C END OCT 2004
      FNYTOT = FNYSKN(I)
      IF (ISMRRG.EQ.0) FNYTOT = FNYSKN(I) +
     1        (FNXRNG(1,I)*B2(2)+FNXRNG(2,I)*H(2)+FNXRNG(3,I)*W(2))/B(2)
C BEG OCT 2004
      IF (IRNGSB.GT.1)
     1     FNYTOT = FNYTOT + FNYSUB(I)*(ZRNGSB(2) - ZRNGSB(1))/BSUBXM(2)
C END OCT 2004
C END SEP 2004
      IF (I.EQ.1) WRITE(6,'(/,A)') ' EQUILIBRIUM FOR LOAD SET A...'
      IF (I.EQ.2) WRITE(6,'(/,A)') ' EQUILIBRIUM FOR LOAD SET B...'
C BEG SEP 2004
      WRITE(6,'(A,A,1P,E12.4,/,A,/,A,A,/,A)')
     1 ' Check for axial equilibrium',
     1 ' with nominal stringer web height, H(1)=',H(1),
     1' FNX = Applied axial resultant, Nx;   FNXTOT = Computed value',
     1' FNXSTR(1,I),FNXSTR(2,I),FNXSTR(3,I)= Nx in stringer',
     1' fayflange, web, outflange',
     1' FNXSKN(I) = Nx in skin + smeared stringers'
C END SEP 2004
      WRITE(6,'(A,A,/,1P,6E12.4)')
     1'      FNX       FNXTOT    FNXSKN(I)   FNXSTR(1,I)  FNXSTR(2,I)',
     1'  FNXSTR(3,I)',
     1 FNXI(I),FNXTOT,FNXSKN(I),FNXSTR(1,I),FNXSTR(2,I),FNXSTR(3,I)
C BEG OCT 2004
      WRITE(6,'(A,1P,2E12.4)')
     1' Substringer axial Nx, height=',FNXSUB(I),ZSTRSB(2)-ZSTRSB(1)
C END OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG SEP 2004
      WRITE(6,'(A,A,1P,E12.4,/,A,/,A,A,/,A)')
     1 ' Check for hoop equilibrium',
     1 ' with nominal ring web height, H(2)=',H(2),
     1' FNY = Applied hoop  resultant, Ny;   FNYTOT = Computed value',
     1' FNXRNG(1,I),FNXRNG(2,I),FNXRNG(3,I)= Ny in ring',
     1' fayflange, web, outflange',
     1' FNYSKN(I) = Ny in skin + smeared rings'
C END SEP 2004
      WRITE(6,'(A,A,/,1P,6E12.4)')
     1'      FNY       FNYTOT    FNYSKN(I)   FNXRNG(1,I)  FNXRNG(2,I)',
     1'  FNXRNG(3,I)',
     1 FNYI(I),FNYTOT,FNYSKN(I),FNXRNG(1,I),FNXRNG(2,I),FNXRNG(3,I)
C BEG OCT 2004
      WRITE(6,'(A,1P,2E12.4)')
     1' Subring     axial Nx, height=',FNYSUB(I),ZRNGSB(2)-ZRNGSB(1)
C END OCT 2004
      DIFNX = FNXTOT
      DIFNY = FNYTOT
      IF (FNXI(I).NE.0.0) DIFNX =100.0*ABS(FNXI(I)-FNXTOT)/ABS(FNXI(I))
      IF (FNYI(I).NE.0.0) DIFNY =100.0*ABS(FNYI(I)-FNYTOT)/ABS(FNYI(I))
      WRITE(6,'(/,A,1P,E12.4,A)')
     1' Axial equilibrium (Nx added over x-cross section) off by',
     1  DIFNX,' per cent.'
      WRITE(6,'(A,1P,E12.4,A)')
     1' Hoop  equilibrium (Ny added over y-cross section) off by',
     1  DIFNY,' per cent.'
      WRITE(6,'(A)')
     1' =============================================================='
 1051 CONTINUE
C END NOV 2003
C
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)')
C BEG NOV 2003
C    1' 1 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
     1' 2 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
C END NOV 2003
      NN = 6
      IF (IBC12.EQ.1) NN = NN + 2
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0) NN = NN + 7
      IF (ICLOSED.EQ.0.AND.ISYMM.EQ.0) NN = NN + 7
C END AUG 2006
C END APR 2006
      IF (NSTRNG.GT.0.AND.(IBMSTR.EQ.1.OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
     1               .AND.ISMRST.EQ.0) NN = NN + 4*NSTRNG
C BEG OCT 2004
      IF (NSTRSB.GT.0.AND.ISTRSB.EQ.2) NN = NN + 4*NSTRSB
C END OCT 2004
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0.AND.NRINGS.GT.0.AND.
C    1  (IBMRNG.EQ.1.OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4)
C    1               .AND.ISMRRG.EQ.0) NN = NN + 4*NRINGS
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0.AND.NRINGS.GT.0.AND.
     1  (IBMRNG.EQ.1.OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4)
     1               .AND.ISMRRG.EQ.0) NN = NN + 4*NRINGS
C BEG OCT 2004
C     IF (ICLOSED.EQ.0.AND.NRNGSB.GT.0.AND.IRNGSB.EQ.2)
C    1                                 NN = NN + 4*NRNGSB
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0
     1              .AND.NRNGSB.GT.0.AND.IRNGSB.EQ.2)
     1                                 NN = NN + 4*NRNGSB
C END AUG 2006
C END APR 2006
C END OCT 2004
C
      IDRILL = 0
      JSUM = 0
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
C END MAR 2006
C COMPUTE NUMBER OF "DRILLING SUPPRESSION" RECORDS...
         IDRILL = 1
C BEG OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
         ILOGST = NSTRNG.GT.0.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5.AND.
     1    (ILINK1.EQ.0.OR.TX(2).EQ.TX(1).OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
     1    .AND.IZSTIF(1).EQ.0
C
         ILOGRG = NRINGS.GT.0.AND.IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.
     1    (ILINK2.EQ.0.OR.TY(2).EQ.TX(1).OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4)
     1    .AND.IZSTIF(2).EQ.0
C
C  Get major and sub stringer lines of attachment to panel skin...
C  Only the stringers that need to be linked are included in ICOLAL.
C BEG MAR 2007
         WRITE(6,*) 'Major stringer logic,ILOGST=',ILOGST
         WRITE(6,'(A,A,/,(10I5))')
     1 ' Column numbers of major stringer web/skin junctions,',
     1 ' ICOLST(i)=', (ICOLST(I),I=1,NSTRNG)
C
         WRITE(6,'(A,A,/,(10I5))')
     1 ' Column numbers of sub-stringer/skin junctions,',
     1 ' ICSTSB(i)=', (ICSTSB(I),I=1,NSTRSB)
C
         WRITE(6,*) 'Major ring logic,    ILOGRG=',ILOGRG
         WRITE(6,'(A,A,/,(10I5))')
     1 ' Row numbers of major ring web/skin junctions,',
     1 ' IROWRG(i)=', (IROWRG(I),I=1,NRINGS)
C
         WRITE(6,'(A,A,/,(10I5))')
     1 ' Row numbers of sub-ring/skin junctions,',
     1 ' IRRGSB(i)=', (IRRGSB(I),I=1,NRNGSB)
C23456789012345678901234567890123456789012345678901234567890123456789012
C END MAR 2007
         KS = 1
         LS = 1
         ILINE = 0
         NCOL = NCOLS(1)
         IF (ICLOSE.EQ.1) NCOL = NCOLS(1) - 1
C
         DO 1026 ICOL = 1,NCOL
            IF (ICOL.EQ.ICOLST(KS)) THEN
               IF (ILOGST) THEN
                  ILINE = ILINE + 1
                  ICOLAL(ILINE) = ICOL
                  KS = KS + 1
               ENDIF
            ENDIF
C
            IF (ICOL.EQ.ICSTSB(LS).AND.ISTRSB.EQ.3.AND.LNKSB1.EQ.0) THEN
C BEG MAR 2007
               ILINE = ILINE + 1
C END MAR 2007
               ICOLAL(ILINE) = ICOL
               LS = LS + 1
            ENDIF
 1026    CONTINUE
         NLINES = ILINE
C BEG MAR 2007
         WRITE(6,'(A,/,(10I5))')
     1 ' All column numbers of stringer web/skin junctions, ICOLAL(i)=',
     1   (ICOLAL(I),I=1,NLINES)
C23456789012345678901234567890123456789012345678901234567890123456789012
C END MAR 2007
C
C  Get major and sub ring lines of attachment to panel skin...
C  Only the rings that need to be linked are included in IROWAL.
         KR = 1
         LR = 1
         ILINE = 0
         NROW = NROWS(1)
C
         DO 1027 IROW = 1,NROW
            IF (IROW.EQ.IROWRG(KR)) THEN
               IF (ILOGRG) THEN
                  ILINE = ILINE + 1
                  IROWAL(ILINE) = IROW
                  KR = KR + 1
               ENDIF
            ENDIF
C
            IF (IROW.EQ.IRRGSB(LR).AND.IRNGSB.EQ.3.AND.LNKSB2.EQ.0) THEN
               ILINE = ILINE + 1
               IROWAL(ILINE) = IROW
               LR = LR + 1
            ENDIF
 1027    CONTINUE
C
C  Determine the number of bays in the structure that needs to be linked.
         NLINER = ILINE
C BEG MAR 2007
         WRITE(6,'(A,/,(10I5))')
     1 ' All row numbers of ring web/skin junctions, IROWAL(i)=',
     1   (IROWAL(I),I=1,NLINER)
C23456789012345678901234567890123456789012345678901234567890123456789012
C END MAR 2007
         IF (NLINER.EQ.0) THEN
            NBAYS = 1
            NDATA(1) = NROWS(1)
            IDATA(1) = 1
            GO TO 1028
         ENDIF
C
         IRENDA = 0
         IF (IROWAL(1).EQ.1.AND.IROWAL(NLINER).EQ.NROWS(1)) IRENDA = 1
         NBAYS = NLINER - 1
         IF (IRENDA.EQ.0) NBAYS = NLINER + 1
C
C   Determine NDATA and IDATA, to be used later in the STAGS drilling
C   suppression section for Unit 1, the panel skin.
C
         DO 1052 I = 1,NBAYS
            IF (I.GT.1.AND.I.LT.NBAYS) THEN
               IF (IRENDA.EQ.1) THEN
                  NDATA(I) = IROWAL(I+1) - IROWAL(I) - 1
                  IDATA(I) = IROWAL(I) + 1
               ELSE
                  NDATA(I) = IROWAL(I) - IROWAL(I-1) - 1
                  IDATA(I) = IROWAL(I-1) + 1
               ENDIF
            ELSE
               IF (I.EQ.1) THEN
                  IF (IRENDA.EQ.1) THEN
                     NDATA(1) = IROWAL(2) - IROWAL(1) - 1
                     IDATA(1) = 2
                  ELSE
                     NDATA(1) = IROWAL(1) - 1
                     IDATA(1) = 1
                  ENDIF
               ELSE
                  IF (IRENDA.EQ.1) THEN
                     NDATA(I) = NROWS(1) - IROWAL(I) - 1
                     IDATA(I) = IROWAL(I) + 1
                  ELSE
                     NDATA(I) = NROWS(1) - IROWAL(I-1)
                     IDATA(I) = IROWAL(I-1) + 1
                  ENDIF
               ENDIF
            ENDIF
 1052    CONTINUE
C
 1028    CONTINUE
C
C   Determine the number of "loading" entries generated by
C   drilling suppression in Unit 1, the panel skin.
         JSUM = NCOLS(1)
C BEG AUG 2006
         IF (ICLOSE.EQ.1) JSUM = NCOLS(1) - 1
C BEG MAR 2007
         IF (ITOTAL.EQ.1.AND.ANGBEG.GT.1.0.AND.THETA2X.GT.358.0
     1                                    .AND. .NOT. ILOGST)
     1                    JSUM = NCOLS(1) - 2
C END MAR 2007
C END AUG 2006
         IF (ILOGST) JSUM = JSUM - NLINES
C
         NN = NN + NBAYS*JSUM
C BEG APR 2006
C        WRITE(6,'(A,/,7I5)')
C    1 ' Unit 1: JSUM, NCOLS(1), ICLOSE, NLINES, NN, NBAYS, ILOGST=',
C    1           JSUM, NCOLS(1), ICLOSE, NLINES, NN, NBAYS, ILOGST
C END APR 2006
C
C COMMENT OUT THE OLD LOGIC IN THIS SECTION
C        NBAYS = NRINGS + 1
C        IF (IRENDS.EQ.1.AND.NRINGS.GT.0) NBAYS = NRINGS - 1
C        IF (NRINGS.EQ.0.OR.IBMRNG.EQ.1.OR.IBMRNG.EQ.5
C    1     .OR.(IBMRNG.EQ.3.AND.ILINK2.EQ.1.AND.TY(2).GT.TX(1))
C    1     .OR.IZSTIF(2).EQ.1) NBAYS =1
C23456789012345678901234567890123456789012345678901234567890123456789012
C        DO 1052 I = 1,NBAYS
C           IF (NRINGS.GT.0.AND.IBMRNG.NE.1.AND.IBMRNG.NE.5.AND.
C    1     (ILINK2.EQ.0.OR.TY(2).EQ.TX(1).OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4)
C    1      .AND.IZSTIF(2).EQ.0.AND.IRENDS.EQ.1
C    1       .OR.(I.GT.1.AND.I.LT.NBAYS)) THEN
C              IF (IRENDS.EQ.1) THEN
C                 NDATA(I) = IROWRG(I+1) - IROWRG(I) - 1
C                 IDATA(I) = IROWRG(I) + 1
C              ELSE
C                 NDATA(I) = IROWRG(I) - IROWRG(I-1) - 1
C                 IDATA(I) = IROWRG(I-1) + 1
C              ENDIF
C           ELSE
C              IF (I.EQ.1) THEN
C                 NDATA(I) = NROWS(1)
C                 IF ((ILINK2.EQ.0.OR.TY(2).EQ.TX(1)
C    1             .OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4).AND.IZSTIF(2).EQ.0
C    1            .AND.NRINGS.GT.0.AND.IBMRNG.NE.1.AND.IBMRNG.NE.5)
C    1            NDATA(I) = IROWRG(1) - 1
C                 IDATA(I) = 1
C              ELSE
C                 NDATA(I) = NROWS(1) - IROWRG(I-1)
C                 IDATA(I) = IROWRG(I-1) + 1
C              ENDIF
C           ENDIF
C1052    CONTINUE
C        IF (ICLOSE.EQ.1) THEN
C           JSUM = NCOLS(1) - 1
C           IF ((ILINK1.EQ.0.OR.TX(2).EQ.TX(1)
C    1      .OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4).AND.IZSTIF(1).EQ.0
C    1     .AND.NSTRNG.GT.0.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5)
C    1      JSUM =NCOLS(1)-NSTRNG-1
C        ELSE
C           JSUM = NCOLS(1)
C           IF ((ILINK1.EQ.0.OR.TX(2).EQ.TX(1)
C    1      .OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4).AND.IZSTIF(1).EQ.0
C    1     .AND.NSTRNG.GT.0.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5)
C    1      JSUM =NCOLS(1)-NSTRNG
C        ENDIF
C        NN = NN + NBAYS*JSUM
C END OCT 2004
      ENDIF
C     End of (IELMNT.EQ.480) condition
C
C BEG NOV 2003
C     NNLODB = NN
C END NOV 2003
      WRITE(IFIL14,'(A)') 'C '
C BEG JULY 2006
      IF (IUNITX.NE.0) NN = NN - 1
C END JULY 2006
C BEG NOV 2003
      DO 1115 I = 1,2
      IF (I.EQ.1) THEN
C BEG FEB 2005
      NNADD = NN
C BEG FEB 2007
C     IF (IFLAT.EQ.1) NNADD = NN + 2
      IF (IFLAT.EQ.1) NNADD = NN + 3
C END FEB 2007
      WRITE(IFIL14,'(A)') 'C Loads applied to panel skin, Load Set A'
C     WRITE(IFIL14,'(A,I6,A)') ' 1 ',NN,' 0 $ q-2 ISYS, NN, USRLD'
      WRITE(IFIL14,'(A,I6,A)') ' 1 ',NNADD,' 0 $ q-2 ISYS, NN, USRLD'
C END FEB 2005
      WRITE(IFIL14,'(1PE14.6,A)') PRESS,
     1' 5 3   0 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Pressure)'
      ELSE
C BEG JAN 2005
      NNADD = NN 
C BEG FEB 2005
      IF (IFLAT.EQ.0) THEN
         IF (I.EQ.2.AND.INDIC.EQ.1.AND.ICHLDB.EQ.1) NNADD = NN + 2
      ELSE
C BEG FEB 2007
C        NNADD = NN + 2
         NNADD = NN + 3
C END FEB 2007
      ENDIF
C END FEB 2005
C END JAN 2005
      WRITE(IFIL14,'(A)') 'C Loads applied to panel skin, Load Set B'
C BEG JAN 2005
C     WRITE(IFIL14,'(A,I6,A)') ' 2 ',NN,' 0 $ q-2 ISYS, NN, USRLD'
      WRITE(IFIL14,'(A,I6,A)') ' 2 ',NNADD,' 0 $ q-2 ISYS, NN, USRLD'
C END JAN 2005
      WRITE(IFIL14,'(1PE14.6,A)') PRESS0,
     1' 5 3   0 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Pressure)'
      ENDIF
      WRITE(IFIL14,'(1PE14.6,A)')  -FNXSKN(I),
     1' 2 1   1 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(skn), row 1)'
      WRITE(IFIL14,'(1PE14.6,A)')   FMXSKN(I),
     1' 2 5   1 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(skn), row 1)'
      WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)')  FNXSKN(I),' 2 1',NROWS(1),
     1' 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(skn), row(',NROWS(1),'))'
      WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') -FMXSKN(I),' 2 5',NROWS(1),
     1' 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(skn), row(',NROWS(1),'))'
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0) THEN
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0) THEN
C END AUG 2006
C END APR 2006
         WRITE(IFIL14,'(1PE14.6,A)')  -FNYSKN(I),
     1  ' 3 2 0   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Ny(skn), col 1)'
         WRITE(IFIL14,'(1PE14.6,A)')   FMYSKN(I),
     1  ' 3 4 0   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (My(skn), col 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNYSKN(I),
     1  ' 3 2 0',NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Ny(skn), col(',NCOLS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)')
     1                                -FMYSKN(I),' 3 4 0',NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (My(skn), col(',NCOLS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A)')  -FNXYI(I),
     1  ' 3 1 0   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nxy(skn), col 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNXYI(I),
     1  ' 3 1 0',NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (-Nxy(skn), col(',NCOLS(1),'))'
      ENDIF
C
      IF (IBC12.EQ.1) THEN
        WRITE(IFIL14,'(1PE14.6,A)') -FNXYI(I),
     1 ' 2 2   1 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (-Nxy(skn), row 1)'
        WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNXYI(I),' 2 2',NROWS(1),
     1 ' 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nxy(skn), row(',NROWS(1),'))'
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C BEG JULY 2006
      IF (IUNITX.EQ.0)
     1WRITE(IFIL14,'(A,I4,A,I4,A)') ' 0. -1 1',NROWS(1),
     1'   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX(u=0, col.1, row(',NROWS(1),
     1'))'
C END JULY 2006
C BEG JAN 2005
C BEG FEB 2005
C     IF (I.EQ.2.AND.INDIC.EQ.1.AND.ICHLDB.EQ.1) THEN
      IF ((I.EQ.2.AND.INDIC.EQ.1.AND.ICHLDB.EQ.1).OR.IFLAT.EQ.1) THEN
C END FEB 2005
C  Add normal displacement w = 0 at one place on each of the two
C  curved edges of the cylindrical panel...
C BEG JULY 2006
        WRITE(IFIL14,'(A)')
     1'C See panda2 news item no. 602 for explanation of next 2 lines:'
C END JULY 2006
        ICOLAV = NCOLS(1)/2 +1
        WRITE(IFIL14,'(A,I4,A,I4,A)') ' 0. -1 3 1',ICOLAV,
     1'   0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX(w=0, row.1, col(',ICOLAV,
     1'))'
        WRITE(IFIL14,'(A,2I4,A,I4,A)') ' 0. -1 3',NROWS(1),ICOLAV,
     1'   0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX(w=0, col.?, row(',NROWS(1),
     1'))'
C BEG FEB 2007
        IF (IFLAT.EQ.1) THEN
        WRITE(IFIL14,'(A)')
     1'C See panda2 news item no. 703 for explanation of next 1 line:'
        WRITE(IFIL14,'(A,I4,A,I4,A)') ' 0. -1 2',NROWS(1),
     1' 1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX(v=0, col.1, row(',NROWS(1),
     1'))'
        ENDIF
C END FEB 2007
      ENDIF
C END JAN 2005
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0)
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0)
C END AUG 2006
C END APR 2006
     1WRITE(IFIL14,'(A,2I4,A,I4,A,I4,A)') ' 0. -1 1',NROWS(1),NCOLS(1),
     1' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX(u=0, col(',NCOLS(1),'), row(',
     1 NROWS(1),'))'
C
      IF (NSTRNG.GT.0.AND.(IBMSTR.EQ.1.OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
     1               .AND.ISMRST.EQ.0) THEN
C  SUPPLY THE PRELOAD FROM EACH OF THE STRINGERS (BEAM MODEL)...
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A,A)')
     1  'C Loads applied to ends of stringers',
     1  ' modeled as discrete beams...'
C BEG NOV 2003
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 1057 ISTG = 1,NSTRNG
         DIV = 1.0
         IF (ICLOSE.EQ.0.AND.(ISTG.EQ.1.OR.ISTG.EQ.NSTRNG)) DIV = 2.0
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)') -STRLOD(I)/DIV,
     1   ' 1 1   1',ICOLST(ISTG),
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(str',ISTG,')*h, row 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)') FMTSTR(I)/DIV,
     1   ' 1 5   1',ICOLST(ISTG),
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(str',ISTG,'), row 1)'
 1057    CONTINUE
         DO 1058 ISTG = 1,NSTRNG
         DIV = 1.0
         IF (ICLOSE.EQ.0.AND.(ISTG.EQ.1.OR.ISTG.EQ.NSTRNG)) DIV = 2.0
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1   STRLOD(I)/DIV,' 1 1',NROWS(1),ICOLST(ISTG),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(str',ISTG,
     1  ')*h, row(',NROWS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1    -FMTSTR(I)/DIV,' 1 5',NROWS(1),ICOLST(ISTG),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(str',ISTG,
     1  '), row(',NROWS(1),'))'
 1058    CONTINUE
C END NOV 2003
      ENDIF
C     End of (NSTRNG.GT.0.AND.(IBMSTR.EQ.1.OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
C    1               .AND.ISMRST.EQ.0) condition
C
C BEG OCT 2004
      IF (NSTRSB.GT.0.AND.ISTRSB.EQ.2) THEN 
C  SUPPLY THE PRELOAD FROM EACH OF THE SUB-STRINGERS (BEAM MODEL)...
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A,A)')
     1  'C Loads applied to ends of substringers',
     1  ' modeled as discrete beams'
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 1060 ISTG = 1,NSTRSB
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)') -STLDSB(I),
     1   ' 1 1   1',ICSTSB(ISTG),
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(str',ISTG,')*h, row 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)') STFMSB(I),
     1   ' 1 5   1',ICSTSB(ISTG),
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(str',ISTG,'), row 1)'
 1060    CONTINUE
         DO 1065 ISTG = 1,NSTRSB
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1   STLDSB(I),' 1 1',NROWS(1),ICSTSB(ISTG),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(str',ISTG,
     1  ')*h, row(',NROWS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1    -STFMSB(I),' 1 5',NROWS(1),ICSTSB(ISTG),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(str',ISTG,
     1  '), row(',NROWS(1),'))'
 1065    CONTINUE
      ENDIF
C     End of (NSTRSB.GT.0.AND.ISTRSB.EQ.2) condition
C END OCT 2004
C
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0.AND.NRINGS.GT.0.AND.
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0.AND.NRINGS.GT.0.AND.
C END AUG 2006
C END APR 2006
     1(IBMRNG.EQ.1.OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4).AND.ISMRRG.EQ.0) THEN
C  SUPPLY THE PRELOAD FROM EACH OF THE RINGS (BEAM MODEL)...
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Loads applied to ends of rings modeled as discrete beams...'
C BEG NOV 2003
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 1062 IRG = 1,NRINGS
         DIV = 1.0
         IF (IRENDS.EQ.1.AND.(IRG.EQ.1.OR.IRG.EQ.NRINGS)) DIV = 2.0
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)') -RNGLOD(I)/DIV,
     1   ' 1 2',IROWRG(IRG),
     1   '   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(rng',IRG,')*h, col 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)')  FMTRNG(I)/DIV,
     1   ' 1 4',IROWRG(IRG),
     1   '   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(rng',IRG,'), col 1)'
 1062    CONTINUE
         DO 1067 IRG = 1,NRINGS
         DIV = 1.0
         IF (IRENDS.EQ.1.AND.(IRG.EQ.1.OR.IRG.EQ.NRINGS)) DIV = 2.0
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1   RNGLOD(I)/DIV,' 1 2',IROWRG(IRG),NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(rng',IRG,
     1  ')*h, col(',NCOLS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1   -FMTRNG(I)/DIV,' 1 4',IROWRG(IRG),NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(rng',IRG,
     1  '), col(',NCOLS(1),'))'
 1067    CONTINUE
C END NOV 2003
      ENDIF
C     End of (ICLOSE.EQ.0.AND.NRINGS.GT.0.AND.
C    1(IBMRNG.EQ.1.OR.IBMRNG.EQ.2.OR.IBMRNG.EQ.4).AND.ISMRRG.EQ.0) cond.
C
C BEG OCT 2004
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.0.AND.NRNGSB.GT.0.AND.IRNGSB.EQ.2) THEN
      IF (ISYMM.EQ.0.AND.ICLOSED.EQ.0
     1              .AND.NRNGSB.GT.0.AND.IRNGSB.EQ.2) THEN
C END AUG 2006
C END APR 2006
C  SUPPLY THE PRELOAD FROM EACH OF THE RINGS (BEAM MODEL)...
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1  'C Loads applied to ends of subrings modeled as discrete beams'
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 1068 IRG = 1,NRNGSB
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)') -RGLDSB(I),
     1   ' 1 2',IRRGSB(IRG),
     1   '   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(rng',IRG,')*h, col 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I2,A)')  RGFMSB(I),
     1   ' 1 4',IRRGSB(IRG),
     1   '   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(rng',IRG,'), col 1)'
 1068    CONTINUE
         DO 1069 IRG = 1,NRNGSB
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1   RGLDSB(I),' 1 2',IRRGSB(IRG),NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(rng',IRG,
     1  ')*h, col(',NCOLS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I2,A,I3,A)')
     1   -RGFMSB(I),' 1 4',IRRGSB(IRG),NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(rng',IRG,
     1  '), col(',NCOLS(1),'))'
 1069    CONTINUE
      ENDIF
C     End of (ICLOSE.EQ.0.AND.NRNGSB.GT.0.AND.IRNGSB.EQ.2) condition
C END OCT 2004
C      
C  SUPPRESS THE DRILLING FREEDOMS EVERYWHERE EXCEPT AT LINES OF
C  INTERSECTION OF THE CYL. SHELL (UNIT 1) WITH STRINGERS AND RINGS...
C
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
C END MAR 2006
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A)')
     1    'C Drilling freedoms suppressed in cyl. skn'
         NCOL = NCOLS(1) - 1
C BEG AUG 2006
         IF (ICLOSE.EQ.0) NCOL = NCOLS(1)
C BEG MAR 2007
         IF (ITOTAL.EQ.1.AND.ANGBEG.GT.1.0.AND.THETA2X.GT.358.0)
     1   NCOL = NCOLS(1) - 1
         JBEG = 1
         IF (ITOTAL.EQ.1.AND.ANGBEG.GT.1.0.AND.THETA2X.GT.358.0
     1                                    .AND. .NOT. ILOGST) JBEG = 2
C END MAR 2007
C END AUG 2006
         DO 1110 IBAY = 1,NBAYS
            WRITE(IFIL14,'(A,I2,A)')
     1     'C  Bay no. ',IBAY,'; drilling degrees of freedom suppressed'
            IROW = IDATA(IBAY)
            NDAT = NDATA(IBAY)
            KS = 1
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG MAR 2007
C           DO 1100 J = 1,NCOL
            DO 1100 J = JBEG,NCOL
C END MAR 2007
C BEG OCT 2004
C              IF (J.EQ.ICOLST(KS).AND.IZSTIF(1).EQ.0.AND.
C    1     (ILINK1.EQ.0.OR.TX(2).EQ.TX(1).OR.IBMSTR.EQ.2.OR.IBMSTR.EQ.4)
C    1                            .AND.IBMSTR.NE.1.AND.IBMSTR.NE.5) THEN
               IF (J.EQ.ICOLAL(KS)) THEN
                  KS = KS + 1
                  GO TO 1100
               ENDIF
               WRITE(IFIL14,'(A,2I4,A,I4,A)')
     1' 0. -1 6',IROW,J,' 0',NDAT,' 0 1 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX..'
 1100       CONTINUE
 1110    CONTINUE
      ENDIF
C     End of (IELMNT.EQ.480) condition
 1115 CONTINUE
C END NOV 2003
C
      WRITE(IFIL14,'(A)') 'C Output control...'
      WRITE(IFIL14,'(A)')
     1' 0 0 0 0 0 0 0 0 0 0 0 0 0 $ r-1 output control (end unit 1)'
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C BEG OCT 2004
C NEXT, PROVIDE INPUT FOR THE SUB-STRINGERS, IF ANY...
      IF (ISTRSB.NE.3.OR.NSTRSB.EQ.0) GO TO 1190
      HEIGHT = ZSTRSB(2) - ZSTRSB(1)
      DTHETA = THETA2/FLOAT(NCOLS(1))
      IF (ICLOSE.EQ.0) DTHETA = THETA2/FLOAT(NCOLS(1)-1)
      X1 = 0.
      X4 = XSTAGS
      IWIMP  = 0
      ZETA   = 0.
C BEG APR 2006 (ILIN now read as input data)
C     ILIN = 0
C END APR 2006
C BEG DEC 2006 (IPLAS = 1 if there is  plasticity)
C     IPLAS = 0
C END DEC 2006
      IRAMP = 0
C
      DO 1189 ISTR = 1,NSTRSB
C
      IUNIT = ISTR
C BEG FEB 2005
C     THETA = FLOAT(ICSTSB(ISTR)-1)*DTHETA
      THETA = THETSB(ISTR)
C END FEB 2005
      CTHETA = DCOS(THETA*PIRAD)
      STHETA = DSIN(THETA*PIRAD)
C
      IUNIT = IUNIT + 1
      ECZ = 0.0
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A,I3,A,I3)')
     1'C Begin unit',IUNIT,': substringer no.',ISTR
C
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin web of substringer no.',ISTR
         WRITE(IFIL14,'(A)')
     1 ' 2  3  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
C BEG MAR 2005
         Y0STSB = RADIUS
         IF (IFLAT.EQ.1) Y0STSB = 0.
         IF (LNKSB1.EQ.0) THEN
            IF (GAPSB1.GE.0.) THEN
               Y1X = Y0STSB 
               Y2X = Y0STSB + HEIGHT + GAPSB1
            ELSE
               Y1X = Y0STSB - HEIGHT + GAPSB1
               Y2X = Y0STSB 
            ENDIF
         ELSE
            IF (GAPSB1.GE.0.) THEN
               Y1X = Y0STSB + GAPSB1
               Y2X = Y1X + HEIGHT 
            ELSE
               Y1X = Y0STSB - HEIGHT + GAPSB1
               Y2X = Y1X + HEIGHT 
            ENDIF
         ENDIF
         WRITE(IFIL14,'(1X,F3.1,1PE13.5,1P2E14.6,A,I3)') X1,X4,Y1X,Y2X,
     1 ' $ m-2 X1,X4,Y1,Y2; substringer ',ISTR
         IF (IFLAT.EQ.0) THEN
            STHETW = STHETA
            CTHETW = CTHETA
            XGC1 = 0.
            YGC1 = Y1X*STHETW
            ZGC1 = Y1X*CTHETW
            XGC2 = 0.
            YGC2 = Y2X*STHETW
            ZGC2 = Y2X*CTHETW
            XGC3 = XSTAGS
            YGC3 = YGC2
            ZGC3 = ZGC2
         ELSE
            XGC1 = 0.
            YGC1 = YSTSB(ISTR) 
            ZGC1 = Y1X
            XGC2 = 0.
            YGC2 = YGC1 
            ZGC2 = Y2X
            XGC3 = XSTAGS
            YGC3 = YGC2
            ZGC3 = ZGC2
         ENDIF
C END MAR 2005
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC1,YGC1,ZGC1,
     1 ' $ m-4a XGC1,YGC1,ZGC1 corner 1 of substringer'
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC2,YGC2,ZGC2,
     1 ' $ m-4b XGC2,YGC2,ZGC2 corner 2 of substringer'
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC3,YGC3,ZGC3,
     1 ' $ m-4c XGC3,YGC3,ZGC3 corner 3 of substringer'
C BEG DEC 2006
         IWALLX = IWALSB(1)*IMULT
C END DEC 2006
         ECZ    = 0.
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1   IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1 ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
C
      WRITE(IFIL14,'(2I5,A)') IELMNT,NNX,
     1' 0  0  0  0  0 $ n-1 KELT,NNX,NNY,IRREG,IUGRID,INTEG,IPENL'
C BEG APR 2009
      IF (IELMNT.EQ.940) THEN
         WRITE(IFIL14,'(A)') ' 0.    0.   0.  $n-1A PA & PB & drilling'
         WRITE(IFIL14,'(A)') ' 0  2          $n-1B integ.scheme,PA & PB'
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END APR 2009
      IF (NNX.EQ.0) GO TO 1128
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for variable nodal point spacing..'
      NDIV = NNX/4
      NMOD = MOD(NNX,4)
C First, do segment lengths...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1126 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
C BEG APR 2006 (increase precision of SEGLX)
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  ', $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
        ENDIF
 1126  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(1P3E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(1P2E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(1PE13.6,A)') SEGLX(NNX),
     1'  $ n-2 SEGLX(NNX), last segment length'
C END APR 2006
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C Next, do number of intervals in each segment...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1127 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  ', $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
        ENDIF
 1127  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(3I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(2I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(I5,A)') NSEGX(NNX),
     1'  $ n-3 NSEGX(NNX), last segment intervals'
 1128 CONTINUE
C
C BEG MAR 2007
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for b. c. and loading'
      WRITE(IFIL14,'(A)')
     1   ' 3  3  3  3  0  $ p-1 (IBLN(i), i=1,4), IBOND (b.c.)'
      WRITE(IFIL14,'(A)') 'C '
C END MAR 2007
C BEG NOV 2003
      WRITE(IFIL14,'(A)')
     1' 2 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
      DO 1185 I = 1,2
      NNSTR = 2
      NNSTRB = NNSTR
C
C COMPUTE NUMBER OF SUBSTRINGER SEGMENT "DRILLING SUPPRESSION" RECORDS...
      IDRILL = 0
      JSUM = 0
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
C END MAR 2006
         IDRILL = 1
         NDATA(1) = NROWS(1)
         IDATA(1) = 1
         JSUM = NPSUBS - 1
         NNSTR = NNSTR + JSUM
      ENDIF
C
      IF (I.EQ.1) THEN
      WRITE(IFIL14,'(A,I4)')'C  Load Set A, Subtringer No.',ISTR
      WRITE(IFIL14,'(A,I3,A)') ' 1 ',NNSTR,'  0 $ q-2 ISYS, NN, USRLD'
      ELSE
      WRITE(IFIL14,'(A,I4)')'C  Load Set B, Subtringer No.',ISTR
      WRITE(IFIL14,'(A,I3,A)') ' 2 ',NNSTR,'  0 $ q-2 ISYS, NN, USRLD'
      ENDIF
      WRITE(IFIL14,'(1PE14.6,A)') -FNXSUB(I),
     1' 2 1   1 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx, row 1)'
      WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNXSUB(I),
     1' 2 1',NROWS(1),
     1' 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx, row(',NROWS(1),'))'
C
C  SUPPRESS THE SUBSTRINGER SEGMENT DRILLING FREEDOMS EVERYWHERE EXCEPT AT
C  LINES OF INTERSECTION WITH CYL. SHELL AND OTHER STRINGER SEGMENTS...
C
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A,I3,A)')
     1  'C Drilling freedoms suppressed in substringer',ISTR,' web'
C END MAR 2006
         NCOL = NPSUBS
         JSKIP1 = 1
         JSKIP2 = 0
         IF (GAPSB1.LT.0.) THEN
            JSKIP1 = 0
            JSKIP2 = NPSUBS
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         IROW = IDATA(1)
         NDAT = NDATA(1)
         DO 1129 J = 1,NCOL
            IF (J.EQ.JSKIP1.OR.J.EQ.JSKIP2) GO TO 1129
            WRITE(IFIL14,'(A,2I4,A,I4,A)')
     1' 0. -1 6',IROW,J,' 0',NDAT,' 0 1 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX..'
 1129    CONTINUE
      ENDIF
 1185 CONTINUE
C  (End of loop over I: I=1=Load Set A; I=2=Load Set B)
C END NOV 2003
C
      WRITE(IFIL14,'(A)') 'C Output control...'
      WRITE(IFIL14,'(A,I3,A)')
     1' 0 0 0 0 0 0 0 0 0 0 0 0 0 $ r-1 output (end unit',IUNIT,')'
 1189 CONTINUE
C  (End of loop over number of substringers, NSTRSB)
 1190 CONTINUE
C END OCT 2004
C
C NEXT, PROVIDE INPUT FOR THE STRINGERS, IF ANY...
      HSTEFF = H(1)
      IF (NSTRNG.EQ.0.OR.IBMSTR.EQ.1) GO TO 1300
      DTHETA = THETA2/FLOAT(NSTRNG)
      IF (ICLOSE.EQ.0) DTHETA = THETA2/FLOAT(NSTRNG-1)
C BEG MAR 2005
      IF (IFLAT.EQ.1) DYSTRG = YSTAGS/FLOAT(NSTRNG-1)
C END MAR 2005
      GAPFAY = 0.
      IF (ILINK1.EQ.1.AND.IZSTIF(1).EQ.1) GAPFAY = 0.5*(TX(1) + TX(2))
      IF (ILINK1.EQ.1.AND.IZSTIF(1).EQ.0) GAPFAY = TX(2) - 0.5*TX(1)
      IF (R.LT.0.0) GAPFAY = -GAPFAY
      EPSTHT = 0.5*(B2(1)/(RADIUS+GAPFAY))/PIRAD
C BEG MAR 2005
      IF (IFLAT.EQ.1) EPSYST = 0.5*B2(1)
C END MAR 2005
      THETAX = 90. + DTHETA
      X1 = 0.
      X4 = XSTAGS
      IWIMP  = 0
      ZETA   = 0.
C BEG APR 2006 (ILIN now read in as input data)
C     ILIN = 0
C END APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
C     IPLAS = 0
C END DEC 2006
      IRAMP = 0
C
      DO 1290 ISTR = 1,NSTRNG
C
C BEG OCT 2004
      IUNIT = 1 + NSTRSB + IUNSTR*(ISTR-1)
C END OCT 2004
C BEG APR 2006
      THETA = FLOAT(ISTR-1)*DTHETA + ANGBEG
      CTHETA = DCOS(THETA*PIRAD)
      STHETA = DSIN(THETA*PIRAD)
C BEG MAR 2005
      IF (IFLAT.EQ.1) YSTRG = FLOAT(ISTR-1)*DYSTRG
C END MAR 2005
C
      DO 1280 ISUBU = 1,IUNSTR
C
      IUNIT = IUNIT + 1
      ECZ = 0.0
      WRITE(IFIL14,'(A)') 'C '
C BEG MAR 2005
      WRITE(IFIL14,'(A,I3,A,I3,A,I1)')
     1'C Begin unit',IUNIT,': stringer no.',ISTR,' stringerseg. ',ISUBU
C23456789012345678901234567890123456789012345678901234567890123456789012
C END MAR 2005
C
      IF (ISUBU.EQ.IFYSTR.AND.IBMSTR.EQ.3.AND.
     1 (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1))) THEN
         IFNX = 1
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin faying flange of stringer no.',ISTR
C BEG MAR 2005
         IF (IFLAT.EQ.0) THEN
           WRITE(IFIL14,'(A)')
     1   ' 5  0  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
           THETAA = THETA - EPSTHT
           THETAB = THETA + EPSTHT
           WRITE(IFIL14,'(1X,F3.1,1P,E12.5,E13.5,2E12.5,A)')
     1     X1,X4,THETAA,THETAB,RADIUS+GAPFAY,
     1   ' $ m-2 X1,X4,th1,th2,r'
         ELSE
           WRITE(IFIL14,'(A)')
     1   ' 2  4  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
           Y1D = YSTRG - EPSYST
           Y2D = YSTRG + EPSYST
           WRITE(IFIL14,'(1X,F3.1,1P,3E13.5,A)')
     1     X1,X4,Y1D,Y2D,' $ m-2 X1,X4,Y1,Y2'
           XGFAY = 0.
           YGFAY = 0.
           ZGFAY = GAPFAY
           WRITE(IFIL14,'(1X,F3.1,1X,F3.1,1P,E13.5,A)')
     1     XGFAY,YGFAY,ZGFAY,' $ m-4d XG,YG,ZG' 
           XGROTF = 0.
           YGROTF = 0.
           ZGROTF = 0.
           WRITE(IFIL14,'(1X,F3.1,1X,F3.1,1X,F3.1,A)')
     1     XGROTF,YGROTF,ZGROTF,' $ m-4d XGROT,YGROT,ZGROT'
         ENDIF
C END MAR 2005
         IARG = 1
         IF (ICLOSE.EQ.0.AND.(ISTR.EQ.1.OR.ISTR.EQ.NSTRNG)) IARG = 2
C BEG DEC 2006
         IWALLX = IWALNO(2,1,IARG)*IMULT
C END DEC 2006
         ECZ = 0.
         IF (IZSTIF(1).EQ.1.AND.ILINK1.EQ.0) ECZ = TX(2)/2.
         IF (IZSTIF(1).EQ.0.AND.TX(2).GT.TX(1)) THEN
C BEG FEB 2007
C           IF (ILINK1.EQ.0) ECZ =  (TX(2)-TX(1))/2.
C           IF (ILINK1.EQ.1) ECZ = -(TX(2)-TX(1))/2.
            IF (IREF.EQ.1)  ECZ = (TX(2)-TX(1))/2.
            IF (IREF.EQ.0)  ECZ = TX(2)/2.
            IF (IREF.EQ.-1) ECZ = TX(2)/2. + TX(1)/2.
C END FEB 2007
         ENDIF
         IF (R.LT.0.) ECZ = -ECZ
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1    IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1  ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
      ENDIF
C  End of IF (ISUBU.EQ.IFYSTR.AND.IBMSTR.EQ.3.AND.
C    1 (IZSTIF(1).EQ.1.OR.TX(2).GT.TX(1))) condition (faying flange)
C
      IF (ISUBU.EQ.IWBSTR) THEN
         IFNX = 2
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin web of stringer no.',ISTR
         WRITE(IFIL14,'(A)')
     1 ' 2  3  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
         YADD = 0.
         IF (IREF.EQ.0) YADD = TX(1)/2.
         IF (IREF.EQ.1.AND.R.LT.0.)  YADD = TX(1)
         IF (IREF.EQ.-1.AND.R.GT.0.) YADD = TX(1)
         YADD2 = 0.
         IF (IZSTIF(1).EQ.0) YADD2 = TX(2) - TX(1)
         YADD3 = 0.
         IF (IZSTIF(1).EQ.1) YADD3 = TX(2)/2.
         GAP = YADD + YADD2 + YADD3
C BEG MAR 2005
         Y0STRG = RADIUS
         IF (IFLAT.EQ.1) Y0STRG = 0.
         IF (ILINK1.EQ.0) THEN
            IF (R.GE.0.) THEN
               Y1X = Y0STRG
               Y2X = Y0STRG + H(1) + GAP
            ELSE
               Y1X = Y0STRG - H(1) - GAP
               Y2X = Y0STRG 
            ENDIF
         ELSE
            IF (R.GE.0.) THEN
               Y1X = Y0STRG + GAP
               Y2X = Y1X + H(1)
            ELSE
               Y1X = Y0STRG - H(1) - GAP
               Y2X = Y1X + H(1)
            ENDIF
         ENDIF
C END MAR 2005
         RADTIP = Y2X
         IF (R.LT.0.) RADTIP = Y1X
         HSTEFF = ABS(Y2X-Y1X)
         WRITE(IFIL14,'(1X,F3.1,1PE13.5,1P2E14.6,A,I3)') X1,X4,Y1X,Y2X,
     1 ' $ m-2 X1,X4,Y1,Y2; stringer ',ISTR
C BEG MAR 2005
         IF (IFLAT.EQ.0) THEN
            STHETW = STHETA
            CTHETW = CTHETA
            IF (IZSTIF(1).EQ.1) THEN
               THETAW = THETA + EPSTHT
               STHETW = DSIN(THETAW*PIRAD)
               CTHETW = DCOS(THETAW*PIRAD)
            ENDIF
            XGC1 = 0.
            YGC1 = Y1X*STHETW
            ZGC1 = Y1X*CTHETW
            XGC2 = 0.
            YGC2 = Y2X*STHETW
            ZGC2 = Y2X*CTHETW
            XGC3 = XSTAGS
            YGC3 = YGC2
            ZGC3 = ZGC2
         ELSE
            YWEBST = YSTRG
            IF (IZSTIF(1).EQ.1) YWEBST = YSTRG + 0.5*B2(1)
            XGC1 = 0.
            YGC1 = YWEBST 
            ZGC1 = Y1X
            XGC2 = 0.
            YGC2 = YGC1 
            ZGC2 = Y2X
            XGC3 = XSTAGS
            YGC3 = YGC2
            ZGC3 = ZGC2
         ENDIF
C END MAR 2005
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC1,YGC1,ZGC1,
     1 ' $ m-4a XGC1,YGC1,ZGC1 corner 1 of stringer web'
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC2,YGC2,ZGC2,
     1 ' $ m-4b XGC2,YGC2,ZGC2 corner 2 of stringer web'
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC3,YGC3,ZGC3,
     1 ' $ m-4c XGC3,YGC3,ZGC3 corner 3 of stringer web'
         IARG = 1
         IF (ICLOSE.EQ.0.AND.(ISTR.EQ.1.OR.ISTR.EQ.NSTRNG)) IARG = 2
C BEG DEC 2006
         IWALLX = IWALNO(3,1,IARG)*IMULT
C END DEC 2006
         ECZ    = 0.
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1   IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1 ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
      ENDIF
C End of IF (ISUBU.EQ.IWBSTR) condition (stringer web)
C
      IF (ISUBU.EQ.IOTSTR.AND.(IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
     1                    (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) THEN
         IFNX = 3
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin outstanding flange of stringer no.',ISTR
         WRITE(IFIL14,'(A)')
     1 ' 2  3  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
         Y1X = 0.0
         Y2X = W(1)
         WRITE(IFIL14,'(1X,F3.1,1PE13.5,1P2E14.6,A,I3)') X1,X4,Y1X,Y2X,
     1 ' $ m-2 X1,X4,Y1,Y2; stringer ',ISTR
         XGC1 = 0.
C BEG MAR 2005
         IF (IFLAT.EQ.0) THEN
           STHETW = STHETA
           CTHETW = CTHETA
           IF (IZSTIF(1).EQ.1) THEN
              THETAW = THETA + EPSTHT
              STHETW = DSIN(THETAW*PIRAD)
              CTHETW = DCOS(THETAW*PIRAD)
           ENDIF
           IF (ISTIF(1).EQ.1) YGC1 = RADTIP*STHETW -0.5*W(1)*CTHETW
           IF (ISTIF(1).EQ.1) ZGC1 = RADTIP*CTHETW +0.5*W(1)*STHETW
           IF (ISTIF(1).EQ.2) YGC1 = RADTIP*STHETW
           IF (ISTIF(1).EQ.2) ZGC1 = RADTIP*CTHETW
           XGC2 = 0.
           IF (ISTIF(1).EQ.1) YGC2 = RADTIP*STHETW +0.5*W(1)*CTHETW
           IF (ISTIF(1).EQ.1) ZGC2 = RADTIP*CTHETW -0.5*W(1)*STHETW
           IF (ISTIF(1).EQ.2) YGC2 = RADTIP*STHETW +W(1)*CTHETW
           IF (ISTIF(1).EQ.2) ZGC2 = RADTIP*CTHETW -W(1)*STHETW
         ELSE
           IF (ISTIF(1).EQ.1) YGC1 = YWEBST - 0.5*W(1)
           IF (ISTIF(1).EQ.2) YGC1 = YWEBST 
           ZGC1 = RADTIP
           YGC2 = YGC1 + W(1)
           ZGC2 = ZGC1
         ENDIF
C END MAR 2005
         XGC3 = XSTAGS
         YGC3 = YGC2
         ZGC3 = ZGC2
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC1,YGC1,ZGC1,
     1 ' $ m-4a XGC1,YGC1,ZGC1 corner 1 of stringer outflange'
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC2,YGC2,ZGC2,
     1 ' $ m-4b XGC2,YGC2,ZGC2 corner 2 of stringer outflange'
         WRITE(IFIL14,'(1P,3E14.6,A)') XGC3,YGC3,ZGC3,
     1 ' $ m-4c XGC3,YGC3,ZGC3 corner 3 of stringer outflange'
         IARG = 1
         IF (ICLOSE.EQ.0.AND.(ISTR.EQ.1.OR.ISTR.EQ.NSTRNG)) IARG = 2
C BEG DEC 2006
         IWALLX = IWALNO(4,1,IARG)*IMULT
C END DEC 2006
         ECZ = 0.
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1    IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1  ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
      ENDIF
C End of IF (ISUBU.EQ.IOTSTR.AND.(IBMSTR.EQ.3.OR.IBMSTR.EQ.4).AND.
C    1                    (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) (outstandng flng) 
C
      WRITE(IFIL14,'(2I5,A)') IELMNT,NNX,
     1' 0  0  0  0  0 $ n-1 KELT,NNX,NNY,IRREG,IUGRID,INTEG,IPENL'
C BEG APR 2009
      IF (IELMNT.EQ.940) THEN
         WRITE(IFIL14,'(A)') ' 0.    0.   0.  $n-1A PA & PB & drilling'
         WRITE(IFIL14,'(A)') ' 0  2          $n-1B integ.scheme,PA & PB'
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END APR 2009
      IF (NNX.EQ.0) GO TO 1140
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for variable nodal point spacing..'
      NDIV = NNX/4
      NMOD = MOD(NNX,4)
C First, do segment lengths...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1130 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
C BEG APR 2006 (increase precision of SEGLX)
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  ', $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
        ENDIF
 1130  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(1P3E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(1P2E13.6,A,I2,A,I2)') (SEGLX(J),J=J0,JMAX),
     1  '  $ n-2 SEGLX(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(1PE13.6,A)') SEGLX(NNX),
     1'  $ n-2 SEGLX(NNX), last segment length'
C END APR 2006
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C Next, do number of intervals in each segment...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1135 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  ', $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
        ENDIF
 1135  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(3I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(2I5,A,I2,A,I2)') (NSEGX(J),J=J0,JMAX),
     1  '  $ n-3 NSEGX(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(I5,A)') NSEGX(NNX),
     1'  $ n-3 NSEGX(NNX), last segment intervals'
 1140 CONTINUE
C
      IF (IBMSTR.EQ.2.AND.ISUBU.EQ.IWBSTR) THEN
       IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) THEN
C Input for outstanding flange modelled as discrete beam attached to webtip:
C BEG AUG 2006
          JS = NPSTRW(ISTR)
C END AUG 2006
          IF (R.LT.0) JS = 1
          IS1 = 1
          IS2 = NROWS(1)
          IARG = 1
          IF (ICLOSE.EQ.0.AND.(ISTR.EQ.1.OR.ISTR.EQ.NSTRNG)) IARG = 2
          ICROSS = ITABNO(4,1,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
          WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2)') ICROSS,' 90. ',
     1    ECYSTR(3),ECZSTR(3),ILIN,IPLAS,
     1  ' $ o-1a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
          WRITE(IFIL14,'(3I5,A)') JS,IS1,IS2,' $ o-1b  JS, IS1, IS2'
       ENDIF
      ENDIF
C
C BEG MAR 2007
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for b. c. and loading'
      WRITE(IFIL14,'(A)')
     1   ' 3  3  3  3  0  $ p-1 (IBLN(i), i=1,4), IBOND (b.c.)'
      WRITE(IFIL14,'(A)') 'C '
C
C     IF (IBMSTR.NE.1.AND.IBMSTR.NE.5.AND.ISUBU.EQ.IWBSTR
C    1                               .AND.ISWAY.EQ.0) THEN
C        WRITE(IFIL14,'(A)')
C    1   ' 3  3  3  3  0  $ p-1 (IBLN(i), i=1,4), IBOND'
C        WRITE(IFIL14,'(A)')
C    1 ' 110  111    $ p-2 ITRA, IROT (w=0 on boundary no. 3)'
C     ELSE
C        WRITE(IFIL14,'(A)')
C    1   ' 3  3  3  3  0  $ p-1 (IBLN(i), i=1,4), IBOND'
C     ENDIF
C END MAR 2007
C BEG NOV 2003
      WRITE(IFIL14,'(A)')
     1' 2 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
      DO 1200 I = 1,2
      NNSTR = 2
      FMXFAY(I) = 0.0
      IF (IBMSTR.EQ.3.AND.ISUBU.EQ.IFYSTR.AND.ECZ.NE.0.0) THEN
         FMXFAY(I) = -ECZ*FNXSTR(1,I)
         IF (FMXFAY(I).NE.0.0) NNSTR = NNSTR + 2
      ENDIF
      IF (IBMSTR.EQ.2.AND.ISUBU.EQ.IWBSTR.AND.
     1 (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)) NNSTR = NNSTR + 4
      NNSTRB = NNSTR
C
C COMPUTE NUMBER OF STRINGER SEGMENT "DRILLING SUPPRESSION" RECORDS...
      IDRILL = 0
      JSUM = 0
C     IF (I.EQ.1.AND.IELMNT.EQ.480) THEN
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
C END MAR 2006
         IDRILL = 1
         NDATA(1) = NROWS(1)
         IDATA(1) = 1
C BEG AUG 2006
         IF (ISUBU.EQ.IFYSTR) JSUM = NPSTRB(ISTR) - 1
C END AUG 2006
         IF (ISUBU.EQ.IWBSTR) THEN
C BEG AUG 2006
            IF (ISTIF(1).EQ.3) JSUM = NPSTRW(ISTR) - 1
            IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2)
     1                                       JSUM = NPSTRW(ISTR) - 2
         ENDIF
C BEG FEB 2007
C        IF (ISUBU.EQ.IOTSTR) JSUM = NPSTRW(ISTR) - 1
         IF (ISUBU.EQ.IOTSTR) JSUM = NPSTRF(ISTR) - 1
C END FEB 2007
C END AUG 2006
         NNSTR = NNSTR + JSUM
      ENDIF
C
      IF (I.EQ.1) THEN
      WRITE(IFIL14,'(A,I4)')'C  Load Set A, Stringer No.',ISTR
      WRITE(IFIL14,'(A,I3,A)') ' 1 ',NNSTR,'  0 $ q-2 ISYS, NN, USRLD'
      ELSE
      WRITE(IFIL14,'(A,I4)')'C  Load Set B, Stringer No.',ISTR
C     WRITE(IFIL14,'(A,I3,A)') ' 2 ',NNSTRB,' 0 $ q-2 ISYS, NN, USRLD'
      WRITE(IFIL14,'(A,I3,A)') ' 2 ',NNSTR,'  0 $ q-2 ISYS, NN, USRLD'
      ENDIF
      DIV = 1.0
      IF (ICLOSE.EQ.0.AND.(ISTR.EQ.1.OR.ISTR.EQ.NSTRNG)) DIV = 2.0
      WRITE(IFIL14,'(1PE14.6,A)') -FNXSTR(IFNX,I)/DIV,
     1' 2 1   1 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx, row 1)'
      WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNXSTR(IFNX,I)/DIV,
     1' 2 1',NROWS(1),
     1' 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx, row(',NROWS(1),'))'
C
      IF (FMXFAY(I).NE.0.0) THEN
         WRITE(IFIL14,'(1PE14.6,A)')   FMXFAY(I)/DIV,
     1 ' 2 5   1 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(fay), row 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)')
     1   -FMXFAY(I)/DIV,' 2 5',NROWS(1),
     1 ' 0 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(fay), row(',NROWS(1),'))'
      ENDIF
C
      IF (IBMSTR.EQ.2.AND.ISUBU.EQ.IWBSTR) THEN
       IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) THEN
         STRLOD(I) = FNXSTR(3,I)*W(1)
         FMTSTR(I) = -ECZSTR(3)*STRLOD(I)
         DIV = 1.0
         IF (ICLOSE.EQ.0.AND.(ISTR.EQ.1.OR.ISTR.EQ.NSTRNG)) DIV = 2.0
         WRITE(IFIL14,'(1PE14.6,A,I4,A)') -STRLOD(I)/DIV,
     1   ' 1 1   1',JS,
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(str)*w, row 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A)') FMTSTR(I)/DIV,
     1   ' 1 5   1',JS,
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(str), row 1)'
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I4,A)')
     1   STRLOD(I)/DIV,' 1 1',NROWS(1),JS,
     1 ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(str)*w, row(',NROWS(1),'))'
         WRITE(IFIL14,'(1PE14.6,A,2I4,A,I4,A)')
     1    -FMTSTR(I)/DIV,' 1 5',NROWS(1),JS,
     1   ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(str), row(',NROWS(1),'))'
       ENDIF
      ENDIF
C
C  SUPPRESS THE STRINGER SEGMENT DRILLING FREEDOMS EVERYWHERE EXCEPT AT
C  LINES OF INTERSECTION WITH CYL. SHELL AND OTHER STRINGER SEGMENTS...
C
C     IF (I.EQ.1.AND.IELMNT.EQ.480) THEN
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
         WRITE(IFIL14,'(A)') 'C '
         IF (ISUBU.EQ.IFYSTR) THEN
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in stringer',ISTR,
     1     ' faying flange'
C END MAR 2006
C BEG AUG 2006
            NCOL = NPSTRB(ISTR)
C END AUG 2006
            JSKIP1 = 0
C BEG AUG 2006
            JSKIP2 = NPSTRB(ISTR)/2 + 1
            IF (IZSTIF(1).EQ.1) JSKIP2 = NPSTRB(ISTR)
C END AUG 2006
         ENDIF
         IF (ISUBU.EQ.IWBSTR) THEN
C BEG MAR 2006
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in stringer',ISTR,' web'
C END MAR 2006
C BEG AUG 2006
            NCOL = NPSTRW(ISTR)
C END AUG 2006
            JSKIP1 = 1
            JSKIP2 = 0
C BEG AUG 2006
            IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) JSKIP2 = NPSTRW(ISTR)
C END AUG 2006
            IF (R.LT.0.0) THEN
               JSKIP1 = 0
C BEG AUG 2006
               JSKIP2 = NPSTRW(ISTR)
C END AUG 2006
               IF (ISTIF(1).EQ.1.OR.ISTIF(1).EQ.2) JSKIP1 = 1
            ENDIF
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (ISUBU.EQ.IOTSTR) THEN
C BEG MAR 2006
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in stringer',ISTR,
     1     ' outstanding flange'
C END MAR 2006
C BEG AUG 2006
            NCOL = NPSTRF(ISTR)
C END AUG 2006
            JSKIP1 = 0
C BEG AUG 2006
            JSKIP2 = NPSTRF(ISTR)/2 + 1
C END AUG 2006
            IF (ISTIF(1).EQ.2) JSKIP2 = 1
         ENDIF
         IROW = IDATA(1)
         NDAT = NDATA(1)
         DO 1122 J = 1,NCOL
            IF (J.EQ.JSKIP1.OR.J.EQ.JSKIP2) GO TO 1122
            WRITE(IFIL14,'(A,2I4,A,I4,A)')
     1' 0. -1 6',IROW,J,' 0',NDAT,' 0 1 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX..'
 1122    CONTINUE
      ENDIF
C     End of (IELMNT.EQ.480) condition
 1200 CONTINUE
C   (End of loop over I: I=1=Load Set A; I=2=Load Set B)
C END NOV 2003
C
      WRITE(IFIL14,'(A)') 'C Output control...'
      WRITE(IFIL14,'(A,I3,A)')
     1' 0 0 0 0 0 0 0 0 0 0 0 0 0 $ r-1 output (end unit',IUNIT,')'
 1280 CONTINUE
C   (End of loop over number of stringer segments.)
 1290 CONTINUE
C   (End of loop over number of stringers, NSTRNG)
 1300 CONTINUE
C
C BEG OCT 2004
C NEXT, PROVIDE INPUT FOR THE SUBRINGS, IF ANY...
      IF (IRNGSB.NE.3.OR.NRNGSB.EQ.0) GO TO 1395
      HEIGHT = ZRNGSB(2) - ZRNGSB(1)
C BEG APR 2006
      Y1R = 0. + ANGBEG
      Y2R = THETA2 + ANGBEG
C END APR 2006
C BEG MAR 2005
      IF (IFLAT.EQ.1) Y2R = YSTAGS
C END MAR 2005
      IWIMP  = 0
      ZETA   = 90.
C BEG APR 2006 (ILIN now read in as input data)
C     ILIN = 0
C END APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
C     IPLAS = 0
C END DEC 2006
      IRAMP = 0
      IUNIT = 1 + NSTSBX + IUNSTR*NSTRNG
C
      DO 1389 IRNG = 1,NRNGSB
C
         XG = XSUBX(IRNG)
C
         IUNIT = IUNIT + 1
         ECZ = 0.0
         WRITE(IFIL14,'(A)') 'C '
         WRITE(IFIL14,'(A,I3,A,I3)')
     1  'C Begin unit',IUNIT,': subring no.',IRNG
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin web of subring no.',IRNG
C BEG MAR 2005
         IF (IFLAT.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 4  4  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
         IF (IFLAT.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 2  3  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
         X0RING = RADIUS
         IF (IFLAT.EQ.1) X0RING = 0.
         IF (LNKSB2.EQ.0) THEN
            IF (GAPSB2.GE.0.) THEN
               X1 = X0RING 
               X4 = X0RING + HEIGHT + GAPSB2
            ELSE
               X1 = X0RING - HEIGHT + GAPSB2
               X4 = X0RING 
            ENDIF
         ELSE
            IF (GAPSB2.GE.0.) THEN
               X1 = X0RING + GAPSB2
               X4 = X0RING + HEIGHT + GAPSB2
            ELSE
               X1 = X0RING - HEIGHT + GAPSB2
               X4 = X0RING + GAPSB2
            ENDIF
         ENDIF
         XWEB = XG
         IF (IFLAT.EQ.0) THEN
           WRITE(IFIL14,'(1P4E14.6,A,I3)') X1,X4,Y1R,Y2R,
     1   ' $ m-2 X1,X4,Y1,Y2; annulus, subring ',IRNG
           WRITE(IFIL14,'(1PE13.5,A)') XWEB,
     1  '  0.  0.  $ m-4d XG,YG,ZG corner 1 of subring'
           WRITE(IFIL14,'(A)')
     1  '  0.  0.  0.  $ m-4e XGROT,YGROT,ZGROT rotation of subring'
         ELSE
           WRITE(IFIL14,'(1P4E14.6,A,I3)') X1,X4,Y1R,Y2R,
     1   ' $ m-2 X1,X4,Y1,Y2;rectplate,subring ',IRNG
           XGC1 = XWEB 
           YGC1 = 0. 
           ZGC1 = X1 
           XGC2 = XWEB 
           YGC2 = YSTAGS
           ZGC2 = X1 
           XGC3 = XWEB 
           YGC3 = YSTAGS
           ZGC3 = X4 
           WRITE(IFIL14,'(1P,3E14.6,A)') XGC1,YGC1,ZGC1,
     1   ' $ m-4a XGC1,YGC1,ZGC1 corner 1 of subring'
           WRITE(IFIL14,'(1P,3E14.6,A)') XGC2,YGC2,ZGC2,
     1   ' $ m-4b XGC2,YGC2,ZGC2 corner 2 of subring'
           WRITE(IFIL14,'(1P,3E14.6,A)') XGC3,YGC3,ZGC3,
     1   ' $ m-4c XGC3,YGC3,ZGC3 corner 3 of subring'
         ENDIF
C END MAR 2005
C BEG DEC 2006
         IWALLX = IWALSB(2)*IMULT
C END DEC 2006
         ECZ    = 0.
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1   IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1 ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
C
      NNX = 0
C BEG FEB 2006
      WRITE(IFIL14,'(3I5,A)') IELMNT,NNX,NNY,
     1' 0  0  0  0 $ n-1 KELT,NNX,NNY,IRREG,IUGRID,INTEG,IPENL'
C END FEB 2006
C BEG APR 2009
      IF (IELMNT.EQ.940) THEN
         WRITE(IFIL14,'(A)') ' 0.    0.   0.  $n-1A PA & PB & drilling'
         WRITE(IFIL14,'(A)') ' 0  2          $n-1B integ.scheme,PA & PB'
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END APR 2009
C BEG FEB 2006
      IF (NNY.EQ.0) GO TO 1340
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for variable nodal point spacing..'
      NDIV = NNY/4
      NMOD = MOD(NNY,4)
C First, do segment lengths...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1330 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
C BEG APR 2006 (increase the precision of SEGLY)
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  ', $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
        ENDIF
 1330  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(1P3E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(1P2E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(1PE13.6,A)') SEGLY(NNY),
     1'  $ n-2 SEGLY(NNY), last seg.length'
C END APR 2006
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C Next, do number of intervals in each segment...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1335 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  ', $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
        ENDIF
 1335  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(3I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(2I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(I5,A)') NSEGY(NNY),
     1'  $ n-3 NSEGY(NNY), last segment intervals'
C
 1340 CONTINUE
C END FEB 2006
C
C BEG MAR 2007
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for b. c. and loading'
C
C BEG AUG 2006
      IF (ISYMM.EQ.0) WRITE(IFIL14,'(A)')
     1' 3  3  3  3  0  $ p-1 (IBLN(i), i=1,4), IBOND (b.c.)'
      IF (ISYMM.EQ.1) WRITE(IFIL14,'(A)')
     1' 3  4  3  4  0  $ p-1 (IBLN(i), i=1,4), IBOND (b.c.)'
C END AUG 2006
      WRITE(IFIL14,'(A)') 'C '
C END MAR 2007
C
      NNRNG = 0
C COMPUTE NUMBER OF SUBRING "DRILLING SUPPRESSION" RECORDS...
      IDRILL = 0
      JSUM = 0
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
C END MAR 2006
         IDRILL = 1
         NDATA(1) = NCOLS(1)
         IF (ICLOSE.EQ.1) NDATA(1) = NCOLS(1) - 1
         IDATA(1) = 1
         JSUM = NPSUBR - 1
         NNRNG = NNRNG + JSUM
      ENDIF
C BEG NOV 2003
      NNDRIL = NNRNG
C
      DO 1285 I=1,2
      NNRNG = NNDRIL
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.1) THEN
      IF (ICLOSED.EQ.1.OR.ISYMM.EQ.1) THEN
C END AUG 2006
C END APR 2006
         NSYS = 0
C        IF (NNRNG.GT.0) NSYS = 1
         IF (NNRNG.GT.0) NSYS = 2
         IF (I.EQ.1) THEN
            WRITE(IFIL14,'(I3,A)') NSYS,
     1 ' 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
         WRITE(IFIL14,'(A,I4)')'C  Load Set A, Subring ',IRNG
C BEG MAR 2006
         IF (NNRNG.GT.0) WRITE(IFIL14,'(A,I3,A)')
     1 ' 1 ',NNRNG,'  0 $ q-2 ISYS, NN, USRLD'
C END MAR 2006
         ELSE
         WRITE(IFIL14,'(A,I4)')'C  Load Set B, Subring ',IRNG
C BEG MAR 2006
         IF (NNRNG.GT.0) WRITE(IFIL14,'(A,I3,A)')
     1 ' 2 ',NNRNG,'  0 $ q-2 ISYS, NN, USRLD'
C END MAR 2006
         ENDIF
C BEG MAR 2006
C  two lines omitted, moved up.
C END MAR 2006
      ELSE
         IF (I.EQ.1) THEN
            WRITE(IFIL14,'(A)')
     1  ' 2 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
         ENDIF
         NNRNG = NNRNG + 2
         IF (I.EQ.1) THEN
         WRITE(IFIL14,'(A,I4)')'C  Load Set A, Subring ',IRNG
         WRITE(IFIL14,'(A,I3,A)') ' 1 ',NNRNG,
     1                              '  0 $ q-2 ISYS, NN, USRLD'
         ELSE
         WRITE(IFIL14,'(A,I4)')'C  Load Set B, Subring ',IRNG
         WRITE(IFIL14,'(A,I3,A)') ' 2 ',NNRNG,
     1                              '  0 $ q-2 ISYS, NN, USRLD'
         ENDIF
         WRITE(IFIL14,'(1PE14.6,A)') -FNYSUB(I),
     1 ' 3 2 0   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Ny, col 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNYSUB(I),
     1 ' 3 2 0',NCOLS(1),
     1 ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Ny, col(',NCOLS(1),'))'
C
      ENDIF
C
C  SUPPRESS THE SUBRING DRILLING FREEDOMS EVERYWHERE EXCEPT AT LINES OF
C  INTERSECTION WITH CYL. SHELL AND OTHER RING SEGMENTS...
C
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
         WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in subring',IRNG,' web'
C END MAR 2006
            NROW = NPSUBR 
            JSKIP1 = 1
            JSKIP2 = 0
            IF (GAPSB2.LT.0.) THEN
               JSKIP1 = 0
               JSKIP2 = NPSUBR 
            ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         ICOL = IDATA(1)
         NDAT = NDATA(1)
         DO 1229 J = 1,NROW
            IF (J.EQ.JSKIP1.OR.J.EQ.JSKIP2) GO TO 1229
            WRITE(IFIL14,'(A,2I4,A,I4,A)')
     1' 0. -1 6',J,ICOL,' 0',NDAT,' 0 0 1 $ q-3 P,LT,LD,LI,LJ,LAX,NX..'
 1229    CONTINUE
      ENDIF
 1285 CONTINUE
C  (End of loop over I: I=1=Load Set A; I=2=Load Set B)
C END NOV 2003
C
      WRITE(IFIL14,'(A)') 'C Output control...'
      WRITE(IFIL14,'(A,I3,A)')
     1' 0 0 0 0 0 0 0 0 0 0 0 0 0 $ r-1 output (end unit',IUNIT,')'
 1389 CONTINUE
C  (End of loop over number of subrings, NRNGSB)
 1395 CONTINUE
C END OCT 2004
C
C NEXT, PROVIDE INPUT FOR THE RINGS, IF ANY...
      HRGEFF = H(2)
      IF (NRINGS.EQ.0.OR.IBMRNG.EQ.1) GO TO 1400
      XG = -B(2)
      IF (IRENDS.NE.1) XG = -B(2)/2.
C BEG APR 2006
      Y1R = 0. + ANGBEG
      Y2R = THETA2 + ANGBEG
C END APR 2006
C BEG MAR 2005
      IF (IFLAT.EQ.1) Y2R = YSTAGS
C END MAR 2005
      GAPFAY = 0.
      IF (ILINK2.EQ.1.AND.IZSTIF(2).EQ.1) GAPFAY = 0.5*(TX(1) + TY(2))
      IF (ILINK2.EQ.1.AND.IZSTIF(2).EQ.0) GAPFAY = TY(2) -0.5*TX(1)
      IF (IPOSNR.EQ.-1) GAPFAY = -GAPFAY
      IWIMP  = 0
      ZETA   = 90.
C BEG APR 2006 (ILIN now read in as input data)
C     ILIN = 0
C END APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
C     IPLAS = 0
C END DEC 2006
      IRAMP = 0
C
      DO 1390 IRNG = 1,NRINGS
C
      XG = XG + B(2)
C BEG OCT 2004
      IUNIT = 1 + NSTRSB + NRNGSB + IUNSTR*NSTRNG + IUNRNG*(IRNG-1)
C END OCT 2004
C
      DO 1380 ISUBU = 1,IUNRNG
C
      IUNIT = IUNIT + 1
      ECZ = 0.0
      WRITE(IFIL14,'(A)') 'C '
C BEG MAR 2005
      WRITE(IFIL14,'(A,I3,A,I3,A,I1)')
     1'C Begin unit',IUNIT,': ring no.',IRNG,' ring segment ',ISUBU
C23456789012345678901234567890123456789012345678901234567890123456789012
C END MAR 2005
C
      IF (ISUBU.EQ.IFYRNG.AND.IBMRNG.EQ.3.AND.
     1 (IZSTIF(2).EQ.1.OR.TY(2).GT.TX(1))) THEN
         IFNY = 1
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin faying flange of ring no.',IRNG
C BEG MAR 2005
         X1 = XG - 0.5*B2(2)
         X4 = X1 + B2(2)
         IF (IFLAT.EQ.0) THEN
           WRITE(IFIL14,'(A)')
     1   ' 5  0  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
           THETAA = Y1R
           THETAB = Y2R
           WRITE(IFIL14,'(1P,5E13.5,A)')
     1     X1,X4,THETAA,THETAB,RADIUS+GAPFAY,
     1   ' $ m-2 X1,X4,th1,th2,r'
         ELSE
           WRITE(IFIL14,'(A)')
     1   ' 2  4  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
           WRITE(IFIL14,'(1X,4E13.5,A)')
     1     X1,X4,Y1R,Y2R,' $ m-2 X1,X4,Y1,Y2'
           XGFAY = 0.
           YGFAY = 0.
           ZGFAY = GAPFAY
           WRITE(IFIL14,'(1X,F3.1,1X,F3.1,1P,E13.5,A)')
     1     XGFAY,YGFAY,ZGFAY,' $ m-4d XG,YG,ZG'
           XGROTF = 0.
           YGROTF = 0.
           ZGROTF = 0.
           WRITE(IFIL14,'(1X,F3.1,1X,F3.1,1X,F3.1,A)')
     1     XGROTF,YGROTF,ZGROTF,' $ m-4d XGROT,YGROT,ZGROT'
         ENDIF
C END MAR 2005
         IARG = 1
         IF (IRENDS.EQ.1.AND.(IRNG.EQ.1.OR.IRNG.EQ.NRINGS)) IARG = 2
C BEG DEC 2006
         IWALLX = IWALNO(2,2,IARG)*IMULT
C END DEC 2006
         ECZ = 0.
         IF (IZSTIF(2).EQ.1.AND.ILINK2.EQ.0) ECZ = TY(2)/2.
         IF (IZSTIF(2).EQ.0.AND.TY(2).GT.TX(1)) THEN
C BEG FEB 2007
C           IF (ILINK2.EQ.0) ECZ =  (TY(2)-TX(1))/2.
C           IF (ILINK2.EQ.1) ECZ = -(TY(2)-TX(1))/2.
            IF (IREF.EQ.1)  ECZ = (TY(2)-TX(1))/2.
            IF (IREF.EQ.0)  ECZ = TY(2)/2.
            IF (IREF.EQ.-1) ECZ = TY(2)/2. + TX(1)/2.
C END FEB 2007
         ENDIF
         IF (IPOSNR.EQ.-1) ECZ = -ECZ
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1    IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1  ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
      ENDIF
C
      IF (ISUBU.EQ.IWBRNG) THEN
         IFNY = 2
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin web of ring no.',IRNG
C BEG MAR 2005
         IF (IFLAT.EQ.0) WRITE(IFIL14,'(A)')
     1 ' 4  4  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
         IF (IFLAT.EQ.1) WRITE(IFIL14,'(A)')
     1 ' 2  3  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
C END MAR 2005
         XADD = 0.
         IF (IREF.EQ.0) XADD = TX(1)/2.
         IF (IREF.EQ.1.AND.IPOSNR.EQ.-1) XADD = TX(1)
         IF (IREF.EQ.-1.AND.IPOSNR.EQ.1) XADD = TX(1)
         XADD2 = 0.
         IF (IZSTIF(2).EQ.0) XADD2 = TY(2) - TX(1)
         XADD3 = 0.
         IF (IZSTIF(2).EQ.1) XADD3 = TY(2)/2.
         GAPR = XADD + XADD2 + XADD3
C BEG MAR 2005
         X0RING = RADIUS
         IF (IFLAT.EQ.1) X0RING = 0.
         IF (ILINK2.EQ.0) THEN
            IF (IPOSNR.EQ.-1) THEN
               X1 = X0RING - H(2) - GAPR
               X4 = X0RING 
            ELSE
               X1 = X0RING 
               X4 = X0RING + H(2) + GAPR
            ENDIF
         ELSE
            IF (IPOSNR.EQ.-1) THEN
               X1 = X0RING - H(2) - GAPR
               X4 = X0RING - GAPR
            ELSE
               X1 = X0RING + GAPR
               X4 = X0RING + H(2) + GAPR
            ENDIF
C END MAR 2005
         ENDIF
         RADTIP = X4
         IF (IPOSNR.EQ.-1) RADTIP = X1
         HRGEFF = ABS(X4 - X1)
         XWEB = XG
         IF (IZSTIF(2).EQ.1) XWEB = XG + 0.5*B2(2)
C BEG MAR 2005
         IF (IFLAT.EQ.0) THEN
           WRITE(IFIL14,'(1P4E14.6,A,I3)') X1,X4,Y1R,Y2R,
     1   ' $ m-2 X1,X4,Y1,Y2; annulus, ring no.',IRNG
           WRITE(IFIL14,'(1PE13.5,A)') XWEB,
     1  '  0.  0.  $ m-4d XG,YG,ZG corner 1 of ring'
           WRITE(IFIL14,'(A)')
     1  '  0.  0.  0.  $ m-4e XGROT,YGROT,ZGROT rotation of ring'
         ELSE
           WRITE(IFIL14,'(1P4E14.6,A,I3)') X1,X4,Y1R,Y2R,
     1   ' $ m-2 X1,X4,Y1,Y2;rectplate,ring no.',IRNG
           XGC1 = XWEB
           YGC1 = 0.
           ZGC1 = X1
           XGC2 = XWEB
           YGC2 = YSTAGS
           ZGC2 = X1
           XGC3 = XWEB
           YGC3 = YSTAGS
           ZGC3 = X4
           WRITE(IFIL14,'(1P,3E14.6,A)') XGC1,YGC1,ZGC1,
     1   ' $ m-4a XGC1,YGC1,ZGC1 corner 1 of subring'
           WRITE(IFIL14,'(1P,3E14.6,A)') XGC2,YGC2,ZGC2,
     1   ' $ m-4b XGC2,YGC2,ZGC2 corner 2 of subring'
           WRITE(IFIL14,'(1P,3E14.6,A)') XGC3,YGC3,ZGC3,
     1   ' $ m-4c XGC3,YGC3,ZGC3 corner 3 of subring'
         ENDIF
C END MAR 2005
         IARG = 1
         IF (IRENDS.EQ.1.AND.(IRNG.EQ.1.OR.IRNG.EQ.NRINGS)) IARG = 2
C BEG DEC 2006
         IWALLX = IWALNO(3,2,IARG)*IMULT
C END DEC 2006
         ECZ    = 0.
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1   IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1 ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
      ENDIF
C
      IF (ISUBU.EQ.IOTRNG.AND.(IBMRNG.EQ.3.OR.IBMRNG.EQ.4).AND.
     1                    (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) THEN
         IFNY = 3
         WRITE(IFIL14,'(A,I3)')
     1  'C Begin outstanding flange of ring no.',IRNG
C BEG MAR 2005
         IF (ISTIF(2).EQ.1) X1 = XWEB - 0.5*W(2)
         IF (ISTIF(2).EQ.2) X1 = XWEB
         X4 = X1 + W(2)
         IF (IFLAT.EQ.0) THEN
           WRITE(IFIL14,'(A)')
     1   ' 5 0 0 0 0 1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
           THETAA = Y1R
           THETAB = Y2R
           WRITE(IFIL14,'(1P,5E13.5,A)')
     1     X1,X4,THETAA,THETAB,RADTIP,
     1   ' $ m-2 X1,X4,th1,th2,r'
         ELSE
           WRITE(IFIL14,'(A)')
     1   ' 2  4  0  0  0  1 $ m-1 ISHELL,IGLOBE,NROWS,NCOLS,NLAYS,NFABS'
           WRITE(IFIL14,'(1X,1P,4E13.5,A)')
     1     X1,X4,Y1R,Y2R,' $ m-2 X1,X4,Y1,Y2'
           XGFLG = 0.
           YGFLG = 0.
           ZGFLG = RADTIP 
           WRITE(IFIL14,'(1X,F3.1,1X,F3.1,1P,E13.5,A)')
     1     XGFLG,YGFLG,ZGFLG,' $ m-4d XG,YG,ZG'
           XGROTF = 0.
           YGROTF = 0.
           ZGROTF = 0.
           WRITE(IFIL14,'(1X,F3.1,1X,F3.1,1X,F3.1,A)')
     1     XGROTF,YGROTF,ZGROTF,' $ m-4d XGROT,YGROT,ZGROT'
         ENDIF
C END MAR 2005
         IARG = 1
         IF (IRENDS.EQ.1.AND.(IRNG.EQ.1.OR.IRNG.EQ.NRINGS)) IARG = 2
C BEG DEC 2006
         IWALLX = IWALNO(4,2,IARG)*IMULT
C END DEC 2006
         ECZ = 0.
         WRITE(IFIL14,'(2I3,1X,F4.1,1PE11.3,3I2,A)')
     1    IWALLX,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP,
     1  ' $ m-5 IWALL,IWIMP,ZETA,ECZ,ILIN,IPLAS,IRAMP'
      ENDIF
C
      NNX = 0
C BEG FEB 2006
      WRITE(IFIL14,'(3I5,A)') IELMNT,NNX,NNY,
     1' 0  0  0  0 $ n-1 KELT,NNX,NNY,IRREG,IUGRID,INTEG,IPENL'
C END FEB 2006
C BEG APR 2009
      IF (IELMNT.EQ.940) THEN
         WRITE(IFIL14,'(A)') ' 0.    0.   0.  $n-1A PA & PB & drilling'
         WRITE(IFIL14,'(A)') ' 0  2          $n-1B integ.scheme,PA & PB'
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END APR 2009
C BEG FEB 2006
      IF (NNY.EQ.0) GO TO 1440
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for variable nodal point spacing..'
      NDIV = NNY/4
      NMOD = MOD(NNY,4)
C First, do segment lengths...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1430 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
C BEG APR 2006 (increase precision of SEGLY)
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  ', $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(1P4E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
        ENDIF
 1430  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(1P3E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(1P2E13.6,A,I2,A,I2)') (SEGLY(J),J=J0,JMAX),
     1  '  $ n-2 SEGLY(i),seg.lengths ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(1PE13.6,A)') SEGLY(NNY),
     1'  $ n-2 SEGLY(NNY), last seg.length'
C END APR 2006
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C Next, do number of intervals in each segment...
      JMAX = 0
      IF (NDIV.GT.0) THEN
       J0 = -3
       DO 1435 I = 1,NDIV
        J0 = J0 + 4
        JMAX = J0 + 3
        IF (I.LT.NDIV.OR.(I.EQ.NDIV.AND.NMOD.GT.0)) THEN
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  ', $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
        ELSE
           WRITE(IFIL14,'(4I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
        ENDIF
 1435  CONTINUE
      ENDIF
      J0 = JMAX + 1
      JMAX = J0 + NMOD - 1
      IF (NMOD.EQ.3)
     1     WRITE(IFIL14,'(3I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.2)
     1     WRITE(IFIL14,'(2I5,A,I2,A,I2)') (NSEGY(J),J=J0,JMAX),
     1  '  $ n-3 NSEGY(i), segmnt intervls ',J0,'-',JMAX
      IF (NMOD.EQ.1) WRITE(IFIL14,'(I5,A)') NSEGY(NNY),
     1'  $ n-3 NSEGY(NNY), last segment intervals'
C
 1440 CONTINUE
C END FEB 2006
C
      IF (IBMRNG.EQ.2.AND.ISUBU.EQ.IWBRNG) THEN
       IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
C Input for outstanding flange modelled as discrete beam attached to webtip:
C BEG AUG 2006
          JR = NPRNGW(IRNG)
C END AUG 2006
          IF (IPOSNR.EQ.-1) JR = 1
          JR1 = 1
          JR2 = NCOLS(1)
          IARG = 1
          IF (IRENDS.EQ.1.AND.(IRNG.EQ.1.OR.IRNG.EQ.NRINGS)) IARG = 2
          ICROSS = ITABNO(4,2,IARG)
C BEG APR 2006
C BEG DEC 2006 (IPLAS=1 if there is plasticity)
          WRITE(IFIL14,'(I2,A,1P,2E14.6,2I2)') ICROSS,' 90. ',
     1    ECYRNG(3),ECZRNG(3),ILIN,IPLAS,
     1  ' $ o-1a ICROSS,XSI,ECY,ECZ,ILIN,IPLAS'
C END DEC 2006
C END APR 2006
          WRITE(IFIL14,'(3I5,A)') JR,JR1,JR2,' $ o-1b  JR, JR1, JR2'
       ENDIF
      ENDIF
C
C BEG MAR 2007
      WRITE(IFIL14,'(A)') 'C '
      WRITE(IFIL14,'(A)') 'C Input for b. c. and loading'
C
C BEG AUG 2006
      IF (ISYMM.EQ.0) WRITE(IFIL14,'(A)')
     1' 3  3  3  3  0  $ p-1 (IBLN(i), i=1,4), IBOND (b.c.)'
      IF (ISYMM.EQ.1) WRITE(IFIL14,'(A)')
     1' 3  4  3  4  0  $ p-1 (IBLN(i), i=1,4), IBOND (b.c.)'
C END AUG 2006
      WRITE(IFIL14,'(A)') 'C '
C END MAR 2007
C
      NNRNG = 0
C COMPUTE NUMBER OF RING "DRILLING SUPPRESSION" RECORDS...
      IDRILL = 0
      JSUM = 0
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
C END MAR 2006
         IDRILL = 1
         NDATA(1) = NCOLS(1)
C BEG APR 2006
         IF (ICLOSED.EQ.1) NDATA(1) = NCOLS(1) - 1
C END APR 2006
         IDATA(1) = 1
C BEG AUG 2006
         IF (ISUBU.EQ.IFYRNG) JSUM = NPRNGB(IRNG) - 1
C END AUG 2006
         IF (ISUBU.EQ.IWBRNG) THEN
C BEG AUG 2006
            IF (ISTIF(2).EQ.3) JSUM = NPRNGW(IRNG) - 1
            IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)
     1                               JSUM = NPRNGW(IRNG) - 2
         ENDIF
C BEG FEB 2007
C        IF (ISUBU.EQ.IOTRNG) JSUM = NPRNGW(IRNG) - 1
         IF (ISUBU.EQ.IOTRNG) JSUM = NPRNGF(IRNG) - 1
C END FEB 2007
C END AUG 2006
         NNRNG = NNRNG + JSUM
      ENDIF
C BEG NOV 2003
      NNDRIL = NNRNG
C
      DO 1224 I=1,2
      NNRNG = NNDRIL
C     IF (I.EQ.2) NNRNG = 0
C BEG APR 2006
C BEG AUG 2006
C     IF (ICLOSED.EQ.1) THEN
      IF (ICLOSED.EQ.1.OR.ISYMM.EQ.1) THEN
C END AUG 2006
C END APR 2006
         NSYS = 0
C        IF (NNRNG.GT.0) NSYS = 1
         IF (NNRNG.GT.0) NSYS = 2
         IF (I.EQ.1) THEN
            WRITE(IFIL14,'(I3,A)') NSYS,
     1 ' 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
         WRITE(IFIL14,'(A,I4)')'C  Load Set A, Ring No.',IRNG
C BEG MAR 2006
         IF (NNRNG.GT.0) WRITE(IFIL14,'(A,I3,A)')
     1 ' 1 ',NNRNG,'  0 $ q-2 ISYS, NN, USRLD'
C END MAR 2006
         ELSE
         WRITE(IFIL14,'(A,I4)')'C  Load Set B, Ring No.',IRNG
C BEG MAR 2006
         IF (NNRNG.GT.0) WRITE(IFIL14,'(A,I3,A)')
     1 ' 2 ',NNRNG,'  0 $ q-2 ISYS, NN, USRLD'
C END MAR 2006
         ENDIF
C BEG MAR 2006
C two lines omitted; moved up
C END MAR 2006
      ELSE
         IF (I.EQ.1) THEN
            WRITE(IFIL14,'(A)')
     1  ' 2 0 0 0 0 $ q-1 NSYS,NICS,NAMS,NUSS,NHINGE... (loading)'
         ENDIF
         NNRNG = NNRNG + 2
         FMYFAY(I) = 0.0
         IF (IBMRNG.EQ.3.AND.ISUBU.EQ.IFYRNG.AND.ECZ.NE.0.0) THEN
            FMYFAY(I) = ECZ*FNXRNG(1,I)
            IF (FMYFAY(I).NE.0.0) NNRNG = NNRNG + 2
         ENDIF
         IF (IBMRNG.EQ.2.AND.ISUBU.EQ.IWBRNG.AND.
     1    (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2)) NNRNG = NNRNG + 4
         IF (I.EQ.1) THEN
         WRITE(IFIL14,'(A,I4)')'C  Load Set A, Ring No.',IRNG
         WRITE(IFIL14,'(A,I3,A)') ' 1 ',NNRNG,
     1                              '  0 $ q-2 ISYS, NN, USRLD'
         ELSE
         WRITE(IFIL14,'(A,I4)')'C  Load Set B, Ring No.',IRNG
         WRITE(IFIL14,'(A,I3,A)') ' 2 ',NNRNG,
     1                              '  0 $ q-2 ISYS, NN, USRLD'
         ENDIF
         DIV = 1.0
         IF (IRENDS.EQ.1.AND.(IRNG.EQ.1.OR.IRNG.EQ.NRINGS)) DIV = 2.0
         WRITE(IFIL14,'(1PE14.6,A)') -FNXRNG(IFNY,I)/DIV,
     1 ' 3 2 0   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Ny, col 1)'
         WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)') FNXRNG(IFNY,I)/DIV,
     1 ' 3 2 0',NCOLS(1),
     1 ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Ny, col(',NCOLS(1),'))'
C
         IF (FMYFAY(I).NE.0.0) THEN
            WRITE(IFIL14,'(1PE14.6,A)')   FMYFAY(I)/DIV,
     1    ' 3 4 0   1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (My(fay), col 1)'
            WRITE(IFIL14,'(1PE14.6,A,I4,A,I4,A)')
     1      -FMYFAY(I)/DIV,' 3 4 0',NCOLS(1),
     1  ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (My(fay), col(',NCOLS(1),'))'
         ENDIF
C
         IF (IBMRNG.EQ.2.AND.ISUBU.EQ.IWBRNG) THEN
          IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) THEN
C Input for outstanding flange modelled as discrete beam attached to webtip:
            RNGLOD(I) = FNXRNG(3,I)*W(2)
            FMTRNG(I) = ECZRNG(3)*RNGLOD(I)
            DIV = 1.0
            IF (IRENDS.EQ.1.AND.(IRNG.EQ.1.OR.IRNG.EQ.NRINGS)) DIV = 2.0
            WRITE(IFIL14,'(1PE14.6,A,I4,A)') -RNGLOD(I)/DIV,
     1    ' 1 2 ',JR,
     1    ' 1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(rng)*w, col 1)'
            WRITE(IFIL14,'(1PE14.6,A,I4,A)') FMTRNG(I)/DIV,
     1    ' 1 4 ',JR,
     1    ' 1 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(rng), col 1)'
            WRITE(IFIL14,'(1PE14.6,A,2I4,A,I4,A)')
     1      RNGLOD(I)/DIV,' 1 2',JR,NCOLS(1),
     1    ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Nx(rng)*w, col(',
     1                                                  NCOLS(1),'))'
            WRITE(IFIL14,'(1PE14.6,A,2I4,A,I4,A)')
     1      -FMTRNG(I)/DIV,' 1 4',JR,NCOLS(1),
     1    ' 0 0 $ q-3 P,LT,LD,LI,LJ,LAX,NX (Mx(rng), col(',
     1                                                  NCOLS(1),'))'
          ENDIF
         ENDIF
      ENDIF
C
C
C  SUPPRESS THE RING DRILLING FREEDOMS EVERYWHERE EXCEPT AT LINES OF
C  INTERSECTION WITH CYL. SHELL AND OTHER RING SEGMENTS...
C
C     IF (I.EQ.1.AND.IELMNT.EQ.480) THEN
C BEG MAR 2006
      IF (IDRILX.EQ.1.AND.IELMNT.EQ.480) THEN
         WRITE(IFIL14,'(A)') 'C '
         IF (ISUBU.EQ.IFYRNG) THEN
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in ring',IRNG,
     1     ' faying flange'
C END MAR 2006
C BEG AUG 2006
            NROW = NPRNGB(IRNG)
C END AUG 2006
            JSKIP1 = 0
C BEG AUG 2006
            JSKIP2 = NPRNGB(IRNG)/2 + 1
            IF (IZSTIF(2).EQ.1) JSKIP2 = NPRNGB(IRNG)
C END AUG 2006
         ENDIF
         IF (ISUBU.EQ.IWBRNG) THEN
C BEG MAR 2006
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in ring',IRNG,' web'
C END MAR 2006
C BEG AUG 2006
            NROW = NPRNGW(IRNG)
C END AUG 2006
            JSKIP1 = 1
            JSKIP2 = 0
C BEG AUG 2006
            IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) JSKIP2 = NPRNGW(IRNG)
C END AUG 2006
            IF (IPOSNR.EQ.-1) THEN
               JSKIP1 = 0
C BEG AUG 2006
               JSKIP2 = NPRNGW(IRNG)
C END AUG 2006
               IF (ISTIF(2).EQ.1.OR.ISTIF(2).EQ.2) JSKIP1 = 1
            ENDIF
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (ISUBU.EQ.IOTRNG) THEN
C BEG MAR 2006
            WRITE(IFIL14,'(A,I3,A)')
     1     'C Drilling freedoms suppressed in ring',IRNG,
     1     ' outstanding flange'
C END MAR 2006
C BEG AUG 2006
            NROW = NPRNGF(IRNG)
C END AUG 2006
            JSKIP1 = 0
C BEG AUG 2006
            JSKIP2 = NPRNGF(IRNG)/2 + 1
C END AUG 2006
            IF (ISTIF(2).EQ.2) JSKIP2 = 1
         ENDIF
         ICOL = IDATA(1)
         NDAT = NDATA(1)
         DO 1222 J = 1,NROW
            IF (J.EQ.JSKIP1.OR.J.EQ.JSKIP2) GO TO 1222
            WRITE(IFIL14,'(A,2I4,A,I4,A)')
     1' 0. -1 6',J,ICOL,' 0',NDAT,' 0 0 1 $ q-3 P,LT,LD,LI,LJ,LAX,NX..'
 1222    CONTINUE
      ENDIF
 1224 CONTINUE
C  (End of loop over I: I=1=Load Set A; I=2=Load Set B)
C END NOV 2003
C
      WRITE(IFIL14,'(A)') 'C Output control...'
      WRITE(IFIL14,'(A,I3,A)')
     1' 0 0 0 0 0 0 0 0 0 0 0 0 0 $ r-1 output (end unit',IUNIT,')'
 1380 CONTINUE
C  (End of loop over ring segments.)
 1390 CONTINUE
C  (End of loop over number of rings, NRINGS)
 1400 CONTINUE
C
C  CHECK AGAIN FOR EQUILIBRIUM, USING THE EFFECTIVE WEB HEIGHTS,
C  HSTEFF (STRINGER EFFECTIVE HEIGHT) AND HRGEFF (RING EFFECTIVE HEIGHT)..
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG NOV 2003
      DO 1410 I = 1,2
C BEG SEP 2004
      FNXTOT = FNXSKN(I)
      IF (ISMRST.EQ.0) FNXTOT = FNXSKN(I) +
     1  (FNXSTR(1,I)*B2(1) + FNXSTR(2,I)*HSTEFF + FNXSTR(3,I)*W(1))/B(1)
C BEG OCT 2004
      IF (ISTRSB.GT.1)
     1     FNXTOT = FNXTOT + FNXSUB(I)*(ZSTRSB(2) - ZSTRSB(1))/BSUBXM(1)
C END OCT 2004
      FNYTOT = FNYSKN(I)
      IF (ISMRRG.EQ.0) FNYTOT = FNYSKN(I) +
     1  (FNXRNG(1,I)*B2(2) + FNXRNG(2,I)*HRGEFF + FNXRNG(3,I)*W(2))/B(2)
C BEG OCT 2004
      IF (IRNGSB.GT.1)
     1     FNYTOT = FNYTOT + FNYSUB(I)*(ZRNGSB(2) - ZRNGSB(1))/BSUBXM(2)
C END OCT 2004
C END SEP 2004
      IF (I.EQ.1) WRITE(6,'(/,A)') ' EQUILIBRIUM FOR LOAD SET A...'
      IF (I.EQ.2) WRITE(6,'(/,A)') ' EQUILIBRIUM FOR LOAD SET B...'
C BEG SEP 2004
      WRITE(6,'(A,A,1P,E12.4,/,A,/,A,A,/,A)')
     1 ' Check for axial equilibrium',
     1 ' with eff. stringer web height, HSTEFF=',HSTEFF, 
     1' FNX = Applied axial resultant, Nx;   FNXTOT = Computed value',
     1' FNXSTR(1,I),FNXSTR(2,I),FNXSTR(3,I)= Nx in stringer',
     1' fayflange, web, outflange',
     1' FNXSKN(I) = Nx in skin + smeared stringers'
C END SEP 2004
      WRITE(6,'(A,A,/,1P,6E12.4)')
     1'      FNX       FNXTOT    FNXSKN(I)    FNXSTR(1,I)  FNXSTR(2,I)',
     1'  FNXSTR(3,I)',
     1 FNXI(I),FNXTOT,FNXSKN(I),FNXSTR(1,I),FNXSTR(2,I),FNXSTR(3,I)
C BEG OCT 2004
      WRITE(6,'(A,1P,2E12.4)')
     1' Substringer axial Nx, height=',FNXSUB(I),ZSTRSB(2)-ZSTRSB(1)
C END OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG SEP 2004
      WRITE(6,'(A,A,1P,E12.4,/,A,/,A,A,/,A)')
     1 ' Check for hoop equilibrium',
     1 ' with effective ring web height, HRGEFF=',HRGEFF,
     1' FNY = Applied hoop  resultant, Ny;   FNYTOT = Computed value',
     1' FNXRNG(1,I),FNXRNG(2,I),FNXRNG(3,I)= Ny in ring',
     1' fayflange, web, outflange',
     1' FNYSKN(I) = Ny in skin + smeared rings'
C END SEP 2004
      WRITE(6,'(A,A,/,1P,6E12.4)')
     1'      FNY       FNYTOT    FNYSKN(I)    FNXRNG(1,I)  FNXRNG(2,I)',
     1'  FNXRNG(3,I)',
     1 FNYI(I),FNYTOT,FNYSKN(I),FNXRNG(1,I),FNXRNG(2,I),FNXRNG(3,I)
C BEG OCT 2004
      WRITE(6,'(A,1P,2E12.4)')
     1' Subring     axial Nx, height=',FNYSUB(I),ZRNGSB(2)-ZRNGSB(1)
C END OCT 2004
      DIFNX = FNXTOT
      DIFNY = FNYTOT
      IF (FNXI(I).NE.0.0) DIFNX = 100.0*ABS(FNXI(I)-FNXTOT)/ABS(FNXI(I))
      IF (FNYI(I).NE.0.0) DIFNY = 100.0*ABS(FNYI(I)-FNYTOT)/ABS(FNYI(I))
      WRITE(6,'(/,A,1P,E12.4,A)')
     1' Axial equilibrium (Nx added over x-cross section) off by',
     1  DIFNX,' per cent.'
      WRITE(6,'(A,1P,E12.4,A)')
     1' Hoop  equilibrium (Ny added over y-cross section) off by',
     1  DIFNY,' per cent.'
      WRITE(6,'(A)')
     1' =============================================================='
 1410 CONTINUE
C END NOV 2003
C
C BEG OCT 2004
      SCALE = CSKIN(1,1)
C END OCT 2004
      IF (IBC12.EQ.2) THEN
C ADD one finite element unit for application of uniform torque
C at x = 0.
       WRITE(IFIL14,'(A)') 'C '
       WRITE(IFIL14,'(A)')
     1'C    A finite element unit is needed for the torque at x=0'
       WRITE(IFIL14,'(A)')
     1' 1 0 0 0 0. 0. 0. 111 111 $ s-1 Point of torque application'
       WRITE(IFIL14,'(A)')
     1' 1 0 0 0 0 0 1 $ u-1 One "least squares" loading case'
       WRITE(IFIL14,'(A)')
     1' 1 1           $ u-2 torque in Load Set A; 1 record needed.'
C BEG APR 2006
       IF (ICLOSED.EQ.1) THEN
C END APR 2006
          WRITE(IFIL14,'(A)')
     1   'C    The torque at x=0 is given by TORQUE = Nxy*2*pi*r**2'
          TORQUE = FNXY*2.*PI*ABS(R)**2
       ELSE
          WRITE(IFIL14,'(A)')
     1   'C    The torque at x=0 is given by TORQUE = Nxy*YSTAGS*r'
          TORQUE = FNXY*YSTAGS*ABS(R)
       ENDIF
       WRITE(IFIL14,'(1P,E14.6,A)') TORQUE,
     1' 1  4  1 $ u-3 P,LT.LD.LI; torque at userpoint 1 in ru sense'
       NUNIT1 = NUNITS + 1
       WRITE(IFIL14,'(A,I4,A)')' 1',NUNIT1,
     1' 1 0 1. $ u-8a NSQR,IUNIT,IROW,ICOL,SCALE. torque location'
       WRITE(IFIL14,'(A)')
     1' 1.  1 1 0 $ u-8b P,LU,LR.LC (wgt.,slave unit,row,col.)'
       WRITE(IFIL14,'(A)')
     1' 1 0 0 0 0 1 $ v-1 print displacement, nodal reaction'
      ENDIF
C     End of (IBC12.EQ.2) condition
C
C BEG OCT 2004
C NEXT, DO FASTENER ELEMENT UNITS, SUBSTRINGERS FIRST...
      IF (LNKSB1.EQ.1.AND.ISTRSB.EQ.3.AND.NSTRSB.GT.0) THEN
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A,I3,A)')
     1     'C  fasteners for',NSTRSB,' substringers...'
C23456789012345678901234567890123456789012345678901234567890123456789012
            IUTOTL = 1 + NSTSBX + NRGSBX + IUNSTR*NSTRNG + IUNRNG*NRINGS
            IF (IBC12.EQ.2) IUTOTL = IUTOTL + 1
            DO 1072 I = 1,NSTRSB
               WRITE(IFIL14,'(A,I3,A,I3,A)')
     1        'C  fastener for substringer number',I,
     1        ', (fastener f.e. unit: Unit No.',IUTOTL + I,') ...'
               IUNIT = 1 + I
               ISUNIT = 1
               ICOL1 = ICSTSB(I)
               WRITE(IFIL14,'(A,I4,A,I4,A,I4,A,I3)')
     1       ' 1',ISUNIT,' 1',ICOL1,
     1       ' 0. 0. 0. 111 111 0',NROWS(1),' $s-1 skn-lnk,substr.',I
               WRITE(IFIL14,'(A)')
     1' 1  0  1  0  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
               ICOL2 = 1
               IF (GAPSB1.LT.0.) ICOL2 = NCOLS(IUNIT)
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRITE(IFIL14,'(2I4,A,I3,A,I4,A,I2,A)') NROWS(1)+1,IUNIT,
     1       ' 1',ICOL2,'  0. 0. 0. 111 111 0',NROWS(1),
     1       ' $ s-1 substr.',I,'-link'
               WRITE(IFIL14,'(A)')
     1' 1  0  1  0  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
               WRITE(IFIL14,'(A,I4,A,I3)') ' 1',NROWS(1)+1,
     1       ' 2 130 1 0 0 0 $t-1 N1,N2,NR,KELT,NDEFS,substr.',I
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
               WRITE(IFIL14,'(A,I4,A,I4,A,I3)')
     1       ' 2',NROWS(1)+2,' 1 130',NROWS(1)-1,
     1       ' 1 1 0 $t-1 N1,N2,NR,KELT,NDEFS,substr.',I
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
               WRITE(IFIL14,'(A,I3)')
     1  ' 0  $ u-1 NSYS (no loading) fastener, skin-substringer ',I
               WRITE(IFIL14,'(A,I3)')
     1' 0 0 0 0 0 0 0 0 0 $ v-1 output control, fastener, substr. ',I
 1072       CONTINUE
      ENDIF
C     End of (LNKSB1.EQ.1.AND.ISTRSB.EQ.3.AND.NSTRSB.GT.0) condition
C END OCT 2004
C
C NEXT, MAJOR STRINGERS...
      IF (ILINK1.EQ.1.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5) THEN
         IF (NSTRNG.GT.0.AND.IBMSTR.NE.1) THEN
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A,I3,A)')
     1     'C  fasteners for',NSTRNG,' stringers...'
C23456789012345678901234567890123456789012345678901234567890123456789012
            IUPLUS = 0
            IF (LNKSB1.EQ.1) IUPLUS = NSTSBX
            IUTOTL = 1 + NSTSBX + NRGSBX +IUNSTR*NSTRNG + IUNRNG*NRINGS
     1                 + IUPLUS
            IF (IBC12.EQ.2) IUTOTL = IUTOTL + 1
            DO 1070 I = 1,NSTRNG
               WRITE(IFIL14,'(A,I3,A,I3,A)')
     1        'C  fastener for stringer number',I,
     1        ', (fastener f.e. unit: Unit No.',IUTOTL + I,') ...'
               IUNIT = 1 + NSTSBX + IUNSTR*(I-1) + 1
C              IF (IBMSTR.EQ.3.AND.IZSTIF(1).EQ.0.AND.TX(2).GT.TX(1))
C    1         IUNIT = IUNIT + 1
               ISUNIT = 1
               ICOL1 = ICOLST(I)
               WRITE(IFIL14,'(A,I4,A,I4,A,I4,A,I3)')
     1       ' 1',ISUNIT,' 1',ICOL1,
     1       ' 0. 0. 0. 111 111 0',NROWS(1),' $ s-1 skin-link,str.',I
               WRITE(IFIL14,'(A)')
     1' 1  0  1  0  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
               IF (IBMSTR.EQ.2.OR.IBMSTR.EQ.4.OR.
     1            (IBMSTR.EQ.3.AND.TX(2).EQ.TX(1))) THEN
                  ICOL2 = 1
                  IF (R.LT.0.) ICOL2 = NCOLS(IUNIT)
               ELSE
                  ICOL2 = NCOLS(IUNIT)/2 + 1
               ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRITE(IFIL14,'(2I4,A,I3,A,I4,A,I2,A)') NROWS(1)+1,IUNIT,
     1       ' 1',ICOL2,'  0. 0. 0. 111 111 0',NROWS(1),
     1       ' $ s-1 str.',I,'-link'
               WRITE(IFIL14,'(A)')
     1' 1  0  1  0  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
               WRITE(IFIL14,'(A,I4,A,I3)') ' 1',NROWS(1)+1,
     1       ' 2 130 1 0 0 0 $ t-1 N1,N2,NR,KELT,NDEFS, str.',I
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
               WRITE(IFIL14,'(A,I4,A,I4,A,I3)')
     1       ' 2',NROWS(1)+2,' 1 130',NROWS(1)-1,
     1       ' 1 1 0 $ t-1 N1,N2,NR,KELT,NDEFS, str.',I
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
               WRITE(IFIL14,'(A,I3)')
     1  ' 0  $ u-1 NSYS (no loading) fastener for skin-stringer no.',I
               WRITE(IFIL14,'(A,I3)')
     1' 0 0 0 0 0 0 0 0 0 $ v-1 output control, fastener, str. no.',I
 1070       CONTINUE
         ENDIF
C        End of (NSTRNG.GT.0.AND.IBMSTR.NE.1) condition
      ENDIF
C     End of (ILINK1.EQ.1.AND.IBMSTR.NE.1.AND.IBMSTR.NE.5) condition
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C BEG OCT 2004
C NEXT, LINKING FOR SUBRINGS...
      IF (LNKSB2.EQ.1.AND.IRNGSB.EQ.3.AND.NRNGSB.GT.0) THEN
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A,I3,A)')
     1     'C  fasteners for',NRNGSB,' subrings...'
            IUPLUS = 0
            IF (ILINK1.EQ.1) IUPLUS = NSTRNG
            IF (LNKSB1.EQ.1) IUPLUS = IUPLUS + NSTSBX
            IUTOTL = 1 + NSTSBX + NRGSBX + IUNSTR*NSTRNG + IUNRNG*NRINGS
     1                 + IUPLUS
            IF (IBC12.EQ.2) IUTOTL = IUTOTL + 1
            DO 1074 I = 1,NRNGSB
               WRITE(IFIL14,'(A,I3,A,I3,A)')
     1        'C  fastener for  subring   number',I,
     1        ', (Fastener f.e. unit: Unit No.',IUTOTL + I,') ...'
               ISTRGR = 0
               IF (IBMSTR.NE.1.AND.IBMSTR.NE.5) ISTRGR = IUNSTR*NSTRNG
               IF (ISTRSB.EQ.3.AND.NSTRSB.GT.0) ISTRGR = ISTRGR + NSTSBX
               IUNIT = 1 + ISTRGR + I
               NLINKS = NCOLS(1) - 1
C BEG APR 2006
               IF (ICLOSED.EQ.0) NLINKS = NCOLS(1)
C END APR 2006
               ISUNIT = 1
               IROW1 = IRRGSB(I)
               WRITE(IFIL14,'(A,2I4,A,I4,A,I3)') ' 1',ISUNIT,IROW1,
     1       ' 1 0. 0. 0. 111 111 0',NLINKS,' $s-1 skn-lnk,subrng.',I
               WRITE(IFIL14,'(A)')
     1' 1  0  0  1  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
C23456789012345678901234567890123456789012345678901234567890123456789012
               IROW2 = 1
               IF (GAPSB2.LT.0.) IROW2 = NROWS(IUNIT)
               WRITE(IFIL14,'(2I4,I3,A,I4,A,I2,A)')
     1         NLINKS+1,IUNIT,IROW2,
     1       ' 1 0. 0. 0. 111 111 0',NLINKS,' $s-1 subrng.',I,'-link'
               WRITE(IFIL14,'(A)')
     1' 1  0  0  1  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
               WRITE(IFIL14,'(A,I4,A,I3)') ' 1',NLINKS+1,
     1       ' 2 130 1 0 0 0 $ t-1 N1,N2,NR,KELT,NDEFS,subrng.',I
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRITE(IFIL14,'(A,I4,A,I4,A,I3)')
     1       ' 2',NLINKS+2,' 1 130',NLINKS-1,
     1       ' 1 1 0 $t-1 N1,N2,NR,KELT,NDEFS.subrng.',I
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
               WRITE(IFIL14,'(A,I3)')
     1      ' 0  $ u-1 NSYS (no loading) fastener for skin-subring ',I
               WRITE(IFIL14,'(A,I3)')
     1' 0 0 0 0 0 0 0 0 0 $ v-1 output control, fastener, subrng. ',I
 1074       CONTINUE
      ENDIF
C     End of (LNKSB2.EQ.1.AND.IRNGSB.EQ.3.AND.NRNGSB.GT.0) condition
C END OCT 2004
C
C NEXT, LINKING FOR RINGS...
      IF (ILINK2.EQ.1.AND.IBMRNG.NE.1.AND.IBMRNG.NE.5) THEN
         IF (NRINGS.GT.0.AND.IBMRNG.NE.1) THEN
            WRITE(IFIL14,'(A)') 'C '
            WRITE(IFIL14,'(A,I3,A)')
     1     'C  fasteners for',NRINGS,' rings...'
            IUPLUS = 0
            IF (ILINK1.EQ.1) IUPLUS = NSTRNG
            IF (ILNKSB1.EQ.1) IUPLUS = IUPLUS + NSTSBX
            IF (ILNKSB2.EQ.1) IUPLUS = IUPLUS + NRGSBX
C23456789012345678901234567890123456789012345678901234567890123456789012
            IUTOTL = 1 + NSTSBX + NRGSBX + IUNSTR*NSTRNG + IUNRNG*NRINGS
     1                 + IUPLUS
            IF (IBC12.EQ.2) IUTOTL = IUTOTL + 1
            DO 1080 I = 1,NRINGS
               WRITE(IFIL14,'(A,I3,A,I3,A)')
     1        'C  fastener for  ring   number',I,
     1        ', (Fastener f.e. unit: Unit No.',IUTOTL + I,') ...'
               ISTRGR = 0
               IF (IBMSTR.NE.1.AND.IBMSTR.NE.5) ISTRGR = IUNSTR*NSTRNG
               IF (ISTRSB.EQ.3.AND.NSTRSB.GT.0) ISTRGR = ISTRGR + NSTSBX
               IUNIT = 1 + ISTRGR + NRGSBX + IUNRNG*(I-1) + 1
               NLINKS = NCOLS(1) - 1
C BEG APR 2006
               IF (ICLOSED.EQ.0) NLINKS = NCOLS(1)
C END APR 2006
               ISUNIT = 1
               IROW1 = IROWRG(I)
               WRITE(IFIL14,'(A,2I4,A,I4,A,I3)') ' 1',ISUNIT,IROW1,
     1       ' 1  0. 0. 0. 111 111 0',NLINKS,' $ s-1 skin-link,rng.',I
               WRITE(IFIL14,'(A)')
     1' 1  0  0  1  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
C23456789012345678901234567890123456789012345678901234567890123456789012
               IF (IBMRNG.EQ.2.OR.IBMRNG.EQ.4.OR.
     1            (IBMRNG.EQ.3.AND.TY(2).EQ.TX(1))) THEN
                  IROW2 = 1
                  IF (IPOSNR.EQ.-1) IROW2 = NROWS(IUNIT)
               ELSE
                  IROW2 = NROWS(IUNIT)/2 + 1
               ENDIF
               WRITE(IFIL14,'(2I4,I3,A,I4,A,I2,A)')
     1         NLINKS+1,IUNIT,IROW2,
     1       ' 1 0. 0. 0. 111 111 0',NLINKS,' $ s-1 rng.',I,'-link'
               WRITE(IFIL14,'(A)')
     1' 1  0  0  1  0.  0.  0. $ s-1a JUPT,JUS,JRS..user pt. increment'
               WRITE(IFIL14,'(A,I4,A,I3)') ' 1',NLINKS+1,
     1       ' 2 130 1 0 0 0 $ t-1 N1,N2,NR,KELT,NDEFS, rng.',I
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
C23456789012345678901234567890123456789012345678901234567890123456789012
               WRITE(IFIL14,'(A,I4,A,I4,A,I3)')
     1       ' 2',NLINKS+2,' 1 130',NLINKS-1,
     1       ' 1 1 0 $ t-1 N1,N2,NR,KELT,NDEFS. rng.',I
               WRITE(IFIL14,'(A)')
     1' 1 1 1 2 1 1  2 2 2 2 2 2 $ t-1c 6 mount table id; 6 breakage id'
               WRITE(IFIL14,'(A,I3)')
     1      ' 0  $ u-1 NSYS (no loading) fastener for skin-ring no.',I
               WRITE(IFIL14,'(A,I3)')
     1' 0 0 0 0 0 0 0 0 0 $ v-1 output control, fastener, rng. no.',I
 1080       CONTINUE
         ENDIF
      ENDIF
C     End of (ILINK2.EQ.1.AND.IBMRNG.NE.1.AND.IBMRNG.NE.5) condition
C23456789012345678901234567890123456789012345678901234567890123456789012
      END
