C=DECK      MAIN
C
C  THIS PROGRAM DRIVES THE BOSOR4-TYPE ROUTINES THAT SET UP THE
C  STIFFNESS, LOAD-GEOMETRIC, MASS MATRICES FOR THE DISCRETIZED MODEL
C  AND SOLVE THE EIGENVALUE PROBLEM.
C
      PROGRAM MAIN
C BEG UNIX
#if hp700
$hp9000_800 intrinsics
#endif
C END UNIX
C
      COMMON/   /W(60000)
C BEG FEB 2007
      COMMON/NMFIXD/NUSER(5),MUSER(5),NOSRCH(5)
C END FEB 2007
C BEG JAN 2007
      COMMON/FSALTX/FSALTN
C END JAN 2007
C BEG OCT 2006
      COMMON/ICONSX/ICONSV
C END OCT 2006
      COMMON/IWEAKX/IWEAK
C BEG FEB 2009
      COMMON/GRADMZ/GRADMX(30),CONMXJ(30)
      COMMON/ISCAPZ/ISCAPX(30),ICNMAX(30)
C END FEB 2009
C BEG DEC 2004
      COMMON/EIGSLZ/SLPRAT(30,5,2),EHILOW(30,5,2)
      COMMON/OBJBSX/OBJMIN
      COMMON/IOBJAX/IOBJAL
C END DEC 2004
C BEG JUN 2004
C     DIMENSION IW(1)
C     EQUIVALENCE (W(1),IW(1))
C END JUN 2004
C BEG JULY 1998
      COMMON/IALTSX/IALTSN,IALTSV
C END JULY 1998
      COMMON/OPTPRT/IPRTOP
      COMMON/FSAFEB/FSAFEP(99)
      COMMON/FSAFB2/FSAFP2(99)
      COMMON/CPLT12/CPLOT1,CPLOT2
      COMMON/FSAFWD/PCWRD1(99),PCWRD2(99)
      CHARACTER*80 PCWRD1,PCWRD2
      COMMON/AXWAVE/FNPB,MWAVE
      COMMON/ESHORT/EXAVE,EXAVEA,TXALOW
      COMMON/THICK/TX(5),TY(5)
      COMMON/THICKM/TXMIN(5),TXMAX(5),TYMIN(5),TYMAX(5)
      COMMON/FREEDG/IFREE
      COMMON/OUTP/NPRINT
      COMMON/INSTAB/INDIC
      COMMON/TOTPTS/M3
      COMMON/TOTPTG/M3G
      COMMON/ILOCGG/ILOCG(600),IWG(210),DSG(200)
C BEG DEC 1998
      COMMON/SAVLOD/FNXS,FNYS,FNXYS,FNX0S,FNY0S,FNXY0S
      COMMON/SAVIAB/IABPS,IABTS
C END DEC 1998
C BEG OCT 1998
      COMMON/ILOCGR/ILOCR(600),IWR(210),DSR(200)
C END OCT 1998
      COMMON/BUCKN/N0B,NMINB,NMAXB,INCRB
      COMMON/BUCKG/N0BG,NMINBG,NMAXBG,INCRBG
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/EIGNG/NVECG,EGVG(50),AXBG
      COMMON/IDEIG/IDMODE(500),NVECTL,EIGENW(500)
      COMMON/IDEIGG/IDMODG(500),NVECTG,EIGENG(500)
      COMMON/VCTRSB/NVECRL(50)
      COMMON/VCTRSG/NVECRG(50)
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT
      COMMON/ADDRSS/IADDV(50),IADDP(99),IADDA(50),IADDC(99),IADDD(50)
      DIMENSION CONSTR(99),WORDB(99),IADDB(99),CSTAR(99),CONPRT(99)
C BEG JAN 1995
      DIMENSION WORDB0(99),WORDBP(99),CSTARP(99)
C END JAN 1995
C BEG FEB 1996
      COMMON/IGOTOX/ILOADS,ICASES,IGOTO2(5,2),IABP(5),IABT(5)
      COMMON/FNXNX0/FNXX(5),FNYY(5),FNXXYY(5),
     1              FNX00(5),FNY00(5),FNXY00(5)
      DIMENSION CONALL(99),IPOINC(1500),EIGDIS(10,5),EALLST(5,10)
      DIMENSION EIGBOW(5),IDCRAC(5),ILOW(5,2),IWIDE(5),ECC(5)
C END FEB 1996
C BEG DEC 2001
      DIMENSION IICURV(5),IIKOIT(5)
C END DEC 2001
C BEG DEC 1996
      COMMON/ILWJJJ/ILOWJJ
C END DEC 1996
C BEG APR 1997
C BEG JUN 2004
C     COMMON/WGTSTF/WGTSTR,WGTRNG,WGTSPC
      COMMON/WGTSTF/WGTSTR,WGTRNG,WGTSUB,WGTSKN,WGTSPC
C END JUN 2004
      COMMON/IMANYX/IMANY
C END APR 1997
C BEG AUG 1992
      DIMENSION EXAVGA(5),IFREEX(5),IWCON(5),WPGMAX(5),IBPREL(5)
      COMMON/ROTALW/CHIALW,PHIMIN
      COMMON/LWRUPR/VARLOW(50),VARHI(50),CLINK(50,5),VLINK(50),VBV(99)
      COMMON/NUMPAR/NPAR,NVARB,NALLOW,NNNCON,NDEC,NLINK,NESCAP,ITYPE
      COMMON/WORDSX/VARLEG(50),MARLEG(99),OBJLEG
      DIMENSION VARDEC(50),IWARNV(50,5,2),IWRNVV(50)
C BEG MAY 2004
      CHARACTER*16 VARLEG,VARDEC
      CHARACTER*12 MARLEG,OBJLEG
C END MAY 2004
C BEG JUN 2004
      COMMON/ILOCIW/ILOC(1200),IW(300)
      COMMON/DELTAS/DS(200)
C END JUN 2004
      COMMON/PARAMS/PAR(99),VAR(50),ALLOW(50),CONST(99),DEC(50),ESC(50)
      COMMON/OPTVAR/IDEC(50),ILV(50),IDLINK(50,5),ISCAPE(50),JTERMS(50)
      COMMON/PARAM2/CPWR(50,5),CLINK0(50)
      COMMON/ALLCIJ/CX(180),CY(180),CS(36)
      COMMON/LOADS/FNX,FNY,FNXY,RESULT(3,5,2)
      COMMON/LOADSG/FXBEG,FXEND,FYBEG,FYEND,FXYBEG,FXYEND
      COMMON/LOADS2/FNX0,FNY0,FNXY0,RESFIX(3,5,2)
      COMMON/GNNSTB/EIGGEN,EIGLOC,EIGTST,FBOUND,EIGTHM
      COMMON/ECHECK/ICHECK
      COMMON/PSTSTF/EKOISV,FMOD0,ALMOD0,FMMOD0,FNMOD0,FWAVE0
      COMMON/PSTST2/MEIGSV,ICONVS,IIIA
      COMMON/MODES2/MSKIN,NSKIN,CCCLLL,CCCSLP
      COMMON/ZPARTS/ZPARTX(5),ZPARTY(5)
      COMMON/PRESUR/P
C BEG MAR 2005
C     DIMENSION VLB(50),VUB(50),X(50),Y(40),A(41,60),XSAVE(40),DOBJ(40)
      DIMENSION VLB(50),VUB(50),X(50),Y(40),A(41,150),XSAVE(40),DOBJ(40)
C END MAR 2005
      COMMON/ISKNRD/IEFFSK
      COMMON/PRESR2/PKEEP
C BEG OCT 1998
      DIMENSION XBEFOR(40)
C END OCT 1998
      DIMENSION CSINV(6,6),ETHERM(6),EPSLOD(6)
      DIMENSION THERMX(6,5),THERMY(6,5),THERMS(6)
      DIMENSION ETHRMX(6,5),ETHRMY(6,5),ETHRMS(6)
      DIMENSION ISUB(100)
      COMMON/GEOM2/B(2),B2(2),H(2),WW(2),WW2(2)
      COMMON/GEOM3/ISTIF(2),NLAYER(4,2),NSEG(2),INTEXT(2)
      COMMON/LAYER/MATL(90),LTYPE(99,5,2),T(90),ANGLE(90)
      COMMON/WORDS/WORDP(99),WORDV(50),WORDA(50),WORDC(99),WORDD(50)
      COMMON/WORDS2/WORDL(50),WORDE(50)
      COMMON/MAXWAV/NMAX
      COMMON/MATERT/ALPHA1(20),ALPHA2(20),CURETP(20),ICOCUR(2)
      COMMON/MATER4/TAPE(20),TMINUM(20),FAILSC(100)
      COMMON/MATRN2/GTX(2,5),GTY(2,5),GTS(2),TEFF(2)
      CHARACTER*80 WORDP,WORDV,WORDA,WORDC,WORDD,WORDL,WORDE
      CHARACTER*80 WORDB,WORDOB
C BEG JAN 1995
      CHARACTER*80 WORDB0,WORDBP
C END JAN 1995
      COMMON/INDAT/INFILE
      COMMON/UNITNO/IU
      COMMON/IDHIGH/IDMAX
      COMMON/IDHIGG/IDMAXG
      COMMON/IBLKMG/IBLCKM,IBLCKG
      COMMON/IBLCK/IBLOCK
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE    
      COMMON/GEOM5/RAD2,CURV2
      COMMON/LOCDEF/SLOPE(5,2),FLATA(5,2),FAMPLT(5,2),USEIT(5,2)
      CHARACTER*65 TITLE
      CHARACTER*1 CILOAD,CICASE
      COMMON/ISTL2/ISTFL2
      COMMON/LOWWAV/ILOWVE(5)
      COMMON/JHYDRO/IHYDRO
      COMMON/GENPRE/FBPRE,PRELEN,FMISC(28)
C BEG AUG 1994
C BEG JUN 1996
      COMMON/ISANDR/ISAND,ISANDS
C END JUN 1996
C END AUG 1994
C BEG NOV 1994
C BEG AUG 1995
C BEG OCT 1998
      COMMON/NWXNWT/NSAVEX,NSAVET,ITIPLX,ITIPLS,NSAVEZ,ITIPLZ,
     1 NSAVEQ,ITIPLQ,ITIPL5,ITIPL6,ITIPL7,IWEBL5,IWEBL6,IWEBL7,
     1 MINTRG,NINTRG,ILOWER,IHIGHR
C END OCT 1998
      DIMENSION MAXNSX(5,2),MAXNST(5,2),MAXNSZ(5,2)
C END AUG 1995
C END NOV 1994
C BEG FEB 1995
      COMMON/IDEFAU/IDEFLT,IDDATA,IINPUT,IITYPE
C END FEB 1995
C BEG MAR 1995
      COMMON/MCASEX/MCASE(5)
C END MAR 1995
C BEG OCT 1998
      DIMENSION IQUIT(5),NSERCH(5)
C END OCT 1998
C BEG FEB 1996
      DIMENSION WIMPG(5),WIMPG1(5),WIMPG2(5)
      COMMON/PRESSX/PRESS(5)
      DIMENSION NWAVES(5,2),NMAXX(5)
C BEG JUN 2004
C     DIMENSION IQSAVE(5),IQUICK(5)
      DIMENSION IQUICK(5)
      COMMON/IQSAVX/IQSAVE(5),NLOADS
C END JUN 2004
C END FEB 1996
      DIMENSION FNXBEG(5),FNXEND(5),FNYBEG(5),FNYEND(5)
      DIMENSION FNXYBG(5),FNXYEN(5),IGENRL(5),KHYDRO(5)
      DIMENSION FSPAN(5),FSGEN(5),FSLOC(5),CRACK(99,5,2)
      DIMENSION FSSTR(5),WIMPL(5),IREDUC(5),WLOC(2)
      CHARACTER*4 ANSWER,ANSOUT
C BEG JUNE 1995
      CHARACTER*4 CHARAC
C END JUNE 1995
C     REAL LENMOD
C BEG VMS
C     CHARACTER*12 CASE
C     CHARACTER*16 CASE2,CASE3,CASE4,CASE5,CASE6,CASE7,CASE8,CASE9
C     CHARACTER*16 CASE13
C     CHARACTER*15 CASEW
C END VMS
C BEG UNIX
      CHARACTER*28 CASE
      CHARACTER*32 CASE2,CASE3,CASE4,CASE5,CASE6,CASE7,CASE8,CASE9
      CHARACTER*28 CASE13
      CHARACTER*32 CASEW
      CHARACTER*72 ARGSTR
C END UNIX
C BEG MAR 1996
      DIMENSION FPLOAD(5),FMLOAD(5),FWLOAD(5),FNSQS(5)
      COMMON/GEOM6/IFAY(2),ITRTOT,IRESET,NLOADX,NSTEPX,WMAX,NCROSS,
     1       NOPLOT,KMAX,ILAYPL,XMAX,XMIN,YMAX,YMIN,N3DPLT,NOBJ,NSTRNS,
     1       NPLTST,NABSCI,IDIAG,ITRALL,IFAYT(2),IBEAM,IMISCL(5)
C END MAR 1996
      COMMON/PLTVAR/IPV(50),ICV(99),NPLT,NMARGN,ITER1,NTIT(5,2)
      COMMON/FMAXPP/MAXCON
      COMMON/WORDS5/PCWORD(99)
      COMMON/PLOTCD/NCAR,IADDCC(99),CPLOT(99)
      CHARACTER*80 PCWORD
      REAL MAXCON
      DIMENSION MX(5),MY(5),MX0(5),MY0(5)
      REAL MX,MY,MX0,MY0
C BEG NOV 2003 (change common block name from NVAR to NVARXX to avoid conflict.)
      COMMON/NVARXX/PBNX(23,8),PBNY(23,8),PBNXY(23,8),MAXSEG,KOITT
C END NOV 2003
      COMMON/PPEXY/PEX(23,8,2),PEY(23,8,2),PEXY(23,8,2)
      COMMON/PPE45/PEX45(23,8,2),PEY45(23,8,2),PEXY45(23,8,2)
      COMMON/PMD/PW(23,8),PWD(23,8),PWDD(23,8),PU(23,8),PV(23,8),
     1 PVP(23,8)
      COMMON/ECCEN/ZREF(23,8)
      COMMON/POSTB2/PBW(23,8),PBU(23,8),PBV(23,8)
      COMMON/POSTB1/PBSLOP,PBMWAV,PBA,PBF,PBEPS(3),PBCTAN(4),PBNSKN(3)
C BEG JAN 1996
      COMMON/POSTB4/PBCTN2(6)
C END JAN 1996
      COMMON/PSTB1A/PBEIGK,PBEIGB
      COMMON/POSTB3/PBBOW(20)
      COMMON/SEGS/NSEGB5,M2222,I5(95),I2222,I2222G
      COMMON/KRESUL/RESULK(3,5,2)
      DIMENSION TEMP(4,2,5),FMULT(20,10,4,2),ITEMP(5),IMTEMP(5)
      DIMENSION TTEMP(4,2)
      COMMON/EPSRTP/EPSRUT,EPSTIP
      DIMENSION FSBSTR(5),IPOPX(5),ILAMB2(5,2,2),ILAM34(2,2)
      COMMON/TMATL1/MAXMAT,IPMATL(10)
      COMMON/TMATL2/PARMAT(20,10),TEMPJ(10,20,10),FTEMPJ(10,20,10)
      COMMON/TMATL3/WRDMAT(20,10)
      CHARACTER*80 WRDMAT
      CHARACTER*15 WLOC
      COMMON/BYLOCP/IFREEY
      DIMENSION IFREEL(5)
      COMMON/GEOMN3/IBVAR,VARPLT(30)
      COMMON/GEOMN4/ICURV,FNXPLT(30),FNYPLT(30),FNXYPL(30),
     1              FNX0P,FNY0P,FNXY0P
      COMMON/TEEBUC/ITIPL3,ICWEB3,IPOST(5,2),NPP(5,2),IBUCPP
      COMMON/KOICOF/FAMPSV(5,2),ALSAV(5,2),FMSAV(5,2),FNSAV(5,2)
      COMMON/INTSTP/ISTEP,NSTEPU
      COMMON/ISOGR/ISOGRD,ISOANG
      COMMON/WORIGL/WIMPL0(5),WIMPP(5)
C BEG NOV 1995
      COMMON/JJLAST/JLAST,IHIAXL,IFIXMW
C END NOV 1995
C BEG JAN 1996
C BEG DEC 1998
C BEG JUN 2004
      COMMON/ISKIPY/ISKIPX(5,2),ISKIPZ(30,5,2),ISKIPW(30,5,2),
     1              ISKIPV(30,5,2)
C END JUN 2004
C END DEC 1998
C END JAN 1996
      DIMENSION ISKIP(5,2),CONSML(5,2),WORMIN(5,2),NCONS1(5,2)
      DIMENSION NUMCON(5,2),WORDB1(99),CONST1(99)
      DIMENSION WORDB2(99,5,2),CONST2(99,5,2)
      CHARACTER*80 WORMIN,WORDB1,WORDB2
      COMMON/BLABUC/ITIPL4,IPOSTL(5,2),NPPL(5,2)
      COMMON/NCASEP/NCASEX(5)
C BEG MAR 1996
C     COMMON/GEOM1/AXIALX,CIRCX,RX
      COMMON/GEOM1/AXIALX,CIRC,RX
C END MAR 1996
      COMMON/EDGCON/PEDG
      COMMON/ATRNGS/ATRING
C BEG JULY 1995
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/DELIM3/GRDCUR(50,5,2),GRDSIG(5,2),DELCRS(2),GRDMAX(2)
      COMMON/NUMVRX/NUMVAR
      COMMON/IBIGAX/IBIGA(2)
C END JULY 1995
      LOGICAL ANSL1,NLOGC1,NLOGC2,ATRING,PEDG,ATRNG
C BEG UNIX
      integer lastch
      logical exists
      common/caseblock/case
#if hp700
C     call getarg(2, case)
      call getarg(1, case)
#else
      call getarg(1, case)
#endif
C END UNIX
C BEG VMS
C     IUNAME = 12
C     OPEN(UNIT=12,STATUS='OLD')
C     CALL CASNAM(IUNAME,CASE)
C     CLOSE(IUNAME)
C END VMS
      I=INDEX(CASE,' ')
      IF(I.NE.0) THEN
         CASE2=CASE(:I-1)//'.OPM'
         CASE3=CASE(:I-1)//'.CBL'
         CASE4=CASE(:I-1)//'.003'
         CASE5=CASE(:I-1)//'.OPT'
         CASE6=CASE(:I-1)//'.OUT'
         CASE7=CASE(:I-1)//'.BL1'
         CASE8=CASE(:I-1)//'.BL2'
         CASE9=CASE(:I-1)//'.000'
      ELSE
         CASE2=CASE//'.OPM'
         CASE3=CASE//'.CBL'
         CASE4=CASE//'.003'
         CASE5=CASE//'.OPT'
         CASE6=CASE//'.OUT'
         CASE7=CASE//'.BL1'
         CASE8=CASE//'.BL2'
         CASE9=CASE//'.000'
      ENDIF
      NLET = I - 1
      IF (I.EQ.0) NLET = 12
C**********************************************************************
C  BEGIN INITIALIZATION AN READ INPUT FROM NAME.OPT FILE
C**********************************************************************
C BEG FEB 1995
      IDDATA = 1
C END FEB 1995
      IEND = 0
      NPRT = 1
      IU = 11
C BEG FEB 2007
      CALL MOVER(0, 0,NUSER, 1,15)
C END FEB 2007
C BEG JULY 1995
      CALL MOVER(0.,0,GRDCUR,1,500)
      CALL MOVER(0.,0,GRDSIG,1,10)
      CALL MOVER(0.,0,DELCRS,1,2)
      CALL MOVER(0.,0,GRDMAX,1,2)
      CALL MOVER(0, 0,IBIGA, 1,2)
C END JULY 1995
      CALL MOVER(0.,0,FAMPSV,1,10)
      CALL MOVER(0.,0,ALSAV,1,10)
      CALL MOVER(0.,0,FMSAV,1,10)
      CALL MOVER(0.,0,FNSAV,1,10)
C BEG NOV 1994
      CALL MOVER(0,0,MAXNSX,1,10)
      CALL MOVER(0,0,MAXNST,1,10)
C BEG AUG 1995
      CALL MOVER(0,0,MAXNSZ,1,10)
C END AUG 1995
C END NOV 1994
      CALL MOVER(0,0,NCASEX,1,5)
C BEG OCT 1998
C    "MOVER" OF "IYXXX" REMOVED
C END OCT 1998
      CALL MOVER(0,0,IQUIT,1,5)
      CALL MOVER(0,0,IDCRAC,1,5)
      CALL MOVER(1,0,IWIDE,1,5)
C BEG DEC 2001
      CALL MOVER(0,0,IICURV,1,5)
      CALL MOVER(1,0,IIKOIT,1,5)
C END DEC 2001
      CALL MOVER(1,0,IABP,1,5)
C BEG FEB 1996
      CALL MOVER(1,0,IABT,1,5)
C END FEB 1996
      CALL MOVER(0,0,WIMPG,1,5)
      CALL MOVER(0,0,WIMPG1,1,5)
      CALL MOVER(0,0,WIMPG2,1,5)
      CALL MOVER(0,0,ECC,1,5)
      CALL MOVER(0,0,KHYDRO,1,5)
      CALL MOVER(0,0,EXAVGA,1,5)
      CALL MOVER(0,0,IFREEX,1,5)
C BEG JAN 1995
C  IFREEL IS SET EQUAL TO 1 (MOVABLE EDGES FOR LOCAL MODULE). OTHERWISE,
C  PANDA2 GETS INTO TROUBLE WHEN THERE ARE THERMAL LOADS.
C     CALL MOVER(0,0,IFREEL,1,5)   (OLD STATEMENT)
      CALL MOVER(1,0,IFREEL,1,5)
C END JAN 1995
      CALL MOVER(1,0,ILOWVE,1,5)
      CALL MOVER(0,0,WIMPL,1,5)
      CALL MOVER(0,0,WIMPP,1,5)
      JLAST = 0
      CALL MOVER(0,0,ISKIP,1,10)
      CALL MOVER(0,0,IREDUC,1,5)
      CALL MOVER(0,0,IQUICK,1,5)
      CALL MOVER(0,0,IQSAVE,1,5)
      CALL MOVER(1,0,NSERCH,1,5)
      CALL MOVER(1,0,NWAVES,1,10)
      CALL MOVER(0,0,FSSTR,1,5)
      CALL MOVER(0,0,IWCON,1,5)
      CALL MOVER(0,0,IBPREL,1,5)
      CALL MOVER(1000000.,0,WPGMAX,1,5)
      CALL MOVER(0,0,SLOPE,1,40)
      CALL MOVER(0,0,IPOPX,1,5)
      CALL MOVER(0,0,ILAMB2,1,20)
      CALL MOVER(0,0,ILAM34,1,4)
      CALL MOVER(0.,0,PBBOW,1,20)
      IWARNG = 0
      IWARNP = 0
      KOUNTM = 0
      MARK   = 0
      MARK2  = 0
      MARK3  = 0
      ICWEBL = 0
      MAXLOD = 5
      INFILE = 5
      IFILE = 2   
      IOUT  = 3
      IFILE1 = 1
      IFILE4 = 4
      IFILE7 = 7
      IFILE8= 8
      IFILE9= 9
C BEG VMS
C     OPEN(UNIT=IFILE,FILE='PANDA2:PROMPT.DAT',STATUS='OLD',READONLY)
C     OPEN(UNIT=4,FILE='PANDA2:TUTORMAIN.DAT',STATUS='OLD',READONLY)
C     OPEN(UNIT=IOUT,FILE=CASE4,STATUS='SCRATCH')
C     OPEN(UNIT=5,FILE=CASE5,STATUS='UNKNOWN')
C     OPEN(UNIT=6,FILE=CASE6,STATUS='SCRATCH')
C     OPEN(UNIT=IFILE7,FILE=CASE3,STATUS='UNKNOWN',FORM='UNFORMATTED')
C     OPEN(UNIT=IFILE9,FILE=CASE7,STATUS='UNKNOWN',FORM='UNFORMATTED')
C     OPEN(UNIT=IFILE1,FILE=CASE8,STATUS='UNKNOWN',FORM='UNFORMATTED')
C     OPEN(UNIT=IFILE8,FILE=CASE2,STATUS='UNKNOWN')
C END VMS
C BEG UNIX
      OPEN(UNIT=IFILE,FILE='PROMPT.DAT',STATUS='OLD')
      OPEN(UNIT=IFILE4,FILE='TUTORMAIN.DAT',STATUS='OLD')
c
C BEG NOV 1995
C     OPEN(UNIT=IOUT,FILE=CASE4(1:lastch(case4)))
      inquire(FILE=case4(1:lastch(case4)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=IOUT, FILE=case4(1:lastch(case4)), STATUS='OLD')
#if rs6k
        rewind(IOUT)
#endif
      else
        OPEN(UNIT=IOUT, FILE=case4(1:lastch(case4)), STATUS='NEW')
      endif
C END NOV 1995
c
      inquire(FILE=case3(1:lastch(case3)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile7, FILE=case3(1:lastch(case3)), STATUS='OLD',
     1       FORM='UNFORMATTED')
#if rs6k
        rewind(ifile7)
#endif
      else
        OPEN(UNIT=ifile7, FILE=case3(1:lastch(case3)), STATUS='NEW',
     1       FORM='UNFORMATTED')
      endif
c
      inquire(FILE=case7(1:lastch(case7)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile9, FILE=case7(1:lastch(case7)), STATUS='OLD',
     1       FORM='UNFORMATTED')
#if rs6k
        rewind(ifile9)
#endif
      else
        OPEN(UNIT=ifile9, FILE=case7(1:lastch(case7)), STATUS='NEW',
     1       FORM='UNFORMATTED')
      endif
c
      inquire(FILE=case8(1:lastch(case8)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile1, FILE=case8(1:lastch(case8)), STATUS='OLD',
     1       FORM='UNFORMATTED')
#if rs6k
        rewind(ifile1)
#endif
      else
        OPEN(UNIT=ifile1, FILE=case8(1:lastch(case8)), STATUS='NEW',
     1       FORM='UNFORMATTED')
      endif
c
      inquire(FILE=case2(1:lastch(case2)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=ifile8, FILE=case2(1:lastch(case2)), STATUS='OLD')
#if rs6k
        rewind(ifile8)
#endif
      else
        OPEN(UNIT=ifile8, FILE=case2(1:lastch(case2)), STATUS='NEW')
      endif
C END UNIX
C
C  DIAGRAM OF HOW WORKING SPACE IS DIVIDED UP...
C
C| M3 |I2+2*NSEG| I2 | M3 |<--8 * IMAXB-->|2*M3|2*M3|2*M3|4*M3|
C|ILOC|<-- IW ->| DS |DIAG| A | B | C | D | DI | X  | Y  | Z  |
CN1   N2        N3   N4   N5  N6  N7  N8  N9  N10  N11  N12  N13
C
C                    | M3G |<---8 * IMAXBG---->|2*M3G|2*M3G|2*M3G|4*M3G|
C                    |DIAGG| AG | BG | CG | DG | DIG | XG  | YG  | ZG  |
C                    N4G   N5G  N6G  N7G  N8G  N9G   N10G  N11G  N12G
C
C BEG OCT 1998
C                    | M3R |<---8 * IMAXBR---->|2*M3R|2*M3R|2*M3R|4*M3R|
C                    |DIAGR| AR | BR | CR | DR | DIR | XR  | YR  | ZR  |
C                    N4R   N5R  N6R  N7R  N8R  N9R   N10R  N11R  N12R
C
C END OCT 1998
      WRITE(IFILE8,*)' '
      WRITE(IFILE8,'(A,A,A)')
     1' ************ END OF THE  ',CASE(1:NLET),'.OPT  FILE ***********'
C BEG APR 2011 
      WRITE(IFILE8,'(A)')
     1' ************ APRIL, 2011 VERSION OF PANDA2   ************'
C END APR 2011 
      WRITE(IFILE8,'(A,A,A)')
     1' ******** BEGINNING OF THE  ',CASE(1:NLET),'.OPM  FILE *********'
      WRITE(IFILE8,*)' '
C
      CALL RESTOR(NPRT,IFILE8,IFILE9,N1,N2,N3,N4,N5,N6,N7,N8,N9,N10,
C BEG OCT 1998
     1            N11,N12,N13,
     1            N4G,N5G,N6G,N7G,N8G,N9G,N10G,N11G,N12G,N13G,
     1            N4R,N5R,N6R,N7R,N8R,N9R,N10R,N11R,N12R,N13R)
C END OCT 1998
C BEG JUN 2004
C     WRITE(8,'(A,1P,3E12.4)')
C    1' ENTERING MAIN; AFTER RESTOR:T(1),T(2),T(3)=',T(1),T(2),T(3) 
C END JUN 2004
C
C     CALL GASP(ZAX,3000,3,IDZ)
C     WRITE(6,1001) IDMAX,IDMAXG,IDZ, (ZAX(IIII),IIII=2001,2050)
 1001 FORMAT(//' AFTER RESTOR...IDMAX,IDMAXG,IDZ=',3I10,'  ANGLES='/
     1 (1P,10E12.4))
C
      NVEC = 1
      NVECG= 1
      N13P = MAX(N13,N13G)
      IF (NPRINT.GE.3) WRITE(IFILE8,7) N13,N13G
      IF (N13P.GT.60000) THEN
         WRITE(IFILE8, 7) N13,N13G
    7    FORMAT(//' WORKING SPACE REQUIRED FOR PANEL MODULE MODEL=',I6/
     1            ' WORKING SPACE REQUIRED FOR GENERAL BUCK.MODEL=',I6/
     1            ' MAXIMUM WORKING SPACE ALLOWED IS CURRENTLY 50000')
         CALL ERREX
      ENDIF
      CALL MOVER(0,0,ISUB,1,100)
C BEG JAN 1996
      CALL MOVER(0,0,ISKIPZ,1,300)
C END JAN 1996
C BEG DEC 1998
      CALL MOVER(0,0,ISKIPW,1,300)
C END DEC 1998
C BEG JUN 2004
      CALL MOVER(0,0,ISKIPV,1,300)
C END JUN 2004
C BEG FEB 2009
      CALL MOVER(0, 0,ISCAPX, 1,30)
      CALL MOVER(0, 0,ICNMAX, 1,30)
      CALL MOVER(0.,0,CONMXJ, 1,30)
C END FEB 2009
C
      REWIND IFILE
      IPROMP = 1
      CALL DATUM(IFILE,20,1,2,INT,REALL,ANSWER,IOUT,0,1)
      IF (ANSL1('Y',ANSWER,INFILE)) IPROMP = IFILE8
C
      IZERO = 0
C BEG OCT 1996
      CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,WW2,T,
     1               ANGLE,MATL,IZERO,0,2,IFILE8)
C END OCT 1996
C BEG JUN 2004
C     WRITE(8,'(A,1P,3E12.4)')
C    1' CONTINUING MAIN; AFTER SETUPC:T(1),T(2),T(3)=',T(1),T(2),T(3)
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUN 2004
C
      CALL LOADSX(FNXX,FNYY,FNXXYY,FNX00,FNY00,FNXY00,NLOADS,MAXLOD,
     1    IFILE,IOUT,FSGEN,FSPAN,FSLOC,FNXBEG,FNXEND,FNYBEG,FNYEND,
     1    FNXYBG,FNXYEN,IGENRL,IPROMP,PRESS,IABP,WIMPG,ECC,KHYDRO,
     1    EXAVGA,IFREEX,IFILE8,IQUICK,NSERCH,NWAVES(1,1),FSSTR,WIMPL,
     1    IWIDE,IREDUC,ILOWVE,IWCON,WPGMAX,TEMP,IMTEMP,ITEMP,0,FSBSTR,
C BEG MAR 1995
C BEG MAR 1996
     1    MX0,MY0,IABT,IFREEL,WIMPP,WIMPG1,WIMPG2,MCASE,FPLOAD,FMLOAD,
C BEG DEC 2001
     1    FWLOAD,IICURV,IIKOIT)
C END DEC 2001
C
      IF (IBEAM.EQ.1) CIRC = B(1)
C END MAR 1996
C END MAR 1995
C
      REWIND IFILE
      IFREE  = 0
      ITER   = 0
      IOBJ   = 1
      NLAST  = -1
      CALL MOVER(IQUICK,1,IQSAVE,1,5)
      CALL MOVER(NWAVES(1,1),1,NWAVES(1,2),1,5)
      NMAX = 50
      CALL MOVER(NMAX,0,NMAXX,1,5)
C
C  minimum or maximum TOTAL thicknesses of each segment in the
C  panel modules (either x-oriented cross section or y oriented)
C
      CALL MOVER(0.,0,TXMIN,1,20)
C
C  First, do the x-oriented cross-section (skin-stringer module)
      REWIND IFILE
      CALL DATUM(IFILE,132,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
  133    REWIND IFILE
         CALL DATUM(IFILE,133,1,1,ISEG,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,134,1,1,INT,TXMIN(ISEG),CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,135,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 133
      ENDIF
      REWIND IFILE
      CALL DATUM(IFILE,136,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
  337    REWIND IFILE
         CALL DATUM(IFILE,137,1,1,ISEG,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,138,1,1,INT,TXMAX(ISEG),CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,139,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 337
      ENDIF
C
C  Next, do the y-oriented cross-section (skin-ring module)
      IF (ISTIF(2).EQ.0) GO TO 239
      REWIND IFILE
      CALL DATUM(IFILE,132,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
  233    REWIND IFILE
         CALL DATUM(IFILE,133,1,1,ISEG,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,134,1,1,INT,TYMIN(ISEG),CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,135,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 233
      ENDIF
      REWIND IFILE
      CALL DATUM(IFILE,136,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
  237    REWIND IFILE
         CALL DATUM(IFILE,137,1,1,ISEG,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,138,1,1,INT,TYMAX(ISEG),CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,139,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) GO TO 237
      ENDIF
  239 CONTINUE
C
      CALL DATUM(IFILE,459,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IEFFSK = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) IEFFSK = 1
      CALL DATUM(IFILE,460,1,2,NPRINT,REALL,CHARAC,IOUT,0,IPROMP)
C BEG AUG 1994
      CALL DATUM(IFILE,470,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,471,1,2,ISAND,REALL,CHARAC,IOUT,0,IPROMP)
C END AUG 1994
C BEG NOV 1995
      IFIXMW = 0
      CALL DATUM(IFILE,480,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
C BEG FEB 1996 FOLLOWING TWO STATEMENTS COMMENTED OUT
C     CDEFLT = 'Y'
C     IITYPE = -1
C END FEB 1996
      CALL DATUM(IFILE,482,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('N',ANSOUT,INFILE)) IFIXMW = 1
C END NOV 1995
      CALL DATUM(IFILE,492,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,493,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IHIAXL = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) IHIAXL = 1
      CALL DATUM(IFILE,494,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,495,1,2,INT,REALL, ANSOUT,IOUT,0,IPROMP)
      ICHECK = 0
      IF (ANSL1('Y',ANSOUT,INFILE)) ICHECK = 1
      CALL DATUM(IFILE,497,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
  234 CONTINUE
      CALL DATUM(IFILE,498,1,2,IHOOP,REALL,CHARAC,IOUT,0,IPROMP)
      IF (ISTIF(2).NE.0.AND.IHOOP.EQ.0) THEN
         WRITE(IFILE8,*)' THERE ARE RINGS. THEREFORE YOU MUST CHOOSE 1'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 234
      ENDIF
C BEG OCT 2006
      CALL DATUM(IFILE,708,1,2,ICONSV,REALL,CHARAC,IOUT,0,IPROMP)
      REWIND IFILE
C END OCT 2006
C BEG MAR 1996
  235 CONTINUE
      CALL DATUM(IFILE,500,1,2,ITYPE,REALL,CHARAC,IOUT,0,IPROMP)
      IF (IBEAM.EQ.1.AND.ITYPE.EQ.5) THEN
         WRITE(6,*)' ILLEGAL VALUE FOR ITYPE: YOU CANNOT DO'
         WRITE(6,*)' LOAD-INTERACTION ANALYSIS ON A BEAM.'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 235
      ENDIF
C END MAR 1996
      I=INDEX(CASE,' ')
      IF (I.NE.0) THEN
        IF (ITYPE.EQ.1) CASE13=CASE(:I-1)//'.PL1'
        IF (ITYPE.NE.1) CASE13=CASE(:I-1)//'.SL1'
      ELSE
        IF (ITYPE.EQ.1) CASE13=CASE//'.PL1'
        IF (ITYPE.NE.1) CASE13=CASE//'.SL1'
      ENDIF
C BEG VMS
C     OPEN(UNIT=13,FILE=CASE13,STATUS='UNKNOWN',FORM='UNFORMATTED')
C END VMS
C BEG UNIX
      inquire(FILE=case13(1:lastch(case13)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=13, FILE=case13(1:lastch(case13)), STATUS='OLD',
     1       FORM='UNFORMATTED')
#if rs6k
        rewind(13)
#endif
      else
        OPEN(UNIT=13, FILE=case13(1:lastch(case13)), STATUS='NEW',
     1       FORM='UNFORMATTED')
      endif
C END UNIX
      MAXCON = 10000000.
      FMAXP = 1.
      IBUCPP = 0
C BEG AUG 1997
C     IF (ITYPE.EQ.1.OR.ITYPE.EQ.2) THEN
C END AUG 1997
         CALL DATUM(IFILE,790,1,2,INT,REALL, ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) IBUCPP = 1
C BEG AUG 1997
C     ENDIF
C END AUG 1997
C BEG JULY 1998
      IALTSN = 0
      CALL DATUM(IFILE,792,1,2,INT,REALL, ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) IALTSN = 1
C BEG JAN 2007
      IF (IALTSN.EQ.1)
     1CALL DATUM(IFILE,793,1,2,INT,FSALTN,CHARAC,IOUT,0,IPROMP)
C END JAN 2007
C BEG DEC 2004
      IF (IALTSN.EQ.1.AND.IOBJAL.EQ.1) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,1P,E12.4,/,A)')
     1' ******* NOTE ********** NOTE *********** NOTE *********',
     1' The current value of the objective is far above the minimum',
     1' value corresponding to a FEASIBLE or ALMOST FEASIBLE desgin.',
     1' Therefore, the alternative buckling solution will not be used.',
     1' Minimum value of objective=',OBJMIN,
     1' ***** END NOTE ****** END NOTE ******** END NOTE ******'
         IALTSN = 0
      ENDIF
C END DEC 2004
      IALTSV = IALTSN
C END JULY 1998
      FMARG = 1.0
      IF (ITYPE.EQ.1) THEN
         CALL DATUM(IFILE,795,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,800,1,2,ITER,REALL,CHARAC,IOUT,0,IPROMP)
         IF (ITER.GT.25) THEN
            WRITE(IFILE8,*)' ITER MUST BE LESS THAN OR EQUAL TO 25.'
            CALL ERREX
         ENDIF
         CALL DATUM(IFILE,801,1,2,INT,FMAXP, CHARAC,IOUT,0,IPROMP)
         MAXCON = FMAXP + 1.
         IF (MAXCON.LT.2.)  MAXCON = 2.
C        IF (MAXCON.GT.11.) MAXCON = 11.
         CALL DATUM(IFILE,802,1,2,INT,REALL, ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) ITRTOT = 0
         CALL DATUM(IFILE,803,1,2,IOBJ,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,804,1,2,INT,FMARG,CHARAC,IOUT,0,IPROMP)
         IF (FMARG.LT.0.11) FMARG = 0.11
         IF (FMARG.GT.1.0) FMARG = 1.0
      ENDIF
      ISTOPP = 0
      NSTEPS= 1
      DNX   = 0.
      DNY   = 0.
      DNXY  = 0.
      DMX   = 0.
      DMY   = 0.
      DP    = 0.
      TPMULT = 1.
      DTMULT= 0.
      EPSRUT = 0.
      EPSTIP = 0.
      IF (ITYPE.EQ.3) THEN
         CALL DATUM(IFILE,920,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,925,1,2,ILOAD, REALL,CHARAC,IOUT,0,IPROMP)
C BEG APR 2007
         IF (IIKOIT(ILOAD).EQ.0) THEN
            WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1    ' ********** FATAL ERROR: RUN ABORT ************',
     1    ' You MUST choose to enter the KOITER branch',
     1    ' [IIKOIT(ILOAD)=1] to perform an ITYPE=3',
     1    ' (test simulation) analysis. Change the answer',
     1    ' to the question,',
     1    ' Do you want to skip the KOITER...?',
     1    ' from "Y" (yes) to "N" (no) for this load set.',
     1    ' and try again. This run will now abort.'
            CALL ERREX
         ENDIF
C END APR 2007
         CALL DATUM(IFILE,927,1,2,ICASE, REALL,CHARAC,IOUT,0,IPROMP)
C BEG MAR 1996
         IF (IBEAM.EQ.1) THEN
            CALL DATUM(IFILE,928,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,929,1,2,INT,DFPLOD,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,930,1,2,INT,DFMLOD,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,931,1,2,INT,DFWLOD,CHARAC,IOUT,0,IPROMP)
            DNX = DFPLOD/B(1)
            DNY = 0.
            DNXY= 0.
            DMX = DFMLOD/B(1)
            DMY = 0.
            DP  = -DFWLOD/B(1)
         ELSE
            CALL DATUM(IFILE,932,1,2,INT,DNX, CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,933,1,2,INT,DNY, CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,934,1,2,INT,DNXY,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,935,1,2,INT,DMX,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,936,1,2,INT,DMY,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,937,1,2,INT,DPIN,CHARAC,IOUT,0,IPROMP)
            DP = -DPIN
         ENDIF
C END MAR 1996
C BEG FEB 1996
         IF (IABT(ILOAD).EQ.0) THEN
C END FEB 1996
            CALL DATUM(IFILE,938,1,2,INT,TPMULT,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,939,1,2,INT,DTMULT,CHARAC,IOUT,0,IPROMP)
         ENDIF
         CALL DATUM(IFILE,940,1,2,NSTEPS,REALL,CHARAC,IOUT,0,IPROMP)
      ENDIF
      IF (ITYPE.EQ.4) THEN
         CALL DATUM(IFILE,925,1,2,ILOAD, REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,927,1,2,ICASE, REALL,CHARAC,IOUT,0,IPROMP)
         REWIND IFILE
         NSTEPS = 0
         CALL DATUM(IFILE,382,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,384,1,2,IBVAR,REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,386,1,2,INT,VARBEG,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,388,1,2,INT,VAREND,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,390,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) NSTEPS = 29
         IF (NSTEPS.EQ.0)
     1    CALL DATUM(IFILE,391,1,2,NSTEPS,REALL,CHARAC,IOUT,0,IPROMP)
      ENDIF
      IF (ITYPE.EQ.5) THEN
         CALL DATUM(IFILE,925,1,2,ILOAD, REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,927,1,2,ICASE, REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,950,0,0,INT,   REALL,CHARAC,IOUT,0,IPROMP)
         CALL DATUM(IFILE,952,1,2,ICURV, REALL,CHARAC,IOUT,0,IPROMP)
C BEG JAN 1996
C RESET ALL FACTORS OF SAFETY TO UNITY...
         FSGEN(ILOAD) = 1.0
         FSPAN(ILOAD) = 1.0
         FSLOC(ILOAD) = 1.0
         FSSTR(ILOAD) = 1.0
         FSBSTR(ILOAD)= 1.0
C END JAN 1996
         IF (ICURV.EQ.1) THEN
            CALL DATUM(IFILE,953,1,2,INT,FNXY00(ILOAD),
     1                              CHARAC,IOUT,0,IPROMP)
            FNX00(ILOAD) = 0.
            FNY00(ILOAD) = 0.
            FNXXYY(ILOAD) = FNXY00(ILOAD)
         ENDIF
         IF (ICURV.EQ.2) THEN
            CALL DATUM(IFILE,954,1,2,INT,FNY00(ILOAD),
     1                              CHARAC,IOUT,0,IPROMP)
            FNX00(ILOAD) = 0.
            FNXY00(ILOAD)= 0.
            FNYY(ILOAD) = 0.
C           FNYY(ILOAD) = FNY00(ILOAD)
C           FNY00(ILOAD) = 0.
         ENDIF
         IF (ICURV.EQ.3) THEN
            CALL DATUM(IFILE,955,1,2,INT,FNX00(ILOAD),
     1                              CHARAC,IOUT,0,IPROMP)
            FNY00(ILOAD) = 0.
            FNXY00(ILOAD)= 0.
            FNXX(ILOAD) = 0.
C           FNXX(ILOAD) = FNX00(ILOAD)
C           FNX00(ILOAD) = 0.
         ENDIF
         IF (ICURV.EQ.1.OR.ICURV.EQ.2) THEN
            CALL DATUM(IFILE,956,1,2,INT,FNXB,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,957,1,2,INT,FNXE,CHARAC,IOUT,0,IPROMP)
C           IF (IQUICK(ILOAD).EQ.0.AND.ICURV.EQ.2) THEN
            IF (IQUICK(ILOAD).EQ.0) THEN
               FNXSM = MAX(ABS(FNXB),ABS(FNXE))
               DIFX = ABS(FNXSM-ABS(FNXB))/FNXSM
               IF (DIFX.LT.0.001) THEN
                  FNXSM = SIGN(FNXSM,FNXB)
                  FNXE = MIN(-0.1*ABS(FNXSM),FNXE)
               ELSE
                  FNXSM = SIGN(FNXSM,FNXE)
                  FNXB = MIN(-0.1*ABS(FNXSM),FNXB)
               ENDIF
            ENDIF
         ENDIF
         IF (ICURV.EQ.1.OR.ICURV.EQ.3) THEN
            CALL DATUM(IFILE,958,1,2,INT,FNYB,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,959,1,2,INT,FNYE,CHARAC,IOUT,0,IPROMP)
C           IF (IQUICK(ILOAD).EQ.0.AND.ICURV.EQ.3) THEN
            IF (IQUICK(ILOAD).EQ.0) THEN
               FNYSM = MAX(ABS(FNYB),ABS(FNYE))
               DIFY = ABS(FNYSM-ABS(FNYB))/FNYSM
               IF (DIFY.LT.0.001) THEN
                  FNYSM = SIGN(FNYSM,FNYB)
                  FNYE = MIN(-0.1*ABS(FNYSM),FNYE)
               ELSE
                  FNYSM = SIGN(FNYSM,FNYE)
                  FNYB = MIN(-0.1*ABS(FNYSM),FNYB)
               ENDIF
            ENDIF
         ENDIF
         IF (ICURV.EQ.2.OR.ICURV.EQ.3) THEN
            CALL DATUM(IFILE,960,1,2,INT,FNXYB,CHARAC,IOUT,0,IPROMP)
            CALL DATUM(IFILE,961,1,2,INT,FNXYE,CHARAC,IOUT,0,IPROMP)
         ENDIF
         NSTEPS = 0
         CALL DATUM(IFILE,962,1,2,INT,REALL,ANSOUT,IOUT,0,IPROMP)
         IF (ANSL1('Y',ANSOUT,INFILE)) NSTEPS = 27
         IF (NSTEPS.EQ.0)
     1    CALL DATUM(IFILE,963,1,2,NSTEPS,REALL,CHARAC,IOUT,0,IPROMP)
      ENDIF
      CLOSE(UNIT=2)
      IDV = 0
      DO 210 I = 1,NVARB
         IF (IDEC(I).EQ.0) GO TO 210
         IDV = IDV + 1
         DO 208 K = 1,12
            ISTART = K
            IF (VARLEG(I)(K:K).NE.' ') GO TO 209
  208    CONTINUE
  209    CONTINUE
         VARDEC(IDV) = VARLEG(I)(ISTART: )
  210 CONTINUE
      CALL MOVER(0,0,IWARNV,1,500)
      CALL MOVER(0,0,IWRNVV,1,50)
      CALL MOVER(WIMPL,1,WIMPL0,1,5)
      ISTFL2 = 0
      IF (ISTIF(2).NE.0) ISTFL2 = 1
      KOITER = 1
      PHIMIN = 0.1
C
      WLOC(1) = 'PANEL MIDLENGTH'
      WLOC(2) = 'PANEL ENDS     '
      IBPRE = FBPRE
C BEG FEB 2007
C        WRITE(8,'(\,A,I10,1P,E12.4)')
C    1 ' begin main: IBPRE,FBPRE=',IBPRE,FBPRE
C END FEB 2007
      IF (IBPRE.EQ.1.OR.IBPRE.EQ.2) THEN
         CALL MOVER(0.,0,MX0,1,5)
         CALL MOVER(0.,0,MY0,1,5)
         DMX = 0.
         DMY = 0.
      ENDIF
      CALL MOVER(MX0,1,MX,1,5)
      CALL MOVER(MY0,1,MY,1,5)
      CONMAX = 2.0
      IF (ITYPE.EQ.2.OR.ITYPE.EQ.3.OR.ITYPE.EQ.4.OR.ITYPE.EQ.5)
     1   CONMAX=10000000.
      IF (ITYPE.EQ.1.AND.MAXCON.LT.CONMAX) CONMAX = MAXCON
      INDIC = 1
      NPRNTS = NPRINT
C
      IF (ITYPE.EQ.1.AND.NPRINT.GE.2) ITER = 1
      ARX = ABS(RX)
C BEG MAR 1996
C     RTEST = 10000.*SQRT(AXIALX**2 + CIRCX**2)
      RTEST = 10000.*SQRT(AXIALX**2 + CIRC**2)
C END MAR 1996
      DIFFX  = ABS(ARX - RTEST)/ARX
      IFLAT = 0
      IF (DIFFX.LT.0.5) IFLAT = 1
C BEG MAR 1996
      IF (IBEAM.EQ.1) IFLAT = 1
C END MAR 1996
      PEDG = IFLAT.EQ.0
C BEG JAN 1999
C     ATRNG = IFLAT.EQ.0.AND.ISTIF(2).NE.0
      ATRNG =                ISTIF(2).NE.0
C END JAN 1999
      JJJ = 0
      ITRIAL = 0
      IESCAP = 0
      IFAIL = 0
      CALL MOVER(0,0,ILOW,1,10)
      IZERO = 0
C
      ISTORC = 0
      DO 2 I = 1,20
         IF (TAPE(I).GT.0.) ISTORC = 1
    2 CONTINUE
C
C BEG DEC 2003
      IF (NPRINT.GE.2) THEN
C BEG FEB 2007
        WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' NOTE: The references called out in the following text are',
     1'       listed in the section following the headings,',
     1'       "PANDA2 REFERENCES", "ABOUT BOSOR4", and "ABOUT STAGS"' 
C END FEB 2007
C BEG DEC 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'                DESCRIPTION OF PANDA2',
     1' PANDA2 is a computer program for the minimum weight design of',
     1' stiffened, composite, flat or cylindrical, perfect/imperfect',
     1' panels and shells subjected to multiple sets of combined',
     1' in-plane loads, normal pressure, and temperature. For most',
     1' configurations the panels can be locally postbuckled. Previous',
     1' work on PANDA2 is documented in [1]. PANDA2 incorporates the',
     1' theories of earlier codes PANDA [2] and BOSOR4 [1B - 7B]. The',
     1' optimizer used in PANDA2 is called ADS [20, 21]. Panels are',
     1' optimized subject primarily to buckling and stress constraints.'
        WRITE(IFILE8,'(/,/,A,/,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A)')
     1' PANDA2 Processors and Types of Analysis:',
     1' As described in [1],[16,17], the PANDA2 system consists of',
     1' several processors, BEGIN, SETUP, DECIDE, MAINSETUP, PANDAOPT,',
     1' CHOOSEPLOT, CHANGE, STAGSUNIT, PANEL, PANEL2, etc. The',
     1' functions of these processors are as follows:',
     1' BEGIN   User establishes starting design, material properties,',
     1'         prebuckling and buckling boundary conditions.',
     1' SETUP   System sets up BOSOR4-type templates for stiffness and',
     1'         load-geometric matrices.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' DECIDE  User chooses decision variables and bounds and sets up',
     1'         equality (linking) and inequality constraints.',
     1' MAINSETUP  User chooses analysis type, loading, solution',
     1'            strategies, imperfection amplitudes, factors of',
     1'            safety, etc.',
     1' PANDAOPT   Analysis type is performed (e.g. optimization).',
     1' CHOOSEPLOT User chooses what to plot.',
     1' DIPLOT     The system obtains plots (postscript files).',
     1' CHANGE     User changes selected variables and constants.',
     1' AUTOCHANGE A new starting design is automatically generated',
     1'            in a random manner.'
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' SUPEROPT   An attempt is made to find a global optimum design.',
     1' PANEL      A BOSOR4 input file is generated for inter-ring',
     1'            buckling of panel skin and stringers, with',
     1'            stringers modelled as flexible shell branches.',
     1' PANEL2     A BOSOR4 input file is generated for inter-ring',
     1'            buckling of panel skin+smeared stringers with rings',
     1'            modelled as flexible shell branches.',
     1' STAGSMODEL An input file for STAGS [1S - 4S] is generated (one',
     1'            finite element unit, only stringers are permitted).',
     1' STAGSUNIT  An input file for STAGS is generated (multiple',
     1'            shell units, both stringers and rings are permitted)'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' CLEANPAN   Delete all files except files containing the user-',
     1'            provided input data for BEGIN, DECIDE, MAINSETUP,',
     1'            CHANGE, PANEL, PANEL2, STAGSMODEL, STAGSUNIT,',
     1'            CHOOSEPLOT',
     1' PANDA2 can be run in five modes:',
     1'   1. optimization',
     1'   2. simple analysis of a fixed design',
     1'   3. test simulation (monotonically increasing loading)',
     1'   4. design sensitivity (margins computed for a user-selected',
     1'      range of one decision variable, all others held constant)',
     1'   5. load-interaction curves (Nx,Ny) or (Nx,Nxy) or (Ny,Nxy)'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Overview of models used in PANDA2',
     1' PANDA2 computes stress and buckling loads from several',
     1' different models as follows:',
     1' 1. Discretized single-module skin-stringer (Figs.20,22 of [1])',
     1'    The cross section of a stringer and panel skin of width',
     1'    equal to the stringer spacing is discretized as shown in',
     1'    [1]. Variation of unknowns u,v,w in the axial direction is',
     1'    trigonometric with m axial halfwaves. This one-dimensional',
     1'    discretization is analogous to that used in BOSOR4 [1B,3B]',
     1'    for shells of revolution.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    (a) This model is for the axial length of shell between',
     1'        rings.',
     1'    (b) This model can be used for local postbuckling analysis',
     1'        as shown in Figs. 23 of [1] and Fig. 10 of [11]. The',
     1'        local postbuckling theory [3] is an extension of that',
     1'        of Koiter described in Ref. [22].',
     1'    (c) Buckling load factors can be checked by a BOSOR4 model',
     1'        [1B - 7B] generated by the PANDA2 processor, PANEL.',
     1'        (See Items 112c,d, 270, 319 in .../doc/panda2.news',
     1'        and Fig. 21 in [1] and Figs. 33 and 34 of [18]).'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 2. Discretized single-module "skin"-ring (Fig.30 of [6]):',
     1'    The cross section of a ring and panel skin with "smeared"',
     1'    stringers of axial length equal to the ring spacing is',
     1'    discretized. Variation of unknowns u,v,w, in the circum-',
     1'    ferential direction is trigonometric with n circumferential',
     1'    halfwaves. This one-dimensional discretization is the same',
     1'    as that used in BOSOR4 [1B,3B] for shells of revolution.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    (a) This model involves discretized skin-with-smeared-',
     1'        stringers combined with discretized ring cross section.',
     1'    (b) Buckling load factors can be checked by a BOSOR4 model',
     1'        [1B - 7B] generated by the PANDA2 processor, PANEL2.',
     1'        (See Item 463 in ...panda2/doc/panda2.news and Fig.33',
     1'        of [6] and Figs. 35 and 36 of [18])',
     1'    (c) This model is used to determine a knockdown factor',
     1'        that compensates for the inherent unconservativeness',
     1'        of models with "smeared" rings. (See Items 509, 511,',
     1'        522, 532, 605, 617, 619, 632, 633, and 676 in the file,',
     1 '        ...panda2/doc/panda2.news).'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1  '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 3. PANDA-type closed form buckling formulas [2] for shell skin',
     1'    and segments of stringers and segments of rings:',
     1'    (a) This model involves an elaborate search over (m,n,s)',
     1'        space, in which m = number of axial halfwaves,',
     1'        n =number of circumferential halfwaves and',
     1'        s =slope of the buckling nodal lines (assumed straight)',
     1'    (b) Either Donnell theory or Sanders theory or Marlowe',
     1'        theory is used for the shell analysis. (User chooses).',
     1'    (c) This model is used to compute knockdown factors for',
     1'        stiffened or unstiffened cylindrical panels and shells',
     1'        with local, inter-ring, and general buckling modal',
     1'        imperfection shapes with user-specified amplitudes [4].'
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    (d) This model is used to get a knockdown factor to',
     1'        compensate for the fact that the in-plane shear load',
     1'        Nxy equals zero in all BOSOR4-type (discretized) models',
     1'    (e) This model is used for buckling of stiffener segments',
     1'        such as shown in Figs. 5 and 6 of [2].',
     1'    (f) This model is used for the buckling of sandwich wall',
     1'        face sheets attached to an elastic foundation that',
     1'        represents the core of the sandwich wall [10].',
     1'    (g) This model is used for many of the buckling modes that',
     1'        exist in panels with major stiffeners and substiffeners',
     1'        between the major stiffeners [16].'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1  '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 4. Sandwich wall failure modes unique to sandwich walls [10]:',
     1'    (a) face sheet wrinkling',
     1'    (b) face sheet dimpling',
     1'    (c) core crimping',
     1'    (d) stiffener-web-bending-induced face sheet pull-off',
     1'    (e) stiffener-web-bending-induced core crushing',
     1'    (f) amplification-of-initial-face-sheet-waviness-induced',
     1'        face sheet pull-off',
     1'    (f) amplification-of-initial-face-sheet-waviness-induced',
     1'        core crushing',
     1'    (g) hexagonal core face sheet pull-off',
     1'    (h) transverse shear core failure',
     1'    (i) core tension failure.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1   '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 5. Models involving solution by double trigonometric series',
     1'    expansions [6]:',
     1'    (a) local buckling between adjacent major stiffeners',
     1'    (b) general buckling of a "patch" involving N x M major',
     1'        stiffener bays',
     1'    (c) inter-ring buckling of a "patch" involving N major',
     1'        stringer bays',
     1'    (d) local, "general", and inter-subring models in shells',
     1'        with substringers and subrings between major stiffners.',
     1'        The "general" buckling domain is a "patch" involving',
     1'        N x M substiffener bays lying between adjacent major',
     1'        stringers and major rings.'
        WRITE(IFILE8, '(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 6. Optimum designs obtained by PANDA2 may be checked by',
     1'    running a general-purpose finite element program. The',
     1'    PANDA2 processor called STAGSUNIT generates input files,',
     1'    <casename>.inp and <casename>.bin for STAGS [1S - 4S].',
     1'    STAGSUNIT [7] generates valid STAGS input files for any',
     1'    subdomain of a shell or panel, as seen in Refs. [7, 16, 17].'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1'(/,/,A,/,A,/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,/,A,/,A,/,A)')
     1'    Stress and buckling margins and other facts about PANDA2',
     1' ==============================================================',
     1' PART 1.1: stress constraints from discretized and',
     1'           non-discretized models.',
     1' PART 1.2: buckling constraints from discretized single module',
     1'           skin-stringer model (Example: Fig. 22 of [1]).',
     1' PART 1.3: buckling constraints from discretized single module',
     1'           skin-with-smeared-stringers/discretized ring model',
     1'           (Example: Fig. 30 of [6]).',
     1' PART 1.4: buckling constraints from PANDA-type models [2] and',
     1'           alternative models involving double trigonometric',
     1'           series expansions ("altsol" models, [6])'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1'(/,A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,/,A,/,/,A,/,A)')
     1'           Part 1.4.1 Various types of buckling/models included',
     1'                      in SUBROUTINE BUCPAN',
     1'           Part 1.4.2 Special cases in SUBROUTINE BUCPAN',
     1'           Part 1.4.3 Types of "knockdown" used in PANDA2',
     1'           Part 1.4.4 Imperfections cause stress redistribution',
     1'           Part 1.4.5 Buckling margins',
     1' PART 1.5: buckling constraints from PANDA-type models of',
     1'           buckling of stiffener segments (Fig. 5 of [2])',
     1' PART 1.6: Conservativeness of PANDA2 analyses',
     1' PART 1.7: How the effect of imperfections is handled in PANDA2',
     1' --------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A,/,/,A,/,A)') ' PART 1.1',
     1' PANDA2 computes the following types of margins relating to',
     1' stress constraints:'
        WRITE(IFILE8,
     1'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ------------------- typical margin names ---------------------',
     1' eff.stress:matl=1,STR,Dseg=5,node=11,layer=1,z=.281; MID.;FS=1',
     1' eff.stress:matl=1,RNG,Iseg=3,at:TIP,layer=1,z=0.363;-MID.;FS=1',
     1' fibertensn:matl=1,STR,Dseg=4,node=6,layer=1,z=-0.11; ENDS;FS=1',
     1' fibercompr:matl=1,SKN,Dseg=2,node=6,layer=2,z=0.11; ENDS;FS=1',
     1' transtensn:matl=1,SKN,Dseg=2,node=6,layer=1,z=-0.11; ENDS;FS=1',
     1' transcompr:matl=1,SKN,Dseg=2,node=6,layer=2,z=0.11; ENDS;FS=1',
     1' inplnshear:matl=1,STR,Dseg=3,node=1,layer=1,z=0.083; ENDS;FS=1',
     1' fibertensn:matl=1,STR,Iseg=4,allnode,layer=1,z=-.11;-ENDS;FS=1',
     1' fibercompr:matl=1,SKN,Iseg=1,at:n=11,layer=2,z=0.11;-ENDS;FS=1',
     1' transtensn:matl=1,SKN,Iseg=2,at:n=11,layer=1,z=-.11;-ENDS;FS=1',
     1' transcompr:matl=1,STR,Iseg=4,allnode,layer=1,z=0.11;-ENDS;FS=1',
     1' inplnshear:matl=1,STR,Iseg=3,at:TIP,layer=1,z=0.;-ENDS;FS=1',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
       WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' in which the following definitions apply:',
     1' "STR" = "stringer"; "RNG" = "ring"; "SKN" = "skin";',
     1' "MID" = midway between rings (midbay); "ENDS" = "at rings"',
     1' "TIP" = at the tip of a stiffener web',
     1' "Dseg" = segment numbering for discretized single module model',
     1' "Iseg" = segment numbering from "BEGIN" (See *.BEG file)',
     1' "z" = distance from reference surface (thickness coordinate)',
     1' "node" = nodal point in discretized single module model',
     1' "allnode" = "at all nodes" [IQUICK=1 (non-discretized) model]',
     1' "layer" = layer number in the segment wall',
     1' "FS" = factor of safety'
       WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A)')
     1' "eff.stress" = von Mises effective stress',
     1' "fibertensn" = tensile stress in the direction of the fibers',
     1' "fibercompr" = compressive stress along the fibers',
     1' "transtensn" = tension stress normal to the fibers',
     1' "transcompr" = compressive stress normal to the fibers',
     1' "inplnshear" = in-plane shear stress'
       WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Stresses in the category denoted "Iseg"(non-discretized model)',
     1' are computed in SUBROUTINE STRCON for both positive and',
     1' negative amplitudes of buckling modal imperfection.',
     1' Stresses in the category denoted "Dseg"(discretized model)',
     1' are computed in SUBROUTINE STRTHK and include the effect of',
     1' local postbuckling of the panel skin between adjacent',
     1' stringers.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' In computing the various stress constraints, SUB.STRCON/STRTHK',
     1' include the effect of redistribution of stress resultants',
     1' between panel skin and stiffener segments caused by bending of',
     1' an initially imperfect shell subjected to its design load. For',
     1' example, in one case (not this case), this prebuckling bending',
     1' gives rise to additional compressive stress resultants as',
     1' follows:'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' Additional resultants (Nx,Ny) in panel skin from',
     1' global and inter-ring bending of imperfect panel:',
     1'              Additional axial resultant, DNX = -1.4357E+03',
     1'              Additional  hoop resultant, DNY = -2.3231E+04',
     1'     Additional in-plane shear resultant, DNXY=  0.0000E+00'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1  '(/,A,/,A,A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Additional axial resultants DNX along webs and flanges of',
     1' stringers from global and inter-ring bending of imperfect',
     1' panel:',
     1'     Additional Nx in  base  of stringer, DNX = -1.4357E+03',
     1'     Additional Nx at webtip of stringer, DNX = -2.5133E+03',
     1'     Additional Nx in flange of stringer, DNX = -1.8180E+03',
     1' Additional axial resultants DNX along webs and flanges of',
     1' rings from global and inter-ring bending of imperfect panel:',
     1'     Additional Nx in  base  of   ring,   DNX = -2.5529E+04',
     1'     Additional Nx at webtip of   ring,   DNX = -9.7624E+04',
     1'     Additional Nx in flange of   ring,   DNX = -6.4280E+04',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A)') ' PART 1.2'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,/,A)')
     1' Buckling load factors may be computed with use of the single',
     1' discretized skin-stringer module model [1]. Examples of this',
     1' model appear in Figs. 22, 46, 98, and 99 of Ref.[1]. This',
     1' one-dimensionally-discretized model is analogous to the model',
     1' used in BOSOR4 [1B,3B] for analysis of axisymmetric shells.',
     1' This model is used only for inter-ring buckling phenomena',
     1' (no rings!). The types of buckling margins obtained with this',
     1' model are as follows:',
     1' ------------------- typical margin names ---------------------'
       WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Local buckling from discrete model-1.,M=5 axial halfwaves;FS=1',
     1' long-wave local buckling, discrete model(m=1 axial halfwav);FS',
     1' Local buckling from Koiter theory,M=5 axial halfwaves;FS=1.0',
     1' Bending-torsion buckling; M=1  ;FS=1.0',
     1' (m=1 lateral-torsional buckling load factor)/(FS)-1;FS=1.0',
     1' local wide-column bucking, discrete model(m=1 axial halfwave)',
     1' stringer popoff margin:(allowable/actual)-1, web 1  MID.;FS=1.',
     1' stringer popoff margin:(allowable/actual)-1, web 2  MID.;FS=1.',
     1' (Wide column panel buckling load factor)/(F.S.) - 1; FS=1.0',
     1' (Funny hat buckling load factor)/(F.S.) -1; FS=1.0',
     1' -.05+(eig(high-axial-m) -eig(low-axial-m))/eig(high-m);FS=1.0',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
       WRITE(IFILE8,
     1'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' A typical local buckling mode is shown in Fig.22a of [1].',
     1' A typical wide column panel buckling mode is in [1], Fig. 22c.',
     1' Stringer popoff is explained in the discussion associated with',
     1' Figs. 5 - 8 of [1].',
     1' Bending-torsion buckling and lateral-torsional buckling modes',
     1' are modes in which the tip of the stringer deforms more than',
     1' the panel skin midway between adjacent stringers. Fig. 20b in',
     1' [18] shows an example.',
     1' The "Funny hat" buckling mode applies only to hat-stiffened',
     1' panels and is discussed in Item 123(u) of ..doc/panda2.news.',
     1' The last margin listed above attempts to keep buckling modes',
     1' with high numbers of axial halfwaves m non-critical compared',
     1' to those with low numbers of axial halfwaves.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' In computing the various buckling load factors, SUB. LOCAL',
     1' includes the effect of redistribution of stress resultants',
     1' between panel skin and stiffener segments caused by bending of',
     1' an initially imperfect shell subjected to its design load. For',
     1' example, see the list of DNX, DNY, DNXY printed above.',
     1' ---------------------------------------------------------------'
        WRITE(IFILE8,'(/,/,A)') ' PART 1.3'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Computations with "SKIN"-RING discrete single module model[6]:',
     1' See Item No. 463 of the file, ../doc/panda2.news and Ref.[6]:',
     1' Bushnell, D., et al, "Additional buckling solutions in PANDA2"',
     1' AIAA Paper 99-1233, Proc. 40th AIAA Structures and Materials',
     1' Conference, pp 302-345 (1999) [6]. See especially pp 318-323',
     1' and Figs. 30-33. Also, read ITEMs 509, 511, 522, 605 of the',
     1' file, ..panda2/doc/panda2.news, about how PANDA2 develops a',
     1' knockdown factor to compensate for the unconservativeness of',
     1' buckling models in which the rings are smeared out.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' This model is used only for ring-stiffened cylindrical shells.',
     1' The model is analogous to the discretized single module',
     1' skin-stringer model described previously. It is a discretized',
     1' single module "skin"-ring model of axial length equal to the',
     1' ring spacing. The cylindrical "skin" part extends from midbay',
     1' to midbay, with symmetry conditions applied at top and bottom.',
     1' "Skin" is in quotes because it consists of the actual skin of',
     1' the cylindrical shell plus smeared stringers, if any. The ring',
     1' cross section is discretized (branched shell model), with the',
     1' plane of the ring web lying in the horizontal plane of',
     1' symmetry of the entire discretized "skin"-ring module.' 
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1 '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ------------------- typical margin names ---------------------',
     1' The types of buckling margins obtained with this model are:',
     1' Inter-ring bucklng, discrete model, n=37 circ.halfwaves;FS=1.0',
     1' Ring sidesway buk., discrete model, n=4  circ.halfwaves;FS=1.0',
     1' Ring web buckling,  discrete model, n=?? circ.halfwaves;FS=1.0',
     1' Ring flange buckling,discrete model,n=54 circ.halfwaves;FS=1.0',
     1' Hi-n Inter-ring buc.,discrete model,n=?? circ.halfwaves;FS=1.0',
     1' Hi-n Ring sidesway,  discrete model,n=?? circ.halfwaves;FS=1.0',
     1' Hi-n Ring web buckl.,discrete model,n=27 circ.halfwaves;FS=1.0',
     1' Hi-n Ring flang buckl.discret model,n=67 circ.halfwaves;FS=1.0',
     1' Lo-n Inter-ring buc.,discrete model,n=?? circ.halfwaves;FS=1.0',
     1' Lo-n Ring sidesway, discrete model, n=7  circ.halfwaves;FS=1.0',
     1' Lo-n Ring web buck., discrete model,n=?? circ.halfwaves;FS=1.0',
     1' Lo-n Ring flng buck.,discrete model,n=?? circ.halfwaves;FS=1.0',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' In computing the various buckling load factors, SUB. STRUCT',
     1' includes the effect of redistribution of stress resultants',
     1' between panel skin and stiffener segments caused by bending of',
     1' an initially imperfect shell subjected to its design load. For',
     1' example, see the list of DNX, DNY, DNXY printed above',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1 '(/,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' PART 1.4',
     1' Computations that occur in SUBROUTINE BUCPAN...',
     1' Buckling load factors are computed from PANDA-type theory [2]',
     1' and possibly also from the "alternative" buckling theory where',
     1' the buckling mode is expanded in a double-trigonometric series',
     1' as described in Ref.[6]. Stiffener rolling, referred to below,',
     1' is shown in Fig.6 (a-c) on p. 546 of [2]. If the panel is of',
     1' sandwich wall construction, then Ref.[10] applies. If the',
     1' panel has both stiffeners and substiffeners, then Ref. [16]',
     1' applies. A very large eigenvalue, such as 1.E+17, indicates',
     1' that buckling does not occur, probably because the loading',
     1' is tensile and there is no shear (positive Nx, Ny; no Nxy),',
     1' or that PANDA2 did not compute a particular buckling mode.',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1   '(/,/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,A)')
     1' Part 1.4.1 Various types of buckling/models included in',
     1'            SUBROUTINE BUCPAN:',
     1' If the panel is stiffened by both rings and stringers,',
     1' then the following computations are performed:',
     1' 1. Local buckling of the panel skin between adjacent stringers',
     1'    and rings:',
     1'    (a) with the use of PANDA-type (closed form) theory [2]',
     1'    (b) with the use of double-trig. series expansions [6]',
     1'        over a "patch" which spans the stringer spacing and',
     1'        may be shorter than the ring spacing.'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 2. Inter-ring buckling of panel skin and possibly smeared',
     1'    stringers between adjacent rings:',
     1'    (a) with the use of PANDA-type (closed form) theory [2]',
     1'        (stringers smeared; rings replaced by simple support)',
     1'    (b) with the use of PANDA-type theory and for a panel',
     1'        of the same geometry except that it is flat (huge R)',
     1'    (c) with the use of double-trig. series expansions [6]',
     1'        over a "patch" that spans the ring spacing and that',
     1'        includes up to 6 stringer spacings with discrete',
     1'        stringers.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    NOTE: Results from 2(a,b) may be superseded by results from',
     1'    a discretized module model in which there is one ring',
     1'    attached to a length of cylindrical skin-with-smeared-',
     1'    stringers equal to the ring spacing, with symmetry boundary',
     1'    conditions applied to the top and bottom of the cylindrical',
     1'    part of the model. See Fig. 30 of Ref.[6]. If 2(a,b) have',
     1'    been superseded, a message such as the following will',
     1'    appear in the *.OPM file:'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    "Simple-support inter-ring buckling with smeared stringers',
     1'    is not recorded as a margin because this type of buckling',
     1'    has been superseded by the results from the discretized',
     1'    inter-ring module model, for which inter-ring buckling',
     1'    load factors have been computed in the range from n = 1',
     1'    to n = 118 circumferential halfwaves.',
     1'    The critical simple-support inter-ring buckling model has',
     1'    34 circ. half waves, which lies within this range."'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 3. General buckling of panel skin with possibly smeared',
     1'    stringers and possibly smeared rings:',
     1'    (a) with the use of PANDA-type (closed form) theory [2]',
     1'        (stringers and rings both smeared)',
     1'    (b) with the use of double-trig. series expansions [6]',
     1'        over a "patch" that may include up to six stringer',
     1'        spacings and up to five ring spacings with discrete.',
     1'        stringers and discrete rings.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1  '(/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,/,A,/,A)')
     1' 4. Inter-ring buckling with ring rolling, smeared stringers;',
     1'    PANDA-type theory [2] only.(May be superseded as with 2a,b)',
     1' 5. Buckling between stringers with smeared rings including',
     1'    stringer rolling; PANDA-type theory only.',
     1' 6. Low-axial-wave stringer rolling without skin participation;',
     1'    PANDA-type theory only.',
     1' 7. High-axial-wave stringer rolling without skin participa-',
     1'    tion; PANDA-type theory only.',
     1' 8. Low-circumferential-wave ring rolling without skin partici-',
     1'    pation; PANDA-type theory. (May be superseded as with 2a,b).'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,/,A,/,/,A)')
     1' 9. High-circumferential-wave ring rolling without skin',
     1'    participation. (May be superseded as with 2a,b).',
     1' 10.Axisymmetric rolling of ring without participation of skin.',
     1' 11.Stringer web buckling from PANDA-type theory only.',
     1' 12.Ring web buckling from PANDA-type theory only.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' 13. For hat or truss-core stiffened configurations:',
     1'     (a) hat base or truss core lower skin buckling',
     1'     (b) hat crown or truss core upper skin buckling',
     1' ---------------------------------------------------------------'
        WRITE(IFILE8,
     1  '(/,/,A,/,/,A,/,A,/,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Part 1.4.2 Special cases in SUBROUTINE BUCPAN:',
     1' Special behavioral constraints for sandwich wall construction',
     1' if applicable [10]. For each panel module segment:',
     1' 1. Local buckling of sandwich segment (from VINSON 1986)',
     1' 2. For both upper and lower face sheets of sandwich wall:',
     1' (a) Face sheet wrinkling from BUSHNELL theory (PANDA-type with',
     1'     the sandwich core represented by an elastic foundation)',
     1' (b) Face sheet wrinkling from VINSON theory',
     1' (c) Face sheet wrinkling from HOFF theory (Plantema book)',
     1' (d) Face sheet dimpling (local buckling of face sheet',
     1'     with wavelength equal to the honeycomb cell diameter).'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 3. Failure modes that involve the sandwich core and',
     1'    interaction of the core with face sheets:',
     1' (a) Core crimping (from VINSON)',
     1' (b) Stringer-web-bending-induced face sheet pull-off',
     1' (c) Stringer-web-bending-induced core crushing',
     1' (d) Ring-web-bending-induced face sheet pull-off',
     1' (e) Ring-web-bending-induced core crushing',
     1' (f) Amplification-of-initial-face-sheet-waviness induced',
     1'     face sheet pull-off',
     1' (g) Amplification-of-initial-face-sheet-waviness induced',
     1'     core crushing'
        WRITE(IFILE8,'(A,/,A,/,A,/,A)')
     1' (h) hexagonal-core face sheet pull-off, if applicable',
     1' (i) L-direction (x-z) transverse shear core failure',
     1' (j) W-direction (y-z) transverse shear core failure',
     1' (k) core tension failure.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,/,A,/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,A)')
     1' Buckling modes involving substiffeners [16], if applicable:',
     1' 1. For isogrid substiffening: buckling of triangular piece of',
     1'    subskin between adjacent substiffeners including rolling of',
     1'    the subisogrid members along the three edges [12, 16].',
     1' 2. Buckling of subring as wide column with linearly varying',
     1'    width-wise web compression from subring tip to subring root',
     1' 3. Local subskin buckling between adjacent substiffeners',
     1'    including substiffener rolling along the 4 edges of the',
     1'    domain (PANDA-type theory [2]). This calculation is',
     1'    analogous to that for local buckling; see 1(a) above.'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 4. Buckling of substringer simply supported along root, no',
     1'    participation of the panel skin (ENDBUK-like coding).',
     1' 5. Buckling of subring simply supported along root, no',
     1'    participation of the panel skin (ENDBUK-like coding).',
     1' 6. Buckling of "patch" with use of double-trigonometric series',
     1'    expansion [6] over domain including up to 6 substringer',
     1'    spacings and 6 subring spacings with discrete substringers',
     1'    and discrete subrings. (The margin contains the string',
     1'    "altsoln4"). This calculation is analogous to the model',
     1'    3(b) for general instability listed above [6].'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A)')
     1' 7. Buckling of "patch" with use of double-trigonometric series', 
     1'    expansion [6] over domain between adjacent substringers and',
     1'    subrings, with rolling of substiffeners included along the',
     1'    four edges. (The margin contains the string "altsoln5").',
     1'    This calculation is analogous to the model 1(b) for local',
     1'    buckling listed above.',
     1' 8. buckling between subrings with smeared substringers,',
     1'    subring rolling included. This calculation is analogous to',
     1'    the models 2(a) and 4 for inter-ring buckling listed',
     1'    above [2].'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A)')
     1' 9. Buckling of "patch" with use of double-trigonometric series',
     1'    expansion [6] over domain between adjacent subrings, with',
     1'    rolling of subrings included. The domain includes up to six',
     1'    substringer spacings and the substringers are discrete.',
     1'    (The margin contains the string "altsol6"). This',
     1'    calculation is analogous to the model 2(c) for inter-ring',
     1'    buckling listed above [6].',
     1' 10.Buckling between substringers with smeared subrings from',
     1'    PANDA-type theory [2]. Substringer rolling is included.',
     1'    This calculation is analogous to model 5 listed above [2].'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 11.Models involving rolling of substringers and subrings',
     1'    without participation of the panel skin [2]:',
     1'    (a) low-m rolling of substringer',
     1'    (b) high-m rolling of substringer',
     1'    (c) low-m rolling of subring',
     1'    (d) high-m rolling of subring',
     1'    (e) axisymmetric rolling of subring.',
     1'    These models are analagous to Models 6 - 10 listed above',
     1'    for stringer and ring rolling [2].',
     1' ---------------------------------------------------------------'
        WRITE(IFILE8,
     1    '(/,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Part 1.4.3 Types of "knockdown" used in PANDA2',
     1' The Local, Inter-ring, and General buckling load factors',
     1' are knocked down by the following factors:',
     1' (a) Imperfection sensitivity factor',
     1' (b) Inherent unconservativeness of smearing stringers',
     1'     (if there are smeared stringers in the model)',
     1' (c) Inherent unconservativeness of smearing rings',
     1'     (if there are smeared rings in the model)',
     1' (d) Transverse shear deformation (t.s.d.) effects',
     1' (e) Ratio of buckling loads from ARBOCZ/PANDA2 theories, if',
     1'     that ratio is less than 1.0.',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' Part 1.4.4 Imperfections cause stress redistribution:',
     1' In computing the various buckling load factors, SUB. GENSTB',
     1' includes the effect of redistribution of stress resultants',
     1' between panel skin and stiffener segments caused by bending of',
     1' an initially imperfect shell subjected to its design load. For',
     1' example, see the listing for DNX, DNY, DNXY at the end of',
     1' PART 1.1.',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A,/,/,A,/,A,/,A)')
     1' Part 1.4.5 Buckling margins',
     1' Buckling load factors corresponding to buckling margins of the',
     1' following types are computed in SUBROUTINE GENSTB (called by',
     1' SUBROUTINE BUCPAN):'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ------------------- typical margin names ---------------------',
     1' buck.(SAND);simp-support local buck.; M=1;N=1;slope=0.09;FS=1.',
     1' buck.(SAND);simp-support smear rings; M=272;N=1;slope=0.;FS=1.',
     1' buck.(SAND);simp-support general buck;M=1;N=3;slope=3.4427;FS=',
     1' buck.(SAND);rolling with local buck.; M=1;N=1;slope=6.57;FS=1.',
     1' buck.(SAND);rolling with smear rings;M=110;N=1;slope=0.01;FS=1',
     1' buck.(SAND);rolling only of stringers;M=12;N=0;slope=0.;FS=1.6',
     1' buck.(SAND);hiwave roll. of stringers;M=92;N=0;slope=0.;FS=1.2',
     1' buck.(SAND); STRINGERS:  web buckling;M=7;N=1;slope=0.;FS=1.0',
     1' buck.(SAND);   RINGS:    web buckling;M=1;N=1;slope=0.186;FS=1',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' in which "SAND" = "Sanders shell theory", (M,N,slope)=buckling',
     1' mode (axial halfwaves,circ.halfwaves,slope of nodal lines)',
     1' and "FS" = "factor of safety".'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A)')
     1' If the user seeks additional buckling solutions [6], the',
     1' following additional buckling margins are computed:',
     1' ------------------- typical margin names ---------------------',
     1' buck.(SAND);simp-support local buck.; (0.95*altsol);FS=0.999', 
     1' buck.(SAND);simp-support inter-ring;  (1.00*altsol);FS=0.999', 
     1' buck.(SAND);simp-support general buck;(0.85*altsol);FS=0.999',
     1' --------------------------------------------------------------',
     1' in which the string "altsol" indicates that the margins were',
     1' computed with use of double trigonometric series expansions.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A)')
     1' In the presence of substiffeners [16] SUBROUTINE BUCPAN',
     1' computes the following additional buckling margins:'
        WRITE(IFILE8,
     1   '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ------------------- typical margin names ---------------------',
     1' buck.(SAND);rolling with skin buckl.;M=1;N=1;slope=0.175;FS=1.',
     1' buckling:simp-support of substring.M=1;FS=1.',
     1' buckling:simp-support of subrings  N=1;FS=1.',
     1' buckling:simp-support altsoln4  intermajorpatch; FS=0.999',
     1' buckling:simp-support altsoln5  skin+edgsubroll; FS=0.999',
     1' buck.(SAND);rolling with smear substr;M=1;N=1;slope=14.3;FS=1.',
     1' buckling:simp-support altsoln6  inter-subring  ; FS=0.999',
     1' buck.(SAND);rolling with smear subrng;M=43;N=1;slope=0.02;FS=1',
     1' buck.(SAND);rolling only of substring;M=29;N=0;slope=0.;FS=1.6',
     1' buck.(SAND);hiwave roll. of substring;M=31;N=0;slope=0.;FS=1.6',
     1' buck.(SAND);rolling only of subrings; M=0;N=3;slope=0.;FS=1.6',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' If one or more of the panel module segments is of sandwich',
     1' wall construction [10], SUBROUTINE GENSTB computes the',
     1' following additional margins (also see below for yet more',
     1' behavioral constraints relating to sandwich walls):',
     1' ------------------- typical margin names ---------------------',
     1' localbuck (VINSON);strng Iseg1 ;MID; local buck.; M=5;FS=1.1',
     1' Face1 wavelength/celldiam;STR;Iseg=1 ;Matl=2 ;MIDLENGTH;FS=1.',
     1' Core crushing margin;STR;Iseg=1 ;Matl 2 ;MIDLENGTH;FS=1.',
     1' L-dir. sandwich core shear;STR;Iseg=1 ;Matl 2 ;MIDLENGTH;FS=1.',
     1' W-dir. sandwich core shear;STR;Iseg=1 ;Matl 2 ;MIDLENGTH;FS=1.',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A)')
     1' If the stiffeners form an isogrid pattern (ISOGRD=1)[12], then',
     1' there are additional margins pertaining to the isogrid members',
     1' ------------------- typical margin names ---------------------',
     1' buck.(SAND);rolling only of isogrid3 ;M=1;N=0;slope=0.;FS=1.6',
     1' buck.(SAND);hiwave roll. of isogrid3 ;M=5;N=0;slope=0.;FS=1.2',
     1' buck.(SAND); ISOGRID  :  web buckling;M=4;N=1;slope=0.;FS=1.0',
     1' --------------------------------------------------------------',
     1' in which "isogrid3" means "the 3rd set of isogrid members".',
     1' (There are three sets of equally spaced isogrid members, the',
     1' three sets forming equilateral triangles).'
        WRITE(IFILE8,
     1   '(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A)')
     1' If the panel is a truss-core sandwich, Ref.[5], Fig.9, there',
     1' are additional margins, as follows:',
     1' ------------------- typical margin names ---------------------',
     1' buck.(DONL); STRINGERS:lower skin; M=69;N=1;slope=0.723;FS=1.0',
     1' buck.(DONL); STRINGERS:webbuckling;M=35;N=1;slope=-0.356;FS=1.',
     1' buck.(DONL); STRINGERS:upper skin; M=19;N=1;slope=0.2281;FS=1.',
     1' 0.45*(Stringer spacing, b)/(Stringer base width, b2) - 1;FS=1.',
     1' (Str. base width, b2)/(0.2*(Str. spacing, b)) - 1; FS=1.0',
     1' --------------------------------------------------------------',
     1' in which "DONL" means "Donnell shell theory" and "webbuckling"',
     1' indicates the most critical truss core web.'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,A,/,A)')
     1' If the panel is hat-stiffened, Ref.[1], Figs.19,20, there are',
     1' additional margins, as follows:',
     1' ------------------- typical margin names ---------------------',
     1' buck.(DONL); STRINGERS: under hat; M=18;N=1;slope=0.01;FS=1.0',
     1' buck.(DONL); STRINGERS: crown of hat;M=23;N=1;slope=0.;FS=1.0',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' PART 1.5',
     1' Computations that occur in SUBROUTINE STFEIG...',
     1' The purpose of SUBROUTINE STFEIG is to compute buckling load',
     1' factors for the various segments of the stiffeners. There is',
     1' a double loop: outer loop over K = 1,2 (1=stringers; 2=rings);',
     1' inner loop over I = ISTART,IEND, the segment number within the',
     1' stiffener. The buckling modes are of the type shown in Fig.5',
     1' in Ref.[2]. Examples of corresponding buckling margins are:'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ------------------- typical margin names ---------------------',
     1' buckling margin stringer Iseg.3. Local halfwaves=7. MID.;FS=1.',
     1' buckling margin stringer Iseg.4. Local halfwaves=7. MID.;FS=1.',
     1' buckling stringer Isegs.3+4 together.M=7  ;C=0.; MID.;FS=1.4',
     1' buckling stringer Iseg 4 as beam on foundation.M=221;MID.;FS=3',
     1' buckling margin   ring   Iseg.3. Local halfwaves=1. MID.;FS=1.',
     1' buckling   ring   Iseg 4 as beam on foundation.M=114;MID.;FS=3',
     1' ---------------------------------------------------------------'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' in which "Iseg" is the stiffener segment number used in the',
     1' prompts to the user during the interactive BEGIN execution,',
     1' "MID" = "midway between rings" and "FS" ="factor of safety".',
     1' In computing the stiffener buckling load factors, SUB. STFEIG',
     1' includes the effect of redistribution of stress resultants',
     1' between panel skin and stiffener segments caused by bending of',
     1' an initially imperfect shell subjected to its design load. For',
     1' example, see the listing for DNX, DNY, DNXY at the end of', 
     1' PART 1.1.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1   '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' The various buckling margins listed above are computed as',
     1' follows:',
     1' (a) buckling of "interior" stiffener segments (stiffener',
     1'     segments attached to other structure along both long',
     1'     edges): SUBROUTINE WEBBUK, called by SUBROUTINE CRIPPL.',
     1'     Linear variation of axial compression from web root to',
     1'     web tip is accounted for. See Items 120d and 121 in',
     1'     ../doc/panda2.news.',
     1' (b) buckling of "end" stiffener segments (stiffener segments',
     1'     attached to other structure along only one long edge):',
     1'     SUBROUTINE ENDBUK, called by SUBROUTINE CRIPPL. See Item',
     1'     121 in ../doc/panda2.news.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A)')
     1' (c) buckling of web and outstanding flange together:',
     1'     SUBROUTINE CRIPP2. The axial load in the stiffener web in',
     1'     this calculation is the average of that at the web root',
     1'     and that at the web tip. See panda2.news Items 30 and 516',
     1' (d) buckling of outstanding flange as beam on an elastic',
     1'     foundation. The elastic foundation is the web. (Item 383)',
     1' In addition, for truss-core sandwich walls the wide column',
     1' width-wise buckling of segments of the truss core and face',
     1' sheets are computed. In the case of isogrid stiffening, the',
     1' rolling of isogrid members assumed to be hinged along their',
     1' roots is computed in SUBROUTINE EIGISO. See [12],Item no. 122.' 
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1   '(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A)')
     1' If the stiffeners form an isogrid pattern [12] there exist',
     1' buckling margins of the following type:',
     1' ------------------- typical margin names ---------------------',
     1' buckling margin isogrd1  web. Local halfwaves=4  .MID.;FS=1.0',
     1' buckling margin isogrd2  web. Local halfwaves=4  .MID.;FS=1.0',
     1' buckling margin isogrd3  web. Local halfwaves=4  .MID.;FS=1.0',
     1' buckling margin isogrd3  flange. Local halfwaves=3.MID.;FS=1.0',
     1' buckling isogrd3  Isegs.3+4 together.M=4  ;C=0.;  MID.;FS=1.4',
     1' buckling isogrd3  stiff.no.J=3 ;panel MID.;M=1 ;FS=1.2',
     1' --------------------------------------------------------------',
     1' in which "isogrd1", "isogrd2", "isogrd3" mean "isogrid members',
     1' 1, 2, 3, respectively. (There are three sets of equally spaced',
     1' isogrid stiffeners that form equilateral triangles).'
        WRITE(IFILE8,'(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A)')
     1' If the panel is truss-core sandwich, Ref.[5],Fig.9, there are',
     1' additional margins, as follows:',
     1' ------------------- typical margin names ---------------------',
     1' buckling marg. stringer Iseg.(width-wise wide col.)MID.;FS=1.0',
     1' buckling marg. stringer Iseg.(width-wise wide col.)MID.;FS=1.0',
     1' buckling marg. stringer Iseg.(width-wise wide col.)NOPO;FS=1.0',
     1' buckling marg. stringer Iseg.(width-wise wide col.)NOPO;FS=1.0',
     1' --------------------------------------------------------------',
     1' in which Iseg = segment numbering as in "BEGIN"; "MID." =',
     1' "midway between rings" (midbay); "NOPO" = "no postbuckling".'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1   '(/,/,A,/,/,A,/,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' PART 1.6',
     1' Conservativeness of PANDA2 analyses',
     1' Designs generated by PANDA2 tend to be conservative because:',
     1' 1. In several instances there is more than one model of a',
     1'    particular phenomenon. {Example: general buckling from',
     1'    PANDA-type (closed form) theory [2] and general buckling',
     1'    from double trigonometric series expansion [6].} PANDA2',
     1'    retains the margins from both models so that the design',
     1'    that evolves during optimization cycles will be feasible',
     1'    with respect to both models.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 2. For imperfect shells the imperfection sensitivity knockdown',
     1'    factors generated from the PANDA-type theory [4] are',
     1'    applied to the double-trigonometric series "patch" models',
     1'    [6] even if the "patch" models yield buckling modes that',
     1'    do not resemble the corresponding buckling modes (local,',
     1'    inter-ring, general) from PANDA-type (closed form) theory.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 3. Knockdown factors are applied to the double-trig. series',
     1'    expansion models [6] to compensate for possible truncation',
     1'    error. For example, in the case of the general buckling',
     1'    "patch" model, a rather conservative knockdown factor 0.85',
     1'    is applied to the buckling load factor (in addition to the',
     1'    knockdown factor for imperfection sensitivity) in order to',
     1'    compensate for truncation of the double trigonometric',
     1'    series expansion.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 4. For imperfect cylindrical panels and shells subjected to',
     1'    pure axial compression or predominantly axial compression,',
     1'    [specifically:  SQRT(Nx^2 + Nxy^2)/ABS(Ny) > 10],',
     1'    a factor of 4.0 is applied to the initial amplitude of the',
     1'    imperfection specified by the user. This is done because',
     1'    hyperbolic growth of the imperfection amplitude is assumed',
     1'    to hold [6] as the applied load approaches the design load.'
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    This assumption is only valid if the buckling eigenvalues',
     1'    are well separated, as is true for axially compressed',
     1'    columns or externally pressurized cylindrical shells.',
     1'    For axially compressed, very thin cylindrical shells',
     1'    there exists a cluster of eigenvalues in the neighborhood',
     1'    of the "classical" buckling load, with the result that the',
     1'    initial imperfection grows more slowly than hyperbolically',
     1'    for low loads and more steeply than hyperbolically for high',
     1'    loads. The factor of 4.0 compensates for the approximation,',
     1'    of hyperbolic growth of the buckling modal imperfection',
     1'    amplitude; most likely it compensates conservatively.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' 5. In panels and shells with both stringers and rings, the',
     1'    stringers and rings are allowed to deform "through',
     1'    eachother" where they intersect. That is, they do not',
     1'    support eachother in any way where they intersect.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 6. The knockdown factor to compensate for the unconservative-',
     1'    ness of smearing rings is quite conservative, since it is',
     1'    computed with the use of a discretized "skin"-ring single',
     1'    module model with symmetry conditions applied at top and',
     1'    bottom, which simulates an infinitely long cylindrical',
     1'    shell. (See leftmost image, bottom row in Fig. 30 of [6]).'
        WRITE(IFILE8,'(A,/,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    The "smeared ring" knockdown factor is the ratio:',
     1'    (buckling load factor from the discretized module model)/',
     1'    (buckling load factor of a ring with the same cross-sect.)',
     1'    computed for the critical number of circumferential waves',
     1'    determined from a PANDA-type model with smeared rings and',
     1'    an axial length equal to the user-specified length. The',
     1'    knockdown factor is less than 1.0 primarily because the',
     1'    cross section of the discretized module model can deform',
     1'    whereas the ring cross section is assumed not to deform.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A)')
     1' 7. The knockdown factor for transverse shear deformation',
     1'    (t.s.d.) is on the conservative side. (See Fig. 25 on p.527',
     1'    of [1]).',
     1' 8. The buckling load factor for the outstanding flanges of',
     1'    stringers and rings, computed in SUBROUTINE ENDBUK (called',
     1'    by SUB.CRIPPL, which is called by SUB.STFEIG) is',
     1'    conservative because it is based on the assumption that the',
     1'    flange is simply supported where it joins the web tip.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,/,A,/,A,/,A)')
     1' 9. The buckling load factor for the web and outstanding flange',
     1'    of a stringer (or ring) (stiffener segment 3+4 buckling)',
     1'    is conservative because it is assumed that the web root is',
     1'    simply supported where it joins the panel skin.',
     1' 10.The buckling load factor of an outstanding flange acting as',
     1'    a beam on an elastic foundation is conservative because of',
     1'    the factor of safety of 3.0 applied to that kind of failure.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,/,A,/,A)')
     1' 11.The buckling load factor of a stringer and/or ring rolling',
     1'    without participation of the panel skin is conservative',
     1'    because of the factor of safety, F.S.=1.6, applied to that',
     1'    kind of failure. (For a picture of this kind of buckling',
     1'    see Fig. 6b, p. 546 of [2]).',
     1' 12.The knockdown factor to compensate for the unconservative-',
     1'    ness of smearing stringers is felt to be conservative.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 13.For panels stiffened by stringers and/or rings with cross',
     1'    sections that have outstanding flanges (not blades), the',
     1'    buckling load factors computed with use of the double',
     1'    trigonometric series expansions [6] will usually be',
     1'    conservative because the edges of the "altsol patch" are',
     1'    assumed to be simply supported rather than supported by a',
     1'    stiffener.' 
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 14.The "knockdown" factor for imperfection sensitivity (see',
     1'    PART 1.7) is often made smaller by multiplication by a',
     1'    ratio, (ARBOCZ/PANDA2), which is either unity or less than',
     1'    unity. In the ratio, (ARBOCZ/PANDA2):',
     1'    ARBOCZ = buckling load of perfect shell from ARBOCZ theory',
     1'             (see [5])',
     1'    PANDA2 = buckling load of perfect shell from PANDA-type',
     1'             (closed form) theory (see [2]).'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 15.PANDA2 computes a "knockdown" factor for imperfection',
     1'    sensitivity by iteratively computing an effective',
     1'    circumferential radius of curvature as described below and',
     1'    in Ref. [17]. The effective radius of the imperfect shell',
     1'    is larger than the nominal radius of the perfect shell',
     1'    because it corresponds to the local circumferential radius',
     1'    of curvature at the point on the shell surface where there',
     1'    is a maximum inward lobe of the general buckling modal',
     1'    imperfection pattern. Although this maximum circumferential'
        WRITE(IFILE8,'(A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'    radius of curvature is local, varying along the circum-',
     1'    ference because of the waviness of the general buckling',
     1'    modal imperfection shape, in PANDA2 it is assumed that the',
     1'    maximum circumferential radius of curvature of the',
     1'    imperfect shell is UNIFORM over the entire circumference',
     1'    of the panel. This is almost certainly a conservative',
     1'    model. See below and Ref. [17] for a more complete',
     1'    discussion of how imperfection sensitivity is handled in',
     1'    PANDA2. It is emphasized here that the theory used in',
     1'    PANDA2 is NOT the very conservative asymptotic "classical"',
     1'    imperfection sensitivity theory by Koiter.'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' ***********************************************************',
     1'  **** 2006: A NEW "CONSERVATIVENESS" INDEX, "ICONSV" *****',
     1' ***********************************************************'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' In 2006 a new "conservativeness" index, ICONSV, was',
     1' introduced as an input datum in the *.OPT file.',
     1' ICONSV= 1 generates the most conservative model.',
     1' ICONSV= 0 generates a model of intermediate conservativeness.',
     1' ICONSV=-1 generates the least conservative model.',
     1' Please see Section 9.0, Item No. 676 in [18] for details.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ICONSV = 1 (recommended model) means:',
     1'  a. Include ARBOCZ theory when computing knockdown',
     1'     factors for local, inter-ring, general buckling.',
     1'  b. Use more conservative knockdown factors for models',
     1'     in which the stringers are smeared.',
     1'  c. Use computed knockdown factor for smearing rings',
     1'  d. The Donnell shell theory is used in SUBROUTINE STRIMP,',
     1'     where imperfection sensitivity is being computed.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ICONSV = 0 (less conservative model) means:',
     1'  a. Do NOT include ARBOCZ theory when computing knockdown',
     1'     factors for local, inter-ring, general buckling.',
     1'  b. Use less conservative knockdown factors for models',
     1'     in which the stringers are smeared.',
     1'  c. Use computed knockdown factor for smearing rings',
     1'     (Same as for ICONSV = 1).',
     1'  d. The user-selected shell theory is used in SUBROUTINE',
     1'     STRIMP, where imperfection sensitivity is being',
     1'     computed.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ICONSV = -1 (still less conservative model) means:',
     1'  a. Do NOT include ARBOCZ theory when computing knockdown',
     1'     factors for local, inter-ring, general buckling.',
     1'     (Same as for ICONSV = 0)',
     1'  b. Use less conservative knockdown factors for models',
     1'     in which the stringers are smeared.',
     1'     (Same as for ICONSV = 0)',
     1'  c. Do NOT use computed knockdown factor for smearing rings',
     1'     (Knockdown factor for smearing rings = 1.0).'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1'  d. Set the knockdown factor for truncated double-trig',
     1'     series expansion (altsol) models to RFACT = 0.95.',
     1'     (RFACT=0.85 for "altsol" models in which there are',
     1'      smeared stiffeners if ICONSV = 0 or 1).',
     1'  e. The user-selected shell theory is used in SUBROUTINE',
     1'     STRIMP, where imperfection sensitivity is being',
     1'     computed.'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,/,A,/,/,A)')' PART 1.7',
     1' How the effect of imperfections is handled in PANDA2:'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' PANDA2 can optimize imperfect stiffened panels and shells [4].',
     1' Imperfections are assumed to be in the shapes of the general,',
     1' inter-ring, and local buckling modes obtained from the "PANDA-',
     1' type" model [2]. This section of PANDA2 applies to stiffened',
     1' panels with a general buckling modal imperfection, that is, an',
     1' imperfection shape that is determined from a model in which',
     1' the stiffeners are smeared out. A general buckling modal',
     1' imperfection in a stiffened shell has two major effects:'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' 1. The imperfect stiffened panel or shell bends as soon as any',
     1' loading is applied. This bending causes significant',
     1' redistribution of stresses between the panel skin and the',
     1' various stiffener parts, thus affecting significantly many',
     1' local and inter-ring buckling and stress constraints.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' 2. The "effective" curvature of an imperfect cylindrical panel',
     1' or shell depends on the amplitude of the initial imperfection,',
     1' on the circumferential wavelength of the critical buckling',
     1' mode of the perfect and of the imperfect shell, and on the',
     1' amount that the initial imperfection grows as the loading',
     1' increases from zero to the design load. The "effective"',
     1' circumferential radius of curvature of the imperfect and',
     1' loaded shell is larger than its nominal radius of curvature',
     1' because this radius corresponds to the maximum local radius of',
     1' a typical inward circumferential lobe of the initial and',
     1' subsequently load-amplified buckling modal imperfection.'
        WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' In PANDA2 this larger local radius of curvature is assumed to',
     1' be the governing radius in the buckling equations pertaining',
     1' to the imperfect shell. For each type of buckling modal',
     1' imperfection (general, inter-ring, local) PANDA2 computes a',
     1' "knockdown" factor based on the ratio:',
     1' (buckling load factor: panel with its "effective" radius)/',
     1' (buckling load factor: panel with its nominal radius)'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1   '(/,A,/,A,/,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' In the following "imperfection sensitivity" calculations',
     1' PANDA2 does the following (using Donnell shell theory if',
     1' ICONSV = 1 and using the user-selected shell theory if',
     1' ICONSV = 0 or ICONSV = -1):',
     1' 1. Computes the buckling load factor for a PERFECT panel',
     1'    from PANDA-type theory [2].',
     1' 2  Computes the buckling load factor for a PERFECT panel',
     1'    from ARBOCZ theory. Equations are from "The effect of',
     1'    initial imperfections on shell stability - an updated',
     1'    review" by Johann Arbocz, Faculty of Aerospace Engineering,',
     1'    Delft University of Technology, Report LR-695, Sept.1992.',
     1'    in particular, see Equation No. (3.61) in that report.',
     1'    This ARBOCZ theory is also described briefly in [5].'
        WRITE(IFILE8,
     1   '(/,A,/,A,/,/,A,/,A,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A)')
     1' 3. Computes the buckling load factor for an IMPERFECT panel',
     1'    from ARBOCZ theory.',
     1' 4. Computes the buckling load factor for an IMPERFECT panel',
     1'    from PANDA-type theory [2]. This is done iteratively',
     1'    since the "effective" circumferential radius of curvature',
     1'    of the imperfect panel depends on the buckling load',
     1'    factor that is being computed.',
     1' 5. Decides (partly depending on user-provided input) on',
     1'    whether to use the buckling mode for the PERFECT shell or',
     1'    the buckling mode of the IMPERFECT shell as the', 
     1'    imperfection shape.'
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE8,
     1       '(/,A,/,A,/,A,/,/,A,/,A,/,A,/,/,A,/,A,/,A,/,A,/,A)')
     1' 6. Computes the curvature changes and twist, Wxx, Wyy, Wxy,',
     1'    generated because of prebuckling bending of the imperfect',
     1'    shell as it is loaded by the design load.',
     1' 7. Presents a summary of "knockdown" factors to be used in',
     1'    connection with local, inter-ring, and general buckling of',
     1'    the stiffened shell.',
     1' For more information on the behavior of imperfect stiffened',
     1' shells, please see the following news items in the file,',
     1' ..doc/panda2/news: 377, 456, 525, 553, 564, 594, and 596.',
     1' Also, please read the papers [4], [5], and especially [17].',
     1' Study Sections 11 - 14 and Tables 9 and 10 of [17].'
C END DEC 2005
      WRITE(IFILE8,'(/,/,A,/,A)')
     1' ************* PANDA2 REFERENCES ***************',
     1' ABOUT PANDA2:'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [1] Bushnell, D.,',
     1' "PANDA2 - Program for minimum weight design of stiffened,',
     1'  composite, locally buckled panels", COMPUTERS AND STRUCTURES,',
     1'  Vol. 25, No. 4, pp 469-605, 1987'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [2] Bushnell, D.,',
     1' "Theoretical basis of the PANDA computer program for',
     1'   preliminary design of stiffened panels under combined in-',
     1'   plane loads", COMPUTERS AND STRUCTURES, v. 27, No. 4,',
     1'   pp 541-563 (1987).'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [3] Bushnell, D.,',
     1' "Optimization of composite, stiffened, imperfect panels',
     1'  under combined loads for service in the postbuckling',
     1'  regime", Computer Methods in Applied Mechanics and',
     1'  Engineering, Vol. 103 (1993) 43-114'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [4] Bushnell, D. and Bushnell, W. D.,',
     1' "Approximate method for the optimum design of ring and',
     1'  stringer stiffened cylindrical panels and shells with',
     1'  local, inter-ring, and general buckling modal imperfections"',
     1'  Computers and Structures, Vol. 59, No. 3, pp 489-527 (1996)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [5] Bushnell, D.,',
     1' "Recent enhancements to PANDA2" AIAA Paper 96-1337-CP,',
     1'  Proc. AIAA 37th Structures, Structural Dynamics and',
     1'  Materials Conference, pp 126-182, April, 1996.'
C     
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [6] Bushnell, D., Jiang, H., and Knight, N.F.,',
     1' "Additional buckling solutions in PANDA2", Proceedings',
     1'  40th AIAA SDM Conference, AIAA Paper 99-1233, pp 302-345',
     1'  April 1999'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [7] Bushnell, D. and Rankin, C.C.,',
     1' "Optimization of perfect and imperfect ring and stringer',
     1'  stiffened cylindrical shells with PANDA2 and evaluation',
     1'  the optimum designs with STAGS", AIAA Paper 2002-1408,',
     1'  Proc. AIAA 43rd SDM Meeting, pp 1562-1613, April 2002'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [8] Bushnell, D. and Bushnell, W.D.,',
     1' "Minimum-weight design of a stiffened panel via PANDA2 and',
     1'  evaluation of the optimized panel via STAGS",',
     1'  Computers and Structures, Vol. 50, No. 4, pp 569-602 (1994)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [9] Bushnell, D. and Bushnell, W.D.,',
     1' "Optimum design of composite stiffened panels under combined',
     1'  loading", Computers and Structures,Vol. 55, pp 819-856 (1995)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [10] Bushnell, D.,',
     1' "Optimum design via PANDA2 of composite sandwich panels with',
     1'  honeycomb or foam cores", AIAA Paper 97-1142, Proc. 38th AIAA',
     1'  Structures, Structural Dynamics and Materials Conference,',
     1'  pp 2163-2202, April, 1997'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [11] Bushnell, D., Rankin, C.C., and Riks, E.,',
     1' "Optimization of stiffened panels in which mode jumping is',
     1'  accounted for", AIAA Paper 97-1141, Proc. 38th AIAA SDM',
     1'  Conference, pp 2123-2162, April 1997'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [12] Bushnell, D.,',
     1' "Global optimum design of externally pressurized isogrid',
     1'  stiffened cylindrical shells with added T-rings", Int. J.',
     1'  Non-Linear Mechanics, Vol. 37, Nos 4-5, pp 801-831 (2002)'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [13] Bushnell, D.,',
     1' "Optimization of panels with riveted Z-shaped stiffeners via',
     1'  PANDA2", in Advances in the Mechanics of Plates and Shells,',
     1'  Durban, D, Givoli, D., and Simmonds, J.G., Eds, Kluwer',
     1'  Academic Publishers, pp 79-102 (2001)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [14] Bushnell, D.,',
     1' "Truss-core sandwich design via PANDA2", Computers and',
     1'  Structures, Vol. 44, No. 5, pp 1091-1119 (1992)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [15] Bushnell, D., Holmes, A.M.C., Flaggs, D.L., McCormick,',
     1'  P.J., "Optimum design, fabrication and test of graphite-',
     1'  epoxy curved, stiffened, locally buckled panels loaded in',
     1'  axial compression", in BUCKLING OF STRUCTURES, edited by',
     1'  I. Elishakoff, et al, Elsevier, Amsterdam, pp 61-131, 1988'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [16] Bushnell, D. and Rankin, C.C.,',
     1' "Optimum design of stiffened panels with substiffeners",',
     1' AIAA Paper 1932, 46th AIAA Structures, Structural Dynamics and',
     1' Materials Meeting, Austin, TX, April 2005'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [17] Bushnell, D. and Rankin, C.C.,',
     1' "Difficulties in optimization of imperfect stiffened',
     1' cylindrical shells",',
     1' AIAA Paper 1943, 47th AIAA Structures, Structural Dynamics and',
     1' Materials Meeting, Newport RI, April 2006'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [18] Bushnell, D.',
     1' "Optimization of an axially compressed ring and stringer',
     1' stiffened cylindrical shell with a general buckling modal',
     1' imperfection", AIAA Paper 2007-2216, 48th AIAA SDM Meeting,',
     1' Honolulu, Hawaii, April 2007'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [19] Bushnell, D., .../panda2/doc/panda2.news, a continually',
     1' updated file distributed with PANDA2 that contains a log of',
     1' all significant modifications to PANDA2 from 1987 on.'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [20] Vanderplaats, G. N., "ADS--a FORTRAN program for',
     1' automated design synthesis, Version 2.01", Engineering Design',
     1' Optimization, Inc, Santa Barbara, CA, January, 1987'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [21] Vanderplaats, G. N. and Sugimoto, H., "A general-purpose',
     1' optimization program for engineering design", Computers and',
     1' Structures, Vol. 24, pp 13-21, 1986'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [22] Koiter, W. T., "Het Schuifplooiveld by Grote',
     1' Overshrijdingen van de Knikspanning", National Luchtvaart',
     1' Laboratorium, The Netherlands, Report X295, November 1946',
     1' (in Dutch)'

      WRITE(IFILE8,'(/,/,A)')
     1' ABOUT BOSOR4:'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [1B]  Bushnell, D.,',
     1' "Stress, stability and vibration of complex, branched',
     1'  shells of revolution", Computers & Structures, vol. 4,',
     1'  pp 399-435 (1974)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [2B]  Bushnell, D.,',
     1' "Buckling of Shells--Pitfall for Designers", AIAA Journal,',
     1'  Vol. 19, No. 9, September, 1981, pp. 1183-1226'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [3B]  Bushnell, D.,',
     1' "Computerized Analysis of Shells--Governing Equations",',
     1'  Computers & Structures, Vol. 18, pp.471-536, 1984'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [4B]  Bushnell, D.,',
     1'  COMPUTERIZED BUCKLING ANALYSIS OF SHELLS,',
     1'  published by Nijhoff, The Netherlands, 1985, reprinted',
     1'  by Kluwer Academic Publishers, 1989'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' [5B]  BOSOR4 Bushnell,D.,',
     1' "BOSOR4--Program for stress, buckling, and vibration of',
     1'  complex shells of revolution," in STRUCTURAL MECHANICS',
     1'  SOFTWARE SERIES, vol. 1, Univ. Press of Virginia, pp 11-143,',
     1'  1977. Also, see also, STRUCTURAL ANALYSIS SYSTEMS, Vol. 2,',
     1'  Editor: A. Niku-Lari, Pergamon Press, 1986, pp 25-54'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [6B]  BOSOR4 Bushnell, D.,',
     1' "Stress, buckling and vibration of prismatic shells",',
     1'  AIAA Journal, Vol. 9, No. 10, pp 2004-2013, Oct. 1971'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A,/,A)')
     1' [7B]  BOSOR4 Bushnell, D.,',
     1' "Automated optimum design of shells of revolution with',
     1' application to ring-stiffened cylindrical shells with wavy',
     1' walls", AIAA Paper 2000-1663, 41st AIAA Structures Meeting,',
     1' Atlanta, GA, April 2000. Also see: Lockheed Rept LMMS P525674,',
     1' November, 1999'
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C
      WRITE(IFILE8,'(/,/,A)')
     1' ABOUT STAGS:'
C
      WRITE(IFILE8,'(/,A,/,A)')
     1' [1S] B. O. Almroth, F. A. Brogan, "The STAGS Computer Code",',
     1'  NASA CR-2950, NASA Langley Research Center, Hampton, Va.(1978)'
C
      WRITE(IFILE8,'(/,A,/,A,/,A)')
     1' [2S] C. C. Rankin, P. Stehlin and F. A. Brogan,',
     1' "Enhancements to the STAGS computer code", NASA CR 4000,',
     1'  NASA Langley Research Center, Hampton, Va, November 1986'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A,/,A)')
     1' [3S] Riks, E., Rankin C. C., Brogan F. A., "On the solution',
     1' of mode jumping phenomena in thin walled shell structures",',
     1' First ASCE/ASM/SES Mechanics Conference, Charlottesville, VA,',
     1' June 6-9, 1993, in: Computer Methods in Applied Mechanics and',
     1' Engineering, Vol.136, 1996.'
C
      WRITE(IFILE8,'(/,A,/,A,/,A,/,A)')
     1' [4S] G. A. Thurston, F. A. Brogan and P. Stehlin,',
     1' "Postbuckling analysis using a general purpose code",',
     1'  AIAA Journal, 24, (6) (1986) pp. 1013-1020.',
     1' *************** END PANDA2 LITERATURE *********************'
C
      ENDIF
C     End of (NPRINT.GE.2) condition
C END DEC 2003
      IF (ITYPE.EQ.2.OR.ITYPE.EQ.3.OR.ITYPE.EQ.4.OR.ITYPE.EQ.5)
     1   GO TO 135
C*****************************************************************
C END INITIALIZATION AND READING INPUT FROM NAME.OPT FILE.
C*****************************************************************
C  LOOP OVER THE NUMBER OF LOAD SETS...
C
      IMOD = 0
      KSCAPE = 0
C BEG APR 1997
      IMANY = 0
C END APR 1997
C
C****************************************************************
C BEGIN OPTIMIZATION LOOP.
C****************************************************************
    6 CONTINUE
C
C BEG FEB 2009
      JJ1 = JJJ + 1
      CONMXJ(JJ1) = CONMAX
C END FEB 2009
      CALL MOVER(0,0,NUMCON,1,10)
      CALL MOVER(0.,0,CONST1,1,99)
      CALL MOVER(0,0,NCONS1,1,10)
      CALL MOVER(0.,0,CONST2,1,990)
      CALL MOVER(1000000.,0,CONSML,1,10)
      CONSMT = 1000000.
      IDO1 = 0
      DO 1042 I = 1,99
         WORDB1(I) = ' '
         DO 1041 J = 1,5
         DO 1040 K = 1,2
            WORDB2(I,J,K) = ' '
 1040 CONTINUE
 1041 CONTINUE
 1042 CONTINUE
      IEND = 0
      IBEG = 1
    4 FORMAT(///' ************** NEXT LOAD SET *****************'/
     1          ' ************** NEXT LOAD SET *****************'/
     1          ' ************** NEXT LOAD SET *****************')
C
C     CALL MOVER(IQSAVE,1,IQUICK,1,5)
C
      IF (IMOD.EQ.0) WRITE(13) NLOADS
C
      DO 105 ILOADS = 1,NLOADS
C BEG NOV 2003
      IALTSZ = IALTSN
      IF (IALTSZ.EQ.1.AND.ISTIF(1).EQ.3.AND.IQUICK(ILOADS).EQ.1) THEN
         IALTSN = 0
         IALTSV = IALTSN
	 WRITE(IFILE8,'(/,/,A,I2,A,/,A,I2,A,/,A,/,A)')
     1 ' *************** LOAD CASE NO.',ILOADS,'  ****************',
     1 ' ***NOTE: Rectangular stringers and IQUICK(',ILOADS,')=1',
     1 ' Therefore, there will be no alternate buckling solns',
     1 ' for this load case.'
      ENDIF
C END NOV 2003
C
      IWEAK = 0
      NCASES = 1
      IF (PRESS(ILOADS).NE.0.0.AND.IBPRE.EQ.1) IBPREL(ILOADS) = 1
      IF (IBPREL(ILOADS).EQ.1) NCASES = 2
C BEG MAR 1996
C     IF (PRESS(ILOADS).NE.0.0) NCASES = 2
      IF (PRESS(ILOADS).NE.0.0.AND.IBEAM.EQ.0) NCASES = 2
C BEG APR 1997
C     IF (IBPRE.EQ.1.AND.WIMPG(ILOADS).NE.0.0.AND.ISTIF(2).EQ.0)
C    1                          NCASES = 2
C BEG MAY 1997
      IF (IBPRE.LE.1.AND.WIMPG(ILOADS).NE.0.0.AND.ISTIF(2).EQ.0)
     1                          NCASES = 2
C END MAY 1997
C END APR 1997
C END MAR 1996
C BEG SEP 1995
      IF (IFLAT.EQ.0.AND.IBPRE.EQ.1) NCASES = 2
C END SEP 1995
C BEG NOV 2003 (move next statement down.)
C     IF (IBPRE.EQ.2) NCASES = 1
C BEG NOV 2003
      IF (ISTIF(1).NE.0.AND.IFLAT.EQ.0.AND.IBPRE.NE.2
     1                 .AND.FNXX(ILOADS).LT.0.) NCASES = 2
C BEG MAR 1995
      IF (ISTIF(2).NE.0.AND.IFLAT.EQ.0) NCASES = 2
      IF (ITYPE.EQ.1.OR.ITYPE.EQ.2) THEN
         IF (MCASE(ILOADS).EQ.1) NCASES = 1
      ENDIF
C END MAR 1995
C BEG NOV 2003
      IF (IBPRE.EQ.2) NCASES = 1
C END NOV 2003
C BEG OCT 2004
      IF (WIMPG(ILOADS).NE.0.0) NCASES = 2
C END OCT 2004
      NCASEX(ILOADS) = NCASES
      ILS = ILOADS
      IF (IMOD.EQ.0) WRITE(13) NCASES
      IF (IMOD.EQ.0) CALL MOVER(1.,0,FMULT,1,1600)
      IF (IMOD.EQ.0.AND.ITEMP(ILOADS).EQ.1) THEN
         CALL MATMLT(IMOD,JJJ,IFILE8,ILOADS,NPRINT,TEMP(1,1,ILOADS),
     1                FMULT)
      ENDIF
      IFREEY = IFREEL(ILOADS)
C BEG MAY 1998
      IF (ISTIF(1).EQ.4.AND.ITEMP(ILOADS).EQ.0) IFREEY = 0
C END MAY 1998
      DO 104 ICASES = 1,NCASES
C BEG JUN 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
      JJKSCP = JJJ + 1 + KSCAPE
      IF (ITYPE.EQ.1.AND.IQUICK(ILOADS).EQ.0.AND.ISTIF(1).NE.0) THEN
        IF (B(1).GE.ABS(RX)/3.) ISKIPV(JJKSCP,ILOADS,ICASES) = 1
        IF (B(1).GE.5.*B(2)) ISKIPV(JJKSCP,ILOADS,ICASES) = 1
      ENDIF
C END JUN 2004
C BEG FEB 1995  (COMMENTED OUT BECAUSE RING MAY FAIL BY ITSELF)
C     IF (ICASES.EQ.2.AND.IWEAK.EQ.1) THEN
C        NCAR = 0
C        GO TO 101
C     ENDIF
C END FEB 1995
C BEG JAN 1996
C     IF (ISKIP(ILOADS,ICASES).EQ.1) THEN
      IF (ISKIPX(ILOADS,ICASES).EQ.0.AND.
     1     ISKIP(ILOADS,ICASES).EQ.1) THEN
C BEG MAY 2003
C        ISKIPZ(JJJ+1,ILOADS,ICASES) = 1
         ISKIPZ(JJKSCP,ILOADS,ICASES) = 1
C END MAY 2003
C END JAN 1996
C BEG DEC 2003
         IF (NPRINT.GT.-1) WRITE(IFILE8,1029) ILOADS,ICASES
C END DEC 2003
 1029 FORMAT(/' ******* NOTE ******* NOTE ******** NOTE ********'/
     1' SKIPPING LOAD CASE NO.',I2,', SUBCASE NO.',I2,' BECAUSE'/
     1' THE SMALLEST MARGIN COMPUTED IN THE FIRST DESIGN ITERATION'/
     1' WAS LARGE ENOUGH TO BE IGNORED IN THIS "PANDAOPT", OR THE'/
     1' MARGINS IN SUBCASE 2 ARE ESSENTIALLY THE SAME AS THOSE'/
     1' IN SUBCASE 1, OR THE MARGINS FOR THIS LOAD CASE AND SUBCASE'/
     1' ARE NEARLY THE SAME AS THOSE FOR AN EARLIER LOAD CASE AND'/
     1' SUBCASE.'/
     1' ******* END NOTE ******* END NOTE ******* END NOTE ********'/)
C BEG MAY 2003
C BEG JUN 2004
C       IF (NPRINT.GE.2)
C    1  WRITE(IFILE8,'(A,/,11I5)')' JJJ,JJKSCP,ILOADS,ICASES,ISKIPZ=',
C    1       JJJ,JJKSCP,ILOADS,ICASES,(ISKIPZ(I,ILOADS,ICASES),I=1,7)
C END JUN 2004
C END MAY 2003
         NCAR = 0
         GO TO 101
      ENDIF
      IPRTOP = 0
      IF (JJJ.EQ.0.AND.ILOADS.EQ.1.AND.ICASES.EQ.1
     1            .AND.ITYPE.EQ.1.AND.NPRINT.EQ.1) IPRTOP = 1
C
      IF (NLOADS.GT.1.AND.NPRINT.GE.1) WRITE(IFILE8,4)
      CALL CONVR1(ILOADS,CILOAD)
      CALL CONVR1(ICASES,CICASE)
      IF (IMOD.EQ.0) CALL MOVER(1.,0,CRACK,1,990)
      IF (ILOWVE(ILOADS).EQ.1.AND.JJJ.GE.(ITER-1))
     1      ILOW(ILOADS,ICASES)=0
      KOUNTM = 0
      MARK   = 0
      MARK2  = 0
      MARK3  = 0
      ICWEBL = 0
      IFREEB = IFREEX(ILOADS)
      EXAVEA = EXAVGA(ILOADS)
      NMAX   = NMAXX(ILOADS)
      FNX    = FNXX(ILOADS)
      FNY    = FNYY(ILOADS)
      FNXY   = FNXXYY(ILOADS)
      FNX0   = FNX00(ILOADS)
      FNY0   = FNY00(ILOADS)
      FNXY0  = FNXY00(ILOADS)
      P      = PRESS(ILOADS)
      PKEEP  = P
      IHYDRO = KHYDRO(ILOADS)
      FXBEG  = FNXBEG(ILOADS)
      FXEND  = FNXEND(ILOADS)
      FYBEG  = FNYBEG(ILOADS)
      FYEND  = FNYEND(ILOADS)
      FXYBEG = FNXYBG(ILOADS)
      FXYEND = FNXYEN(ILOADS)
      FNSQ = SQRT(FNX**2 + FNY**2 + FNXY**2)
C BEG MAR 1996
      IF (JJJ.EQ.0) FNSQS(ILOADS) = FNSQ
      IF (FNSQS(ILOADS).EQ.0.0) THEN
         WRITE(IFILE8,9)
    9    FORMAT(/' ********** NOTICE   NOTICE   NOTICE *********'/
     1 ' ALL IN-PLANE LOADS (Nx, Ny, Nxy) IN LOAD SET "A" ARE ZERO.'/
     1 ' THE AXIAL RESULTANT, Nx, IS BEING RESET TO -0.00001.'/
C    1 ' VALUE IS TOO BIG (SO THAT IT HAS AN UNACCEPTABLY LARGE'/
C    1 ' EFFECT IN YOUR CASE), PLEASE RESET Nx, VIA "MAINSETUP",'/
C    1 ' EQUAL TO SOME SUITABLE, SMALL, NON-ZERO, NEGATIVE VALUE.'/
     1 ' *********************************************'/)
         FNX = -0.00001
         FNXX(ILOADS) = FNX
         IF (IBEAM.EQ.0) FNXY = -.005*FNX
C END MAR 1996
         FNXXYY(ILOADS) = FNXY
         FNSQ = SQRT(FNX**2 + FNY**2 + FNXY**2)
      ENDIF
      NTENSN = 0
      IF (FNX.GE.0.0.AND.FNY.GE.0.0) NTENSN = 1
      NLOGC1 = ABS(FNXY).GT.(0.999*FNSQ)
      NLOGC2 = NTENSN.EQ.1.AND.FNXY.NE.0.0
      IF ((NLOGC1.OR.NLOGC2).AND.IQUICK(ILOADS).EQ.0) THEN
         WRITE(IFILE8,*)' ********** NOTICE   NOTICE   NOTICE *********'
         WRITE(IFILE8,*)' LOADING IS PURE IN-PLANE SHEAR OR IS IN-PLANE'
         WRITE(IFILE8,*)' SHEAR COMBINED WITH POSITIVE Nx AND Ny.'
         WRITE(IFILE8,*)' HENCE, THE IQUICK = 0 OPTION IS NOT AVAILABLE'
         WRITE(IFILE8,*)' NOR CAN'
         WRITE(IFILE8,*)' POSTBUCKLING ANALYSIS BE DONE FOR THIS LOAD'
         WRITE(IFILE8,*)' SET. IQUICK IS BEING CHANGED FROM 0 TO 1,'
         WRITE(IFILE8,*)' AND CALCULATIONS ARE PROCEEDING. IF YOU WANT'
         WRITE(IFILE8,*)' TO USE THE IQUICK = 0 OPTION WITH LOADING'
         WRITE(IFILE8,*)' IN WHICH IN-PLANE SHEAR PREDOMINATES, PLEASE'
         WRITE(IFILE8,*)' INCLUDE AXIAL COMPRESSION THAT IS AT LEAST'
         WRITE(IFILE8,*)' 10 PERCENT OF THE IN-PLANE SHEAR LOAD.'
         WRITE(IFILE8,*)' ********************************************'
         IQUICK(ILOADS) = 1
         IQSAVE(ILOADS) = 1
         KOITER = 0
         IF (FSLOC(ILOADS).LT.1.) FSLOC(ILOADS) = 1.
      ENDIF
C BEG OCT 1998
C    SEVERAL STATEMENTS INVOLVING "IYXXX" INITIALIZATION REMOVED.
C END OCT 1998
C
   10 CONTINUE
C
      IFAIL = 0
C
      IMOD = 0
C BEG DEC 2004
      NWAVES(ILOADS,ICASES) = 1
      IF (NPRINT.GE.1)
     1WRITE(IFILE8,'(A,3I6)')' ILOADS,ICASES,NWAVES(ILOADS,ICASES)=',
     1                         ILOADS,ICASES,NWAVES(ILOADS,ICASES)
C END DEC 2004
      IF (IESCAP.NE.0) THEN
         IF (NPRINT.GE.0) WRITE(IFILE8,11) JJJ
   11 FORMAT(//' ***************************************************'/
     1         ' ***************************************************'/
     1         ' ***************************************************'/
     1         ' STRUCTURAL ANALYSIS FOR DESIGN ITERATION',I3,'.'/
     1' NEW DESIGN WAS OBTAINED VIA CHANGE IN ESCAPE VARIABLES RATHER'/
     1' THAN VIA ADS.'/)
C
      ARGSTR = ' CURRENT VALUES OF THE ESCAPE VAR'//
     $         'IABLES FOR THE OPTIMIZATION RUN  '
      CALL OUTV2(IFILE8,1,NESCAP,ESC,VAR,WORDE,ARGSTR)
C BEG DEC 2004
C     NWAVES(ILOADS,ICASES) = 1
C     WRITE(IFILE8,'(A,3I6)')' ILOADS,ICASES,NWAVES(ILOADS,ICASES)=',
C    1                         ILOADS,ICASES,NWAVES(ILOADS,ICASES)
C END DEC 2004
C
      IF (NPRINT.GE.0) WRITE(IFILE8,111)
  111 FORMAT(/
     1         ' ***************************************************'/
     1         ' ***************************************************'/
     1         ' ***************************************************'//)
C
      ENDIF
C
      IF (IESCAP.EQ.0) THEN
         IF (ILOADS.EQ.1.AND.ICASES.EQ.1) WRITE(IFILE8,12) JJJ
   12  FORMAT(//' ***************************************************'/
     1' ****************************************************'/
     1' STRUCTURAL ANALYSIS FOR DESIGN ITERATION NO.',I4,':')
         IF (NPRINT.GE.1.AND.(JJJ.EQ.0.OR.NLOADS.GT.1)) THEN
            CASEW ='PANEL ENDS     '
            IF (ATRNG) CASEW ='AT RINGS       '
            IF (IABP(ILOADS).EQ.0) THEN
               WRITE(IFILE8,139)
     1             ILOADS,ICASES,CASEW,
     1             FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1             FNX0,FNY0,FNXY0,-P
            ELSE
               WRITE(IFILE8,1391)
     1             ILOADS,ICASES,CASEW,
     1             FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1             -P,FNX0,FNY0,FNXY0
            ENDIF
         ENDIF
      ENDIF
      IESCAP = 0
C BEG FEB 1996
      PBEIGK = 10.E+16
      PBEIGB = 10.E+16
C END FEB 1996
C
C BEG JAN 1999
C        ATRING = IFLAT.EQ.0.AND.ISTIF(2).NE.0.AND.P.NE.0.0
         ATRING =                ISTIF(2).NE.0.AND.P.NE.0.0
C END JAN 1999
         IF (ATRING) WLOC(2) = 'AT RINGS       '
         WRITE(IFILE8,'(A)')'  '
         WRITE(IFILE8,'(A)')'  '
         WRITE(IFILE8,'(A)')' ****************************************'
         WRITE(IFILE8,'(A,3I4,5X,A)')
     1     ' ITERATION NO., LOAD SET NO., SUBCASE NO. =',
     1       JJJ, ILOADS, ICASES, WLOC(ICASES)
         WRITE(IFILE8,'(A)')' ****************************************'
C
C********************************************************************
C BEGIN ANALYSIS FOR CURRENT UNPERTURBED DESIGN.
C********************************************************************
C
C BEG DEC 1996
      ILOWJJ = ILOW(ILS,ICASES)
C END DEC 1996
C BEG OCT 1998

C     write(IFILE8,667) '1st', NVARB
C 667 format (/,' calling STRUCT(---) the ',A,' time with NVARB = ',
C    $         I5,/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      CALL STRUCT(IFILE8,IMOD,IW,ILOC,DS,W(N5),W(N6),W(N4),
     1  W(N7),W(N8),W(N9),W(N10),W(N11),W(N12),NCONST,CONSTR,WORDB,
     1  IADDB,OBJ,WORDOB,NWAVES(ILS,ICASES),NSERCH(ILS),EIGSAV,EPS1,
     1  EPS2,EPS12,NMAX,IQUIT(ILS),0,KOITER,JJJ,IREDUC(ILS),CONMAX,
     1  ILS,FSGEN(ILS),FSPAN(ILS),FSLOC(ILS),FSSTR(ILS),IQUICK(ILS),
     1  IPOINC,INUMTT,EIGBOW(ILS),CRACK,IWG,ILOCG,DSG,W(N5G),W(N6G),
     1  W(N4G),W(N7G),W(N8G),W(N9G),W(N10G),W(N11G),W(N12G),IGENRL(ILS),
     1  0,EIGDIS(1,ILS),EALLST,CSLOPE,M0,ALPB,FSQ,ITYPE,IFILE4,IPROMP,
     1  IOUT,ILOW(ILS,ICASES),P,IWIDE(ILS),MCRIP,NCRIP,IOBJ,WIMPG(ILS),
C BEG DEC 2001
     1  WIMPL(ILS),NOCONV,IABP(ILS),ECC(ILS),ILONG,IEND,NLOADS,
C END DEC 2001
     1  IWR,ILOCR,DSR,W(N5R),W(N6R),W(N4R),W(N7R),W(N8R),W(N9R),W(N10R),
C BEG JUL 1999
     1  W(N11R),W(N12R),IFREEB,ILOWVE(ILS),IWCON(ILS),WPGMAX(ILS),
     1  KOUNTM,MARK,MARK2,MARK3,ICWEBL,ICASES,IBPREL(ILS),VAR,ISTOPP,
     1  TEMP(1,1,ILS),FMULT,IMTEMP(ILS),FSBSTR(ILS),IPOPX(ILS),ILAMB2,
     1  ILAM34,MX(ILS),MY(ILS),NCASES,ITRUSS,IABT(ILS),EIGBOP,IHOOP,
C BEG DEC 2001
     1 WIMPG1(ILS),WIMPG2(ILS),NVARB,ISUB,WORDV,IICURV(ILS),IIKOIT(ILS))
C END DEC 2001
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUL 1999
C END OCT 1998
C
C
      IF (ILOADS.EQ.1.AND.ICASES.EQ.1) THEN
      CALL OUTOPT(IFILE8,NVARB,IDEC,ISCAPE,ILV,CLINK,IDLINK,VARLOW,
     1 VARHI,VAR,WORDV,
     1 '         SUMMARY OF INFORMATION FROM OPTIMIZATION ANALYSIS      
     1  ',57)
C
      ENDIF
      IF (IQUIT(ILOADS).EQ.1) THEN
         WRITE(IFILE8,14) NWAVES(ILOADS,ICASES),NMAX
   14    FORMAT(//' QUITTING BECAUSE THE NUMBER OF AXIAL WAVES EXCEEDS'/
     1            ' THE MAXIMUM PERMITTED BY  NMAX:'//
     1            ' NUMBER OF AXIAL WAVES IS CURRENTLY',I10/
     1            ' MAXIMUM ALLOWABLE NUMBER OF AXIAL WAVES  =',I10//
     1            ' PLEASE DO ONE OF THE FOLLOWING:'//
     1            '  1. INCREASE THE VALUE OF NMAX, THE MAXIMUM'/
     1            '     ALLOWABLE NUMBER OF AXIAL WAVES, AND RUN'/
     1            '     AGAIN.'//
     1            '  2. FIND OUT WHAT THE LOCAL BUCKLING MODE LOOKS'/
     1            '     LIKE BY RUNNING AGAIN WITH PRINT OPTION 2.'/)
         WRITE(IFILE8,15)
   15    FORMAT(' IF THE MODE SHAPE INDICATES THAT LOCAL BUCKLING FOR'/
     1          ' THE NUMBER OF AXIAL WAVES  N = NMAX  IS STILL SKIN'/
     1          ' BUCKLING AND NOT STIFFENER CRIPPLING, THEN INCREASE'/
     1          ' NMAX AND RUN AGAIN.  IF THE MODE SHAPE INDICATES'/
     1          ' CRIPPLING (BUCKLING IN ONE OF THE STIFFENER SEGMENTS'/
     1          ' INSTEAD OF IN THE SKIN), THEN IN FUTURE RUNS DO NOT'/
     1          ' PERMIT  N   TO VARY, BUT RESTRICT IT TO SOME LOWER'/
     1          ' VALUE FOR WHICH THE CORRESPONDING MODE OF BUCKLING'/
     1          ' IS SKIN BUCKLING RATHER THAN STIFFENER CRIPPLING.'/)
         CALL ERREX
      ENDIF
C
      IF (NCONST.EQ.0) THEN
         WRITE(IFILE8,*)'     NO CRITICAL MARGINS FOR THIS CONDITION.'
C BEG MAY 2003
         IF (ILOADS.GT.1.AND.ISKIPX(ILOADS,ICASES).EQ.0)
     1                              ISKIP(ILOADS,ICASES) = 1
C END MAY 2003
         IF (ILOADS.EQ.NLOADS.AND.ICASES.EQ.NCASES) THEN
            IF (NPRINT.GE.1) WRITE(IFILE8,19)
            ARGSTR = '   CURRENT VALUE OF THE OBJECTIVE'//
     $               ' FUNCTION:                       '
            CALL OUTVAR(1,OBJ,WORDOB,IADDD,ARGSTR,IFILE8,65,0,ISUB)
C BEG JUN 2004
            WRITE(IFILE8,'(/,A,1P,E12.4,/,A,1P,E12.4)')
     1   '  TOTAL WEIGHT OF SKIN                            = ',WGTSKN,
     1   '  TOTAL WEIGHT OF SUBSTIFFENERS                   = ',WGTSUB
C END JUN 2004
C BEG APR 1997
            WRITE(IFILE8,'(A,1P,E12.4,/,A,1P,E12.4,/,A,1P,E12.4)')
     1   '  TOTAL WEIGHT OF STRINGERS                       = ',WGTSTR,
     1   '  TOTAL WEIGHT OF RINGS                           = ',WGTRNG,
     1   '  SPECIFIC WEIGHT (WEIGHT/AREA) OF STIFFENED PANEL= ',WGTSPC
C END APR 1997
            IF (NPRINT.GE.1) WRITE(IFILE8,21)
         ENDIF
         GO TO 101
      ENDIF
      DO 17 I = 1,NCONST
   17 CONPRT(I) = CONSTR(I) - 1.
      IF (NPRINT.GE.1) WRITE(IFILE8,18) 
     1  ITYPE,IQUICK(ILOADS),ILOADS,FNX,FNY,FNXY,MX(ILOADS),
     1                       MY(ILOADS),FNX0,FNY0,-P
   18 FORMAT(/' ANALYSIS: ITYPE = ',I1,'; IQUICK= ',I1/
     1 ' LOAD SET NO.:',I2,'  Nx = ',1PE12.4,',  Ny =',1PE12.4,
     1 ',  Nxy = ',1PE12.4,',  Mx = ',1PE12.4,',  My =',1PE12.4/
     1 '                      Nxo= ',1PE12.4,',  Nyo=',1PE12.4,
     1 ',  Pressure, p= ',1PE12.4,'.')
         IF (NPRINT.EQ.0)
     1      WRITE(IFILE8,1392) ITYPE,IQUICK(ILOADS),ILOADS,ICASES,
     1                         FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1                         FNX0,FNY0,-P
 1392       FORMAT(/
     1' ANALYSIS: ITYPE=',I1,';  IQUICK=',I1,';  LOAD SET ',I1,
     1';  SUBCASE ',I1,':'/
     1' LOADING: Nx, Ny, Nxy, Mx, My = ',1P,5E10.2/
     1'          Nxo, Nyo, pressure  = ',1P,3E10.2)
C BEG MAR 1996
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (IBEAM.EQ.1) WRITE(IFILE8,1396)
     1      FPLOAD(ILOADS),FMLOAD(ILOADS),FWLOAD(ILOADS)
 1396 FORMAT(/
     1' ******************** BEAM-TYPE LOADS *********************'/
     1' axial load,     P, (e.g. units = lbs)          P =',1PE12.4/
     1' bending moment, M, (e.g. units = in-lbs)       M =',1PE12.4/
     1' lateral load,   W, (e.g. units = lbs/in)       W =',1PE12.4/
     1' ***************** END BEAM-TYPE LOADS ********************')
C END MAR 1996
C BEG FEB 2007
      IF (NPRINT.GE.0.AND.IQUICK(ILOADS).EQ.0.AND.PBEIGK.EQ.0.0)
     1 WRITE(IFILE8,'(/,A)')
     1' Local buckling from KOITER theory was not computed.'
C END FEB 2007
         IF (NPRINT.GE.0.AND.IQUICK(ILOADS).EQ.0)
C BEG JAN 2007
C    1      WRITE(IFILE8,1394) PBEIGK,PBEIGB
     1      WRITE(IFILE8,'(A,A,/,A,1P,E12.4,A)')
     1' BUCKLING LOAD FACTORS FOR LOCAL BUCKLING FROM KOITER v.',
     1' BOSOR4 THEORY:',
     1'  Local buckling load factor from KOITER theory =',PBEIGK,
     1 ' (flat skin)' 
            IF (IICURV(ILOADS).EQ.0.AND.NPRINT.GE.0)
     1      WRITE(IFILE8,'(A,1P,E12.4,A)')
     1'  Local buckling load factor from BOSOR4 theory =',PBEIGB,
     1 ' (flat skin)'
            IF (IICURV(ILOADS).NE.0.AND.NPRINT.GE.0)
     1      WRITE(IFILE8,'(A,1P,E12.4,A)')
     1'  Local buckling load factor from BOSOR4 theory =',PBEIGB,
     1 ' (curved skin)'
C1394       FORMAT(/' BUCKLING LOAD FACTORS FOR LOCAL BUCKLING FROM KOIT
C    1ER v. BOSOR4 THEORY:'/
C    1'  Local buckling load factor from KOITER theory =',1PE12.4/
C    1'  Local buckling load factor from BOSOR4 theory =',1PE12.4)
C END JAN 2007
      IFSL = 0
      IF (ISTIF(1).EQ.5.AND.ITYPE.EQ.1.AND.PBEIGB.LT.1.1
C BEG APR 1996
     1       .AND.FSLOC(ILOADS).LT.1.0.AND.PBEIGK.GT.1.2*PBEIGB) IFSL=1
C    1       .AND.FSLOC(ILOADS).LT.1.0.AND.PBEIGK.GT.1.4*PBEIGB) IFSL=1
C END APR 1996
      EIGK0 = PBEIGK
      EIGB0 = PBEIGB
      TITLE = 'MARGINS FOR CURRENT DESIGN: LOAD CASE NO. '
     1        //CILOAD//', SUBCASE NO. '//CICASE//'       '
C BEG AUG 1998
C BEG JULY 1998
C23456789012345678901234567890123456789012345678901234567890123456789012
C     IF (ITYPE.NE.1.AND.IALTSN.NE.0) THEN
C      DO 1470 I = 1,NCONST
C       ILETX = INDEX(WORDB(I),'0.95*altsol')
C       IF (ILETX.NE.0) WRITE(IFILE8,
C    1  '(/,A,I3,A,/,1PE12.4,A,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
C    1' ** NOTE ** Margin No.',I,': Margin value and definition=',
C    1  CONPRT(I),'  ',WORDB(I),
C    1' Since in MAINSETUP you have chosen "alternative solution",',
C    1' this margin (from the alternative solution) is the one that',
C    1' is actually used during optimization cycles. The margin',
C    1' for the same type of buckling but WITHOUT the string,',
C    1' "0.95*altsol", in its definition is NOT used for optimization.',
C    1' Therefore, do not worry if THAT margin is negative.',
C    1' Please read ITEMs 438,444 in ..panda2/doc/panda2.news for more.'
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C       ILETX = INDEX(WORDB(I),'rolling with local buck')
C       IF (ILETX.NE.0) WRITE(IFILE8,
C    1  '(/,A,I3,A,/,1PE12.4,A,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
C    1' ** NOTE ** Margin No.',I,': Margin value and definition=',
C    1  CONPRT(I),'  ',WORDB(I),
C    1' Since in MAINSETUP you have chosen "alternative solution",',
C    1' this margin is not the same as the one that is actually used',
C    1' during optimization cycles. The margin for the same type of',
C    1' buckling that is used during optimization cycles is different',
C    1' because the "rolling-with-local-buckling" load factor is',
C    1' multiplied by the ratio, EIGALT/EIGPAN (see ITEM 438).',
C    1' Therefore, do not worry if the margin just given is negative.',
C    1' Please read ITEMs 438,444 in ..panda2/doc/panda2.news for more.'
C1470  CONTINUE
C     ENDIF
C END JULY 1998
C END AUG 1998
C BEG NOV 1996
C     CALL OUTVAR(NCONST,CONPRT,WORDB,IADDB,TITLE,IFILE8,80,0,ISUB)
      CALL OUTVR2(NCONST,CONPRT,WORDB,TITLE,IFILE8,67,1,ISUB,6)
C END NOV 1996
C BEG JAN 1995
      NCONS0 = NCONST
      DO 1491 I = 1,NCONST
         WORDB0(I) = WORDB(I)
 1491 CONTINUE
C END JAN 1995
      IF (ILOADS.EQ.NLOADS.AND.ICASES.EQ.NCASES) THEN
         IF (NPRINT.GE.1) WRITE(IFILE8,19)
   19    FORMAT(/' ***************************************************'/
     1' ******************** DESIGN OBJECTIVE *******************'/
     1' *************                             ***********')
C
      ARGSTR = '   CURRENT VALUE OF THE OBJECTIVE'//
     $         ' FUNCTION:                       '
      CALL OUTVAR(1,OBJ,WORDOB,IADDD,ARGSTR,IFILE8,65,0,ISUB)
C BEG JUN 2004
            WRITE(IFILE8,'(/,A,1P,E12.4,/,A,1P,E12.4)')
     1   '  TOTAL WEIGHT OF SKIN                            = ',WGTSKN,
     1   '  TOTAL WEIGHT OF SUBSTIFFENERS                   = ',WGTSUB
C END JUN 2004
C BEG APR 1997
           WRITE(IFILE8,'(A,1P,E12.4,/,A,1P,E12.4,/,A,1P,E12.4)')
     1  '  TOTAL WEIGHT OF STRINGERS                       = ',WGTSTR,
     1  '  TOTAL WEIGHT OF RINGS                           = ',WGTRNG,
     1  '  SPECIFIC WEIGHT (WEIGHT/AREA) OF STIFFENED PANEL= ',WGTSPC
C END APR 1997
C
         IF (NPRINT.GE.1) WRITE(IFILE8,21)
   21    FORMAT(/' *************                          ************'/
     1' ******************** DESIGN OBJECTIVE *******************'/
     1' *****************************************************')
C
      ENDIF
C
      CALL SETUPX(NVARB,IDEC,VAR,VARLOW,VARHI,X,VLB,VUB,NDEC,WORDV)
C
C  CHECK TO SEE IF TOO MANY CONSTRAINT CONDITIONS ARE VIOLATED FOR
C  ADS TO WORK PROPERLY..
C
C BEG NOV 1994
      CALL ESCAPE(IFAIL,NVARB,NDEC,NCONST,ISCAPE,VAR,VARHI,CONSTR,
     1            IESCAP,ILOADS,JACTIV,WORDB)
C END NOV 1994
C
      IF (IFAIL.EQ.1.AND.IESCAP.EQ.0) WRITE (IFILE8,20)
   20 FORMAT(//' ADS REFUSES TO ALTER THE DESIGN.  USE A DIFFERENT'/
     1' STARTING DESIGN AND TRY AGAIN.'/)
      IF (IFAIL.EQ.1.AND.IESCAP.EQ.0) GO TO 135
      IF (NDEC.EQ.0) GO TO 130
      IF (IESCAP.EQ.1) THEN
         CALL SETUPX(NVARB,IDEC,VAR,VARLOW,VARHI,X,VLB,VUB,NDEC,WORDV)
         CALL SETUPV(NVARB,IDEC,ILV,IDLINK,CLINK,VAR,X,WORDV,
     1               CPWR,JTERMS,CLINK0)
         IZERO = 0
C BEG OCT 1996
         CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,WW2,T,
     1               ANGLE,MATL,IZERO,1,0,IFILE8)
C END OCT 1996
C BEG FEB 2009
         JJ1 = JJJ + 1
         ISCAPX(JJ1) = ISCAPX(JJ1) + 1
C END FEB 2009
         GO TO 10
      ENDIF
C
C  ACCUMULATE CONSTRAINT CONDITIONS FOR VARIOUS LOAD SETS...
C
      IEND = IBEG + NCONST - 1
      IF (NCAR.EQ.0) GO TO 1036
      IF (NCONST.EQ.0) GO TO 1036
      NUMCON(ILOADS,ICASES) = 0
C     DO 1030 I = 1,NCAR
      DO 1030 I = 1,NCONST
C BEG JAN 1997
C        ILETC1 = INDEX(PCWORD(I),'VAR(')
         ILETC1 = INDEX(PCWORD(I),'V(')
C END JAN 1997
         ILETC2 = INDEX(PCWORD(I),'Str. spacing')
         ILETC3 = INDEX(PCWORD(I),'Ring spacing')
         IF (ILETC1.EQ.0.AND.ILETC2.EQ.0.AND.ILETC3.EQ.0) THEN
           NUMCON(ILOADS,ICASES) = NUMCON(ILOADS,ICASES) + 1
           CONSML(ILOADS,ICASES) =MIN(CONSML(ILOADS,ICASES),CONSTR(I))
           IF (ICASES.EQ.1.AND.NCASES.EQ.2) THEN
C             WORDB1(I) = PCWORD(I)
              WORDB1(I) = WORDB(I)
              CONST1(I) = CONSTR(I)
           ENDIF
C          NCONS1(ILOADS,ICASES) = NCAR
           NCONS1(ILOADS,ICASES) = NCONST
           CONST2(I,ILOADS,ICASES) = CONSTR(I)
C          WORDB2(I,ILOADS,ICASES) = PCWORD(I)
           WORDB2(I,ILOADS,ICASES) = WORDB(I)
         ENDIF
         IF (ILOADS.EQ.1.AND.ICASES.EQ.1) THEN
            IF (ILETC1.NE.0.AND.CONSTR(I).LT.1.3) IDO1 = 1
            IF (IDEC(1).NE.0.AND.ILETC2.NE.0.AND.CONSTR(I).LT.1.3)
     1                                            IDO1 = 1
            IF (ILETC3.NE.0.AND.CONSTR(I).LT.1.3) IDO1 = 1
C BEG JULY 1995
            IF (NLOADS.LE.2) IDO1 = 1
C END JULY 1995
         ENDIF
 1030 CONTINUE
      CONSMT = MIN(CONSMT,CONSML(ILOADS,ICASES))
C     DO 1031 I = 1,NCAR
      DO 1031 I = 1,NCONST
         DIFF = ABS(CONSML(ILOADS,ICASES) - CONSTR(I))
         IF (DIFF.LT.0.00001) THEN
C           WORMIN(ILOADS,ICASES) = PCWORD(I)
            WORMIN(ILOADS,ICASES) = WORDB(I)
            GO TO 1032
         ENDIF
 1031 CONTINUE
 1032 CONTINUE
      IF (ICASES.EQ.2) THEN
C        DO 1034 I = 1,NCAR
         DO 1034 I = 1,NCONST
            DO 1033 J = 1,99
C              IF (WORDB1(J).EQ.PCWORD(I)) THEN
               IF (WORDB1(J).EQ.WORDB(I)) THEN
                  DIFF = 1.0
                  IF (CONSTR(I).GT.0.)
     1              DIFF = ABS((CONST1(J) -CONSTR(I))/CONSTR(I))
                  IF (DIFF.GT.0.05) GO TO 1035
                  GO TO 1034
               ENDIF
 1033       CONTINUE
            GO TO 1035
 1034    CONTINUE
C BEG JAN 1996
C        ISKIP(ILOADS,ICASES) = 1
         IF (ISKIPX(ILOADS,ICASES).EQ.0) ISKIP(ILOADS,ICASES) = 1
C END JAN 1996
 1035    CONTINUE
      ENDIF
 1036 CONTINUE
C BEG MAY 2003
C     WRITE(IFILE8,'(A,3I5,1PE12.4)')' NCASES,ILOADS,ICASES,FMARG=',
C    1                                 NCASES,ILOADS,ICASES,FMARG
C     WRITE(IFILE8,'(A,I5)')      ' ISKIP(ILOADS,ICASES)=',
C    1                              ISKIP(ILOADS,ICASES)
C     WRITE(IFILE8,'(A,I5)')      ' NCONS1(ILOADS,ICASES)=',
C    1                              NCONS1(ILOADS,ICASES)
C     WRITE(IFILE8,'(A,1PE12.4)') ' CONSMT =',CONSMT
C     WRITE(IFILE8,'(A,1PE12.4)') ' CONSML(ILOADS,ICASES)=',
C    1                              CONSML(ILOADS,ICASES)
C     WRITE(IFILE8,'(A)') WORMIN(ILOADS,ICASES)
C     DO 1038 I = 1,NCONST
C        WRITE(IFILE8,'(1PE12.4,A)') CONST2(I,ILOADS,ICASES),
C    1                               WORDB2(I,ILOADS,ICASES)
C1038 CONTINUE
C END MAY 2003
C BEG MAR 2005
C     IF (IEND.GT.60) THEN
      IF (IEND.GT.150) THEN
C END MAR 2005
         IF (CONMAX.LT.3.0.AND.CONMAX.GE.2.0) THEN
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' ************ NOTE  NOTE  NOTE ***********'
            WRITE(IFILE8,*)' TOO MANY ACTIVE CONSTRAINTS. (MAX. IS 150)'
            WRITE(IFILE8,*)' SETTING CONMAX = 1.5 AND STARTING OVER.'
            WRITE(IFILE8,*)' DESIGN ITERATION NO. ',JJJ
            WRITE(IFILE8,*)' ********* END NOTE    END NOTE  *********'
C BEG FEB 2009
            JJ1 = JJJ + 1
            ICNMAX(JJ1) = ICNMAX(JJ1) + 1
C END FEB 2009
            JJJ = 0
            REWIND 13
            KSCAPE = 0
            IEND = 0
            CONMAX = 1.5
            GO TO 6
         ENDIF
         IF (CONMAX.EQ.1.5) THEN
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' ************ NOTE  NOTE  NOTE ***********'
            WRITE(IFILE8,*)' TOO MANY ACTIVE CONSTRAINTS. (MAX. IS 150)'
            WRITE(IFILE8,*)' SETTING CONMAX = 1.2 AND STARTING OVER.'
            WRITE(IFILE8,*)' DESIGN ITERATION NO. ',JJJ
            WRITE(IFILE8,*)' ********* END NOTE    END NOTE  *********'
C BEG FEB 2009
            JJ1 = JJJ + 1
            ICNMAX(JJ1) = ICNMAX(JJ1) + 1
C END FEB 2009
            JJJ = 0
            REWIND 13
            KSCAPE = 0
            IEND = 0
            CONMAX = 1.2
            GO TO 6
         ENDIF
         IF (CONMAX.EQ.1.2) THEN
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' ************ NOTE  NOTE  NOTE ***********'
            WRITE(IFILE8,*)' TOO MANY ACTIVE CONSTRAINTS. (MAX. IS 150)'
            WRITE(IFILE8,*)' SETTING CONMAX = 1.1 AND STARTING OVER.'
            WRITE(IFILE8,*)' DESIGN ITERATION NO. ',JJJ
            WRITE(IFILE8,*)' ********* END NOTE    END NOTE  *********'
C BEG FEB 2009
            JJ1 = JJJ + 1
            ICNMAX(JJ1) = ICNMAX(JJ1) + 1
C END FEB 2009
            JJJ = 0
            REWIND 13
            KSCAPE = 0
            IEND = 0
            CONMAX = 1.1
            GO TO 6
         ENDIF
         IF (CONMAX.EQ.1.1) THEN
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' '
            WRITE(IFILE8,*)' ************ NOTE  NOTE  NOTE ***********'
            WRITE(IFILE8,*)' TOO MANY ACTIVE CONSTRAINTS. (MAX. IS 150)'
            WRITE(IFILE8,*)' INCREASING VALUES OF ESCAPE VARIABLES AND'
            WRITE(IFILE8,*)' STARTING OVER.  DESIGN ITERATION NO. ',JJJ
            WRITE(IFILE8,*)' ********* END NOTE    END NOTE  *********'
            TMULT = 1.1
            IESCAP = 0
            DO 24 I = 1,NVARB
               IF (ISCAPE(I).EQ.0) GO TO 24
               IF (VAR(I).GE.VARHI(I) ) GO TO 24
               VAR(I) = VAR(I)*TMULT
               WRITE(IFILE8,'(A,I3,A,1PE9.2,3X,A)')' VAR.',I,
     1         ' INCREASED 10 PERCENT=',VAR(I),WORDV(I)
               IESCAP = 1
   24       CONTINUE
            IF (IESCAP.EQ.1) THEN
               WRITE(IFILE8,*)' VARIABLES JUST LISTED HAVE BEEN'
               WRITE(IFILE8,*)' INCREASED BY 10 PER CENT AND ITERATIONS'
               WRITE(IFILE8,*)' WILL BE RESTARTED FOR THIS PANDAOPT.'
               CALL SETUPX(NVARB,IDEC,VAR,VARLOW,VARHI,X,VLB,VUB,NDEC,
     1                     WORDV)
               CALL SETUPV(NVARB,IDEC,ILV,IDLINK,CLINK,VAR,X,WORDV,
     1                     CPWR,JTERMS,CLINK0)
               IZERO = 0
C BEG OCT 1996
               CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,
     1                     WW2,T,ANGLE,MATL,IZERO,1,0,IFILE8)
C END OCT 1996
C BEG FEB 2009
               JJ1 = JJJ + 1
               ISCAPX(JJ1) = ISCAPX(JJ1) + 1
C END FEB 2009
               JJJ = 0
               REWIND 13
               KSCAPE = 0
               IEND = 0
               IESCAP = 0
               GO TO 6
            ELSE
               IF (ILOADS.GT.1) THEN
                  WRITE(IFILE8,*)' PLEASE USE FEWER LOAD SETS AND/OR'
                  WRITE(IFILE8,*)' USE "CHANGE" TO MAKE THE PARTS'
                  WRITE(IFILE8,*)' OF THE STRUCTURE THICKER.'
               ELSE
                  WRITE(IFILE8,*)' USE "CHANGE" TO MAKE THE PARTS'
                  WRITE(IFILE8,*)' OF THE STRUCTURE THICKER.'
               ENDIF
               WRITE(IFILE8,*)' DESIGN ITERATION NO. ',JJJ
               CALL ERREX
            ENDIF
         ENDIF
C
         IF (CONMAX.GE.3.0) THEN
            IF (ILOADS.GT.1) THEN
               IBEG1 = IBEG - 1
               DO 22 I = 1,IBEG1
                  CONMAX = MIN(CONMAX,CONALL(I))
   22          CONTINUE
            ENDIF
            DO 23 I = 1,NCONST
               CONMAX = MIN(CONMAX,CONSTR(I))
   23       CONTINUE
            CONMAX = MAX(CONMAX,2.0)
         ENDIF
         WRITE(IFILE8,25) CONMAX, JJJ
   25    FORMAT(//' MAXIMUM ALLOWABLE NUMBER OF CONSTRAINTS EXCEEDED.'/
     1 ' RESETTING THE VARIABLE CONMAX TO CONMAX =',1PE12.4,' AND'/
     1 ' GOING BACK TO THE BEGINNING OF THE LOAD LOOP FOR DESIGN'/
     1 ' ITERATION NO.',I3'.'/)
         JJJ = 0
         REWIND 13
         KSCAPE = 0
         IEND = 0
C BEG APR 1997
         IMANY = 1
C END APR 1997
         GO TO 6
      ENDIF
C
C********************************************************************
C END ANALYSIS FOR CURRENT UNPERTURBED DESIGN.
C********************************************************************
C
C     WRITE(8,*)' IBEG,IEND,NCONST=',IBEG,IEND,NCONST
      DO 30 ICONST = IBEG,IEND
      ICON = ICONST - IBEG + 1
      CONALL(ICONST) = CONSTR(ICON)
   30 CONTINUE
C
C  PERTURB THE DESIGN IN ORDER TO GET GRADIENTS...
C
C********************************************************************
C BEGIN ANALYSIS FOR PERTURBED DESIGN.
C********************************************************************
C
C
      IF (NDEC.EQ.0) THEN
         WRITE(IFILE8,*)' ILLEGAL ATTEMPT TO PERFORM OPTIMIZATION'
         WRITE(IFILE8,*)' WITHOUT ANY DECISION VARIABLES. PLEASE USE'
         WRITE(IFILE8,*)' "DECIDE" TO SELECT DECISION VARIABLES.'
         CALL ERREX
      ENDIF
C
      DO 100 IDV = 1,NDEC
      IF (NDEC.EQ.0) THEN
         WRITE(IFILE8,*)' THERE ARE NO DECISION VARIABLES. USE DECIDE'
         CALL ERREX
      ENDIF
C
      NUMDEC = 0
      DO 37 I = 1,NVARB
         NUMVAR = I
         IF (IDEC(I).EQ.1) NUMDEC = NUMDEC + 1
         IF (NUMDEC.EQ.IDV) GO TO 38
   37 CONTINUE
      WRITE(IFILE8,*)' NO DECISION VARIABLE MATCH. MUST BE A BUG.'
      CALL ERREX
   38 CONTINUE
C
      XSAVE(IDV) = X(IDV)
C
C  GET PERTURBED VECTOR Y OF DECISION VARIABLES...
C
      CALL NEWY(NDEC,IDV,IDEC,X,Y,DX,WORDV,NVARB,VAR,JJJ,
     1          IWRNVV(NUMVAR))
C
C BEG DEC 2003
C BEG MAR 2007
      IF (NPRINT.GT.-1)
     1 WRITE(IFILE8,'(/,/,A,I3,A,1PE13.6,A,1PE13.6)')
C END MAR 2007
C END DEC 2003
     1' Decision var. no.',IDV,': unperturbed value=',XSAVE(IDV),
     1', perturbed value=',Y(IDV)
C
C  GET PERTURBED PARAMETER VECTOR, VAR, FROM Y...
C
      CALL SETUPV(NVARB,IDEC,ILV,IDLINK,CLINK,VAR,Y,WORDV,
     1            CPWR,JTERMS,CLINK0)
      IZERO = 0
C BEG OCT 1996
      CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,WW2,T,
     1            ANGLE,MATL,IZERO,1,NPRINT,IFILE8)
C END OCT 1996
C BEG MAR 1996
      IF (IBEAM.EQ.1) THEN
         CIRC = B(1)
         FNX =  FPLOAD(ILOADS)/B(1)
         IF (FNX.EQ.0.0.AND.FNSQS(ILOADS).EQ.0.0) FNX = -0.00001
         FXBEG = FNX
         FXEND = FNX
         MX(ILOADS)  =  FMLOAD(ILOADS)/B(1)
         P   = -FWLOAD(ILOADS)/B(1)
C END MAR 1996
         IF (NPRINT.GE.2) WRITE(IFILE8,'(A,1P4E12.4)')
     1      ' B(1),FNX,MX(ILOADS),P=',B(1),FNX,MX(ILOADS),P
      ENDIF
C END MAR 1996
C
C  DO STRUCTURAL ANALYSIS FOR PERTURBED PARAMETER VECTOR....
C
C BEG NOV 1994
      IF (NPRINT.GE.1) THEN
C END NOV 1994
      WRITE(IFILE8,40) IDV,IDV,NUMVAR,XSAVE(IDV),WORDV(NUMVAR)
   40 FORMAT(/' STRUCTURAL ANALYSIS WITH DECISION VARIABLE NO.',I2/
     1' PERTURBED BY X PER CENT.  DECISION VARIABLE NO. ',I2/
     1' CORRESPONDS TO DESIGN VARIABLE NO. ',I2,'. ITS UNPERTURBED'/
     1' VALUE IS ',1PE12.4,' AND ITS DEFINITION IS:'/
     1' ',A/)
C
      CALL OUTOPT(IFILE8,NVARB,IDEC,ISCAPE,ILV,CLINK,IDLINK,VARLOW,
     1 VARHI,VAR,WORDV,
     1' STRUCTURAL ANALYSIS WITH PERTURBED DECISION VARIABLE            
     1 ',57)
C
      ENDIF
C
C BEG OCT 1998
      NSRCH1 = 0

C     write(IFILE8,667) '2nd', NVARB

      CALL STRUCT(IFILE8,1,IW,ILOC,DS,W(N5),W(N6),W(N4),W(N7),
     1  W(N8),W(N9),W(N10),W(N11),W(N12),NCONST,CSTAR,WORDB,IADDB,
     1  OBSTAR,WORDOB,NWAVES(ILS,ICASES),NSRCH1,EIGSAV,EPS1,EPS2,EPS12,
     1  NMAX,IQUIT(ILS),0,KOITER,JJJ,IREDUC(ILS),CONMAX,ILS,FSGEN(ILS),
     1  FSPAN(ILS),FSLOC(ILS),FSSTR(ILS),IQUICK(ILS),IPOINC,INUMTT,
     1  EIGBOW(ILS),CRACK,IWG,ILOCG,DSG,W(N5G),W(N6G),W(N4G),W(N7G),
     1  W(N8G),W(N9G),W(N10G),W(N11G),W(N12G),IGENRL(ILS),
     1  0,EIGDIS(1,ILS),EALLST,CSLOPE,M0,ALPB,FSQ,ITYPE,IFILE4,IPROMP,
     1  IOUT,ILOW(ILS,ICASES),P,IWIDE(ILS),MCRIP,NCRIP,IOBJ,WIMPG(ILS),
C BEG DEC 2001
     1  WIMPL(ILS),NOCONV,IABP(ILS),ECC(ILS),ILONG,IEND,NLOADS,
C END DEC 2001
     1  IWR,ILOCR,DSR,W(N5R),W(N6R),W(N4R),W(N7R),W(N8R),W(N9R),W(N10R),
C BEG JUL 1999
     1  W(N11R),W(N12R),IFREEB,ILOWVE(ILS),IWCON(ILS),WPGMAX(ILS),
     1  KOUNTM,MARK,MARK2,MARK3,ICWEBL,ICASES,IBPREL(ILS),VAR,ISTOPP,
     1  TEMP(1,1,ILS),FMULT,IMTEMP(ILS),FSBSTR(ILS),IPOPX(ILS),ILAMB2,
     1  ILAM34,MX(ILS),MY(ILS),NCASES,ITRUSS,IABT(ILS),EIGBOP,IHOOP,
C BEG DEC 2001
     1 WIMPG1(ILS),WIMPG2(ILS),NVARB,ISUB,WORDV,IICURV(ILS),IIKOIT(ILS))
C END DEC 2001
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUL 1999
C
C BEG NOV 1994
      IF (NPRINT.GE.1) THEN
C END NOV 1994
      DO 50 I = 1,NCONST
   50 CONPRT(I) = CSTAR(I) - 1.
      TITLE = 'MARGINS FOR PERTURBED DESIGN: LOAD CASE NO. '
     1        //CILOAD//', SUBCASE NO. '//CICASE//'     '
C BEG NOV 1996
C     CALL OUTVAR(NCONST,CONPRT,WORDB,IADDB,TITLE,IFILE8,80,0,ISUB)
      CALL OUTVR2(NCONST,CONPRT,WORDB,TITLE,IFILE8,67,1,ISUB,6)
C END NOV 1996
C
      ENDIF
C BEG JAN 1995
      IMISMA = 0
      DO 1590 I = 1,NCONS0
         IF (WORDB0(I).EQ.WORDB(I)) GO TO 1590
C BEG JULY 1995
C BEG OCT 1995
         ILET0 = INDEX(WORDB0(I),'Local buckling from discrete model')
         ILET =  INDEX(WORDB(I),'Local buckling from discrete model')
         IF (ILET0.NE.0.AND.ILET.NE.0) GO TO 1590
C END OCT 1995
         ILET0 = INDEX(WORDB0(I),'Local halfwaves')
         ILET =  INDEX(WORDB(I),'Local halfwaves')
         IF (ILET0.NE.0.AND.ILET.NE.0) GO TO 1590
         ILET0 = INDEX(WORDB0(I),'3+4 together')
         ILET =  INDEX(WORDB(I),'3+4 together')
         IF (ILET0.NE.0.AND.ILET.NE.0) GO TO 1590
C BEG OCT 1998
         ILET0 = INDEX(WORDB0(I),'stiff.no.J=')
         ILET =  INDEX(WORDB(I),'stiff.no.J=')
         IF (ILET0.NE.0.AND.ILET.NE.0) GO TO 1590
C END OCT 1998
C BEG JUN 2004
         ILET0 = INDEX(WORDB0(I),'rolling with skin buckl.')
	 ILET  = INDEX(WORDB(I), 'rolling with skin buckl.')
         IF (ILET0.NE.0.AND.ILET.NE.0) GO TO 1590
C END JUN 2004
         IMISMA = 1
C BEG DEC 1996
C        IF (NPRINT.GE.2) WRITE(IFILE8, '(A,I3,/,A,/,A,/,A,/,A)')
                          WRITE(IFILE8, '(A,I3,/,A,/,A,/,A,/,A)')
C END DEC 1996
     1 ' MISMATCH BETWEEN CONSTRAINT DEFINITIONS: MARGIN NO.',I,
     1 ' UNPERTURBED MARGIN DEFINITION=',WORDB0(I),
     1 '   PERTURBED MARGIN DEFINITION=',WORDB(I)
C END JULY 1995
 1590 CONTINUE
      IF (NCONS0.NE.NCONST) IMISMA = 1
      IF (IMISMA.EQ.1) WRITE(IFILE8,1591)
C23456789012345678901234567890123456789012345678901234567890123456789012
 1591 FORMAT(/' ************ WARNING ************ WARNING ************'/
     1 ' THERE IS A MISMATCH BETWEEN THE CONSTRAINTS FOR THE PERTURBED'/
     1 ' AND THE UNPERTURBED DESIGNS. AN ATTEMPT TO CORRECT THIS WILL'/
     1 ' BE MADE AND CALCULATIONS WILL PROCEED. IF YOU HAVE DIFFICULTY'/
     1 ' GENERATING AN OPTIMUM DESIGN, GO BACK TO THIS CONFIGURATION'/
     1 ' VIA "CHANGE" AND RUN WITH NPRINT = 2 AND ITYPE = 1 TO GET'/
     1 ' MORE OUTPUT FOR THIS TROUBLESOME CONFIGURATION. INSPECT THE'/
     1 ' MARGINS CAREFULLY TO SEE WHAT IS GOING ON. SOMETIMES PROBLEMS'/
     1 ' LIKE THIS ARE CAUSED BY THE LOAD FACTOR FOR WIDE COLUMN OR'/
     1 ' GENERAL INSTABILITY BEING VERY CLOSE TO UNITY. YOU CAN OFTEN'/
     1 ' GET AROUND THE PROBLEM BY STARTING FROM A DIFFERENT DESIGN.'/
     1 ' *********** END WARNING *********** END WARNING ***********'/)
C BEG FEB 2007
C     IF (IMISMA.EQ.1) CALL ERREX
C END FEB 2007
      IF (IMISMA.EQ.1) THEN
C BEG APR 1997
         CALL MOVER(0.,0,CSTARP,1,99)
C END APR 1997
         IF (NCONS0.GT.NCONST) THEN
            NCNST = NCONST
            DO 1594 I = 1,NCONS0
               DO 1592 J = 1,NCONST
                  IF (WORDB(J).EQ.WORDB0(I)) THEN
                     WORDBP(I) = WORDB(J)
                     CSTARP(I) = CSTAR(J)
                     GO TO 1594
                  ENDIF
 1592          CONTINUE
               WORDBP(I) = WORDB0(I)
               CSTARP(I) = MAX(CONSTR(I),10.)
               NCNST = NCNST + 1
 1594       CONTINUE
            NCONST = NCNST
         ELSE
            DO 1598 J = 1,NCONST
               DO 1596 I = 1,NCONS0
                  IF (WORDB(J).EQ.WORDB0(I)) THEN
                     WORDBP(I) = WORDB(J)
                     CSTARP(I) = CSTAR(J)
                     GO TO 1598
                  ENDIF
 1596          CONTINUE
 1598       CONTINUE
            NCONST = NCONS0
         ENDIF
         DO 1599 I = 1,NCONST
C BEG APR 1997
            IF (CSTARP(I).GT.0.) THEN
               CSTAR(I) = CSTARP(I)
               WORDB(I) = WORDBP(I)
            ENDIF
C END APR 1997
 1599    CONTINUE
         IF (NPRINT.GE.1) THEN
          DO 1597 I = 1,NCONST
 1597     CONPRT(I) = CSTAR(I) - 1.
          TITLE = 'MARGINS FOR PERTURBED DESIGN: LOAD CASE NO. '
     1        //CILOAD//', SUBCASE NO. '//CICASE//'     '
C BEG NOV 1996
C         CALL OUTVAR(NCONST,CONPRT,WORDB,IADDB,TITLE,IFILE8,80,0,ISUB)
          CALL OUTVR2(NCONST,CONPRT,WORDB,TITLE,IFILE8,67,1,ISUB,6)
C END NOV 1996
         ENDIF
      ENDIF
C END JAN 1995
C
C  GET GRADIENTS OF CONSTRAINT CONDITIONS...
C
      CALL GRADG(IBEG,IEND,IDV,DX,CONSTR,CSTAR,A,IFILE8,NPRINT,
     1           NUMVAR,WORDV(NUMVAR),XSAVE(IDV),
     1           IWARNV(NUMVAR,ILOADS,ICASES),WORDB,VARDEC)
C
C  RESTORE PARAMETER VECTOR, VAR, CORRESPONDING TO CURRENT
C  UNPERTURBED DESIGN STATE, X...
C
      CALL SETUPV(NVARB,IDEC,ILV,IDLINK,CLINK,VAR,X,WORDV,
     1            CPWR,JTERMS,CLINK0)
      IZERO = 0
C BEG OCT 1996
      CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,WW2,T,
     1            ANGLE,MATL,IZERO,1,0,IFILE8)
C END OCT 1996
C BEG MAR 1996
      IF (IBEAM.EQ.1) THEN
         CIRC = B(1)
         FNX =  FPLOAD(ILOADS)/B(1)
         IF (FNX.EQ.0.0.AND.FNSQS(ILOADS).EQ.0.0) FNX = -0.00001
         FXBEG = FNX
         FXEND = FNX
         MX(ILOADS)  =  FMLOAD(ILOADS)/B(1)
         P   = -FWLOAD(ILOADS)/B(1)
         IF (NPRINT.GE.2) WRITE(IFILE8,'(A,1P4E12.4)')
     1      ' B(1),FNX,MX(ILOADS),P=',B(1),FNX,MX(ILOADS),P
      ENDIF
C END MAR 1996
C
C  GET GRADIENT OF OBJECTIVE FUNCTION...
C
      DOBJ(IDV) = (OBSTAR - OBJ)/DX
      IF (NPRINT.GE.2) WRITE(IFILE8,'(A,I4,A,1PE12.4)')
     1  ' GRADIENT OF OBJECTIVE FOR DEC. VAR. NO. ',IDV,'; DOBJ(IDV)=',
     1    DOBJ(IDV)
C
  100 CONTINUE
C
C BEG NOV 1994
      MAXNSX(ILS,ICASES) = MAX(NSAVEX,MAXNSX(ILS,ICASES))
      MAXNST(ILS,ICASES) = MAX(NSAVET,MAXNST(ILS,ICASES))
C BEG AUG 1995
      MAXNSZ(ILS,ICASES) = MAX(NSAVEZ,MAXNSZ(ILS,ICASES))
C END AUG 1995
C BEG MAR 1995
C     WRITE(8,*)' MAXNSX(ILS,ICASES)=',MAXNSX(ILS,ICASES)
C     WRITE(8,*)' MAXNST(ILS,ICASES)=',MAXNST(ILS,ICASES)
C BEG AUG 1995
C     WRITE(8,*)' MAXNSZ(ILS,ICASES)=',MAXNSZ(ILS,ICASES)
C END AUG 1995
C END MAR 1995
      IF (MAXNSX(ILS,ICASES).GT.NWAVES(ILS,ICASES)
     1     .AND.MAXNSX(ILS,ICASES).GE.MAXNST(ILS,ICASES))
     1     NWAVES(ILS,ICASES) = MAXNSX(ILS,ICASES)
      IF (MAXNST(ILS,ICASES).GT.NWAVES(ILS,ICASES)
     1     .AND.MAXNST(ILS,ICASES).GE.MAXNSX(ILS,ICASES))
     1     NWAVES(ILS,ICASES) = MAXNST(ILS,ICASES)
C BEG AUG 1995
      IF (MAXNSZ(ILS,ICASES).GT.NWAVES(ILS,ICASES)
     1     .AND.MAXNSZ(ILS,ICASES).GE.MAXNSX(ILS,ICASES)
     1     .AND.MAXNSZ(ILS,ICASES).GE.MAXNST(ILS,ICASES))
     1     NWAVES(ILS,ICASES) = MAXNSZ(ILS,ICASES)
C END AUG 1995
C END NOV 1994
      IF (IFSL.EQ.1) THEN
         WRITE(IFILE8,1006)
     1    JJJ,ILOADS,ICASES,EIGK0,EIGB0,FSLOC(ILOADS),ILOADS,ILOADS,
     1    CASE(1:NLET)
 1006     FORMAT(/' ****** NOTE   NOTE   NOTE   NOTE   NOTE ******'/
     1  ' Design iteration ',I2,'; Load Case ',I2,'; Subcase ',I1,':'/
     1  ' Local buckling load factor from Koiter theory=',1PE12.4/
     1  ' Local buckling load factor from BOSOR4 theory=',1PE12.4/
     1  ' Factor of safety for local buckling from BOSOR4 theory=',
     1    1PE12.4/
     1  ' THE LOCAL BUCKLING LOAD AS PREDICTED BY KOITER THEORY IS'/
     1  ' CONSIDERABLY HIGHER THAN THAT PREDICTED BY BOSOR4 THEORY.'/
     1  ' THEREFORE, IN ORDER TO AVOID AN UNSAFE DESIGN, THE FACTOR'/
     1  ' OF SAFETY FOR LOCAL BUCKLING AS PREDICTED FROM BOSOR4'/
     1  ' THEORY FOR THIS LOAD SET [FACTOR OF SAFETY=FSLOC(',I1,')]'/
     1  ' IS BEING RESET, FOR THIS LOAD SET ONLY, TO A VALUE OF 1.1'/
     1  ' FOR THE REMAINING DESIGN ITERATIONS IN THIS PARTICULAR RUN'/
     1  ' OF PANDAOPT. NOTE THAT IF YOU WANT FSLOC(',I1,')'/
     1  ' PERMANENTLY RESET TO 1.1, YOU WILL HAVE TO CHANGE IT IN'/
     1  ' YOUR ',A,'.OPT FILE.  YOU SHOULD DO THIS.'/
     1  ' ****** END NOTE   END NOTE   END NOTE   END NOTE ******'/)
         FSLOC(ILOADS) = 1.1
      ENDIF
C BEG JAN 1995
C     IBEG = IBEG + NCONST
      IBEG = IBEG + NCONS0
C END JAN 1995
C
C
  101 CONTINUE
      IF (IMOD.EQ.0) THEN
         WRITE(13) JJJ,ILOADS,ICASES,NVARB,NCAR,IABP(ILOADS),
     1   IWCON(ILOADS),IBPREL(ILOADS),IFREEB,IQUICK(ILOADS),
     1   IWIDE(ILOADS),IABT(ILOADS)
C
         WRITE(13) FNX,FNY,FNXY,-P,FNX0,FNY0,FNXY0,ECC(ILOADS),
     1             WIMPG(ILOADS),WIMPL(ILOADS),TPMULT,EPSRUT,EPSTIP
C
C BEG APR 2000 (NEXT TWO STATEMENTS MOVED OUT OF "IF" LOOP)
         WRITE(13) OBJ,WORDOB
         WRITE(13) (VAR(I),I=1,NVARB)
C END APR 2000
         IF (ILOADS.EQ.1.AND.ICASES.EQ.1) THEN
C BEG APR 2000 (NEXT TWO STATEMENTS MOVED UP)
C            WRITE(13) OBJ,WORDOB
C            WRITE(13) (VAR(I),I=1,NVARB)
C END APR 2000
             WRITE(13) (WORDV(I),I=1,NVARB)
             WRITE(13) (IADDV(I),I=1,NVARB)
             WRITE(13) (CLINK(I,1),I=1,NVARB)
             WRITE(13) (IDEC(I),I=1,NVARB)
             WRITE(13) (ILV(I),I=1,NVARB)
             WRITE(13) (IDLINK(I,1),I=1,NVARB)
             WRITE(13) (ISCAPE(I),I=1,NVARB)
             WRITE(13) (VARLOW(I),I=1,NVARB)
             WRITE(13) (VARHI(I),I=1,NVARB)
         ENDIF
C BEG OCT 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
C        IF (NCAR.GT.0) THEN
C           WRITE(IFILE8,'(/,A,3I4,/,(1P,5E12.4))')
C    1    ' Margins in CPLOT: ILOADS,ICASES,NCAR=',ILOADS,ICASES,NCAR,
C    1      (CPLOT(I),I=1,NCAR)
C           WRITE(IFILE8,'(/,A,/,(A))')
C    1    ' Margin phrases in PCWORD=',(PCWORD(I),I=1,NCAR)
C        ENDIF
C END OCT 2004
         IF (NCAR.GT.0) THEN
            WRITE(13) (CPLOT(I),I=1,NCAR)
            WRITE(13) (PCWORD(I),I=1,NCAR)
            WRITE(13) (IADDCC(I),I=1,NCAR)
         ENDIF
      ENDIF
C
C  POSSIBLY CHANGE IQUICK(ILOADS) TO UNITY FOR THIS LOAD SET...
C
      IF (NCASES.EQ.1)
     1   CALL QUICK(IFILE8,IQUICK,P,NCONST,WORDB,CONSTR,FSLOC,ILOADS)
C
C BEG DEC 1998
      IF (IGOTO2(ILOADS,ICASES).EQ.1) THEN
C BEG MAY 2003
C        ISKIPW(JJJ+1,ILOADS,ICASES) = 1
         ISKIPW(JJKSCP,ILOADS,ICASES) = 1
C END MAY 2003
         IABP(ILOADS) = IABPS
         IABT(ILOADS) = IABTS
         FNX = FNXS
         FNY = FNYS
         FNXY = FNXYS
         FNX0 = FNX0S
         FNY0 = FNY0S
         FNXY0= FNXY0S
         FNXX(ILOADS)  = FNX
         FNYY(ILOADS)  = FNY
         FNXXYY(ILOADS)= FNXY
         FNX00(ILOADS) = FNX0
         FNY00(ILOADS) = FNY0
         FNXY00(ILOADS)= FNXY0
C        WRITE(IFILE8,'(/,A,/,8I7)')
C    1 ' ILOADS,ICASES,IGOTO2(ILS,ICS),JJJ,IABPS,IABTS,IABP,IABT=',
C    1   ILOADS,ICASES,IGOTO2(ILOADS,ICASES),JJJ,IABPS,IABTS,
C    1   IABP(ILOADS),IABT(ILOADS)
C        WRITE(IFILE8,'(A,I7)')' ISKIPW(JJJ+1,ILOADS,ICASES)=',
C    1                           ISKIPW(JJJ+1,ILOADS,ICASES)
      ENDIF
C END DEC 1998
  104 CONTINUE
C BEG NOV 2003
      IALTSN = IALTSZ
      IALTSV = IALTSN
C END NOV 2003
  105 CONTINUE
C
      DO 1059 ILOADS = 1,NLOADS
         NCASES = NCASEX(ILOADS)
         ILOAD1 = ILOADS + 1
         DO 1057 ICASES = 1,NCASES
C BEG JAN 1994
C           IF (ILOADS.EQ.1.AND.ICASES.EQ.1.AND.IDO1.EQ.1) GO TO 1057
            IPASS = 0
            IF (ILOADS.EQ.1.AND.ICASES.EQ.1.AND.IDO1.EQ.1) IPASS = 1
C END JAN 1994
C BEG MAY 2003
C           WRITE(IFILE8,'(A,4I5,1PE12.4)')
C    1                         ' IPASS,NCASES,ILOADS,ICASES,FMARG=',
C    1                           IPASS,NCASES,ILOADS,ICASES,FMARG
C           WRITE(IFILE8,'(A,I5)')      ' ISKIP(ILOADS,ICASES)=',
C    1                                    ISKIP(ILOADS,ICASES)
C           WRITE(IFILE8,'(A,I5)')      ' NCONS1(ILOADS,ICASES)=',
C    1                                    NCONS1(ILOADS,ICASES)
C           WRITE(IFILE8,'(A,1PE12.4)') ' CONSMT =',CONSMT
C           WRITE(IFILE8,'(A,1PE12.4)') ' CONSML(ILOADS,ICASES)=',
C    1                                    CONSML(ILOADS,ICASES)
C           WRITE(IFILE8,'(A)') WORMIN(ILOADS,ICASES)
C END MAY 2003
C BEG JAN 1994
C BEG JAN 1996
C           IF (IPASS.EQ.0.AND.CONSMT.LT.1.1
            IF (ISKIPX(ILOADS,ICASES).EQ.0.AND.
     1         IPASS.EQ.0.AND.CONSMT.LT.1.1
C END JAN 1996
C END JAN 1994
     1               .AND.CONSML(ILOADS,ICASES).GT.(1.+FMARG)) THEN
               ISKIP(ILOADS,ICASES) = 1
C BEG MAY 2003
C              WRITE(IFILE8,'(A,4I5)') 
C    1  ' ILOADS,ICASES,ISKIPX(ILOADS,ICASES),ISKIP(ILOADS,ICASES=',
C    1    ILOADS,ICASES,ISKIPX(ILOADS,ICASES),ISKIP(ILOADS,ICASES)
C END MAY 2003
               GO TO 1057
            ENDIF
            NCON1 = NCONS1(ILOADS,ICASES)
C BEG JAN 1994
C BEG JAN 1996
            IF (ISKIPX(ILOADS,ICASES).EQ.0.AND.
     1          IPASS.EQ.0.AND.NUMCON(ILOADS,ICASES).EQ.0) THEN
C END JAN 1996
C END JAN 1994
               IF (CONSMT.LT.1.0) ISKIP(ILOADS,ICASES) = 1
               GO TO 1057
            ENDIF
            IF (ILOAD1.LE.NLOADS) THEN
               DO 1049 JLOADS = ILOAD1,NLOADS
                  MCASES = NCASEX(JLOADS)
                  DO 1047 JCASES = 1,MCASES
                     NCON2 = NCONS1(JLOADS,JCASES)
                     IF (NCON2.EQ.0) THEN
C BEG JAN 1996
                        IF (ISKIPX(ILOADS,ICASES).EQ.0.AND.
     1                      CONSMT.LT.1.0) ISKIP(JLOADS,JCASES) = 1
C END JAN 1996
                        GO TO 1047
                     ENDIF
C BEG MAY 2003
                     IF (NCON1.EQ.0) GO TO 1045
C END MAY 2003
                     DO 1044 I = 1,NCON1
                        IF (CONST2(I,ILOADS,ICASES).EQ.0.0
     1                 .AND.WORDB2(I,ILOADS,ICASES)(1:6).EQ.'      ')
     1                  GO TO 1044
                        DO 1043 J = 1,NCON2
                           IF (WORDB2(J,JLOADS,JCASES).EQ.
     1                         WORDB2(I,ILOADS,ICASES)) THEN
                              DIFF = 1.0
                              IF (CONST2(I,ILOADS,ICASES).GT.0.)
     1                        DIFF=ABS((CONST2(J,JLOADS,JCASES)
     1                                 -CONST2(I,ILOADS,ICASES))/
     1                                  CONST2(I,ILOADS,ICASES))
                              IF (DIFF.GT.0.05) GO TO 1045
                              GO TO 1044
                           ENDIF
 1043                   CONTINUE
                        GO TO 1045
 1044                CONTINUE
C BEG JAN 1996
                     IF (ISKIPX(ILOADS,ICASES).EQ.0)
     1                 ISKIP(JLOADS,JCASES) = 1
C END JAN 1996
 1045                CONTINUE
 1047             CONTINUE
 1049          CONTINUE
            ENDIF
 1057    CONTINUE
 1059 CONTINUE
C
C********************************************************************
C END ANALYSIS FOR PERTURBED DESIGN.
C********************************************************************
C
      DO 110 I = 1,NDEC
  110 XBEFOR(I) = X(I)
C
C  GET NEW DESIGN FROM OPTIMIZER...
C
      IF (NPRINT.GE.2) THEN
          WRITE(IFILE8,*)' NUMBER OF DECISION VARIABLES,    NDEC=',NDEC
          WRITE(IFILE8,*)' NUMBER OF CONSTRAINT CONDITIONS, IEND=',IEND
      ENDIF
C
C
C********************************************************************
C BEGIN ADS CALCULATIONS TO GET A NEW DESIGN.
C********************************************************************
C
C BEG MAR 2005
      IF (ITER.EQ.0) THEN
         WRITE(IFILE8,'(/,A,/,A,/,A)')
     1 ' ***********************************************************',
     1 ' User set max. number of iterations equal to zero. Run abort',
     1 ' ***********************************************************'
         CALL ERREX
      ENDIF
C END MAR 2005
      DO 207 I = 1,NVARB
      DO 206 ILOADS = 1,NLOADS
      DO 206 ICASES = 1,NCASES
         IWRNVV(I) = MAX(IWRNVV(I),IWARNV(I,ILOADS,ICASES))
  206 CONTINUE
  207 CONTINUE
C
      IF (NPRINT.GE.2) WRITE(IFILE8,1222) (X(I),I=1,NDEC)
C BEG NOV 2005
      CALL CONMAN(JJJ,NDEC,X,XSAVE,OBJ,DOBJ,IEND,CONALL,A,VLB,VUB,
     1            ISTOP,ITRIAL,WORDV,IDEC,VAR,NVARB,NPRINT,IFILE8,
     1            IWRNVV,VARDEC,ISTIF,GRADMX)
C END NOV 2005
      DO 2091 ILOADS = 1,NLOADS
      DO 2091 ICASES = 1,NCASES
         IF (GRDSIG(ILOADS,ICASES).GE.1.0) THEN
            IF (ICASES.EQ.2.AND.ISTIF(2).NE.0.AND.IBIGA(2).EQ.1)
     1         FSGEN(ILOADS) = MAX(FSGEN(ILOADS),1.5)
            IF (ICASES.EQ.1.AND.ISTIF(1).NE.0.AND.IBIGA(1).EQ.1) THEN
               IF (ISTIF(2).NE.0) FSPAN(ILOADS) = MAX(FSPAN(ILOADS),1.5)
               IF (ISTIF(2).EQ.0) FSGEN(ILOADS) = MAX(FSGEN(ILOADS),1.5)
            ENDIF
         ENDIF
 2091 CONTINUE
C
C  UPDATE PARAMETER VECTOR, VAR...
C
      CALL SETUPV(NVARB,IDEC,ILV,IDLINK,CLINK,VAR,X,WORDV,
     1            CPWR,JTERMS,CLINK0)
      IZERO = 1
C BEG OCT 1996
      CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,WW2,T,
     1            ANGLE,MATL,IZERO,0,NPRINT,IFILE8)
C END OCT 1996
C BEG MAR 1996
      IF (IBEAM.EQ.1) THEN
         CIRC = B(1)
         DO 1397 ILOADS = 1,NLOADS
            FNXX(ILOADS) =  FPLOAD(ILOADS)/B(1)
            FNXBEG(ILOADS) = FNXX(ILOADS)
            FNXEND(ILOADS) = FNXX(ILOADS)
            MX0(ILOADS)  =  FMLOAD(ILOADS)/B(1)
            MX(ILOADS) = MX0(ILOADS)
            PRESS(ILOADS)= -FWLOAD(ILOADS)/B(1)
            IF (NPRINT.GE.2) WRITE(IFILE8,'(A,/,1P4E12.4)')
     1      ' B(1),FNXX(ILOADS),MX(ILOADS),PRESS(ILOADS)=',
     1        B(1),FNXX(ILOADS),MX(ILOADS),PRESS(ILOADS)
 1397    CONTINUE
      ENDIF
C END MAR 1996
C
C  DID ADS CHANGE THE DESIGN?
C
      IFAIL = 1
      DO 120 I = 1,NDEC
      DIFF = ABS((X(I)-XBEFOR(I))/XBEFOR(I) )
      IF (DIFF.GT.0.001) IFAIL = 0
  120 CONTINUE
C
      IF (IFAIL.EQ.1) WRITE(IFILE8,121)
  121 FORMAT(//' **********************************'/
     1         ' **********************************'/
     1         ' **********************************'//
     1         '  ADS DID NOT CHANGE THE DESIGN '//
     1         ' **********************************'/
     1         ' **********************************'/
     1         ' **********************************'/)
      IF (IFAIL.EQ.0.AND.NPRINT.GE.1) WRITE(IFILE8,122)
  122 FORMAT(//' ********************************'/
     1         ' ********************************'/
     1         ' ********************************'//
     1         '    ADS CHANGED THE DESIGN'//
     1         ' ********************************'/
     1         ' ********************************'/
     1         ' ********************************'/)
      IF (IFAIL.EQ.0.AND.NPRINT.EQ.0) WRITE(IFILE8,1221) JJJ
 1221 FORMAT(/' ********************************'/
     1         '    ADS CHANGED THE DESIGN (ITERATION NO.',I3,')'/
     1         ' ********************************'/)
C BEG DEC 2003
      IF (NPRINT.GT.-1) WRITE(IFILE8,1222) (X(I),I=1,NDEC)
C END DEC 2003
 1222 FORMAT(/' CURRENT VALUES OF DECISION VARIABLES, (X(I),I=1,NDEC)='/
     1 (1P,5E15.8))
      IF (IFAIL.EQ.0) GO TO 130
C BEG NOV 1994
      CALL ESCAPE(IFAIL,NVARB,NDEC,IEND,ISCAPE,VAR,VARHI,CONALL,
     1            IESCAP,ILOADS,JACTIV,WORDB)
C END NOV 1994
      IF (ITYPE.EQ.1.AND.NPRINT.GT.1) THEN
         IF (IFAIL.EQ.1.AND.IESCAP.EQ.1) THEN
            WRITE(IFILE8,*)' *** TO GET FURTHER, SET NPRINT=0 or 1 ***'
            CALL ERREX
         ENDIF
      ENDIF
      IF (IFAIL.EQ.1.AND.IESCAP.EQ.0) THEN
         WRITE(IFILE8,123)
C BEG OCT 1998
  123    FORMAT(/
     1'    PANDA2 MAY HAVE CONVERGED TO AN OPTIMUM DESIGN.'/
     1'       WARNING: It may not be a GLOBAL optimum. There is'/
     1'                nothing in the theory here to guarantee'/
     1'                convergence to a GLOBAL optimum. You must'/
     1'                search for a GLOBAL optimum by using a'/
     1'                number of different starting designs and'/
     1'                seeing which of the iterated designs has'/
     1'                the best objective (e.g. least weight).')
         WRITE(IFILE8,1232)
 1232    FORMAT( 
     1'                The PANDA2 processor called "SUPEROPT" does'/
     1'                this automatically. See panda2.news ITEMs 151'/
     1'                and 152 and the AIAA paper 96-1337, "RECENT'/
     1'                ENHANCEMENTS TO PANDA2" for information about'/
     1'                SUPEROPT.'//
C END OCT 1998
     1'   2ND WARNING: DO ONE MORE "PANDAOPT" TO MAKE SURE THAT'/
     1'                THE DESIGN DOES NOT CHANGE FURTHER. IF THE'/
     1'                DESIGN CHANGES SIGNIFICANTLY, DO MORE'/
     1'                "PANDAOPTs".'//
     1'      NOTE: If there are negative margins that are more'/
     1'            negative than about -0.05, look to see if some'/
     1'            crucial decision variable is against a lower or'/
     1'            upper bound.  Use DECIDE to widen the bound.'/)
      ENDIF
C
      IF (IESCAP.EQ.0) GO TO 135
      CALL SETUPX(NVARB,IDEC,VAR,VARLOW,VARHI,X,VLB,VUB,NDEC,WORDV)
      CALL SETUPV(NVARB,IDEC,ILV,IDLINK,CLINK,VAR,X,WORDV,
     1            CPWR,JTERMS,CLINK0)
      IZERO = 0
C BEG OCT 1996
      CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,WW2,T,
     1            ANGLE,MATL,IZERO,1,0,IFILE8)
C END OCT 1996
      KSCAPE = KSCAPE + 1
      IF (KSCAPE.GT.10) THEN
         WRITE(IFILE8,*)' INCREASING ESCAPE VARIABLES DOES NOT HELP.'
         WRITE(IFILE8,*)' TRY DIFFERENT STARTING DESIGN.'
         WRITE(IFILE8,*)' '
         CALL OUTOPT(IFILE8,NVARB,IDEC,ISCAPE,ILV,CLINK,IDLINK,VARLOW,
     1   VARHI,VAR,WORDV,
     1 '         SUMMARY OF INFORMATION FROM OPTIMIZATION ANALYSIS      
     1  ',57)
         CALL ERREX
      ENDIF
      GO TO 6
C
C********************************************************************
C BEGIN CALCULATIONS TO GET A NEW DESIGN.
C********************************************************************
C
  130 CONTINUE
C
      IF (ITYPE.EQ.1.AND.NPRINT.GE.2) THEN
         CALL OUTOPT(IFILE8,NVARB,IDEC,ISCAPE,ILV,CLINK,IDLINK,VARLOW,
     1   VARHI,VAR,WORDV,
     1 '         SUMMARY OF INFORMATION FROM OPTIMIZATION ANALYSIS      
     1  ',57)
C
         WRITE(IFILE8,*)' ***** TO GET FURTHER, SET NPRINT=0 OR 1 *****'
         CALL ERREX
      ENDIF
C
      ITRIAL = ITRIAL + 1
      JJJ    = JJJ    + 1
C
      IF (JJJ.LT.ITER) GO TO 6
C
C********************************************************************
C END OPTIMIZATION LOOP
C********************************************************************
C
C
C********************************************************************
C BEGIN FINAL DESIGN EVALUATION, OR EVALUATION OF FIXED DESIGN.
C********************************************************************
C
  135 CONTINUE
C
      IF (ITYPE.EQ.1) JLAST = 1
C     IF (JJJ.EQ.1) GO TO 1381
C
C  PRINT OUT CURRENT DESIGN STATE...
C
C BEG OCT 1998
C  "MOVER" OF "IYXXX" REMOVED
C END OCT 1998
      CONMAX = 10000000.
      IF (ITYPE.EQ.1) CONMAX = MAXCON
      IF (ITYPE.EQ.1.AND.IMOD.EQ.0) WRITE(13) NLOADS
      ISLOAD = 1
      IF (ITYPE.EQ.3.OR.ITYPE.EQ.4.OR.ITYPE.EQ.5) THEN
         ISLOAD = ILOAD
         NLOADS = ILOAD
      ENDIF
      DO 138 ILOADS = ISLOAD,NLOADS
C BEG NOV 2003
      IALTSZ = IALTSN
      IF (IALTSZ.EQ.1.AND.ISTIF(1).EQ.3.AND.IQUICK(ILOADS).EQ.1) THEN
         IALTSN = 0
         IALTSV = IALTSN
         WRITE(IFILE8,'(/,/,A,I2,A,/,A,I2,A,/,A,/,A)')
     1 ' *************** LOAD CASE NO.',ILOADS,'  ****************',
     1 ' ***NOTE: Rectangular stringers and IQUICK(',ILOADS,')=1',
     1 ' Therefore, there will be no alternate buckling solns',
     1 ' for this load case.'
      ENDIF
C END NOV 2003
      ILS = ILOADS
      IF (IMOD.EQ.0) CALL MOVER(1.,0,FMULT,1,1600)
      DO 1010 ILOOP = 1,2
      DO 1010 ISEG  = 1,4
 1010 TTEMP(ISEG,ILOOP) = TPMULT*TEMP(ISEG,ILOOP,ILOADS)
      IF (IMOD.EQ.0.AND.ITEMP(ILOADS).EQ.1)
     1   CALL MATMLT(IMOD,JJJ,IFILE8,ILOADS,NPRINT,TTEMP,FMULT)
      NCASES = 1
      IF (PRESS(ILOADS).NE.0.0.AND.IBPRE.EQ.1) IBPREL(ILOADS) = 1
      IF (IBPREL(ILOADS).EQ.1) NCASES = 2
C BEG MAR 1996
C     IF (PRESS(ILOADS).NE.0.0) NCASES = 2
      IF (PRESS(ILOADS).NE.0.0.AND.IBEAM.EQ.0) NCASES = 2
C BEG APR 1997
C     IF (IBPRE.EQ.1.AND.WIMPG(ILOADS).NE.0.0.AND.ISTIF(2).EQ.0)
C    1                          NCASES = 2
C BEG MAY 1997
      IF (IBPRE.LE.1.AND.WIMPG(ILOADS).NE.0.0.AND.ISTIF(2).EQ.0)
     1                          NCASES = 2
C END MAY 1997
C END APR 1997
C END MAR 1996
C BEG SEP 1995
      IF (IFLAT.EQ.0.AND.IBPRE.EQ.1) NCASES = 2
C END SEP 1995
      IF (IBPRE.EQ.2) NCASES = 1
      IF (ISTIF(1).NE.0.AND.IFLAT.EQ.0.AND.IBPRE.NE.2
     1                 .AND.FNXX(ILOADS).LT.0.) NCASES = 2
C BEG MAR 1995
      IF (ISTIF(2).NE.0.AND.IFLAT.EQ.0) NCASES = 2
      IF (ITYPE.EQ.1.OR.ITYPE.EQ.2) THEN
         IF (MCASE(ILOADS).EQ.1) NCASES = 1
      ENDIF
C END MAR 1995
      NCASEX(ILOADS) = NCASES
      IF (ITYPE.EQ.1.AND.IMOD.EQ.0) WRITE(13) NCASES
      ISCASE = 1
      IF (ITYPE.EQ.3.OR.ITYPE.EQ.4.OR.ITYPE.EQ.5) THEN
C BEG AUG 1996
C        IF (ITYPE.EQ.3.AND.IQUICK(ILOADS).NE.0) THEN
C           WRITE(IFILE8,*)' IQUICK MUST BE ZERO FOR THIS LOAD SET.'
C           WRITE(IFILE8,*)' ILOADS, IQUICK =',ILOADS,IQUICK(ILOADS)
C           CALL ERREX
C        ENDIF
C END AUG 1996
         ISCASE = ICASE
         NCASES = ICASE
      ENDIF
C
      IFREEY = IFREEL(ILOADS)
C BEG MAY 1998
      IF (ISTIF(1).EQ.4.AND.ITEMP(ILOADS).EQ.0) IFREEY = 0
C END MAY 1998
      DO 137 ICASES = ISCASE,NCASES
C BEG FEB 1995 (COMMENTED OUT BECAUSE RING MAY FAIL BY ITSELF)
C     IF (ISCASE.EQ.1.AND.ICASES.EQ.2.AND.IWEAK.EQ.1) THEN
C        NCAR = 0
C BEG OCT 1994
C        IF (NSTEPS.EQ.1) GO TO 1494
C        GO TO 137
C END OCT 1994
C     ENDIF
C END FEB 1995 (END OF COMMENTED OUT SECTION)
         IPRTOP = 0
         IF (JJJ.GT.1.AND.ILOADS.EQ.1.AND.ICASES.EQ.ISCASE
     1               .AND.ITYPE.EQ.1.AND.NPRINT.EQ.1) IPRTOP = 1
         CALL CONVR1(ILOADS,CILOAD)
         CALL CONVR1(ICASES,CICASE)
C BEG JAN 1999
C        ATRING = IFLAT.EQ.0.AND.ISTIF(2).NE.0.AND.P.NE.0.0
         ATRING =                ISTIF(2).NE.0.AND.P.NE.0.0
C END JAN 1999
         IF (ATRING) WLOC(2) = 'AT RINGS       '
         WRITE(IFILE8,'(A)')'  '
         WRITE(IFILE8,'(A)')'  '
         WRITE(IFILE8,'(A)')' ****************************************'
         WRITE(IFILE8,'(A,3I4,5X,A)')
     1     ' ITERATION NO., LOAD SET NO., SUBCASE NO. =',
     1       JJJ, ILOADS, ICASES, WLOC(ICASES)
         WRITE(IFILE8,'(A)')' ****************************************'
C BEG FEB 2006
      IF (NPRINT.GE.1)
     1WRITE(IFILE8,'(A,3I6)')' ILOADS,ICASES,NWAVES(ILOADS,ICASES)=',
     1                         ILOADS,ICASES,NWAVES(ILOADS,ICASES)
C END FEB 2006
C
      IF (ITYPE.EQ.3) WMAX = 0.
      IF (ITYPE.NE.3.AND.NLOADS.GT.1.AND.NPRINT.GE.1) WRITE(IFILE8,4)
      NSTEPU = NSTEPS
      IF (ITYPE.EQ.4) THEN
         NSTEPU = NSTEPS + 1
         VARSAV = VAR(IBVAR)
         FNSTEP = NSTEPS
         DV = (VAREND - VARBEG)/FNSTEP
      ENDIF
      IF (ITYPE.EQ.5) THEN
         NSTEPU = NSTEPS + 3
         DMX = 0.
         DMY = 0.
         DP  = 0.
         DPIN = 0.
         DTMULT = 0.
         FNSTEP = NSTEPS
         IF (ICURV.EQ.1.OR.ICURV.EQ.2) THEN
            FNXX(ILOADS) = FNXB
            DNX = (FNXE - FNXB)/FNSTEP
            FNXBEG(ILOADS) = FNXB
            FNXEND(ILOADS) = FNXB
         ENDIF
         IF (ICURV.EQ.1.OR.ICURV.EQ.3) THEN
            FNYY(ILOADS) = FNYB
            DNY = (FNYE - FNYB)/FNSTEP
            FNYBEG(ILOADS) = FNYB
            FNYEND(ILOADS) = FNYB
         ENDIF
         IF (ICURV.EQ.2.OR.ICURV.EQ.3) THEN
            FNXXYY(ILOADS) = FNXYB
            DNXY = (FNXYE - FNXYB)/FNSTEP
            FNXYBG(ILOADS) = FNXYB
            FNXYEN(ILOADS) = FNXYB
         ENDIF
      ENDIF
      DO 136 ISTEP = 1,NSTEPU
      ISTEP1 = ISTEP - 1
      FSTEP1 = ISTEP1
      IF (ITYPE.EQ.5) THEN
         WRITE(13) ISLOAD
         WRITE(13) ISCASE
         JJJ1 = ISTEP
         JJJ = ISTEP - 1
         IF (ISTEP.EQ.(NSTEPU-1)) THEN
            IF (ICURV.EQ.1.OR.ICURV.EQ.2) THEN
               FNXSAM = MIN(FNXB,FNXE)
               IF (FNXSAM.GE.0.) FNXSAM = -1.
               FNXX(ILOADS) = FNXSAM
               DNX = 0.
               FNXBEG(ILOADS) = FNXSAM
               FNXEND(ILOADS) = FNXSAM
               IF (ICURV.EQ.1) THEN
                   IF (ISTIF(2).EQ.0) THEN
                      FNYAVE = 0.
                   ELSE
                      FNYAVE = -0.001*ABS(FNYB + FNYE)/2.
                      IF (IQUICK(ILOADS).EQ.0)
     1                   FNYAVE = -0.1*ABS(FNYB + FNYE)/2.
                   ENDIF
                   FNYY(ILOADS) = FNYAVE
                   DNY = 0.
                   FNYBEG(ILOADS) = FNYAVE
                   FNYEND(ILOADS) = FNYAVE
               ENDIF
               IF (ICURV.EQ.2) THEN
                   FNXXYY(ILOADS) = 0.
                   DNXY = 0.
                   FNXYBG(ILOADS) = 0.
                   FNXYEN(ILOADS) = 0.
               ENDIF
            ENDIF
            IF (ICURV.EQ.3) THEN
               FNYSAM = MIN(FNYB,FNYE)
               IF (FNYSAM.GE.0.) FNYSAM = -1.
               FNYY(ILOADS) = FNYSAM
               DNY = 0.
               FNYBEG(ILOADS) = FNYSAM
               FNYEND(ILOADS) = FNYSAM
               FNXXYY(ILOADS) = 0.
               DNXY = 0.
               FNXYBG(ILOADS) = 0.
               FNXYEN(ILOADS) = 0.
            ENDIF
         ENDIF
         IF (ISTEP.EQ.NSTEPU) THEN
            CPLOT2 = 0.
            DO 1021 I = 1,NCAR
               ILETC = 0
               IF (CPLOT2.EQ.0.) THEN
C                 IF (ISTIF(2).EQ.0) THEN
                     ILETC = INDEX(PCWORD(I),' general buck;')
C                 ELSE
C                    ILETC = INDEX(PCWORD(I),' smear string;')
C                 ENDIF
C                 IF (ILETC.NE.0) CPLOT2 = CPLOT(I)
                  IF (ILETC.NE.0) CPLOT2 = (CPLOT(I)+1.)*FSAFEP(I)
               ENDIF
C              PCWRD2(I) = PCWORD(I)
 1021       CONTINUE
            IF (ICURV.EQ.1) THEN
               FNYSAM = MIN(FNYB,FNYE)
               IF (FNYSAM.GE.0.) FNYSAM = -1.
               FNYY(ILOADS) = FNYSAM
               DNY = 0.
               FNYBEG(ILOADS) = FNYSAM
               FNYEND(ILOADS) = FNYSAM
               IF (ISTIF(1).EQ.0) THEN
                  FNXAVE = 0.
               ELSE
                  FNXAVE = -0.001*ABS(FNXB + FNXE)/2.
                  IF (IQUICK(ILOADS).EQ.0)
     1               FNXAVE = -0.1*ABS(FNXB + FNXE)/2.
               ENDIF
               FNXX(ILOADS) = FNXAVE
               DNX = 0.
               FNXBEG(ILOADS) = FNXAVE
               FNXEND(ILOADS) = FNXAVE
            ENDIF
            IF (ICURV.EQ.2.OR.ICURV.EQ.3) THEN
               FNXYSM = MAX(ABS(FNXYB),ABS(FNXYE))
               DIFXY = ABS(FNXYSM-ABS(FNXYB))/FNXYSM
               IF (DIFXY.LT.0.001) THEN
                  FNXYSM = SIGN(FNXYSM,FNXYB)
               ELSE
                  FNXYSM = SIGN(FNXYSM,FNXYE)
               ENDIF
               FNXXYY(ILOADS) = FNXYSM
               DNXY = 0.
               FNXYBG(ILOADS) = FNXYSM
               FNXYEN(ILOADS) = FNXYSM
               FNSML = 0.
               IF (IQUICK(ILOADS).EQ.0) FNSML = -.10*ABS(FNXYSM)
               IF (ICURV.EQ.2) THEN
                   FNXX(ILOADS) = FNSML
                   DNX = 0.
                   FNXBEG(ILOADS) = FNSML
                   FNXEND(ILOADS) = FNSML
               ENDIF
               IF (ICURV.EQ.3) THEN
                   FNYY(ILOADS) = FNSML
                   DNY = 0.
                   FNYBEG(ILOADS) = FNSML
                   FNYEND(ILOADS) = FNSML
               ENDIF
            ENDIF
         ENDIF
      ENDIF
      IF (ITYPE.EQ.4) THEN
         WRITE(13) ISLOAD
         WRITE(13) ISCASE
         FSTEP1 = 0.
         JJJ1 = ISTEP
         JJJ = ISTEP - 1
         FJJ = JJJ
         VAR(IBVAR) = VARBEG + FJJ*DV
         VARPLT(ISTEP) = VAR(IBVAR)
         WRITE(IFILE8,'(/,/,/,/,A)')
     1 ' ************** ITYPE=4: Design sensitivity **************'
         WRITE(IFILE8,'(A,I3,A,A,A,1PE12.4)')
     1 ' DESIGN STEP',ISTEP,', DESIGN VARIABLE=',VARLEG(IBVAR),'=',
     1   VARPLT(ISTEP),': MARGINS FOLLOW...'
         KOUNT = 0
         DO 161 I = 1,NVARB
            IF (ILV(I).EQ.0) GO TO 161
            KOUNT = KOUNT + 1
            JEND = JTERMS(KOUNT)
            IF (JEND.EQ.0) JEND = 1
            VAR(I) = 0.0
            DO 159 J = 1,JEND
              IDL = IDLINK(I,J)
              VAR(I) = VAR(I) +CLINK(I,J)*VAR(IDL)
  159       CONTINUE
            VAR(I) = VAR(I) + CLINK0(I)
  161    CONTINUE
         IZERO = 0
C BEG OCT 1996
         CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,
     1               WW2,T,ANGLE,MATL,IZERO,1,NPRINT,IFILE8)
C END OCT 1996
C BEG MAR 1996
         IF (IBEAM.EQ.1) THEN
            CIRC = B(1)
            FNXX(ILOADS) =  FPLOAD(ILOADS)/B(1)
            FNXBEG(ILOADS) = FNXX(ILOADS)
            FNXEND(ILOADS) = FNXX(ILOADS)
            MX0(ILOADS)  =  FMLOAD(ILOADS)/B(1)
            MX(ILOADS) = MX0(ILOADS)
            PRESS(ILOADS)= -FWLOAD(ILOADS)/B(1)
            IF (NPRINT.GE.2) WRITE(IFILE8,'(A,/,1P4E12.4)')
     1      ' B(1),FNXX(ILOADS),MX(ILOADS),PRESS(ILOADS)=',
     1        B(1),FNXX(ILOADS),MX(ILOADS),PRESS(ILOADS)
         ENDIF
C END MAR 1996
      ENDIF
      IFREEB = IFREEX(ILOADS)
      EXAVEA = EXAVGA(ILOADS)
      NMAX   = NMAXX(ILOADS)
      FNX    = FNXX(ILOADS) +FSTEP1*DNX
      FNY    = FNYY(ILOADS) +FSTEP1*DNY
      FNXY   = FNXXYY(ILOADS) +FSTEP1*DNXY
      MX(ILOADS) = MX0(ILOADS) + FSTEP1*DMX
      MY(ILOADS) = MY0(ILOADS) + FSTEP1*DMY
      FNX0   = FNX00(ILOADS)
      FNY0   = FNY00(ILOADS)
      FNXY0  = FNXY00(ILOADS)
      P      = PRESS(ILOADS)
      IF (IABP(ILOADS).NE.0) THEN
         P = PRESS(ILOADS) +FSTEP1*DP
         IF (ITYPE.EQ.5.AND.IFLAT.EQ.0) P = -FNY/RX
      ENDIF
      PKEEP  = P
C BEG MAR 1996
      IF (IBEAM.EQ.1.AND.ITYPE.EQ.3.AND.FSTEP1.GT.0.) THEN
         FPLOAD(ILOADS) = FPLOAD(ILOADS) + DFPLOD
         FMLOAD(ILOADS) = FMLOAD(ILOADS) + DFMLOD
         FWLOAD(ILOADS) = FWLOAD(ILOADS) + DFWLOD
      ENDIF
C END MAR 1996
      IF (ITYPE.EQ.5) THEN
         FNXPLT(ISTEP) = FNX
         FNYPLT(ISTEP) = FNY
         FNXYPL(ISTEP) = FNXY
         FNX0P = FNX0
         FNY0P = FNY0
         FNXY0P= FNXY0
      ENDIF
      IF (IABT(ILOADS).EQ.1.AND.DTMULT.NE.0.) THEN
         TTMULT = TPMULT +FSTEP1*DTMULT
         DO 1020 ILOOP = 1,2
         DO 1020 ISEG  = 1,4
 1020    TTEMP(ISEG,ILOOP) = TTMULT*TEMP(ISEG,ILOOP,ILOADS)
         IF (IMOD.EQ.0) CALL MOVER(1.,0,FMULT,1,1600)
         IF (IMOD.EQ.0.AND.ITEMP(ILOADS).EQ.1)
     1     CALL MATMLT(IMOD,JJJ,IFILE8,ILOADS,NPRINT,TTEMP,FMULT)
      ENDIF
      IHYDRO = KHYDRO(ILOADS)
      FXBEG  = FNXBEG(ILOADS) +FSTEP1*DNX
      FXEND  = FNXEND(ILOADS) +FSTEP1*DNX
      FYBEG  = FNYBEG(ILOADS) +FSTEP1*DNY
      FYEND  = FNYEND(ILOADS) +FSTEP1*DNY
      FXYBEG = FNXYBG(ILOADS) +FSTEP1*DNXY
      FXYEND = FNXYEN(ILOADS) +FSTEP1*DNXY
      FNSQ = SQRT(FNX**2 + FNY**2 + FNXY**2)
      IF (FNSQ.EQ.0.0) THEN
         WRITE(IFILE8,9)
C BEG MAR 1996
         FNX = -0.00001
         FNXX(ILOADS) = FNX
         IF (IBEAM.EQ.0) FNXY = -.005*FNX
C END MAR 1996
         FNXXYY(ILOADS) = FNXY
         FNSQ = SQRT(FNX**2 + FNY**2 + FNXY**2)
      ENDIF
      NTENSN = 0
      IF (FNX.GE.0.0.AND.FNY.GE.0.0) NTENSN = 1
      FREDUC = 0.999
      IF (IQUICK(ILOADS).EQ.0.AND.ITYPE.EQ.5) FREDUC = 0.995
      NLOGC1 = ABS(FNXY).GT.(FREDUC*FNSQ)
      NLOGC2 = NTENSN.EQ.1.AND.FNXY.NE.0.0
      IF ((NLOGC1.OR.NLOGC2).AND.IQUICK(ILOADS).EQ.0) THEN
         IF (ITYPE.EQ.5) THEN
            IF (ICURV.EQ.2) FNX = -0.10*ABS(FNXY)
            IF (ICURV.EQ.3) THEN
               FNY = -0.10*ABS(FNXY)
               IF (IFLAT.EQ.0) P = -FNY/RX
            ENDIF
            FNXPLT(ISTEP) = FNX
            FNYPLT(ISTEP) = FNY
            GO TO 163
         ENDIF
         WRITE(IFILE8,*)' ********** NOTICE   NOTICE   NOTICE *********'
         WRITE(IFILE8,*)' LOADING IS PURE IN-PLANE SHEAR OR IS IN-PLANE'
         WRITE(IFILE8,*)' SHEAR COMBINED WITH POSITIVE Nx AND Ny.'
         WRITE(IFILE8,*)' HENCE, THE IQUICK = 0 OPTION IS NOT AVAILABLE'
         WRITE(IFILE8,*)' NOR CAN'
         WRITE(IFILE8,*)' POSTBUCKLING ANALYSIS BE DONE FOR THIS LOAD'
         WRITE(IFILE8,*)' SET. IQUICK IS BEING CHANGED FROM 0 TO 1,'
         WRITE(IFILE8,*)' AND CALCULATIONS ARE PROCEEDING. IF YOU WANT'
         WRITE(IFILE8,*)' TO USE THE IQUICK = 0 OPTION WITH LOADING'
         WRITE(IFILE8,*)' IN WHICH IN-PLANE SHEAR PREDOMINATES, PLEASE'
         WRITE(IFILE8,*)' INCLUDE AXIAL COMPRESSION THAT IS AT LEAST'
         WRITE(IFILE8,*)' 10 PERCENT OF THE IN-PLANE SHEAR LOAD.'
         WRITE(IFILE8,*)' ********************************************'
C BEG AUG 1996
C        IF (ITYPE.EQ.3) THEN
C           WRITE(IFILE8,*)' ABORTING THIS RUN BECAUSE IQUICK = 1'
C           WRITE(IFILE8,*)' AND ITYPE = 3 (INCREMENTAL ANALYSIS)'
C           CALL ERREX
C        ENDIF
C END AUG 1996
         IQUICK(ILOADS) = 1
         IQSAVE(ILOADS) = 1
         KOITER = 0
      ENDIF
C BEG OCT 1998
C  "IYXXX" INITIALIZATIONS REMOVED
C END OCT 1998
  163 CONTINUE
      CALL MOVER(1.,0,CRACK,1,990)
      CALL MOVER(0.,0,EIGDIS(1,ILOADS),1,10)
C
      IF (NPRINT.GE.1) THEN
C BEG JAN 1999
C        ATRING = IFLAT.EQ.0.AND.ISTIF(2).NE.0.AND.P.NE.0.0
         ATRING =                ISTIF(2).NE.0.AND.P.NE.0.0
C END JAN 1999
         CASEW ='PANEL ENDS     '
         IF (ATRING) CASEW ='AT RINGS       '
         IF (IABP(ILOADS).EQ.0) THEN
               WRITE(IFILE8,139)
     1             ILOADS,ICASES,CASEW,
     1             FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1             FNX0,FNY0,FNXY0,-P
            ELSE
               WRITE(IFILE8,1391)
     1             ILOADS,ICASES,CASEW,
     1              FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1             -P,FNX0,FNY0,FNXY0
         ENDIF
      ENDIF
C BEG MAR 1996
      IF (IBEAM.EQ.1) WRITE(IFILE8,1396)
     1   FPLOAD(ILOADS),FMLOAD(ILOADS),FWLOAD(ILOADS)
C END MAR 1996
C
      IF (ITYPE.EQ.5.AND.ISTEP.GE.NSTEPU-1) THEN
         WGLSAV = WIMPG(ILS)
         WGLSV1 = WIMPG1(ILS)
         WGLSV2 = WIMPG2(ILS)
         WIMPG(ILS) = 0.
         WIMPG1(ILS) = 0.
         WIMPG2(ILS) = 0.
         WLOSAV = WIMPL(ILS)
         WIMPL(ILS) = 0.0
         WPASAV = WIMPP(ILS)
         WIMPP(ILS) = 0.
         WLOSV2 = WIMPL0(ILS)
         WIMPL0(ILS) = 0.0000001
         IWIDES = IWIDE(ILS)
         IWIDE(ILS) = 0
         IEFFKS = IEFFSK
         IEFFSK = 0
      ENDIF
C BEG NOV 1994
      IF (ITYPE.EQ.1.AND.NSERCH(ILS).NE.0) NWAVES(ILS,ICASES) = 0
C END NOV 1994
C BEG FEB 1996
      PBEIGK = 10.E+16
      PBEIGB = 10.E+16
C END FEB 1996
C BEG DEC 1996
      ILOWJJ = ILOW(ILS,ICASES)
C END DEC 1996
C BEG OCT 1998

C     write(IFILE8,667) '3rd', NVARB

      CALL STRUCT(IFILE8,0,IW,ILOC,DS,W(N5),W(N6),W(N4),
     1 W(N7),W(N8),W(N9),W(N10),W(N11),W(N12),NCONST,CONSTR,WORDB,
     1 IADDB,OBJ,WORDOB,NWAVES(ILS,ICASES),NSERCH(ILS),EIGSAV,EPS1,
     1 EPS2,EPS12,NMAX,IQUIT(ILS),1,KOITER,JJJ,IREDUC(ILS),CONMAX,ILS,
     1 FSGEN(ILS),FSPAN(ILS),FSLOC(ILS),FSSTR(ILS),IQUICK(ILS),IPOINC,
     1 INUMTT,EIGBOW(ILS),CRACK,IWG,ILOCG,DSG,W(N5G),W(N6G),W(N4G),
     1 W(N7G),W(N8G),W(N9G),W(N10G),W(N11G),W(N12G),IGENRL(ILS),
     1 0,EIGDIS(1,ILS),EALLST,CSLOPE,M0,ALPB,FSQ,ITYPE,IFILE4,IPROMP,
     1 IOUT,ILOW(ILS,ICASES),P,IWIDE(ILS),MCRIP,NCRIP,IOBJ,WIMPG(ILS),
C BEG DEC 2001
     1 WIMPL(ILS),NOCONV,IABP(ILS),ECC(ILS),ILONG,IEND,NLOADS,
C END DEC 2001
     1 IWR,ILOCR,DSR,W(N5R),W(N6R),W(N4R),W(N7R),W(N8R),W(N9R),W(N10R),
C BEG JUL 1999
     1  W(N11R),W(N12R),IFREEB,ILOWVE(ILS),IWCON(ILS),WPGMAX(ILS),
     1  KOUNTM,MARK,MARK2,MARK3,ICWEBL,ICASES,IBPREL(ILS),VAR,ISTOPP,
     1  TTEMP,FMULT,IMTEMP(ILS),FSBSTR(ILS),IPOPX(ILS),ILAMB2,
     1  ILAM34,MX(ILS),MY(ILS),NCASES,ITRUSS,IABT(ILS),EIGBOP,IHOOP,
C BEG DEC 2001
     1 WIMPG1(ILS),WIMPG2(ILS),NVARB,ISUB,WORDV,IICURV(ILS),IIKOIT(ILS))
C END DEC 2001
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUL 1999
C END OCT 1998
      IF (ITYPE.EQ.5.AND.ISTEP.GE.NSTEPU-1) THEN
         WIMPG(ILS) = WGLSAV
         WIMPG1(ILS)= WGLSV1
         WIMPG2(ILS)= WGLSV2
         WIMPL(ILS) = WLOSAV
         WIMPP(ILS) = WPASAV
         WIMPL0(ILS)= WLOSV2
         IWIDE(ILS) = IWIDES
         IEFFSK = IEFFKS
      ENDIF
      IF (ISTEP.EQ.1.OR.ITYPE.EQ.4) THEN
      IF (NPRINT.GE.1.AND.(ILOADS.EQ.1.OR.ILOADS.EQ.NLOADS)) THEN
      CALL OUTOPT(IFILE8,NVARB,IDEC,ISCAPE,ILV,CLINK,IDLINK,VARLOW,
     1 VARHI,VAR,WORDV,
     1 '         SUMMARY OF INFORMATION FROM OPTIMIZATION ANALYSIS      
     1  ',57)
      ENDIF
      ENDIF
C
      IF (IQUIT(ILOADS).EQ.1) THEN
         WRITE(IFILE8,14) NWAVES(ILOADS,ICASES),NMAX
         WRITE(IFILE8,15)
         CALL ERREX
      ENDIF
C BEG NOV 1994
      IF (ITYPE.GE.3) THEN
         MAXNSX(ILS,ICASES) = MAX(NSAVEX,MAXNSX(ILS,ICASES))
         MAXNST(ILS,ICASES) = MAX(NSAVET,MAXNST(ILS,ICASES))
C BEG AUG 1995
         MAXNSZ(ILS,ICASES) = MAX(NSAVEZ,MAXNSZ(ILS,ICASES))
C END AUG 1995
         IF (MAXNSX(ILS,ICASES).GT.NWAVES(ILS,ICASES)
     1        .AND.MAXNSX(ILS,ICASES).GE.MAXNST(ILS,ICASES))
     1        NWAVES(ILS,ICASES) = MAXNSX(ILS,ICASES)
         IF (MAXNST(ILS,ICASES).GT.NWAVES(ILS,ICASES)
     1        .AND.MAXNST(ILS,ICASES).GE.MAXNSX(ILS,ICASES))
     1        NWAVES(ILS,ICASES) = MAXNST(ILS,ICASES)
C BEG AUG 1995
         IF (MAXNSZ(ILS,ICASES).GT.NWAVES(ILS,ICASES)
     1        .AND.MAXNSZ(ILS,ICASES).GE.MAXNSX(ILS,ICASES)
     1        .AND.MAXNSZ(ILS,ICASES).GE.MAXNST(ILS,ICASES))
     1        NWAVES(ILS,ICASES) = MAXNSZ(ILS,ICASES)
C END AUG 1995
      ENDIF
C END NOV 1994
C
      IF (NCONST.EQ.0) THEN
         WRITE(IFILE8,*)'     NO CRITICAL MARGINS FOR THIS CONDITION.'
      ENDIF
C
      IF (NCONST.GT.0) THEN
C BEG MAY 2003
         JKSCPM = JJJ + KSCAPE
C END MAY 2003
         DO 140 I = 1,NCONST
C BEG JAN 1996
C23456789012345678901234567890123456789012345678901234567890123456789012
            CONPRT(I) = CONSTR(I) - 1.
            IF (ISKIP(ILOADS,ICASES).EQ.1.AND.CONPRT(I).LT.-0.05) THEN
               ISKIPX(ILOADS,ICASES) = 1
C BEG MAY 2003
               ISKIPZ(JKSCPM,ILOADS,ICASES) = 1
C END MAY 2003
            ENDIF
  140    CONTINUE
C BEG MAY 2003 (comment out following five to get UNKNOWN FEASIB.)
C        IF (ISKIPX(ILOADS,ICASES).EQ.0.AND.JKSCPM.GT.0) THEN
C           DO 1402 I = 1,JKSCPM
C              ISKIPZ(I,ILOADS,ICASES) = 0
C1402       CONTINUE
C        ENDIF
C END MAY 2003
C END JAN 1996
      ENDIF
      IF (NPRINT.EQ.0)
     1      WRITE(IFILE8,1392) ITYPE,IQUICK(ILOADS),ILOADS,ICASES,
     1                         FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1                         FNX0,FNY0,-P
C BEG FEB 2007
      IF (NPRINT.GE.0.AND.IQUICK(ILOADS).EQ.0.AND.PBEIGK.EQ.0.0)
     1 WRITE(IFILE8,'(/,A)')
     1' Local buckling from KOITER theory was not computed.'
C END FEB 2007
      IF (NPRINT.GE.0.AND.IQUICK(ILOADS).EQ.0)
C BEG JAN 2007
C    1      WRITE(IFILE8,1394) PBEIGK,PBEIGB
     1      WRITE(IFILE8,'(A,A,/,A,1P,E12.4,A)')
     1' BUCKLING LOAD FACTORS FOR LOCAL BUCKLING FROM KOITER v.',
     1' BOSOR4 THEORY:',
     1'  Local buckling load factor from KOITER theory =',PBEIGK,
     1 ' (flat skin)'
            IF (IICURV(ILOADS).EQ.0.AND.NPRINT.GE.0)
     1      WRITE(IFILE8,'(A,1P,E12.4,A)')
     1'  Local buckling load factor from BOSOR4 theory =',PBEIGB,
     1 ' (flat skin)'
            IF (IICURV(ILOADS).NE.0.AND.NPRINT.GE.0)
     1      WRITE(IFILE8,'(A,1P,E12.4,A)')
     1'  Local buckling load factor from BOSOR4 theory =',PBEIGB,
     1 ' (curved skin)'
C END JAN 2007
      IF (NPRINT.GE.1) THEN
C BEG JAN 1999
C        ATRING = IFLAT.EQ.0.AND.ISTIF(2).NE.0.AND.P.NE.0.0
         ATRING =                ISTIF(2).NE.0.AND.P.NE.0.0
C END JAN 1999
         CASEW ='PANEL ENDS     '
         IF (ATRING) CASEW ='AT RINGS       '
         IF (IABP(ILOADS).EQ.0) THEN
                  WRITE(IFILE8,139)
     1                ILOADS,ICASES,CASEW,
     1                FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1                FNX0,FNY0,FNXY0,-P
         ELSE
                  WRITE(IFILE8,1391)
     1                ILOADS,ICASES,CASEW,
     1                 FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1                -P,FNX0,FNY0,FNXY0
         ENDIF
      ENDIF
C BEG MAR 1996
      IF (IBEAM.EQ.1) WRITE(IFILE8,1396)
     1   FPLOAD(ILOADS),FMLOAD(ILOADS),FWLOAD(ILOADS)
C END MAR 1996
C
  139 FORMAT(/' *********** LOAD SET NO.',I2,'  **************'/
     1' ICASE = ',I2,'  (ICASE=1 MEANS PANEL MIDLENGTH)'/
     1'             (ICASE=2 MEANS ',A,')'//
     1'   APPLIED LOADS IN LOAD SET A ("eigenvalue" loads):'/
     1'         Applied     axial       stress resultant, Nx=',1PE12.4/
     1'         Applied circumferential stress resultant, Ny=',1PE12.4/
     1'         Applied    in-plane     shear  resultant,Nxy=',1PE12.4/
     1'         Applied     axial       moment resultant, Mx=',1PE12.4/
     1'         Applied circumferential moment resultant, My=',1PE12.4//
     1'   APPLIED LOADS IN LOAD SET B ( fixed uniform loads):'/
     1'         Applied     axial       stress resultant,Nx0=',1PE12.4/
     1'         Applied circumferential stress resultant,Ny0=',1PE12.4/
     1'         Applied    in-plane    shear  resultant,Nxy0=',1PE12.4/
     1'         Applied pressure (positive for upward),   p =',1PE12.4//
C BEG AUG 1994
C BEG JUN 1996
     1' NOTE: "F.S." means "Factor of Safety";'/
     1' "DONL" means "Donnell shell theory used.";'/
     1' "SAND" means "Sanders shell theory used." panda2.news ITEM 128'/
     1' "Dseg" means "Segment numbering used in discretized model"'/
     1' "Iseg" means "Segment numbering used for input data." ITEM 272')
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUN 1996
C END AUG 1994
 1391 FORMAT(/' *********** LOAD SET NO.',I2,'  **************'/
     1' ICASE = ',I2,'  (ICASE=1 MEANS PANEL MIDLENGTH)'/
     1'             (ICASE=2 MEANS ',A,')'//
     1'   APPLIED LOADS IN LOAD SET A ("eigenvalue" loads):'/
     1'         Applied     axial       stress resultant, Nx=',1PE12.4/
     1'         Applied circumferential stress resultant, Ny=',1PE12.4/
     1'         Applied    in-plane     shear  resultant,Nxy=',1PE12.4/
     1'         Applied     axial       moment resultant, Mx=',1PE12.4/
     1'         Applied circumferential moment resultant, My=',1PE12.4/
     1'         Applied pressure (positive for upward),   p =',1PE12.4//
     1'   APPLIED LOADS IN LOAD SET B ( fixed uniform loads):'/
     1'         Applied     axial       stress resultant,Nx0=',1PE12.4/
     1'         Applied circumferential stress resultant,Ny0=',1PE12.4/
     1'         Applied    in-plane    shear  resultant,Nxy0=',1PE12.4//
C BEG AUG 1994
C BEG JUN 1996
     1' NOTE: "F.S." means "Factor of Safety";'/
     1' "DONL" means "Donnell shell theory used.";'/
     1' "SAND" means "Sanders shell theory used." panda2.news ITEM 128'/
     1' "Dseg" means "Segment numbering used in discretized model"'/
     1' "Iseg" means "Segment numbering used for input data." ITEM 272')
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUN 1996
C END AUG 1994
      IF (NCONST.GT.0) THEN
C BEG AUG 1998
C BEG JULY 1998
C23456789012345678901234567890123456789012345678901234567890123456789012
C     IF (ITYPE.NE.1.AND.IALTSN.NE.0) THEN
C      DO 1480 I = 1,NCONST
C       ILETX = INDEX(WORDB(I),'0.95*altsol')
C       IF (ILETX.NE.0) WRITE(IFILE8,
C    1  '(/,A,I3,A,/,1PE12.4,A,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
C    1' ** NOTE ** Margin No.',I,': Margin value and definition=',
C    1  CONPRT(I),'  ',WORDB(I),
C    1' Since in MAINSETUP you have chosen "alternative solution",',
C    1' this margin (from the alternative solution) is the one that',
C    1' is actually used during optimization cycles. The margin',
C    1' for the same type of buckling but WITHOUT the string,',
C    1' "0.95*altsol", in its definition is NOT used for optimization.',
C    1' Therefore, do not worry if THAT margin is negative.',
C    1' Please read ITEMs 438,444 in ..panda2/doc/panda2.news for more.'
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C       ILETX = INDEX(WORDB(I),'rolling with local buck')
C       IF (ILETX.NE.0) WRITE(IFILE8,
C    1  '(/,A,I3,A,/,1PE12.4,A,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
C    1' ** NOTE ** Margin No.',I,': Margin value and definition=',
C    1  CONPRT(I),'  ',WORDB(I),
C    1' Since in MAINSETUP you have chosen "alternative solution",',
C    1' this margin is not the same as the one that is actually used',
C    1' during optimization cycles. The margin for the same type of',
C    1' buckling that is used during optimization cycles is different',
C    1' because the "rolling-with-local-buckling" load factor is',
C    1' multiplied by the ratio, EIGALT/EIGPAN (see ITEM 438).',
C    1' Therefore, do not worry if the margin just given is negative.',
C    1' Please read ITEMs 438,444 in ..panda2/doc/panda2.news for more.'
C1480  CONTINUE
C     ENDIF
C END JULY 1998
C END AUG 1998
         TITLE = 'MARGINS FOR CURRENT DESIGN: LOAD CASE NO. '
     1           //CILOAD//', SUBCASE NO. '//CICASE//'       '
C BEG NOV 1996
C        CALL OUTVAR(NCONST,CONPRT,WORDB,IADDB,TITLE,IFILE8,80,0,ISUB)
         CALL OUTVR2(NCONST,CONPRT,WORDB,TITLE,IFILE8,67,1,ISUB,6)
C END NOV 1996
C        FIND OUT IF WARNING SHOULD BE PRINTED ABOUT STRINGER SPACING.
         IF ((ITYPE.EQ.1.OR.ITYPE.EQ.2).AND.IWARNP.EQ.0.AND.
     1     ISTIF(1).NE.0.AND.ISOGRD.EQ.0.AND.ISTIF(1).NE.5) THEN
            ILETX = INDEX(VARLEG(1),'      B(')
            FNNORM = SQRT(FNX**2 + FNY**2 + FNXY**2)
            FNXRAT = FNX/FNNORM
            IF (ILETX.NE.0.AND.IDEC(1).EQ.1.AND.FNXRAT.LT.-0.448
     1                    .AND.B(1).GT.1.2*VARLOW(1)) THEN
               IWARNG = 1
               DO 1490 I = 1,NCONST
                  ILETY = INDEX(WORDB(I),'general buck;')
                  ILETZ = INDEX(WORDB(I),'Wide column')
C BEG MAR 2007
                  ILETW = INDEX(WORDB(I),'General buckl')
                  IF ((ILETY.NE.0.OR.ILETZ.NE.0.OR.ILETW.NE.0)
     1                          .AND.CONPRT(I).LT.0.10) THEN
C END MAR 2007
                     IWARNP = 1
                     IWARNG = 0
                     GO TO 1494
                  ENDIF
 1490          CONTINUE
            ENDIF
         ENDIF
      ENDIF
 1494 CONTINUE
      IF ((ITYPE.EQ.1.AND.IMOD.EQ.0).OR.ITYPE.EQ.4.OR.ITYPE.EQ.5) THEN
         WRITE(13) JJJ,ILOADS,ICASES,NVARB,NCAR,IABP(ILOADS),
     1   IWCON(ILOADS),IBPREL(ILOADS),IFREEB,IQUICK(ILOADS),
     1   IWIDE(ILOADS),IABT(ILOADS)
C
         WRITE(13) FNX,FNY,FNXY,-P,FNX0,FNY0,FNXY0,ECC(ILOADS),
     1             WIMPG(ILOADS),WIMPL(ILOADS),TPMULT,EPSRUT,EPSTIP
C BEG APR 2000 (NEXT TWO STATEMENTS MOVED OUT OF "IF" LOOP)
         WRITE(13) OBJ,WORDOB
         WRITE(13) (VAR(I),I=1,NVARB)
C END APR 2000
         IF ((ILOADS.EQ.1.AND.ICASES.EQ.1)
     1         .OR.ITYPE.EQ.4.OR.ITYPE.EQ.5) THEN
C BEG APR 2000 (NEXT TWO STATEMENTS MOVED UP)
C            WRITE(13) OBJ,WORDOB
C            WRITE(13) (VAR(I),I=1,NVARB)
C END APR 2000
             WRITE(13) (WORDV(I),I=1,NVARB)
             WRITE(13) (IADDV(I),I=1,NVARB)
             WRITE(13) (CLINK(I,1),I=1,NVARB)
             WRITE(13) (IDEC(I),I=1,NVARB)
             WRITE(13) (ILV(I),I=1,NVARB)
             WRITE(13) (IDLINK(I,1),I=1,NVARB)
             WRITE(13) (ISCAPE(I),I=1,NVARB)
             WRITE(13) (VARLOW(I),I=1,NVARB)
             WRITE(13) (VARHI(I),I=1,NVARB)
         ENDIF
         IF (NCAR.GT.0) THEN
            WRITE(13) (CPLOT(I),I=1,NCAR)
            WRITE(13) (PCWORD(I),I=1,NCAR)
            WRITE(13) (IADDCC(I),I=1,NCAR)
         ENDIF
      ENDIF
C
      IF (ITYPE.EQ.3) THEN
         IF (ISTEP.EQ.1) THEN
             REWIND 13
             WRITE(13) DNX,DNY,DNXY,DMX,DMY,DPIN,DTMULT
             WRITE(13) ILOADS,ICASES
             WRITE(13) NVARB,IABP(ILOADS),IQUICK(ILOADS),
     1                 IWIDE(ILOADS),IABT(ILOADS)
             WRITE(13) OBJ,WORDOB
             WRITE(13) (VAR(I),I=1,NVARB)
             WRITE(13) (WORDV(I),I=1,NVARB)
             WRITE(13) (IADDV(I),I=1,NVARB)
             WRITE(13) (CLINK(I,1),I=1,NVARB)
             WRITE(13) (IDEC(I),I=1,NVARB)
             WRITE(13) (ILV(I),I=1,NVARB)
             WRITE(13) (IDLINK(I,1),I=1,NVARB)
             WRITE(13) (ISCAPE(I),I=1,NVARB)
             WRITE(13) (VARLOW(I),I=1,NVARB)
             WRITE(13) (VARHI(I),I=1,NVARB)
         ENDIF 
         IF (ISTOPP.EQ.1) THEN
            NSTEPS = ISTEP
         ENDIF
         WRITE(13) NSTEPS,NCAR,ISTEP,ISTOPP,NSEGB5,(I5(I),I=1,NSEGB5)
         WRITE(13) FNX,FNY,FNXY,MX(ILOADS),MY(ILOADS),
     1             FNX0,FNY0,FNXY0,-P,FXBEG,FXEND,FYBEG,
     1             FYEND,FXYBEG,FXYEND,TTMULT,EPSRUT,EPSTIP
         WRITE(13) (PBBOW(I),I=1,20)
         WRITE(13) PBSLOP,PBMWAV,PBA,PBF,(PBEPS(I),I=1,3),
     1             (PBCTAN(I),I=1,4),(PBNSKN(I),I=1,3)
C BEG JAN 1996
         WRITE(13) (PBCTN2(I),I=1,6)
C END JAN 1996
         WRITE(13) ((RESULK(I,J,1),I=1,3),J=1,5)
         WRITE(13) ((RESULK(I,J,2),I=1,3),J=1,5)
         WRITE(13) ((PBW(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PBU(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PBV(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PW(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PU(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PV(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PBNX(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PBNY(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PBNXY(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((ZREF(I,J),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEX(I,J,1),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEY(I,J,1),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEXY(I,J,1),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEX(I,J,2),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEY(I,J,2),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEXY(I,J,2),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEX45(I,J,1),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEY45(I,J,1),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEXY45(I,J,1),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEX45(I,J,2),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEY45(I,J,2),I=1,23),J=1,NSEGB5)
         WRITE(13) ((PEXY45(I,J,2),I=1,23),J=1,NSEGB5)
         IF (NCAR.GT.0) THEN
            WRITE(13) (CPLOT(I),I=1,NCAR)
            WRITE(13) (PCWORD(I),I=1,NCAR)
            WRITE(13) (IADDCC(I),I=1,NCAR)
         ENDIF
C
         DO 1393 J = 1,NSEGB5
         DO 1393 I = 1,23
            PSUM = ABS(PBW(I,J)) + ABS(PW(I,J))
            WMAX = MAX(WMAX,PSUM)
 1393    CONTINUE
C
         IF (ISTOPP.EQ.1) THEN
            WRITE(IFILE8,*)'  '
            WRITE(IFILE8,*)' JUST PASSED EITHER THE GENERAL INSTABILITY'
            WRITE(IFILE8,*)' LOAD OR THE PANEL INSTABILITY LOAD.'
            WRITE(IFILE8,*)' NUMBER OF LOAD STEPS TAKEN, NSTEPS=',NSTEPS
            WRITE(IFILE8,*)'  '
            GO TO 137
         ENDIF
      ENDIF
      IF (ITYPE.EQ.5.AND.ISTEP.EQ.NSTEPU) THEN
         CPLOT1 = 0.
         DO 1022 I = 1,NCAR
            ILETC = 0
            IF (CPLOT1.EQ.0.) THEN
C              IF (ISTIF(2).EQ.0) THEN
                  ILETC = INDEX(PCWORD(I),' general buck;')
C              ELSE
C                 ILETC = INDEX(PCWORD(I),' smear string;')
C              ENDIF
C              IF (ILETC.NE.0) CPLOT1 = CPLOT(I)
               IF (ILETC.NE.0) CPLOT1 = (CPLOT(I)+1.)*FSAFEP(I)
            ENDIF
C           PCWRD1(I) = PCWORD(I)
 1022    CONTINUE
      ENDIF
      IF (ITYPE.EQ.5) THEN
         IF (ISTEP.EQ.1) THEN
            DO 1024 I = 1,NCAR
               PCWRD1(I) = PCWORD(I)
               FSAFP2(I) = FSAFEP(I)
 1024       CONTINUE
            NCARGL = NCAR
         ELSE
            DO 1028 I = 1,NCAR
               DO 1026 J = 1,NCARGL
                  IF (PCWRD1(J).EQ.PCWORD(I)) GO TO 1028
 1026          CONTINUE
               NCARGL = NCARGL + 1
               PCWRD1(NCARGL) = PCWORD(I)
               FSAFP2(NCARGL) = FSAFEP(I)
 1028       CONTINUE
         ENDIF
      ENDIF
  136 CONTINUE
C
      IF (ITYPE.EQ.4) THEN
         VAR(IBVAR) = VARSAV
         KOUNT = 0
         DO 172 I = 1,NVARB
            IF (ILV(I).EQ.0) GO TO 172
            KOUNT = KOUNT + 1
            JEND = JTERMS(KOUNT)
            IF (JEND.EQ.0) JEND = 1
            VAR(I) = 0.0
            DO 171 J = 1,JEND
              IDL = IDLINK(I,J)
              VAR(I) = VAR(I) +CLINK(I,J)*VAR(IDL)
  171       CONTINUE
            VAR(I) = VAR(I) + CLINK0(I)
  172    CONTINUE
         IZERO = 0
C BEG OCT 1996
         CALL SETUPC(NVARB,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,WW,
     1               WW2,T,ANGLE,MATL,IZERO,1,NPRINT,IFILE8)
C END OCT 1996
C BEG MAR 1996
         IF (IBEAM.EQ.1) THEN
            CIRC = B(1)
            FNXX(ILOADS) =  FPLOAD(ILOADS)/B(1)
            FNXBEG(ILOADS) = FNXX(ILOADS)
            FNXEND(ILOADS) = FNXX(ILOADS)
            MX0(ILOADS)  =  FMLOAD(ILOADS)/B(1)
            MX(ILOADS) = MX0(ILOADS)
            PRESS(ILOADS)= -FWLOAD(ILOADS)/B(1)
            IF (NPRINT.GE.2) WRITE(IFILE8,'(A,/,1P4E12.4)')
     1      ' B(1),FNXX(ILOADS),MX(ILOADS),PRESS(ILOADS)=',
     1        B(1),FNXX(ILOADS),MX(ILOADS),PRESS(ILOADS)
         ENDIF
C END MAR 1996
         ITER1 = NSTEPU
      ENDIF
      IF (ITYPE.EQ.5) ITER1 = NSTEPU
C
C BEG DEC 1998
      IF (ITYPE.EQ.1.AND.IGOTO2(ILOADS,ICASES).EQ.1) THEN
         ISKIPW(JJJ+1,ILOADS,ICASES) = 1
         WRITE(IFILE8,'(/,A,/,8I7)')
     1 ' ILOADS,ICASES,IGOTO2(ILS,ICS),JJJ,IABPS,IABTS,IABP,IABT=',
     1   ILOADS,ICASES,IGOTO2(ILOADS,ICASES),JJJ,IABPS,IABTS,
     1   IABP(ILOADS),IABT(ILOADS)
C        WRITE(IFILE8,'(A,I7)')' ISKIPW(JJJ+1,ILOADS,ICASES)=',
C    1                           ISKIPW(JJJ+1,ILOADS,ICASES)
      ENDIF
C END DEC 1998
  137 CONTINUE
C BEG NOV 2003
      IALTSN = IALTSZ
      IALTSV = IALTSN
C END NOV 2003
  138 CONTINUE
C BEG DEC 2004
C     DO 1468 I = 1,5
C     DO 1468 J = 1,2
C     DO 1468 K = 1,6
C     IF (I.LE.2) WRITE(8,'(A,3I2,1P,2E12.4)')
C    1 ' I,J,K,SLPRAT(K,I,J),EHILOW(K,I,J)=',
C    1   I,J,K,SLPRAT(K,I,J),EHILOW(K,I,J)
C1468 CONTINUE
C END DEC 2004
C
C********************************************************************
C END FINAL DESIGN EVALUATION, OR EVALUATION OF FIXED DESIGN.
C********************************************************************
C
C
C********************************************************************
C BEGIN FINAL OUTPUT AND UPDATING OF DATA BASES.
C********************************************************************
C
 1381 CONTINUE
      WRITE(IFILE8,141) NLOADS
  141 FORMAT(' ***********  ALL',I2,' LOAD SETS PROCESSED  ***********'/
     1       ' *****************************************************'//)
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG MAR 1996
      IF (IBEAM.EQ.0.AND.IWARNG.EQ.1) THEN
C END MAR 1996
C BEG DEC 2003
         IF (NPRINT.GT.-1) WRITE(IFILE8,1492)
C END DEC 2003
 1492    FORMAT(' **** WARNING ******** WARNING ******** WARNING ****'/
     1' THERE IS SOME POSITIVE MARGIN FOR GENERAL INSTABILITY AND THE'/
     1' STRINGER SPACING IS NOT AT ITS LOWER BOUND.  IF YOU HAVE RUN'/
     1' PANDAOPT MANY TIMES IN SUCCESSION IN ORDER TO GET AN OPTIMUM'/
     1' DESIGN, YOU MAY BE NEAR A LOCAL OPTIMUM BUT MAYBE NOT A GLOBAL'/
     1' OPTIMUM. USE "CHANGE" TO RESET THE STRINGER SPACING b TO A'/
     1' SMALLER VALUE.  ALSO, POSSIBLY USE "DECIDE" TO RESET THE'/
     1' LOWER BOUND OF THE STRINGER SPACING b TO A SMALLER VALUE.'/
     1' THEN PERFORM MORE "PANDAOPTs".'//
     1' *** NOTE 1: IT IS OFTEN A GOOD IDEA NOT TO HAVE THE STRINGER'/
     1'           SPACING AS A DECISION VARIABLE, BUT TO PERFORM'/
     1'           OPTIMIZATIONS FOR SEVERAL DIFFERENT FIXED STRINGER'/
     1'           SPACINGS.'//
     1' *** NOTE 2: IF THE PANEL IS IMPERFECT OR HAS LOW STRESS ALLOW-'/
     1'           IT IS LIKELY THAT AT THE GLOBAL OPTIMUM DESIGN THE'/
     1'           GENERAL AND/OR INTER-RING BUCKLING LOAD MARGINS ARE'/
     1'           NOT CRITICAL. THEN PLEASE DISREGARD THIS WARNING.'/
     1' *** END WARNING ******** END WARNING ******** END WARNING ***'/)
      ENDIF
      IF (ITYPE.EQ.1.AND.IMOD.EQ.0) THEN
         ITER1  = JJJ + 1 + KSCAPE
         ITRTOT = ITRTOT + ITER1
      ENDIF
      CALL OUTOPT(IFILE8,NVARB,IDEC,ISCAPE,ILV,CLINK,IDLINK,VARLOW,
     1 VARHI,VAR,WORDV,
     1 '         SUMMARY OF INFORMATION FROM OPTIMIZATION ANALYSIS      
     1  ',57)
C
      IF (NPRINT.GE.1) WRITE(IFILE8,19)
      ARGSTR = '  CURRENT VALUE OF THE OBJECTIVE '//
     $         'FUNCTION:                        '
      CALL OUTVAR(1,OBJ,WORDOB,IADDD,ARGSTR,IFILE8,65,0,ISUB)
C BEG JUN 2004
            WRITE(IFILE8,'(/,A,1P,E12.4,/,A,1P,E12.4)')
     1   '  TOTAL WEIGHT OF SKIN                            = ',WGTSKN,
     1   '  TOTAL WEIGHT OF SUBSTIFFENERS                   = ',WGTSUB
C END JUN 2004
C BEG APR 1997
           WRITE(IFILE8,'(A,1P,E12.4,/,A,1P,E12.4,/,A,1P,E12.4)')
     1  '  TOTAL WEIGHT OF STRINGERS                       = ',WGTSTR,
     1  '  TOTAL WEIGHT OF RINGS                           = ',WGTRNG,
     1  '  SPECIFIC WEIGHT (WEIGHT/AREA) OF STIFFENED PANEL= ',WGTSPC
C END APR 1997
      IF (NPRINT.GE.1) WRITE(IFILE8,21)
C
      IF (ITYPE.EQ.1.AND.NPRINT.GT.1) THEN
         WRITE(IFILE8,*)' ***** TO GET FURTHER, SET NPRINT=0 or 1 *****'
         CALL ERREX
      ENDIF
C
      IF (NPRINT.GE.1) THEN
         ARGSTR = 'PARAMETERS WHICH ARE ALWAYS FIXED'//
     $            '.  NONE CAN BE DECISION VARIAB. '
         CALL OUTVAR(NPAR,PAR,WORDP,IADDP,ARGSTR,IFILE8,80,1,ISUB)
C
         ARGSTR = 'PARAMETERS WHICH ARE CLASSIFIED A'//
     $            'S ALLOWABLES (e.g. max. stress) '
         CALL OUTVAR(NALLOW,ALLOW,WORDA,IADDA,ARGSTR,IFILE8,65,1,ISUB)
C
         CALL OUTWAL(IFILE8,ISTIF,NLAYER,NSEG,LTYPE,T,ANGLE,MATL,INTEXT,
     1               CRACK,B2,WW2)
      ENDIF
C
      IF (ITYPE.EQ.3.OR.ITYPE.EQ.4.OR.ITYPE.EQ.5) THEN
         CALL STORCM(IFILE7)
         GO TO 167
      ENDIF
C     PREPARE PLOTTING VECTORS FOR PROCESSING WITH BOSOR4POST...
C
      NVEC = NLOADS
      IFLAG = 0
      NLAST = 0
      DO 1002 I = 1,NLOADS
 1002 CONTINUE
C
      IF (NLAST.NE.-1) THEN
C
            IVECT = 0
            DO 145 I = 1,2
            NVECRL(I) = NLOADS
            DO 143 J = 1,NLOADS
            IVECT = IVECT + 1
            EIGENW(IVECT) = EIGDIS(I,J)
            IF (I.EQ.1) THEN 
C              IF (IQUICK(J).EQ.1) CALL MOVER(0.,0,YLOC(1,J,1),1,M3)
C              IF (IQUICK(J).EQ.1) CALL MOVER(0.,0,YLOC(1,J,2),1,M3)
C              CALL TRANS2(M3,YLOC(1,J,1),W(N10))
C              CALL GASP(W(N10),2*M3,1,IDMODE(IVECT))
            ENDIF
            IF (I.EQ.2) THEN 
C              IF (IQUICK(J).EQ.1) CALL MOVER(0.,0,YGEN(1,J),1,M3)
C              CALL TRANS2(M3,YGEN(1,J),W(N10))
C              CALL GASP(W(N10),2*M3,1,IDMODE(IVECT))
            ENDIF
C    C      WRITE(6,1003) I,J,IVECT,IDMODE(IVECT),IDMAX,IDMAXG,IDZ
 1003 FORMAT(//' I,J,IVECT,IDMODE(IVECT),IDMAX,IDMAXG,IDZ=',7I10)
C    C      CALL GASP(ZAX,3000,3,IDZ)
C     WRITE(6,1004) (ZAX(IIII),IIII=2001,2050)
 1004 FORMAT(' ANGLES IN I,J LOOP AT END...'/(1P,10E12.4))
C
  143       CONTINUE
  145       CONTINUE
            N0B = 1
            NMINB = 1
            NMAXB = 2
            INCRB = 1
         IBLCKM = IBLOCK
         IU = 10
         IBLOCK = IBLCKG
         IDTEMP = IDMAX
         IDMAX  = IDMAXG
         IFLAG = 0
         NVECG = NLOADS
         NVECRG(1) = NLOADS
         DO 153 J = 1,NLOADS
         IF (IGENRL(J).EQ.1) IFLAG = 1
         EIGENG(J) = EIGDIS(3,J)
C        CALL TRANS2(M3G,YLOCG(1,J),W(N10G))
C        CALL GASP(W(N10G),2*M3G,1,IDMODG(J))
C        WRITE(8,*)' GENERAL INSTABILITY MODE SHAPE, ILOADS =', J
C        WRITE(8,2011) (YLOCG(I,J),I=1,M3G)
 2011    FORMAT(1P,10E12.4)
C        WRITE(8,2012) IDMODG(J)
 2012    FORMAT(/' STORED VIA GASP WITH ID NO.',I5/)
  153    CONTINUE
         IBLCKG = IBLOCK
         IU = 11
         IBLOCK = IBLCKM
         IDMAXG = IDMAX
         IDMAX  = IDTEMP
         N0BG = 1
         NMINBG = 1
         NMAXBG = 1
         INCRBG = 1
C        CALL GASP(ZAX,3000,3,IDZ)
C        WRITE(6,1005) IDMAX,IDMAXG,IDZ, (ZAX(IIII),IIII=2001,2050)
 1005 FORMAT(//' AT END..IDMAX,IDMAXG,IDZ=',3I5,' ANGLES='/(1P,10E12.4))
C
C
      ENDIF
C
      CALL STORCM(IFILE7)
      REWIND IFILE9
      CALL STOCM1(IFILE9)
      CALL STOCM2(IFILE9)
C
      NLASTS = NLAST
C
C     IF (IFLAG.EQ.1) THEN
         REWIND IFILE1
         CALL GETCM1(IFILE1)
         CALL GETCM2(IFILE1)
         IDMAX = IDMAXG
         NLAST = NLASTS
         INDIC = 1
         NPRINT  = 1
         M3 = M3G
         NVEC = NVECG
         NVECRL(1) = NVECRG(1)
         N0B = N0BG
         NMINB = NMINBG
         NMAXB = NMAXBG
         INCRB = INCRBG
         DO 160 I = 1,NLOADS
         EIGENW(I) = EIGENG(I)
         IDMODE(I) = IDMODG(I)
  160    CONTINUE
         REWIND IFILE1
         CALL STOCM1(IFILE1)
         CALL STOCM2(IFILE1)
C     ENDIF
C
      CALL GASP(DUM1,DUM2,-2,DUM3)
      IU = 10
      IDTEMP = IDMAX
      IDMAX  = IDMAXG
*     CALL GASP(DUM1,DUM2,-2,DUM3)
      IU = 11
      IDMAXG = IDMAX
      IDMAX  = IDTEMP
C
  167 CONTINUE
      CLOSE(UNIT=1)
      CLOSE(UNIT=5)
      CLOSE(UNIT=7)
      CLOSE(UNIT=9)
C
      IF (NPRNTS.GE.1) WRITE(IFILE8,200) CASE(1:NLET),CASE(1:NLET),
     1   CASE(1:NLET),CASE(1:NLET),CASE(1:NLET),CASE(1:NLET),
     1   CASE(1:NLET)
C
      IF (NPRNTS.GE.1) WRITE(IFILE8,201) CASE(1:NLET),CASE(1:NLET),
     1   CASE(1:NLET),CASE(1:NLET),CASE(1:NLET)
      WRITE(IFILE8,202) CASE(1:NLET),CASE(1:NLET)
C
  200 FORMAT(//' DESCRIPTION OF FILES USED AND GENERATED IN THIS RUN:'//
     1 1X,A,'.NAM = This file contains only the name of the case.'/
     1 1X,A,'.OPT = Input data generated by MAINSETUP.'/
     1 1X,A,'.OPM = Output data. Please list this file and inspect'/
     1'            carefully before proceeding.'/
     1 1X,A,'.OPP = Output data containing optimization history from'/
     1'            the first PANDAOPT.  Inspect before proceeding.'/
     1 1X,A,'.CBL = Labelled common blocks for PANDA2 analysis.'/
     1'            (This is an unformatted sequential file.)'/
     1 1X,A,'.BL1 = Labelled common blocks for BOSOR4-type discretized'/
     1'            model of single panel module.'/
     1'            (This is an unformatted sequential file.)'/
     1 1X,A,'.BL2 = Labelled common blocks for BOSOR4-type discretized'/
     1'            model of entire panel with smeared stiffeners.'/
     1'            (This is an unformatted sequential file.)')
  201 FORMAT(
     1 1X,A,'.RN1 = Direct access file for data base pertaining to'/
     1'            BOSOR4-type discretized model of single module.'/
     1'            (This is an unformatted direct access file.)'/
     1 1X,A,'.RN2 = Direct access file for data base pertaining to'/
     1'            BOSOR4-type discretized model of entire panel'/
     1'            with smeared stiffeners.'/
     1'            (This is an unformatted direct access file.)'/
     1 1X,A,'.003 = Scratch file similar to the .OPT file.'/
     1 1X,A,'.PL1 = Binary file (ITYPE.EQ.1) with results for plots'/
     1 1X,A,'.SL1 = Binary file (ITYPE.NE.1) with results for plots'/
     1' PROMPT.DAT= Prompt file for interactive input for PANDA2.'/
     1' TUTORMAIN.DAT = File containing rather detailed explanations'/
     1'                 of theories on which PANDA2 is based.'//
     1' For further information about files used and generated'/
     1' during operation of PANDA2, give the command HELPAN FILES.'//
C BEG JULY 1995
     1' Menu of commands: PANDAOPT, SUPEROPT, MAINSETUP, CHANGE,'/
     1'                   DECIDE, CHOOSEPLOT, PANEL, STAGSMODEL '/)
C END JULY 1995
C
C BEG JUL 2009
  202 FORMAT(
     1' IN ORDER TO AVOID FALSE CONVERGENCE OF THE DESIGN, BE SURE TO'/
     1' RUN  PANDAOPT  MANY TIMES DURING AN OPTIMIZATION. INSPECT THE'/
     1 1X,A,'.OPP  FILE AFTER EACH OPTIMIZATION RUN. OR BETTER YET,'/
     1' RUN SUPEROPT.'/
     1' **** NOTE: It is almost always best to set the number of ****'/
     1' **** iterations per execution of "PANDAOPT" equal to 5   ****'/
     1' **** in response to the following prompt in "MAINSETUP": ****'/
     1' "How many design iterations permitted in this run (5 to 25)?"'/
     1' **** Hence, the *.OPT file should almost always have the ****'/
     1' **** following line in it:                               ****'/
     1' "5   $ How many design iterations in this run (5 to 25)?"'/
     1' ********************* END OF ',A,'.OPM FILE *****************'/)
C END JUL 2009
      CLOSE(UNIT=8)
      CLOSE(UNIT=13)
C
C********************************************************************
C END FINAL OUTPUT AND UPDATING DATA BASES.
C********************************************************************
C
C BEG UNIX
c Added 11/90 to clear IEEE FPE warnings
      call ieeexx
c End 11/90
      close(unit=iout, status='DELETE')
C END UNIX
      END
C
C
C=DECK      RESTOR
      SUBROUTINE RESTOR(NPRINT,IFILE8,IFILE,N1,N2,N3,N4,N5,N6,N7,N8,N9,
C BEG OCT 1998
     1                  N10,N11,N12,N13,
     1                  N4G,N5G,N6G,N7G,N8G,N9G,N10G,N11G,N12G,N13G,
     1                  N4R,N5R,N6R,N7R,N8R,N9R,N10R,N11R,N12R,N13R)
C END OCT 1998
C
C  PURPOSE IS TO PULL IW, ILOC, DS, AND BOUNDARY CONDITION STUFF AND
C  STUFF FROM PANDA OFF THE DISK AND STORE IT IN ARRAYS AND LABELLED
C  COMMON BLOCKS.
C
C  ALSO, SET UP WORKING SPACE DELIMITERS, N1,N2,...N13
C
C  DIAGRAM OF HOW WORKING SPACE IS DIVIDED UP...
C
C| M3 |I2+2*NSEG| I2 | M3 |<--8 * IMAXB-->|2*M3|2*M3|2*M3|4*M3|
C|ILOC|<-- IW ->| DS |DIAG| A | B | C | D | DI | X  | Y  | Z  |
CN1   N2        N3   N4   N5  N6  N7  N8  N9  N10  N11  N12  N13
C
C                    | M3G |<---8 * IMAXBG---->|2*M3G|2*M3G|2*M3G|4*M3G|
C                    |DIAGG| AG | BG | CG | DG | DIG | XG  | YG  | ZG  |
C                    N4G   N5G  N6G  N7G  N8G  N9G   N10G  N11G  N12G
C
C BEG OCT 1998
C                    | M3R |<---8 * IMAXBR---->|2*M3R|2*M3R|2*M3R|4*M3R|
C                    |DIAGR| AR | BR | CR | DR | DIR | XR  | YR  | ZR  |
C                    N4R   N5R  N6R  N7R  N8R  N9R   N10R  N11R  N12R
C
C END OCT 1998
C BEG JUN 2004
C  The old storage causes problems when isogrid substiffeners are present
C  because the solution problem of the local buckling of the subtriangular
C  region between isogrid substiffeners used the unlabelled common working
C  space, W(60000). This use destroys what was stored in ILOC, IW, and DS.
C  Therefore, in the new version of PANDA2 (with substiffeners), we should
C  set up labelled common blocks that contain ILOC, IW, and DS instead of
C  equivalencing these variables to space in W.
C
      COMMON/   /W(60000)
C BEG JUN 2004
C     DIMENSION IW(1)
C     EQUIVALENCE (W(1),IW(1))
      COMMON/ILOCIW/ILOC(1200),IW(300)
      COMMON/DELTAS/DS(200)
C BEG OCT 1994
C     DIMENSION DS(200)
C END OCT 1994
C END JUN 2004
      COMMON/SEGS/NSEGB5,M2,I5(95),I2,I2G
      COMMON/TOTPTS/M3
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(98),IROWCB(98),IIWP,IIWB
      COMMON/DSPACE/IDS
      COMMON/BLK/IBLK,NGBK(20),NKF(20)
      COMMON/IDHIGH/IDMAX
C
      COMMON/TOTPTG/M3G
      COMMON/SEGSG/NSEGG,M2G,I5G(95),I2GG,I2GGG   
      COMMON/BLKG/IBLKG,NGBKG(20),NKFG(20)    
      COMMON/LOCATG/ILOCPG,ILOCBG,IRWCPG(98),IRWCBG(98),IIWPG,IIWBG 
      COMMON/DSPACG/IDSG
      COMMON/BKSIZG/IMAXPG,IMAXBG,KMAXPG(20),KMAXBG(20)   
      COMMON/ILOCGG/ILOCG(600),IWG(210),DSG(200)
      COMMON/IDHIGG/IDMAXG
      COMMON/IBLKMG/IBLCKM,IBLCKG
C BEG OCT 1998
C BEG OCT 2004
C BEG APR 2007 (increas dimension of IPOINT from 195 to 295 for use with bigbosor4)
      COMMON/BOSGS2/NSGB52,IPINT2(295)
C END APR 2007
C END OCT 2004
      COMMON/TOTPTR/M3R
      COMMON/SEGSR/NSEGR,M2R,I5R(95),I2GR,I2GGR   
      COMMON/BLKR/IBLKR,NGBKR(20),NKFR(20)    
      COMMON/LOCATR/ILOCPR,ILOCBR,IRWCPR(98),IRWCBR(98),IIWPR,IIWBR 
      COMMON/DSPACR/IDSR
      COMMON/BKSIZR/IMAXPR,IMAXBR,KMAXPR(20),KMAXBR(20)   
      COMMON/ILOCGR/ILOCR(600),IWR(210),DSR(200)
      COMMON/IDHIGR/IDMAXR
C END OCT 1998
C BEG FEB 2009
      COMMON/TOTPTZ/M3Z
      COMMON/SEGSZ/NSEGZ,M2Z,I5Z(95),I2GZ,I2GGZ
      COMMON/BLKZ/IBLKZ,NGBKZ(20),NKFZ(20)
      COMMON/LOCATZ/ILOCPZ,ILOCBZ,IRWCPZ(98),IRWCBZ(98),IIWPZ,IIWBZ
      COMMON/DSPACZ/IDSZ
      COMMON/BKSIZZ/IMAXPZ,IMAXBZ,KMAXPZ(20),KMAXBZ(20)
      COMMON/ILOCGZ/ILOCZ(600),IWZ(210),DSZ(200)
      COMMON/IDHIGZ/IDMAXZ
C END FEB 2009
      COMMON/IBLCK/IBLOCK
      COMMON/UNITNO/IU
      COMMON/NUMPAR/NPAR,NVARB,NALLOW,NNNCON,NDEC,NLINK,NESCAP,ITYPE
C
C
C   NOW READ IN THE PANEL MODULE STUFF...
C
      REWIND IFILE
      CALL GETCM1(IFILE)
      CALL GETCM2(IFILE)
      IFILE7 = 7
C
C   READ IN THE PANDA2 COMMON BLOCKS....
C
      CALL GETCOM(IFILE7)
C
C   INITIALIZE THE IO ROUTINE GASP...
C
      IU = 11
C BEG 08 NOV 2011
*     CALL GASP(DUM1,DUM2,-1,DUM3)
      CALL GASP(DUM1,DUM2, 0,DUM3)
C END 08 NOV 2011
      IBLCKM = IBLOCK
C
      IU = 10
      IDTEMP = IDMAX
      IDMAX  = IDMAXG
C BEG 08 NOV 2011
*     CALL GASP(DUM1,DUM2,-1,DUM3)
      CALL GASP(DUM1,DUM2, 0,DUM3)
C END 08 NOV 2011
      IBLCKG = IBLOCK
      IU = 11
      IBLOCK = IBLCKM
      IDMAXG = IDMAX
      IDMAX = IDTEMP
C
C   READ IN DIRECT ACCESS STUFF FOR BOTH PANEL MODULE AND TOTAL PANEL..
C
      IIB = I2 + 2*NSEGB5
C BEG OCT 1998
      IIBG = I2 + 2*NSEGG
      IIBR = I2 + 2*NSEGR
C END OCT 1998
C
      N1 = 1
      N2 = N1 + M3
      N3 = N2 + IIB
C
C BEG JUN 2004
C     CALL GASP(IW(N2),IIB,3,IIWB)
C     CALL GASP(IW(N1),M3,3,ILOCB)
      CALL GASP(IW(1),IIB,3,IIWB)
      CALL GASP(ILOC(1),M3,3,ILOCB)
C END JUN 2004
C BEG OCT 1994
C     CALL GASP(W(N3),I2,3,IDS)
      CALL GASP(DS,I2,3,IDS)
      DO 5 I = 1,I2
      II = N3 + I - 1
      W(II) = DS(I)
    5 CONTINUE
C END OCT 1994
C
C     WRITE(8,*)' I2GG,NSEGG,IIBG,IIWBG=',I2GG,NSEGG,IIBG,IIWBG
C     WRITE(8,11) (IWG(I),I=1,IIBG)
C  11 FORMAT(//' IWG(I)='/(10I10))
C     WRITE(8,12) IDSG, (DSG(I),I=1,I2GG)
C  12 FORMAT(//' IDSG=',I10,'   DSG(I)='/(1P,10E12.4))
C     WRITE(8,13) M3G,ILOCBG,(ILOCG(I),I=1,M3G)
C  13 FORMAT(//' M3G,ILOCBG=',2I10,'   ILOCG(I)='/(10I10))
C BEG OCT 1998
C     WRITE(8,14) (IWR(I),I=1,IIBR)
C  14 FORMAT(//' IWR(I)='/(10I10))
C     WRITE(8,15) IDSR, (DSR(I),I=1,I2GG)
C  15 FORMAT(//' IDSR=',I10,'   DSR(I)='/(1P,10E12.4))
C     WRITE(8,16) M3R,ILOCBR,(ILOCR(I),I=1,M3R)
C  16 FORMAT(//' M3R,ILOCBR=',2I10,'   ILOCR(I)='/(10I10))
C END OCT 1998
C   SET UP WORKING SPACE...
C
      IMAXB=60000
      IMAXBG=60000
C BEG OCT 1998
      IMAXBR=60000
C END OCT 1998
C BEG JUN 2004
C     IF (IBLK.EQ.1) IMAXB = IW(M3)
      IF (IBLK.EQ.1) IMAXB = ILOC(M3)
C END JUN 2004
      IF (IBLKG.EQ.1)IMAXBG= ILOCG(M3G)
C BEG OCT 1998
      IF (IBLKR.EQ.1)IMAXBR= ILOCR(M3R)
C END OCT 1998
C BEG FEB 2009
      IMAXBZ = 60000
      IF (IBLKZ.EQ.1)IMAXBZ= ILOCZ(M3Z)
C END FEB 2009
C
C   SKIN-STRINGER PANEL MODULE WORKING SPACE SET UP FIRST...
C
      N4 = N3 + I2
      N5 = N4 + M3
      IF (MOD(N5,2).EQ.0) N5 = N5 + 1
      N6 = N5 + 2*IMAXB
      N7 = N6 + 2*IMAXB
      N8 = N7 + 2*IMAXB
      N9 = N8 + 2*IMAXB
      N10= N9 + 2*M3
      N11= N10+ 2*M3
      N12= N11+ 2*M3
      N13= N12+ 4*M3 - N1
C
C   NEXT, SET UP THE GENERAL INSTABILITY MODEL WORKING SPACE...
C
      N4G = N4
      N5G = N4G + M3G
      IF (MOD(N5G,2).EQ.0) N5G = N5G + 1
      N6G = N5G + 2*IMAXBG
      N7G = N6G + 2*IMAXBG
      N8G = N7G + 2*IMAXBG
      N9G = N8G + 2*IMAXBG
      N10G= N9G + 2*M3G
      N11G= N10G+ 2*M3G
      N12G= N11G+ 2*M3G
      N13G= N12G+ 4*M3G - N1
C
C BEG OCT 1998
C   NEXT, SET UP THE GENERAL INSTABILITY MODEL WORKING SPACE...
C
      N4R = N4
      N5R = N4R + M3R
      IF (MOD(N5R,2).EQ.0) N5R = N5R + 1
      N6R = N5R + 2*IMAXBR
      N7R = N6R + 2*IMAXBR
      N8R = N7R + 2*IMAXBR
      N9R = N8R + 2*IMAXBR
      N10R= N9R + 2*M3R
      N11R= N10R+ 2*M3R
      N12R= N11R+ 2*M3R
      N13R= N12R+ 4*M3R - N1
C END OCT 1998
C
      IF (NPRINT.GE.3)
     1 WRITE(IFILE8,100) NSEGB5,I2,M3,IMAXB,N1,N2,N3,N4,N5,N6,N7,N8,
     1 N9,N10,N11,N12,N13
C BEG OCT 1998
  100 FORMAT(//' DATA FOR BOSOR4-TYPE SKIN-STRINGER MODULE OF PANEL:'//
C END OCT 1998
     1'   NUMBER OF BOSOR4-TYPE SEGMENTS           =',I6/
     1'   TOTAL NUMBER OF FINITE ELEMENTS IN MODULE=',I6/
     1'   NUMBER OF DEGREES OF FREEDOM IN PROBLEM  =',I6/
     1'   LENGTH OF STIFFNESS MATRIX ARRAY, IMAXB  =',I6//
     1' WORKING SPACE ALLOCATION (BLANK COMMON)...:'//
     1'     NAME OF ARRAY    CONTENTS OF ARRAY     STARTING LOCATION'/
     1'         ILOC          SKYLINE TEMPLATE        ',I6/
     1'         IW            W d.o.f. EQ. NUMBERS    ',I6/
     1'         DS            FINITE ELEMENT LENGTHS  ',I6/
     1'         DIAG          MAIN DIAGONAL VALUES    ',I6/
     1'         AS            STIFFNESS MATRIX        ',I6/
     1'         BS            LOAD-GEOMETRIC MATRIX   ',I6/
     1'         C             WORKING SPACE FOR FACTOR',I6/
     1'         D             WORKING SPACE FOR FACTOR',I6/
     1'         DI            MAIN DIAGONAL VALUES    ',I6/
     1'         X             K(2)*Y                  ',I6/
     1'         Y             EIGENVECTOR             ',I6/
     1'         Z             EIGENVECTORS            ',I6/
     1'       NONE            END OF WORKING SPACE    ',I6/)
C
      IF (NPRINT.GE.3)
     1 WRITE(IFILE8,100) NSEGG,I2GG,M3G,IMAXBG,N1,N2,N3,N4G,N5G,N6G,N7G,
     1 N8G,N9G,N10G,N11G,N12G,N13G
C BEG OCT 1998
      IF (NPRINT.GE.3)
     1 WRITE(IFILE8,105) NSEGR,I2R,M3R,IMAXBR,N4R,N5R,
     1 N6R,N7R,N8R,N9R,N10R,N11R,N12R,N13R
  105 FORMAT(//' DATA FOR BOSOR4-TYPE "SKIN"-RING MODULE OF PANEL:'//
     1'   NUMBER OF BOSOR4-TYPE SEGMENTS           =',I6/
     1'   TOTAL NUMBER OF FINITE ELEMENTS IN MODULE=',I6/
     1'   NUMBER OF DEGREES OF FREEDOM IN PROBLEM  =',I6/
     1'   LENGTH OF STIFFNESS MATRIX ARRAY, IMAXB  =',I6//
     1' WORKING SPACE ALLOCATION (BLANK COMMON)...:'//
     1'     NAME OF ARRAY    CONTENTS OF ARRAY     STARTING LOCATION'/
     1'         DIAGR         MAIN DIAGONAL VALUES    ',I6/
     1'         AR            STIFFNESS MATRIX        ',I6/
     1'         BR            LOAD-GEOMETRIC MATRIX   ',I6/
     1'         CR            WORKING SPACE FOR FACTOR',I6/
     1'         DR            WORKING SPACE FOR FACTOR',I6/
     1'         DIR           MAIN DIAGONAL VALUES    ',I6/
     1'         XR            K(2)*Y                  ',I6/
     1'         YR            EIGENVECTOR             ',I6/
     1'         ZR            EIGENVECTORS            ',I6/
     1'       NONE            END OF WORKING SPACE    ',I6/)
C END OCT 1998
C
C  NOW ALL THE DATA WE NEED ARE IN CORE.
C
      RETURN
      END
C
C
C
C=DECK      DEBUGG
      SUBROUTINE DEBUGG(NVAR,VAR,ISTIF,NSEG,NLAYER,LTYPE,B,B2,H,W,W2,T,
     1                  ANGLE,MATL,IZERO,IFILE,PHRASE)
C
C  PURPOSE IS TO PRINT OUT ALL THIS STUFF TO SEE IF IT'S OK...
C
      CHARACTER*10 PHRASE
      DIMENSION VAR(*),ISTIF(*),NSEG(*),NLAYER(4,2),LTYPE(99,5,2),B(*)
      DIMENSION B2(*),H(*),W(*),W2(*),T(*),ANGLE(*),MATL(*)
C
      WRITE(IFILE,10)
   10 FORMAT(//' DEBUG OUTPUT OF IMPORTANT VARIABLES...')
      WRITE(IFILE,20) PHRASE
   20 FORMAT(A10)
      WRITE(IFILE,30) NVAR, (VAR(I),I=1,NVAR)
   30 FORMAT(/' NUMBER OF VARIABLES THAT CAN BE DECISION VAR.=',I3/
     1' CURRENT VALUES OF VARIABLES (VAR(I),I=1,NVAR)='/(1P,10E12.4))
C
      WRITE(IFILE,40)
   40 FORMAT(/'  PROPERTIES OF THE PANEL MODULE'/
     1' ILOOP  ISTIF  NSEG      B        B2         H          W        
     1   W2')
      DO 100 ILOOP = 1,2
      WRITE(IFILE,50) ILOOP,ISTIF(ILOOP),NSEG(ILOOP),B(ILOOP),B2(ILOOP),
     1                H(ILOOP),W(ILOOP),W2(ILOOP)
   50 FORMAT(I4,I7,I7,1P,5E12.4)
  100 CONTINUE
C
      DO 500 ILOOP = 1,2
         NUMSEG = NSEG(ILOOP)
         DO 400 ISEG = 1,NUMSEG
            NLAYS = NLAYER(ISEG,ILOOP)
            WRITE(IFILE,120) ILOOP,ISEG,NLAYS
  120       FORMAT(/' ILOOP=',I2,'  ISEG=',I2,'  NO. OF LAYERS=',I2)
            DO 300 ILAY = 1,NLAYS
               K = LTYPE(ILAY,ISEG,ILOOP)
               WRITE(IFILE,130) K, T(K), ANGLE(K), MATL(K)
  130          FORMAT(' LAYER TYPE=',I2,'  THICKNESS=',1PE12.4,
     1                '  WINDING ANGLE=',1PE12.4,'   MATERIAL TYPE=',I2)
  300 CONTINUE
  400 CONTINUE
  500 CONTINUE
C
      RETURN
      END
C
C
C
C=DECK      QUICK
      SUBROUTINE QUICK(IFILE,IQUICK,P,NCONST,WORDB,CONSTR,FSLOC,ILOADS)
C
C  PURPOSE IS TO REVERT TO IQUICK = 1 ANALYSIS OPTION IF WE ARE
C  FAR FROM AN ACCEPTABLE OPTIMUM DESIGN.
C
      COMMON/GEOM3/ISTIF(2),NLAYER(4,2),NSEG(2),INTEXT(2)
      DIMENSION IQUICK(*),CONSTR(*),FSLOC(*),WORDB(*)
      CHARACTER*80 WORDB
C
      IF (IQUICK(ILOADS).EQ.1.OR.P.NE.0.0) RETURN
      IF (NCONST.EQ.0) THEN
         IQUICK(ILOADS) = 1
         WRITE(IFILE,41)
         WRITE(IFILE,41)
         WRITE(IFILE,42) ILOADS
   41    FORMAT(' **** NOTE  NOTE   NOTE   NOTE ****')
   42    FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1) FOR'/
     1 ' LOAD SET',I2,' BECAUSE ALL MARGINS ARE GREATER THAN UNITY.')
         WRITE(IFILE,41)
         WRITE(IFILE,41)
         RETURN
      ENDIF
      CMIN = 2.01
      DO 421 I = 1,NCONST
C     WRITE(8,*)' NCONST,I,CONSTR(I),WORDB(I)=',
C    1            NCONST,I,CONSTR(I),WORDB(I)
  421 CMIN = MIN(CMIN,CONSTR(I))
      IF (CMIN.GT.2.0) THEN
         IQUICK(ILOADS) = 1
         WRITE(IFILE,41)
         WRITE(IFILE,41)
         WRITE(IFILE,42) ILOADS
         WRITE(IFILE,41)
         WRITE(IFILE,41)
         RETURN
      ENDIF
C
         FTEST = -0.7
         IF (FSLOC(ILOADS).GE.1.0) FTEST = -0.5
C
         DO 49 I = 1,NCONST
C
         ILET = INDEX(WORDB(I),'Local buckling from discrete')
         IF (ILET.NE.0) THEN
            FLOCAL = CONSTR(I)*FSLOC(ILOADS)
C BEG JAN 1995
            FTESTL = 4.0
C END JAN 1995
            IF (ISTIF(1).EQ.5) FTESTL = 4.0
            IF (FLOCAL.GT.FTESTL) THEN
             IQUICK(ILOADS) = 1
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             WRITE(IFILE,43) ILOADS,FTESTL
   43        FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1)'/
     1     ' FOR LOAD SET',I2,' BECAUSE THE LOAD FACTOR FOR LOCAL'/
     1     ' BUCKLING IS GREATER THAN ',1PE12.4,'.')
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             RETURN
            ENDIF
            IF ((CONSTR(I)-1.0).LT.-0.5.AND.FSLOC(ILOADS).GE.1.0) THEN
             IQUICK(ILOADS) = 1
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             WRITE(IFILE,44) ILOADS,CONSTR(I)-1.0
   44        FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1)'/
     1     ' FOR LOAD SET',I2,' BECAUSE THE MARGIN FOR LOCAL BUCKLING'/
     1     ' IS LESS THAN -0.5.  MARGIN =',1PE12.4)
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             RETURN
            ENDIF
         ENDIF
C
         ILET = INDEX(WORDB(I),'buck.margin  STRINGERS')
         IF (ILET.NE.0) THEN
            IF ((CONSTR(I)-1.0).LT.FTEST.AND.FSLOC(ILOADS).GE.1.0) THEN
             IQUICK(ILOADS) = 1
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             WRITE(IFILE,45) ILOADS,FTEST,CONSTR(I)-1.0
   45        FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1)'/
     1     ' FOR LOAD SET',I2,' BECAUSE THE MARGIN FOR STIFFENER'/
     1     ' LOCAL BUCKLING IS LESS THAN',1PE10.2,'.  MARGIN =',1PE12.4)
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             RETURN
            ENDIF
         ENDIF
C
         ILET = INDEX(WORDB(I),'web buckling')
         IF (ILET.NE.0) THEN
            IF ((CONSTR(I)-1.0).LT.FTEST.AND.FSLOC(ILOADS).GE.1.0) THEN
             IQUICK(ILOADS) = 1
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             WRITE(IFILE,46) ILOADS,FTEST,CONSTR(I)-1.0
   46        FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1)'/
     1     ' FOR LOAD SET',I2,' BECAUSE THE MARGIN FOR WEB BUCKLING'/
     1     ' IS LESS THAN',1PE10.2,'.  MARGIN =',1PE12.4)
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             RETURN
            ENDIF
         ENDIF
C
         ILET = INDEX(WORDB(I),'Wide column')
         IF (ILET.NE.0) THEN
            IF ((CONSTR(I)-1.0).LT.FTEST.AND.FSLOC(ILOADS).GE.1.0) THEN
             IQUICK(ILOADS) = 1
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             WRITE(IFILE,47) ILOADS,FTEST,CONSTR(I)-1.0
   47        FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1)'/
     1     ' FOR LOAD SET',I2,' BECAUSE THE MARGIN FOR WIDE COLUMN'/
     1     ' BUCKLING IS LESS THAN',1PE10.2,'.  MARGIN =',1PE12.4)
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             RETURN
            ENDIF
         ENDIF
C
         ILET = INDEX(WORDB(I),'general buck')
         IF (ILET.NE.0) THEN
            FTESTG = FTEST
            IF (ISTIF(1).EQ.5) FTESTG = -.9
            IF ((CONSTR(I)-1.0).LT.FTESTG.AND.FSLOC(ILOADS).GE.1.0) THEN
             IQUICK(ILOADS) = 1
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             WRITE(IFILE,48) ILOADS,FTESTG,CONSTR(I)-1.0
   48        FORMAT(' REVERTING TO QUICK ANALYSIS OPTION (IQUICK=1)'/
     1     ' FOR LOAD SET',I2,' BECAUSE THE MARGIN FOR GENERAL'/
     1     ' BUCKLING IS LESS THAN',1PE10.2,'.  MARGIN =',1PE12.4)
             WRITE(IFILE,41)
             WRITE(IFILE,41)
             RETURN
            ENDIF
         ENDIF
   49 CONTINUE
C
      RETURN
      END
C
C
C
C=DECK      MATMLT
      SUBROUTINE MATMLT(IMOD,JJJ,IFILE,ILOADS,IPRINT,TEMP,FMULT)
C
C  PURPOSE IS TO FIND FACTOR BY WHICH TO MULTIPLY MATERIAL PROPERTY
C  TO ACCOUNT FOR TEMPERATURE EFFECT...
C
      COMMON/ISOGR/ISOGRD,ISOANG
      COMMON/GEOM3/ISTIF(2),NLAYER(4,2),NSEG(2),INTEXT(2)
      COMMON/MATER6/SIGLUE(20)
      COMMON/MATER7/ISOMAT(20),ISOEFF(20)
      COMMON/TMATL1/MAXMAT,IPMATL(10)
      COMMON/TMATL2/PARMAT(20,10),TEMPJ(10,20,10),FTEMPJ(10,20,10)
      COMMON/TMATL3/WRDMAT(20,10)
      CHARACTER*80 WRDMAT
      CHARACTER*3  STRRNG
      DIMENSION TEMP(4,2),FMULT(20,10,4,2),TMULT(11)
C
      IPRT = 0
      IF (IMOD.EQ.0.AND.JJJ.EQ.0.AND.IPRINT.GE.1) IPRT = 1
      IF (IPRT.EQ.1) WRITE(IFILE,1000) MAXMAT,ILOADS
 1000 FORMAT(/' TEMPERATURE INDUCED "KNOCKDOWN" (OR "KNOCKUP") FACTORS  
     1FOR MATERIAL PROPERTIES FOR ',I2,' MATERIALS: LOAD SET NO.',I2/
     1' =============================================================='/
     1' MATL  STR/   PANEL  MATERIAL   NOMINAL    TEMPERATURE   "KNOCKDO
     1WN"             DEFINITION OF MATERIAL PROPERTY'/
     1' NO.   RNG   MODULE  PROPERTY   VALUE OF   OF SEGMENT    OR "KNOC
     1KUP"'/
     1'             SEGMENT  NUMBER    PROPERTY    (UNIFORM)      FACTOR
     1'/
     1' --------------------------------------------------------------')
C
      DO 200 IMAT = 1,MAXMAT
C
      NPMAT = IPMATL(IMAT)
      ILOOP0 = 1
C
      DO 100 ILOOP = ILOOP0,2
C
      STRRNG = '   '
      ISTART = 1
      IEND   = NSEG(ILOOP)
      IF (ISTIF(ILOOP).NE.0.AND.ISTIF(ILOOP).NE.5) IEND = 4
      IF (ISTIF(ILOOP).EQ.5) IEND = 3
      IF (ILOOP.EQ.2) ISTART = 2
      IF (ISTART.GT.IEND) GO TO 100
C
      DO 90 I = ISTART,IEND
      IF (I.EQ.1) STRRNG = 'SKN'
      IF (I.GT.1.AND.ILOOP.EQ.1) THEN
         IF (ISOGRD.EQ.0) STRRNG = 'STR'
         IF (ISOGRD.EQ.1) STRRNG = 'ISO'
      ENDIF
      IF (I.GT.1.AND.ILOOP.EQ.2) STRRNG = 'RNG'
C
      DO 80 IPROP = 1,NPMAT
C
         CALL INTERP(IFILE,10,TEMPJ(1,IPROP,IMAT),FTEMPJ(1,IPROP,IMAT),
     1               TEMP(I,ILOOP),FMULT(IPROP,IMAT,I,ILOOP))
C
         IF(IPRT.EQ.1)
     1       WRITE(IFILE,70) IMAT,STRRNG,I,IPROP,PARMAT(IPROP,IMAT),
     1                       TEMP(I,ILOOP),FMULT(IPROP,IMAT,I,ILOOP),
     1                       WRDMAT(IPROP,IMAT)(1:50)
   70    FORMAT(I4,3X,A,I7,I8,1PE15.4,1PE14.4,1PE14.4,3X,A)
   80 CONTINUE
      IF (IPRT.EQ.1) WRITE(IFILE,85)
   85 FORMAT( )
   90 CONTINUE
      IF (IPRT.EQ.1) WRITE(IFILE,85)
  100 CONTINUE
      IF (IPRT.EQ.1) WRITE(IFILE,85)
  200 CONTINUE
      IF (IPRT.EQ.1) WRITE(IFILE,300)
  300 FORMAT(' =======================================================')
C
      DO 700 IMAT = 1,MAXMAT
         IF (ISOMAT(IMAT).EQ.1.OR.ISOEFF(IMAT).EQ.1) THEN
C
C  SHUFFLE FMULT(IPROP,IMAT,ISEG,ILOOP) TO CONFORM TO ORTHOTROPIC FORMAT.
C
            ILOOP0 = 1
C
            DO 600 ILOOP = ILOOP0,2
C
               ISTART = 1
               IEND   = NSEG(ILOOP)
               IF (ISTIF(ILOOP).NE.0.AND.ISTIF(ILOOP).NE.5) IEND = 4
               IF (ISTIF(ILOOP).EQ.5) IEND = 3
               IF (ILOOP.EQ.2) ISTART = 2
               IF (ISTART.GT.IEND) GO TO 600
C
               DO 500 ISEG = ISTART,IEND
                  DO 400 I = 1,11
C
C  NOTE: THE UPPER LIMIT, 11, REFERS TO THE NUMBER OF MATERIAL PROPS,
C        NOT THE NUMBER OF NODAL POINTS IN THE DISCRETIZED MODEL.
C
  400             TMULT(I) = FMULT(I,IMAT,ISEG,ILOOP)
C
                  IF (ISOMAT(IMAT).EQ.1) THEN
                     FMULT(1,IMAT,ISEG,ILOOP) = TMULT(1)
                     FMULT(2,IMAT,ISEG,ILOOP) = TMULT(1)
                     FMULT(3,IMAT,ISEG,ILOOP) = TMULT(1)
                     FMULT(4,IMAT,ISEG,ILOOP) = TMULT(2)
                     FMULT(5,IMAT,ISEG,ILOOP) = TMULT(3)
                     FMULT(6,IMAT,ISEG,ILOOP) = TMULT(3)
                     FMULT(7,IMAT,ISEG,ILOOP) = TMULT(4)
                     FMULT(8,IMAT,ISEG,ILOOP) = TMULT(4)
                     FMULT(9,IMAT,ISEG,ILOOP) = TMULT(5)
                     FMULT(10,IMAT,ISEG,ILOOP)= TMULT(5)
                     FMULT(11,IMAT,ISEG,ILOOP)= TMULT(5)
                     FMULT(12,IMAT,ISEG,ILOOP)= TMULT(5)
                     FMULT(13,IMAT,ISEG,ILOOP)= TMULT(5)
                     FMULT(14,IMAT,ISEG,ILOOP)= TMULT(6)
                     FMULT(15,IMAT,ISEG,ILOOP)= TMULT(7)
                  ELSE
                     FMULT(10,IMAT,ISEG,ILOOP)= TMULT(9)
                     FMULT(11,IMAT,ISEG,ILOOP)= TMULT(9)
                     FMULT(12,IMAT,ISEG,ILOOP)= TMULT(9)
                     FMULT(13,IMAT,ISEG,ILOOP)= TMULT(9)
                     FMULT(14,IMAT,ISEG,ILOOP)= TMULT(10)
                     FMULT(15,IMAT,ISEG,ILOOP)= TMULT(11)
                  ENDIF
C
  500          CONTINUE
  600       CONTINUE
         ENDIF
  700 CONTINUE
C
      RETURN
      END
