C=DECK      TRIANG
      SUBROUTINE TRIANG(IFILE8,ICHECK,NSIDE,NTHETA,NC44,NC45,NC55,
     1                  NC46,NC56,NC66,NX,NY,NXY,NXFIX,NYFIX,NEIGEN,
     1                  NODEX,NODEY,NDOF,NPRINT,ISOANG,NEIGLC,FK1,FK2,
C BEG DEC 2004
     1                  XNODE,YNODE,WDISP,
     1                  NCST44,NCST66,NHSTFF,NWBEIG,NWBTOT,IEDGE)
C END DEC 2004
C
C   Purpose is to find local buckling of triangular plate under combined
C   in-plane loads Nx, Ny, Nxy. No coupling between in-plane and bending
C   stiffness (zero "B" matrix) is assumed. The bending properties of the
C   plate are contained in the constitutive coefficients C44, C45, C55,
C   C46, C56, C66.  The plate is an equilateral triangle with side of
C   length SIDE.  It is simply supported along all three edges.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C BEG DEC 2004
      DIMENSION NWBEIG(2,4),NWBTOT(2,4),WBEIG(2,3),WBTOT(2,3)
      DIMENSION ASTIFF(225),BSTIFF(225)
      REAL NCST44,NCST66,NHSTFF,NWBEIG,NWBTOT
C END DEC 2004
      DIMENSION A(225),B(225),WORK1(225),WORK2(225),EIGVEC(15,15)
      DIMENSION EIGLOC(15),C(45),R(30),FK1(11250),FK2(11250)
      DIMENSION XNODE(800),YNODE(800),WDISP(800)
      REAL NX,NY,NXY,NC44,NC45,NC55,NC46,NC56,NC66,NSIDE,NTHETA
      REAL NXFIX,NYFIX,NEIGLC
C
C BEG DEC 2004
      CSTF44 = NCST44
      CSTF66 = NCST66
      HSTIFF = NHSTFF
      DO 20 J = 1,3
      DO 20 I = 1,2
       WBEIG(I,J) = NWBEIG(I,J)
       WBTOT(I,J) = NWBTOT(I,J)
   20 CONTINUE
C END DEC 2004
      SIDE = NSIDE
      THETA= NTHETA
      C44 = NC44
      C45 = NC45
      C55 = NC55
      C46 = NC46
      C56 = NC56
      C66 = NC66
      FNX = NX
      FNY = NY
      FNXY= NXY
      FNXFIX = NXFIX
      FNYFIX = NYFIX
C
      IF (NPRINT.GE.2) THEN
         IF (ISOANG.EQ.2) THEN
            PNX = -FNX
            PNY = -FNY
            PNXY= -FNXY
            PNXFIX= -FNXFIX
            PNYFIX= -FNYFIX
         ELSE
            PNX = -FNY
            PNY = -FNX
            PNXY= -FNXY
            PNXFIX= -FNYFIX
            PNYFIX= -FNXFIX
         ENDIF
         WRITE(IFILE8,8) SIDE,THETA,C44,C45,C55,C46,C56,C66
         WRITE(IFILE8,9) PNX,PNY,PNXY,PNXFIX,PNYFIX,
     1                   NEIGEN,NODEX,NODEY,NDOF
C BEG DEC 2004
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (IEDGE.EQ.1) THEN
        WRITE(IFILE8,'(/,A,/,A,/,A,1P,E12.4,/,A,1P,E12.4,/,A,1P,E12.4)')
     1  ' ISOGRID STIFFENERS:',
     1' Bending and twisting coefficients for isogrid stiffeners:',
     1'   Axial bending stiffness,                   CSTF44=',CSTF44,
     1'   Twisting stiffness,                        CSTF66=',CSTF66,
     1' Height of an isogrid stiffener,              HSTIFF=',HSTIFF
C
          DO 30 IISO = 1,3
           WRITE(IFILE8,'(A,/,A,I2,A,1P,2E12.4,/,A,I2,A,1P,2E12.4)')
     1' Axial loading in isogrid stiffeners:',
     1'  Load Set A: stiffener',IISO,' at root,tip:  WBEIG =',
     1                                     WBEIG(1,IISO),WBEIG(2,IISO),
     1'  Load Set B: stiffener',IISO,' at root,tip:  WBTOT =',
     1                                     WBTOT(1,IISO),WBTOT(2,IISO)
   30     CONTINUE
         ENDIF
C END DEC 2004
      ENDIF
    8 FORMAT(/' ISOGRID CONFIGURATION: LOCAL BUCKLING OF PANEL SKIN'/
     1        '                        BETWEEN ISOGRID STIFFENERS:'/
     1'  (buckling of flat, equilateral triangular plate that is'/
     1'   simply supported along all three edges):'/
     1' Length of side of triangle:                    SIDE=',1PE12.4/
     1' Angle between legs of triangle:               THETA=',1PE12.4/
     1' Bending stiffness coefficients for panel skin:'/
     1'   Axial bending stiffness,                      C44=',1PE12.4/
     1'   Poisson bending stiffness,                    C45=',1PE12.4/
     1'   hoop bending stiffness,                       C55=',1PE12.4/
     1'   anisotropic axial bending-twisting stiffness, C46=',1PE12.4/
     1'   anisotropic hoop  bending-twisting stiffness, C56=',1PE12.4/
     1'   twisting stiffness,                           C66=',1PE12.4/)
    9 FORMAT(
     1' Uniform in-plane loading in the panel skin:'/
     1'   axial resultant in panel skin (Load Set A),    Nx=',1PE12.4/
     1'   hoop  resultant in panel skin (Load Set A),    Ny=',1PE12.4/
     1'   in-plane shear resultant in skin (Load Set A),Nxy=',1PE12.4/
     1'   axial resultant in skin (Load Set B),   Nx(fixed)=',1PE12.4/
     1'   hoop  resultant in skin (Load Set B),   Ny(fixed)=',1PE12.4//
     1' Number of eigenvalues sought                 NEIGEN=',I5/
     1' Number of integration stations over x         NODEX=',I5/
     1' Number of integration stations over y         NODEY=',I5/
     1' Number of degrees of freedom in buck. problem, NDOF=',I5/)
C
      NNODE = 500
      IF (ICHECK.EQ.1) GO TO 500
C
      CALL TRIMAT(NPRINT,NDOF,NODEX,NODEY,C,R,FK1,FK2,
     1            SIDE,THETA,C44,C45,C55,C46,C56,C66,
     1            FNX,FNY,FNXY,FNXFIX,FNYFIX,A,B)
C BEG DEC 2004
      IF (IEDGE.EQ.1) THEN
         CALL STIFAB(NDOF,NODEX,SIDE,THETA,CSTF44,CSTF66,HSTIFF,
     1               WBEIG,WBTOT,ASTIFF,BSTIFF)
         DO 40 I = 1,225
            A(I) = A(I) + ASTIFF(I)
            B(I) = B(I) - BSTIFF(I)
   40    CONTINUE
      ENDIF
C END DEC 2004
C
      IF (NPRINT.GE.2) WRITE(IFILE8,90) NDOF,NODEX,NODEY
   90 FORMAT(/' ISOGRID LOCAL BUCKLING PROBLEM SIZE:'/
     1' degrees of freedom, integration stations:'/
     1'               NDOF,NODEX,NODEY =',3I5)
C     ILOGIC = .TRUE.
C     CALL EIGEN(A,B,X,EIGLOC,WORK1,WORK2,NDOF,NEIGEN,ILOGIC)
      CALL EIGENZ(IFILE8,NDOF,NEIGEN,A,B,EIGLOC,EIGVEC,NPRINT)
C
      IBEG = 1
      DO 300 IEIGEN = 1,NEIGEN
         IF (NPRINT.GE.2) THEN
            WRITE(IFILE8,100) EIGLOC(IEIGEN), NDOF
            WRITE(IFILE8,200) (EIGVEC(I,IEIGEN),I=1,NDOF)
         ENDIF
  100    FORMAT(/' ************************************************'/
     1 ' LOCAL BUCKLING LOAD FACTOR,           EIGLOC=',1PE12.4//
     1 ' NUMBER OF DEGREES OF FREEDOM,           NDOF=',I5)
  200    FORMAT(' LOCAL BUCKLING MODAL COEFFICIENTS FOLLOW...'/
     1 '   EIGVEC = '/(1P,5E12.4))
C
         IF (EIGLOC(1).LT.10.E+15.AND.NPRINT.GE.3)
     1      CALL GETW(ICHECK,IFILE8,NDOF,NNODE,SIDE,THETA,
     1                EIGVEC(1,IEIGEN),NODEX,NODEY,XNODE,YNODE,WDISP)
C
  300 CONTINUE
  500 CONTINUE
      IF(ICHECK.EQ.1) CALL GETW(ICHECK,IFILE8,NDOF,NNODE,SIDE,THETA,
     1                EIGVEC(1,IEIGEN),NODEX,NODEY,XNODE,YNODE,WDISP)
C
      NEIGLC = EIGLOC(1)
C
      RETURN
      END
C
C
C
C=DECK      GETW
      SUBROUTINE GETW(ICHECK,IFILE,NDOF,NNODE,SIDE,THETA,
     1                EIGVEC,NX,NYMAX,X,Y,W)
C
C  PURPOSE IS TO OBTAIN THE NORMAL BUCKLING MODAL DISPLACEMENT W
C  CORRESPONDING TO THE EIGENMODE, EIGVEC.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION EIGVEC(NDOF),X(NNODE),Y(NNODE),W(NNODE),WCOEF(20)
C
      PI = 3.1415927
      ANGLE = 0.5*THETA*PI/180.
      SA = SIN(ANGLE)
      CA = COS(ANGLE)
      H = SIDE*CA
      A = H/(SIDE*SA)
      FLNY = NYMAX
      FLNX = NX
      X1 = -SIDE*SA
      DX= 2.*SIDE*SA/(FLNX-1.)
      NX2 = NX-2
      INODE = 0
      DO 300 IX = 1,NX2
         X1 = X1 + DX
         YMAX = -A*X1 + H
         IF (X1.LT.0.) YMAX = A*X1 + H
         YRAT = YMAX/H
         NY = YRAT*FLNY
         IF (NY.GT.NYMAX) NY = NYMAX
         IF (NY.LT.3) NY = 3
         IF (MOD(NY,2).EQ.0) NY = NY + 1
         FLONY = NY
         DY = YMAX/(FLONY-1.)
         Y1 = -DY
         DO 200 IY = 1,NY
            Y1 = Y1 + DY
            INODE = INODE + 1
            X(INODE) = X1
            Y(INODE) = Y1
            AA = A*A
            HH = H*H
            HHH = HH*H
            AAOH = AA/H
            AAOH2 = AAOH**2
            AAOHH = AA/HH
            AAAA = AA*AA
            AAAAOH = AAAA/H
            XX = X1*X1
            YY = Y1*Y1
            YYY = YY*Y1
            XXX = XX*X1
            IF (NDOF.EQ.6) THEN
               WCOEF(1) = HH*Y1 -2.*H*YY +YYY -2.*AAOH*XX*YY
     1                -AAOH2*XX*XX*Y1 +AAOHH*XX*YYY
               WCOEF(2) = 2.*HHH*Y1 -3.*HH*YY -5.*AA*XX*YY +YY*YY
     1                -2.*AAAAOH*XX*XX*Y1 +2.*AAOH*XX*YYY
               WCOEF(3) = 3.*HH*HH*Y1 -4.*HHH*YY -8.*AA*H*XX*YY
     1                -3.*AAAA*XX*XX*Y1 +2.*AA*XX*YYY +YY*YY*Y1
               WCOEF(4) = HH*X1*Y1 -2.*H*X1*YY -AA*XXX*Y1 +X1*YYY
               WCOEF(5) = 2.*HHH*X1*Y1 -3.*HH*X1*YY -2.*AA*H*XXX*Y1
     1                -AA*XXX*YY +X1*YY*YY
               WCOEF(6) = XX*Y1 -2.*XX*YY/H -AA*XX*XX*Y1/HH
     1                +XX*YYY/HH
            ELSE
               A4OH3 = AAAA/HHH
               A2OH3 = AA/HHH
               YYYY = YY*YY
               XXXX = XX*XX
               HHHH = HH*HH
C
               IF (NDOF.EQ.10) THEN
                  WCOEF(1) = HH*Y1 -2.*H*YY +YYY -AAOH2*XXXX*Y1
     1                      -3.*AAOHH*XX*YYY -2.*A4OH3*XXXX*YY
     1                      +2.*A2OH3*XX*YYYY
                  WCOEF(2) = 2.*HHH*Y1-3.*HH*YY+YYYY-2.*AAAAOH*XXXX*Y1
     1                      -8.*AAOH*XX*YYY -5.*AAOH2*XXXX*YY
     1                      +5.*AAOHH*XX*YYYY
                  WCOEF(3) = 3.*HHHH*Y1 -4.*HHH*YY -3.*AAAA*XXXX*Y1
     1                      -14.*AA*XX*YYY +YY*YYY -8.*AAAAOH*XXXX*YY
     1                      +8.*AAOH*XX*YYYY
                  WCOEF(4) = 4.*HH*HHH*Y1-5.*HHHH*YY-4.*AAAA*H*XXXX*Y1
     1                      -20.*AA*H*XX*YYY -11.*AAAA*XXXX*YY
     1                      +10.*AA*XX*YYYY + YYY*YYY
                  WCOEF(5) = HH*X1*Y1-2.*H*X1*YY+X1*YYY-2.*AAOH*XXX*YY
     1                      -AAOH2*XX*XXX*Y1 +AAOHH*XXX*YYY
                  WCOEF(6) = 2.*HHH*X1*Y1 -3.*HH*X1*YY -5.*AA*XXX*YY
     1                      +X1*YYYY -2.*AAAAOH*XX*XXX*Y1
     1                      +2.*AAOH*XXX*YYY
                  WCOEF(7) = 3.*HHHH*X1*Y1-4.*HHH*X1*YY-8.*AA*H*XXX*YY
     1                      -3.*AAAA*XX*XXX*Y1+2.*AA*XXX*YYY+X1*YY*YYY
                  WCOEF(8) = XX*Y1 -AAOHH*XXXX*Y1 -3.*XX*YYY/HH
     1                      -2.*A2OH3*XXXX*YY +2.*XX*YYYY/HHH
                  WCOEF(9) = XX*YY -2.*XX*YYY/H -AAOHH*XXXX*YY
     1                      +XX*YYYY/HH
                  WCOEF(10)= XXX*Y1 -2.*XXX*YY/H -AAOHH*XX*XXX*Y1
     1                      +XXX*YYY/HH
               ELSE
C   15 D.O.F...
                  A6 = AAAA*AA
                  X6 = XXXX*XX
                  X5 = XXX*XX
                  Y6 = YYYY*YY
                  Y5 = YYY*YY
                  H5 = HHH*HH
                  H6 = HHHH*HH
C
                  WCOEF(1) = HH*Y1 -2.*H*YY +YYY -4.*A4OH3*XXXX*YY
     1                      -4.*A2OH3*XX*YYYY -A6*X6*Y1/HHHH
     1                      -2.*AAAA*XXXX*YYY/HHHH+3.*AA*XX*Y5/HHHH
                  WCOEF(2) = 2.*HHH*Y1-3.*HH*YY+YYYY-9.*AAOH2*XXXX*YY
     1                      -11.*AAOHH*XX*YYYY -2.*A6*X6*Y1/HHH
     1                      -6.*A4OH3*XXXX*YYY +8.*A2OH3*XX*Y5
                  WCOEF(3) = 3.*HHHH*Y1-4.*HHH*YY+Y5-14.*AAAAOH*XXXX*YY
     1                      -20.*AAOH*XX*YYYY -3.*A6*X6*Y1/HH
     1                      -11.*AAOH2*XXXX*YYY +14.*AAOHH*XX*Y5
                  WCOEF(4) = 4.*H5*Y1 -5.*HHHH*YY +Y6
     1                      -19.*AAAA*XXXX*YY -30.*AA*XX*YYYY
     1                      -4.*A6*X6*Y1/H -16.*AAAAOH*XXXX*YYY
     1                      +20.*AAOH*XX*Y5
                  WCOEF(5) = 5.*H6*Y1 -6.*H5*YY +Y6*Y1
     1                      -24.*AAAA*H*XXXX*YY -40.*AA*H*XX*YYYY
     1                      -5.*A6*X6*Y1 -21.*AAAA*XXXX*YYY
     1                      +25.*AA*XX*Y5
                  WCOEF(6) = HH*X1*Y1 -2.*H*X1*YY +X1*YYY -AAOH2*X5*Y1
     1                      -3.*AAOHH*XXX*YYY -2.*A4OH3*X5*YY
     1                      +2.*A2OH3*XXX*YYYY
                  WCOEF(7) = 2.*HHH*X1*Y1 -3.*HH*X1*YY +X1*YYYY
     1                      -2.*AAAAOH*X5*Y1 -8.*AAOH*XXX*YYY
     1                      -5.*AAOH2*X5*YY +5.*AAOHH*XXX*YYYY
                  WCOEF(8) = 3.*HHHH*X1*Y1 -4.*HHH*X1*YY +X1*Y5
     1                      -3.*AAAA*X5*Y1 -14.*AA*XXX*YYY
     1                      -8.*AAAAOH*X5*YY +8.*AAOH*XXX*YYYY
                  WCOEF(9) = 4.*H5*X1*Y1 -5.*HHHH*X1*YY +X1*Y6
     1                      -4.*AAAA*H*X5*Y1 -20.*AA*H*XXX*YYY
     1                      -11.*AAAA*X5*YY +10.*AA*XXX*YYYY
                  WCOEF(10)= XX*Y1 -4.*A2OH3*XXXX*YY -4.*XX*YYYY/HHH
     1                      -AAAA*X6*Y1/HHHH -2.*AA*XXXX*YYY/HHHH
     1                      +3.*XX*Y5/HHHH
                  WCOEF(11)= XX*YY -AAOHH*XXXX*YY -3.*XX*YYYY/HH
     1                      -2.*A2OH3*XXXX*YYY +2.*XX*Y5/HHH
                  WCOEF(12)= XX*YYY -2.*XX*YYYY/H -AAOHH*XXXX*YYY
     1                      +XX*Y5/HH
                  WCOEF(13)= XXX*Y1 -AAOHH*X5*Y1 -3.*XXX*YYY/HH
     1                      -2.*A2OH3*X5*YY +2.*XXX*YYYY/HHH
                  WCOEF(14)= XXX*YY -2.*XXX*YYY/H -AAOHH*X5*YY
     1                      +XXX*YYYY/HH
                  WCOEF(15)= XXXX*Y1 -2.*XXXX*YY/H +XXXX*YYY/HH
     1                      -AAOHH*X6*Y1
               ENDIF
            ENDIF
C
            IF (ICHECK.EQ.1) THEN
               WRITE(IFILE,50) X1,Y1, (WCOEF(I),I=1,NDOF)
   50          FORMAT(' X1,Y1=',1P,2E12.4,' WCOEF(I)='/(1P,5E12.4))
               GO TO 200
            ENDIF
            W(INODE) = 0.
            DO 100 I = 1,NDOF
            W(INODE) = W(INODE) + EIGVEC(I)*WCOEF(I)
  100       CONTINUE
  200    CONTINUE
  300 CONTINUE
      IF (ICHECK.EQ.1) RETURN
      WMAX = 0.
      DO 400 I = 1,INODE
  400 WMAX = MAX(WMAX,ABS(W(I)))
      DO 500 I = 1,INODE
  500 W(I) = W(I)/WMAX
C
      WRITE(IFILE,600) INODE
  600 FORMAT(/' EIGENVECTOR: NORMAL DISPLACEMENT W AT',I4,
     1        ' NODAL POINTS:'/
     1' NODE      X           Y           W')
      DO 700 I = 1,INODE
         WRITE(IFILE,650) I,X(I),Y(I),W(I)
  650    FORMAT(I4,1P,3E12.4)
  700 CONTINUE
      RETURN
      END
C
C
C
C=DECK      TRIANGLE
C
C  THE PURPOSE OF THIS LIBRARY IS TO FIND THE LOCAL BUCKLING LOAD
C  OF AN ISOSCELES TRIANGULAR FLAT PLATE WITH BALANCED LAMINATES AND 
C  SIMPLY SUPPORTED ALONG ALL THREE EDGES AND SUBJECTED TO UNIFORM
C  LOADS Nx, Ny, Nxy.
C
C
C=DECK      TRIMAT
      SUBROUTINE TRIMAT(NPRINT,NDOF,NODEX,NODEY,C,RR,FK1,FK2,
     1                  SIDE,THETA,C44,C45,C55,C46,C56,C66,
     1                  FNX,FNY,FNXY,FNXFIX,FNYFIX,A,B)
C
C  PURPOSE IS TO DERIVE THE GLOBAL STIFFNESS MATRIX "A" AND THE
C  LOAD-GEOMETRIC MATRIX "B" FOR THE FLAT, ISOSCELES, TRIANGULAR, PLATE
C  SIMPLY SUPPORTED ALONG ALL THREE EDGES. THERE IS BENDING
C  ENERGY ONLY. UNIFORM PRELOAD FNX, FNY, FNXY IS ASSUMED.
C
C  Input variables:
C   NDOF  = number of degrees of freedom in the model.
C   NODEX = number of integration stations in the x-direction
C   NODEY = max. number of integration stations in the y-direction
C   SIDE  = length of one side of the equilateral plate.
C   THETA = angle between two equal legs of the isosceles triangle (deg.)
C   C44,C45,C55,C46,C56,C66 = bending, twisting constitutive terms.
C   FNX, FNY, FNXY = axial, hoop, shear resultants (eigenvalue loads).
C   FNXFIX, FNYFIX = axial, hoop resultants (fixed loads).
C
C  Output variables
C   A = global stiffness matrix
C   B = global load-geometric matrix.
C
      IMPLICIT DOUBLE PRECISION (A-H, O-Z)
      DIMENSION A(NDOF,NDOF),B(NDOF,NDOF)
      DIMENSION FK1(NDOF,NDOF,50),FK2(NDOF,NDOF,50)
      DIMENSION C(3,NDOF),RR(2,NDOF)
C
      DO 20 I = 1,NDOF
      DO 20 J = 1,NDOF
         A(I,J) = 0.
   20    B(I,J) = 0.
C
C  NEXT, CALCULATE THE INTEGRAL OF THE LOCAL STIFFNESS MATRIX (BCB).
C
C  OUTER LOOP: INTEGRATE OVER X...
      PI = 3.1415927
      ANGLE = 0.5*THETA*PI/180.
      SA = SIN(ANGLE)
      CA = COS(ANGLE)
      HH = SIDE*CA
      AA = HH/(SIDE*SA)
      IF (MOD(NODEX,2).EQ.0) NODEX = NODEX - 1
      IF (MOD(NODEY,2).EQ.0) NODEY = NODEY - 1
      NX = NODEX
      NYMAX = NODEY
      FLNY = NODEY
      FLNX = NX
      X = -SIDE*SA
      DX= 2.*SIDE*SA/(FLNX-1.)
      NX2 = NX-2
      DO 300 IX = 1,NX2
         X = X + DX
         YMAX = -AA*X + HH
         IF (X.LT.0.) YMAX = AA*X + HH
         YRAT = YMAX/HH
         NY = YRAT*FLNY
         IF (NY.GT.NYMAX) NY = NYMAX
         IF (NY.LT.3) NY = 3
         IF (MOD(NY,2).EQ.0) NY = NY + 1
         FLONY = NY
         DY = YMAX/(FLONY-1.)
         Y = -DY
         DO 200 IY = 1,NY
            Y = Y + DY
C  Next, calculate local curvature-displacement relations from CURVIT
            CALL CURVIT(NDOF,AA,HH,X,Y,C)
C  Get local NDOF x NDOF stiffness matrix FK1 for triangular bending element.
            CALL LOCSTF(NDOF,C44,C45,C55,C66,C46,C56,C,FK1(1,1,IY))
C
C  Next, calculate load-geometric matrix, RNRJ.
C  Rotation-displacement relations from ROTATX:
            CALL ROTATX(NDOF,AA,HH,X,Y,RR)
C  Get local NDOF x NDOF load-geometric matrix FK2 for triangular element.
C    Do fixed loads FNXFIX, FNYFIX first:
            FNXYDM = 0.0
            CALL LOCLOD(NDOF,FNXFIX,FNYFIX,FNXYDM,RR,FK2(1,1,IY))
C    Add fixed-load matrix to the stiffness matrix:
            DO 40 II = 1,NDOF
            DO 40 JJ = 1,NDOF
   40       FK1(II,JJ,IY) = FK1(II,JJ,IY) - FK2(II,JJ,IY)
C
C    Do eigenvalue loads next:
            CALL LOCLOD(NDOF,FNX,FNY,FNXY,RR,FK2(1,1,IY))
C
C  WRITE OUT STUFF INSIDE INTEGRATION LOOP:
C           WRITE(8,*)' CURV-DISP.MATRIX FOR X,Y=',X,Y
C           DO 1100 II = 1,3
C              WRITE(8,450) (C(II,JJ),JJ=1,6)
 1100       CONTINUE
C           WRITE(8,*)' ROTATION-DISPLACEMENT MATRIX'
C           DO 1200 II = 1,2
C              WRITE(8,450) (RR(II,JJ),JJ=1,6)
 1200       CONTINUE
C             WRITE(8,*)' STRAIN ENERGY'
C             DO 1300 II = 1,6
C                WRITE(8,450) (FK1(II,JJ,IY),JJ=1,6)
C1300          CONTINUE
C             WRITE(8,*)' WORK DONE BY NX, NY, NXY'
C             DO 1400 II = 1,6
C                WRITE(8,450) (FK2(II,JJ,IY),JJ=1,6)
C1400         CONTINUE
  200    CONTINUE
C
C  Integrate over y:
         IC = NY - 1
         DO 260 I = 1,NDOF
         DO 250 J = 1,NDOF
         DO 240 K = 1,IC,2
          A(I,J) = A(I,J)
     1    +(FK1(I,J,K) +4.*FK1(I,J,K+1) +FK1(I,J,K+2))*DX*DY/3.
          B(I,J) = B(I,J)
     1    +(FK2(I,J,K) +4.*FK2(I,J,K+1) +FK2(I,J,K+2))*DX*DY/3.
  240    CONTINUE
  250    CONTINUE
  260    CONTINUE
  300 CONTINUE
      IF (NPRINT.GE.3) THEN
         WRITE(8,400) NDOF
  400    FORMAT(/' STIFFNESS MATRIX FOR ',I3,' D.O.F:')
         DO 500 I = 1,NDOF
            WRITE(8,450) (A(I,J),J=1,NDOF)
  450       FORMAT(1P,10E12.4)
  500    CONTINUE
         WRITE(8,525)
  525    FORMAT(/' LOAD-GEOMETRIC (B) MATRIX:')
         DO 600 I = 1,NDOF
            WRITE(8,450) (B(I,J),J=1,NDOF)
  600    CONTINUE
      ENDIF
      RETURN
      END
C
C
C
C=DECK      CURVIT
      SUBROUTINE CURVIT(NDOF,A,H,X,Y,B)
C
C  PURPOSE IS TO CALCULATE THE ELEMENTS OF THE B(3,6) MATRIX THAT
C  RELATES CHANGES IN CURVATURE Wxx, Wyy, Wxy TO NODAL ROTATIONS
C  THETAX, THETAY. THE CURVATURE DISPLACEMENT
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION B(3,NDOF)
C     
      AA = A*A
      HH = H*H
      HHH = HH*H
      AAOH = AA/H
      AAOH2 = AAOH**2
      AAOHH = AA/HH
      AAAA = AA*AA
      AAAAOH = AAAA/H
      XX = X*X
      YY = Y*Y
      YYY = YY*Y
      XXX = XX*X
C
      IF (NDOF.EQ.6) THEN
         B(1,1) = -4.*AAOH*YY -12.*AAOH2*XX*Y +2.*AAOHH*YYY
         B(1,2) = -10.*AA*YY -24.*AAAAOH*XX*Y +4.*AAOH*YYY
         B(1,3) = -16.*AA*H*YY -36.*AAAA*XX*Y +4.*AA*YYY
         B(1,4) = -6.*AA*X*Y
         B(1,5) = -12.*AA*H*X*Y -6.*AA*X*YY
         B(1,6) = 2.*Y -4.*YY/H -12.*AAOHH*XX*Y +2.*YYY/HH
C
         B(2,1) = -4.*H +6.*Y -4.*AAOH*XX +6.*AAOHH*XX*Y
         B(2,2) = -6.*HH -10.*AA*XX +12.*YY +12.*AAOH*XX*Y
         B(2,3) = -8.*HHH -16.*AA*H*XX +12.*AA*XX*Y +20.*YYY
         B(2,4) = -4.*H*X +6.*X*Y
         B(2,5) = -6.*HH*X -2.*AA*XXX +12.*X*YY
         B(2,6) = -4.*XX/H +6.*XX*Y/HH
C
         B(3,1) = -8.*AAOH*X*Y -4.*AAOH2*XXX +6.*AAOHH*X*YY
         B(3,2) = -20.*AA*X*Y -8.*AAAAOH*XXX +12.*AAOH*X*YY
         B(3,3) = -32.*AA*H*X*Y -12.*AAAA*XXX +12.*AA*X*YY
         B(3,4) = HH -4.*H*Y -3.*AA*XX +3.*YY
         B(3,5) = 2.*HHH -6.*HH*Y -6.*AA*H*XX -6.*AA*XX*Y +4.*YYY
         B(3,6) = 2.*X -8.*X*Y/H -4.*AA*XXX/HH +6.*X*YY/HH
      ELSE
         A4OH3 = AAAA/HHH
         A2OH3 = AA/HHH
         YYYY = YY*YY
         XXXX = XX*XX
         HHHH = HH*HH
C
         IF (NDOF.EQ.10) THEN
            B(1,1) = -12.*AAOH2*XX*Y -6.*AAOHH*YYY -24.*A4OH3*XX*YY
     1               +4.*A2OH3*YYYY
            B(1,2) = -24.*AAAAOH*XX*Y -16.*AAOH*YYY -60.*AAOH2*XX*YY
     1               +10.*AAOHH*YYYY
            B(1,3) = -36.*AAAA*XX*Y -28.*AA*YYY -96.*AAAAOH*XX*YY
     1               +16.*AAOH*YYYY
            B(1,4) = -48.*AAAA*H*XX*Y -40.*AA*H*YYY -132.*AAAA*XX*YY
     1               +20.*AA*YYYY
            B(1,5) = -12.*AAOH*X*YY -20.*AAOH2*XXX*Y +6.*AAOHH*X*YYY
            B(1,6) = -30.*AA*X*YY -40.*AAAAOH*XXX*Y +12.*AAOH*X*YYY
            B(1,7) = -48.*AA*H*X*YY -60.*AAAA*XXX*Y +12.*AA*X*YYY
            B(1,8) = 2.*Y -12.*AAOHH*XX*Y -6.*YYY/HH
     1               -24.*A2OH3*XX*YY +4.*YYYY/HHH
            B(1,9) = 2.*YY -4.*YYY/H -12.*AAOHH*XX*YY +2.*YYYY/HH
            B(1,10)= 6.*X*Y -12.*X*YY/H -20.*AAOHH*XXX*Y +6.*X*YYY/HH
C
            B(2,1) = -4.*H +6.*Y -18.*AAOHH*XX*Y -4.*A4OH3*XXXX
     1               +24.*A2OH3*XX*YY
            B(2,2) = -6.*HH +12.*YY -48.*AAOH*XX*Y -10.*AAOH2*XXXX
     1               +60.*AAOHH*XX*YY
            B(2,3) = -8.*HHH +20.*YYY -84.*AA*XX*Y -16.*AAAAOH*XXXX
     1               +96.*AAOH*XX*YY
            B(2,4) = -10.*HHHH -120.*AA*H*XX*Y -22.*AAAA*XXXX
     1               +120.*AA*XX*YY +30.*YYYY
            B(2,5) = -4.*H*X +6.*X*Y -4.*AAOH*XXX +6.*AAOHH*XXX*Y
            B(2,6) = -6.*HH*X -10.*AA*XXX +12.*X*YY +12.*AAOH*XXX*Y
            B(2,7) = -8.*HHH*X -16.*AA*H*XXX +12.*AA*XXX*Y +20.*X*YYY
            B(2,8) = -18.*XX*Y/HH -4.*A2OH3*XXXX +24.*XX*YY/HHH
            B(2,9) = 2.*XX -12.*XX*Y/H -2.*AAOHH*XXXX +12.*XX*YY/HH
            B(2,10)= -4.*XXX/H +6.*XXX*Y/HH
C
            B(3,1) = -4.*AAOH2*XXX -18.*AAOHH*X*YY -16.*A4OH3*XXX*Y
     1               +16.*A2OH3*X*YYY
            B(3,2) = -8.*AAAAOH*XXX -48.*AAOH*X*YY -40.*AAOH2*XXX*Y
     1               +40.*AAOHH*X*YYY
            B(3,3) = -12.*AAAA*XXX -84.*AA*X*YY -64.*AAAAOH*XXX*Y
     1               +64.*AAOH*X*YYY
            B(3,4) = -16.*AAAA*H*XXX -120.*AA*H*X*YY -88.*AAAA*XXX*Y
     1               +80.*AA*X*YYY
            B(3,5) = HH -4.*H*Y +3.*YY -12.*AAOH*XX*Y -5.*AAOH2*XXXX
     1               +9.*AAOHH*XX*YY
            B(3,6) = 2.*HHH -6.*HH*Y -30.*AA*XX*Y + 4.*YYY
     1               -10.*AAAAOH*XXXX +18.*AAOH*XX*YY
            B(3,7) = 3.*HHHH -8.*HHH*Y -48.*AA*H*XX*Y -15.*AAAA*XXXX
     1              +18.*AA*XX*YY + 5.*YYYY
            B(3,8) = 2.*X -4.*AAOHH*XXX -18.*X*YY/HH -16.*A2OH3*XXX*Y
     1              +16.*X*YYY/HHH
            B(3,9) = 4.*X*Y -12.*X*YY/H -8.*AAOHH*XXX*Y
     1              +8.*X*YYY/HH
            B(3,10)= 3.*XX -12.*XX*Y/H -5.*AAOHH*XXXX +9.*XX*YY/HH
         ELSE
C   15 D.O.F...
            A6 = AAAA*AA
            X6 = XXXX*XX
            X5 = XXX*XX
            Y6 = YYYY*YY
            Y5 = YYY*YY
            H5 = HHH*HH
            H6 = HHHH*HH
            A2OH4 = AA/HHHH
            A6OH4 = A6/HHHH
            A4OH4 = AAAA/HHHH
            A6OH3 = A6/HHH
            A6OH2 = A6/HH
            A6OH  = A6/H
            A4OH  = AAAA/H
C
            B(1,1) = -48.*A4OH3*XX*YY -8.*A2OH3*YYYY -30.*A6OH4*XXXX*Y
     1               -24.*A4OH4*XX*YYY +6.*A2OH4*Y5
            B(1,2) = -108.*AAOH2*XX*YY -22.*AAOHH*YYYY
     1               -60.*A6OH3*XXXX*Y -72.*A4OH3*XX*YYY +16.*A2OH3*Y5
            B(1,3) = -168.*A4OH*XX*YY -40.*AAOH*YYYY -90.*A6OH2*XXXX*Y
     1               -132.*AAOH2*XX*YYY +28.*AAOHH*Y5
            B(1,4) = -228.*AAAA*XX*YY -60.*AA*YYYY -120.*A6OH*XXXX*Y
     1               -192.*A4OH*XX*YYY +40.*AAOH*Y5
            B(1,5) = -288.*AAAA*H*XX*YY -80.*AA*H*YYYY -150.*A6*XXXX*Y
     1               -252.*AAAA*XX*YYY +50.*AA*Y5
            B(1,6) = -20.*AAOH2*XXX*Y -18.*AAOHH*X*YYY
     1               -40.*A4OH3*XXX*YY +12.*A2OH3*X*YYYY
            B(1,7) = -40.*A4OH*XXX*Y -48.*AAOH*X*YYY -100.*AAOH2*XXX*YY
     1               +30.*AAOHH*X*YYYY
            B(1,8) = -60.*AAAA*XXX*Y -84.*AA*X*YYY -160.*A4OH*XXX*YY
     1               +48.*AAOH*X*YYYY
            B(1,9) = -80.*AAAA*H*XXX*Y -120.*AA*H*X*YYY
     1               -220.*AAAA*XXX*YY +60.*AA*X*YYYY
            B(1,10)= 2.*Y -48.*A2OH3*XX*YY -8.*YYYY/HHH
     1               -30.*AAAA*XXXX*Y/HHHH -24.*A2OH4*XX*YYY+6.*Y5/HHHH
            B(1,11)= 2.*YY -12.*AAOHH*XX*YY -6.*YYYY/HH
     1               -24.*A2OH3*XX*YYY +4.*Y5/HHH
            B(1,12)= 2.*YYY -4.*YYYY/H -12.*AAOHH*XX*YYY +2.*Y5/HH
            B(1,13)= 6.*X*Y -20.*AAOHH*XXX*Y -18.*X*YYY/HH
     1               -40.*A2OH3*XXX*YY +12.*X*YYYY/HHH
            B(1,14)= 6.*X*YY -12.*X*YYY/H -20.*AAOHH*XXX*YY
     1               +6.*X*YYYY/HH
            B(1,15)= 12.*XX*Y -24.*XX*YY/H +12.*XX*YYY/HH
     1               -30.*AAOHH*XXXX*Y
C
            B(2,1) = -4.*H +6.*Y -8.*A4OH3*XXXX -48.*A2OH3*XX*YY
     1               -12.*A4OH4*XXXX*Y +60.*A2OH4*XX*YYY
            B(2,2) = -6.*HH +12.*YY -18.*AAOH2*XXXX -132.*AAOHH*XX*YY
     1               -36.*A4OH3*XXXX*Y +160.*A2OH3*XX*YYY
            B(2,3) = -8.*HHH +20.*YYY -28.*A4OH*XXXX -240.*AAOH*XX*YY
     1               -66.*AAOH2*XXXX*Y +280.*AAOHH*XX*YYY
            B(2,4) = -10.*HHHH +30.*YYYY -38.*AAAA*XXXX
     1               -360.*AA*XX*YY -96.*A4OH*XXXX*Y +400.*AAOH*XX*YYY
            B(2,5) = -12.*H5 +42.*Y5 -48.*AAAA*H*XXXX -480.*AA*H*XX*YY
     1               -126.*AAAA*XXXX*Y +500.*AA*XX*YYY
            B(2,6) = -4.*H*X + 6.*X*Y -18.*AAOHH*XXX*Y -4.*A4OH3*X5
     1               +24.*A2OH3*XXX*YY
            B(2,7) = -6.*HH*X +12.*X*YY -48.*AAOH*XXX*Y -10.*AAOH2*X5
     1               +60.*AAOHH*XXX*YY
            B(2,8) = -8.*HHH*X +20.*X*YYY -84.*AA*XXX*Y -16.*A4OH*X5
     1               +96.*AAOH*XXX*YY
            B(2,9) = -10.*HHHH*X +30.*X*YYYY -120.*AA*H*XXX*Y
     1               -22.*AAAA*X5 +120.*AA*XXX*YY
            B(2,10)= -8.*A2OH3*XXXX -48.*XX*YY/HHH -12.*A2OH4*XXXX*Y
     1               +60.*XX*YYY/HHHH
            B(2,11)= 2.*XX -2.*AAOHH*XXXX -36.*XX*YY/HH
     1              -12.*A2OH3*XXXX*Y +40.*XX*YYY/HHH
            B(2,12)= 6.*XX*Y -24.*XX*YY/H -6.*AAOHH*XXXX*Y
     1              +20.*XX*YYY/HH
            B(2,13)= -18.*XXX*Y/HH -4.*A2OH3*X5 +24.*XXX*YY/HHH
            B(2,14)= 2.*XXX -12.*XXX*Y/H -2.*AAOHH*X5 +12.*XXX*YY/HH
            B(2,15)= -4.*XXXX/H +6.*XXXX*Y/HH
C
            B(3,1) = -32.*A4OH3*XXX*Y -32.*A2OH3*X*YYY -6.*A6OH4*X5
     1               -24.*A4OH4*XXX*YY +30.*A2OH4*X*YYYY
            B(3,2) = -72.*AAOH2*XXX*Y -88.*AAOHH*X*YYY -12.*A6OH3*X5
     1               -72.*A4OH3*XXX*YY +80.*A2OH3*X*YYYY
            B(3,3) = -112.*A4OH*XXX*Y -160.*AAOH*X*YYY -18.*A6OH2*X5
     1               -132.*AAOH2*XXX*YY +140.*AAOHH*X*YYYY
            B(3,4) = -152.*AAAA*XXX*Y -240.*AA*X*YYY -24.*A6OH*X5
     1               -192.*A4OH*XXX*YY +200.*AAOH*X*YYYY
            B(3,5) = -192.*AAAA*H*XXX*Y -320.*AA*H*X*YYY
     1               -30.*A6*X5 -252.*AAAA*XXX*YY +250.*AA*X*YYYY
            B(3,6) = HH -4.*H*Y + 3.*YY -5.*AAOH2*XXXX
     1               -27.*AAOHH*XX*YY-20.*A4OH3*XXXX*Y+24.*A2OH3*XX*YYY
            B(3,7) = 2.*HHH -6.*HH*Y +4.*YYY -10.*A4OH*XXXX
     1               -72.*AAOH*XX*YY -50.*AAOH2*XXXX*Y
     1               +60.*AAOHH*XX*YYY
            B(3,8) = 3.*HHHH -8.*HHH*Y +5.*YYYY -15.*AAAA*XXXX
     1               -126.*AA*XX*YY -80.*A4OH*XXXX*Y +96.*AAOH*XX*YYY
            B(3,9) = 4.*H5 -10.*HHHH*Y +6.*Y5 -20.*AAAA*H*XXXX
     1               -180.*AA*H*XX*YY -110.*AAAA*XXXX*Y +120.*AA*XX*YYY
            B(3,10)= 2.*X -32.*A2OH3*XXX*Y -32.*X*YYY/HHH
     1               -6.*AAAA*X5/HHHH-24.*A2OH4*XXX*YY+30.*X*YYYY/HHHH
            B(3,11)= 4.*X*Y -8.*AAOHH*XXX*Y -24.*X*YYY/HH
     1               -24.*A2OH3*XXX*YY +20.*X*YYYY/HHH
            B(3,12)= 6.*X*YY -16.*X*YYY/H -12.*AAOHH*XXX*YY
     1               +10.*X*YYYY/HH
            B(3,13)= 3.*XX -5.*AAOHH*XXXX -27.*XX*YY/HH
     1               -20.*A2OH3*XXXX*Y +24.*XX*YYY/HHH
            B(3,14)= 6.*XX*Y -18.*XX*YY/H -10.*AAOHH*XXXX*Y
     1               +12.*XX*YYY/HH
            B(3,15)= 4.*XXX -16.*XXX*Y/H +12.*XXX*YY/HH -6.*AAOHH*X5
         ENDIF
C
      ENDIF
C
      RETURN
      END
C
C
C
C=DECK      ROTATX
      SUBROUTINE ROTATX(NDOF,A,H,X,Y,R)
C
C  PURPOSE IS TO CALCULATE THE ELEMENTS OF THE R(2,6) MATRIX THAT
C  RELATES ROTATION COMPONENTS Wx, Wy TO THE NODAL ROTATIONS
C  THETAX, THETAY.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION R(2,NDOF)
      AA = A*A
      HH = H*H
      HHH = HH*H
      AAOH = AA/H
      AAOH2 = AAOH**2
      AAOHH = AA/HH
      AAAA = AA*AA
      AAAAOH = AAAA/H
      XX = X*X
      YY = Y*Y
      YYY = YY*Y
      XXX = XX*X
      IF (NDOF.EQ.6) THEN
         R(1,1) = -4.*AAOH*X*YY -4.*AAOH2*XXX*Y +2.*AAOHH*X*YYY
         R(1,2) = -10.*AA*X*YY -8.*AAAAOH*XXX*Y +4.*AAOH*X*YYY
         R(1,3) = -16.*AA*H*X*YY -12.*AAAA*XXX*Y +4.*AA*X*YYY
         R(1,4) = HH*Y -2.*H*YY -3.*AA*XX*Y +YYY
         R(1,5) = 2.*HHH*Y -3.*HH*YY -6.*AA*H*XX*Y -3.*AA*XX*YY +YY*YY
         R(1,6) = 2.*X*Y -4.*X*YY/H -4.*AAOHH*XXX*Y +2.*X*YYY/HH
C
         R(2,1) = HH -4.*H*Y +3.*YY -4.*AAOH*XX*Y -AAOH*AAOH*XX*XX
     1         +3.*AAOHH*XX*YY
         R(2,2) = 2.*HHH -6.*HH*Y -10.*AA*XX*Y +4.*YYY -2.*AAAAOH*XX*XX
     1         +6.*AAOH*XX*YY
         R(2,3) = 3.*HH*HH -8.*HHH*Y -16.*AA*H*XX*Y -3.*AAAA*XX*XX
     1         +6.*AA*XX*YY +5.*YY*YY
         R(2,4) = HH*X -4.*H*X*Y -AA*XXX +3.*X*YY
         R(2,5) = 2.*HHH*X -6.*HH*X*Y -2.*AA*H*XXX -2.*AA*XXX*Y
     1         +4.*X*YYY
         R(2,6) = XX -4.*XX*Y/H -AAOHH*XX*XX +3.*XX*YY/HH
      ELSE
         A4OH3 = AAAA/HHH
         A2OH3 = AA/HHH
         YYYY = YY*YY
         XXXX = XX*XX
         HHHH = HH*HH
         IF (NDOF.EQ.10) THEN
            R(1,1) = -4.*AAOH2*XXX*Y -6.*AAOHH*X*YYY -8.*A4OH3*XXX*YY
     1               +4.*A2OH3*X*YYYY
            R(1,2) = -8.*AAAAOH*XXX*Y -16.*AAOH*X*YYY -20.*AAOH2*XXX*YY
     1               +10.*AAOHH*X*YYYY
            R(1,3) = -12.*AAAA*XXX*Y -28.*AA*X*YYY -32.*AAAAOH*XXX*YY
     1               +16.*AAOH*X*YYYY
            R(1,4) = -16.*AAAA*H*XXX*Y -40.*AA*H*X*YYY -44.*AAAA*XXX*YY
     1               +20.*AA*X*YYYY
            R(1,5) = HH*Y -2.*H*YY +YYY -6.*AAOH*XX*YY -5.*AAOH2*XXXX*Y
     1              +3.*AAOHH*XX*YYY
            R(1,6) = 2.*HHH*Y -3.*HH*YY -15.*AA*XX*YY +YYYY
     1              -10.*AAAAOH*XXXX*Y +6.*AAOH*XX*YYY
            R(1,7) = 3.*HHHH*Y -4.*HHH*YY -24.*AA*H*XX*YY +YY*YYY
     1               -15.*AAAA*XXXX*Y +6.*AA*XX*YYY
            R(1,8) = 2.*X*Y -4.*AAOHH*XXX*Y -6.*X*YYY/HH
     1              -8.*AA*XXX*YY/HHH +4.*X*YYYY/HHH
            R(1,9) = 2.*X*YY -4.*X*YYY/H -4.*AAOHH*XXX*YY
     1              +2.*X*YYYY/HH
            R(1,10)= 3.*XX*Y -6.*XX*YY/H -5.*AAOHH*XXXX*Y
     1               +3.*XX*YYY/HH
C
            R(2,1) = HH -4.*H*Y +3.*YY -AAOH2*XXXX -9.*AAOHH*XX*YY
     1               -4.*A4OH3*XXXX*Y +8.*A2OH3*XX*YYY
            R(2,2) = 2.*HHH-6.*HH*Y+4.*YYY-2.*AAAAOH*XXXX-24.*AAOH*XX*YY
     1               -10.*AAOH2*XXXX*Y +20.*AAOHH*XX*YYY
            R(2,3) = 3.*HHHH -8.*HHH*Y -3.*AAAA*XXXX +5.*YYYY
     1               -42.*AA*XX*YY -16.*AAAAOH*XXXX*Y +32.*AAOH*XX*YYY
            R(2,4) = 4.*HH*HHH -10.*HHHH*Y -4.*AAAA*H*XXXX
     1               -60.*AA*H*XX*YY -22.*AAAA*XXXX*Y +40.*AA*XX*YYY
     1               +6.*YY*YYY
            R(2,5) = HH*X -4.*H*X*Y +3.*X*YY -4.*AAOH*XXX*Y
     1              -AAOH2*XX*XXX +3.*AAOHH*XXX*YY
            R(2,6) = 2.*HHH*X -6.*HH*X*Y -10.*AA*XXX*Y +4.*X*YYY
     1              -2.*AAAAOH*XX*XXX +6.*AAOH*XXX*YY
            R(2,7) = 3.*HHHH*X -8.*HHH*X*Y -16.*AA*H*XXX*Y
     1              -3.*AAAA*XX*XXX +6.*AA*XXX*YY +5.*X*YYYY
            R(2,8) = XX -AAOHH*XXXX -9.*XX*YY/HH -4.*A2OH3*XXXX*Y
     1              +8.*XX*YYY/HHH
            R(2,9) = 2.*XX*Y -6.*XX*YY/H -2.*AAOHH*XXXX*Y
     1              +4.*XX*YYY/HH
            R(2,10)= XXX -4.*XXX*Y/H -AAOHH*XX*XXX +3.*XXX*YY/HH
         ELSE
C   15 D.O.F...
            A6 = AAAA*AA
            X6 = XXXX*XX
            X5 = XXX*XX
            Y6 = YYYY*YY
            Y5 = YYY*YY
            H5 = HHH*HH
            H6 = HHHH*HH
            A2OH4 = AA/HHHH
            A6OH4 = A6/HHHH
            A4OH4 = AAAA/HHHH
            A6OH3 = A6/HHH
            A6OH2 = A6/HH
            A6OH  = A6/H
            A4OH  = AAAA/H
C
            R(1,1) = -16.*A4OH3*XXX*YY -8.*A2OH3*X*YYYY -6.*A6OH4*X5*Y
     1               -8.*A4OH4*XXX*YYY +6.*A2OH4*X*Y5
            R(1,2) = -36.*AAOH2*XXX*YY-22.*AAOHH*X*YYYY-12.*A6OH3*X5*Y
     1              -24.*A4OH3*XXX*YYY +16.*A2OH3*X*Y5
            R(1,3) = -56.*A4OH*XXX*YY -40.*AAOH*X*YYYY -18.*A6OH2*X5*Y
     1               -44.*AAOH2*XXX*YYY +28.*AAOHH*X*Y5
            R(1,4) = -76.*AAAA*XXX*YY -60.*AA*X*YYYY -24.*A6OH*X5*Y
     1               -64.*A4OH*XXX*YYY +40.*AAOH*X*Y5
            R(1,5) = -96.*AAAA*H*XXX*YY -80.*AA*H*X*YYYY -30.*A6*X5*Y
     1               -84.*AAAA*XXX*YYY +50.*AA*X*Y5
            R(1,6) = HH*Y -2.*H*YY +YYY -5.*AAOH2*XXXX*Y
     1               -9.*AAOHH*XX*YYY -10.*A4OH3*XXXX*YY
     1               +6.*A2OH3*XX*YYYY
            R(1,7) = 2.*HHH*Y -3.*HH*YY +YYYY -10.*A4OH*XXXX*Y
     1              -24.*AAOH*XX*YYY -25.*AAOH2*XXXX*YY
     1              +15.*AAOHH*XX*YYYY
            R(1,8) = 3.*HHHH*Y -4.*HHH*YY +Y5 -15.*AAAA*XXXX*Y
     1              -42.*AA*XX*YYY -40.*A4OH*XXXX*YY +24.*AAOH*XX*YYYY
            R(1,9) = 4.*H5*Y -5.*HHHH*YY +Y6 -20.*AAAA*H*XXXX*Y
     1              -60.*AA*H*XX*YYY -55.*AAAA*XXXX*YY +30.*AA*XX*YYYY
            R(1,10)= 2.*X*Y -16.*A2OH3*XXX*YY -8.*X*YYYY/HHH
     1              -6.*AAAA*X5*Y/HHHH -8.*A2OH4*XXX*YYY +6.*X*Y5/HHHH
            R(1,11)= 2.*X*YY -4.*AAOHH*XXX*YY -6.*X*YYYY/HH
     1              -8.*A2OH3*XXX*YYY +4.*X*Y5/HHH
            R(1,12)= 2.*X*YYY -4.*X*YYYY/H -4.*AAOHH*XXX*YYY
     1              +2.*X*Y5/HH
            R(1,13)= 3.*XX*Y -5.*AAOHH*XXXX*Y -9.*XX*YYY/HH
     1              -10.*A2OH3*XXXX*YY +6.*XX*YYYY/HHH
            R(1,14)= 3.*XX*YY -6.*XX*YYY/H -5.*AAOHH*XXXX*YY
     1              +3.*XX*YYYY/HH
            R(1,15)= 4.*XXX*Y -8.*XXX*YY/H +4.*XXX*YYY/HH
     1              -6.*AAOHH*X5*Y
C
            R(2,1) = HH -4.*H*Y +3.*YY -8.*A4OH3*XXXX*Y
     1              -16.*A2OH3*XX*YYY -A6OH4*X6 -6.*A4OH4*XXXX*YY
     1              +15.*A2OH4*XX*YYYY
            R(2,2) = 2.*HHH -6.*HH*Y +4.*YYY -18.*AAOH2*XXXX*Y
     1              -44.*AAOHH*XX*YYY -2.*A6OH3*X6 -18.*A4OH3*XXXX*YY
     1              +40.*A2OH3*XX*YYYY
            R(2,3) = 3.*HHHH -8.*HHH*Y +5.*YYYY -28.*A4OH*XXXX*Y
     1              -80.*AAOH*XX*YYY -3.*A6OH2*X6 -33.*AAOH2*XXXX*YY
     1              +70.*AAOHH*XX*YYYY
            R(2,4) = 4.*H5 -10.*HHHH*Y +6.*Y5 -38.*AAAA*XXXX*Y
     1              -120.*AA*XX*YYY -4.*A6OH*X6 -48.*A4OH*XXXX*YY
     1              +100.*AAOH*XX*YYYY
            R(2,5) = 5.*H6 -12.*H5*Y +7.*Y6 -48.*AAAA*H*XXXX*Y
     1              -160.*AA*H*XX*YYY -5.*A6*X6 -63.*AAAA*XXXX*YY
     1              +125.*AA*XX*YYYY
            R(2,6) = HH*X -4.*H*X*Y +3.*X*YY-AAOH2*X5-9.*AAOHH*XXX*YY
     1              -4.*A4OH3*X5*Y +8.*A2OH3*XXX*YYY
            R(2,7) = 2.*HHH*X -6.*HH*X*Y +4.*X*YYY -2.*A4OH*X5
     1              -24.*AAOH*XXX*YY-10.*AAOH2*X5*Y+20.*AAOHH*XXX*YYY
            R(2,8) = 3.*HHHH*X -8.*HHH*X*Y +5.*X*YYYY -3.*AAAA*X5
     1              -42.*AA*XXX*YY -16.*A4OH*X5*Y +32.*AAOH*XXX*YYY
            R(2,9) = 4.*H5*X -10.*HHHH*X*Y +6.*X*Y5 -4.*AAAA*H*X5
     1              -60.*AA*H*XXX*YY -22.*AAAA*X5*Y +40.*AA*XXX*YYY
            R(2,10)= XX -8.*A2OH3*XXXX*Y -16.*XX*YYY/HHH
     1              -A4OH4*X6 -6.*A2OH4*XXXX*YY +15.*XX*YYYY/HHHH
            R(2,11)= 2.*XX*Y -2.*AAOHH*XXXX*Y -12.*XX*YYY/HH
     1              -6.*A2OH3*XXXX*YY +10.*XX*YYYY/HHH
            R(2,12)= 3.*XX*YY -8.*XX*YYY/H -3.*AAOHH*XXXX*YY
     1              +5.*XX*YYYY/HH
            R(2,13)= XXX -AAOHH*X5 -9.*XXX*YY/HH -4.*A2OH3*X5*Y
     1              +8.*XXX*YYY/HHH
            R(2,14)= 2.*XXX*Y -6.*XXX*YY/H -2.*AAOHH*X5*Y
     1              +4.*XXX*YYY/HH
            R(2,15)= XXXX -4.*XXXX*Y/H +3.*XXXX*YY/HH -AAOHH*X6
         ENDIF
      ENDIF
C
      RETURN
      END
C
C
C
C=DECK      LOCSTF
      SUBROUTINE LOCSTF(NDOF,C44,C45,C55,C66,C46,C56,B,FK1)
C
C   PURPOSE IS TO FILL THE LOCAL STIFFNESS MATRIX FK1 (6X6 MATRIX),
C   FOR A SINGLE INTEGRATION POINT (BENDING-TWISTING ONLY),
C   GIVEN THE BENDING TWISTING COMPONENTS OF THE INTEGRATED
C   CONSTITUTIVE MATRIX C AND THE CURVATURE CHANGE KINEMATIC
C   RELATIONS B (3X6 MATRIX DERIVED IN CURVIT).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION B(3,NDOF), FK1(NDOF,NDOF)
C
      DO 100 I = 1,NDOF
      DO 100 J = 1,NDOF
       FK1(I,J) = 
     1          C44*B(1,I)*B(1,J) + C55*B(2,I)*B(2,J)
     1         +C45*(B(2,I)*B(1,J) + B(1,I)*B(2,J))
     1         +2.*C46*(B(1,I)*B(3,J) + B(3,I)*B(1,J))
     1         +2.*C56*(B(2,I)*B(3,J) + B(3,I)*B(2,J))
     1         +4.*C66*B(3,I)*B(3,J)
  100 CONTINUE
C
      RETURN
      END
C
C
C
C=DECK      LOCLOD
      SUBROUTINE LOCLOD(NDOF,FNX,FNY,FNXY,R,FK2)
C
C   PURPOSE IS TO FILL THE LOCAL LOAD-GEOMETRIC MATRIX FK2 (6X6 MATRIX),
C   FOR A SINGLE INTEGRATION POINT GIVEN THE UNIFORM IN-PLANE
C   RESULTANTS Nx, Ny, Nxy AND THE ROTATION KINEMATIC RELATIONS
C   R (2 X 6 MATRIX DERIVED IN ROTATX).
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
      DIMENSION R(2,NDOF), FK2(NDOF,NDOF)
C
      DO 100 I = 1,NDOF
      DO 100 J = 1,NDOF
       FK2(I,J) =
     1         +FNX*R(1,I)*R(1,J) + FNY*R(2,I)*R(2,J)
     1         +FNXY*(R(2,I)*R(1,J) + R(1,I)*R(2,J))
  100 CONTINUE
C
      RETURN
      END
C
C
C
C=DECK      EIGENZ
      SUBROUTINE EIGENZ(IFILE,NDOF,NEIGEN,A,B,EIGVAL,EIGVEC,IOUT)
C
C  PURPOSE IS TO CALCULATE ALL EIGENVALUES AND EIGENVECTORS OF
C  A*X = LAMBDA*B*X. THE QZ PART OF EISPAC IS USED.
C
      IMPLICIT DOUBLE PRECISION (A-H,O-Z)
C BEG JULY 1995
      DIMENSION A(NDOF,NDOF),B(NDOF,NDOF)
      DIMENSION EIGVAL(NDOF),EIGVEC(NDOF,NDOF)
C END JULY 1995
      DIMENSION EIGREL(15),EIGIMG(15),BETA(15),X(225)
      DIMENSION EIGVCT(15,15),EIG(15)
C
      CALL RGG (NDOF,NDOF,A,B,EIGREL,EIGIMG,BETA,1,X,IERR)
c
      L = 0
      do 100 i = 1,NDOF
c
         if ( BETA(i) .ne. 0.00 ) then
         EIG(i) = EIGREL(i)/BETA(i)
C BEG AUG 2003
         IF (IOUT.GE.3) THEN
          WRITE(IFILE,'(A,I4,A)')
     1  ' BETA.ne.0 branch: d.o.f. i=',i,' EIG(i),EIGIMG(i)/BETA(i)='
          write(IFILE,'(1X,d12.5,1h+,d12.5,1hi)') 
     1                                     EIG(i),EIGIMG(i)/BETA(i)
         ENDIF
C END AUG 2003
c
         else
C BEG JULY 1995
C BEG MAR 1996
C        EIG(I) = 0.
C BEG AUG 1996
C        EIG(I) = EIGREL(I)
         EIG(I) = 10E+16
C END AUG 1996
C END MAR 1996
C END JULY 1995
C BEG AUG 2003
         IF (IOUT.GE.3) THEN
          WRITE(IFILE,'(A,I4,A)')
     1  ' BETA.eq.0 branch: d.o.f. i=',i,' EIGREL(i),EIGIMG(i),BETA(i)='
          write(IFILE,'(1h(d12.5,1h+,d12.5,3hi),d12.5)')
     1                                     EIGREL(i),EIGIMG(i),BETA(i)
         ENDIF
C END AUG 2003
c
         end if
C BEG AUG 2003
         IF (IOUT.GE.3) write(IFILE,'(A,/,5(1x,d12.5))') 
     1        ' EIGENVECTOR, X(L+j)=',(X(L+j),j=1,NDOF)
C END AUG 2003
         DO 90 J = 1,NDOF
         EIGVCT(J,i) = X(L+J)
 90      CONTINUE
C BEG AUG 2003
         IF (IOUT.GE.3)  WRITE(IFILE,'(A,/,5(1X,D12.5))') 
     1        ' EIGENVECTOR, EIGVCT(J,i)=',(EIGVCT(J,i),J=1,NDOF)
C END AUG 2003
c
         L = L + NDOF
c
100   continue
C
C  SORT THE EIGENVALUES AND EIGENVECTORS. CHOOSE ONLY POSITIVE EIGENVALUES
C  AND THE CORRESPONDING EIGENVECTORS, STARTING WITH THE SMALLEST
C  POSITIVE EIGENVALUE FIRST.
C
      DO 110 I = 1,NDOF
         EIGVAL(I) = 0.
         DO 105 J = 1,NDOF
  105    EIGVEC(J,I) = 0.0
  110 CONTINUE
      K = 0
      EIGMAX = -10.E+16
  125 CONTINUE
      DO 150 I = 1,NDOF
  150 EIGMAX = MAX(EIGMAX,EIG(I))
      EIGMIN = EIGMAX
      IF (IOUT.GE.2.AND.EIGMIN.LT.0.0) WRITE(IFILE,160) EIGMAX
  160 FORMAT(' MAXIMUM EIGENVALUE IS NEGATIVE: EIGMAX =',1PE12.4)
      EIGVAL(1) = 10.E+16
      IF (EIGMIN.LT.0.) GO TO 500
      DO 200 I = 1,NDOF
         IF (EIG(I).LE.0.0) GO TO 200
         EIGMIN = MIN(EIGMIN,EIG(I))
  200 CONTINUE
      DO 250 I = 1,NDOF
         J = I
         DIFF = ABS(EIGMIN - EIG(I))
         IF (DIFF.LT.0.0001) GO TO 255
  250 CONTINUE
      GO TO 500
  255 CONTINUE
      K = K + 1
      EIGVAL(K) = EIG(J)
      DO 260 I = 1,NDOF
  260 EIGVEC(I,K) = EIGVCT(I,J)
      IF (IOUT.GE.3) THEN
         WRITE(IFILE,270) NDOF,K,J,EIGVAL(K),(EIGVEC(I,K),I=1,NDOF)
         WRITE(IFILE,280) (EIGVCT(I,J),I=1,NDOF)
      ENDIF
  270 FORMAT(/' NDOF,K,J,EIGVAL(K)=',3I3,1PE12.4/
     1 ' EIGVEC(I,K),I=1,NDOF='/(1P,10E10.2))
  280 FORMAT(/
     1 ' EIGVCT(I,J),I=1,NDOF='/(1P,10E10.2))
      EIG(J) = -1000.
      IF (K.GE.NEIGEN) GO TO 500
      GO TO 125
  500 CONTINUE
      RETURN
      END
C
C
C
C=DECK      RGG
      SUBROUTINE RGG(NM,N,A,B,ALFR,ALFI,BETA,MATZ,Z,IERR) 
C 
      INTEGER N,NM,IERR,MATZ 
      DOUBLE PRECISION A(NM,N),B(NM,N),ALFR(N),ALFI(N),BETA(N),Z(NM,N) 
      LOGICAL TF 
C 
C     THIS SUBROUTINE CALLS THE RECOMMENDED SEQUENCE OF 
C     SUBROUTINES FROM THE EIGENSYSTEM SUBROUTINE PACKAGE (EISPACK) 
C     TO FIND THE EIGENVALUES AND EIGENVECTORS (IF DESIRED) 
C     FOR THE REAL GENERAL GENERALIZED EIGENPROBLEM  AX = (LAMBDA)BX. 
C 
C     ON INPUT 
C 
C        NM  MUST BE SET TO THE ROW DIMENSION OF THE TWO-DIMENSIONAL 
C        ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM 
C        DIMENSION STATEMENT. 
C 
C        N  IS THE ORDER OF THE MATRICES  A  AND  B. 
C 
C        A  CONTAINS A REAL GENERAL MATRIX. 
C 
C        B  CONTAINS A REAL GENERAL MATRIX. 
C 
C        MATZ  IS AN INTEGER VARIABLE SET EQUAL TO ZERO IF 
C        ONLY EIGENVALUES ARE DESIRED.  OTHERWISE IT IS SET TO 
C        ANY NON-ZERO INTEGER FOR BOTH EIGENVALUES AND EIGENVECTORS. 
C 
C     ON OUTPUT 
C 
C        ALFR  AND  ALFI  CONTAIN THE REAL AND IMAGINARY PARTS, 
C        RESPECTIVELY, OF THE NUMERATORS OF THE EIGENVALUES. 
C 
C        BETA  CONTAINS THE DENOMINATORS OF THE EIGENVALUES, 
C        WHICH ARE THUS GIVEN BY THE RATIOS  (ALFR+I*ALFI)/BETA. 
C        COMPLEX CONJUGATE PAIRS OF EIGENVALUES APPEAR CONSECUTIVELY 
C        WITH THE EIGENVALUE HAVING THE POSITIVE IMAGINARY PART FIRST. 
C 
C        Z  CONTAINS THE REAL AND IMAGINARY PARTS OF THE EIGENVECTORS 
C        IF MATZ IS NOT ZERO.  IF THE J-TH EIGENVALUE IS REAL, THE 
C        J-TH COLUMN OF  Z  CONTAINS ITS EIGENVECTOR.  IF THE J-TH 
C        EIGENVALUE IS COMPLEX WITH POSITIVE IMAGINARY PART, THE 
C        J-TH AND (J+1)-TH COLUMNS OF  Z  CONTAIN THE REAL AND 
C        IMAGINARY PARTS OF ITS EIGENVECTOR.  THE CONJUGATE OF THIS 
C        VECTOR IS THE EIGENVECTOR FOR THE CONJUGATE EIGENVALUE. 
C 
C        IERR  IS AN INTEGER OUTPUT VARIABLE SET EQUAL TO AN ERROR 
C           COMPLETION CODE DESCRIBED IN THE DOCUMENTATION FOR QZIT. 
C           THE NORMAL COMPLETION CODE IS ZERO. 
C 
C     QUESTIONS AND COMMENTS SHOULD BE DIRECTED TO BURTON S. GARBOW, 
C     MATHEMATICS AND COMPUTER SCIENCE DIV, ARGONNE NATIONAL LABORATORY 
C 
C     THIS VERSION DATED APRIL 1983. 
C 
C     ------------------------------------------------------------------ 
C 
      IF (N .LE. NM) GO TO 10 
      IERR = 10 * N 
      GO TO 50 
C 
   10 IF (MATZ .NE. 0) GO TO 20 
C     .......... FIND EIGENVALUES ONLY .......... 
      TF = .FALSE. 
      CALL  QZHES(NM,N,A,B,TF,Z) 
      CALL  QZIT(NM,N,A,B,0.0D0,TF,Z,IERR) 
      CALL  QZVAL(NM,N,A,B,ALFR,ALFI,BETA,TF,Z) 
      GO TO 50 
C     .......... FIND BOTH EIGENVALUES AND EIGENVECTORS .......... 
   20 TF = .TRUE. 
      CALL  QZHES(NM,N,A,B,TF,Z) 
      CALL  QZIT(NM,N,A,B,0.0D0,TF,Z,IERR) 
      CALL  QZVAL(NM,N,A,B,ALFR,ALFI,BETA,TF,Z) 
      IF (IERR .NE. 0) GO TO 50 
      CALL  QZVEC(NM,N,A,B,ALFR,ALFI,BETA,Z) 
   50 RETURN 
      END 
C
C
C
C=DECK      QZHES
      SUBROUTINE QZHES(NM,N,A,B,MATZ,Z) 
C 
      INTEGER I,J,K,L,N,LB,L1,NM,NK1,NM1,NM2 
      DOUBLE PRECISION A(NM,N),B(NM,N),Z(NM,N) 
      DOUBLE PRECISION R,S,T,U1,U2,V1,V2,RHO 
      LOGICAL MATZ 
C 
C     THIS SUBROUTINE IS THE FIRST STEP OF THE QZ ALGORITHM 
C     FOR SOLVING GENERALIZED MATRIX EIGENVALUE PROBLEMS, 
C     SIAM J. NUMER. ANAL. 10, 241-256(1973) BY MOLER AND STEWART. 
C 
C     THIS SUBROUTINE ACCEPTS A PAIR OF REAL GENERAL MATRICES AND 
C     REDUCES ONE OF THEM TO UPPER HESSENBERG FORM AND THE OTHER 
C     TO UPPER TRIANGULAR FORM USING ORTHOGONAL TRANSFORMATIONS. 
C     IT IS USUALLY FOLLOWED BY  QZIT,  QZVAL  AND, POSSIBLY,  QZVEC. 
C 
C     ON INPUT 
C 
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL 
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM 
C          DIMENSION STATEMENT. 
C 
C        N IS THE ORDER OF THE MATRICES. 
C 
C        A CONTAINS A REAL GENERAL MATRIX. 
C 
C        B CONTAINS A REAL GENERAL MATRIX. 
C 
C        MATZ SHOULD BE SET TO .TRUE. IF THE RIGHT HAND TRANSFORMATIONS 
C          ARE TO BE ACCUMULATED FOR LATER USE IN COMPUTING 
C          EIGENVECTORS, AND TO .FALSE. OTHERWISE. 
C 
C     ON OUTPUT 
C 
C        A HAS BEEN REDUCED TO UPPER HESSENBERG FORM.  THE ELEMENTS 
C          BELOW THE FIRST SUBDIAGONAL HAVE BEEN SET TO ZERO. 
C 
C        B HAS BEEN REDUCED TO UPPER TRIANGULAR FORM.  THE ELEMENTS 
C          BELOW THE MAIN DIAGONAL HAVE BEEN SET TO ZERO. 
C 
C        Z CONTAINS THE PRODUCT OF THE RIGHT HAND TRANSFORMATIONS IF 
C          MATZ HAS BEEN SET TO .TRUE.  OTHERWISE, Z IS NOT REFERENCED. 
C 
C     QUESTIONS AND COMMENTS SHOULD BE DIRECTED TO BURTON S. GARBOW, 
C     MATHEMATICS AND COMPUTER SCIENCE DIV, ARGONNE NATIONAL LABORATORY 
C 
C     THIS VERSION DATED APRIL 1983. 
C 
C     ------------------------------------------------------------------ 
C 
C     .......... INITIALIZE Z .......... 
      IF (.NOT. MATZ) GO TO 10 
C 
      DO 3 J = 1, N 
C 
         DO 2 I = 1, N 
            Z(I,J) = 0.0D0 
    2    CONTINUE 
C 
         Z(J,J) = 1.0D0 
    3 CONTINUE 
C     .......... REDUCE B TO UPPER TRIANGULAR FORM .......... 
   10 IF (N .LE. 1) GO TO 170 
      NM1 = N - 1 
C 
      DO 100 L = 1, NM1 
         L1 = L + 1 
         S = 0.0D0 
C 
         DO 20 I = L1, N 
            S = S + DABS(B(I,L)) 
   20    CONTINUE 
C 
         IF (S .EQ. 0.0D0) GO TO 100 
         S = S + DABS(B(L,L)) 
         R = 0.0D0 
C 
         DO 25 I = L, N 
            B(I,L) = B(I,L) / S 
            R = R + B(I,L)**2 
   25    CONTINUE 
C 
         R = DSIGN(DSQRT(R),B(L,L)) 
         B(L,L) = B(L,L) + R 
         RHO = R * B(L,L) 
C 
         DO 50 J = L1, N 
            T = 0.0D0 
C 
            DO 30 I = L, N 
               T = T + B(I,L) * B(I,J) 
   30       CONTINUE 
C 
            T = -T / RHO 
C 
            DO 40 I = L, N 
               B(I,J) = B(I,J) + T * B(I,L) 
   40       CONTINUE 
C 
   50    CONTINUE 
C 
         DO 80 J = 1, N 
            T = 0.0D0 
C 
            DO 60 I = L, N 
               T = T + B(I,L) * A(I,J) 
   60       CONTINUE 
C 
            T = -T / RHO 
C 
            DO 70 I = L, N 
               A(I,J) = A(I,J) + T * B(I,L) 
   70       CONTINUE 
C 
   80    CONTINUE 
C 
         B(L,L) = -S * R 
C 
         DO 90 I = L1, N 
            B(I,L) = 0.0D0 
   90    CONTINUE 
C 
  100 CONTINUE 
C     .......... REDUCE A TO UPPER HESSENBERG FORM, WHILE 
C                KEEPING B TRIANGULAR .......... 
      IF (N .EQ. 2) GO TO 170 
      NM2 = N - 2 
C 
      DO 160 K = 1, NM2 
         NK1 = NM1 - K 
C     .......... FOR L=N-1 STEP -1 UNTIL K+1 DO -- .......... 
         DO 150 LB = 1, NK1 
            L = N - LB 
            L1 = L + 1 
C     .......... ZERO A(L+1,K) .......... 
            S = DABS(A(L,K)) + DABS(A(L1,K)) 
            IF (S .EQ. 0.0D0) GO TO 150 
            U1 = A(L,K) / S 
            U2 = A(L1,K) / S 
            R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
            V1 =  -(U1 + R) / R 
            V2 = -U2 / R 
            U2 = V2 / V1 
C 
            DO 110 J = K, N 
               T = A(L,J) + U2 * A(L1,J) 
               A(L,J) = A(L,J) + T * V1 
               A(L1,J) = A(L1,J) + T * V2 
  110       CONTINUE 
C 
            A(L1,K) = 0.0D0 
C 
            DO 120 J = L, N 
               T = B(L,J) + U2 * B(L1,J) 
               B(L,J) = B(L,J) + T * V1 
               B(L1,J) = B(L1,J) + T * V2 
  120       CONTINUE 
C     .......... ZERO B(L+1,L) .......... 
            S = DABS(B(L1,L1)) + DABS(B(L1,L)) 
            IF (S .EQ. 0.0D0) GO TO 150 
            U1 = B(L1,L1) / S 
            U2 = B(L1,L) / S 
            R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
            V1 =  -(U1 + R) / R 
            V2 = -U2 / R 
            U2 = V2 / V1 
C 
            DO 130 I = 1, L1 
               T = B(I,L1) + U2 * B(I,L) 
               B(I,L1) = B(I,L1) + T * V1 
               B(I,L) = B(I,L) + T * V2 
  130       CONTINUE 
C 
            B(L1,L) = 0.0D0 
C 
            DO 140 I = 1, N 
               T = A(I,L1) + U2 * A(I,L) 
               A(I,L1) = A(I,L1) + T * V1 
               A(I,L) = A(I,L) + T * V2 
  140       CONTINUE 
C 
            IF (.NOT. MATZ) GO TO 150 
C 
            DO 145 I = 1, N 
               T = Z(I,L1) + U2 * Z(I,L) 
               Z(I,L1) = Z(I,L1) + T * V1 
               Z(I,L) = Z(I,L) + T * V2 
  145       CONTINUE 
C 
  150    CONTINUE 
C 
  160 CONTINUE 
C 
  170 RETURN 
      END 
C
C
C
C=DECK      QZIT
      SUBROUTINE QZIT(NM,N,A,B,EPS1,MATZ,Z,IERR) 
C 
      INTEGER I,J,K,L,N,EN,K1,K2,LD,LL,L1,NA,NM,ISH,ITN,ITS,KM1,LM1, 
     X        ENM2,IERR,LOR1,ENORN 
      DOUBLE PRECISION A(NM,N),B(NM,N),Z(NM,N) 
      DOUBLE PRECISION R,S,T,A1,A2,A3,EP,SH,U1,U2,U3,V1,V2,V3,ANI,A11, 
     X       A12,A21,A22,A33,A34,A43,A44,BNI,B11,B12,B22,B33,B34, 
     X       B44,EPSA,EPSB,EPS1,ANORM,BNORM,EPSLON 
      LOGICAL MATZ,NOTLAS 
C 
C     THIS SUBROUTINE IS THE SECOND STEP OF THE QZ ALGORITHM 
C     FOR SOLVING GENERALIZED MATRIX EIGENVALUE PROBLEMS, 
C     SIAM J. NUMER. ANAL. 10, 241-256(1973) BY MOLER AND STEWART, 
C     AS MODIFIED IN TECHNICAL NOTE NASA TN D-7305(1973) BY WARD. 
C 
C     THIS SUBROUTINE ACCEPTS A PAIR OF REAL MATRICES, ONE OF THEM 
C     IN UPPER HESSENBERG FORM AND THE OTHER IN UPPER TRIANGULAR FORM. 
C     IT REDUCES THE HESSENBERG MATRIX TO QUASI-TRIANGULAR FORM USING 
C     ORTHOGONAL TRANSFORMATIONS WHILE MAINTAINING THE TRIANGULAR FORM 
C     OF THE OTHER MATRIX.  IT IS USUALLY PRECEDED BY  QZHES  AND 
C     FOLLOWED BY  QZVAL  AND, POSSIBLY,  QZVEC. 
C 
C     ON INPUT 
C 
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL 
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM 
C          DIMENSION STATEMENT. 
C 
C        N IS THE ORDER OF THE MATRICES. 
C 
C        A CONTAINS A REAL UPPER HESSENBERG MATRIX. 
C 
C        B CONTAINS A REAL UPPER TRIANGULAR MATRIX. 
C 
C        EPS1 IS A TOLERANCE USED TO DETERMINE NEGLIGIBLE ELEMENTS. 
C          EPS1 = 0.0 (OR NEGATIVE) MAY BE INPUT, IN WHICH CASE AN 
C          ELEMENT WILL BE NEGLECTED ONLY IF IT IS LESS THAN ROUNDOFF 
C          ERROR TIMES THE NORM OF ITS MATRIX.  IF THE INPUT EPS1 IS 
C          POSITIVE, THEN AN ELEMENT WILL BE CONSIDERED NEGLIGIBLE 
C          IF IT IS LESS THAN EPS1 TIMES THE NORM OF ITS MATRIX.  A 
C          POSITIVE VALUE OF EPS1 MAY RESULT IN FASTER EXECUTION, 
C          BUT LESS ACCURATE RESULTS. 
C 
C        MATZ SHOULD BE SET TO .TRUE. IF THE RIGHT HAND TRANSFORMATIONS 
C          ARE TO BE ACCUMULATED FOR LATER USE IN COMPUTING 
C          EIGENVECTORS, AND TO .FALSE. OTHERWISE. 
C 
C        Z CONTAINS, IF MATZ HAS BEEN SET TO .TRUE., THE 
C          TRANSFORMATION MATRIX PRODUCED IN THE REDUCTION 
C          BY  QZHES, IF PERFORMED, OR ELSE THE IDENTITY MATRIX. 
C          IF MATZ HAS BEEN SET TO .FALSE., Z IS NOT REFERENCED. 
C 
C     ON OUTPUT 
C 
C        A HAS BEEN REDUCED TO QUASI-TRIANGULAR FORM.  THE ELEMENTS 
C          BELOW THE FIRST SUBDIAGONAL ARE STILL ZERO AND NO TWO 
C          CONSECUTIVE SUBDIAGONAL ELEMENTS ARE NONZERO. 
C 
C        B IS STILL IN UPPER TRIANGULAR FORM, ALTHOUGH ITS ELEMENTS 
C          HAVE BEEN ALTERED.  THE LOCATION B(N,1) IS USED TO STORE 
C          EPS1 TIMES THE NORM OF B FOR LATER USE BY  QZVAL  AND  QZVEC. 
C 
C        Z CONTAINS THE PRODUCT OF THE RIGHT HAND TRANSFORMATIONS 
C          (FOR BOTH STEPS) IF MATZ HAS BEEN SET TO .TRUE.. 
C 
C        IERR IS SET TO 
C          ZERO       FOR NORMAL RETURN, 
C          J          IF THE LIMIT OF 30*N ITERATIONS IS EXHAUSTED 
C                     WHILE THE J-TH EIGENVALUE IS BEING SOUGHT. 
C 
C     QUESTIONS AND COMMENTS SHOULD BE DIRECTED TO BURTON S. GARBOW, 
C     MATHEMATICS AND COMPUTER SCIENCE DIV, ARGONNE NATIONAL LABORATORY 
C 
C     THIS VERSION DATED APRIL 1983. 
C 
C     ------------------------------------------------------------------ 
C 
C     .......... COMPUTE EPSA,EPSB .......... 
      ANORM = 0.0D0 
      BNORM = 0.0D0 
C 
      DO 30 I = 1, N 
         ANI = 0.0D0 
         IF (I .NE. 1) ANI = DABS(A(I,I-1)) 
         BNI = 0.0D0 
C 
         DO 20 J = I, N 
            ANI = ANI + DABS(A(I,J)) 
            BNI = BNI + DABS(B(I,J)) 
   20    CONTINUE 
C 
         IF (ANI .GT. ANORM) ANORM = ANI 
         IF (BNI .GT. BNORM) BNORM = BNI 
   30 CONTINUE 
C 
      IF (ANORM .EQ. 0.0D0) ANORM = 1.0D0 
      IF (BNORM .EQ. 0.0D0) BNORM = 1.0D0 
      EP = EPS1 
      IF (EP .GT. 0.0D0) GO TO 50 
C     .......... USE ROUNDOFF LEVEL IF EPS1 IS ZERO .......... 
      EP = EPSLON(1.0D0) 
   50 EPSA = EP * ANORM 
      EPSB = EP * BNORM 
C     .......... REDUCE A TO QUASI-TRIANGULAR FORM, WHILE 
C                KEEPING B TRIANGULAR .......... 
      LOR1 = 1 
      ENORN = N 
      EN = N 
      ITN = 30*N 
C     .......... BEGIN QZ STEP .......... 
   60 IF (EN .LE. 2) GO TO 1001 
      IF (.NOT. MATZ) ENORN = EN 
      ITS = 0 
      NA = EN - 1 
      ENM2 = NA - 1 
   70 ISH = 2 
C     .......... CHECK FOR CONVERGENCE OR REDUCIBILITY. 
C                FOR L=EN STEP -1 UNTIL 1 DO -- .......... 
      DO 80 LL = 1, EN 
         LM1 = EN - LL 
         L = LM1 + 1 
         IF (L .EQ. 1) GO TO 95 
         IF (DABS(A(L,LM1)) .LE. EPSA) GO TO 90 
   80 CONTINUE 
C 
   90 A(L,LM1) = 0.0D0 
      IF (L .LT. NA) GO TO 95 
C     .......... 1-BY-1 OR 2-BY-2 BLOCK ISOLATED .......... 
      EN = LM1 
      GO TO 60 
C     .......... CHECK FOR SMALL TOP OF B .......... 
   95 LD = L 
  100 L1 = L + 1 
      B11 = B(L,L) 
      IF (DABS(B11) .GT. EPSB) GO TO 120 
      B(L,L) = 0.0D0 
      S = DABS(A(L,L)) + DABS(A(L1,L)) 
      U1 = A(L,L) / S 
      U2 = A(L1,L) / S 
      R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
      V1 = -(U1 + R) / R 
      V2 = -U2 / R 
      U2 = V2 / V1 
C 
      DO 110 J = L, ENORN 
         T = A(L,J) + U2 * A(L1,J) 
         A(L,J) = A(L,J) + T * V1 
         A(L1,J) = A(L1,J) + T * V2 
         T = B(L,J) + U2 * B(L1,J) 
         B(L,J) = B(L,J) + T * V1 
         B(L1,J) = B(L1,J) + T * V2 
  110 CONTINUE 
C 
      IF (L .NE. 1) A(L,LM1) = -A(L,LM1) 
      LM1 = L 
      L = L1 
      GO TO 90 
  120 A11 = A(L,L) / B11 
      A21 = A(L1,L) / B11 
      IF (ISH .EQ. 1) GO TO 140 
C     .......... ITERATION STRATEGY .......... 
      IF (ITN .EQ. 0) GO TO 1000 
      IF (ITS .EQ. 10) GO TO 155 
C     .......... DETERMINE TYPE OF SHIFT .......... 
      B22 = B(L1,L1) 
      IF (DABS(B22) .LT. EPSB) B22 = EPSB 
      B33 = B(NA,NA) 
      IF (DABS(B33) .LT. EPSB) B33 = EPSB 
      B44 = B(EN,EN) 
      IF (DABS(B44) .LT. EPSB) B44 = EPSB 
      A33 = A(NA,NA) / B33 
      A34 = A(NA,EN) / B44 
      A43 = A(EN,NA) / B33 
      A44 = A(EN,EN) / B44 
      B34 = B(NA,EN) / B44 
      T = 0.5D0 * (A43 * B34 - A33 - A44) 
      R = T * T + A34 * A43 - A33 * A44 
      IF (R .LT. 0.0D0) GO TO 150 
C     .......... DETERMINE SINGLE SHIFT ZEROTH COLUMN OF A .......... 
      ISH = 1 
      R = DSQRT(R) 
      SH = -T + R 
      S = -T - R 
      IF (DABS(S-A44) .LT. DABS(SH-A44)) SH = S 
C     .......... LOOK FOR TWO CONSECUTIVE SMALL 
C                SUB-DIAGONAL ELEMENTS OF A. 
C                FOR L=EN-2 STEP -1 UNTIL LD DO -- .......... 
      DO 130 LL = LD, ENM2 
         L = ENM2 + LD - LL 
         IF (L .EQ. LD) GO TO 140 
         LM1 = L - 1 
         L1 = L + 1 
         T = A(L,L) 
         IF (DABS(B(L,L)) .GT. EPSB) T = T - SH * B(L,L) 
         IF (DABS(A(L,LM1)) .LE. DABS(T/A(L1,L)) * EPSA) GO TO 100 
  130 CONTINUE 
C 
  140 A1 = A11 - SH 
      A2 = A21 
      IF (L .NE. LD) A(L,LM1) = -A(L,LM1) 
      GO TO 160 
C     .......... DETERMINE DOUBLE SHIFT ZEROTH COLUMN OF A .......... 
  150 A12 = A(L,L1) / B22 
      A22 = A(L1,L1) / B22 
      B12 = B(L,L1) / B22 
      A1 = ((A33 - A11) * (A44 - A11) - A34 * A43 + A43 * B34 * A11) 
     X     / A21 + A12 - A11 * B12 
      A2 = (A22 - A11) - A21 * B12 - (A33 - A11) - (A44 - A11) 
     X     + A43 * B34 
      A3 = A(L1+1,L1) / B22 
      GO TO 160 
C     .......... AD HOC SHIFT .......... 
  155 A1 = 0.0D0 
      A2 = 1.0D0 
      A3 = 1.1605D0 
  160 ITS = ITS + 1 
      ITN = ITN - 1 
      IF (.NOT. MATZ) LOR1 = LD 
C     .......... MAIN LOOP .......... 
      DO 260 K = L, NA 
         NOTLAS = K .NE. NA .AND. ISH .EQ. 2 
         K1 = K + 1 
         K2 = K + 2 
         KM1 = MAX0(K-1,L) 
         LL = MIN0(EN,K1+ISH) 
         IF (NOTLAS) GO TO 190 
C     .......... ZERO A(K+1,K-1) .......... 
         IF (K .EQ. L) GO TO 170 
         A1 = A(K,KM1) 
         A2 = A(K1,KM1) 
  170    S = DABS(A1) + DABS(A2) 
         IF (S .EQ. 0.0D0) GO TO 70 
         U1 = A1 / S 
         U2 = A2 / S 
         R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
         V1 = -(U1 + R) / R 
         V2 = -U2 / R 
         U2 = V2 / V1 
C 
         DO 180 J = KM1, ENORN 
            T = A(K,J) + U2 * A(K1,J) 
            A(K,J) = A(K,J) + T * V1 
            A(K1,J) = A(K1,J) + T * V2 
            T = B(K,J) + U2 * B(K1,J) 
            B(K,J) = B(K,J) + T * V1 
            B(K1,J) = B(K1,J) + T * V2 
  180    CONTINUE 
C 
         IF (K .NE. L) A(K1,KM1) = 0.0D0 
         GO TO 240 
C     .......... ZERO A(K+1,K-1) AND A(K+2,K-1) .......... 
  190    IF (K .EQ. L) GO TO 200 
         A1 = A(K,KM1) 
         A2 = A(K1,KM1) 
         A3 = A(K2,KM1) 
  200    S = DABS(A1) + DABS(A2) + DABS(A3) 
         IF (S .EQ. 0.0D0) GO TO 260 
         U1 = A1 / S 
         U2 = A2 / S 
         U3 = A3 / S 
         R = DSIGN(DSQRT(U1*U1+U2*U2+U3*U3),U1) 
         V1 = -(U1 + R) / R 
         V2 = -U2 / R 
         V3 = -U3 / R 
         U2 = V2 / V1 
         U3 = V3 / V1 
C 
         DO 210 J = KM1, ENORN 
            T = A(K,J) + U2 * A(K1,J) + U3 * A(K2,J) 
            A(K,J) = A(K,J) + T * V1 
            A(K1,J) = A(K1,J) + T * V2 
            A(K2,J) = A(K2,J) + T * V3 
            T = B(K,J) + U2 * B(K1,J) + U3 * B(K2,J) 
            B(K,J) = B(K,J) + T * V1 
            B(K1,J) = B(K1,J) + T * V2 
            B(K2,J) = B(K2,J) + T * V3 
  210    CONTINUE 
C 
         IF (K .EQ. L) GO TO 220 
         A(K1,KM1) = 0.0D0 
         A(K2,KM1) = 0.0D0 
C     .......... ZERO B(K+2,K+1) AND B(K+2,K) .......... 
  220    S = DABS(B(K2,K2)) + DABS(B(K2,K1)) + DABS(B(K2,K)) 
         IF (S .EQ. 0.0D0) GO TO 240 
         U1 = B(K2,K2) / S 
         U2 = B(K2,K1) / S 
         U3 = B(K2,K) / S 
         R = DSIGN(DSQRT(U1*U1+U2*U2+U3*U3),U1) 
         V1 = -(U1 + R) / R 
         V2 = -U2 / R 
         V3 = -U3 / R 
         U2 = V2 / V1 
         U3 = V3 / V1 
C 
         DO 230 I = LOR1, LL 
            T = A(I,K2) + U2 * A(I,K1) + U3 * A(I,K) 
            A(I,K2) = A(I,K2) + T * V1 
            A(I,K1) = A(I,K1) + T * V2 
            A(I,K) = A(I,K) + T * V3 
            T = B(I,K2) + U2 * B(I,K1) + U3 * B(I,K) 
            B(I,K2) = B(I,K2) + T * V1 
            B(I,K1) = B(I,K1) + T * V2 
            B(I,K) = B(I,K) + T * V3 
  230    CONTINUE 
C 
         B(K2,K) = 0.0D0 
         B(K2,K1) = 0.0D0 
         IF (.NOT. MATZ) GO TO 240 
C 
         DO 235 I = 1, N 
            T = Z(I,K2) + U2 * Z(I,K1) + U3 * Z(I,K) 
            Z(I,K2) = Z(I,K2) + T * V1 
            Z(I,K1) = Z(I,K1) + T * V2 
            Z(I,K) = Z(I,K) + T * V3 
  235    CONTINUE 
C     .......... ZERO B(K+1,K) .......... 
  240    S = DABS(B(K1,K1)) + DABS(B(K1,K)) 
         IF (S .EQ. 0.0D0) GO TO 260 
         U1 = B(K1,K1) / S 
         U2 = B(K1,K) / S 
         R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
         V1 = -(U1 + R) / R 
         V2 = -U2 / R 
         U2 = V2 / V1 
C 
         DO 250 I = LOR1, LL 
            T = A(I,K1) + U2 * A(I,K) 
            A(I,K1) = A(I,K1) + T * V1 
            A(I,K) = A(I,K) + T * V2 
            T = B(I,K1) + U2 * B(I,K) 
            B(I,K1) = B(I,K1) + T * V1 
            B(I,K) = B(I,K) + T * V2 
  250    CONTINUE 
C 
         B(K1,K) = 0.0D0 
         IF (.NOT. MATZ) GO TO 260 
C 
         DO 255 I = 1, N 
            T = Z(I,K1) + U2 * Z(I,K) 
            Z(I,K1) = Z(I,K1) + T * V1 
            Z(I,K) = Z(I,K) + T * V2 
  255    CONTINUE 
C 
  260 CONTINUE 
C     .......... END QZ STEP .......... 
      GO TO 70 
C     .......... SET ERROR -- ALL EIGENVALUES HAVE NOT 
C                CONVERGED AFTER 30*N ITERATIONS .......... 
 1000 IERR = EN 
C     .......... SAVE EPSB FOR USE BY QZVAL AND QZVEC .......... 
 1001 IF (N .GT. 1) B(N,1) = EPSB 
      RETURN 
      END 
C
C
C
C=DECK      QZVAL
      SUBROUTINE QZVAL(NM,N,A,B,ALFR,ALFI,BETA,MATZ,Z) 
C 
      INTEGER I,J,N,EN,NA,NM,NN,ISW 
      DOUBLE PRECISION A(NM,N),B(NM,N),ALFR(N),ALFI(N),BETA(N),Z(NM,N) 
      DOUBLE PRECISION C,D,E,R,S,T,AN,A1,A2,BN,CQ,CZ,DI,DR,EI,TI,TR,U1, 
     X       U2,V1,V2,A1I,A11,A12,A2I,A21,A22,B11,B12,B22,SQI,SQR, 
     X       SSI,SSR,SZI,SZR,A11I,A11R,A12I,A12R,A22I,A22R,EPSB 
      LOGICAL MATZ 
C 
C     THIS SUBROUTINE IS THE THIRD STEP OF THE QZ ALGORITHM 
C     FOR SOLVING GENERALIZED MATRIX EIGENVALUE PROBLEMS, 
C     SIAM J. NUMER. ANAL. 10, 241-256(1973) BY MOLER AND STEWART. 
C 
C     THIS SUBROUTINE ACCEPTS A PAIR OF REAL MATRICES, ONE OF THEM 
C     IN QUASI-TRIANGULAR FORM AND THE OTHER IN UPPER TRIANGULAR FORM. 
C     IT REDUCES THE QUASI-TRIANGULAR MATRIX FURTHER, SO THAT ANY 
C     REMAINING 2-BY-2 BLOCKS CORRESPOND TO PAIRS OF COMPLEX 
C     EIGENVALUES, AND RETURNS QUANTITIES WHOSE RATIOS GIVE THE 
C     GENERALIZED EIGENVALUES.  IT IS USUALLY PRECEDED BY  QZHES 
C     AND  QZIT  AND MAY BE FOLLOWED BY  QZVEC. 
C 
C     ON INPUT 
C 
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL 
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM 
C          DIMENSION STATEMENT. 
C 
C        N IS THE ORDER OF THE MATRICES. 
C 
C        A CONTAINS A REAL UPPER QUASI-TRIANGULAR MATRIX. 
C 
C        B CONTAINS A REAL UPPER TRIANGULAR MATRIX.  IN ADDITION, 
C          LOCATION B(N,1) CONTAINS THE TOLERANCE QUANTITY (EPSB) 
C          COMPUTED AND SAVED IN  QZIT. 
C 
C        MATZ SHOULD BE SET TO .TRUE. IF THE RIGHT HAND TRANSFORMATIONS 
C          ARE TO BE ACCUMULATED FOR LATER USE IN COMPUTING 
C          EIGENVECTORS, AND TO .FALSE. OTHERWISE. 
C 
C        Z CONTAINS, IF MATZ HAS BEEN SET TO .TRUE., THE 
C          TRANSFORMATION MATRIX PRODUCED IN THE REDUCTIONS BY QZHES 
C          AND QZIT, IF PERFORMED, OR ELSE THE IDENTITY MATRIX. 
C          IF MATZ HAS BEEN SET TO .FALSE., Z IS NOT REFERENCED. 
C 
C     ON OUTPUT 
C 
C        A HAS BEEN REDUCED FURTHER TO A QUASI-TRIANGULAR MATRIX 
C          IN WHICH ALL NONZERO SUBDIAGONAL ELEMENTS CORRESPOND TO 
C          PAIRS OF COMPLEX EIGENVALUES. 
C 
C        B IS STILL IN UPPER TRIANGULAR FORM, ALTHOUGH ITS ELEMENTS 
C          HAVE BEEN ALTERED.  B(N,1) IS UNALTERED. 
C 
C        ALFR AND ALFI CONTAIN THE REAL AND IMAGINARY PARTS OF THE 
C          DIAGONAL ELEMENTS OF THE TRIANGULAR MATRIX THAT WOULD BE 
C          OBTAINED IF A WERE REDUCED COMPLETELY TO TRIANGULAR FORM 
C          BY UNITARY TRANSFORMATIONS.  NON-ZERO VALUES OF ALFI OCCUR 
C          IN PAIRS, THE FIRST MEMBER POSITIVE AND THE SECOND NEGATIVE. 
C 
C        BETA CONTAINS THE DIAGONAL ELEMENTS OF THE CORRESPONDING B, 
C          NORMALIZED TO BE REAL AND NON-NEGATIVE.  THE GENERALIZED 
C          EIGENVALUES ARE THEN THE RATIOS ((ALFR+I*ALFI)/BETA). 
C 
C        Z CONTAINS THE PRODUCT OF THE RIGHT HAND TRANSFORMATIONS 
C          (FOR ALL THREE STEPS) IF MATZ HAS BEEN SET TO .TRUE. 
C 
C     QUESTIONS AND COMMENTS SHOULD BE DIRECTED TO BURTON S. GARBOW, 
C     MATHEMATICS AND COMPUTER SCIENCE DIV, ARGONNE NATIONAL LABORATORY 
C 
C     THIS VERSION DATED APRIL 1983. 
C 
C     ------------------------------------------------------------------ 
C 
      EPSB = B(N,1) 
      ISW = 1 
C     .......... FIND EIGENVALUES OF QUASI-TRIANGULAR MATRICES. 
C                FOR EN=N STEP -1 UNTIL 1 DO -- .......... 
      DO 510 NN = 1, N 
         EN = N + 1 - NN 
         NA = EN - 1 
         IF (ISW .EQ. 2) GO TO 505 
         IF (EN .EQ. 1) GO TO 410 
         IF (A(EN,NA) .NE. 0.0D0) GO TO 420 
C     .......... 1-BY-1 BLOCK, ONE REAL ROOT .......... 
  410    ALFR(EN) = A(EN,EN) 
         IF (B(EN,EN) .LT. 0.0D0) ALFR(EN) = -ALFR(EN) 
         BETA(EN) = DABS(B(EN,EN)) 
         ALFI(EN) = 0.0D0 
         GO TO 510 
C     .......... 2-BY-2 BLOCK .......... 
  420    IF (DABS(B(NA,NA)) .LE. EPSB) GO TO 455 
         IF (DABS(B(EN,EN)) .GT. EPSB) GO TO 430 
         A1 = A(EN,EN) 
         A2 = A(EN,NA) 
         BN = 0.0D0 
         GO TO 435 
  430    AN = DABS(A(NA,NA)) + DABS(A(NA,EN)) + DABS(A(EN,NA)) 
     X      + DABS(A(EN,EN)) 
         BN = DABS(B(NA,NA)) + DABS(B(NA,EN)) + DABS(B(EN,EN)) 
         A11 = A(NA,NA) / AN 
         A12 = A(NA,EN) / AN 
         A21 = A(EN,NA) / AN 
         A22 = A(EN,EN) / AN 
         B11 = B(NA,NA) / BN 
         B12 = B(NA,EN) / BN 
         B22 = B(EN,EN) / BN 
         E = A11 / B11 
         EI = A22 / B22 
         S = A21 / (B11 * B22) 
         T = (A22 - E * B22) / B22 
         IF (DABS(E) .LE. DABS(EI)) GO TO 431 
         E = EI 
         T = (A11 - E * B11) / B11 
  431    C = 0.5D0 * (T - S * B12) 
         D = C * C + S * (A12 - E * B12) 
         IF (D .LT. 0.0D0) GO TO 480 
C     .......... TWO REAL ROOTS. 
C                ZERO BOTH A(EN,NA) AND B(EN,NA) .......... 
         E = E + (C + DSIGN(DSQRT(D),C)) 
         A11 = A11 - E * B11 
         A12 = A12 - E * B12 
         A22 = A22 - E * B22 
         IF (DABS(A11) + DABS(A12) .LT. 
     X       DABS(A21) + DABS(A22)) GO TO 432 
         A1 = A12 
         A2 = A11 
         GO TO 435 
  432    A1 = A22 
         A2 = A21 
C     .......... CHOOSE AND APPLY REAL Z .......... 
  435    S = DABS(A1) + DABS(A2) 
         U1 = A1 / S 
         U2 = A2 / S 
         R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
         V1 = -(U1 + R) / R 
         V2 = -U2 / R 
         U2 = V2 / V1 
C 
         DO 440 I = 1, EN 
            T = A(I,EN) + U2 * A(I,NA) 
            A(I,EN) = A(I,EN) + T * V1 
            A(I,NA) = A(I,NA) + T * V2 
            T = B(I,EN) + U2 * B(I,NA) 
            B(I,EN) = B(I,EN) + T * V1 
            B(I,NA) = B(I,NA) + T * V2 
  440    CONTINUE 
C 
         IF (.NOT. MATZ) GO TO 450 
C 
         DO 445 I = 1, N 
            T = Z(I,EN) + U2 * Z(I,NA) 
            Z(I,EN) = Z(I,EN) + T * V1 
            Z(I,NA) = Z(I,NA) + T * V2 
  445    CONTINUE 
C 
  450    IF (BN .EQ. 0.0D0) GO TO 475 
         IF (AN .LT. DABS(E) * BN) GO TO 455 
         A1 = B(NA,NA) 
         A2 = B(EN,NA) 
         GO TO 460 
  455    A1 = A(NA,NA) 
         A2 = A(EN,NA) 
C     .......... CHOOSE AND APPLY REAL Q .......... 
  460    S = DABS(A1) + DABS(A2) 
         IF (S .EQ. 0.0D0) GO TO 475 
         U1 = A1 / S 
         U2 = A2 / S 
         R = DSIGN(DSQRT(U1*U1+U2*U2),U1) 
         V1 = -(U1 + R) / R 
         V2 = -U2 / R 
         U2 = V2 / V1 
C 
         DO 470 J = NA, N 
            T = A(NA,J) + U2 * A(EN,J) 
            A(NA,J) = A(NA,J) + T * V1 
            A(EN,J) = A(EN,J) + T * V2 
            T = B(NA,J) + U2 * B(EN,J) 
            B(NA,J) = B(NA,J) + T * V1 
            B(EN,J) = B(EN,J) + T * V2 
  470    CONTINUE 
C 
  475    A(EN,NA) = 0.0D0 
         B(EN,NA) = 0.0D0 
         ALFR(NA) = A(NA,NA) 
         ALFR(EN) = A(EN,EN) 
         IF (B(NA,NA) .LT. 0.0D0) ALFR(NA) = -ALFR(NA) 
         IF (B(EN,EN) .LT. 0.0D0) ALFR(EN) = -ALFR(EN) 
         BETA(NA) = DABS(B(NA,NA)) 
         BETA(EN) = DABS(B(EN,EN)) 
         ALFI(EN) = 0.0D0 
         ALFI(NA) = 0.0D0 
         GO TO 505 
C     .......... TWO COMPLEX ROOTS .......... 
  480    E = E + C 
         EI = DSQRT(-D) 
         A11R = A11 - E * B11 
         A11I = EI * B11 
         A12R = A12 - E * B12 
         A12I = EI * B12 
         A22R = A22 - E * B22 
         A22I = EI * B22 
         IF (DABS(A11R) + DABS(A11I) + DABS(A12R) + DABS(A12I) .LT. 
     X       DABS(A21) + DABS(A22R) + DABS(A22I)) GO TO 482 
         A1 = A12R 
         A1I = A12I 
         A2 = -A11R 
         A2I = -A11I 
         GO TO 485 
  482    A1 = A22R 
         A1I = A22I 
         A2 = -A21 
         A2I = 0.0D0 
C     .......... CHOOSE COMPLEX Z .......... 
  485    CZ = DSQRT(A1*A1+A1I*A1I) 
         IF (CZ .EQ. 0.0D0) GO TO 487 
         SZR = (A1 * A2 + A1I * A2I) / CZ 
         SZI = (A1 * A2I - A1I * A2) / CZ 
         R = DSQRT(CZ*CZ+SZR*SZR+SZI*SZI) 
         CZ = CZ / R 
         SZR = SZR / R 
         SZI = SZI / R 
         GO TO 490 
  487    SZR = 1.0D0 
         SZI = 0.0D0 
  490    IF (AN .LT. (DABS(E) + EI) * BN) GO TO 492 
         A1 = CZ * B11 + SZR * B12 
         A1I = SZI * B12 
         A2 = SZR * B22 
         A2I = SZI * B22 
         GO TO 495 
  492    A1 = CZ * A11 + SZR * A12 
         A1I = SZI * A12 
         A2 = CZ * A21 + SZR * A22 
         A2I = SZI * A22 
C     .......... CHOOSE COMPLEX Q .......... 
  495    CQ = DSQRT(A1*A1+A1I*A1I) 
         IF (CQ .EQ. 0.0D0) GO TO 497 
         SQR = (A1 * A2 + A1I * A2I) / CQ 
         SQI = (A1 * A2I - A1I * A2) / CQ 
         R = DSQRT(CQ*CQ+SQR*SQR+SQI*SQI) 
         CQ = CQ / R 
         SQR = SQR / R 
         SQI = SQI / R 
         GO TO 500 
  497    SQR = 1.0D0 
         SQI = 0.0D0 
C     .......... COMPUTE DIAGONAL ELEMENTS THAT WOULD RESULT 
C                IF TRANSFORMATIONS WERE APPLIED .......... 
  500    SSR = SQR * SZR + SQI * SZI 
         SSI = SQR * SZI - SQI * SZR 
         I = 1 
         TR = CQ * CZ * A11 + CQ * SZR * A12 + SQR * CZ * A21 
     X      + SSR * A22 
         TI = CQ * SZI * A12 - SQI * CZ * A21 + SSI * A22 
         DR = CQ * CZ * B11 + CQ * SZR * B12 + SSR * B22 
         DI = CQ * SZI * B12 + SSI * B22 
         GO TO 503 
  502    I = 2 
         TR = SSR * A11 - SQR * CZ * A12 - CQ * SZR * A21 
     X      + CQ * CZ * A22 
         TI = -SSI * A11 - SQI * CZ * A12 + CQ * SZI * A21 
         DR = SSR * B11 - SQR * CZ * B12 + CQ * CZ * B22 
         DI = -SSI * B11 - SQI * CZ * B12 
  503    T = TI * DR - TR * DI 
         J = NA 
         IF (T .LT. 0.0D0) J = EN 
         R = DSQRT(DR*DR+DI*DI) 
         BETA(J) = BN * R 
         ALFR(J) = AN * (TR * DR + TI * DI) / R 
         ALFI(J) = AN * T / R 
         IF (I .EQ. 1) GO TO 502 
  505    ISW = 3 - ISW 
  510 CONTINUE 
      B(N,1) = EPSB 
C 
      RETURN 
      END 
C
C
C
C=DECK      QZVEC
      SUBROUTINE QZVEC(NM,N,A,B,ALFR,ALFI,BETA,Z) 
C 
      INTEGER I,J,K,M,N,EN,II,JJ,NA,NM,NN,ISW,ENM2 
      DOUBLE PRECISION A(NM,N),B(NM,N),ALFR(N),ALFI(N),BETA(N),Z(NM,N) 
      DOUBLE PRECISION D,Q,R,S,T,W,X,Y,DI,DR,RA,RR,SA,TI,TR,T1,T2,W1,X1, 
     X       ZZ,Z1,ALFM,ALMI,ALMR,BETM,EPSB 
C 
C     THIS SUBROUTINE IS THE OPTIONAL FOURTH STEP OF THE QZ ALGORITHM 
C     FOR SOLVING GENERALIZED MATRIX EIGENVALUE PROBLEMS, 
C     SIAM J. NUMER. ANAL. 10, 241-256(1973) BY MOLER AND STEWART. 
C 
C     THIS SUBROUTINE ACCEPTS A PAIR OF REAL MATRICES, ONE OF THEM IN 
C     QUASI-TRIANGULAR FORM (IN WHICH EACH 2-BY-2 BLOCK CORRESPONDS TO 
C     A PAIR OF COMPLEX EIGENVALUES) AND THE OTHER IN UPPER TRIANGULAR 
C     FORM.  IT COMPUTES THE EIGENVECTORS OF THE TRIANGULAR PROBLEM AND 
C     TRANSFORMS THE RESULTS BACK TO THE ORIGINAL COORDINATE SYSTEM. 
C     IT IS USUALLY PRECEDED BY  QZHES,  QZIT, AND  QZVAL. 
C 
C     ON INPUT 
C 
C        NM MUST BE SET TO THE ROW DIMENSION OF TWO-DIMENSIONAL 
C          ARRAY PARAMETERS AS DECLARED IN THE CALLING PROGRAM 
C          DIMENSION STATEMENT. 
C 
C        N IS THE ORDER OF THE MATRICES. 
C 
C        A CONTAINS A REAL UPPER QUASI-TRIANGULAR MATRIX. 
C 
C        B CONTAINS A REAL UPPER TRIANGULAR MATRIX.  IN ADDITION, 
C          LOCATION B(N,1) CONTAINS THE TOLERANCE QUANTITY (EPSB) 
C          COMPUTED AND SAVED IN  QZIT. 
C 
C        ALFR, ALFI, AND BETA  ARE VECTORS WITH COMPONENTS WHOSE 
C          RATIOS ((ALFR+I*ALFI)/BETA) ARE THE GENERALIZED 
C          EIGENVALUES.  THEY ARE USUALLY OBTAINED FROM  QZVAL. 
C 
C        Z CONTAINS THE TRANSFORMATION MATRIX PRODUCED IN THE 
C          REDUCTIONS BY  QZHES,  QZIT, AND  QZVAL, IF PERFORMED. 
C          IF THE EIGENVECTORS OF THE TRIANGULAR PROBLEM ARE 
C          DESIRED, Z MUST CONTAIN THE IDENTITY MATRIX. 
C 
C     ON OUTPUT 
C 
C        A IS UNALTERED.  ITS SUBDIAGONAL ELEMENTS PROVIDE INFORMATION 
C           ABOUT THE STORAGE OF THE COMPLEX EIGENVECTORS. 
C 
C        B HAS BEEN DESTROYED. 
C 
C        ALFR, ALFI, AND BETA ARE UNALTERED. 
C 
C        Z CONTAINS THE REAL AND IMAGINARY PARTS OF THE EIGENVECTORS. 
C          IF ALFI(I) .EQ. 0.0, THE I-TH EIGENVALUE IS REAL AND 
C            THE I-TH COLUMN OF Z CONTAINS ITS EIGENVECTOR. 
C          IF ALFI(I) .NE. 0.0, THE I-TH EIGENVALUE IS COMPLEX. 
C            IF ALFI(I) .GT. 0.0, THE EIGENVALUE IS THE FIRST OF 
C              A COMPLEX PAIR AND THE I-TH AND (I+1)-TH COLUMNS 
C              OF Z CONTAIN ITS EIGENVECTOR. 
C            IF ALFI(I) .LT. 0.0, THE EIGENVALUE IS THE SECOND OF 
C              A COMPLEX PAIR AND THE (I-1)-TH AND I-TH COLUMNS 
C              OF Z CONTAIN THE CONJUGATE OF ITS EIGENVECTOR. 
C          EACH EIGENVECTOR IS NORMALIZED SO THAT THE MODULUS 
C          OF ITS LARGEST COMPONENT IS 1.0 . 
C 
C     QUESTIONS AND COMMENTS SHOULD BE DIRECTED TO BURTON S. GARBOW, 
C     MATHEMATICS AND COMPUTER SCIENCE DIV, ARGONNE NATIONAL LABORATORY 
C 
C     THIS VERSION DATED APRIL 1983. 
C 
C     ------------------------------------------------------------------ 
C 
      EPSB = B(N,1) 
      ISW = 1 
C     .......... FOR EN=N STEP -1 UNTIL 1 DO -- .......... 
      DO 800 NN = 1, N 
         EN = N + 1 - NN 
         NA = EN - 1 
         IF (ISW .EQ. 2) GO TO 795 
         IF (ALFI(EN) .NE. 0.0D0) GO TO 710 
C     .......... REAL VECTOR .......... 
         M = EN 
         B(EN,EN) = 1.0D0 
         IF (NA .EQ. 0) GO TO 800 
         ALFM = ALFR(M) 
         BETM = BETA(M) 
C     .......... FOR I=EN-1 STEP -1 UNTIL 1 DO -- .......... 
         DO 700 II = 1, NA 
            I = EN - II 
            W = BETM * A(I,I) - ALFM * B(I,I) 
            R = 0.0D0 
C 
            DO 610 J = M, EN 
  610       R = R + (BETM * A(I,J) - ALFM * B(I,J)) * B(J,EN) 
C 
            IF (I .EQ. 1 .OR. ISW .EQ. 2) GO TO 630 
            IF (BETM * A(I,I-1) .EQ. 0.0D0) GO TO 630 
            ZZ = W 
            S = R 
            GO TO 690 
  630       M = I 
            IF (ISW .EQ. 2) GO TO 640 
C     .......... REAL 1-BY-1 BLOCK .......... 
            T = W 
            IF (W .EQ. 0.0D0) T = EPSB 
            B(I,EN) = -R / T 
            GO TO 700 
C     .......... REAL 2-BY-2 BLOCK .......... 
  640       X = BETM * A(I,I+1) - ALFM * B(I,I+1) 
            Y = BETM * A(I+1,I) 
            Q = W * ZZ - X * Y 
            T = (X * S - ZZ * R) / Q 
            B(I,EN) = T 
            IF (DABS(X) .LE. DABS(ZZ)) GO TO 650 
            B(I+1,EN) = (-R - W * T) / X 
            GO TO 690 
  650       B(I+1,EN) = (-S - Y * T) / ZZ 
  690       ISW = 3 - ISW 
  700    CONTINUE 
C     .......... END REAL VECTOR .......... 
         GO TO 800 
C     .......... COMPLEX VECTOR .......... 
  710    M = NA 
         ALMR = ALFR(M) 
         ALMI = ALFI(M) 
         BETM = BETA(M) 
C     .......... LAST VECTOR COMPONENT CHOSEN IMAGINARY SO THAT 
C                EIGENVECTOR MATRIX IS TRIANGULAR .......... 
         Y = BETM * A(EN,NA) 
         B(NA,NA) = -ALMI * B(EN,EN) / Y 
         B(NA,EN) = (ALMR * B(EN,EN) - BETM * A(EN,EN)) / Y 
         B(EN,NA) = 0.0D0 
         B(EN,EN) = 1.0D0 
         ENM2 = NA - 1 
         IF (ENM2 .EQ. 0) GO TO 795 
C     .......... FOR I=EN-2 STEP -1 UNTIL 1 DO -- .......... 
         DO 790 II = 1, ENM2 
            I = NA - II 
            W = BETM * A(I,I) - ALMR * B(I,I) 
            W1 = -ALMI * B(I,I) 
            RA = 0.0D0 
            SA = 0.0D0 
C 
            DO 760 J = M, EN 
               X = BETM * A(I,J) - ALMR * B(I,J) 
               X1 = -ALMI * B(I,J) 
               RA = RA + X * B(J,NA) - X1 * B(J,EN) 
               SA = SA + X * B(J,EN) + X1 * B(J,NA) 
  760       CONTINUE 
C 
            IF (I .EQ. 1 .OR. ISW .EQ. 2) GO TO 770 
            IF (BETM * A(I,I-1) .EQ. 0.0D0) GO TO 770 
            ZZ = W 
            Z1 = W1 
            R = RA 
            S = SA 
            ISW = 2 
            GO TO 790 
  770       M = I 
            IF (ISW .EQ. 2) GO TO 780 
C     .......... COMPLEX 1-BY-1 BLOCK .......... 
            TR = -RA 
            TI = -SA 
  773       DR = W 
            DI = W1 
C     .......... COMPLEX DIVIDE (T1,T2) = (TR,TI) / (DR,DI) .......... 
  775       IF (DABS(DI) .GT. DABS(DR)) GO TO 777 
            RR = DI / DR 
            D = DR + DI * RR 
            T1 = (TR + TI * RR) / D 
            T2 = (TI - TR * RR) / D 
            GO TO (787,782), ISW 
  777       RR = DR / DI 
            D = DR * RR + DI 
            T1 = (TR * RR + TI) / D 
            T2 = (TI * RR - TR) / D 
            GO TO (787,782), ISW 
C     .......... COMPLEX 2-BY-2 BLOCK .......... 
  780       X = BETM * A(I,I+1) - ALMR * B(I,I+1) 
            X1 = -ALMI * B(I,I+1) 
            Y = BETM * A(I+1,I) 
            TR = Y * RA - W * R + W1 * S 
            TI = Y * SA - W * S - W1 * R 
            DR = W * ZZ - W1 * Z1 - X * Y 
            DI = W * Z1 + W1 * ZZ - X1 * Y 
            IF (DR .EQ. 0.0D0 .AND. DI .EQ. 0.0D0) DR = EPSB 
            GO TO 775 
  782       B(I+1,NA) = T1 
            B(I+1,EN) = T2 
            ISW = 1 
            IF (DABS(Y) .GT. DABS(W) + DABS(W1)) GO TO 785 
            TR = -RA - X * B(I+1,NA) + X1 * B(I+1,EN) 
            TI = -SA - X * B(I+1,EN) - X1 * B(I+1,NA) 
            GO TO 773 
  785       T1 = (-R - ZZ * B(I+1,NA) + Z1 * B(I+1,EN)) / Y 
            T2 = (-S - ZZ * B(I+1,EN) - Z1 * B(I+1,NA)) / Y 
  787       B(I,NA) = T1 
            B(I,EN) = T2 
  790    CONTINUE 
C     .......... END COMPLEX VECTOR .......... 
  795    ISW = 3 - ISW 
  800 CONTINUE 
C     .......... END BACK SUBSTITUTION. 
C                TRANSFORM TO ORIGINAL COORDINATE SYSTEM. 
C                FOR J=N STEP -1 UNTIL 1 DO -- .......... 
      DO 880 JJ = 1, N 
         J = N + 1 - JJ 
C 
         DO 880 I = 1, N 
            ZZ = 0.0D0 
C 
            DO 860 K = 1, J 
  860       ZZ = ZZ + Z(I,K) * B(K,J) 
C 
            Z(I,J) = ZZ 
  880 CONTINUE 
C     .......... NORMALIZE SO THAT MODULUS OF LARGEST 
C                COMPONENT OF EACH VECTOR IS 1. 
C                (ISW IS 1 INITIALLY FROM BEFORE) .......... 
      DO 950 J = 1, N 
         D = 0.0D0 
         IF (ISW .EQ. 2) GO TO 920 
         IF (ALFI(J) .NE. 0.0D0) GO TO 945 
C 
         DO 890 I = 1, N 
            IF (DABS(Z(I,J)) .GT. D) D = DABS(Z(I,J)) 
  890    CONTINUE 
C 
         DO 900 I = 1, N 
  900    Z(I,J) = Z(I,J) / D 
C 
         GO TO 950 
C 
  920    DO 930 I = 1, N 
            R = DABS(Z(I,J-1)) + DABS(Z(I,J)) 
            IF (R .NE. 0.0D0) R = R * DSQRT((Z(I,J-1)/R)**2 
     X                                     +(Z(I,J)/R)**2) 
            IF (R .GT. D) D = R 
  930    CONTINUE 
C 
         DO 940 I = 1, N 
            Z(I,J-1) = Z(I,J-1) / D 
            Z(I,J) = Z(I,J) / D 
  940    CONTINUE 
C 
  945    ISW = 3 - ISW 
  950 CONTINUE 
C 
      RETURN 
      END 
C
C
C
      DOUBLE PRECISION FUNCTION EPSLON (X) 
      DOUBLE PRECISION X 
C 
C     ESTIMATE UNIT ROUNDOFF IN QUANTITIES OF SIZE X. 
C 
      DOUBLE PRECISION A,B,C,EPS 
C 
C     THIS PROGRAM SHOULD FUNCTION PROPERLY ON ALL SYSTEMS 
C     SATISFYING THE FOLLOWING TWO ASSUMPTIONS, 
C        1.  THE BASE USED IN REPRESENTING FLOATING POINT 
C            NUMBERS IS NOT A POWER OF THREE. 
C        2.  THE QUANTITY  A  IN STATEMENT 10 IS REPRESENTED TO 
C            THE ACCURACY USED IN FLOATING POINT VARIABLES 
C            THAT ARE STORED IN MEMORY. 
C     THE STATEMENT NUMBER 10 AND THE GO TO 10 ARE INTENDED TO 
C     FORCE OPTIMIZING COMPILERS TO GENERATE CODE SATISFYING 
C     ASSUMPTION 2. 
C     UNDER THESE ASSUMPTIONS, IT SHOULD BE TRUE THAT, 
C            A  IS NOT EXACTLY EQUAL TO FOUR-THIRDS, 
C            B  HAS A ZERO FOR ITS LAST BIT OR DIGIT, 
C            C  IS NOT EXACTLY EQUAL TO ONE, 
C            EPS  MEASURES THE SEPARATION OF 1.0 FROM 
C                 THE NEXT LARGER FLOATING POINT NUMBER. 
C     THE DEVELOPERS OF EISPACK WOULD APPRECIATE BEING INFORMED 
C     ABOUT ANY SYSTEMS WHERE THESE ASSUMPTIONS DO NOT HOLD. 
C 
C     THIS VERSION DATED 4/6/83. 
C 
      A = 4.0D0/3.0D0 
   10 B = A - 1.0D0 
      C = B + B + B 
      EPS = DABS(C-1.0D0) 
      IF (EPS .EQ. 0.0D0) GO TO 10 
      EPSLON = EPS*DABS(X) 
      RETURN 
      END 
C
C
C
C BEG DEC 2004
C=DECK      SIDE12
      SUBROUTINE SIDE12(ndof,a,b,c,theta,fact,x,wsn,wssn)
c
c Purpose is to get derivatives wxx,wxy,wxxx,wxxy and therefore
c wsn and wssn along sides 1 and 2 of the isosceles triangle.
c wsn and wssn are needed for evaluation of the contribution
c of edge blade stiffeners to the stiffness and load-geometric
c matrices corresponding to local buckling of the skin between
c isogrid members including rolling of the blade stiffeners along
c edges.
c
c INPUT:
c b = height of isosceles triangle
c a = 2b/s, where s = length of base of isosceles triangle
c c = +2/s for side 1 and -2/s for side 2
c theta = angle of isosceles triangle (theta = 60. deg. for equilateral triangle)
c fact  = +1.0 for side 1; -1.0 for side 2.
c x = distance along base measured from midbase.
c
c OUTPUT:
c  wsn(i), wssn(i), i=1,ndof at the coordinate, x.
c
      implicit double precision (a-h,o-z)
      dimension wxx(ndof),wxy(ndof),wxxx(ndof),wxxy(ndof)
      dimension wsn(ndof),wssn(ndof)
c
      pi = 3.1415927
      rad1 = theta*pi/180.
      rad2 = (90.-theta)*pi/180.
      crad1 = cos(rad1)
      crad2 = cos(rad2)
      srad2 = sin(rad2)
      x2 = x**2
      x3 = x**3
      x4 = x**4
      x5 = x**5
      a2 = a**2
      a4 = a**4
      a6 = a**6
      b2 = b**2
      b3 = b**3
      b4 = b**4
      b5 = b**5
      b6 = b**6
      c2 = c**2
      cx = c*x + 1.
      cx2 = cx**2
      cx3 = cx**3
      cx4 = cx**4
      cx5 = cx**5
      cx21= 2.*c*x + 1.
c
      if (ndof.eq.15) then
       wxx(1) = -(16.*a4/b)*(x3*2.*cx*c + 3.*x2*cx2)
     1            -8.*a2*b *(x*4.*cx3*c + cx4)
     1          -(6.*a6/b3)*(x5*c + 5.*x4*cx)
     1          -(8.*a4/b) *(x3*3.*cx2*c + 3.*x2*cx3)
     1            +6.*a2*b *(x*5.*cx4*c + cx5)
c
       wxy(1) = -4.*b2*c + 6.*b2*cx*c -(8.*a4/b2)*(5.*c*x4 + 4.*x3)
     1          -16.*a2*(x2*3.*cx2*c + 2.*x*cx3) -6.*a6*x5/b4
     1          -(6.*a4/b2)*(x4*2.*cx*c + 4.*x3*cx2)
     1          +15.*a2*(x2*4.*cx3*c + 2.*x*cx4)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(2)= -36.*a4*(x3*2.*cx*c + 3.*x2*cx2)
     1        -22.*a2*b2*(x*4.*cx3*c +cx4) -(12.*a6/b2)*(6.*c*x5+5.*x4) 
     1       -24.*a4*(x3*3.*cx2*c+3.*x2*cx3) +16.*a2*b2*(x*5.*cx4*c+cx5)
c
       wxy(2)= -6.*b3*c +12.*b3*cx2*c -(18.*a4/b)*(5.*c*x4 +4.*x3)
     1        -44.*a2*b*(x2*3.*cx2*c +2.*x*cx3) -12.*a6*x5/b3
     1-(18.*a4/b)*(x4*2.*cx*c+4.*x3*cx2)+40.*a2*b*(x2*4.*cx3*c+2.*x*cx4)
c
      wxx(3)=-56.*a4*b*(x3*2.*cx*c+3.*x2*cx2)-40.*a2*b3*(x*4.*cx3*c+cx4)
     1      -(18.*a6/b)*(6.*c*x5+5.*x4)-44.*a4*b*(x3*3.*cx2*c+3.*x2*cx3)
     1       +28.*a2*b3*(x*5.*cx4*c +cx5)
c
       wxy(3)= -8.*b4*c +20.*b4*cx3*c -28.*a4*(x4*c +4.*x3*cx) 
     1        -80.*a2*b2*(x2*3.*cx2*c +2.*x*cx3) - 18.*a6*x5/b2
     1   -33.*a4*(x4*2.*cx*c+4.*x3*cx2)+70.*a2*b2*(x2*4.*cx3*c+2.*x*cx4) 
c
       wxx(4)= -76.*a4*b2*(x3*2.*cx*c + 3.*x2*cx2)
     1         -60.*a2*b4*(x*4.*cx3*c+cx4) -24.*a6*(6.*c*x5 +5.*x4)
     1    -64.*a4*b2*(x3*3.*cx2*c+3.*x2*cx3) +40.*a2*b4*(x*5.*cx4*c+cx5)
c
       wxy(4)= -10.*b5*c +30.*b5*cx4*c -38.*a4*b*(5.*c*x4+4.*x3)
     1        -120.*a2*b3*(x2*3.*cx2*c +2.*x*cx3) -24.*a6*x5/b
     1-48.*a4*b*(x4*2.*cx*c+4.*x3*cx2)+100.*a2*b3*(x2*4.*cx3*c+2.*x*cx4)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(5)= -96.*a4*b3*(x3*2.*cx*c + 3.*x2*cx2)
     1         -80.*a2*b5*(x*4.*cx3*c +cx4) -30.*a6*b*(6.*c*x5 +5.*x4)
     1    -84.*a4*b3*(x3*3.*cx2*c+3.*x2*cx3) +50.*a2*b5*(x*5.*cx4*c+cx5)
c
       wxy(5)= -12.*b6*c +42.*b6*cx5*c -48.*a4*b2*(5.*c*x4 +4.*x3)
     1        -160.*a2*b4*(x2*3.*cx2*c +2.*x*cx3) - 30.*a6*x5
     1         -63.*a4*b2*(x4*2.*cx*c +4.*x3*cx2)
     1                                +125.*a2*b4*(x2*4.*cx3*c+2.*x*cx4)
c
       wxx(6)= b3*c -4.*b3*cx*c +3.*b3*cx2*c -(5.*a4/b)*(5.*c*x4 +4.*x3)
     1 -9.*a2*b*(x2*3.*cx2*c+2.*x*cx3)-(10.*a4/b)*(x4*2.*cx*c+4.*x3*cx2)
     1 +6.*a2*b*(x2*4.*cx3*c + 2.*x*cx4)
c
       wxy(6)= b2 -4.*b2*cx21 +3.*b2*(x*2.*cx*c+cx2) -5.*a4*x4/b2
     1        -9.*a2*(x3*2.*cx*c +3.*x2*cx2) -(4.*a4/b2)*(6.*c*x5+5.*x4)
     1        +8.*a2*(x3*3.*cx2*c + 3.*x2*cx3)
c
       wxx(7)= 2.*b4*c -6.*b4*cx*c +4.*b4*cx3*c -10.*a4*(5.*c*x4 +4.*x3)
     1  -24.*a2*b2*(x2*3.*cx2*c+2.*x*cx3) -25.*a4*(x4*2.*cx*c+4.*x3*cx2)
     1  +15.*a2*b2*(x2*4.*cx3*c +2.*x*cx4)
c
       wxy(7)=2.*b3-6.*b3*cx21+4.*b3*(x*3.*cx2*c+cx3)-10.*a4*x4/b
     1     -24.*a2*b*(x3*2.*cx*c +3.*x2*cx2) -(10.*a4/b)*(6.*c*x5+5.*x4)
     1     +20.*a2*b*(x3*3.*cx2*c + 3.*x2*cx3)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(8)=3.*b5*c -8.*b5*cx*c +5.*b5*cx4*c -15.*a4*b*(5.*c*x4+4.*x3)
     1 -42.*a2*b3*(x2*3.*cx2*c+2.*x*cx3)-40.*a4*b*(x4*2.*cx*c+4.*x3*cx2)
     1 +24.*a2*b3*(x2*4.*cx3*c + 2.*x*cx4)
c
       wxy(8)=3.*b4 -8.*b4*cx21 +5.*b4*(x*4.*cx3*c+cx4)-15.*a4*x4
     1      -42.*a2*b2*(x3*2.*cx*c +3.*x2*cx2) -16.*a4*(6.*c*x5 +5.*x4)
     1      +32.*a2*b2*(x3*3.*cx2*c + 3.*x2*cx3)
c
       wxx(9)= 4.*b6*c-10.*b6*cx*c+6.*b6*cx5*c-20.*a4*b2*(5.*c*x4+4.*x3)
     1-60.*a2*b4*(x2*3.*cx2*c+2.*x*cx3)-55.*a4*b2*(x4*2.*cx*c+4.*x3*cx2)
     1+30.*a2*b4*(x2*4.*cx3*c +2.*x*cx4)
c
       wxy(9)= 4.*b5 -10.*b5*cx21 +6.*b5*(x*5.*cx4*c+cx5) -20.*a4*x4*b
     1 -60.*a2*b3*(x3*2.*cx1*c +3.*x2*cx2) -22.*a4*b*(6.*c*x5 +5.*x4)
     1 +40.*a2*b3*(x3*3.*cx2*c +3.*x2*cx3)
c
       wxx(10)= 2.*b*cx21 -(16.*a2/b)*(x3*2.*cx*c +3.*x2*cx2)
     1  -8.*b*(x*4.*cx3*c +cx4) -(6.*a4/b3)*(6.*c*x5 +5.*x4)
     1  -(8.*a2/b)*(x3*3.*cx2*c +3.*x2*cx3) +6.*b*(x*5.*cx4*c +cx5)
c
      wxy(10)=2.*x-(8.*a2/b2)*(5.*c*x4+4.*x3)-16.*(x2*3.*cx2*c+2.*x*cx3)
     1 -6.*a4*x5/b4 -(6.*a2/b2)*(x4*2.*cx*c +4.*x3*cx2)
     1 +15.*(x2*4.*cx3*c + 2.*x*cx4)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(11)= 2.*b2*(x*2.*cx*c  +cx2) -4.*a2*(x3*2.*cx*c  +3.*x2*cx2)
     1        -6.*b2*(x*4.*cx3*c +cx4)  -8.*a2*(x3*3.*cx2*c +3.*x2*cx3)
     1        +4.*b2*(x*5.*cx4*c +cx5)
c
       wxy(11)= 2.*b*(3.*c*x2 +2.*x)  -(2.*a2/b)*(5.*c*x4 +4.*x3)
     1 -12.*b*(x2*3.*cx2*c +2.*x*cx3) -(6.*a2/b)*(x4*2.*cx*c +4.*x3*cx2)
     1 +10.*b*(x2*4.*cx3*c +2.*x*cx4)
c
       wxx(12)=2.*b3*(x*3.*cx2*c +cx3)   -4.*b3*(x*4.*cx3*c +cx4)
     1 -4.*a2*b*(x3*3.*cx2*c +3.*x2*cx3) +2.*b3*(x*5.*cx4*c +cx5)
c
       wxy(12)=3.*b2*(x2*2.*cx*c+2.*x*cx2) -8.*b2*(x2*3.*cx2*c+2.*x*cx3)
     1        -3.*a2*(x4*2.*cx*c+4.*x3*cx2)+5.*b2*(x2*4.*cx3*c+2.*x*cx4)
c
       wxx(13)= 3.*b*(3.*c*x2+2.*x) -(5.*a2/b)*(5.*c*x4+4.*x3)
     1                                     -9.*b*(x2*3.*cx2*c +2.*x*cx3)
     1 -(10.*a2/b)*(x4*2.*cx*c +4.*x3*cx2) +6.*b*(x2*4.*cx3*c +2.*x*cx4)
c
       wxy(13)= 3.*x2 -a2*5.*x4/b2   -9.*(x3*2.*cx*c + 3.*x2*cx2)
     1 -(4.*a2/b2)*(6.*c*x5 +5.*x4)  +8.*(x3*3.*cx2*c +3.*x2*cx3)
c
       wxx(14)=3.*b2*(x2*2.*cx*c+2.*x*cx2) -6.*b2*(x2*3.*cx2*c+2.*x*cx3)
     1        -5.*a2*(x4*2.*cx*c+4.*x3*cx2)+3.*b2*(x2*4.*cx3*c+2.*x*cx4)
c
       wxy(14)=   2.*b*(4.*c*x3+3.*x2)  -6.*b*(x3*2.*cx*c +3.*x2*cx2)
     1     -(2.*a2/b)*(6.*c*x5 +5.*x4)  +4.*b*(x3*3.*cx2*c+3.*x2*cx3)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(15)= 4.*b*(4.*c*x3+3.*x2) -8.*b*(x3*2.*cx*c +3.*x2*cx2)
     1        +4.*b*(x3*3.*cx2*c +3.*x2*cx3) -(6.*a2/b)*(6.*c*x5+5.*x4)
c
       wxy(15)= 4.*x3 -4.*(5.*c*x4+4.*x3) +3.*(x4*2.*cx*c +4.*x3*cx2)
     1         -6.*a2*x5/b2
c
       wxxx(1)= -(32.*a4/b)*(4.*c*x3+3.*x2)*c 
     1                                -(48.*a4/b)*(x2*2.*cx*c +2.*x*cx2)
     1          -32.*a2*b*c*(x*3.*cx2*c +cx3) -32.*a2*b*cx3*c
     1       -(30.*a6/b3)*(x4*c + 5.*c*x4 + 4.*x3)
     1 -(24.*a4/b)*(x3*2.*cx*c2 +3.*x2*cx2*c +x2*3.*cx2*c +2.*x*cx3)
     1 +30.*a2*b*(x*4.*cx3*c2 +cx4*c +cx4*c)
c
       wxxy(1)= 6.*b2*c2 -(8.*a4/b2)*(20.*c*x3 +12.*x2)
     1  -16.*a2*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1                                                     -30.*a6*x4/b4
     1  -(6.*a4/b2)*(2.*c*(5.*x4*c+4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1  +15.*a2*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(2)=-36.*a4*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1         -88.*a2*b2*(c*(x*3.*cx2*c +cx3) +cx3*c)
     1         -(60.*a6/b2)*(6.*c*x4 +4.*x3)
     1 -24.*a4*(3.*c*(x3*2.*cx*c+3.*x2*cx2) +3.*(x2*3.*cx2*c +2.*x*cx3))
     1 +80.*a2*b2*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(2)= 24.*b3*c2*cx -(72.*a4/b)*(5.*c*x3 +3.*x2)
     1 -44.*a2*b*(3.*c*(x2*2.*cx*c+2.*x*cx2) +2.*(x*3.*cx2*c+cx3))
     1                                                     -60.*a6*x4/b3
     1 -(18.*a4/b)*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c + 3.*x2*cx2))
     1 +40.*a2*b*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxx(3)=-56.*a4*b*(2.*c*(4.*c*x3+3.*x2)+3.*(x2*2.*cx*c+2.*x*cx2))
     1 -160.*a2*b3*(c*(x*3.*cx2*c+cx3)+cx3*c)-(90.*a6/b)*(6.*c*x4+4.*x3)
     1 -132.*a4*b*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 +140.*a2*b3*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(3)= 60.*b4*c2*cx2 -112.*a4*(x3*c +4.*c*x3 +3.*x2)
     1 -80.*a2*b2*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1                                                     -90.*a6*x4/b2
     1 -33.*a4*(2.*c*(5.*c*x4+4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +70.*a2*b2*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(4)=-76.*a4*b2*(2.*c*(4.*c*x3+3.*x2)
     1                                       +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -240.*a2*b4*(c*(x*3.*cx2*c +cx3) +cx3*c) -120.*a6*(6.*c*x4+4.*x3)
     1 -192.*a4*b2*(c*(x3*2.*cx*c+3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 +200.*a2*b4*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(4)= 120.*b5*c2*cx3 -152.*a4*b*(5.*c*x3 +3.*x2)
     1 -120.*a2*b3*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1                                                     -120.*a6*x4/b
     1  -48.*a4*b*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +100.*a2*b3*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
      wxxx(5)=-96.*a4*b3*(2.*c*(4.*c*x3+3.*x2)+3.*(x2*2.*cx*c+2.*x*cx2))
     1 -320.*a2*b5*(c*(x*3.*cx2*c+cx3) +cx3*c)-150.*a6*b*(6.*c*x4+4.*x3)
     1 -252.*a4*b3*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 +250.*a2*b5*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(5)=210.*b6*c2*cx4 -192.*a4*b2*(5.*c*x3 +3.*x2)
     1 -160.*a2*b4*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -150.*a6*x4
     1  -63.*a4*b2*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +125.*a2*b4*(4.*c*(x2*3.*cx2*c+2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(6)= -4.*b3*c2 +6.*b3*c2*cx -(20.*a4/b)*(5.*c*x3 +3.*x2)
     1   -9.*a2*b*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -(10.*a4/b)*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +6.*a2*b*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4)) 
c
       wxxy(6)= -8.*b2*c +6.*b2*c*(cx21 +cx) -20.*a4*x3/b2
     1  -9.*a2*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -(20.*a4/b2)*(6.*c*x4 +4.*x3)
     1 +24.*a2*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
c
       wxxx(7)= -6.*b4*c2 +12.*b4*c2*cx2 -40.*a4*(5.*c*x3 +3.*x2)
     1 -24.*a2*b2*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -25.*a4*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +60.*a2*b2*(c*(x2*3.*cx2*c +2.*x*cx3) +0.5*(x*4.*cx3*c +cx4))
c
       wxxy(7)= -12.*b3*c +12.*b3*(c*(x*2.*cx*c+cx2)+cx2*c)-40.*a4*x3/b
     1 -24.*a2*b*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -(50.*a4/b)*(6.*c*x4 +4.*x3) +60.*a2*b*(c*(x3*2.*cx*c+3.*x2*cx2)
     1                                  +x2*3.*cx2*c +2.*x*cx3)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(8)= -8.*b5*c2 +20.*b5*cx3*c -60.*a4*b*(5.*c*x3 +3.*x2)
     1 -42.*a2*b3*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -40.*a4*b*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +24.*a2*b3*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxy(8)=-16.*b4*c +20.*b4*(c*(x*3.*cx2*c +cx3) +cx3*c) -60.*a4*x3
     1 -42.*a2*b2*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -80.*a4*(6.*c*x4 +4.*x3) +96.*a2*b2*(c*(x3*2.*cx*c +3.*x2*cx2)
     1                                       +x2*3.*cx2*c+2.*x*cx3)
c
       wxxx(9)= -10.*b6*c2 +30.*b6*c2*cx4 -80.*a4*b2*(5.*c*x3 +3.*x2)
     1 -60.*a2*b4*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -55.*a4*b2*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2*cx*c +3.*x2*cx2))
     1 +30.*a2*b4*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxy(9)=-20.*b5*c +30.*b5*(c*(x*4.*cx3*c+cx4)+cx4*c)-80.*a4*b*x3
     1  -60.*a2*b3*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1                                       -110.*a4*b*(6.*c*x4+4.*x3)
     1 +120.*a2*b3*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(10)= 4.*b*c -(16.*a2/b)*(2.*c*(4.*c*x3 +3.*x2)
     1                                      +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -32.*b*(c*(x*3.*cx2*c+cx3) +cx3*c) -(30.*a4/b3)*(6.*c*x4 +4.*x3)
     1 -(24.*a2/b)*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 +30.*b*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(10)= 2. -(32.*a2/b2)*(5.*c*x3+3.*x2) 
     1          -16.*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -30.*a4*x4/b4 
     1 -(6.*a2/b2)*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +15.*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxx(11)= 4.*b2*c*(cx21 +cx) -4.*a2*(2.*c*(4.*c*x3 +3.*x2)
     1                                       +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -24.*b2*(c*(x*3.*cx2*c +cx3) +cx3*c)
     1 -24.*a2*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 +20.*b2*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(11)= 4.*b*(3.*c*x +1.) -(8.*a2/b)*(5.*c*x3 +3.*x2)
     1 -12.*b*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -(6.*a2/b)*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +10.*b*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(12)= 6.*b3*(c*(x*2.*cx*c +cx2) +cx2*c)
     1 -16.*b3*(c*(x*3.*cx2*c +cx3) +cx3*c)
     1 -12.*a2*b*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 +10.*b3*(c*(x*4.*cx3*c +cx4) +cx4*c)
c
       wxxy(12)= 6.*b2*(c*(3.*c*x2 +2.*x) +x*2.*cx*c +cx2)
     1 -8.*b2*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -3.*a2*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +5.*b2*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxx(13)= 6.*b*(3.*c*x+1.) -(5.*a2/b)*(20.*c*x3 + 12.*x2)
     1 -9.*b*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -(10.*a2/b)*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +6.*b*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxy(13)=6.*x -20.*a2*x3/b2 -9.*(2.*c*(4.*c*x3+3.*x2)
     1                              +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -(20.*a2/b2)*(6.*c*x4 +4.*x3)
     1 +24.*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(14)= 6.*b2*(c*(3.*c*x2 +2.*x) +x*2.*cx*c +cx2)
     1 -6.*b2*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 -5.*a2*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 +3.*b2*(4.*c*(x2*3.*cx2*c +2.*x*cx3) +2.*(x*4.*cx3*c +cx4))
c
       wxxy(14)= 2.*b*(12.*c*x2 +6.*x)
     1           -6.*b*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 -(10.*a2/b)*(6.*c*x4 +4.*x3)
     1         +12.*b*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
c
       wxxx(15)= 12.*b*(4.*c*x2 +2.*x)
     1 -8.*b*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +12.*b*(c*(x3*2.*cx*c +3.*x2*cx2) +x2*3.*cx2*c +2.*x*cx3)
     1 -(30.*a2/b)*(6.*c*x4 +4.*x3)
c
       wxxy(15)= 12.*x2 -16.*(5.*c*x3 +3.*x2)
     1 +3.*(2.*c*(5.*c*x4 +4.*x3) +4.*(x3*2.*cx*c +3.*x2*cx2))
     1 -30.*a2*x4/b2
c
      endif
c
      if (ndof.eq.10) then
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(1) = (4.*a4/b)*(4.*c*x3 +3.*x2) -6.*a2*b*(x*3.*cx2*c +cx3)
     1 -(8.*a4/b)*(x3*2.*cx*c +3.*x2*cx2) +4.*a2*b*(x*4.*cx3*c +cx4)
c
       wxy(1) = -4.*b2*c +6.*b2*cx*c -4.*a4*x3/b2 
     1                                     -9.*a2*(x2*2.*cx*c +2.*x*cx2)
     1 -(4.*a4/b2)*(5.*c*x4 +4.*x3) +8.*a2*(x2*3.*cx2*c +2.*x*cx3)
c
       wxx(2) = -8.*a4*(4.*c*x3 + 3.*x2) -16.*a2*b2*(x*3.*cx2*c +cx3)
     1 -20.*a4*(x3*2.*cx*c +3.*x2*cx2) +10.*a2*b2*(x*4.*cx3*c +cx4)
c
       wxy(2) = -6.*b3*c +12.*b3*cx2*c -8.*a4*x3/b
     1                                  -24.*a2*b*(x2*2.*cx*c +2.*x*cx2)
     1 -(10.*a4/b)*(5.*c*x4 +4.*x3) +20.*a2*b*(x2*3.*cx2*c +2.*x*cx3)
c
       wxx(3) = -12.*a4*b*(4.*c*x3 +3.*x2) -28.*a2*b3*(x*3.*cx2*c +cx3)
     1 -32.*a4*b*(x3*2.*cx*c +3.*x2*cx2) +16.*a2*b3*(x*4.*cx3*c +cx4)
c
       wxy(3) = -8.*b4*c -12.*a4*x3 -42.*a2*b2*(x2*2.*cx*c +2.*x*cx2)
     1          +20.*b4*cx3*c
     1  -16.*a4*(5.*c*x4 +4.*x3) +32.*a2*b2*(x2*3.*cx2*c +2.*x*cx3)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(4) = -16.*a4*b2*(4.*c*x3 + 3.*x2) -40.*a2*b4*(x*3.*cx2*c+cx3)
     1 -44.*a4*b2*(x3*2.*cx*c +3.*x2*cx2) +20.*a2*b4*(x*4.*cx3*c +cx4)
c
       wxy(4) = -10.*b5*c -16.*a4*b*x3 -60.*a2*b3*(x2*2.*cx*c +2.*x*cx2)
     1          -22.*a4*b*(5.*c*x4 + 4.*x3)
     1          +40.*a2*b3*(x2*3.*cx2*c +2.*x*cx3) +30.*b5*cx4*c
c
       wxx(5) = b3*c -4.*b3*cx*c +3.*b3*cx2*c 
     1                                   -6.*a2*b*(x2*2.*cx*c +2.*x*cx2)
     1  -(5.*a4/b)*(5.*c*x4 +4.*x3) +3.*a2*b*(x2*3.*cx2*c +2.*x*cx3)
c
       wxy(5) = b2 -4.*b2*cx21 +3.*b2*(x*2.*cx*c +cx2)
     1                                            -4.*a2*(4.*c*x3+3.*x2)
     1  -5.*a4*x4/b2 +3.*a2*(x3*2.*cx*c +3.*x2*cx2)
c
       wxx(6) = 2.*b4*c -6.*b4*cx*c -15.*a2*b2*(x2*2.*cx*c+2.*x*cx2)
     1                                            +4.*b4*cx3*c
     1 -10.*a4*(5.*c*x4 +4.*x3) +6.*a2*b2*(x2*3.*cx2*c +2.*x*cx3)
c
       wxy(6) = 2.*b3 -6.*b3*cx21 -10.*a2*b*(4.*c*x3 +3.*x2)
     1                                          +4.*b3*(x*3.*cx2*c +cx3)
     1  -10.*a4*x4/b +6.*a2*b*(x3*2.*cx*c +3.*x2*cx2)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxx(7) = 3.*b5*c -8.*b5*cx*c -24.*a2*b3*(x2*2.*cx*c +2.*x*cx2)
     1                                        -15.*a4*b*(5.*c*x4 +4.*x3)
     1 +5.*b5*cx4*c +6.*a2*b3*(x2*3.*cx2*c +2.*x*cx3)
c
       wxy(7) = 3.*b4 -8.*b4*cx21 -16.*a2*b2*(4.*c*x3 +3.*x2) -15.*a4*x4
     1 +6.*a2*b2*(x3*2.*cx*c +3.*x2*cx2) +5.*b4*(x*4.*cx3*c +cx4)
c
       wxx(8) =2.*b*cx21-(4.*a2/b)*(4.*c*x3+3.*x2)-6.*b*(x*3.*cx2*c+cx3)
     1 -(8.*a2/b)*(x3*2.*cx*c +3.*x2*cx2) +4.*b*(x*4.*cx3*c +cx4)
c
       wxy(8) =2.*x -4.*a2*x3/b2 -9.*(x2*2.*cx*c +2.*x*cx2)
     1 -(4.*a2/b2)*(5.*c*x4 +4.*x3) +8.*(x2*3.*cx2*c +2.*x*cx3)
c
       wxx(9) = 2.*b2*(x*2.*cx*c +cx2) -4.*b2*(x*3.*cx2*c +cx3)
     1 -4.*a2*(x3*2.*cx*c +3.*x2*cx2) +2.*b2*(x*4.*cx3*c +cx4)
c
       wxy(9) = 2.*b*(3.*c*x2 +2.*x) -6.*b*(x2*2.*cx*c +2.*x*cx2)
     1 -(2.*a2/b)*(5.*c*x4 +4.*x3) +4.*b*(x2*3.*cx2*c +2.*x*cx3)
c
       wxx(10)= 3.*b*(3.*c*x2 +2.*x) -6.*b*(x2*2.*cx*c +2.*x*cx2)
     1 -(5.*a2/b)*(5.*c*x4 +4.*x3) +3.*b*(x2*3.*cx2*c +2.*x*cx3)
c
       wxy(10)= 3.*x2 -4.*(4.*c*x3 +3.*x2) -5.*a2*x4/b2
     1  +3.*(x3*2.*cx*c +3.*x2*cx2)
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(1)=(12.*a4/b)*(4.*c*x2 +2.*x)-18.*a2*b*c*(x*2.*cx*c +2.*cx2)
     1 -(8.*a4/b)*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +16.*a2*b*c*(x*3.*cx2*c +2.*cx3)
c
       wxxy(1)= 6.*b2*c2 -12.*a4*x2/b2
     1                      -18.*a2*(c*(3.*c*x2 +2.*x) +x*2.*cx*c +cx2)
     1 -(16.*a4/b2)*(5.*c*x3+3.*x2)
     1 -8.*a2*(3.*c*(x2*2.*cx*c+2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
       wxxx(2)= -24.*a4*(4.*c*x2+2.*x) -48.*a2*b2*c*(x*2.*cx*c +2.*cx2)
     1 -20.*a4*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +40.*a2*b2*c*(x*3.*cx2*c +2.*cx3)
c
       wxxy(2)= 24.*b3*c2*cx -24.*a4*x2/b
     1                     -48.*a2*b*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2)
     1 -(40.*a4/b)*(5.*c*x3 +3.*x2)
     1  +20.*a2*b*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(3)= -36.*a4*b*(4.*c*x2+2.*x)
     1                      -84.*a2*b3*c*(x*2.*cx*c +2.*cx2)
     1 -32.*a4*b*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +64.*a2*b3*c*(x*3.*cx2*c + 2.*cx3)
c
       wxxy(3)= -36.*a4*x2 -84.*a2*b2*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2)
     1 +60.*b4*c2*cx2 -64.*a4*(5.*c*x3 + 3.*x2)
     1 +32.*a2*b2*(3.*c*(x2*2.*cx*c+2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
       wxxx(4)= -48.*a4*b2*(4.*c*x2+2.*x)
     1                                -120.*a2*b4*c*(x*2.*cx*c +2.*cx2)
     1 -44.*a4*b2*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +80.*a2*b4*c*(x*3.*cx2*c +2.*cx3)
c
       wxxy(4)= -48.*a4*b*x2 
     1                   -120.*a2*b3*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2)
     1 -88.*a4*b*(5.*c*x3 +3.*x2)
     1 +40.*a2*b3*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
     1 +120.*b5*c2*cx3
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(5)= -4.*b3*c2 +6.*b3*c2*cx
     1 -12.*a2*b*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2) 
     1                                        -20.*a4*(5.*c*x3+3.*x2)/b
     1 +3.*a2*b*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
       wxxy(5)= -8.*b2*c +6.*b2*c*(cx21 +cx) -12.*a2*(4.*c*x2+2.*x)
     1 -20.*a4*x3/b2 
     1  +3.*a2*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
c
       wxxx(6)= -6.*b4*c2 -30.*a2*b2*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2)
     1 +12.*b4*c2*cx2 -40.*a4*(5.*c*x3 +3.*x2)
     1  +6.*a2*b2*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
       wxxy(6)= -12.*b3*c -30.*a2*b*(4.*c*x2 +2.*x)
     1 +12.*b3*c*(x*2.*cx*c +2.*cx2) -40.*a4*x3/b
     1 +6.*a2*b*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(7)= -8.*b5*c2 -48.*a2*b3*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2)
     1  -60.*a4*b*(5.*c*x3 +3.*x2) +20.*b5*c2*cx3
     1 +6.*a2*b3*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
       wxxy(7)= -16.*b4*c -48.*a2*b2*(4.*c*x2 +2.*x) -60.*a4*x3
     1 +6.*a2*b2*(2.*c*(4.*c*x3+3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +20.*b4*c*(x*3.*cx2*c +2.*cx3)
c
       wxxx(8)= 4.*b*c -(12.*a2/b)*(4.*c*x2+2.*x)
     1                                     -18.*b*c*(x*2.*cx*c +2.*cx2)
     1 -(8.*a2/b)*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
     1 +16.*b*c*(x*3.*cx2*c +2.*cx3)
c
       wxxy(8)=2. -12.*a2*x2/b2 -18.*(c*(3.*c*x2+2.*x) +x*2.*cx*c +cx2)
     1 -(16.*a2/b2)*(5.*c*x3 +3.*x2)
     1          +8.*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
C23456789012345678901234567890123456789012345678901234567890123456789012
       wxxx(9)= 4.*b2*c*(cx21 +cx) -12.*b2*c*(x*2.*cx*c +2.*cx2)
     1 -4.*a2*(2.*c*(4.*c*x3 +3.*x2) +3.*(x*2.*cx*c +cx2))
     1 +8.*b2*c*(x*3.*cx2*c + 2.*cx3)
c
       wxxy(9)=4.*b*(3.*c*x+1.)-12.*b*(c*(3.*c*x2+2.*x)+x*2.*cx*c +cx2)
     1 -(8.*a2/b)*(5.*c*x3 +3.*x2) +4.*b*(3.*c*(x2*2.*cx*c +2.*x*cx2)
     1                                  +2.*(x*3*cx2*c +cx3))
c 
       wxxx(10)=6.*b*(3.*c*x+1.)-12.*b*(c*(3.*c*x2+2.*x)+x*2.*cx*c+cx2)
     1 -(20.*a2/b)*(5.*c*x3 +3.*x2)
     1 +3.*b*(3.*c*(x2*2.*cx*c +2.*x*cx2) +2.*(x*3.*cx2*c +cx3))
c
       wxxy(10)= 6.*x -12.*(4.*c*x2 +2.*x) -20.*a2*x3/b2
     1 +3.*(2.*c*(4.*c*x3 +3.*x2) +3.*(x2*2.*cx*c +2.*x*cx2))
c
      endif
c
      do 10 i=1,ndof
        wsn(i) =       crad1*(fact*crad2*wxx(i)  - srad2*wxy(i))
        wssn(i)= crad1*crad1*(fact*crad2*wxxx(i) - srad2*wxxy(i))
   10 continue
c
      return
      end 
C
C
C
C=DECK      SIDE3
      SUBROUTINE SIDE3(ndof,a,b,x,wsn,wssn)
c
c purpose is to get derivatives wsn and wssn along side 3 of the
c isosceles triangle.
c wsn and wssn are needed for evaluation of the contribution
c of edge blade stiffeners to the stiffness and load-geometric
c matrices corresponding to local buckling of the skin between
c isogrid members including rolling of the blade stiffeners along
c edges.
c INPUT:
c b = height of isosceles triangle
c a = 2b/s, where s = length of base of isosceles triangle
c x = distance along base measured from midbase.
c
c OUTPUT:
c wsn, wssn at the coordinate, x.
c
      implicit double precision (a-h,o-z)
      dimension wsn(ndof),wssn(ndof)
c
      x2 = x**2
      x3 = x**3
      x4 = x**4
      x5 = x**5
      a2 = a**2
      a4 = a**4
      a6 = a**6
      b2 = b**2
      b3 = b**3
      b4 = b**4
c
      if (ndof.eq.15) then
         wsn(1) =  6.*a6*x5/b4
         wsn(2) = 12.*a6*x5/b3
         wsn(3) = 18.*a6*x5/b2
         wsn(4) = 24.*a6*x5/b
         wsn(5) = 30.*a6*x5
         wsn(6) = -b2 +5.*a4*x4/b2
         wsn(7) = -2.*b3 +10.*a4*x4/b
         wsn(8) = -3.*b4 +15.*a4*x4
         wsn(9) = -4.*b5 +20.*a4*x4*b
         wsn(10)= -2.*x  + 6.*a4*x5/b4
         wsn(11)= 0.0
         wsn(12)= 0.0
         wsn(13)= -3.*x2 + 5.*a2*x4/b2
         wsn(14)= 0.0
         wsn(15)= -4.*x3 + 6.*a2*x5/b2
c
        wssn(1) =  30.*a6*x4/b4
        wssn(2) =  60.*a6*x4/b3
        wssn(3) =  90.*a6*x4/b2
        wssn(4) = 120.*a6*x4/b
        wssn(5) = 150.*a6*x4
        wssn(6) =  20.*a4*x3/b2
        wssn(7) =  40.*a4*x3/b
        wssn(8) =  60.*a4*x3
        wssn(9) =  80.*a4*x3*b
        wssn(10)=  -2.    + 30.*a4*x4/b4
        wssn(11)= 0.0
        wssn(12)= 0.0
        wssn(13)=  -6.*x  + 20.*a2*x3/b2
        wssn(14)= 0.0
        wssn(15)= -12.*x2 + 30.*a2*x4/b2
      endif
c
      if (ndof.eq.10) then
         wsn(1) =  4.*a4*x3/b2
         wsn(2) =  8.*a4*x3/b
         wsn(3) = 12.*a4*x3
         wsn(4) = 16.*a4*x3*b
         wsn(5) = -b2    + 5.*a4*x4/b2
         wsn(6) = -2.*b3 +10.*a4*x4/b
         wsn(7) = -3.*b4 +15.*a4*x4
         wsn(8) = -2.*x  + 4.*a2*x3/b2
         wsn(9) = 0.0
         wsn(10)= -3.*x2 + 5.*a2*x4/b2
c
        wssn(1) = 12.*a4*x2/b2
        wssn(2) = 24.*a4*x2/b
        wssn(3) = 36.*a4*x2
        wssn(4) = 48.*a4*x2*b
        wssn(5) = 20.*a4*x3/b2
        wssn(6) = 40.*a4*x3/b
        wssn(7) = 60.*a4*x3
        wssn(8) = -2.   + 12.*a2*x2/b2
        wssn(9) = 0.0
        wssn(10)= -6.*x + 20.*a2*x3/b2
      endif
c
      return
      end 
C
C
C
C=DECK      STIFAB
      SUBROUTINE STIFAB(ndof,nodex,side,theta,cstf44,cstf66,hstiff,
     1                  wbeig,wbtot,astiff,bstiff)
c
c Purpose is to get contribution of isogrid stiffeners to the
c stiffness matrix, astiff, and load-geometric matrix, bstiff.
c
c ndof = number of degrees of freedom
c nodex= number of x-integration points
c side = length of one of the two equal legs of the isosceles triangle
c theta= angle between two equal legs of the isosceles triangle
c cstf44 = axial bending stiffness of an isogrid member
c cstf66 = twisting stiffness of an isogrid member
c hstiff = height of an isogrid member (isogrid member must have a
c          rectangular cross section.)
c wbeig(i,j): Load set A axial resultant in jth isogrid member (j = 1,2,3)
c             i = 1 means axial resultant at root of isogrid member;
c             i = 2 means axial resultant at tip  of isogrid member
c wbtot(i,j): Load set B axial resultant in jth isogrid member
c astiff = stiffness matrix for edge stiffeners only (no skin)
c bstiff = load-geometric matrix for edge stiffeners only (no skin)
c
      implicit double precision (a-h,o-z)
C23456789012345678901234567890123456789012345678901234567890123456789012
c
      dimension wbeig(2,3),wbtot(2,3)
      dimension astiff(ndof,ndof),bstiff(ndof,ndof)
      dimension wsn1(15),wsn2(15),wsn3(15)
      dimension wssn1(15),wssn2(15),wssn3(15)
      dimension floada(3),floadb(3)
c
      do 10 i = 1,ndof
      do 10 j = 1,ndof
         astiff(i,j) = 0.
         bstiff(i,j) = 0.
   10 continue
c
      h3 = hstiff**3
c
      do 20 i = 1,3
c
         floada(i) =
     1    (wbeig(1,i)/3. +(wbeig(2,i) - wbeig(1,i))/4.)*h3
c
         floadb(i) =
     1    (wbtot(1,i)/3. +(wbtot(2,i) - wbtot(1,i))/4.)*h3
c
   20 continue
      pi = 3.1415927
      angle = 0.5*theta*pi/180.
      sa = sin(angle)
      ca = cos(angle)
      alpha = pi*(1.-theta/180.)/2.
      c60 = 1./cos(alpha)
      b = side*ca 
      base = 2.*side*sa
      a = 2.*b/base
      c = 2./base
      h33 = h3/3.
      h   = hstiff
      flnx = nodex 
      dx= 2.*side*sa/(flnx-1.)
      dx3 = dx/3.
      x = -side*sa - dx
c
      do 500 ix = 1,nodex
c
c  Simpson's rule coefficients, fact:
         fact = 1.
         if (ix.ne.1.and.ix.ne.nodex) then
            fact = 2.
            if (mod(ix,2).eq.0) fact = 4.
         endif
c
         x = x + dx
c
C23456789012345678901234567890123456789012345678901234567890123456789012
         if (x.le.0.) call side12(ndof,a,b, c,theta, 1.0,x,wsn1,wssn1)
         if (x.ge.0.) call side12(ndof,a,b,-c,theta,-1.0,x,wsn2,wssn2) 
         call side3(ndof,a,b,x,wsn3,wssn3)
c
         do 300 i = 1,ndof
         do 200 j = 1,ndof
c
            astiff(i,j) = astiff(i,j) + 0.5*dx3*fact*(c60*
     1       (cstf44*h33*(wssn1(i)*wssn1(j) +wssn2(i)*wssn2(j))
     1        +(4.*cstf66*h+floadb(1))*wsn1(i)*wsn1(j)
     1        +(4.*cstf66*h+floadb(2))*wsn2(i)*wsn2(j))
     1       +cstf44*h33*wssn3(i)*wssn3(j)
     1       +(4.*cstf66*h+floadb(3))*wsn3(i)*wsn3(j))
c
            bstiff(i,j) = bstiff(i,j)
     1               + 0.5*dx3*fact*(c60*(floada(1)*wsn1(i)*wsn1(j)
     1                                  +floada(2)*wsn2(i)*wsn2(j))
     1                                  +floada(3)*wsn3(i)*wsn3(j))
c
c           NOTE: the factor "0.5" in the strings, "0.5*dx3*fact*,
c                 is there because each isogrid stiffener is shared
c                 by two adajent triagular skin domains.
c
c
  200    continue
  300    continue
c
  500 continue
c
      return
      end
