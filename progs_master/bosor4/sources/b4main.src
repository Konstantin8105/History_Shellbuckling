C=DECK      B4MAINLIB
C
C  THIS IS THE B4MAIN LIBRARY (SOURCE FILE)
C
C
C=DECK      B4MAIN
C
C     THIS IS THE MAIN PROGRAM OF THE BOSOR4 MAIN PROCESSOR (WITH OUTPT)
C
      PROGRAM B4MAIN
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
#if hp700
$hp9000_800 intrinsics
#endif
      COMMON/BWORK/BBB(10000),BMODE(9000),TMODE(9000),SMODE(9000)
C BEG DEC 1990
#if cray
      DIMENSION BMAT(40000),CMAT(40000),DI(6000),DIAG(3000)
#else
      DIMENSION BMAT(20000),CMAT(20000),DI(3000),DIAG(3000)
#endif
C END DEC 1990
      DOUBLE PRECISION BMAT,CMAT,DI
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE    
      COMMON/STRHD/NSHEAD     
      COMMON/COUNTR/NKOUNT    
      COMMON/LOADHM/NLPOS(95),LAB(95),IDAB(95),ILPOS(12,95),PALL(6000)
      COMMON/FORFIX/IOMGAB,VFIX(98),SHFIX(98),HFIX(98),FMFIX(98)
      COMMON/DRGTEM/TNRFIX(98),TMRFIX(98),TMXFIX(98)
      COMMON/TWORHS/ITWO,IDMOD2(200)
      COMMON/NLINS/NSTART,NFIN
      COMMON/DSPACE/IDS 
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT    
      COMMON/IIFIFE/IIIF
      COMMON/RGFCE/RHF(98)    
      COMMON/PSTSS/IPSTS(95)  
      COMMON/SMOAD/IMOAD(100),IPMODE(95),IPSMD(95)     
      COMMON/LRANGE/FSTART,FMAX,DF  
      COMMON/DETER/DET,NEX    
      COMMON/TESTIT/NTEST     
      COMMON/ITERAT/IMODE     
      COMMON/TOTPTS/M3  
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR    
      COMMON/FORCES/V(98),HF(98),FM(98)   
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G   
      COMMON/IDENT/IPRW(20)   
      COMMON/HYDRO/PRAD,RV    
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)    
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98) 
      COMMON/INSTAB/INDIC     
      COMMON/MAXSTP/STEPM,STEPMI,RHOM     
      COMMON/ERROR/ERR  
      COMMON/NFAC/NFACT,NDIC  
      COMMON/ITERS/ITER 
      COMMON/ALFAT/ALPHAT     
      COMMON/POSDEF/ IDIAG    
      COMMON/EIGNO/NVEC,EGV(50),AXB 
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
      COMMON/SIG/NFLAGI 
      COMMON/OUTP/ NPRT 
      COMMON/BLK/IBLK,NGBK(20),NFK(20)    
      COMMON/BCK/IDRW(20,5)   
      COMMON/SFLAG/ MONOQ     
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)   
      COMMON/INTRG/NSTATN(95),IRING(95,20)
      COMMON/IDZREF/IZREF(95) 
      COMMON/ALLRNG/NTOT,IPRE 
      COMMON/TEMTUR/TEMP,DTEMP
c Modified 1/14/90
      COMMON/SIGNALL/ISIG
c end 1/14/90 modification
      COMMON/ORTA/IFLGG,KTM,KROOTS  
      COMMON/INTRVL/ INTVAL(95),IOUT,NDIST,NCIRC,NTHETA     
      COMMON/XID/IDX    
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB 
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(98),IROWCB(98),IIWP,IIWB   
      COMMON/NCONDS/NCOND     
      COMMON/IHIGH/ITOOHI     
      COMMON/LSTEPS/ISTEP
C BEG JULY 1989
      COMMON/PRERT/PREROT,SIGNLL,IPREBK   
C END JULY 1989
      COMMON/NOHARM/NHARM     
      COMMON/IFRHX/IFB,RHFIX(98),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX   
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      COMMON/VCTRSB/NVECRL(50)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RESTRT/IREST
      COMMON/IDHIGH/IDMAX
      COMMON/RHARM/RVAR(98),RFIX(98)
      COMMON/COLAPS/IDONE
      COMMON/NVVIB/NVIB
      common/caseblock/case
      character*28 case
      character*32 fname
      logical exists
#if hp700
      call getarg(2, case)
#else
      call getarg(1, case)
#endif
C     
C     IBM SUBROUTINE ERRSET IS CALLED TO SUPPRESS THE UNDERFLOW ERROR   
C     MESSAGE NO.208.   
C     
C      CALL ERRSET(208,0,-1,0,0,0)  
C     
      CALL MAIN1  
      DIV = 1000.
C
      IFILE = 9
c open/close statments added 6/91
      fname = case(1:index(case, ' ')-1)//'.BLK'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='OLD')
#if rs6k
        rewind(IFILE)
#endif
      else
        OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='NEW')
      endif
      CALL GETCM1(IFILE)
      CALL GETCM2(IFILE)
      CLOSE(IFILE)
c end 6/91 changes
C
C BEG JAN 2012

c     CALL GASP(DUM1,DUM2,-1,DUM3)

c     open the EXISTING database

      CALL GASP(DUM1,DUM2,0,DUM3)
C
C END JAN 2012
C     
C     INITIALIZE CLOCK. 
C     CALL SR100T(1)    
C     
      IIIF=21     
      NEDPLT=-1   
      NVECTL = 0
C     
10    CONTINUE    
C
      NVECS = NVEC
70    CONTINUE    
      ITWO = 1
      IF (IREST.EQ.2) GO TO 78
      IF (INDIC.LT.3) GO TO 78
      DO 75 I = 1,NSEG
      IF (ILPOS(4,I).NE.0) ITWO = 2
      IF (ILPOS(5,I).NE.0) ITWO = 2
      IF (ILPOS(6,I).NE.0) ITWO = 2
      IF (ILPOS(10,I).NE.0) ITWO = 2
      IF (ILPOS(11,I).NE.0) ITWO = 2
      IF (ILPOS(12,I).NE.0) ITWO = 2
   75 CONTINUE
   78 CONTINUE
C
      K = INDIC + 3     
C     
C     SWITCHING TO VARIOUS BRANCHES DEPENDING ON TYPE OF ANALYSIS TO    
C     BE PERFORMED.     
C
      GO TO (80,120,280,290,330,340,380),K
80    CONTINUE    
C     DETERMINANT PLOT. 
      DET = 1.0   
      NEX = 0     
      N = N0B     
      IF (DF.EQ.0.) CALL ERREX 
      NSTEPS = ABS((FMAX-FSTART)/DF) + 1.0
      DO 110 I=1,NSTEPS 
C     NONLINEAR PREBUCKLING ANALYSIS
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      IFILE = 9
c open/close statments added 6/91
      fname = case(1:index(case, ' ')-1)//'.BLK'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='OLD')
#if rs6k
        rewind(IFILE)
#endif
      else
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='NEW')
      endif
      CALL STOCM1(IFILE)
      CALL STOCM2(IFILE)
      CLOSE(IFILE)
c end 6/91 changes
C     STABILITY EQUATIONS FORMULATED
C     CALL OVERLAY(5HBOSOR,3,0)     
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG) 
      DS = DET    
      NEXS = NEX  
C     STABILITY DETERMINANT CALCULATED    
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
C     OUTPUT PRINTED    
      ISWTCH = 2  
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
      IF (KTM.LE.(KROOTS+1)) GO TO 90     
C
C     CHANGE LOAD STEPS DEPENDING ON PREVIOUS CALCULATIONS  
      CALL CHANGE(-1.0,NTOT)  
      GO TO 100   
90    IF (I.EQ.1) GO TO 110   
      IF ((DS*DET).GT.0.) GO TO 110 
      NDEXP = NEX - NEXS
      RATIO = ABS(DET/DS)*10.**NDEXP
      RAT = RATIO/(1.+RATIO)  
      CALL CHANGE(-RAT,NTOT)  
100   CONTINUE    
      WRITE(6,105) N,NMINB,NMAXB,INCRB
  105 FORMAT(/' BIFURCATION BUCKLING EIGENVALUE(S) DETECTED BETWEEN'/
     1' SECOND-TO-LAST AND LAST LOAD STEPS FOR N =',I7,'   CIRCUMFER-'/
     1' ENTIAL WAVES.  ANALYSIS TYPE (INDIC) IS NOW BEING CHANGED'/
     1' FROM INDIC = -2  TO  INDIC = -1  .'//
     1' A SEARCH FOR THE MINIMUM BIFURCATION BUCKLING LOAD WILL NOW'/
     1' BE CONDUCTED IN THE RANGE NMINB =',I7,'   TO NMAXB =',I7/
     1' IN INCREMENTS OF INCRB =',I7,'   CIRCUMFERENTIAL WAVES.'/)
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      CALL CHANGE(-1.,NTOT)   
C     INDIC CHANGED TO -1 BECAUSE WE,VE BRACKETED BUCKLING LOAD BY
C     DETERMINANT 'PLOT'.     
      INDIC = -1  
      K = 2 
      IFLGG = 1   
      GO TO 140   
110   CONTINUE    
      GO TO 400   
120   CONTINUE    
C     NONLINEAR PREBUCKLING WITH SEARCH   
      N = N0B     
130   KNT = 0     
C     PREBUCKLING ANALYSIS WITH 'FIXED' LOADS.  
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
140   IF (NMAXB.EQ.NMINB) ITRACK = 0
      IF (NMAXB.EQ.NMINB) GO TO 240 
C     PREBUCKLING ANALYSIS WITH EIGENVALUE LOADS OR 'VARIABLE' LOADS.   
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      I = 0 
      EGV(1) = 0. 
150   CONTINUE    
      RHOS = EGV(1)     
C     CALCULATION OF STABILITY STIFFNESS MATRIX, LOAD-GEOMETRIC MATRIX  
C     AND LAMBDA**2- MATRIX.  
160   CONTINUE    
C     CALL OVERLAY(5HBOSOR,3,0)     
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG) 
C     SOLUTION OF EIGENVALUE PROBLEM A*X  + LAMBDA*B*S  +  LAMBDA**2*C*X
C     = 0.  
      NVEC = NVECS
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
      IF (IPREBK.EQ.1) GO TO 160    
      IF (ITOOHI.GT.0.AND.ITOOHI.LT.4) GO TO 130
      I = I + 1   
      IF (I-2) 170,190,190    
C     CIRCUMFERENTIAL WAVE NUMBER VARIED TO FIND MINIMUM BUCKLING LOAD  
170   N = N + INCRB     
      IF (N .LE. NMAXB .AND. N .GE. NMINB)  GO TO 150 
      WRITE (6,180)     
180   FORMAT(///48H WAVENUMBER N EXCEEDS RANGE NMINB.LE.N.LE.NMAXB  ///)
      CALL ERREX
190   IF (EGV(1).LT.RHOS) GO TO 170 
      IF (I.GT.2) GO TO 200   
      N = N - 2*INCRB   
      INCRB = - INCRB   
      GO TO 160   
200   N = N - INCRB     
C     CHANGE LOAD STEPS 
210   CALL CHANGE(RHOS-1.,NTOT)     
220   CONTINUE    
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      IF (STEP.NE.0.) STEP = P/DIV  
      IF (DTEMP.NE.0.) DTEMP = TEMP/DIV   
      IF (DOMEGA.NE.0.) DOMEGA = OMEGA/DIV
      STEPM = RHO/DIV   
      STEPMS = STEPM    
      IF (NTOT.EQ.0) GO TO 240
      DO 230 J=1,NTOT   
      IF (STEP1(J).NE.0.) STEP1(J) = V(J)/DIV   
      IF (STEP2(J).NE.0.) STEP2(J) =HF(J)/DIV   
230   IF (STEP3(J).NE.0.) STEP3(J) =FM(J)/DIV   
240   CONTINUE    
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
250   IF (IPREB2.EQ.1.AND.IPREBK.EQ.1) GO TO 400
260   CONTINUE    
C     CALL OVERLAY(5HBOSOR,3,0)     
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG) 
      ITRACK = ITRACK + 1     
      IFLGG = ITRACK - 1
      NVEC = NVECS
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
      IF (ITOOHI.GT.0.AND.ITOOHI.LT.4.AND.IFLGG.EQ.0) GO TO 130   
      IF (ITOOHI.GT.0.AND.ITOOHI.LT.4.AND.IFLGG.GT.0) GO TO 220   
      RHOS = EGV(1)     
      IF (IPREBK.EQ.1) GO TO 250    
      IF (STEPM.NE.STEPMS) GO TO 210
      IF (ABS(RHOS).LT.5.) GO TO 270
      GO TO 210   
C     MINIMUM CRITICAL LOAD DETERMINED.  NOW GET MODE SHAPE.
270   CONTINUE    
C     CALL OVERLAY(5HBOSOR,5,0)     
C     CALL MODE1  
C     PRINT MODE SHAPE AND LOAD     
      ISWTCH = 2  
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
C     PLOT MODE SHAPE   
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
C BEG JULY 1989
      IF (SIGNLL.NE.1.) GO TO 400   
      SIGNLL = 0.0
C END JULY 1989
      IPREBK = 0  
      IPREB2 = 1  
      GO TO 260   
280   CONTINUE    
C     NONLINEAR STRESS ANALYSIS     
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      ISWTCH = 2  
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
      GO TO 400   
290   CONTINUE    
C     BUCKLING WITH NO ITERATIONS   
      IF (IREST.GT.0) GO TO 300
C     PRESTRESS WITH FIXED LOADS    
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
C     PRESTRESS WITH EIGENVALUE OR VARIABLE LOADS     
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
300   IINCR = IABS(INCRB)     
      NVECS = NVEC
      IWAVEB = 0
      DO 320 N=NMINB,NMAXB,IINCR    
C     BUCKLING OR VIBRATION ANALYSIS .  SEVERAL (NVEC) EIGENVALUES
C     FOR EACH CIRCUMFERENTIAL WAVE NO. N ARE CALCULATED.   
C     STABILITY OR VIBRATION EQUATIONS SET UP   
C     
310   CONTINUE    
      NVEC = NVECS
C     CALL OVERLAY(5HBOSOR,3,0)     
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG) 
C     STABILITY OR VIBRATION EQUATIONS SOLVED.  
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
      IF (IPREBK.EQ.1) GO TO 310    
      CALL B4OUTM(BBB) 
      IWAVEB = IWAVEB + 1
      NVECRL(IWAVEB) = NVEC
      NVECTL = NVECTL + NVECRL(IWAVEB)
C     MODE SHAPES PLOTTED WITH SC 4020 PLOTTER  
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
320   CONTINUE    
      GO TO 400   
330   CONTINUE    
C     VIBRATION OF PRESTRESSED SHELLS     
      IF (IREST.GT.0) GO TO 300
C     PRESTRESS ANALYSIS WITH FIXED LOADS 
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      GO TO 300   
340   CONTINUE    
350   CONTINUE    
      IF (IREST.GT.0) GO TO 370
C     LINEAR STRESS ANALYSIS WITH NONSYMMETRIC LOADS  
      NKOUNT = 0  
      N = NSTART - INCR 
360   N = N + INCR
      NKOUNT = NKOUNT + 1     
      IF (NKOUNT.GT.NHARM) GO TO 370
C     EQUILIBRIUM EQUATIONS AND RIGHT-HAND-SIDE VECTOR ARE CALCULATED   
C     EQUILIBRIUM EQUATIONS ARE SOLVED.   
C     CALL OVERLAY(5HBOSOR,3,0)     
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG) 
      GO TO 360   
370   CONTINUE    
C     SHELL DISPLACEMENTS AND STRESS RESULTANTS OR STRESSES ARE   
C     CALCULATED AND SUPERPOSED.    
C     CALL OVERLAY(5HBOSOR,5,0)     
      IF (IREST.EQ.2) WRITE(6,375)
  375 FORMAT(/' RESTART IN MAINPROCESSOR...'/)
      CALL MODE1(1,BBB,BMODE,TMODE,SMODE)  
      IF (ITWO.EQ.2) CALL MODE1(2,BBB,BMODE,TMODE,SMODE)
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
      NVECTL = NHARM + NVIB
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
      IF (INDSIG.EQ.1) GO TO 390    
      GO TO 400   
380   CONTINUE    
C     BUCKLING WITH LINEAR NONSYMMETRIC PREBUCKLING OR PRESTRESS INPUT  
      IF (IPRE.EQ.0) GO TO 390
C     FIRST SOLVE LINEAR NONSYMMETRIC PRESTRESS PROBLEM.    
C     
      K = 6 
      INDIC = 3   
      INDSIG = 1  
      GO TO 350   
390   K = 7 
C     NOW SOLVE LINEAR STABILITY ANALYSIS 
      INDIC = 4   
      NKOUNT = 0  
      INDSIG = 0  
      GO TO 300   
400   CONTINUE    
C
      IFILE = 9
c open/close statments added 6/91
      fname = case(1:index(case, ' ')-1)//'.BLK'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='OLD')
#if rs6k
        rewind(IFILE)
#endif
      else
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='NEW')
      endif
      CALL STOCM1(IFILE)
      CALL STOCM2(IFILE)
      CLOSE(IFILE)
c end 6/91 changes
C
*     CALL GASP(DUM1,DUM2,-2,DUM3)
C
c Added 11/90 to clear IEEE FPE warnings
      call ieeexx
c End 11/90
      END
C=DECK      B4OUTM
      SUBROUTINE B4OUTM(BBB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     BOSOR4 PRINTED OUTPUT PROVIDED BY B4OUTM...
C
      COMMON/OUTP/NPRT
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT
      DIMENSION BBB(*)
C
180   CONTINUE
C     IF (NPRT.GT.1) CALL SR100T(2) 
C     CALL OVERLAY(5HBOSOR,1,6)     
      CALL OUTFIM(BBB) 
200   FORMAT(//27H JUST LEFT SUBROUTINE OUT2   )
      IF (NPRT.GT.1) WRITE (6,200)  
C     IF (NPRT.GT.0) CALL SR100T(2) 
210   CONTINUE    
      RETURN
220   CONTINUE    
      RETURN
      END
C=DECK      OUTFIM
C     OVERLAY(1,6)
      SUBROUTINE OUTFIM(BBB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/ALLRNG/NTOT,IPRE
      DIMENSION BBB(*)
      CALL OUT2M(NVEC,NTOT,EGV,BBB)
      RETURN
      END
C=DECK      OUT2M
      SUBROUTINE OUT2M(NVEC ,NTOT,EGV,BBB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     ESSENTIAL OUTPUT FROM CURRENT CASE IS PRINTED.
      COMMON/INTRVL/ INTVAL(95),IOUT,NDIST,NCIRC,NTHETA
      COMMON/ITERS/ITER
      COMMON/SMOAD/IMOAD(100),IPMODE(95),IPSMD(95)
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/INSTAB/INDIC
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/LSTEPS/ISTEP
      COMMON/SFLAG/MONOQ
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98)
      COMMON/DETER/DET,NEX
      COMMON/GMASS/GM(500)
      COMMON/GMAXX/GMI(50)
      COMMON/IDEIG/IDMODE(500),NVECTL,EIGENW(500)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/IOCHOZ/IOYES(50),IOSEG(95)
      DIMENSION EGV(50),BBB(*)
      DIMENSION VERT(98),HORIZ(98),FMOM(98)
      K = INDIC + 3
      GO TO (10,20,50,90,200,210,220),K
10    CONTINUE
C     INDIC = -2 - - LOAD INCREASED IN STEPS UNTIL DETERMINANT CHANGES
C     SIGN. THEN INDIC CHANGED TO - 1.
C
      CALL OUTLOM(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
      GO TO 230
20    CONTINUE
C     INDIC = - 1 - - STABILITY ANALYSIS WITH NONLINEAR PREBUCKING
C     AND SEARCH FOR MINIMUM BUCKLING LOAD WITH CIRCUMFERENTIAL
C     WAVENUMBER,N.
C
      CALL OUTLOM(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
      GO TO 230
50    CONTINUE
C     AXISYMMETRIC NONLINEAR STRESS ANALYSIS
      GO TO 230
90    CONTINUE
C     INDIC = 1,2, OR 4--BUCKLING AND VIBRATION ANALYSES IN WHICH
C     MANY EIGENVALUES AND EIGENVECTORS FOR EACH N MAY BE OBTAINED.
C
      IF (INDIC.EQ.1.OR.INDIC.EQ.4) WRITE (6,100)
100   FORMAT(//' BUCKLING LOADS FOLLOW'   )             
      IF (INDIC.EQ.2) WRITE (6,110)
110   FORMAT(//' VIBRATION FREQUENCIES (CPS) FOLLOW'     )            
      WRITE (6,120)N
120   FORMAT(35H CIRCUMFERENTIAL WAVE NUMBER, N =     I7)     
      WRITE (6,140)(EGV(I),I=1,NVEC)
140   FORMAT(/16H  EIGENVALUES =  1P7E15.5/)                    
      DO 190 I=1,NVEC
      NVECTP = NVECTL + I
      EIGENW(NVECTP) = EGV(I)
      IF (INDIC.EQ.2) GM(NVECTP) = GMI(I)
      IF (INDIC.NE.1) GO TO 170
      PRESS = P + (EGV(I) - 1.)*STEP
      TEMPT=TEMP+ (EGV(I) - 1.)*DTEMP
      OMEGAX = OMEGA + (EGV(I) -1.)*DOMEGA
      IF (NTOT.EQ.0) GO TO 170
      DO 150 J=1,NTOT
      VERT(J) = V(J) + (EGV(I) - 1.)*STEP1(J)
      HORIZ(J)= HF(J)+ (EGV(I) - 1.)*STEP2(J)
150   FMOM(J) = FM(J)+ (EGV(I) - 1.)*STEP3(J)
      WRITE (6,160)I
160   FORMAT(//45H CRITICAL LOAD COMBINATION FOR EIGENVALUE NO.    I3, 
     19H FOLLOWS     /)                           
      CALL OUTLOM(INDIC,ITER,DET,NEX,PRESS,TEMPT,VERT,HORIZ,FMOM,NTOT,
     1  OMEGAX)
170   CONTINUE
190   CONTINUE
      GO TO 230
200   CONTINUE
C     INDIC = 2  - -  VIBRATION MODES
      GO TO 90
210   CONTINUE
C     INDIC = 3  - - LINEAR NONSYMMETRIC STRESS ANALYSIS
      IF (IOYES(5).EQ.0) CALL VARFIX(BBB)
      GO TO 230
220   CONTINUE
C     INDIC = 4 - - BUCKLING WITH NONSYMMETRIC PRESTRESS OR WITH
C     PRESTRESS ANALYSIS BYPASSED
      GO TO 90
230   CONTINUE
      RETURN
      END
C=DECK      OUTLOM
      SUBROUTINE OUTLOM(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM OUT2, WHOSE TRACE IS READIT, MAIN
C     PRINTS OUT  CRITICAL LOADS, STABILITY DETERMINANT
C
      DIMENSION V(98),HF(98),FM(98)
      WRITE (6,10)INDIC,ITER
10    FORMAT(////25H ANALYSIS TYPE (INDIC) =  I2,66H  NEWTON-RAPHSON ITE
     1RATIONS REQUIRED FOR LAST PRESTRESS SOLUTION =       I2)     
      IF (INDIC.EQ.0.OR.INDIC.EQ.-2) WRITE(6,20) DET,NEX
20    FORMAT(//34H VALUE OF STABILITY DETERMINANT =  1PE12.4,      
     118H TIMES TEN TO THE I4,6H POWER  )                          
      WRITE (6,30)
30    FORMAT(//' PRESSURE, TEMPERATURE RISE, ANGULAR VELOCITY, AND LINE
     1 LOADS FOLLOW...')
      WRITE (6,40)P,TEMP,OMEGA
40    FORMAT(//22H PRESSURE MULTIPLIER = 1PE15.6,26H TEMPERATURE MULTIPL
     1IER =    1PE15.6,'  ANGULAR VELOCITY=',1PE15.6)              
      WRITE (6,50)
50    FORMAT(/18H LINE LOADS FOLLOW  /)                           
      IF (NTOT.EQ.0) RETURN
      DO 70 I=1,NTOT
      WRITE (6,60)I,V(I),HF(I),FM(I)
60    FORMAT(4H I = I3,24H AXIAL LOAD/LENGTH V(I)= 1PE12.4,        
     125H RADIAL LOAD/LENGTH H(I)=  1PE12.4,                       
     221H MOMENT/LENGTH M(I)=  1PE12.4)                            
70    CONTINUE
      RETURN
      END
C=DECK      VARFIX
      SUBROUTINE VARFIX(BBB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  PURPOSE IS TO PRINT OUT PREBUCKLING MEMBRANE STRESS RESULTANTS FROM
C  LOAD SYSTEMS A (EIGENVALUE) AND B (CONSTANT)
C
      DIMENSION BBB(*)
      COMMON/IFRHX/IFB,RHFIX(98),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/RGFCE/RHF(98)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
C
      ITOT = 1
      ITOTL = 0
      CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 240 I=1,NSEG
C
C     MODAL DISPLACEMENTS AND STRESSES FOR EACH SEGMENT FOUND IN LOCAL.
C
      I5I = I5(I)
220   IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
      IF (IEND.LT.10000) GO TO 230
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 220
230   CONTINUE
      CALL NONOUT(THETAS,I,I5I,BBB(33*I5I+IPOS),BBB(36*I5I+IPOS))
C
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
  240 CONTINUE
C
C   NEXT, OUTPUT FOR RING FORCES...
C
      IF (NTOT.EQ.0) RETURN
C
      THETAP = THETAS*180./3.1415927
      WRITE(6,250) THETAP
  250 FORMAT(/' HOOP FORCE IN DISCRETE RINGS AT CIRCUMFERENTIAL STATION 
     1THETA =',1PE12.4//
     1'    RING NO.     RING FORCE FROM    RING FORCE FROM'/
     1'                 LOAD SYSTEM "A"    LOAD SYSTEM "B"'/
     1'                 (EIGENPARAMETER)     (CONSTANT)')
      DO 300 I = 1,NTOT
      WRITE(6,270) I, RHF(I), RHFIX(I)
  270 FORMAT(I10,1P2E20.8)
  300 CONTINUE
      RETURN
      END
C=DECK      NONOUT
      SUBROUTINE NONOUT(THETAS,ISEG,I5,PSTS,PFXD)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  PURPOSE IS TO PRINT OUT PRESTRESS IN SHELL SEGMENT CORRESPONDING TO
C  NONSYMMETRIC LOAD SYSTEM A  AND NONSYMMETRIC LOAD SYSTEM B
C
      DIMENSION PSTS(I5,3),PFXD(I5,3)
C
      THETAP = THETAS*180./3.1415927
      WRITE(6,10) ISEG,THETAP
   10 FORMAT(//' PREBUCKLING STRESS RESULTANTS IN SHELL SEGMENT NO.',I3,
     1' FOR CIRCUMFERENTIAL ANGLE, THETAS =',1PE12.4//
     1'           PREBUCKLING MEMBRANE STATE    PREBUCKLING MEMBRANE STA
     1TE'/
     1'              FOR LOAD SYSTEM "A"          FOR LOAD SYSTEM "B"'/
     1'               (EIGENPARAMETER)                 (CONSTANT)'/
     1' STATION   MERIDIONAL   CIRCUMFERENTIAL  MERIDIONAL   CIRCUMFEREN
     1TIAL'/
     1'   NO.     RESULTANT      RESULTANT      RESULTANT    RESULTANT')
C
      DO 30 I = 1,I5
      WRITE(6,25) I,PSTS(I,1),PSTS(I,2),PFXD(I,1),PFXD(I,2)
   25 FORMAT(I6,1P4E15.6)
   30 CONTINUE
      RETURN
      END
