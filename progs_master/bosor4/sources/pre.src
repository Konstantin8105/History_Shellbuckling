C=DECK      PRELIB
C
C  THIS IS THE PRE  LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      PRE
      SUBROUTINE PRE(BBB,B,TP,DI,PDIAG)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM MAIN, THIS SUBROUTINE BRINGS LINK 2 INTO CORE.
C     AXISYMMETRIC STRESSES AND DISPLACEMENTS ARE CALCULATED FROM A
C     THEORY IN WHICH GEOMETRIC (W-PRIME-SQUARED) NONLINEARITIES ARE
C     INCLUDED. THE ZEROTH ITERATION CORRESPONDS TO LINEAR THEORY AT
C     THE FIRST LOAD STEP ONLY. THE ENERGY METHOD IS USED FOR THE
C     CALCULATION. THE NEWTON-RAPHSON METHOD IS USED FOR SOLUTION OF THE
C     SIMULTANEOUS NONLINEAR ALGEBRAIC EQUATIONS WHICH RESULT FROM
C     MINIMIZATION OF THE ENERGY WITH RESPECT TO MESH POINT DISPLACEMENT
C     THE DEPENDENT VARIABLES ARE U AND W, DISPLACEMENTS TANGENTIAL
C     AND NORMAL TO THE UNDEFORMED SHELL MERIDIAN.
C
      DOUBLE PRECISION F,FTOT,B,TP,DI
#if cray
      DIMENSION BBB(10000),F(4000),ILOC(2000),IW(1000)
      DIMENSION FTOT(4000),B(*),TP(*),PSMODE(1000,9)
#else
      DIMENSION BBB(10000),F(2000),ILOC(2000),IW(1000)
      DIMENSION FTOT(2000),B(*),TP(*),PSMODE(1000,9)
#endif
      COMMON/IFRHX/IFB,RHFIX(98),KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,IFIX
      COMMON/RGFCE/RHF(98)
      COMMON/ALLRNG/NSEG1,IPRE
      COMMON/INSTAB/INDIC
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/IDENT/IPRW(20)
      COMMON/LSEQ/ALODE(95)
      COMMON/BKSIZE/ IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/ERROR/ERR
      COMMON/OUTP/NPRT
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/ITERS/ITER
      COMMON/LSTEPS/ISTEP
      COMMON/DSPACE/IDS
      COMMON/STRATG/ISTRAT,IFACTR
      DIMENSION PDIAG(2000),DI(2000),DS(1000)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(98),IROWCB(98),IIWP,IIWB
      COMMON/NCONDS/NCOND
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RESTRT/IREST
      COMMON/COLAPS/IDONE
      common/caseblock/case
      character*28 case
      character*32 fname
      logical exists
10    FORMAT(1H0)                                                    
20    FORMAT(4H P = ,E15.8, 16H, RHO(STEPM  ) = ,E15.8,
     1       34H, MAXIMUM ALLOWABLE VALUE OF RHO = ,E15.8)                                 
30    FORMAT(9H RING NO. ,I3,21H, AXIAL LOAD/LENGTH = ,E15.8,      
     122H, RADIAL LOAD/LENGTH = ,E15.8, 17H, MOMENT/LENGTH = ,E15.8  /) 
40    FORMAT(/48H ****************************************         ///)
50    FORMAT(///48H ****************************************          /)
60    FORMAT('  NUMBER OF NEWTON-RAPHSON ITERATIONS REQUIRED FOR CONVERG
     1ENCE = ITER =',I3)                                     
70    FORMAT(I5,2E20.8)                                                
      IDONE = 0
      IF (NPRT.GT.1) WRITE (6,80)
80    FORMAT(///61H ENTERING SUBROUTINE PRE, AXISYMMETRIC PRESTRESS CALC
     1CULATOR      //)                                                 
      IF (NPRT.GT.1) CALL SR100T(2)
      CALL GASP(ILOC,M2,3,ILOCP)
      II = I2 + 2*NSEG
      CALL GASP(IW,II,3,IIWP)
      CALL GASP(DS,I2,3,IDS)
      IF (INOTE.EQ.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      ISTEP = 1
      IF (INDIC.EQ.0) ISTEP = 0
90    CONTINUE
      M22 = M2*2
      IF (KNT.NE.0) GO TO 110
C
C     M2 IS THE RANK (DEGREES OF FREEDOM) OF THE SYSTEM.
C
      DO 100 I=1,M2
100   FTOT(I) = 0.0
      IF (IREST.EQ.0) GO TO 120
C
C     PREVIOUS CONVERGED SOLUTION STORED ON DRUM.
C
110   IF (INDIC.NE.0.OR.IREST.NE.0) CALL GASP(FTOT,M22,3,IFTOT)
      IF (ISTRAT.EQ.0) GO TO 125
      IF (IFACTR.EQ.0) GO TO 125
      IF (INDIC .NE.0) GO TO 125
      IF (   KNT.EQ.0) GO TO 125
      FACT  = IFACTR
      IF (ITER.LT.3) CALL CHANGE(FACT ,NSEG1)
125   CONTINUE
120   ITER = 0
C
C     LOAD INCREMENTS APPLIED IN SUBROUTINE LOADS.
C
      CALL LOADS(P,RHO,NSEG1)
C     WHEN LOAD GREATER THAN MAXIMUM ALLOWABLE LOAD (SEE DEFINITION OF
C     INPUT PARAMETER PMAX), CALCULATIONS TERMINATE.
C
      IF (INDIC.EQ.0.AND.ABS(RHO).GT.ABS(RHOM)) GO TO 320
      IF (INDIC.EQ.-2.AND.ABS(RHO).GT.ABS(RHOM)) GO TO 320
      IF (ISTEP.EQ.25) GO TO 390
      IF (INDIC.EQ.0) ISTEP = ISTEP + 1
      ALODE(ISTEP) = RHO
      IF (INDIC.EQ.-1) ALODE(ISTEP) = P
      WRITE (6,50)
      WRITE(6,380) P,TEMP,OMEGA
      IF (NSEG1.EQ.0) GO TO 130
      WRITE (6,30)(I,V(I),HF(I),FM(I),I=1,NSEG1)
      WRITE (6,40)
130   CONTINUE
C
C     PREBUCKLING EQUATIONS SET UP IN APREB. THE COEFFICIENT MATRIX IS
C     REAL AND SYMMETRIC. NOT POSITIVE DEFINITE, HOWEVER, BECAUSE OF
C     LAGRANGE MULTIPLIERS INTRODUCED FOR SATISFACTION OF CONSTRAINT
C     CONDITIONS. THIS IS THE BEGINNING OF THE ITERATION LOOP FOR THE
C     NONLINEAR SOLUTION.
C
      IF (NPRT.GT.1) WRITE (6,140)ITER
140   FORMAT(83H START CALCULATION OF PRESTRESS STIFFNESS MATRIX FOR NEW
     1TON-RAPHSON ITERATION NO.      ,I3)
      IF (NPRT.GT.1) CALL SR100T(2)
C     CALL OVERLAY(5HBOSOR,2,1)
      CALL PRE1(BBB,IW,DS,ILOC,FTOT,F,B)
      IF (NPRT.GT.1) WRITE (6,150)ITER
150   FORMAT(56H PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.
     1,I3,32H.    START FACTORING AND SOLVING            )
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (NPRT.LT.3) GO TO 170
      WRITE (6,160)ITER
160   FORMAT(//21H RIGHT-HAND-SIDE FOR  ,I2,10H ITERATION  //)          
      WRITE (6,200)(F(I),I=1,M2)
C
C     FACTR FACTORS THE COEFFICIENT MATRIX IN BLOCKS.
C
170   CONTINUE
      CALL FACTR(TP,B,IPRW,DET,NEX,IBLKP,NGBKP,NKFP,ILOC,PDIAG,DI,KMAXP)
C
C     SALVE SOVES THE SYSTEM IN BLOCKS.
C
      CALL SOLVE(B,F,IBLKP,IPRW,NGBKP,ILOC,PDIAG,M2,1)
      IF (NPRT.GT.1) WRITE (6,180)ITER
180   FORMAT(62H FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION
     1NO.      ,I3)
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (NPRT.LT.3) GO TO 210
      WRITE (6,190)ITER
190   FORMAT(//27H RESIDUE FOR ITERATION NO.   ,I3 //)                  
      WRITE (6,200)(F(I),I=1,M2)
200   FORMAT(1P10E12.3)                                                
210   NFAIL = 0
      FMAX = 0.0
      DO 220 I=1,M2
220   FTOT(I) = FTOT(I) -F(I)
      I = 0
230   I = I + 1
      DO 240 J=1,NCOND
      IF (I.NE.IROWCP(J)) GO TO 240
      I = I + 3
240   CONTINUE
      IF (I.GT.M2) GO TO 260
C
C     CONVERGENCE TESTED.
C
250   FORMAT(2P10E11.3)
      FFTOT = FTOT(I)
      FMAX = AMAX1(ABS(FFTOT),FMAX)
      IF (ITER.EQ.0) GO TO 230
      IF (ABS(FFTOT)/FMAXS.LT.0.1) GO TO 230
      DELP = ABS(F(I)/FTOT(I))
C     CONVERGENCE CRITERION
      IF (DELP.GT.ERR) NFAIL = 1
      GO TO 230
260   CONTINUE
      IF (ITER.EQ.0) NFAIL = 1
      FMAXS = FMAX
      IF (FMAXS.EQ.0.0) FMAXS = 1.0
      IF (NFAIL.EQ.0) GO TO 280
      ITER = ITER + 1
      IF (ITER.GT.10) GO TO 270
      GO TO 130
270   CONTINUE
      IF (INDIC.GT.0) GO TO 360
      IF (INDIC.EQ.-1) GO TO 360
C
C     IF PREBUCKLING SOLUTION DOES NOT CONVERGE WITHIN TEN ITERATIONS,
C     GO BACK TO LAST LOAD LEVEL, REDUCE STEP SIZE BY A FACTOR OF TEN,
C     AND TRY AGAIN.
C
      CALL UNLOAD(V,HF,FM,NSEG1)
      IF (INDIC.EQ.0) ISTEP = ISTEP - 1
C     WHEN LOAD INCREMENT IS TOO SMALL CALCULATIONS TERMINATE
C     ERR IS SET INTERNALLY AT 0.001, AND MAY BE TOO SMALL IF CALCULA-
C     TIONS ARE PERFORMED IN SINGLE PRECISION. USER BEWARE OF THIS.
C
      IF ((STEPM/STEPMI).LT.ERR) GO TO 340
      IF (IFTOT.NE.0) GO TO 90
      KNT = 0
      GO TO 90
280   CONTINUE
      CALL GASP(FTOT,M22,1,IFTOT)
      WRITE (6,60)ITER
      IF (INDIC.EQ.1.AND.ITER.GT.2) WRITE(6,50)
      IF (INDIC.EQ.1.AND.ITER.GT.2) WRITE(6,285)
      IF (INDIC.EQ.1.AND.ITER.GT.2) WRITE(6,40)
  285 FORMAT(' WARNING...WARNING...WARNING...WARNING...WARNING'//
     1' PREBUCKLING BEHAVIOR IS RATHER NONLINEAR (NOTE NUMBER OF'/
     1' NEWTON-RAPHSON ITERATIONS REQUIRED) AT THE CURRENT LOAD.'/
     1' IF THE NONLINEAR BEHAVIOR ARISES FROM LOAD SYSTEM "A", AND'/
     1' IF YOU WANT TO FIND BIFURCATION BUCKLING ESTIMATES APPRO'/
     1' PRIATE TO LINEAR THEORY, REDUCE THE LOADS IN LOAD SYSTEM "A"'/
     1' BY AN ORDER OF MAGNITUDE OR SO.  IF YOU WANT TO FIND'/
     1' BIFURCATION BUCKLING LOADS INCLUDING NONLINEAR PREBUCKLING'/
     1' EFFECTS IN A RIGOROUS MANNER, USE ANALYSIS TYPE INDIC = -2')
290   CONTINUE
      IF (NPRT.GT.1) WRITE (6,300)
300   FORMAT(67H START CALCULATION OF PRESTRESS FROM DISPLACEMENT SOLUTI
     1ON VECTOR    )                                                   
      IF (NPRT.GT.1) CALL SR100T(2)
C     CALL OVERLAY(5HBOSOR,2,2)
      CALL PRE2(BBB,IW,DS,FTOT,PSMODE)
      IF (NPRT.GT.1) WRITE (6,310)
310   FORMAT(70H STRESSES OR STRESS RESULTANTS CALCULATED AND STORED ON
     1DRUM OR DISK      )                                              
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (INDIC.NE.0) GO TO 390
      IREST = 0
      IFILE = 9
c open/close statments added 6/91
      fname = case(1:index(case, ' ')-1)//'.BLK'
      inquire(FILE=fname, EXIST=exists)
      if (exists) then
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='OLD')
#if rs6k
        rewind(IFILE)
#endif
      else
	OPEN(UNIT=IFILE, FILE=fname, FORM='UNFORMATTED',
     1       STATUS='NEW')
      endif
      CALL STOCM1(IFILE)
      CALL STOCM2(IFILE)
      CLOSE(IFILE)
c end 6/91 changes
C
      GO TO 90
320   WRITE (6,330)
330   FORMAT(//57H LOAD EXCEEDS MAXIMUM ALLOWABLE VALUE. CASE TERMINATED
     1.      )                                                         
      IDONE = 1
      GO TO 390
340   WRITE (6,350)
350   FORMAT(/20X,40H SHELL COLLAPSES AXISYMMETRICALLY                /)
360   CONTINUE
      IDONE = 1
      WRITE (6,370)
370   FORMAT(//90H NO CONVERGENCE IN PREBUCKLING ANALYSIS AFTER 10 NEWTO
     1N-RAPHSON ITERATIONS. LOADS FOLLOW     //)
      WRITE (6,380)P,TEMP,OMEGA
380   FORMAT(//' PRESSURE MULTIPLIER, P=',1PE15.6,
     134H  TEMPERATURE MULTIPLIER,TEMP =      1PE15.6,
     1'  ANGULAR VELOCITY, OMEGA=',1PE15.6/)
      IF (NSEG1.NE.0) WRITE (6,30)(I,V(I),HF(I),FM(I),I=1,NSEG1)
390   CONTINUE
      RETURN
      END
C=DECK      LOADS
      SUBROUTINE LOADS(P,RHO,NTOT)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN
C     APPLIED LOADS FOR NONLINEAR AXISYMMETRIC ANALYSIS ESTABLISHED FOR
C     NEXT LOAD STEP.
C
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/INSTAB/INDIC
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/SPACE/HC(95)
      COMMON/ROTATN/OMEGA,DOMEGA
C
      P = P + STEP
      TEMP = TEMP + DTEMP
      OMEGA = OMEGA + DOMEGA
      IF (NTOT.EQ.0) GO TO 20
      DO 10 I=1,NTOT
      V(I) = V(I) + STEP1(I)
      HF(I) = HF(I) + STEP2(I)
      FM(I) = FM(I) + STEP3(I)
10    CONTINUE
20    RHO = RHO + STEPM
      RETURN
      END
C=DECK      UNLOAD
      SUBROUTINE UNLOAD(V,HF,FM,K)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN.
C     LOADS ARE RESET BECAUSE PREBUCKLING SOLUTION FAILED TO
C     CONVERGE AT LAST LOAD STEP.
C     THIS SUBROUTINE NEEDED IF FOR PREVIOUS LOAD+INCREMENT THE
C     PREBUCKLING SOLUTION FAILED TO CONVERGE WITHIN 10 ITERATIONS.
      DIMENSION V(98),HF(98),FM(98)
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98)
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/INSTAB/INDIC
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/LSTEPS/ISTEP
      COMMON/ROTATN/OMEGA,DOMEGA
      IF (INDIC.EQ.-2) GO TO 10
      IF (ISTEP.NE.1) GO TO 10
      WRITE(6,7)
7     FORMAT(//68H INITIAL LOADS TOO HIGH FOR THIS STRUCTURE. REDUCE THE
     1M AND RERUN.                   //)                               
      CALL ERREX
10    P = P - STEP
      TEMP = TEMP - DTEMP
      OMEGA = OMEGA - DOMEGA
      IF (K.EQ.0) GO TO 30
      DO 20 I=1,K
      V(I) = V(I) - STEP1(I)
      HF(I) = HF(I) - STEP2(I)
      FM(I) = FM(I) - STEP3(I)
20    CONTINUE
30    RHO = RHO - STEPM
      STEP = STEP/10.0
      DTEMP = DTEMP/10.0
      STEPM = STEPM/10.0
      IF (K.EQ.0) RETURN
      DO 40 I=1,K
      STEP1(I) = STEP1(I)/10.0
      STEP2(I) = STEP2(I)/10.0
40    STEP3(I) = STEP3(I)/10.0
      RETURN
      END
C=DECK      PRE1
      SUBROUTINE PRE1(BBB,IW,DS,ILOC,FTOT,F,B)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      DOUBLE PRECISION F,B,FTOT
      COMMON/IFRHX/IFB,RHFIX(98),KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,IFIX
C BEG DEC 1990
      DIMENSION F(2000),B(*),ILOC(2000),IW(1000),DS(1000)
C END DEC 1990
      DIMENSION FTOT(2000),BBB(10000)
      CALL APREB(KNT,F,B,FTOT,ILOC,IW,DS,BBB)
      RETURN
      END
C=DECK      APREB
      SUBROUTINE APREB(KNT,F,AS,FTOT,ILOC,IW,DS,BBB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN
C     CALCULATES THE COEFFICIENT MATRIX OF PREBUCKLING EQUATIONS FOR
C     CURRENT ITERATION OF NONLINEAR AXISYMMETRIC PREBUCKLING THEORY.
C     ALSO FINDS RIGHT-HAND-SIDE VECTOR FOR CURRENT ITERATION.
C
      DOUBLE PRECISION F,FTOT,AS
C BEG DEC 1990
      DIMENSION FTOT(2000),ILOC(2000),IW(1000),AS(*),BBB(10000),F(*)
C END DEC 1990
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
      COMMON/JUNCT/IFIX(98,6),IFX(98,6),ITYPE(98)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(98),IROWCB(98),IIWP,IIWB
      COMMON/MISCEL/ICOND1,ICOND2,KK,N,KLAP,I5TOT,IC,III,IV
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      DIMENSION DS(1000)
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/CLST/CLAST
      ICOND1 = 1
      ICOND2 = 1
      KK = 1
      N = 5
      KLAP = 3
      I5TOT = 0
      IC = 3
      III = 1
      IV = 0
      DO 10 I=1,M2
10    F(I) = 0.0
      IMAX = IMAXP
      DO 20 I=1,IMAX
20    AS(I) = 0.0
      ITOT = 1
      ITOTL = 0
      IF (INOTE.GT.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 50 I=1,NSEG
C
C     PRESTS FINDS COEFFICIENT MATRIX AND RIGHT-HAND-SIDE FOR ITH SEGMNT
C
      I5I = I5(I)
30    IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
      IF (IEND.LT.10000) GO TO 40
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 30
40    CONTINUE
      CALL PRESTS(I,I5I,DS(ITOT),NSEG,BBB(8*I5I+IPOS),BBB(27*I5I+IPOS),
     1BBB(22*I5I+IPOS),F,FTOT,AS,IW,BBB(IPOS),ILOC,IFX,IFIX,IROWCP,ITYPE
     2, IMAX)
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
50    CONTINUE
      KNT = 1
      RETURN
      END
C=DECK      PRESTS
      SUBROUTINE PRESTS(JSEG,I5J,HS,NSEG,COEF,PR,BG,FNEW,F,BB,IW,THERM,
     1ILOC,IFX,IFIX,IROWC,ITYPE,IMAX)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      DOUBLE PRECISION B,UB,F,C,QB,TN1,TN2,TN3,TN4,R,RD,FK1,FK2,CURD,RDS
      DOUBLE PRECISION C11,C12,C13,C14,P1,P3,PPRIME,TNB,CB,QBCB,PSI,WB
      DOUBLE PRECISION BCB,ROT,EARC,EIRC,WC,DTNR,DTMR,FR1,FR2,FR3,FR4
      DOUBLE PRECISION USTAR,WSTAR,FC1,FC2,FC3,QD,D,FIFX1,FIFX3,FIFX4,BB
      DOUBLE PRECISION FNEW,QSAVE,H,FN,FR5,FR6,HPAST,HI,WBD
      DOUBLE PRECISION U,W,CHI,QBC1,F1,F2,F3,F4,DS,RI,FACT,UCD,WCD
      DIMENSION FNEW(*),QSAVE(98,3,5),IRSAVE(98),ISAVE(98,5)
      DIMENSION B(4,5),UB(5),F(*),IW(*),ROT(5),C(4,4),QB(4),TNB(5),WB(5)
      DIMENSION COEF(I5J,14),THERM(I5J,8),BG(I5J,5),PR(I5J,6)
      DIMENSION CB(4,5),QBCB(5),PSI(5),BCB(5,5),QD(3,5),D(3,5)
      DIMENSION IFX(98,6),IFIX(98,6),ILOC(*),ITYPE(98),IROWC(98)
C BEG DEC 1990
      DIMENSION BB(*),HS(*),WBD(5)
C END DEC 1990
      COMMON/NCONDS/NCOND
      COMMON/MISCEL/ICOND1,ICOND2,KK,N,KLAP,I5TOT,IC,III,IV
      COMMON/INTRG/ NSTATN(95),IRING(95,20)
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H
      COMMON/RNGGEO/RC(98),AREA(98),ER(98),IY(98),IX(98),IXY(98),IP(98)
      REAL IX,IY,IXY,IP
      COMMON/FNDAT/FSTIF(95)
      COMMON/CMAXS/CMAX
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/FORFIX/IOMGAB,VFIX(98),SHFIX(98),HFIX(98),FMFIX(98)
      COMMON/DRGTEM/TNRFIX(98),TMRFIX(98),TMXFIX(98)
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RING2/GAM(98),GJ(98),YC(98),XC(98),E1(98),E2(98),PHI(100)
      COMMON/RING3/D1(98),D2(98)
      COMMON/IDENT/IPRW(20)
      COMMON/ITERS/ITER
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/OUTP/NPRT
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RMASS/RM(98)
      DO 10 I=1,5
      UB(I) = 0.0
      WBD(I) = 0.0
10    WB(I) = 0.0
      UB(2) = 0.5
      UB(4) = 0.5
C
C     READ IN PROPERTIES OF JSEG TH SEGMENT-- THERM,COEF,BG,PR
C             THERM = THERMAL LOADS TN1,TN2,TN3,TN4
C             COEF = CONSTITUTIVE LAW CIJ
C             BG = GEOMETRY PARAMETERS R, RPRIME, 1/R1, 1/R2, (1/R1)'
C             PR = PRESSURE COMPONENTS P1, P2, P3
C
      FACT = 1.0
      IF (ITER.EQ.0) FACT = 0.0
      IK = 1
C     IK = INDEX FOR LOCATION OF DISCRETE RING
C     BEGIN LOOP OVER ALL POINTS AT WHICH ENERGY IS EVALUATED.
      HI = HS(1)
      DO 450 IPOINT=1,I5J
      H = HS(IPOINT)
      HPAST = HI
      HI = 2.*H - HPAST
      II = I5TOT + IPOINT + 1
C     IW(II) CONTAINS GLOBAL ROW NUMBER OF EQ. CORRES. TO W(IPOINT)
      I2M = IW(II-1)
      I2P = IW(II+1)
      I0 = IW(II)
      I1M = I0 - 1
      I1P = I0 + 1
      I2PI0 = I2P - I0
      ICNKLA = IC + N - KLAP
      IF (I2PI0.EQ.ICNKLA) I1P = I0 + IC + 1
C     FILL LOCAL WALL PROPERTIES MATRIX CIJ
      CALL PGETC(IPOINT,I5J,COEF,C)
      SMPA = COEF(IPOINT,14)
C     CALCULATE VARIOUS QUANTITIES NEEDED IN THE FOLLOWING
      DS = H
      IF (IPOINT.EQ.1.OR.IPOINT.EQ.I5J) DS=H/2.
      TN1 = THERM(IPOINT,1)*TEMP + THERM(IPOINT,5)
      TN2 = THERM(IPOINT,2)*TEMP + THERM(IPOINT,6)
      TN3 = THERM(IPOINT,3)*TEMP + THERM(IPOINT,7)
      TN4 = THERM(IPOINT,4)*TEMP + THERM(IPOINT,8)
      R  = BG(IPOINT,1)
      RD = BG(IPOINT,2)
      FK1= BG(IPOINT,3)
      FK2= BG(IPOINT,4)
      CURD=BG(IPOINT,5)
      CURD = 0.
      RDS = R*DS
      ISIG = 0
      RI = R
      IF (R.NE.0.) GO TO 20
      R = H/100000.
      ISIG = 1
      RDS = H**2/8.
20    CONTINUE
C     DIFFERENCE EXPRESSIONS FOR W, W' FOR VARIABLE SPACING
C
      CALL GETWWP(H,HI,HPAST,WB,WBD)
      C11 = C(1,1)
      C12 = C(1,2)
      C13 = C(1,3)
      C14 = C(1,4)
      P1 = PR(IPOINT,1)*P + PR(IPOINT,4)
      P3 = PR(IPOINT,3)*P + PR(IPOINT,6)
      PPRIME = PR(IPOINT,2)*P
      ROT(1) = WBD(1)
      ROT(2) = -.5*FK1
      ROT(3) = WBD(3)
      ROT(4) = -.5*FK1
      ROT(5) = WBD(5)
C     GET LINEAR PART OF KINEMATIC RELATIONS
      CALL PGETB(B,ISIG,WB,WBD,HPAST,HI,ROT)
C     F CONTAINS STARTING VECTOR FOR CURRENT NEWTON-RAPHSON ITERATION.
      U = (F(I1P) + F(I1M))/2.
      W = WB(1)*F(I2M) + WB(3)*F(I0) + WB(5)*F(I2P)
C     CHI IS PREBUCKLING MERIDIONAL ROTATION
      CHI=ROT(1)*F(I2M) +ROT(2)*F(I1M) +ROT(3)*F(I0) +ROT(4)*F(I1P)
     1+ROT(5)*F(I2P)
      DO 30 K=1,4
C     LET Q REPRESENT LOCAL PART OF F, THE STARTING VECTOR
C     QB = Q*B(TRANSPOSE)
30    QB(K)=B(K,1)*F(I2M)+B(K,2)*F(I1M)+B(K,3)*F(I0)+B(K,4)*F(I1P)
     1+B(K,5)*F(I2P)
C     QBC1 = Q*B(TRANSPOSE)*C(J,1)
      QBC1=QB(1)*C11 +QB(2)*C12 +QB(3)*C13 +QB(4)*C14
      F1 = QBC1*CHI + CHI*CHI*CHI*C11/2. + TN1*CHI
      F2 = QBC1 + 3.*CHI*CHI*C11/2. + TN1*FACT
C     F1,F2 = TERMS TO BE MULTIPLIED BY D(CHI)/D(Q)
      F3 = P1 + R*OMEGA**2*SMPA*RD
      F4 = P3 + R*OMEGA**2*SMPA*R*FK2
C     F3,F4, = TERMS TO BE MULTIPLIED BY U,W. 'LIVE' PRESSURE EFFECT
C
C     BEGIN LOOP OVER LOCAL MATRIX FOR SHELL STRAIN ENERGY, WORK DONE
C     BY PRESSURE AND SURFACE TRACTION.  N=5 IN PREBUCKLING ANALYSIS.
C
      DO 60 I=1,N
C     TNB(I) = (THERMAL LOADS)*B(J,I)
      TNB(I) = TN1*B(1,I) +TN2*B(2,I) +TN3*B(3,I) +TN4*B(4,I)
      DO 40 K=1,4
40    CB(K,I)=C(K,1)*B(1,I)+C(K,2)*B(2,I)+C(K,3)*B(3,I)+C(K,4)*B(4,I)
C     CB(K,I)= (C)*(B),  QBCB = Q*B(TRANSPOSE)*C*B
      QBCB(I)=QB(1)*CB(1,I)+QB(2)*CB(2,I)+QB(3)*CB(3,I)+QB(4)*CB(4,I)
C
C     PSI(I) = NEW LOCAL RIGHT-HAND-SIDE VECTOR. CONTRIBUTION FROM
C     SHELL STRAIN ENERGY,    PRESSURE AND SURFACE TRACTIONS.
C     ALSO, ELASTIC FOUNDATION WITH STIFFNESS FSTIF(JSEG)
C
      PSI(I)=RDS*(QBCB(I) +TNB(I) +CHI*CHI*CB(1,I)/2. + ROT(I)*F1
     1- F3*UB(I) - F4*WB(I) +FSTIF(JSEG)*W*WB(I))
C
C     BCB(I,J) = LOCAL SHELL STRAIN ENERGY MATRIX,WITH 'LIVE' PRESSURE
C                AND ELASTIC FOUNDATION STIFFNESS, FSTIF(JSEG).
C
      DO 50 J=1,I
      BCB(I,J) = RDS*(B(1,J)*CB(1,I)+B(2,J)*CB(2,I)+B(3,J)*CB(3,I)
     1+B(4,J)*CB(4,I) +F2*ROT(I)*ROT(J) +CHI*(ROT(J)*CB(1,I) +ROT(I)*
     2CB(1,J)) +FSTIF(JSEG)*WB(I)*WB(J)              )
50    CONTINUE
60    CONTINUE
C     END OF DOUBLE LOOP FOR SHELL STRAIN ENERGY LOCAL MATRIX.
C
C     ENERGY FOR IKTH RING IN JSEGTH SEGMENT
C     IRING(JSEG,IK) CONTAINS MESH PT. NO. OF IK TH RING IN JSEG TH SEG.
      IF (IPOINT.NE.IRING(JSEG,IK)) GO TO 90
C     DTNR,DTMR = RING THERMAL LOADS NRT,MXT.
      DTNR = TNR(KK)*TEMP + TNRFIX(KK)
      DTMR = TMR(KK)*TEMP + TMRFIX(KK)
      EARC = ER(KK)*AREA(KK)/RC(KK)
      EIRC = ER(KK)*IX(KK)/RC(KK)
C     WC = RADIAL DISPLACEMENT OF CENTROID OF RING.
      WC = U*RD +W*R*FK2 +E2(KK)*CHI -E1(KK)*CHI*CHI/2.
      FR1 = EARC*WC + DTNR - RC(KK)*(HF(KK) + HFIX(KK))
     1  - RC(KK)*RC(KK)*OMEGA**2*RM(KK)*AREA(KK)
      FR2 = RC(KK)*(V(KK) + VFIX(KK))
      FR3 = EIRC*CHI + DTMR - RC(KK)*(FM(KK) + FMFIX(KK) )
      FR4 = E2(KK) - E1(KK)*CHI
      FR5 = - E1(KK)*FR1 - E2(KK)*FR2 + EIRC
      FR6 = E1(KK) + E2(KK)*CHI
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO LOCAL MATRIX OF RING
C     STRAIN ENERGY AND WORK DONE BY LINE LOADS V,HF, AND FM.
C
      DO 80 I=1,N
C
C     UCD AND WCD ARE FIRST DERIVATIVES OF CENTROIDAL DISPLACEMENTS
C     WITH RESPECT TO DEPENDENT VARIABLE Q(I).
C
      UCD = UB(I)*R*FK2 - WB(I)*RD - FR6*ROT(I)
      WCD = UB(I)*RD + WB(I)*R*FK2 + FR4*ROT(I)
      PSI(I) = PSI(I) + FR1*WCD + FR2*UCD + FR3*ROT(I)
      DO 70 J=1,I
      BCB(I,J) = BCB(I,J) + FR5*ROT(I)*ROT(J) +
     1EARC*WCD*(UB(J)*RD +WB(J)*R*FK2 +FR4*ROT(J))
70    CONTINUE
80    CONTINUE
C
C     END OF DOUBLE LOOP FOR RING STRAIN ENERGY, WORK DONE BY V,HF,FM.
      IK = IK +1
      KK = KK +1
90    CONTINUE
C
C     CONSTRAINT CONDITIONS
C
C     IFX(ICOND1,1) CONTAINS LOCATIONS OF 'MINUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
      IF (ICOND1.GT.NCOND) GO TO 200
      IF (IPOINT.EQ.(IFX(ICOND1,1)-JSEG*1000)) GO TO 100
      GO TO 200
C     FILL THE 'MINUS' PART OF THE CONSTRAINT CONDITION
C
C     IR,IR1,IR2, CONTAIN GLOBAL MATRIX ROW NOS. CORRESPONDING TO THE
C     LAGRANGE MULTIPLIERS ASSOCIATED WITH CONSTRAINT CONDS IDENTIFIED
C     BY IFX(ICOND1,1)
100   IR = IFX(ICOND1,2)
      IR1 = IR + 1
      IR2 = IR + 2
      KKK = ICOND1
C     FIFX1, 3, AND 4 CONTAIN INTEGERS WHICH MAY OR MAY NOT RELEASE THE
C     CONSTRAINT CONDITIONS.
      IF ((ISTOP0(1)/1000).NE.JSEG) GO TO 110
      IF ((ISTOP0(1)-1000*JSEG).NE.IPOINT) GO TO 110
      IF(IFX(ICOND1,3).EQ.1) GO TO 110
      FIFX1 = ISTOP0(3)*CMAX
      FIFX3 = ISTOP0(5)*CMAX
      FIFX4 = ISTOP0(6)*CMAX
      GO TO 120
110   CONTINUE
      FIFX1 = IFX(ICOND1,3)*CMAX
      FIFX3 = IFX(ICOND1,5)*CMAX
      FIFX4 = IFX(ICOND1,6)*CMAX
C
C     CARDS ADDED FOR IMPOSED DISPLACEMENT IN PREBUCKLING ANALYSIS...
C
      IF (IFX(ICOND1,3).EQ.2) FIFX1 = CMAX
      IF (IFX(ICOND1,5).EQ.2) FIFX3 = CMAX
      IF (IFX(ICOND1,6).EQ.2) FIFX4 = CMAX
      USPEC = 0.
      WSPEC = 0.
      CHISPC = 0.
      IF (IFX(ICOND1,3).EQ.2) USPEC = V(KK-1) + VFIX(KK-1)
      IF (IFX(ICOND1,5).EQ.2) WSPEC = HF(KK-1) + HFIX(KK-1)
      IF (IFX(ICOND1,6).EQ.2) CHISPC = FM(KK-1) + FMFIX(KK-1)
C
120   IF (RI.NE.0.) GO TO 130
      FIFX1 = 0.
      FIFX3 = CMAX
      FIFX4 = CMAX
130   CONTINUE
      USTAR = R*FK2*U - RD*W
      WSTAR = RD*U + R*FK2*W
      IF (IFX(ICOND1,3).EQ.3) USTAR = U
      IF (IFX(ICOND1,5).EQ.3) WSTAR = W
C     D1(KKK) = KKKTH RADIAL DISCONTINUITY
C     D2(KKK) = KKKTH AXIAL  DISCONTINUITY
      FC1 = D2(KKK) - D1(KKK)*CHI
      FC3 = D1(KKK) + D2(KKK)*CHI
C     FNEW( ) = NEW RIGHT-HAND-SIDE VECTOR FOR THIS N-R ITERATION.
      FNEW(IR)=(-USTAR + D1(KKK)*CHI +D2(KKK)*CHI**2/2.+USPEC)*FIFX1
      FNEW(IR1)=(-WSTAR - D2(KKK)*CHI +D1(KKK)*CHI**2/2.+WSPEC)*FIFX3
      FNEW(IR2)= (-CHI + CHISPC)*FIFX4
      FC2 = F(IR)*D2(KKK)*FIFX1 + F(IR1)*D1(KKK)*FIFX3
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO ENERGY OF 'MINUS' PART OF
C     CONSTRAINT AND BOUNDARY CONDITIONS.
C
      DO 150 I=1,N
      USTAR = R*FK2*UB(I) - RD*WB(I)
      WSTAR = RD*UB(I) + R*FK2*WB(I)
      IF (IFX(ICOND1,3).EQ.3) USTAR = UB(I)
      IF (IFX(ICOND1,5).EQ.3) WSTAR = WB(I)
C     QD( ) = LOCAL MATRIX CONTAINING 'MINUS' PART OF CONSTRAINTS
      QD(1,I) =        FIFX1*(-USTAR + FC3*ROT(I))
      QD(2,I) =  FIFX3*(-WSTAR - FC1*ROT(I))
      QD(3,I) = - FIFX4*ROT(I)
      PSI(I) = PSI(I) + F(IR)*QD(1,I) +F(IR1)*QD(2,I) +F(IR2)*QD(3,I)
      DO 140 J=1,I
140   BCB(I,J) = BCB(I,J) + FC2*ROT(I)*ROT(J)
150   CONTINUE
C
C     END OF LOOP FOR 'MINUS' PART OF CONSTRAINT CONDITIONS.
C
      ICOND1 = ICOND1 + 1
C     FILL BB ARRAY WITH MINUS PART OF CONSTRAINT CONDITIONS.
C
      IF ((ILOC(IR)-ILOC(IR-1)).GT.(N+1)) GO TO 170
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 1,2,AND5.
C
      DO 160 I=1,N
      IB = ILOC(IR) -N -1 + I
      BB(IB) = QD(1,I)
      IB = ILOC(IR1)-N -2 + I
      BB(IB) = QD(2,I)
      IB = ILOC(IR2)-N -3 + I
160   BB(IB) = QD(3,I)
      GO TO 90
170   IF (NGBKP(III).LT.IR) GO TO 180
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE
C     3 AND 4 AS LONG AS CURRENT QD(I,J) IS STORED IN CURRENT BLOCK.
C
      CALL FILLBP(IC,N,I2M,I1M,I0,I1P,I2P,IR,ILOC,QD,BB)
      GO TO 90
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 3 AND 4
C     EXCEPT THAT QD(I,J) HAS TO BE SAVED BECAUSE IT CONTRIBUTES
C     ELEMENTS TO A FUTURE BLOCK.
C
180   IV = IV + 1
      IRSAVE(IV) = IR
      ISAVE(IV,1) = I2M
      ISAVE(IV,2) = I1M
      ISAVE(IV,3) = I0
      ISAVE(IV,4) = I1P
      ISAVE(IV,5) = I2P
      DO 190 I=1,IC
      DO 190 J=1,N
190   QSAVE(IV,I,J) = QD(I,J)
      GO TO 90
C     FILL THE 'PLUS' PART OF THE CONSTRAINT CONDITION
C     IFIX(ICOND2,2) CONTAINS LOCATIONS OF 'PLUS' SIDE OF JUNCTURE IN
C     MONOTONICALLY INCREASING ORDER.
200   IF (ICOND2.GT.NCOND) GO TO 300
      IF (IPOINT.EQ.(IFIX(ICOND2,2)-JSEG*1000)) GO TO 210
      GO TO 300
C     NO 'PLUS' SIDE IF CONDITION REPRESENTS BOUNDARY .
210   IF (IFIX(ICOND2,2).EQ.IFIX(ICOND2,1)) GO TO 290
      KKK = ICOND2
      USTAR = R*FK2*U - RD*W
      WSTAR = RD*U + R*FK2*W
C     IR,IR1,IR2 HAVE SAME MEANING AS ABOVE.
      IR = IROWC(ICOND2)
      IR1 = IR + 1
      IR2 = IR + 2
      FIFX1 = IFIX(ICOND2,3)*CMAX
      FIFX3 = IFIX(ICOND2,5)*CMAX
      FIFX4 = IFIX(ICOND2,6)*CMAX
C     'PLUS' SIDE CONTRIBUTIONS ADDED TO FNEW( ).
      FNEW(IR)= FNEW(IR ) + USTAR*FIFX1
      FNEW(IR1)=FNEW(IR1) + WSTAR*FIFX3
      FNEW(IR2)=FNEW(IR2) + CHI*FIFX4
C
C     LOOP FOR CONTRIBUTION OF 'PLUS' SIDE TO LOCAL MATRIX.
C
      DO 220 I=1,N
      USTAR = R*FK2*UB(I) - RD*WB(I)
      WSTAR = RD*UB(I) + R*FK2*WB(I)
      IF (IFIX(ICOND2,3).EQ.3) USTAR = UB(I)
      IF (IFIX(ICOND2,5).EQ.3) WSTAR = WB(I)
C     D( ) = LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINT CONDS.
      D(1,I) = USTAR*FIFX1
      D(2,I) = WSTAR*FIFX3
      D(3,I) =ROT(I)*FIFX4
C
      PSI(I) = PSI(I) + F(IR)*D(1,I) + F(IR1)*D(2,I) +F(IR2)*D(3,I)
220   CONTINUE
C
C
C     FILL BB( ) WITH LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINTS
C     ITYPE( ) = TYPE OF CONSTRAINT CONDITION. 5 MEANS SEGS. IN SERIES.
C
      IF (ITYPE(ICOND2).EQ.5) GO TO 270
C     THIS BRANCH FOR PLUS SIDES OF ALL TYPES OF CONSTRAINT CONDITIONS
C     EXCEPT ITYPE(ICOND2) = 5.
C
      DO 230 I=1,N
      IB = ILOC(IR) -N -1 + I
      BB(IB) = D(1,I)
      IB = ILOC(IR1)-N -2 + I
      BB(IB) = D(2,I)
      IB = ILOC(IR2)-N -3 + I
      BB(IB) = D(3,I)
230   CONTINUE
      IF (IV.EQ.0) GO TO 290
      DO 240 IIV=1,IV
      IF (IR.EQ.IRSAVE(IIV)) GO TO 250
240   CONTINUE
      GO TO 290
C     THIS BRANCH FOR INSERTION INTO GLOBAL STIFFNESS MATRIX OF
C     'MINUS' SIDE OF CONSTRAINT CONDITIONS REQUIRING VARIABLES FROM
C     PREVIOUS BLOCKS.
C
250   DO 260 I=1,IC
      DO 260 J=1,N
260   QD(I,J) = QSAVE(IIV,I,J)
      I2MS = ISAVE(IIV,1)
      I1MS = ISAVE(IIV,2)
      I0S  = ISAVE(IIV,3)
      I1PS = ISAVE(IIV,4)
      I2PS = ISAVE(IIV,5)
      CALL FILLBP(IC,N,I2MS,I1MS,I0S,I1PS,I2PS,IR,ILOC,QD,BB)
      GO TO 290
270   CONTINUE
C     THIS BRANCH FOR PLUS SIDE OF CONSTRAINT CONDITION TYPE 5.
C
      DO 280 I=1,N
      I1 = IR2 + I
      DO 280 J=1,IC
      IB = ILOC(I1) -IC + J - I
280   BB(IB) = D(J,I)
290   ICOND2 = ICOND2 + 1
      GO TO 200
300   CONTINUE
C
C     FILL NEW R-H-S VECTOR
      FNEW(I2M) = FNEW(I2M) + PSI(1)
      FNEW(I1M) = FNEW(I1M) + PSI(2)
      FNEW(I0 ) = FNEW(I0 ) + PSI(3)
      FNEW(I1P) = FNEW(I1P) + PSI(4)
      FNEW(I2P) = FNEW(I2P) + PSI(5)
C
C     FILL BB( ) WITH LOCAL MATRIX CORRESPONDING TO IPOINT.
C
      DO 440 I=1,N
      GO TO (310,320,330,340,350),I
310   J = I2M
      GO TO 360
320   J = I1M
      GO TO 360
330   J = I0
      GO TO 360
340   J = I1P
      GO TO 360
350   J = I2P
360   CONTINUE
      DO 430 K=1,I
      GO TO (370,380,390,400,410),K
370   INDX = I2M
      GO TO 420
380   INDX = I1M
      GO TO 420
390   INDX = I0
      GO TO 420
400   INDX = I1P
      GO TO 420
410   INDX = I2P
420   CONTINUE
      IB = ILOC(J) - J + INDX
      BB(IB) = BB(IB) + BCB(I,K)
430   CONTINUE
440   CONTINUE
450   CONTINUE
C
C     END OF LOOP OVER MESH POINTS IN CURRENT SEGMENT.
C
      I5TOT = I5TOT + I5J + 2
      IF (I2P.EQ.NGBKP(III)) GO TO 460
      IR2 = I2P + IC
      IF (IR2.EQ.NGBKP(III)) GO TO 460
      GO TO 490
460   NN = ILOC(I2P)*2
      IF (IR2.EQ.NGBKP(III)) NN = 2*ILOC(IR2)
C     STORE BLOCK NUMBER III ON DISK OR DRUM.
      IF (IBLKP.GT.1) CALL GASP(BB,NN,1,IPRW(III))
      IF (NPRT.LT.3.OR.ITER.GT.1) GO TO 465
      ZERO = 0.0
      WRITE(6,730) III,ITER
730   FORMAT(//' PREFACTORED PREBUCKLING STIFFNESS MATRIX FOR BLOCK NO.'
     1,I2,'  FOLLOWS. ITERATION NO. ', I2//)                           
      IF (III.EQ.1) NROWS = 0
      NROWS1 = NROWS + 1
      NROWS = NGBKP(III)
      DO 760 I = NROWS1,NROWS
      IF (I.NE.NROWS1) J1 = ILOC(I-1) + 1
      IF (I.EQ.NROWS1) J1 = 1
      J2 = ILOC(I)
      J3 = 7 - J2 + J1
      IF (J3.GT.0) WRITE(6,740)I,(ZERO,J=1,J3),(BB(J),J=J1,J2)
      IF (J3.LE.0) WRITE(6,750)I,(BB(J),J=J1,J2)
740   FORMAT(1X,I3,8E12.4)
750   FORMAT(1X,I3,(8E12.4))
760   CONTINUE
465   IF (IBLKP.EQ.1) GO TO 480
      DO 470 I=1,IMAX
470   BB(I) = 0.0
480   III = III + 1
490   CONTINUE
      RETURN
      END
C=DECK      PGETC
      SUBROUTINE PGETC(I,L5,COEF,C)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     WALL STIFFNESS COEFFICIENTS CIJ TRANSFERRED TO LOCAL MATRIX C.
C
      DOUBLE PRECISION C
      DIMENSION COEF(L5,14),C(4,4)
      C(1,1) = COEF(I,1)
      C(1,2) = COEF(I,2)
      C(1,3) = COEF(I,3)
      C(1,4) = COEF(I,4)
      C(2,2) = COEF(I,5)
      C(2,3) = COEF(I,6)
      C(2,4) = COEF(I,7)
      C(3,3) = COEF(I,8)
      C(3,4) = COEF(I,9)
      C(4,4) = COEF(I,10)
      C(2,1) = C(1,2)
      C(3,1) = C(1,3)
      C(4,1) = C(1,4)
      C(3,2) = C(2,3)
      C(4,2) = C(2,4)
      C(4,3) = C(3,4)
      RETURN
      END
C=DECK      GETWWP
      SUBROUTINE GETWWP(DS,K,H,WB,WBD)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM PRESTRES, WHOSE TRACE IS APREB,PRE,MAIN
C     FINITE-DIFFERENCE EXPRESSIONS FOR VARIABLE SPACING MESH WITH
C     U,V HALF-WAY BETWEEN W. PREBUCKLING ANALYSIS
      DOUBLE PRECISION DS,K,H,WB,WBD,HMK,KPDS,HPDS
      DIMENSION WB(5),WBD(5)
      HMK = H - K
      KPDS = K + DS
      HPDS = H + DS
      WB(1) = HMK*KPDS/(16.*H*DS)
      WB(3) = KPDS*HPDS/(4.*H*K)
      WB(5) = -HMK*HPDS/(16.*K*DS)
      WBD(1) = -0.5/H
      WBD(5) = 0.5/K
      WBD(3) = -WBD(1) - WBD(5)
      RETURN
      END
C=DECK      PGETB
      SUBROUTINE PGETB(B,ISIG,WB,WBD,HPAST,HI,ROT)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     THE MATRIX B RELATES STRAINS AND CHANGES IN CURVATURE TO LOCAL
C     MESH VARIABLES. VARIABLE SPACING USED. TANGENTIAL DISPLACEMENT
C     U OCCURS AT HALF-STATIONS BETWEEN THE NORMAL OUTWARD DISPLACEMENT
C     IN THIS SUBROUTINE ONLY THE LINEAR TERMS IN THE KINEMATIC RELATION
C     ARE INCLUDED.   THE W-PRIME-SQUARED TERM IS OMITTED HERE.
C
C     VARIABLE DEFINITIONS. . .
C              R = PARALLEL CIRCLE RADIUS AT ELEMENT CENTROID
C             RD = DERIVATIVE OF R WITH RESPECT TO ARC LENGTH S
C            FK1 = MERIDIONAL CURVATURE 1/R1 AT ELEMENT CENTROID
C            FK2 = NORMAL CIRCUMFERENTIAL CURVATURE, 1/R2
C           CURD = DERIVATIVE OF 1/R1
C              H = ELEMENT LENGTH, L  IN FIG. 3
C          HPAST = VARIABLE CALLED H IN FIG. 3
C             HI = VARIABLE CALLED K IN FIG. 3
C          WB(1) = VARIABLE CALLED C1 IN EQUATION (9)
C          WB(3) = VARIABLE CALLED C2 IN EQUATION (9)
C          WB(5) = VARIABLE CALLED C3 IN EQUATION (9)
C       ROT(I) = DERIVATIVE OF MERIDIONAL ROTATION WITH RESPECT TO
C                 GENERALIZED COORDINATES, Q. SEE EQUATION (17).
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION B,WB,WBD,HPAST,HI,ROT
      DIMENSION B(4,5),WB(5),WBD(5),ROT(5)
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      B(1,1) = FK1*WB(1)
      B(1,2) = -1./H
      B(1,3) = FK1*WB(3)
      B(1,4) = 1./H
      B(1,5) = FK1*WB(5)
      B(2,1) = FK2*WB(1)
      B(2,2) = 0.5*RD/R
      B(2,3) = FK2*WB(3)
      B(2,4) = 0.5*RD/R
      B(2,5) = FK2*WB(5)
      FMUL = 0.0
      B(3,1) = 1./(HPAST*H) -FMUL*B(1,1)*FK1
      B(3,2) = FK1/H        -FMUL*B(1,2)*FK1
      B(3,3) =-2./(HI*HPAST)-FMUL*B(1,3)*FK1
      B(3,4) = -FK1/H       -FMUL*B(1,4)*FK1
      B(3,5) = 1./(HI*H)    -FMUL*B(1,5)*FK1
C
      DO 10 I=1,5
10    B(4,I) = ROT(I)*RD/R  -FMUL*B(2,I)*FK2
      IF (ISIG.NE.1) RETURN
C     POLE CONDITION
      DO 20 I=1,5
      B(2,I) = B(1,I)
20    B(4,I) = B(3,I)
      RETURN
      END
C=DECK      FILLBP
      SUBROUTINE FILLBP(IC,N,I2M,I1M,I0,I1P,I2P,IR,ILOC,QD,BB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     PURPOSE IS TO ASSEMBLE 'MINUS' CONSTRAINT CONDITION MATRIX
C     QD(3X5) INTO GLOBAL MATRIX BB.
C     NONLINEAR AXISYMMETRIC STRESS PROBLEMS.
      DOUBLE PRECISION QD,BB
      DIMENSION ILOC(*),QD(3,5),BB(*)
      DO 80 I=1,IC
      J = IR - 1 + I
      DO 70 K=1,N
      GO TO (10,20,30,40,50),K
10    INDX = I2M
      GO TO 60
20    INDX = I1M
      GO TO 60
30    INDX = I0
      GO TO 60
40    INDX = I1P
      GO TO 60
50    INDX = I2P
60    CONTINUE
      IB = ILOC(J) - J + INDX
      BB(IB) = QD(I,K)
70    CONTINUE
80    CONTINUE
      RETURN
      END
C=DECK      PRE2
      SUBROUTINE PRE2(BBB,IW,DS,FTOT,PSMODE)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      DOUBLE PRECISION FTOT
      COMMON/IFRHX/IFB,RHFIX(98),KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,IFIX
      COMMON/LSTEPS/ISTEP
      COMMON/INSTAB/INDIC
      COMMON/RGFCE/RHF(98)
      COMMON/SFLAG/MONOQ
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/SMOAD/IMOAD(100),IPMODE(95),IPSMD(95)
      COMMON/IOCHOZ/IOYES(50),IOSEG(95)
      DIMENSION PMODE(1000,9)
      DIMENSION FTOT(2000),IW(1000),DS(1000),PSMODE(1000,9),BBB(10000)
      CALL PREB(FTOT,RHF,INDIC,IW,IFIX,ISTEP,DS,PSMODE,BBB,RHFIX,PMODE)
      IF (INDIC.NE.0) RETURN
      IF (IOYES(1).EQ.0) RETURN
      WRITE(6,70) ISTEP
70    FORMAT(/26H OUTPUT FOR LOAD STEP NO.      ,I3)             
      ISTRES = 0
      CALL OUTPRE(IPMODE(ISTEP),IARC,I2,I5,NSEG,PMODE,ISTRES)
      IF (MONOQ.NE.0) CALL OUTPRE(IPSMD(ISTEP),IARC,I2,I5,NSEG,PSMODE,
     1 MONOQ)
      RETURN
      END
C=DECK      PREB
      SUBROUTINE PREB(F,RHF,INDIC,IW,IFIX,ISTEP,DS,PSMODE,BBB,RHFIX,
     1  PMODE)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN.
C     PRESTRESSES AND DISPLACEMENTS CALCULATED FROM INPUT VECTOR F.
C
      DOUBLE PRECISION F
      DIMENSION PMODE(1000,9),BBB(10000),RHFIX(98)
      DIMENSION PSMODE(1000,9),RHF(98),F(*),IW(2000)
      COMMON/ISTUFF/KK,I5TOT,IC,NUNK,KLAP
      COMMON/INTRG/NSTATN(95),IRING(95,20)
      DIMENSION DS(1000)
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/STRHD/ NSHEAD
      COMMON/SFLAG/MONOQ
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/IOCHOZ/IOYES(50),IOSEG(95)
      KK = 1
      I5TOT = 0
      IC = 3
      NUNK = 5
      KLAP = 3
      M = 1
      ITOT = 1
      ITOTL = 0
      IF (INOTE.GT.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 30 I=1,NSEG
C
C     PRESTRESS AND DISPLACEMENTS CALCULATED FOR ITH SEGMENT IN PLOCAL.
C
      I5I = I5(I)
10    IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
      IF (IEND.LT.10000) GO TO 20
      IF (INDIC.NE.0) CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 10
20    CONTINUE
      INDX = 33*I5I
      IF (IFIX.EQ.1) INDX = 36*I5I
      CALL PLOCAL(IW,I,DS(ITOT),I5I,F,BBB(8*I5I+IPOS),BBB(22*I5I+IPOS),
     1BBB(INDX+IPOS),PMODE,PSMODE,NSEG,RHF,BBB(IPOS),INDIC,
     2BBB(39*I5I+IPOS),IFIX,I2,ISTEP,RHFIX)
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
30    CONTINUE
      IF (INDIC.NE.0) CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      IF (INDIC.NE.0) GO TO 70
      IF (NTOT.EQ.0) GO TO 70
      IF (IOYES(1).GT.0) WRITE (6,40)ISTEP
40    FORMAT(/// 41H DISCRETE RING HOOP FORCES FOR LOAD STEP ,I2//)
      DO 50 I=1,NTOT
      IF (IOYES(1).GT.0) WRITE (6,60)I,RHF(I)
50    CONTINUE
60    FORMAT(19H DISCRETE RING NO. ,I2,17H    HOOP FORCE =  ,1PE20.8)
70    CONTINUE
      RETURN
      END
C=DECK      PLOCAL
C./      ADD   NAME=PLOCAL
      SUBROUTINE PLOCAL(IW,IS,HC,I5,F,C,B,PSTS,PMODE,PSMODE,NSEG,RHF,
     1THERM,INDIC,TIO,IFIX,IALL,ISTEP,RHFIX)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM PREB, WHOSE TRACE IS PRE,MAIN.
C     PREBUCKLING STRESSES AND DISPLACEMENTS CALCULATED FROM INPUT
C     SOLUTION F.
C
      DOUBLE PRECISION F
      DOUBLE PRECISION H,HPAST,HI,C1,C2,C3,W,U,R,RD,FK1,FK2,CURD
      DOUBLE PRECISION UD,WD,WDD,BETA,CFNLIN,UV,UH
      DIMENSION F(*),C(I5,14),B(I5,5),PSTS(I5,3),T(100),RHFIX(98)
      DIMENSION PMODE(IALL,9),PSMODE(IALL,9),THERM(I5,8),RHF(98)
      DIMENSION IW(1000)
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/ISTUFF/KK,I5TOT,IC,NUNK,KLAP
      COMMON/SMOAD/IMOAD(100),IPMODE(95),IPSMD(95)
      COMMON/SFLAG/MONOQ
      COMMON/STRSEG/ISTRSS(95)
      COMMON/XTRSS/SIG1I,SIG1O,SIG2I,SIG2O,TAUI,TAUO,SIGEI,SIGEO
      COMMON/INTRG/NSTATN(95),IRING(95,20)
      COMMON/IDZREF/IZREF(95)
      COMMON/RING2/GAM(98),GJ(98), YC(98), XC(98),E1(98),E2(98),PHI(100)
      COMMON/RNGGEO/RC(98),AREA(98),ER(98),IY(98),IX(98),IXY(98),IP(98)
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)
      COMMON/DRGTEM/TNRFIX(98),TMRFIX(98),TMXFIX(98)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/OUTP/NPRT
c Renamed SIGNAL to SIGNAx, Feb 1996
      COMMON/PRERT/PREROT,SIGNAx,IPREBK
      COMMON/IOCHOZ/IOYES(50),IOSEG(95)
      COMMON/KCHNG/NWALL(95),CCH(95)
      DIMENSION Z(100),TIO(I5,4),HC(*)
      REAL N10,N20,M10,M20,K1,K2,K12
      IF (NWALL(IS).NE.4.AND.NWALL(IS).NE.9.AND.ISTRSS(IS).EQ.1)
     1      CALL GASP(T,I5,3,ITHK(IS))
      IF(ISTRSS(IS).EQ.1) CALL GASP(Z,I5,3,IZREF(IS))
      J = 1
      KKS = KK
      IK = 1
      ITOT = I5TOT - 2*(IS-1)
      HI = HC(1)
      DO 120 I=1,I5
      H = HC(I)
      HPAST = HI
      HI = 2.*H-HPAST
      ITOT = ITOT + 1
      II = I5TOT + I + 1
      I2M = IW(II-1)
      I2P = IW(II+1)
      I0 = IW(II)
      I1M = I0 - 1
      I1P = I0 + 1
      IF ((I2P-I0).EQ.(IC+NUNK-KLAP))I1P = I0 + IC + 1
      C1 = (HPAST-HI)*(HI + H)/(16.*HPAST*H)
      C2 = (HI + H)*(HPAST + H)/(4.*HPAST*HI)
      C3 = - (HPAST-HI)*(HPAST + H)/(16.*HI*H)
      W = C1*F(I2M) + C2*F(I0) + C3*F(I2P)
      U = (F(I1M) + F(I1P))/2.
      R = B(I,1)
      RD = B(I,2)
      FK1 = B(I,3)
      FK2 = B(I,4)
      CURD = B(I,5)
      CURD = 0.
      UD = (F(I1P) - F(I1M))/H
      C1 = -.5/HPAST
      C3 = .5/HI
      C2 = -C1 -C3
      WD = C1*F(I2M) + C2*F(I0) + C3*F(I2P)
      C1 = 1./(HPAST*H)
      C2 = -2./(HPAST*HI)
      C3 = 1./(HI*H)
      WDD = C1*F(I2M) + C2*F(I0) + C3*F(I2P)
      BETA = WD - U*FK1
      CFNLIN = 1.0
      EPS1 = UD + W*FK1 + CFNLIN*0.5*BETA**2
C
      UV = U*R*FK2 - W*RD
      FMUL = 0.0
      K1 = WDD - FK1*UD - CURD*U -FMUL*EPS1*FK1
      EPS12 = 0.0
      K12 = 0.0
      IF (R.GT.0.0) GO TO 10
      EPS2 = EPS1
      K2 = K1
      GO TO 20
10    EPS2 = U*RD/R + W*FK2
      K2 = BETA*RD/R -FMUL*EPS2*FK2
20    CONTINUE
      UH = EPS2*R
      N10 = C(I,1)*EPS1 + C(I,2)*EPS2 + C(I,3)*K1 + C(I,4)*K2
      N20 = C(I,2)*EPS1 + C(I,5)*EPS2 + C(I,6)*K1 + C(I,7)*K2
      M10 = C(I,3)*EPS1 + C(I,6)*EPS2 + C(I,8)*K1 + C(I,9)*K2
      M20 = C(I,4)*EPS1 + C(I,7)*EPS2 + C(I,9)*K1 + C(I,10)*K2
      N10 = N10 + THERM(I,1)*TEMP + THERM(I,5)
      N20 = N20 + THERM(I,2)*TEMP + THERM(I,6)
      M10 = M10 + THERM(I,3)*TEMP + THERM(I,7)
      M20 = M20 + THERM(I,4)*TEMP + THERM(I,8)
C
C
      IF (I.EQ.1.OR.I.EQ.I5) GO TO 30
      GO TO 70
30    IF (R.GT.0.0) GO TO 40
      GO TO 70
C
C     CORRECTION ADDENDS FOR TRUNCATION ERRORS AT SEGMENT ENDS.
C
40    F1 = 0.5*RD*H/R
      CN1 = - N20*F1 +H*.5*(FK1*N10*BETA + M10*CURD)
      CM1 = - M20*F1 - H*N10*BETA/2.
      IF (I.EQ.I5) GO TO 50
      GO TO 60
50    CN1 = - CN1
      CM1 = - CM1
60    N10 = N10 + CN1
      M10 = M10 + CM1
      N20 = N20 + C(I,2)*CN1/C(I,1)
      M20 = M20 + C(I,9)*CM1/C(I,8)
70    CONTINUE
C
C     RHF(KK) AND RHFIX(KK) CONTAIN RING HOOP FORCES WHICH APPEAR IN
C     STABILITY AND VIBRATION EQUATIONS.
C
      IF (I.NE.IRING(IS,IK)) GO TO 100
      IF (IFIX.EQ.1) GO TO 80
      RHF(KK) = ER(KK)*AREA(KK)*(UH + BETA*E2(KK))/RC(KK) +TNR(KK)*TEMP
     1  + TNRFIX(KK)
      GO TO 90
80    RHFIX(KK)=ER(KK)*AREA(KK)*(UH + BETA*E2(KK))/RC(KK) +TNR(KK)*TEMP
     1  + TNRFIX(KK)
90    CONTINUE
      IK = IK + 1
      KK = KK + 1
100   CONTINUE
      CURV1 = FK1
      CURV2 = FK2
C
C     STRESSES CALCULATED FROM STRESS RESULTANTS FOR MONOCOQUE
C     SHELL ONLY.
C
      IF (NWALL(IS).EQ.4.OR.NWALL(IS).EQ.9.OR.ISTRSS(IS).NE.1) GO TO 5
      TIN = TIO(I,1)*TEMP + TIO(I,3)
      TOUT = TIO(I,2)*TEMP + TIO(I,4)
      CALL STRESS(EPS1,EPS2,EPS12,K1,K2,K12,T(I),Z(I),
     1IS,I,TIN,TOUT,CURV1,CURV2)
    5 CONTINUE
C
C     PSTS(I,J) CONTAINS PRESTRESS QUANTITIES WHICH AFFECT THE STABILITY
C     AND VIBRATION EQUATIONS.
C
      PSTS(I,1) = N10
      PSTS(I,2) = N20
      PSTS(I,3) = BETA*(1.-PREROT)
      IF (INDIC.EQ.2) GO TO 110
      IF (IFIX.GT.0) GO TO 120
110   CONTINUE
      PMODE(ITOT,1) = W
      PMODE(ITOT,2) = U
      PMODE(ITOT,3) = BETA
C
C     PRESTRESS INFORMATION STORED IN PMODE AND PSMODE FOR LATER PLOTTIN
C
      PMODE(ITOT,4) = UV
      PMODE(ITOT,5) = N10
      PMODE(ITOT,6) = N20
      PMODE(ITOT,7) = M10
      PMODE(ITOT,8) = M20
C
      DO 113 IIJ = 1,8
  113 PSMODE(ITOT,IIJ) = 0.
      IF (MONOQ.EQ.0) GO TO 120
C
      IF (NWALL(IS).EQ.4.OR.NWALL(IS).EQ.9.OR.ISTRSS(IS).NE.1)
     1  GO TO 115
      PSMODE(ITOT,1) = W
      PSMODE(ITOT,2) = U
      PSMODE(ITOT,3) = SIG1I
      PSMODE(ITOT,4) = SIG1O
      PSMODE(ITOT,5) = SIG2I
      PSMODE(ITOT,6) = SIG2O
      PSMODE(ITOT,7) = SIGEI
      PSMODE(ITOT,8) = SIGEO
      GO TO 120
C
  115 CONTINUE
      PSMODE(ITOT,1) = W
      PSMODE(ITOT,2) = U
      PSMODE(ITOT,3) = EPS1
      PSMODE(ITOT,4) = EPS2
      PSMODE(ITOT,5) = K1
      PSMODE(ITOT,6) = K2
      PSMODE(ITOT,7) = 0.
      PSMODE(ITOT,8) = 0.
  120 CONTINUE
C
      I5TOT = I5TOT + I5 + 2
      IF (INDIC.EQ.2) GO TO 130
      IF (IFIX.GT.0) GO TO 140
130   CONTINUE
      N = 9*IALL
      IF (IS.EQ.NSEG) CALL GASP(PMODE,N,1,IPMODE(ISTEP))
      IF (IS.EQ.NSEG.AND.MONOQ.NE.0)CALL GASP(PSMODE,N,1,IPSMD(ISTEP))
      IF (INDIC.EQ.0) GO TO 240
140   N = 3*I5
C
C     PSTS(I,J) STORED WITH IDENTIFIER IPFXD IF LOADS ARE FIXED, WITH
C     IDENTIFIER IPSTS IF LOADS ARE EIGENVALUE PARAMETERS (VARIABLE).
C
      IF (INDIC.NE.1.AND.INDIC.NE.2) GO TO 240
      IF (IFIX.EQ.1) GO TO 160
      IF (IOYES(2).GT.0) WRITE (6,150)
150   FORMAT(//108H TOTAL PRESTRESS STATE. THESE QUANTITIES MINUS CORRES
     1PONDING FIXED QUANTITIES ARE MULTIPLIED BY EIGENVALUE.         )
      GO TO 180
160   CONTINUE
      IF (IOYES(2).GT.0) WRITE (6,170)
170   FORMAT(//97H FIXED PART OF AXISYMMETRIC PRESTRESS STATE. THESE QUA
     1NTITIES ARE NOT MULTIPLIED BY EIGENVALUE.             )
180   CONTINUE
      IF (IOYES(2).GT.0) WRITE (6,190)IS
190   FORMAT(//112H PRESTRESS-- MERIDIONAL RESULTANT, N10   CIRCUMFERENT
     1IAL RESULTANT,N20  MERIDIONAL ROTATION, CHIO   FOR SEGMENT        
     1I3//)
      DO 210 I=1,I5
      IF (IOYES(2).GT.0) WRITE (6,200)I,PSTS(I,1),PSTS(I,2),PSTS(I,3)
200   FORMAT(I8,1P3E35.8)
210   CONTINUE
      KK1 = KK - 1
      IF (KK1.LT.KKS) GO TO 240
      DO 230 I=KKS,KK1
      IF (IFIX.EQ.1) GO TO 215
      IF (IOYES(2).GT.0) WRITE (6,220)I,RHF(I)
      GO TO 230
215   IF (IOYES(2).GT.0) WRITE(6,220) I,RHFIX(I)
220   FORMAT(/32H HOOP FORCE IN DISCRETE RING NO.   I3,2H =  ,1PE20.8)
230   CONTINUE
240   CONTINUE
      RETURN
      END
C=DECK      OUTPRE
      SUBROUTINE OUTPRE(IPMODE,IARC,I2,I5,NSEG,BMODE,ISTRES)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM OUT2, WHOSE TRACE IS READIT,MAIN
C     AXISYMMETRIC PRESTRESS STATE IS PRINTED OUT
C
      COMMON/RGFCE/ RHF(98)
      COMMON/ALLRNG/ NTOT,IPRE
      COMMON/INSTAB/INDIC
      COMMON/IOCHOZ/IOYES(50),IOSEG(95)
      COMMON/STRSEG/ISTRSS(95)
      COMMON/KCHNG/NWALL(95),CCH(95)
      COMMON/COMNOD/NODES(100),NODALL(100),NODTOT
      DIMENSION IARC(95),I5(95),BMODE(I2,9),S(1000),IDUMMY(95)
C BEG APR 1992
C  NEW VARIABLES FOR STRESS CONSTRAINTS FOR COMPOSITE MATERIAL...
      DIMENSION WORDB(99),IPOINC(1500),CONSTR(99)
      DIMENSION EMAX(5,20),EMARG(5,20)
      CHARACTER*80 WORDB
C END APR 1992
      NN = 9*I2
      CALL GASP(BMODE,NN,3,IPMODE)
      IALL = 0
      CALL GASP(S,I2 ,3,IARC(1))
      ISTTHK = 0
C
      DO 60 I=1,NSEG
      I5I = I5(I)
      IF (IOSEG(I).NE.0) GO TO 5
      IALL = IALL + I5I
      GO TO 60
    5 CONTINUE
      WRITE (6,10)I
10    FORMAT(//25X,48HAXISYMMETRIC PRESTRESS DISTRIBUTION FOR SEGMENT 
     1     ,I2  )                                         
      IF (ISTRES.EQ.0) WRITE (6,20)
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.1
     1  .AND.NWALL(I).NE.4.AND.NWALL(I).NE.9) WRITE (6,30)
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.1
     1  .AND.(NWALL(I).EQ.4.OR.NWALL(I).EQ.9)) WRITE (6,35)
      IF (ISTRES.EQ.2) WRITE(6,35)
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.0) WRITE(6,35)
20    FORMAT(//' POINT   STATION        W0         U0          BETA     
     1   UV          N10         N20         M10         M20'/       
     2         '       (ARC LENGTH)   NORMAL   MERIDIONAL     MERID.    
     3  AXIAL       MERID.     CIRCUMF.     MERID.     CIRCUMF.'/
     4         '                      DISP.   DISPLACEMENT     ROT.     
     5  DISP.     RESULTANT   RESULTANT    MOMENT      MOMENT'/)
30    FORMAT(//' POINT    STATION       W0         U0        SIGMA1(IN) 
     1SIGMA1(OUT) SIGMA2(IN) SIGMA2(OUT) SIGMAE(IN) SIGMAE(OUT)'/
     2         '       (ARC LENGTH)   NORMAL   MERIDIONAL     MERID.    
     3MERIDIONAL   CIRCUMF.   CIRCUMF.    VON MISES EQUIVALENT'/
     4         '                       DISP.  DISPLACEMENT    STRESS    
     5  STRESS      STRESS     STRESS  INNER FIBER  OUTER FIBER'/)
35    FORMAT(//   ' POINT    STATION       W0         U0       EPSILON 1
     1   EPSILON 2   KAPPA 1      KAPPA 2 '/
     2            '       (ARC LENGTH)   NORMAL   MERIDIONAL    MERID.  
     3   CIRCUMF.    MERID.      CIRCUMF.'/
     4            '                       DISP.  DISPLACEMENT    STRAIN 
     5    STRAIN     CHANGES IN CURVATURE'/)
C
      DO 50 J=1,I5I
      IALL = IALL + 1
      WRITE (6,40)J,S(IALL),(BMODE(IALL,JJ),JJ=1,8)
40    FORMAT(I5,1P9E12.3)                        
50    CONTINUE
      IF ((NWALL(I).EQ.4.OR.NWALL(I).EQ.9)
     1                 .AND.ISTRSS(I).EQ.1.AND.ISTRES.EQ.1) ISTTHK=1
60    CONTINUE
C
C  PRINT OUT STRESSES IN COMPOSITE LAMINATED WALL... (25 AUG., 1985)
C
      IF (ISTTHK.EQ.1) THEN
         ICOL1 = 3
         ICOL2 = 4
         ICOL3 = 7
         ICOL4 = 5
         ICOL5 = 6
         ICOL6 = 8
         DO 65 J = 1,NSEG
   65    IDUMMY(J) = 1
C BEG APR 1992
C        CALL STRTHK(BMODE,IALL,1,1,1.0,NSEG,I5,1,
C    1               IDUMMY,NWALL,0.,ICOL1,ICOL2,ICOL3,ICOL4,
C    1               ICOL5,ICOL6)
C 
C INCLUDE STRESS CONSTRAINTS FOR LAMINATED COMPOSITE MATERIAL...
         CALL STRTHX(BMODE,IALL,1,1,FSSTR,NSEG,I5,
     1                  1,IDUMMY,NWALL,0.,ICOL1,ICOL2,ICOL3,
     1                  ICOL4,ICOL5,ICOL6,WORDB,EMAX,EMARG,
     1                  IMOD,ITYPE,FMAX,INUMTT,IPOINC,ICONST,CONSTR,
     1                  INDIC)
C
C END APR 1992
      ENDIF
C
C  END OF 25 AUG., 1985 MODIFICATION.
C

      IF (NTOT.EQ.0) RETURN
      IF (INDIC.EQ.0) RETURN
      IF (IOYES(3).EQ.0) RETURN
      WRITE (6,70)
70    FORMAT(///30H HOOP FORCES IN DISCRETE RINGS   )               
      WRITE (6,80)
80    FORMAT(/33H RING NO.              HOOP FORCE    /)            
      DO 90 I=1,NTOT
90    WRITE (6,100)I,RHF(I)
100   FORMAT(I7, 1PE20.8)                        
      RETURN
      END
