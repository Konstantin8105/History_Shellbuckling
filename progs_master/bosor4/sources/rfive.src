C=DECK      RFIVELIB
C
C  THIS IS THE RFIVE LIBRARY (SOURCE FILE)
C
C
C
C=DECK      RFIVE
      SUBROUTINE RFIVE(ZAX)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     PURPOSE IS TO RESTORE STUFF BY GASPING.  ALSO, TO GET TEMPLATES
C     OF MATRICES THAT GOVERN PREBUCKLING AND BUCKLING PROBLEMS.
C
      COMMON/DFLAG/IDFLAG
      COMMON/RING3/D1(98),D2(98)
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(98),TT(100,6)
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
      COMMON/SHEL/ISHL(95),IWAL(95),ITHK(95),IARC(95),ILOAD(95)
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/OUTP/NPRT
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/NCONDS/NCOND
      COMMON/INTRVL/INTVAL(95),IOUT,NDIST,NCIRC,NTHETA
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/JUNCT/IFIX(98,6),IFX(98,6),ITYPE(98)
      COMMON/JUNCTB/IFIXB(98,6),IFXB(98,6),ITYPEB(98)
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/INSTAB/INDIC
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/BLK/IBLK,NGBK(20),NKF(20)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(98),IROWCB(98),IIWP,IIWB
      COMMON/TOTPTS/M3
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      DIMENSION ILOC(3000),IW(1000),ZAX(1000)
      COMMON/DSPACE/IDS
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/IZDTR/IZZ
C
C
      IFILE4 = 8
C     NTOT = TOTAL NO. OF DISCRETE RINGS IN ENTIRE SHELL
      NTOT = KRING
C     PRINT OUT DISCRETE RING PROPERTIES, LINE LOADS, DISTRIBUTED LOADS
      CALL OUTIN2(NTOT,ARC,INDIC,NCOND)
      II = I2 + 2*NSEG
C     II = TOTAL NO. OF W-POINTS IN ENTIRE SHELL, INCLUDING FICT. PTS.
C     SUBROUTINE ISHIFT ADJUSTS CONSTRAINT CONDITION CALLOUTS TO
C     ALLOW FOR 'EXTRA' MESH POINTS INSERTED NEAR EDGES.
      CALL ISHIFT(JPLOT,KPLOT,I5)
      CALL ISHIFT(NCIRC,ITHETA,I5)
      CALL ISHIFT(NCOND,IFIX(1,1),I5)
      CALL ISHIFT(NCOND,IFIX(1,2),I5)
      CALL ISHIFT(NCOND,IFIXB(1,1),I5)
      CALL ISHIFT(NCOND,IFIXB(1,2),I5)
      IF (ISTOP0(1).EQ.0) GO TO 10
      ISEG = ISTOP0(1)/1000
      IPT = ISTOP0(1) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) ISTOP0(1) = ISTOP0(1) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) ISTOP0(1) = ISTOP0(1) + 2
10    IF (ISTOP1(1).EQ.0) GO TO 20
      ISEG = ISTOP1(1)/1000
      IPT = ISTOP1(1) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) ISTOP1(1) = ISTOP1(1) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) ISTOP1(1) = ISTOP1(1) + 2
20    CONTINUE
      CALL ZGLOBE(ZAX,I5,NSEG,IFIX,NCOND,D2)
      CALL GASP(ZAX,3000,1,IDZ)
      WRITE(IFILE4,22) I2
   22 FORMAT(/' GLOBAL (AXIAL,RADIAL) COORDINATES FOR ENTIRE MODEL.'/
     1        ' NUMBER OF FINITE ELEMENTS IN ENTIRE MODEL, I2=',I4/
     1' ELEMENT NO.   GLOBAL AXIAL COORDINATE   GLOBAL RADIAL COORD.')
      DO 25 I = 1,I2
C BEG JAN 1996
         III = 1000 + I
         WRITE(IFILE4, 24) I, ZAX(I), ZAX(III)
C END JAN 1996
   24    FORMAT(I7, 1PE25.8, 1PE25.8)
   25 CONTINUE
C
      IDFLAG = 0
28    CONTINUE
C FOLLOWING TWO STATEMENTS ADDED 17 AUG, 1985. (DYNAMIC REACTION)
      IZZ = 0
      CALL GASP(ZAX,I2,1,IZZ)
C
C     IF (INDIC.GT.2) GO TO 30
C     THIS CALL TO SKILIN GENERATES A 'TEMPLATE' OF THE PRESTRESS MATRIX
C
      CALL SKILIN(5,3,3,IFIX,ILOC,8,M2,IMAXP,IBLKP,NGBKP,NKFP,NSEG,I5,
     1NCOND,IFX,IROWCP,IW,ITYPE,KMAXP)
      IDFLAG = 1
C
C     PREBUCKLING GLOBAL EQUATION NO.S OF W-POINTS STORED
      CALL GASP(IW,II,1,IIWP)
C     LOCATION OF MAIN-DIAGONAL OF PREBUCKLING MATRIX STORED
      CALL GASP(ILOC,M2,1,ILOCP)
30    IF (INDIC.EQ.0) GO TO 40
C
C     THIS CALL TO SKILIN GENERATES A 'TEMPLATE' OF THE STABILITY OR
C     VIBRATION OR NONSYMMETRIC STRESS MATRICES. STIFFNESS, LOAD-
C     GEOMETRIC, AND MASS MATRICES ALL HAVE THE SAME TEMPLATE.
      CALL SKILIN(7,4,4,IFIXB,ILOC,11,M3,IMAXB,IBLK,NGBK,
     1NKF,NSEG,I5,NCOND,IFXB,IROWCB,IW,ITYPEB,KMAXB)
C
C     GLOBAL EQUATION NO.S OF W-POINTS STORED FOR BUCKLING OR VIB OR
C     NON-SYMMETRIC STRESS PROBLEMS
      CALL GASP(IW,II,1,IIWB)
C     LOCATION OF MAIN-DIAGONAL OF STABILITY,VIBRATION, OR NONSYMMETRIC
C     STRESS MATRICES IS STORED
      CALL GASP(ILOC,M3,1,ILOCB)
      IF (INDSIG.EQ.1) INDIC = 4
      INDSIG = 0
40    CONTINUE
50    FORMAT(//69H DATA READ IN AND PROCESSED FOR THIS CASE. LEAVING SUB
     1ROUTINE READIT     )
      IF (NPRT.GT.0) CALL SR100T(2)
      RETURN
      END
C=DECK      OUTIN2
      SUBROUTINE OUTIN2(NTOT,ARC,INDIC,NCOND)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
      COMMON/LOADHM/NLPOS(95),LAB(95),IDAB(95),ILPOS(12,95),PALL(6000)
      COMMON/PAXTAX/PAXIAL(4,50),TAXIAL(3,50)
C     PRINTS OUT MORE INPUT DATA
      DIMENSION ARC(98)
      COMMON/NOHARM/NHARM
      COMMON/OUTP/NPRT
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/INTRG/NSTATN(95),IRING(95,20)
      COMMON/RNGGEO/RC(98),AREA(98),ER(98),IY(98),IX(98),IXY(98),IP(98)
      COMMON/RING2/GAM(98),GJ(98), YC(98), XC(98),E1(98),E2(98),PHI(100)
      COMMON/RMASS/RM(98)
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98)
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/SHEARF/SHEAR(98)
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)
      COMMON/DRGTEM/DTNR(98),DTMR(98),DTMRX(98)
      COMMON/FOSAVE/VSAVE(98),HSAVE(98),FMSAVE(98)
      COMMON/PRMOUT/IFILE3,IFILE4
      INTEGER FLAGIT
      REAL IX,IY,IXY
      FLAGIT = 0
C     WRITE OUT RING PROPERTIES FOR ALL SEGMENTS
      IF (NTOT.EQ.0) GO TO 200
      DO 10 I=1,NTOT
      VSAVE(I) = V(I)
      HSAVE(I) = HF(I)
10    FMSAVE(I) = FM(I)
      K = 0
      FLAGIT = 0
      DO 60 I=1,NSEG
      IF (NSTATN(I).EQ.0) GO TO 60
      WRITE (IFILE4,30)I
30    FORMAT(/45X,38H RING PROPERTIES FOR RINGS IN SEGMENT   I3)    
      WRITE (IFILE4,20)
20    FORMAT(/125H     STATION        ER         AREA        IY         
     1IX       IXY         E1         E2         GJ         RM          
     2RC                           /)
      NS = NSTATN(I)
      IST = 0
      DO 50 J=1,NS
      ISTSVE = IST
      IST = IRING(I,J)
      IF (ISTSVE.LT.IST) GO TO 35
      WRITE(IFILE4,34)  K,IST,I
34    FORMAT(    ///10H RING NO. I2,28H, LOCATED AT MESH POINT NO.  I2, 
     114H, SEGMENT NO.  I2,19H  IS OUT OF ORDER.     )
      WRITE(IFILE4,36)
36    FORMAT(98H LOCATIONS OF RINGS MUST CORRESPOND TO MONOTONICALLY INC
     1REASING ARC LENGTHS WITHIN EACH SEGMENT.        ///)
      FLAGIT = 1
35    K = K + 1
      WRITE (IFILE4,40)IST,ARC(K),ER(K),AREA(K),IY(K),IX(K),
     1IXY(K),E1(K),E2(K),GJ(K),RM(K),RC(K)
40    FORMAT(I5,11E11.4)
50    CONTINUE
60    CONTINUE
      DO 70 J=1,NTOT
      IF (RC(J).NE.0.0) GO TO 70
      RC(J) = 1.0
70    CONTINUE
C     WRITE OUT LOAD COMPONENTS FOR ALL SEGMENTS
C     WRITE OUT LINE LOADS FIRST
      IF (INDIC.NE.3) GO TO 80
      CALL OUTLL(4,3,ARC,NSEG,NTOT)
      GO TO 180
80    CONTINUE
C     WRITE OUT  SYMMETRICAL MECHANICAL AND THERMAL LINE LOADS
      WRITE (IFILE4,90)
90    FORMAT(//30X,60H MECHANICAL AND THERMAL LINE LOADS FOR SYMMETRIC L
     1OADING                                                    /)
      WRITE (IFILE4,100)
100   FORMAT('         STATION           AXIAL LOAD          RADIAL LOAD
     1                MOMENT      THERMAL HOOP STRESS    THERMAL MOMENT'
     2/)                                     
      WRITE (IFILE4,110)
110   FORMAT('           S(K)               V(K)                 H(K)   
     1                  M(K)              TNR(K)              TMR(K)'/)
      DO 120 K=1,NTOT
120   WRITE (IFILE4,130)ARC(K),V(K),HF(K),FM(K),TNR(K),TMR(K)
130   FORMAT(6E20.8)
      WRITE (IFILE4,140)
140   FORMAT(//45X,50H SYMMETRIC LINE LOAD INCREMENTS                   
     1/)
      WRITE (IFILE4,150)
150   FORMAT('           S(K)              DV(K)                DH(K)   
     1                 DM(K)             DTNR(K)             DTMR(K)'/)
      DO 160 K=1,NTOT
160   WRITE (IFILE4,130)ARC(K),STEP1(K),STEP2(K),STEP3(K),DTNR(K),
     1 DTMR(K)
      DO 170 K=1,NTOT
      V(K) = V(K) - STEP1(K)
      HF(K) = HF(K) - STEP2(K)
      FM(K) = FM(K) - STEP3(K)
170   CONTINUE
180   CONTINUE
      IF (INDIC.LT.3) GO TO 200
      DO 190 I=1,NTOT
      VSAVE(I) = V(I)
      HSAVE(I) = HF(I)
190   FMSAVE(I) = FM(I)
200   CONTINUE
      IF (INDIC.EQ.3) GO TO 220
      ITEST = NCOND*3 + (NSEG+1)*3 + 2*I2
      IF (ITEST.LT.2001) GO TO 220
      WRITE (IFILE4,210)ITEST
210   FORMAT(//100H MAXIMUM DEGREES-OF-FREEDOM FOR PRESTRESS ANALYSIS EX
     1CEEDED. D.O.F. SHOULD BE LESS THAN 2000. ITEST=   I5//)
      CALL ERREX
220   IF (INDIC.EQ.0) GO TO 240
      ITEST = NCOND*4 + (NSEG+1)*4 + 3*I2
      IF (ITEST.LT.3001) GO TO 240
      WRITE (IFILE4,230)ITEST
230   FORMAT(//112H MAXIMUM D.O.F. FOR STABILITY, VIBRATION OR NON-SYMME
     1TRIC STRESS ANALYSES EXCEEDED. SHOULD BE LESS THAN 3000. =   I5//)
      CALL ERREX
240   IF (NTOT.LE.98) GO TO 260
      WRITE (IFILE4,250)NTOT
250   FORMAT(//69H TOTAL NUMBER OF DISCRETE RINGS EXCEEDS MAXIMUM(98) AL
     1LOWED.  NTOT=                  I3//)
260   CONTINUE
      IF (NHARM.LT.99) GO TO 280
      WRITE (IFILE4,270)NHARM
270   FORMAT(//95H NUMBER OF STRESS HARMONICS EXCEEDS MAXIMUM ALLOWED (9
     19).  VALUE COMPUTED FROM NMIN,NMAX,INCR=   I3//)
      CALL ERREX
280   CONTINUE
      IF (FLAGIT.EQ.1) CALL ERREX
      RETURN
      END
C=DECK      OUTLL
      SUBROUTINE OUTLL(LK1,LK2,ARC,NSEG,NTOT )
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.
C     MECHANICAL AND THERMAL LINE LOADS PRINTED OUT.
C
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/SHEARF/SHEAR(98)
      COMMON/FORFIX/IOMGAB,VFIX(98),SHFIX(98),HFIX(98),FMFIX(98)
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)
      COMMON/DRGTEM/DTNR(98),DTMR(98),DTMRX(98)
      COMMON/WAVES/N0,N,MNIN,MMAX,INCR
      COMMON/PRMOUT/IFILE3,IFILE4
      DIMENSION ARC(98)
      WRITE (IFILE4,10)
10    FORMAT(//10X,' MECHANICAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC 
     1LOADING,  LOAD SYSTEM A')
      WRITE(IFILE4,40)
      WRITE (IFILE4,20)
20    FORMAT(118H         STATION           AXIAL LOAD           SHEAR L
     1OAD         RADIAL LOAD            MOMENT                        )
      WRITE (IFILE4,30)
30    FORMAT(118H           S(K)               V(K)               SHEAR(
     1K)              H(K)               M(K)                         /)
40    FORMAT(' AXIAL DISTRIBUTION OF MECHANICAL LINE LOAD MULTIPLIERS  
     1FOR ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM A'/)
      DO 50 K=1,NTOT
50    WRITE (IFILE4,60)ARC(K),V(K),SHEAR(K),HF(K),FM(K)
60    FORMAT(5E20.8)
      WRITE (IFILE4,70)
70    FORMAT(//20X,' THERMAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC LOAD
     1ING, LOAD SYSTEM A')
      WRITE(IFILE4,90)
      WRITE (IFILE4,80)
80    FORMAT(100H         STATION              TNR                   TMR
     1                   TMRX                        /)
90    FORMAT(/' AXIAL DISTRIBUTION OF THERMAL LINE LOAD MULTIPLIERS FOR 
     1ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM A'/)
      DO 100 K=1,NTOT
100   WRITE (IFILE4,105)ARC(K),TNR(K),TMR(K),TMRX(K)
105   FORMAT(4E20.8)
C
      WRITE(IFILE4,110)
  110 FORMAT(//10X,' MECHANICAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC L
     1OADING, LOAD SYSTEM B')
      WRITE(IFILE4,140)
  140 FORMAT(' AXIAL DISTRIBUTION OF MECHANICAL LINE LOAD MULTIPLIERS FO
     1R ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM B'/)
      WRITE(IFILE4,20)
      WRITE(IFILE4,30)
      DO 150 K = 1,NTOT
  150 WRITE(IFILE4,60) ARC(K),VFIX(K), SHFIX(K),HFIX(K),FMFIX(K)
C
      WRITE(IFILE4,170)
  170 FORMAT(//20X,' THERMAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC LOAD
     1ING, LOAD SYSTEM B')
      WRITE(IFILE4,190)
  190 FORMAT(/' AXIAL DISTRIBUTION OF THERMAL LINE LOAD MULTIPLIERS FOR 
     1ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM B'/)
      WRITE(IFILE4,80)
      DO 200 K = 1,NTOT
  200 WRITE(IFILE4,105) ARC(K),DTNR(K),DTMR(K),DTMRX(K)
C
      RETURN
      END
C=DECK      ZGLOBE
      SUBROUTINE ZGLOBE(Z,I5,NSEG,IFIX,NCOND,D2)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      DIMENSION IFIX(98,6),Z(1000),IBEGIN(95),ISEG(95),D2(50),I5(95)
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/PRMOUT/IFILE3,IFILE4
      IF (NCOND.EQ.0) GO TO 100
      IBEGIN(1) = 1
      DO 10 I=2,NSEG
      I1 = I - 1
10    IBEGIN(I) = IBEGIN(I1) + I5(I1)
      DO 20 I=1,NSEG
20    ISEG(I) = 0
      ISEG(1) = 1
      K = 1
      ITHRU = 0
30    IF (K.GE.NSEG) GO TO 100
      ITHRU = ITHRU + 1
      IF (ITHRU.LT.1000) GO TO 34
      WRITE(IFILE4,32)
32    FORMAT(//75H SEGMENTS NOT ALL JOINED TOGETHER. INSPECT JUNCTURE CO
     1NDITIONS CAREFULLY.                                 )
      CALL ERREX
34    CONTINUE
      DO 90 I=1,NCOND
      IT1 = IFIX(I,1)/1000
      IT2 = IFIX(I,2)/1000
      IF (IT1.EQ.IT2) GO TO 90
      JSAVE1 = 0
      JSAVE2 = 0
      DO 50 J=1,NSEG
      IF (IT1.NE.ISEG(J)) GO TO 40
      JSAVE1 = J
40    IF (IT2.NE.ISEG(J)) GO TO 50
      JSAVE2 = J
50    CONTINUE
      IF (JSAVE1.NE.0.AND.JSAVE2.NE.0) GO TO 90
      IF (JSAVE1.EQ.0.AND.JSAVE2.EQ.0) GO TO 90
      IZ1 = IFIX(I,1) -IT1*1000
      IZ2 = IFIX(I,2) - IT2*1000
      I1 = IBEGIN(IT1)
      I2 = IBEGIN(IT2)
      D = D2(I)
      IF (IT1.GT.IT2) D = -D2(I)
      ISUM1 = I1 + IZ1 - 1
      ISUM2 = I2 + IZ2 - 1
      IF (JSAVE1.EQ.0) GO TO 70
      ZDIFF = Z(ISUM1) + D - Z(ISUM2)
      IEND = I2 + I5(IT2) - 1
      DO 60 II=I2,IEND
60    Z(II) = Z(II) + ZDIFF
      K = K + 1
      ISEG(K) = IT2
      GO TO 90
70    CONTINUE
      ZDIFF = - Z(ISUM1)- D + Z(ISUM2)
      IEND = I1 + I5(IT1) - 1
      DO 80 II=I1,IEND
80    Z(II) = Z(II) + ZDIFF
      K = K + 1
      ISEG(K) = IT1
90    CONTINUE
      GO TO 30
100   CONTINUE
      IF (JPLOT.EQ.0) GO TO 130
      II = 0
      K = 1
      DO 120 J=1,NSEG
      I5J = I5(J)
      DO 110 I=1,I5J
      II = II + 1
      ISTA = J*1000 + I
  105 CONTINUE
      IF (K.GT.JPLOT) GO TO 130
      IF (KPLOT(K).NE.ISTA) GO TO 110
      KPLOT(K) = II
      K = K + 1
      GO TO 105
110   CONTINUE
120   CONTINUE
130   CONTINUE
      RETURN
      END
C=DECK      SKILIN
      SUBROUTINE SKILIN(N,K,IC,IFIX,ILOC,     IBAND,IROW,IMAX,IBLK,
     1NGBK,NKF,NSEG,I5,NCOND,IFX,IROWC,IW,ITYPE,KMAX)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      DIMENSION IFIX(98,6),IKF(3000),IRANK(95),NGBK(20),NKF(20),KMAX(20)
      COMMON/OUTP/NPRT
      COMMON/PRMOUT/IFILE3,IFILE4
      DIMENSION INDX(98),I5(95),ITYPE(98),ILOC(3000)
      DIMENSION IW(1000),IROWC(98),IEXP(98),IFX(98,6)
C     THIS SUBROUTINE CALCULATES SKYLINE AND BLOC CONFIGURATION OF PRE-
C     BUCKLING AND STABILITY STIFFNESS MATRICES.SKYLINE DEPENDS ON CON-
C     STRAINT CONDITION TYPE, WHICH CAN BE DETERMINED FROM THE ARRAY
C     IFIX(I,J). THE MESH POINT DESIGNATED BY IFIX(I,1) IS CONNECTED
C     TO THAT DESIGNATED BY IFIX(I,2), IN WHICH IFIX(I,2).GT.IFIX(I,1).
C     ELEMENTS OF THE VECTOR IFIX(I,2) ARE ARRANGED IN ASCENDING ORDER.
C     I5(J) CONTAINS THE NUMBER OF MESH POINTS AT WHICH ENERGY IS
C     EVALUATED IN THE JTH SEGMENT.
C
C     IFIX(I,3) THROUGH IFIX(I,6) CONTAIN EITHER ONE OR ZERO,
C     DEPENDING UPON WHETHER OR NOT CONSTRAINT CONDITIONS CORRES-
C     PONDING TO USTAR,VSTAR,WSTAR,AND BETA ARE TO BE ENFORCED.
C
C     CONSTRAINT CONDITION INDICATOR IFIX(I,J) MUST BE ORDERED PROPERLY
C     BEFORE MATRIX CONFIGURATION ESTABLISHED.
C
      IF (NCOND.GE.2) CALL SORT(IFIX,NCOND,2)
      I5TOT = 0
      IF (NCOND.EQ.0) GO TO 30
      DO 20 I=1,NCOND
      JSEG = IFIX(I,2)/1000
      IDIF = IFIX(I,2) - IFIX(I,1)
      IF (IDIF.EQ.1.OR.IDIF.EQ.2) WRITE(IFILE4,10 ) I
      IF (IDIF.EQ.1.OR.IDIF.EQ.2) CALL ERREX
10    FORMAT(//29H CONSTRAINT CONDITION NUMBER      I3,13H IS ILLEGAL.  
     1/59H THE FOLLOWING RULES FOR CONSTRAINT CONDITIONS EXIST...       
     1/59H                                                              
     1/59H 1. CONSTRAINTS TO GROUND MUST HAVE AT LEAST TWO INTERMED-    
     1/59H    IATE NODES THAT ARE NOT CONSTRAINED.                      
     1/61H 2. IF SEVERAL SEGMENTS ARE JOINED AT ONE POINT, THE HIGHER-  
     1/61H    NUMBERED SEGMENTS SHOULD EACH BE ATTACHED TO THE LOWEST   
     1/59H    NUMBERED SEGMENT INVOLVED IN THE JUNCTION.                
     1/61H 3. IF THE END OF SEG.  J  IS CONNECTED TO ANY PREVIOUS POINT 
     1/61H    OR TO GROUND (B.C.), THEN THE BEGINNING OF SEGMENT  J + 1 
     1/59H    CANNOT BE CONNECTED TO THE END OF SEGMENT  J .            
     1/61H 4. IF A POINT  A  IS INVOLVED IN A JUNCTURE CONDITION WITH A 
     1/61H    PREVIOUS NON-ADJACENT POINT  B ,  THAT POINT  A  CANNOT   
     1/59H    ALSO BE CONSTRAINED TO GROUND.   NOTE THAT THE FIRST      
     1/61H    POINT IN SEG.  J+1  IS CONSIDERED TO BE ADJACENT TO THE   
     1/49H    LAST POINT IN SEG.  J .                                  )
      IEXP(I) = 0
      ITYPE(I) = 0
20    IROWC(I) = 0
30    IROW = 0
      ITYPE(1) = 0
      IF (NCOND.EQ.0) IFIX(1,2) = 0
      IF (NCOND.EQ.0) IFX(1,1) = 0
      ITOT = 1
      DO 40 I=1,3000
40    IKF(I) = N-1
C     SKYLINE STORED IN ARRAY IKF(II)
      DO 310 J=1,NSEG
      DO 50 I=1,N
      IROWI = IROW + I
50    IKF(IROWI) = I - 1
C     FIRST GET NUMBER OF CONSTRAINT CONDITIONS WITHIN CURRENT SEGMENT.
      ITEST = J*1000 + I5(J)
      INDX(J) = 0
      IF (NCOND.EQ.0) GO TO 70
      DO 60 I=ITOT,NCOND
      IDIF = ITEST - IFIX(I,2)
      IF (IDIF.LT.0) GO TO 70
      INDX(J) = INDX(J) + 1
60    CONTINUE
70    CONTINUE
C     INDX(J) NOW EQUAL TO NO. OF CONSTRAINT CONDS. IN JTH SEGMENT.
      ITOTS = ITOT
      ITOT = ITOT + INDX(J)
C     ESTABLISH RANK OF EQUATION SYSTEM CORRESPONDING TO JTH SEGMENT.
      IRANK(J) = (N-K)*I5(J) + INDX(J)*IC + K
C     N = DIMENSION OF THE LOCAL ENERGY MATRIX.
C     K = OVERLAP DIMENSION OF THE LOCAL ENERGY MATRICES
C     IC= NUMBER OF CONSTRAINT CONDITIONS CORRESPONDING TO GIVEN IFIX(I,
C
      IF (INDX(J).EQ.0) GO TO 300
      ITOT1 = ITOT - 1
      DO 290 I=ITOTS,ITOT1
      IDIF = IFIX(I,2) - IFIX(I,1)
      IDIFB = ITEST - IFIX(I,2)
      IF (IDIF.NE.0) GO TO 80
C
C     IDIF=0 SIGNIFIES A SIMPLE 'ONE-SIDED' CONSTRAINT CONDITION RATHER
C     THAN A JUNCTURE CONDITION. DETERMINE NOW WHETHER CONDITION
C     CORRESPONDS TO SEGMENT END.
C
      ITYPE(I) = 1
      IF (IDIFB.EQ.0) ITYPE(I) = 2
C     ITYPE(I) = 1 SIGNIFIES SIMPLE CONSTRAINT CONDITION NOT AT END OF
C     SEGMENT.
C     ITYPE(I) = 2 SIGNIFIES BOUNDARY CONDITION AT END OF SEGMENT.
      GO TO 100
80    CONTINUE
      IF (IDIFB.EQ.0) ITYPE(I) = 3
C
C     ITYPE(I) = 3 SIGNIFIES SEGMENT END CONNECTED TO NON-ADJACENT
C     PREVIOUS POINT.
C
      IF (IDIFB.EQ.0) GO TO 100
      ITYPE(I) = 4
C     ITYPE(I) = 4 SIGNIFIES JUNCTURE COND. NOT AT END I5(J) OF JTH SEG.
C
      JMESH = IFIX(I,2) - J*1000
      IF (JMESH.EQ.1) GO TO 90
      GO TO 100
90    CONTINUE
C     JUNCTURE CONDITION AT BEGINNING OF JTH SEGMENT.
      L = IFIX(I,1)/1000
      LMESH = IFIX(I,1) - L*1000
      IF (LMESH.NE.I5(L)) GO TO 100
      IF ((J-L).EQ.1) ITYPE(I) = 5
C     ITYPE(I) = 5 SIGNIFIES END OF SEGMENT L JOINED TO BEGINNING
C     OF SEGMENT L+ 1.   (L+1 = J)
100   CONTINUE
C     NOW WE HAVE DETERMINED IRANK(J) AND ITYPE(I).
C     NOW DETERMINE THE SKYLINE ARRAY IKF(II) DEPENDING ON TYPE OF
C     CONSTRAINT CONDITION.
C
      IT = ITYPE(I)
      GO TO (130,110,130,130,260),IT
110   CONTINUE
C     BOUNDARY CONDITION AT END OF SEGMENT.....
C
      I1 = IROW + IRANK(J) - IC + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      DO 120 II=I1,I2
120   IKF(II) = II - I1 + N
      GO TO 290
130   CONTINUE
C     CONSTRAINT CONDITIONS CORRESPONDING TO ITYPE(I) = 1,3, AND 4....
C
C     FIRST CALCULATE ROW NUMBER OF ITYPE(I) = 1,3, AND 4 CONSTRAINTS..
C
      ICON = I - ITOTS
      JJMESH = 0
C     ICON = NO. OF CONSTRAINT PTS IN THE JTH SEG. PRECEDING THE CURRENT
C     CONSTRAINT POINT.
      JMESH = IFIX(I,2) - J*1000
      IF (JMESH.NE.1) GO TO 160
      IF (I.NE.ITOTS) GO TO 140
      I1 = I + 1
      JJMESH = IFIX(I1,2) - J*1000
      IF (JJMESH.EQ.1) ICON = 1
140   I1 = IROW + 1 + IC*ICON
      I2 = IROW + N + IC*ICON
      DO 150 II=I1,I2
150   IKF(II) = II - I1 + IC*ICON
160   CONTINUE
      I1 = IROW + IC*ICON + (N-K)*JMESH + K + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      IF (ITYPE(I).EQ.4.OR.ITYPE(I).EQ.1) IEXP(I) = I1
C     FOLLOWING TWO STATEMENTS APPLY IF ITYPE(I) = 1
      DO 170 II=I1,I2
170   IKF(II) = N + II - I1
      IF (ITYPE(I).EQ.1) GO TO 240
C     NOW GET BANDWIDTH OF ITYPE(I) = 3,4 BRANCH CONDITION EQUATIONS.
C     FIRST ESTABLISH HOW MANY CONSTRAINT CONDS. EXIST BETWEEN THE CUR-
C     RENT ONE , IFIX(I,2) AND THE CORRESPONDING IFIX(I,1).
C
      DO 180 II=1,NCOND
      IDIF = IFIX(I,1) - IFIX(II,2)
      IF (IDIF.LE.0) GO TO 190
180   CONTINUE
190   NUMB = I - II
      IIM = II - 1
      IF (JJMESH.EQ.1) NUMB = NUMB + 1
      IF (IIM.EQ.0) GO TO 200
      IF ((IFIX(I,1)-IFIX(IIM,2)).GT.2) GO TO 200
      IF (ITYPE(IIM).EQ.1.OR.ITYPE(IIM).EQ.4) NUMB = NUMB + 1
200   CONTINUE
C     NUMB IS THE NUMBER OF CONSTRAINT PTS SPANNED BY THE JUNCTURE COND.
C     NOT INCLUDING THE CURRENT CONSTRAINT COND.. NOW FIND THE NO. OF
C     ENERGY POINTS SPANNED BY THE JUNCTURE CONDITION.
C
      L = IFIX(I,1)/1000
      LMESH = IFIX(I,1) - L*1000
      JMESH = IFIX(I,2) - J*1000
      J1 = J - 1
      NPTS = JMESH - LMESH + 1
      IF (L.GT.J1) GO TO 220
      DO 210 II=L,J1
210   NPTS = NPTS + I5(II)
220   CONTINUE
C     NPTS IS NO. OF ENERGY PTS SPANNED BY JUNCTURE COND. CALCULATE
C     SEMI-BANDWIDTH OF JUNCTURE CONDITION.
      DO 230 II=I1,I2
      IKF(II) = (N-K)*NPTS + IC*NUMB + IC + K + (J-L)*K - 1 + II - I2
230   CONTINUE
      IF (ITYPE(I).EQ.3) GO TO 290
240   I1 = I2 + 1
      I2 = I1 + N - 2
      DO 250 II=I1,I2
250   IKF(II) = IBAND - 1
      GO TO 290
260   CONTINUE
C     ITYPE(I) = 5 JUNCTURE  (SEGMENTS IN SERIES).
C
      I1 = IROW + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      DO 270 II=I1,I2
270   IKF(II) = II - I1 + N
      I1 = I2 + 1
      I2 = I1 + N - 1
      DO 280 II=I1,I2
280   IKF(II) = II - I1 + IC
290   CONTINUE
C     END OF LOOP ON I.
300   I5TOT = I5TOT + I5(J) + 2
      IROW = IROW + IRANK(J)
310   CONTINUE
C     END OF LOOP ON J  (LOOP OVER ALL SEGMENTS).
C
C     ALTER IRANK(J),INDX(J) CORRESPONDING TO CONSTRAINT CONDITIONS
C     OF THE TYPE ITYPE(I)=5
C
      IF (NCOND.EQ.0) GO TO 350
      DO 330 I=1,NCOND
      IF (ITYPE(I).EQ.5) GO TO 320
      GO TO 330
320   J = IFIX(I,2)/1000
      IF (J.EQ.1) WRITE (IFILE4,10)I
      IF (J.EQ.1) CALL ERREX
      IRANK(J) = IRANK(J) - IC
      IRANK(J-1) = IRANK(J-1) + IC
      INDX(J) = INDX(J) - 1
      INDX(J-1) = INDX(J-1) + 1
330   CONTINUE
C     SORT TO GET ARRAY IFX(50,2) WITH IFX(I,1) CONTAINING MONOTONICAL-
C     LY INCREASING IFIX(I,1) AND IFX(I,2) CONTAINING CORRESPONDING
C     VALUES OF IROWC(I), THE ROW NUMBERS OF THE CONSTRAINT EQUATIONS.
C
      DO 340 I=1,NCOND
      IFX(I,1) = IFIX(I,1)
      IFX(I,2) = IROWC(I)
      DO 340 J=3,6
340   IFX(I,J) = IFIX(I,J)
      IF (NCOND.GE.2) CALL SORT(IFX,NCOND,1)
350   CONTINUE
      CALL GETIW(NSEG,I5,IFIX,N,K,IC,IW,IRANK,INDX)
C
C
C     NOW GET BLOCKS FOR STORAGE ON DRUM.
C     IBLK = NUMBER OF BLOCKS
C     IROW = RANK OF EQUATION SYSTEM
C     IBAND = NOMINAL BANDWIDTH ( 8 FOR PREBUCKLING, 11 FOR STABILITY)
C     NGBK( ) = ROW NUMBER OF LAST EQUATION IN ()TH BLOCK
C     NKF( ) = LOWEST UNKNOWN NUMBER REFERENCED IN ()TH BLOCK
C     IMAX = MAXIMUM NUMBER OF ELEMENTS IN A BLOCK
C
      CALL GETBLK(IBLK,IROW,IMAX,IKF,NGBK,NKF,ILOC,IRANK,NSEG,KMAX)
C     WRITE OUT INPUT AND CALCULATED DATA FOR MATRIX CONFIGURATION.
C
      IF (NCOND.EQ.0) GO TO 400
      IF (N.EQ.5) WRITE (IFILE4,360)
360   FORMAT(///61H AXISYMMETRIC PRESTRESS INPUT CONSTRAINT CONDITIONS F
     1OLLOW      //)
      IF (N.EQ.7) WRITE (IFILE4,370)
370   FORMAT(///82H STABILITY,VIBRATION OR NON-SYMMETRIC STRESS INPUT CO
     1NSTRAINT CONDITIONS FOLLOW        //)
      DO 390 I=1,NCOND
      ISEG1 = IFIX(I,1)/1000
      ISEG2 = IFIX(I,2)/1000
      IPT1 = IFIX(I,1) - ISEG1*1000
      IPT2 = IFIX(I,2) - ISEG2*1000
      WRITE (IFILE4,380)I,ISEG1,IPT1,ISEG2,IPT2,ITYPE(I)
      IF (IPT1.GT.I5(ISEG1)) WRITE (IFILE4,10)I
      IF (IPT2.GT.I5(ISEG2)) WRITE (IFILE4,10)I
      IF (IPT1.GT.I5(ISEG1).OR.IPT2.GT.I5(ISEG2)) CALL ERREX
380   FORMAT(16H CONSTRAINT NO.  I3,13H SEGMENT NO.  I3,7H POINT   I3,  
     125H CONNECTED TO SEGMENT NO.   I3,7H POINT  I3,                   
     225H...TYPE OF CONSTRAINT =   I2 )
390   CONTINUE
400   WRITE (IFILE4,410)N,K,IC,IROW,IBLK
410   FORMAT(//25H LOCAL MATRIX DIMENSION=  I2,10H OVERLAP=  I2,        
     145H NO. CONSTRAINT CONDS. PER CONSTRAINT POINT=    I2,            
     214H SYSTEM RANK=   I4,19H NUMBER OF BLOCKS=   I3  //)
      DO 430 I=1,NSEG
      WRITE (IFILE4,420)I,IRANK(I),INDX(I)
420   FORMAT(49H NUMBER OF EQUATIONS ASSOCIATED WITH SEGMENT NO.    I2, 
     18H EQUALS   I3,34H.   NO. OF CONSTRAINT PTS. EQUALS    I3)
430   CONTINUE
      DO 450 I=1,IBLK
      WRITE (IFILE4,440)I,NGBK(I),NKF(I),KMAX(I)
440   FORMAT(14H BLOCK NUMBER=  I3,20H LAST EQ. IN BLOCK=  I4,          
     122H LOWEST UNK IN BLOCK=    I4,26H. MAX. OFF-DIAGONAL WIDTH= I4)
450   CONTINUE
      IF (NPRT.LT.3) GO TO 560
      WRITE (IFILE4,460)
460   FORMAT(//34H SKYLINE OF GLOBAL MATRIX FOLLOWS    //)
      DO 480 I=1,IROW
      WRITE (IFILE4,470)I,IKF(I),ILOC(I)
470   FORMAT(16H EQUATION NUMBER  I4,23H OFF DIAGONAL ELEMENTS=  I4,    
     132H REL. POSITION OF M.D. IN BLOCK=    I4)
480   CONTINUE
      WRITE (IFILE4,490)
490   FORMAT(//49H EQUATION NUMBERS OF CONSTRAINT CONDITIONS FOLLOW  //)
      IF (NCOND.EQ.0) GO TO 520
      DO 510 I=1,NCOND
      WRITE (IFILE4,500)I,IC,IROWC(I),I,IEXP(I)
500   FORMAT(15H CONSTRAINT NO.  I3,23H EQUA. NO. OF FIRST OF    I2,    
     122H CONSTRAINT EQUATIONS=  I4,6H IEXP(  I2,3H)=  I4,              
     239H.IF IEXP( ).NE.0, LOCAL MATRIX EXPLODED        )
510   CONTINUE
520   WRITE (IFILE4,530)
530   FORMAT(//50H EQUATION NUMBERS CORRESPONDING TO W-POINTS FOLLOW //)
      DO 550 I=1,I5TOT
      WRITE (IFILE4,540)I,IW(I)
540   FORMAT(22H GLOBAL MESH POINT NO.  I3,29H CORRESPONDING EQUATION NO
     1.=          I4)
550   CONTINUE
560   CONTINUE
C     CHECK FOR LEGALITY OF CONSTRAINT CONDITIONS.
C
      IF (NCOND.LT.2) RETURN
      ISET = 0
      DO 570 I=2,NCOND
      JSEG = IFIX(I,2)/1000
      I1 = I - 1
      IDIF = IROWC(I) - IROWC(I1)
      IF (IABS(IDIF).GE.(IC+N)) GO TO 570
      ISET = 1
      WRITE(IFILE4,10 ) I
570   CONTINUE
      IF (ISET.EQ.1) CALL ERREX
      RETURN
      END
C=DECK      SORT
      SUBROUTINE SORT(IFIX,NCOND,M)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM SKILIN, WHICH IS CALLED FROM READIT
C     SORTS CONSTRAINT CONDITIONS AND ASSOCIATED DISCONTINUITIES D1,D2
      DIMENSION IFIX(98,6)
      COMMON/RING3/D1(98),D2(98)
      COMMON/DFLAG/IDFLAG
      IF (M.EQ.1) GO TO 20
      DO 10 I=1,NCOND
      IF (IFIX(I,1).LE.IFIX(I,2)) GO TO 10
      ITEMP = IFIX(I,1)
      IFIX(I,1) = IFIX(I,2)
      IFIX(I,2) = ITEMP
10    CONTINUE
20    CONTINUE
      DO 50 L=2,NCOND
      K = NCOND + 2 - L
      DO 40 I=2,K
      I1 = I - 1
      IF (IFIX(I1,M).LE.IFIX(I,M)) GO TO 40
      DO 30 J=1,6
      ITEMP = IFIX(I1,J)
      IFIX(I1,J) = IFIX(I,J)
      IFIX(I,J) = ITEMP
30    CONTINUE
      IF (IDFLAG.EQ.1) GO TO 40
      DTEM = D1(I1)
      D1(I1) = D1(I)
      D1(I) = DTEM
      DTEM = D2(I1)
      D2(I1) = D2(I)
      D2(I) = DTEM
40    CONTINUE
50    CONTINUE
      RETURN
      END
C=DECK      GETIW
      SUBROUTINE GETIW(NSEG,I5,IFIX,N,K,IC,IW,IRANK,INDX)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM SKILIN, WHOSE TRACE IS READIT,MAIN.
C     STORES GLOBAL EQUATION NUMBERS CORRESPONDING TO W-COMPONENTS IN IW
C
      DIMENSION I5(95),IFIX(98,6),IW(1000),IRANK(95),INDX(95)
      ICONDT = 0
      I5TOT = 0
      IROW = 0
      DO 30 ISEG=1,NSEG
      ICOND = ICONDT + 1
      ICONDT = ICONDT + INDX(ISEG)
      IW(I5TOT+1) = IROW + 1
      I5S = I5(ISEG)
      DO 20 I=1,I5S
      II = I5TOT + I + 1
      KIC = 0
      IF (ICOND.GT.ICONDT) GO TO 10
      JMESH = IFIX(ICOND,2) - ISEG*1000
      IF (I.EQ.(JMESH+2)) KIC = 1
      IF (I.EQ.(JMESH+2)) ICOND = ICOND + 1
10    IW(II) = IW(II-1) + N - K + KIC*IC
20    CONTINUE
      KIC = 0
      IF ((JMESH+1).EQ.I5S) KIC = 1
      IW(II+1) = IW(II) + N - K + KIC*IC
      I5TOT = I5TOT + I5S + 2
      IROW = IROW + IRANK(ISEG)
30    CONTINUE
      RETURN
      END
C=DECK      GETBLK
      SUBROUTINE GETBLK(IBLK,IROW,IMAX,IKF,NGBK,NKF,ILOC,IRANK,NSEG,KMAX
     1)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALCULATES LAST ROW NO. OF EACH BLOCK,NGBK(J)
C                TOTAL NUMBER OF BLOCKS,IBLK
C                MINIMUM UNKNOWN NO. IN EACH BLOCK, NKF(J)
C                LOCATION ILOC(II) OF ALL MAIN DIAGONAL ELEMENTS
C
C
C     END OF BLOCK ALWAYS COINCIDES WITH END OF SEGMENT.
C
      DIMENSION IKF(3000),ILOC(3000),NGBK(20),NKF(20),KMAX(20)
      DIMENSION IRANK(95),ITOT(95),ILAST(95)
      COMMON/PRMOUT/IFILE3,IFILE4
C
C     CALCULATE TOTAL NUMBER OF ELEMENTS IN EACH SEGMENT,ITOT(J),
C     AND THE EQUATION NUMBER OF THE LAST EQUATION IN EACH SEGMENT,
C     ILAST(J).
C
      II = 0
      DO 30 J=1,NSEG
      IRANKJ = IRANK(J)
      ITOT(J) = 0
      DO 10 I=1,IRANKJ
      II = II + 1
      ITOT(J) = ITOT(J) + IKF(II) + 1
10    CONTINUE
      IF (ITOT(J).GT.IMAX) WRITE (IFILE4,20)ITOT(J),J,IMAX
20    FORMAT(//11H BLOCK SIZE I5,12H OF SEG. NO. I3,24H EXCEEDS MAX. ALL
     1OWABLE I5,53H. RUN ABORT. REDUCE DEG. OF FREEDOM OR RENUMBER SEGS.
     1/59H THIS MESSAGE USUALLY RESULTS FROM A JUNCTURE CONDITION       
     1/59H THAT SPANS MANY DEGREES OF FREEDOM ,OR FROM A GIVEN HIGH-    
     1/59H NUMBERED SEGMENT THAT IS CONNECTED AT SEVERAL DIFFERENT      
     1/59H POINTS ALONG ITS LENGTH TO LOWER NUMBERED SEGMENTS.          
     1/59H IN THE FORMER CASE RENUMBERING SEGMENTS HELPS. IN THE        
     1/59H LATTER CASE, DIVIDE UP THE OFFENDING SEGMENT INTO MORE       
     1/59H THAN ONE SEGMENT SUCH THAT THE SEVERAL JUNCTURE CONDI-       
     1/59H TIONS FALL INTO DIFFERENT HIGHER NUMBERED SEGMENTS.          
     2//)
      IF (ITOT(J).GT.IMAX) CALL ERREX
      ILAST(J) = II
30    CONTINUE
C
C     GIVEN IMAX, CALCULATE TOTAL NUMBER OF BLOCKS, IBLK AND EQUATION
C     NUMBER OF LAST EQUATION IN BLOCKS, NGBK(J).
C
      ISUM = 0
      IBLK = 1
      J = 1
40    ISUM = ISUM + ITOT(J)
      IF (ISUM-IMAX) 60,60,50
50    J = J - 1
      ISUM = 0
      NGBK(IBLK) = ILAST(J)
      IBLK = IBLK + 1
60    J = J + 1
      IF (J.GT.NSEG) GO TO 70
      GO TO 40
70    CONTINUE
      NGBK(IBLK) = IROW
C
C     CALCULATE ILOC(II),NKF(J). .
C        ILOC(II) = LOCATION IN CURRENT BLOCK OF MAIN DIAGONAL
C        NKF(J) = MINIMUM UNKNOWN NUMBER IN JTH BLOCK
C
      II = 0
      ILASTJ = 0
      DO 90 J=1,IBLK
      NKF(J) = IROW
      ISUM = 0
      KMAX(J) = 0
      ILASTS = ILASTJ + 1
      ILASTJ = NGBK(J)
      DO 80 I=ILASTS,ILASTJ
      II = II + 1
      ISUM = ISUM + IKF(II) +1
      ILOC(II) = ISUM
      NKF(J) = MIN0(NKF(J),(II-IKF(II)))
      KMAX(J) = MAX0(KMAX(J),IKF(II))
80    CONTINUE
90    CONTINUE
      RETURN
      END
