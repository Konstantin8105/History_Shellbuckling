C=DECK      RZLGLIB
C
C  THIS IS THE RZLG LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      RZLG
      SUBROUTINE RZLG(BBB,S,ZAX,DS)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     DISCRETE RING INPUT FOR RINGS BELONGING TO ITH SEGMENT
C     NRINGS = NUMBER OF DISCRETE RINGS IN CURRENT SEGMENT. USER MUST
C              PUT DISCRETE RINGS AT STATIONS WHERE LINE LOADS OCCUR
C
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(98),TT(600)
      COMMON/SEGS/NSEG,M2,I5(95),I2,I2G
      COMMON/NOHARM/NHARM
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/TEMGRD/NTGRAD
      COMMON/RGFCE/RHF(98)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/FNDAT/FSTIF(95)
      COMMON/LOADHM/NLPOS(95),LAB(95),IDAB(95),ILPOS(12,95),PALL(6000)
      COMMON/PAXTAX/PAXIAL(4,50),TAXIAL(3,50)
      CHARACTER*4 CHARAC
      DIMENSION BBB(10000),S(1000),ZAX(1000),DS(1000)
10    FORMAT(10I6)
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ DISCRETE RING INPUT FOLLOWS...')
      CALL DATUM(IFILE2,148,1,2,NRINGS,REALL,CHARAC,IOUT,0,1)
      IF (NRINGS.LE.-1.OR.NRINGS.GT.20) THEN
      WRITE(6,*)' NRINGS IS NOT IN THE PERMISSIBLE RANGE, 0 TO 20 .'
      CALL ERREX
      ENDIF
C     DISCRETE RING PROPERTIES READ IN IN RGDATA
C
      IF (NRINGS.NE.0) CALL RGDATA(I,BBB(22*I5I+IPOS),BBB(23*I5I+IPOS),
     1BBB(25*I5I+IPOS),KRING,S(ITOT),SEND,NRINGS,ARC,I5I,ITOT,ZAX(ITOT))
C
C     ELASTIC FOUNDATION STIFFNESS INPUT...
      FSTIF(I) = 0.
      CALL DATUM(IFILE2,190,1,2,INT,FSTIF(I),CHARAC,IOUT,0,1)
C
C     LOAD INPUT
C     ZERO OUT SOME LOAD QUANTITIES
      CALL ZEROIT(I,I5I,BBB(IPOS),BBB(8*I5I+IPOS),BBB(27*I5I+IPOS),
     1BBB(33*I5I+IPOS),BBB(36*I5I+IPOS),BBB(39*I5I+IPOS),TT,NSEG)
C     MECHANICAL AND THERMAL LINE LOADS AND MECHANICAL DISTRIBUTED
C     LOADS AND TEMPERATURE DISTRIBUTION ARE READ IN IN LOADER.
C
      IF (I.GT.1) NLPOS(I) = NLPOS(I-1)
      IF (IPRE.NE.0)
     1CALL LOADRE(I,KRINGS,NRINGS,NSEG,NHARM,NTGRAD,I5I,BBB(27*I5I+IPOS
     2),TT,ZAX(ITOT),BBB(22*I5I+IPOS),BBB(23*I5I+IPOS),S(ITOT),
     3 NLPOS(I),ILPOS(1,I),PALL,LAB(I),IDAB(I),ITOT,BBB(25*I5I+IPOS),
     4 DS(ITOT))
C
C     INPUT PRESTRESS DIRECTLY
C
      IF (IPRE.EQ.0)
     1CALL GETPST(I,I5I,BBB(33*I5I+IPOS),RHF,S(ITOT),BBB(22*I5I+IPOS),
     2BBB(23*I5I+IPOS),ZAX(ITOT))
      RETURN
      END
C=DECK      RGDATA
      SUBROUTINE RGDATA(I,RAD,RADD,CUR2,K,S,SEND,NRINGS,ARC,I5,ITOT,Z)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.
C     RING DATA FOR THE DISCRETE RINGS IN THE ITH SEGMENT ARE READ IN.
C     ANY RING CROSS-SECTION MAY BE ORIENTED IN THE PLANE OF THE
C     PARALLEL CIRCLE OF THE SHELL OF REVOLUTION, OR NORMAL TO THE
C     UNDEFORMED SHELL MERIDIAN.
C     THE RINGS ARE CONSIDERED TO BE ATTACHED TO THE SHELL REFERENCE
C     SURFACE AT A SINGLE MESH POINT, ISTATN. THE CROSS-SECTION HAS
C     THE SAME ROTATION AS THE ROTATION OF THE SHELL WALL AT THAT
C     MESH STATION.  THE CENTROID AND SHEAR CENTER
C     ARE CONSIDERED TO COINCIDE IN THE THEORY, AND WARPING IS NEGLECTED
C
      DIMENSION RAD(*),RADD(*),CUR2(*),ZC(98),SC(98),NTYPER(20)
      DIMENSION S(*),ARC(*),IRG(20),Z(*)
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
      COMMON/RNGGEO/RC(98),AREA(98),ER(98),IY(98),IX(98),IXY(98),IP(98)
      COMMON/RING2/GAM(98),GJ(98), YC(98), XC(98),E1(98),E2(98),PHI(100)
      COMMON/RMASS/RM(98)
      COMMON/INERT/ FIS(98),FIN(98),FISN(98)
      COMMON/INTRG/NSTATN(95),IRING(95,20)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/JRING/JJRING
      CHARACTER*4 CHARAC
      REAL IS,IN,ISN,IX,IY,IXY,IP
      IF (NRINGS.LT.21) GO TO 20
      WRITE (6,10)I,NRINGS
10    FORMAT(//33H NRINGS TOO LARGE FOR SEGMENT NO.  I3,40H.  MAXIMUM AL
     1LOWABLE=20. VALUE READ IN=    I3//)
      CALL ERREX
20    CONTINUE
      DO 30 J=1,20
      IRING(I,J) = 0
30    NTYPER(J) = 0
40    FORMAT(10I6)
50    FORMAT(6E12.8)
C
C     NUMBER OF RINGS IN SEGMENT = NRINGS. THIS INCLUDES RINGS AT
C     SEGMENT BOUNDARIES WHICH HAVE NOT BEEN INCLUDED IN PREVIOUS
C     SEGMENT. REMEMBER FICTITIOUS RINGS CORRESPONDING TO STATIONS
C     AT WHICH LINE MECHANICAL OR THERMAL LOADS EXIST.
C
      NSTATN(I) = NRINGS
C
C     IRING(I,J) = LOCAL MESH PT NUMBER OF JTH RING IN ITH SEGMENT.
      IPRM(2)= 149
      JJRING = 1
      CALL STA(IRG,Z,RAD,RADD,S,NRINGS,I5)
      JJRING = 0
      DO 60 J=1,NRINGS
60    IRING(I,J) = IRG(J)
C
C     NTYPER(J) TELLS WHETHER THE RING CROSS SECTION IS ORIENTED
C     RELATIVE TO AXES NORMAL AND IN THE PLANE OF THE SHELL PARALLEL
C     CIRCLE, OR ORIENTED WITH AXES NORMAL AND TANGENTIAL TO SHELL
C     MERIDIAN.  NTYPER = 1 FOR  FORMER,=2 FOR LATTER.WITH NTYPER = 0
C     THERE IS NO RING AT THIS STATION. (THE STATION IS CALLED OUT BECAU
C     LINE LOADS WILL BE READ IN CORRESPONDING TO THIS POINT ON THE SHEL
C
      DO 65 J = 1,NRINGS
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,152,1,2,NTYPER(J),REALL,CHARAC,IOUT,J,IPROMP)
      IF (NTYPER(J).LE.-1.OR.NTYPER(J).GT.5) THEN
      WRITE(6,*)' NTYPER(J) IS NOT IN PERMISSIBLE RANGE, 0 TO 5'
      CALL ERREX
      ENDIF
   65 CONTINUE
C
      RNGMAS = 0.
      DO 190 J=1,NRINGS
      K = K + 1
      NT = NTYPER(J)
      IF (NTYPER(J).EQ.0) NT = 3
      GO TO (70,80,90,100,110),NT
C
C     RING CROSS SECTION ORIENTED IN PLANE OF PARALLEL CIRCLE.
   70 CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,153,1,1,INT,ER(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,154,1,1,INT,AREA(K),CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,155,1,1,INT,IY(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,156,1,1,INT,IX(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,157,1,1,INT,IXY(K) ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,158,1,1,INT,E1(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,159,1,1,INT,E2(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,160,1,1,INT,GJ(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,161,1,1,INT,RM(K)  ,CHARAC,IOUT,J,1)
C
      GO TO 120
C
C     RING CROSS SECTION ORIENTED NORMAL AND TANGENTIAL TO SHELL MERIDIA
   80 CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,162,1,1,INT,ER(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,163,1,1,INT,AREA(K),CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,164,1,1,INT,FIS(K) ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,165,1,1,INT,FIN(K) ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,166,1,1,INT,FISN(K),CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,167,1,1,INT,ZC(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,168,1,1,INT,SC(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,169,1,1,INT,GJ(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,170,1,1,INT,RM(K)  ,CHARAC,IOUT,J,1)
C
      GO TO 120
90    CONTINUE
C
C     NO RING HERE.
      ER(K) = 0.0
      AREA(K) = 0.0
      IY(K) = 0.0
      IX(K) = 0.0
      IXY(K) = 0.0
      E1(K) = 0.0
      E2(K) = 0.0
      FIN(K) = 0.0
      FIS(K) = 0.0
      FISN(K) = 0.0
      GJ(K) = 0.0
      RM(K) = 0.0
      GO TO 120
100   CONTINUE
      CALL RSTIFF(ER(K),AREA(K),IX(K),IY(K),IXY(K),E1(K),E2(K),GJ(K),
     1RM(K),J)
      GO TO 120
110   CONTINUE
      CALL RSTIFF(ER(K),AREA(K),FIN(K),FIS(K),FISN(K),ZC(K),SC(K),GJ(K),
     1RM(K),J)
120   CONTINUE
C     TRANSFORM RING INERTIAS TO PARALLEL CIRCLE ORIENTATION.
      L = IRING(I,J)
C     GLOBAL STATION OF KTH DISCRETE RING STORED IN IZRING(K)
      IZRING(K) = ITOT + L - 1
      ARC(K) = S(L)
      SP = RAD(L)*CUR2(L)
      CP = RADD(L)
      GO TO (130,140,150,130,140),NT
130   CONTINUE
      FIN(K) = IY(K)*CP**2 + IX(K)*SP**2 + 2.*IXY(K)*SP*CP
      FIS(K) = IY(K)*SP**2 + IX(K)*CP**2 - 2.*IXY(K)*SP*CP
      FISN(K)= CP*SP*(IY(K)-IX(K)) + IXY(K)*(SP**2 - CP**2)
      GO TO 180
140   CONTINUE
      IS = FIS(K)
      IN = FIN(K)
      ISN = FISN(K)
      E1(K) = ZC(K)*SP + SC(K)*CP
      E2(K) =-ZC(K)*CP + SC(K)*SP
      IX(K) = IS*CP**2 + IN*SP**2 - 2.*ISN*SP*CP
      IY(K) = IS*SP**2 + IN*CP**2 + 2.*ISN*SP*CP
      IXY(K)= CP*SP*(IN-IS) + ISN*(SP**2 - CP**2)
      GO TO 180
150   CONTINUE
      GO TO 180
180   CONTINUE
      IF (IX(K)*IY(K).GE.IXY(K)**2) GO TO 265
      WRITE(6,262) K,IX(K),IY(K),IXY(K)
262   FORMAT(//' RING NO.',I3,' HAS BAD PROPERTIES. IX,IY,IXY = ',
     11P3E12.3)
      CALL ERREX
265   CONTINUE
C
C     RC IS THE RADIUS TO RING CENTROID, AN IMPORTANT VARIABLE USED LATE
      RC(K) = RAD(L) + E1(K)
      IP(K) = IX(K) + IY(K)
      RNGMAS = RNGMAS + RM(K)*AREA(K)*RC(K)
190   CONTINUE
      RNGMAS = 2.*3.1415927*RNGMAS
      WRITE(IFILE4,200) I, RNGMAS
  200 FORMAT(//' MASS OF DISCRETE RINGS IN SEGMENT NO.',I3,' = ',
     1  1PE12.4//)
      RETURN
      END
C=DECK      RSTIFF
C     OVERLAY(1,3)
      SUBROUTINE RSTIFF(E,AREA,IX,IY,IXY,E1,E2,GJ,RM,JJ)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*4 CHARAC
      REAL IX,IY,IXY,J,L
      DIMENSION L(3),T(3),X(3),A(3),Y(3)
10    FORMAT(6E12.8)
      REWIND IFILE2
      CALL DATUM(IFILE2,171,1,1,INT,L(1)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,172,1,1,INT,L(2)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,173,1,1,INT,L(3)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,174,1,1,INT,T(1)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,175,1,1,INT,T(2)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,176,1,1,INT,T(3)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,177,1,1,INT,E     ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,178,1,1,INT,U     ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,179,1,1,INT,X1P   ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,180,1,1,INT,Y(1)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,181,1,1,INT,Y(2)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,182,1,1,INT,Y(3)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,183,1,1,INT,RM    ,CHARAC,IOUT,JJ,1)
C
      G = 0.5*E/(1.+U)
      IMEM = 3
      AREA = 0.
      E1 = 0.
      E2 = 0.
C     FIND AREA
      DO 20 I=1,IMEM
      A(I) = L(I)*T(I)
20    AREA = AREA + A(I)
      X(1) = X1P + T(1)/2.
      X(2) = X1P + T(1) + L(2)/2.
      X(3) = X1P + T(1) + L(2) + T(3)/2.
      IY = (L(1)*T(1)**3 + T(2)*L(2)**3 + L(3)*T(3)**3)/12.
      IX = (T(1)*L(1)**3 + L(2)*T(2)**3 + T(3)*L(3)**3)/12.
      J = 0.
C     FIND E1 AND E2
      DO 30 I=1,IMEM
      IF (AREA.EQ.0.0) GO TO 30
      E1 = E1 + A(I)*X(I)/AREA
      E2 = E2 + A(I)*Y(I)/AREA
30    CONTINUE
C     FIND IY, IX, AND J
      DO 40 I=1,IMEM
      IY = IY + A(I)*(E1 - X(I))**2
      IX = IX + A(I)*(E2 - Y(I))**2
      IF (L(I).EQ.0.0) GO TO 40
      J = J + L(I)*T(I)**3*(.333-3.36*(T(I)/L(I))*(1.-(T(I)/L(I))**4/12.
     1)/16.)
40    CONTINUE
      GJ = G*J
C     FIND IXY
      Y1A = Y(1) - L(1)/2. - E2
      Y1B = Y1A + L(1)
      Y3A = Y(3) - L(3)/2. - E2
      Y3B = Y3A + L(3)
      X2A = X(2) - L(2)/2. - E1
      X2B = X2A + L(2)
      IXY = (X(1)-E1)*T(1)*(Y1B**2-Y1A**2)/2.
     1+ (X(3)-E1)*T(3)*(Y3B**2 -Y3A**2)/2.
     2+ (Y(2)-E2)*T(2)*(X2B**2 -X2A**2)/2.
      RETURN
      END
C=DECK      ZEROIT
      SUBROUTINE ZEROIT(I,I5,THERM,C,P,PSVAR,PSFIX,TIO,TT,NSEG)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     CERTAIN LINE LOADS AND DISTRIBUTED LOADS ARE INITIALIZED.
C
      COMMON/PAXTAX/ PAXIAL(4,50),TAXIAL(3,50)
      COMMON/LOADHM/NLPOS(95),LAB(95),IDAB(95),ILPOS(12,95),PALL(6000)
      DIMENSION THERM(I5,8),C(I5,14),P(I5,6),PSVAR(I5,3),PSFIX(I5,3)
      DIMENSION TIO(I5,4),TT(I5,6)
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/INSTAB/INDIC
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/SHEARF/SHEAR(98)
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98)
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)
      COMMON/DRGTEM/DTNR(98),DTMR(98),DTMRX(98)
      COMMON/NOHARM/NHARM
      COMMON/WALPRP/EA(95),EB(95),GAB(95),UAB(95),ALPH1(95),ALPH2(95)
      COMMON/FOSAVE/VSAVE(98),HSAVE(98),FMSAVE(98)
      COMMON/FORFIX/IOMGAB,VFIX(98),SHFIX(98),HFIX(98),FMFIX(98)
      IF (I.NE.1) GO TO 60
      IOMGAB = 1
      DO 10 J=1,95
      NLPOS(J) = 0
      LAB(J) = 0
      IDAB(J) = 0
      DO 5 K = 1,12
    5 ILPOS(K,J) = 0
      EA(J) = 0.
      EB(J) = 0.
      GAB(J)= 0.
      UAB(J)= 0.
      ALPH1(J) = 0.
      ALPH2(J) = 0.
   10 CONTINUE
      NLPOS(1) = 1
      DO 20 J=1,6000
   20 PALL(J  ) = 0.
      DO 50 J=1,98
      V(J) = 0.0
      HF(J) = 0.0
      FM(J) = 0.0
      SHEAR(J) = 0.0
      VFIX(J) = 0.
      SHFIX(J) = 0.
      HFIX(J) = 0.
      FMFIX(J) = 0.
      TNR(J) = 0.0
      TMR(J) = 0.0
      TMRX(J) = 0.0
      DTNR(J) = 0.0
      DTMR(J) = 0.0
      DTMRX(J) = 0.0
      STEP1(J) = 0.0
      STEP2(J) = 0.0
      STEP3(J) = 0.0
      VSAVE(J) = 0.0
      HSAVE(J) = 0.0
      FMSAVE(J) = 0.0
50    CONTINUE
      DO 51 J = 1,50
      DO 30 K=1,4
30    PAXIAL(K,J) = 0.0
      DO 40 K=1,3
40    TAXIAL(K,J) = 0.0
51    CONTINUE
60    CONTINUE
      DO 110 J=1,I5
      DO 70 K=1,3
      PSVAR(J,K) = 0.0
   70 PSFIX(J,K) = 0.0
      DO 75 K = 1,6
      TT(J,K) = 0.
   75 P(J,K) = 0.
      DO 80 K=1,8
80    THERM(J,K) = 0.0
      DO 90 K=1,14
90    C(J,K) = 0.0
      DO 100 K=1,4
100   TIO(J,K) = 0.0
110   CONTINUE
      RETURN
      END
C=DECK      LOADRE
      SUBROUTINE LOADRE(I,KRING,NRINGS,NSEG,NHARM,NTGRAD,I5,PP,TT,Z,
     1RAD,RADD,S,NPOS,IPOS,PALL,LINAB,IDISAB,ITOT,CUR2,DS)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      COMMON/INTRG/NSTATN(95),IRING(95,20)
      COMMON/INSTAB/INDIC
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      CHARACTER*4 CHARAC
      DIMENSION TAXIAL(3,20),CUR2(*),DS(*)
      DIMENSION PP(I5,6),TT(I5,6),Z(*),RADD(*),RAD(*),S(*),IPOS(*)
      DIMENSION PALL(*),P1(100),P2(100),T1(100)
10    FORMAT(10I6)
      CALL DATUM(IFILE2,192,0,0,INT,REALL,CHARAC,IOUT,0,1)
      LINAB = 1
      LINTYP = 0
      LMECH  = 0
      ILOOP  = 0
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ LINE LOAD INPUT FOLLOWS...')
      IF (INDIC.NE.3) GO TO 15
      CALL DATUM(IFILE2,194,1,2,LINAB,REALL,CHARAC,IOUT,0,1)
      IF (LINAB.LT.0.OR.LINAB.GT.3) THEN
       WRITE(6,*)' LINAB NOT IN PERMISSIBLE RANGE 0 TO 3'
       CALL ERREX
      ENDIF
      IF (LINAB.EQ.1.OR.LINAB.EQ.3)
     1CALL DATUM(IFILE2,196,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (LINAB.EQ.2)
     1CALL DATUM(IFILE2,198,0,0,INT,REALL,CHARAC,IOUT,0,1)
   15 CONTINUE
C
      INDXAB = 1
      IF (ILOOP.EQ.2.OR.LINAB.EQ.2) INDXAB = 2
      LSET = 1
      IF (ILOOP.EQ.2.OR.LINAB.EQ.2) LSET   = 4
C
      IF (LINAB.EQ.0) GO TO 18
      IF (LSET.EQ.1.AND.INDIC.GE.3) WRITE(IFILE4,13) I
   13 FORMAT(/' LINE LOADS FOR LOAD SYSTEM "A", SEGMENT NO.',I3,'...')
      IF (LSET.EQ.4) WRITE(IFILE4,14) I
   14 FORMAT(/' LINE LOADS FOR LOAD SYSTEM "B", SEGMENT NO.',I3,'...')
      IF (LSET.EQ.1.AND.INDIC.GE.3) WRITE(IOUT,16)
   16 FORMAT(6X,'H',9X,'$ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS')
      IF (LSET.EQ.4) WRITE(IOUT,17)
   17 FORMAT(6X,'H',9X,'$ LINE LOAD INPUT FOR LOAD SET "B" FOLLOWS')
   18 CONTINUE
C
      IF (ILOOP.EQ.2)
     1CALL DATUM(IFILE2,198,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (LINAB.NE.0) THEN
        CALL DATUM(IFILE2,201,1,2,LINTYP,REALL,CHARAC,IOUT,0,1)
        IF (LINTYP.LT.0.OR.LINTYP.GT.3) THEN
          WRITE(6,*)' LINTYP NOT IN PERMISSIBLE RANGE 0 TO 3'
          CALL ERREX
        ENDIF
      ENDIF
C
      IF (NSTATN(I).EQ.0.AND.LINTYP.NE.0) GO TO 20
      GO TO 40
20    WRITE (6,30)I
   30 FORMAT(//' LINE LOADS MUST ALWAYS BE ASSOCIATED WITH DISCRETE'/
     1' RINGS.  RUN "INPUT" OR "MODIFY" AGAIN, THIS TIME INTRODUCING'/
     1' FAKE RINGS AT MERIDIONAL STATIONS WHERE LINE LOADS ARE'/
     1' APPLIED.  THIS IS SEGMENT NO.',I3//)
C
      CALL ERREX
40    CONTINUE
C
      IF (LINAB.EQ.0.OR.LINAB.EQ.2)
     1 CALL LODPOS(NPOS,NHARM,LINAB,LINTYP,LMECH,1,IPOS(1))
C
C     LINTYP = 0 - - - NO LOAD
C     LINTYP = 1 - - - MECHANICAL LOADS ONLY
C     LINTYP = 2 - - - THERMAL LINE LOADS ONLY
C     LINTYP = 3 - - - MECHANICAL AND THERMAL LINE LOADS
C
      CALL LINELD(LINTYP,INDIC,KRING,NRINGS,I,NSEG,NHARM,LMECH,LSET,
     1 P1,P2,T1,Z,ITOT)
      CALL LODPOS(NPOS,NHARM,LINAB,LINTYP,LMECH,INDXAB,IPOS(LSET))
      CALL LODSTO(NHARM,IPOS(LSET),P1,P2,T1,PALL)
C
      IF (LINAB.NE.3) GO TO 42
      IF (ILOOP.EQ.2) GO TO 42
      ILOOP = 2
      REWIND IFILE2
      GO TO 15
   42 CONTINUE
C
      IF (LINAB.EQ.0.OR.LINAB.EQ.1)
     1 CALL LODPOS(NPOS,NHARM,LINAB,0,0,2,IPOS(4))
C
C     DISTRIBUTED THERMAL AND MECHANICAL LOAD INPUT FOR ITH SEGMENT
C
      WRITE(IOUT,3)
    3 FORMAT(6X,'H',9X,'$ DISTRIBUTED LOAD INPUT FOLLOWS...')
      CALL DATUM(IFILE2,240,1,2,IDISAB,REALL,CHARAC,IOUT,0,1)
      IF (IDISAB.LT.0.OR.IDISAB.GT.3) THEN
         WRITE(6,*)' IDISAB NOT IN PERMISSIBLE RANGE 0 TO 3'
         CALL ERREX
      ENDIF
      NLTYPE = 0
      LMECH  = 0
      IF (IDISAB.EQ.1.OR.IDISAB.EQ.3)
     1CALL DATUM(IFILE2,242,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (IDISAB.EQ.2)
     1CALL DATUM(IFILE2,244,0,0,INT,REALL,CHARAC,IOUT,0,1)
      ILOOP = 1
   45 CONTINUE
C
      INDXAB = 1
      IF (ILOOP.EQ.2.OR.IDISAB.EQ.2) INDXAB = 2
      LSET = 7
      IF (ILOOP.EQ.2.OR.IDISAB.EQ.2) LSET   = 10
      ILPRE = 1
      IF (ILOOP.EQ.2.OR.IDISAB.EQ.2) ILPRE = 4
      IF (IDISAB.EQ.0) GO TO 49
      IF (ILPRE.EQ.1) WRITE(IFILE4,43) I
   43 FORMAT(/' SURFACE LOADS FOR LOAD SYSTEM "A", SEGMENT NO.',I3)
      IF (ILPRE.EQ.4) WRITE(IFILE4,44) I
   44 FORMAT(/' SURFACE LOADS FOR LOAD SYSTEM "B", SEGMENT NO.',I3)
      IF (ILPRE.EQ.1) WRITE(IOUT,46)
   46 FORMAT(6X,'H',9X,'$ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS')
      IF (ILPRE.EQ.4) WRITE(IOUT,47)
   47 FORMAT(6X,'H',9X,'$ SURFACE LOAD INPUT FOR LOAD SET "B" FOLLOWS')
   49 CONTINUE
C
      IF (ILOOP.EQ.2)
     1CALL DATUM(IFILE2,244,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (IDISAB.NE.0) THEN
        CALL DATUM(IFILE2,250,1,2,NLTYPE,REALL,CHARAC,IOUT,0,1)
        IF (NLTYPE.LT.0.OR.NLTYPE.GT.3) THEN
           WRITE(6,*)' NLTYPE NOT IN PERMISSIBLE RANGE 0 TO 3'
           CALL ERREX
        ENDIF
      ENDIF
C
      IF (IDISAB.EQ.0.OR.IDISAB.EQ.2)
     1 CALL LODPOS(NPOS,NHARM,IDISAB,NLTYPE,LMECH,1,IPOS(7))
C
C     NLTYPE = 0 - - - NO LOAD
C     NLTYPE = 1 - - - MECHANICAL LOADS ONLY
C     NLTYPE = 2 - - - THERMAL DISTRIBUTED LOADS ONLY
C     NLTYPE = 3 - - - MECHANICAL AND THERMAL DISTRIBUTED LOADS
C
      CALL DISTL(I5,NLTYPE,NPSTAT,NTSTAT,PP(1,ILPRE),TT(1,ILPRE),
     1 TAXIAL,INDIC,I,NSEG,NHARM,Z,RAD,RADD,S,LMECH,LSET,P1,P2,T1,
     1 CUR2,DS,INDXAB)
      CALL LODPOS(NPOS,NHARM,IDISAB,NLTYPE,LMECH,INDXAB,IPOS(LSET))
      CALL LODSTO(NHARM,IPOS(LSET),P1,P2,T1,PALL)
C
      IF (IDISAB.NE.3) GO TO 50
      IF (ILOOP.EQ.2) GO TO 50
      ILOOP = 2
      REWIND IFILE2
      GO TO 45
   50 CONTINUE
C
      IF (IDISAB.EQ.0.OR.IDISAB.EQ.1)
     1 CALL LODPOS(NPOS,NHARM,IDISAB,0,0,2,IPOS(10))
C
      WRITE(IFILE4,60) (IPOS(J),J=1,12)
   60 FORMAT(/' POINTERS TO CIRCUMFERENTIAL HARMONICS OF LOADING',12I5)
      RETURN
      END
C=DECK      LINELD
      SUBROUTINE LINELD(LINTYP,INDIC,KRING,NRINGS,I,NSEG,NHARM,LMECH,
     1 LSET,PLIN1,PLIN2,TLIN,Z,ITOT)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      COMMON/RGTEMP/TNR(98),TMR(98),TMRX(98)
      COMMON/DRGTEM/DTNR(98),DTMR(98),DTMRX(98)
      COMMON/FORCES/V(98),HF(98),FM(98)
      COMMON/SHEARF/SHEAR(98)
      COMMON/FORFIX/IOMGAB,VFIX(98),SHFIX(98),HFIX(98),FMFIX(98)
      COMMON/STEPS/STEP,STEP1(98),STEP2(98),STEP3(98)
      COMMON/PAXTAX/ PAXIAL(4,50),TAXIAL(3,50)
      DIMENSION PLIN1(*),PLIN2(*),TLIN(*),Z(*)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*4 CHARAC
C
      IF (LINTYP.EQ.0) GO TO 80
      NKR = KRING + NRINGS
      KRING1 = KRING + 1
      IF (LINTYP.EQ.2) GO TO 40
      CALL DATUM(IFILE2,202,0,0,INT,REALL,CHARAC,IOUT,0,1)
C     READ MECHANICAL LINE LOADS
      IF (INDIC.NE.3) GO TO 10
C     READ NONSYMMETRIC MECHANICAL LINE LOADS
      CALL LOADRD(1,4,50,NRINGS,I,NSEG,NHARM,INDIC,PLIN1,PLIN2,
     1PAXIAL(1,KRING1),203,LMECH,LSET)
C
      IF (LSET.EQ.1) THEN
C
C  FOLLOWING STATEMENT ADDED 17 AUG 1985 (DYNAMIC REACTION)...
C
      CALL FDYNAM(Z,ITOT,NHARM,NKR,KRING1,I,PLIN1,PLIN2,PAXIAL,1)
C  END 17 AUG. MODIFICATION.
      DO 5 K = KRING1,NKR
      V(K)     = PAXIAL(1,K)
      SHEAR(K) = PAXIAL(2,K)
      HF(K)    = PAXIAL(3,K)
      FM(K)    = PAXIAL(4,K)
    5 CONTINUE
      ELSE
C
C  FOLLOWING STATEMENT ADDED 17 AUG 1985 (DYNAMIC REACTION)...
C
      CALL FDYNAM(Z,ITOT,NHARM,NKR,KRING1,I,PLIN1,PLIN2,PAXIAL,2)
C  END 17 AUG. MODIFICATION.
      DO 6 K = KRING1,NKR
      VFIX(K)  = PAXIAL(1,K)
      SHFIX(K) = PAXIAL(2,K)
      HFIX(K)  = PAXIAL(3,K)
      FMFIX(K) = PAXIAL(4,K)
    6 CONTINUE
      ENDIF
C
      GO TO 40
C     READ FIXED AXISYMMETRICAL MECHANICAL LINE LOADS
10    CALL LOADRD(1,4,50,NRINGS,I,NSEG,NHARM,INDIC,PLIN1,PLIN2,
     1PAXIAL(1,KRING1),203,LMECH,LSET)
      IF (LSET.EQ.1) THEN
      DO 12 K = KRING1,NKR
      V(K)     = PAXIAL(1,K)
      HF(K)    = PAXIAL(3,K)
      FM(K)    = PAXIAL(4,K)
   12 CONTINUE
      ELSE
      DO 14 K = KRING1,NKR
      VFIX(K)  = PAXIAL(1,K)
      HFIX(K)  = PAXIAL(3,K)
      FMFIX(K) = PAXIAL(4,K)
   14 CONTINUE
      ENDIF
C
      IF (LSET.NE.1) GO TO 40
C     READ VARIABLE MECHANICAL LINE LOADS OR MECHANICAL L.L.INCREMENTS
      CALL LOADRD(1,4,50,NRINGS,I,NSEG,NHARM,INDIC,PLIN1,PLIN2,
     1PAXIAL(1,KRING1),211,LMECH,LSET)
C
      DO 30 K=KRING1,NKR
      STEP1(K) = PAXIAL(1,K)
      STEP2(K) = PAXIAL(3,K)
30    STEP3(K) = PAXIAL(4,K)
40    CONTINUE
      IF (LINTYP.EQ.1) GO TO 80
C     READ THERMAL LINE LOADS
      CALL DATUM(IFILE2,230,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (INDIC.NE.3) GO TO 50
C     READ NONSYMMETRIC THERMAL LINE LOADS
      CALL LOADRD(2,3,50,NRINGS,I,NSEG,NHARM,INDIC,TLIN ,PLIN2,TAXIAL
     1(1,KRING1),231,LMECH,LSET)
      IF (LSET.EQ.1) THEN
      DO 42 K = KRING1,NKR
      TNR(K) = TAXIAL(1,K)
      TMR(K) = TAXIAL(2,K)
      TMRX(K)= TAXIAL(3,K)
   42 CONTINUE
      ELSE
      DO 44 K = KRING1,NKR
      DTNR(K) = TAXIAL(1,K)
      DTMR(K) = TAXIAL(2,K)
      DTMRX(K)= TAXIAL(3,K)
   44 CONTINUE
      ENDIF
      GO TO 80
C     READ AXISYMMETRIC FIXED THERMAL LINE LOADS
50    CALL LOADRD(2,3,50,NRINGS,I,NSEG,NHARM,INDIC,TLIN ,PLIN2,
     1TAXIAL(1,KRING1),231,LMECH,LSET)
      IF (LSET.EQ.1) THEN
      DO 60 K=KRING1,NKR
      TNR(K) = TAXIAL(1,K)
      TMR(K) = TAXIAL(2,K)
60    TMRX(K)= TAXIAL(3,K)
      ELSE
      DO 62 K = KRING1,NKR
      DTNR(K) = TAXIAL(1,K)
      DTMR(K) = TAXIAL(2,K)
      DTMRX(K)= TAXIAL(3,K)
   62 CONTINUE
      ENDIF
C
80    CONTINUE
      RETURN
      END
C=DECK      LOADRD
      SUBROUTINE LOADRD(LTYPE,LKIND,NSTATN,KSTATN,ISEG,NSEG,NHARM,INDIC,
     1P1,P2,P,JPRM,LMECH,LSET)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*4 CHARAC
      DIMENSION P1(*),P2(*),P(LKIND,NSTATN),NLOAD(4)
10    FORMAT(10I6)
20    FORMAT(6E12.8)
      IF (KSTATN.EQ.0) GO TO 90
      IF (INDIC.EQ.3) THEN
        CALL DATUM(IFILE2,JPRM,1,2,NTYPEL,REALL,CHARAC,IOUT,0,1)
        IF (NTYPEL.NE.4.AND.NTYPEL.NE.3) THEN
           WRITE(6,*)' NTYPEL NOT IN PERMISSIBLE RANGE 3 TO 4'
           CALL ERREX
        ENDIF
      ENDIF
      NLOAD(4) = 0
      DO 23 I = 1,LKIND
      IPROMP = JPRM + I
      CALL DATUM(IFILE2,IPROMP,1,1,NLOAD(I),REALL,CHARAC,IOUT,0,1)
      IF (NLOAD(I).NE.0.AND.NLOAD(I).NE.1) THEN
       WRITE(6,*)' NLOAD(I) NOT IN PERMISSIBLE RANGE 0 TO 1'
       CALL ERREX
      ENDIF
   23 CONTINUE
      IF (LTYPE.EQ.1.OR.LTYPE.EQ.3) CALL LODMCH(NLOAD,LMECH)
      JPRMN = JPRM + LKIND
      IF (NLOAD(2).NE.0) NLOAD(2) = -1
C     AXIAL DISTRIBUTIONS
      DO 50 M=1,LKIND
      NHLP = 2
      IF (NLOAD(M).EQ.0) GO TO 30
      DO 26 L = 1,KSTATN
      IPROMP = 1
      IF (L.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRMN+M,1,NHLP,INT,P(M,L),CHARAC,IOUT,L,IPROMP)
   26 CONTINUE
      GO TO 50
30    DO 40 L=1,KSTATN
40    P(M,L) = 0.0
50    CONTINUE
      IF (INDIC.NE.3) GO TO 90
C     CIRCUMFERENTIAL DISTRIBUTION DEVELOPED
      IF (NTYPEL.EQ.4) GO TO 60
C     HARMONIC AMPLITUDES READ IN
      JPRMN = JPRM + 2*LKIND
      IF (LKIND.EQ.4) JPRMN = JPRM + 4*LKIND
      DO 52 L = 1,NHARM
      IPROMP = 1
      IF (L.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRMN+1,1,2,INT,P1(L),CHARAC,IOUT,L,IPROMP)
   52 CONTINUE
C
      M = 1
      CALL OUTCC(ISEG,LTYPE,M)
      CALL OUTHM(ISEG,NHARM,NSTART,NMIN,NMAX,INCR,M,P1(1))
      IF (LTYPE.EQ.2.OR.LTYPE.EQ.4) GO TO 90
      DO 55 L = 1,NHARM
      IPROMP = 1
      IF (L.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRMN+2,1,1,INT,P2(L),CHARAC,IOUT,L,IPROMP)
   55 CONTINUE
      M = 2
      CALL OUTCC(ISEG,LTYPE,M)
      CALL OUTHM(ISEG,NHARM,NSTART,NMIN,NMAX,INCR,M,P2(1))
      GO TO 90
60    CONTINUE
C     FOURIER SERIES DEVELOPED, GIVEN INPUT CIRCUMFERENTIAL DISTRIBUTION
      IF (LTYPE.EQ.2.OR.LTYPE.EQ.4) GO TO 53
      IF (NLOAD(1).EQ.0.AND.NLOAD(3).EQ.0.AND.NLOAD(4).EQ.0) GO TO 70
53    CONTINUE
      M = 1
      INDX = 1
      IF (LTYPE.EQ.1) WRITE (6,62)
   62 FORMAT(/' Next provide input for the circumferential variation'/
     1' of axial load V, radial load H, and meridional moment M in'/
     1' this segment. Note that all these three load components must'/
     1' have the same circumferential variation and this circumfer-'/
     1' ential variation must be the same for all the rings in this'/
     1' shell segment.'/)
      IF (LTYPE.EQ.2) WRITE (6,63)
   63 FORMAT(/' Next provide input for the circumferential variation'/
     1' of thermal line loads in this segment. Note that this circum-'/
     1' ferential variation must be the same for all the rings in this'/
     1' shell segment.'/)
      IF (LTYPE.EQ.3) WRITE(6,64)
   64 FORMAT(/' Next provide input for the circumferential variation'/
     1' of the axial component of traction PT and the normal pressure'/
     1' PN.   Note that both of these two distributed load components'/
     1' must have the same circumferential variation.'/)
      IF (LTYPE.EQ.4) WRITE(6,65)
   65 FORMAT(/' Next provide input for the circumferential variation'/
     1' of the temperature in this segment.'/)
C
      CALL FOUR(P1(1),INDX,M,LTYPE,ISEG)
      IF (LTYPE.EQ.2.OR.LTYPE.EQ.4) GO TO 80
70    IF (NLOAD(2).EQ.0) GO TO 80
      M = 2
      INDX = -1
      IF (LTYPE.EQ.1) WRITE(6,72)
   72 FORMAT(/' Next provide input for the circumferential variation'/
     1' of the shear load S in this segment.  Note that this circum-'/
     1' ferential variation must be the same for all rings in this'/
     1' segment'/)
      IF (LTYPE.EQ.3) WRITE(6,74)
   74 FORMAT(/' Next provide input for the circumferential variation'/
     1' of the circumferential component of traction PC.'/)
C
      CALL FOUR(P2(1),INDX,M,LTYPE,ISEG)
80    CONTINUE
90    CONTINUE
      RETURN
      END
C=DECK      OUTCC
      SUBROUTINE OUTCC(ISEG,LTYPE,M)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
      COMMON/PRMOUT/IFILE3,IFILE4
      WRITE (IFILE4,20)ISEG
20    FORMAT(//57H THERMAL OR MECHANICAL LINE OR DISTRIBUTED LOADS FOR T
     1HE    I3, 59H SEGMENT. VALID FOR LOADS EXPRESSED IN FORM FS(S)*Y(T
     2HETA)                       //)
      IF (LTYPE.EQ.1) GO TO 30
      IF (LTYPE.EQ.2) GO TO 150
      IF (LTYPE.EQ.3) GO TO 80
      IF (LTYPE.EQ.4) GO TO 130
30    GO TO (40,60),M
40    WRITE (IFILE4,50)
50    FORMAT(//105H CIRCUMFERENTIAL DISTRIBUTION OF AXIAL LINE LOADS V(K
     1), RADIAL LINE LOADS,H(K), AND LINE MOMENTS M(K)              //)
      GO TO 170
60    WRITE (IFILE4,70)
70    FORMAT(//' CIRCUMFERENTIAL DISTRIBUTION OF SHEAR LINE LOADS S(K)'
     1//)
      GO TO 170
80    GO TO (90,110),M
90    WRITE (IFILE4,100)
100   FORMAT(//95H CIRCUMFERENTIAL DISTRIBUTION OF TANG. PRESSURE PT    
     1AND NORMAL PRESSURE PN                                        //)
      GO TO 170
110   WRITE (IFILE4,120)
120   FORMAT(//' CIRCUMFERENTIAL DISTRIBUTION OF CIRC. PRESSURE PC   '
     1//)
      GO TO 170
130   WRITE (IFILE4,140)
140   FORMAT(//85H CIRCUMFERENTIAL DISTRIBUTION OF TEMP COEFFICIENTS T1,
     1T2, AND T3                                                  //)
      GO TO 170
150   WRITE (IFILE4,160)
160   FORMAT(//95H CIRCUMFERENTIAL DISTRIBUTION OF THERMAL LINE LOADS NT
     1(K),MTX(K), AND MTY(K)                                         //)
      GO TO 170
170   CONTINUE
      RETURN
      END
C=DECK      OUTHM
      SUBROUTINE OUTHM(     ISEG,NHARM,NSTART,NMIN,NMAX,INCR,M,P)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      DIMENSION P(NHARM)
      COMMON/PRMOUT/IFILE3,IFILE4
      N = NSTART - INCR
      KOUNT = 0
10    N = N + INCR
      KOUNT = KOUNT + 1
      IF (KOUNT.GT.NHARM) GO TO 70
      IF (N.LE.0) GO TO 60
      IF (M.EQ.2) GO TO 40
20    WRITE (IFILE4,30)N,P(KOUNT)
30    FORMAT(11H WAVE NO.N=I6,32H. CIRC. HARMONIC AMPLITUDE A(N)=1PE15.5
     1,45H. CIRC. DISTRIBUTION Y(THETA)= A*SIN(N*THETA)    )
      GO TO 10
40    WRITE (IFILE4,50)N,P(KOUNT)
50    FORMAT(11H WAVE NO.N=I6,32H. CIRC. HARMONIC AMPLITUDE A(N)=1PE15.5
     1,45H. CIRC. DISTRIBUTION Y(THETA)= A*COS(N*THETA)    )
      GO TO 10
60    IF (M.EQ.1.OR.N.EQ.0) GO TO 40
      GO TO 20
70    CONTINUE
      RETURN
      END
C=DECK      FOUR
      SUBROUTINE FOUR(A,NLOAD,M,LTYPE,ISEG)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM LOADRD
C     GIVEN INPUT FUNCTION Y(X), (READ IN BELOW), THIS SUBROUTINE
C     CALCULATES THE FOURIER SERIES AND PRINTS OUT THE OUTPUT FUNCTION.
C
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/NOHARM/NHARM
      DIMENSION XPLUS(100),XMINUS(100),YPLUS(100),YMINUS(100),A(20)
      DIMENSION F(300 ),Z(300 )
      COMMON/OUTP/NPRT
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C     NX = NUMBER OF X-VALUES (CIRCUMFERENTIAL POINTS IN RANGE
C          THETA. GE. 0 AND THETA . LE . THETAM)
C     NOPT = CONTROL INTEGER FOR TYPE OF Y-INPUT
C     NOPT = 1  NEITHER EVEN NOR ODD FUNCTION Y(X)
C     NOPT = 2 ODD OR EVEN FUNCTION Y(X)
C     NOPT = 3 CALCULATE Y(X) FROM USER-GENERATED SUBROUTINE GETY
C     NODD = 1  Y(X) EVEN
C     NODD = 2 Y(X) ODD
C     NODD = 3 Y(X) NEITHER EVEN NOR ODD
C
    2 CONTINUE
      CALL DATUM(IFILE2,324,1,2,NX,REALL,CHARAC,IOUT,0,1)
      IF (NX.LT.2.OR.NX.GT.100) THEN
       WRITE(6,*)' NTHETA OUT OF PERMISSIBLE RANGE 2 TO 100'
       CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,325,1,2,NOPT,REALL,CHARAC,IOUT,0,1)
      IF (NOPT.LT.1.OR.NOPT.GT.3) THEN
        WRITE(6,*)' NOPT NOT IN PERMISSIBLE RANGE 1 TO 3'
        CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,326,1,2,NODD,REALL,CHARAC,IOUT,0,1)
      IF (NODD.LT.1.OR.NODD.GT.3) THEN
        WRITE(6,*)' NODD NOT IN PERMISSIBLE RANGE 1 TO 3'
        CALL ERREX
      ENDIF
C     XPLUS = CIRCUMFERENTIAL STATION IN DEGREES
      DO 3 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,327,1,2,INT,XPLUS(I),CHARAC,IOUT,I,IPROMP)
    3 CONTINUE
C
      THEMS = THETAM*180./3.14159
      IF(ABS(XPLUS(NX)-THEMS).LT.1.0) GO TO 5
      WRITE(6,7) NX,XPLUS(NX),THEMS
7     FORMAT(//5H NX = I2,12H  XPLUS(NX)= 1PE12.3,15H DEG.  THETAM =    
     11PE12.3,31H  XPLUS(NX) MUST EQUAL THETAM.     //)
      REWIND IFILE2
      GO TO 2
5     CONTINUE
      DO 10 I=1,NX
10    XPLUS(I) = XPLUS(I)*3.1415927/180.
20    FORMAT(12I6)
30    FORMAT(6E12.8)
      DO 40 I=1,NX
40    XMINUS(I) = - XPLUS(I)
      GO TO (50,60,110),NOPT
C     YPLUS,YMINUS = VALUES OF INPUT FUNCTION Y AT XPLUS AND XMINUS
C     STATIONS AROUND THE CIRCUMFERENCE OF THE SHELL
   50 CONTINUE
      DO 55 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,328,1,2,INT,YPLUS(I),CHARAC,IOUT,I,IPROMP)
   55 CONTINUE
      DO 56 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,329,1,2,INT,YMINUS(I),CHARAC,IOUT,I,IPROMP)
   56 CONTINUE
C
      GO TO 120
   60 CONTINUE
      DO 65 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,328,1,2,INT,YPLUS(I),CHARAC,IOUT,I,IPROMP)
   65 CONTINUE
C
      GO TO (70,90),NODD
70    DO 80 I=1,NX
80    YMINUS(I) = YPLUS(I)
      GO TO 120
90    DO 100 I=1,NX
100   YMINUS(I) = - YPLUS(I)
      GO TO 120
C     USER-WRITTEN FUNCTION WHICH CALCULATES YPLUS AND YMINUS, GIVEN
C     XPLUS AND XMINUS.
110   CALL GETY(NX,XPLUS,YMINUS,YPLUS)
120   CONTINUE
      REWIND IFILE2
      J = 0
      NSTART = N0*NLOAD
      NLOW = NMIN
      NHIGH = NMAX
      IF (NLOAD.LT.0) NHIGH = NMIN*NLOAD
      IF (NLOAD.LT.0) NLOW =  NMAX*NLOAD
      NSTEP = INCR*NLOAD
      NEND = NHIGH
      IF (NSTEP.LT.0) NEND = NLOW
      NMULT = 3.1415927/XPLUS(NX) + 0.5
      NSTART = NSTART/NMULT
      NEND = NEND/NMULT
      NSTEP = NSTEP/NMULT
      NDIFF = IABS(NSTART - NEND) + 1
      NSTEPA = IABS(NSTEP)
      IQ = IABS(INCR)
      ITRY = IQ - (IQ/NMULT)*NMULT
      IF (ITRY.EQ.0) GO TO 125
      WRITE(6,124) NMULT,INCR
124   FORMAT(//12H PI/THETAM=   I4,83H.  THEREFORE THE ABS(INCR) MUST BE
     1DIVISIBLE BY PI/THETAM. YOUR VALUE OF INCR IS               I2//)
      CALL ERREX
125   CONTINUE
      N = NSTART
      DO 130 I=1,NDIFF,NSTEPA
      J = J + 1
C     CALCULATE FOURIER SERIES COEFFICIENTS IN FCOEF
      CALL FCOEF(J,NX,N,XPLUS,YPLUS,YMINUS,A)
      N = N + NSTEP
130   CONTINUE
      PI = 3.1415927
      FL = XPLUS(NX)
      NPTS = 12*MAX0(IABS(NEND), IABS(NSTART))
      IF (NPTS.GT.300) NPTS = 300
      IF (NPTS.LT.100) NPTS = 100
      DZ = 2.*FL/ FLOAT(NPTS-1)
      Z(1) = - FL
      F(1) = 0.0
      DO 140 I=2,NPTS
      F(I) = 0.0
      I1 = I - 1
140   Z(I) = Z(I1) + DZ
      J = 0
      I = NSTART
      DO 180 II=1,NDIFF,NSTEPA
      J = J + 1
      Q = ABS(FLOAT(I))*PI/FL
      DO 170 K=1,NPTS
      IF (I) 150,150,160
150   F(K) = F(K) + A(J)*COS(Q* Z(K))
      GO TO 170
160   F(K) = F(K) + A(J)*SIN(Q* Z(K))
170   CONTINUE
      I = I + NSTEP
180   CONTINUE
      CALL OUTCC(ISEG,LTYPE,M)
      WRITE (IFILE4,190)
190   FORMAT(/ 45H             INPUT LOAD DISTRIBUTION            /)
      DO 210 I=1,NX
      XP = XPLUS(I)*180./3.1415927
      XM = XMINUS(I)*180./3.1415927
      WRITE (IFILE4,200)I,XP,YPLUS(I),XM,YMINUS(I)
200   FORMAT(10H CIRC. STA    I3,24H CIRC. COORD.(DEGREES) =  E10.3,    
     118H INPUT LOAD VALUE=   E10.3, 14H CIRC. COORD.=    E10.3,        
     218H INPUT LOAD VALUE=    E10.3)                                   
210   CONTINUE
      WRITE (IFILE4,220)
220   FORMAT(/45H      CALCULATED FOURIER HARMONICS OF LOAD       /)
      CALL OUTHM(ISEG,NHARM,N0,NMIN,NMAX,INCR,M,A)
      REWIND IFILE3
      CALL DATUM(IFILE3,604,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 260
      WRITE (IFILE4,230)
230   FORMAT(/45H              OUTPUT EXPANSION OF LOAD             /)
      DO 250 I=1,NPTS
      ZP = Z(I)*180./3.1415927
      IF (NPRT.GT.1) WRITE (IFILE4,240)I,ZP,F(I)
240   FORMAT(12H CIRC. STA.   I3,30H CIRCUMFERENTIAL COORDINATE =       
     11PE13.4,26H EXPANDED LOAD FUNCTION =   1PE15.5)
250   CONTINUE
260   CONTINUE
      RETURN
      END
C=DECK      GETY
      SUBROUTINE GETY(NX,XPLUS,YMINUS,YPLUS)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM FOUR, WHOSE TRACE IS LOADRD, (LINELD,DISTP,DISTT),
C     LOADER,READIT,MAIN.
C     USER-WRITTEN SUBROUTINE TO OBTAIN Y(X) FOR WHICH FOURIER SERIES
C     WILL BE CALCULATED.
      DIMENSION XMINUS(100),XPLUS(100),YMINUS(100),YPLUS(100)
      DO 10 I=1,NX
      YPLUS(I) =      EXP(-12.8*XPLUS(I)**2)
10    YMINUS(I) = YPLUS(I)
      RETURN
      END
C=DECK      FCOEF
      SUBROUTINE FCOEF(J,NX,N,XPLUS,YPLUS,YMINUS,A)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM FOUR, WHOSE TRACE IS LOADRD, (LINELD,DISTP,DISTT),
C     LOADER,READIT,MAIN
C     CALCULATES A(J), COEFFICIENT OF FOURIER SINE OR COSINE OR
C     MIXED SERIES CORRESPONDING TO GIVEN CIRCUMFERENTIAL WAVENUMBER N.
      DIMENSION XPLUS(100),YPLUS(100),YMINUS(100),A(20)
      PI = 3.1415927
      FL = XPLUS(NX)
      FNPI = ABS(FLOAT(N))*PI
      Q = FNPI/FL
      A(J) = 0.0
      DO 30 I=2,NX
      I1 = I - 1
      H = XPLUS(I) - XPLUS(I1)
      QX = Q*XPLUS(I)
      QX1 = Q*XPLUS(I1)
      CS = COS(QX)
      CS1 = COS(QX1)
      SS = SIN(QX)
      SS1 = SIN(QX1)
      IF (N) 10,10,20
C     COEFFICIENTS OF COSINE SERIES
10    Y = YPLUS(I) + YMINUS(I)
      Y1 = YPLUS(I1) + YMINUS(I1)
      C = (Y - Y1)/H
      IF (N.EQ.0) A(J) = A(J) + 0.25*H*(Y + Y1)/FL
      IF (N.EQ.0) GO TO 30
      A(J) = A(J) + (C*(CS-CS1)/Q + Y*SS - Y1*SS1)/FNPI
      GO TO 30
C     SINE SERIES COEFFICIENTS
20    Y = YPLUS(I) - YMINUS(I)
      Y1 = YPLUS(I1) - YMINUS(I1)
      C = (Y - Y1)/H
      A(J) = A(J) + (C*(SS-SS1)/Q - Y*CS + Y1*CS1)/FNPI
30    CONTINUE
      RETURN
      END
C=DECK      DISTL
C./      ADD   NAME=DISTL
      SUBROUTINE DISTL(I5I,NLTYPE,NPSTAT,NTSTAT,PP,TT,TAXIAL,INDIC,I,
     1NSEG,NHARM,Z,RAD,RADD,S,LMECH,LSET,PDIST1,PDIST2,TDIST,CUR2,DS,
     1 INDXAB)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*4 CHARAC
      DIMENSION PDIST1(*),PDIST2(*),TDIST(*),CUR2(*),DS(*)
      DIMENSION IPVAL(20),ITVAL(20),Z(*),RAD(*),RADD(*),S(*)
      DIMENSION PP(I5I,3),TT(I5I,3),TAXIAL(3,20),PAXIAL(3,20),P(20)
10    FORMAT(6E12.8)
      IF (NLTYPE.EQ.0) GO TO 190
      IF (NLTYPE.EQ.2) GO TO 100
   12 CONTINUE
      CALL DATUM(IFILE2,252,1,2,NPSTAT,REALL,CHARAC,IOUT,0,1)
      IF (NPSTAT.LT.0.OR.NPSTAT.GT.20) THEN
       WRITE(6,*)' NPSTAT NOT IN PERMISSIBLE RANGE 0 TO 20'
       CALL ERREX
      ENDIF
      IF (NPSTAT.EQ.0.AND.INDIC.NE.3) GO TO 30
      IF (NPSTAT.GE.2) GO TO 15
      WRITE(6,13)
   13 FORMAT(//' INDIC = 3.  THEREFORE, NPSTAT MUST BE GREATER THAN'/
     1' OR EQUAL TO 2'/)
      REWIND IFILE2
      GO TO 12
   15 CONTINUE
C     READ MECHANICAL DISTRIBUTED LOADS
      IF (INDIC.NE.3) GO TO 20
C     READ NONSYMMETRIC MECHANICAL DISTRIBUTED LOADS
      CALL LOADRD(3,3,NPSTAT,NPSTAT,I,NSEG,NHARM,INDIC,PDIST1,PDIST2,
     1PAXIAL,255,LMECH,LSET)
      GO TO 50
C     READ AXISYMMETRIC MECHANICAL DISTRIBUTED LOADS
20    CALL LOADRD(3,3,NPSTAT,NPSTAT,I,NSEG,NHARM,INDIC,PDIST1,PDIST2,
     1PAXIAL,255,LMECH,LSET)
      GO TO 50
30    CONTINUE
      LMECH = 1
      P12 = 0.
      P13 = 0.
      P14 = 0.
      P15 = 0.
      CALL DATUM(IFILE2,253,1,1,INT,P11,CHARAC,IOUT,0,1)
C
      P22 = 0.
      P23 = 0.
      P24 = 0.
      P25 = 0.
      CALL DATUM(IFILE2,254,1,1,INT,P21,CHARAC,IOUT,0,1)
C
      PP(1,1) = P21
      PP(1,2) = 0.0
      PP(1,3) = P11
      DO 40 J=2,I5I
      SJ = S(J) - S(1)
      PP(J,1) = P21 + P22*SJ**P23 + P24*SJ**P25
      PP(J,2) = 0.0
      PP(J,3) = P11 + P12*SJ**P13 + P14*SJ**P15
40    CONTINUE
      GO TO 100
   50 CONTINUE
      IPRM(2) = 264
      CALL STA(IPVAL,Z,RAD,RADD,S,NPSTAT,I5I)
      IF (IPVAL(1).EQ.1.AND.IPVAL(NPSTAT).EQ.I5I) GO TO 70
      WRITE (6,60)I
60    FORMAT(//'   PRESSURE DISTRIBUTION CALLOUTS MUST INCLUDE VALUES AT 
     1 FIRST AND LAST MESH PTS. IN SEG.',                         I3//) 
      WRITE(6,62) NPSTAT,I5I,(IPVAL(I),I=1,NPSTAT)
   62 FORMAT(' NO. OF CALLOUTS,                             NPSTAT=',I3/
     1       ' NUMBER OF NODAL POINTS IN SEGMENT,              I5I=',I3/
     1' POINTS CORRESPONDING TO CALLOUTS, (IPVAL(I),I=1,NPSTAT)='/20I5)
      CALL ERREX
70    CONTINUE
      DO 90 K=1,3
      DO 80 J=1,NPSTAT
80    P(J) = PAXIAL(K,J)
      CALL FINDZ(NPSTAT,IPVAL,P,I5I,PP(1,K),S)
90    CONTINUE
C ADD STATEMENT FOR DYNAMIC REACTION (17 AUG 1985)...
C CALCULATE TOTAL FORCES THAT CREATE RIGID BODY INERTIA TERMS...
      IF (INDIC.EQ.3)
     1 CALL PDYNAM(Z,NHARM,I,PDIST1,PDIST2,PP,RAD,RADD,CUR2,DS,I5I,
     1            INDXAB)
C END 17 AUG 85 MODIFICATION
C
100   IF (NLTYPE.EQ.1) GO TO 190
      CALL DATUM(IFILE2,270,0,0,INT,REALL,CHARAC,IOUT,0,1)
  102 CONTINUE
      CALL DATUM(IFILE2,271,1,2,NTSTAT,REALL,CHARAC,IOUT,0,1)
      IF (NTSTAT.LT.0.OR.NTSTAT.GT.20) THEN
       WRITE(6,*)' NTSTAT NOT IN PERMISSIBLE RANGE 0 TO 20'
       CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,272,1,2,NTGRAD,REALL,CHARAC,IOUT,0,1)
      IF (NTGRAD.LT.1.OR.NTGRAD.GT.3) THEN
       WRITE(6,*)' NTGRAD NOT IN PERMISSIBLE RANGE 1 TO 3'
       CALL ERREX
      ENDIF
C
      IF (NTSTAT.EQ.0.AND.INDIC.NE.3) GO TO 120
      IF (NTSTAT.GE.2) GO TO 105
      WRITE(6,103)
  103 FORMAT(//' INDIC = 3.  THEREFORE, NTSTAT MUST BE GREATER THAN'/
     1' OR EQUAL TO 2'/)
      REWIND IFILE2
      GO TO 102
  105 CONTINUE
C     READ THERMAL DISTRIBUTED LOADS
      IF (INDIC.NE.3) GO TO 110
C     READ NONSYMMETRIC THERMAL DISTRIBUTED LOADS
      CALL LOADRD(4,3,NTSTAT,NTSTAT,I,NSEG,NHARM,INDIC,TDIST,PDIST2,
     1TAXIAL,276,LMECH,LSET)
      GO TO 140
C     READ AXISYMMETRIC THERMAL DISTRIBUTED LOADS
110   CALL LOADRD(4,3,NTSTAT,NTSTAT,I,NSEG,NHARM,INDIC,TDIST,PDIST2,
     1TAXIAL,276,LMECH,LSET)
      GO TO 140
120   CONTINUE
      IF (NLTYPE.EQ.2) LMECH = 0
      T12 = 0.
      T13 = 0.
      T14 = 0.
      T15 = 0.
      CALL DATUM(IFILE2,273,1,1,INT,T11,CHARAC,IOUT,0,1)
C
      T22 = 0.
      T23 = 0.
      T24 = 0.
      T25 = 0.
      CALL DATUM(IFILE2,274,1,1,INT,T21,CHARAC,IOUT,0,1)
C
      T32 = 0.
      T33 = 0.
      T34 = 0.
      T35 = 0.
      CALL DATUM(IFILE2,275,1,1,INT,T31,CHARAC,IOUT,0,1)
C
      TT(1,1) = T11
      TT(1,2) = T21
      TT(1,3) = T31
      DO 130 J=2,I5I
      SJ = S(J) - S(1)
      TT(J,1) = T11 + T12*SJ**T13 + T14*SJ**T15
      TT(J,2) = T21 + T22*SJ**T23 + T24*SJ**T25
      TT(J,3) = T31 + T32*SJ**T33 + T34*SJ**T35
130   CONTINUE
      GO TO 190
140   CONTINUE
      IPRM(2) = 284
      CALL STA(ITVAL,Z,RAD,RADD,S,NTSTAT,I5I)
      IF (ITVAL(1).EQ.1.AND.ITVAL(NTSTAT).EQ.I5I) GO TO 160
      WRITE (6,150)I
150   FORMAT(//'   TEMPERATURE DISTRIBUTION CALLOUTS MUST INCLUDE VALUES
     1 AT FIRST AND LAST MESH PTS. IN SEG.',                      I3//) 
      WRITE(6,152) NTSTAT,I5I,(ITVAL(I),I=1,NTSTAT)
  152 FORMAT(' NO. OF CALLOUTS,                             NTSTAT=',I3/
     1       ' NUMBER OF NODAL POINTS IN SEGMENT,              I5I=',I3/
     1' POINTS CORRESPONDING TO CALLOUTS, (ITVAL(I),I=1,NTSTAT)='/20I5)
      CALL ERREX
160   CONTINUE
      DO 180 K=1,3
      DO 170 J=1,NTSTAT
170   P(J) = TAXIAL(K,J)
      CALL FINDZ(NTSTAT,ITVAL,P,I5I,TT(1,K),S)
180   CONTINUE
190   CONTINUE
      RETURN
      END
C=DECK      GETPST
      SUBROUTINE GETPST(ISEG,I5,      PSTS,RHF,S,RAD,RADD,Z)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     PREBUCKLING MEMBRANE STRESSES AND RING HOOP LOADS ARE READ IN AT
C     CONTROL POINTS, RATHER THAN BEING CALCULATED IN PRESTRESS ANALYSIS
C
      DIMENSION            PSTS(I5,3),RHF(98),ISTRES(98),IRING(98)
      DIMENSION STRESS(98),S(100),RAD(100),RADD(100) ,Z(*)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/ALOFIT/IDUM(10),KRING,IDUM1(11)
      COMMON/SEGS/ NSEG,M2,I6(95),I2,I2G
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
10    FORMAT(10I6)
20    FORMAT(6E12.8)
C     NSTRES  = NO. OF MERIDIONAL STATIONS FOR WHICH N10,N20, AND CHI0
C               ARE READ IN
C     NRLOAD = NO. OF DISCRETE RINGS WHICH ARE PRELOADED BY HOOP FORCE.
C              ( IN ENTIRE SHELL, NOT JUST FIRST SEGMENT)
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ PREBUCKLING RESULTANTS INPUT FOLLOWS...')
      CALL DATUM(IFILE2,310,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,311,1,2,NSTRES,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,312,1,2,NRLOAD,REALL,CHARAC,IOUT,0,1)
C     MESH POINT TAGS FOR PRESTRESS CALLOUTS ARE ASSIGNED IN STA
      NTOT = KRING
      IF (NSTRES.EQ.0) GO TO 60
   25 CONTINUE
      IPRM(2) = 313
      CALL STA(ISTRES,Z,RAD,RADD,S,NSTRES,I5)
      IF (ISTRES(1).EQ.1.AND.ISTRES(NSTRES).EQ.I5) GO TO 40
      WRITE (6,30)ISEG
30    FORMAT(//88H PRESTRESS DISTRIBUTION CALLOUTS MUST INCLUDE VALUES A
     1T FIRST AND LAST MESH PTS IN SEG.   I3//)
      CALL ERREX
40    CONTINUE
      DO 50 J=1,2
C     STRESS(I) = N10 IF J = 1
C               = N20 IF J = 2
      NHLP = 2
      IF (J.EQ.2) NHLP = 1
      JPRM = 316
      IF (J.EQ.2) JPRM = 317
      DO 45 I = 1,NSTRES
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRM,1,NHLP,INT,STRESS(I),CHARAC,IOUT,I,IPROMP)
   45 CONTINUE
C
      CALL FINDZ(NSTRES,ISTRES,STRESS,I5,PSTS(1,J),S)
50    CONTINUE
      GO TO 80
60    DO 70 J=1,I5
      DO 70 K=1,3
70    PSTS(J,K) = 0.0
80    CONTINUE
      IF (ISEG.NE.1) GO TO 110
      IF (NRLOAD.EQ.0) GO TO 110
C     IRING(I) = RING NUMBER OF RING WHICH IS PRESTRESSED
C     STRESS(I) = HOOP PRESTRESS IN ITH RING
      DO 85 I = 1,NRLOAD
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,318,1,2,IRING(I),REALL,CHARAC,IOUT,I,IPROMP)
   85 CONTINUE
C
      DO 87 I = 1,NRLOAD
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,319,1,1,INT,STRESS(I),CHARAC,IOUT,I,IPROMP)
   87 CONTINUE
C
      DO 90 I = 1,98
90    RHF(I) = 0.0
      DO 100 I=1,NRLOAD
      J = IRING(I)
100   RHF(J) = STRESS(I)
110   CONTINUE
      REWIND IFILE3
      CALL DATUM(IFILE3,605,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 145
      WRITE(IFILE4,120) ISEG
120   FORMAT(//40H PRESTRESS QUANTITIES FOR SEGMENT                I3/)
      DO 140 I=1,I5
      PSTS(I,3) = 0.0
      WRITE (IFILE4,130)I,PSTS(I,1),PSTS(I,2),PSTS(I,3)
130   FORMAT( 9H STATION I3, 24H   MERID. RESULT. N10 =  1PE12.4,       
     123H   CIRC. RESULT. N20 =  1PE12.4, 22H   MERID. ROT. BETA =      
     21PE12.4    )
140   CONTINUE
145   CONTINUE
      IF (ISEG.NE.NSEG) GO TO 180
      IF (NTOT.EQ.0) GO TO 180
      WRITE (IFILE4,150)NTOT,NRLOAD
150   FORMAT(//15H OF A TOTAL OF I2, 16HDISCRETE RINGS, I2, 19H  ARE PRE
     1STRESSED.   //)
      DO 160 I=1,NTOT
160   WRITE (IFILE4,170)I,RHF(I)
170   FORMAT(19H DISCRETE RING NO. I2, 30H.  HOOP PRESTRESS RESULTANT = 
     11PE20.8)
180   CONTINUE
      RETURN
      END
C=DECK      GETFS
      SUBROUTINE GETFS(M,NS,FS)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C     USER-WRITTEN SUBROUTINE FOR MERIDIONAL DISTRIBUTION OF LOAD FOR
C     WHICH A CIRCUMFERENTIAL FOURIER SERIES EXPANSION WILL BE CALC.
      DIMENSION FS(4,20)
      DTHETA = 3.1415927/ FLOAT(NS-1)
      FS(M,1) = 1.0
      THETA = 0.0
      DO 10 I=2,NS
      THETA = THETA + DTHETA
      FS(M,I) = 0.5*(1. + COS(THETA))
10    CONTINUE
      RETURN
      END
C=DECK      LODPOS
      SUBROUTINE LODPOS(NPOS,NHARM,LINAB,LIN,LMECH,INDXAB,IPOS)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  PURPOSE IS TO DETERMINE THE POSITION OF THE LOAD HARMONICS IN A
C  WORKING SPACE THAT CONTAINS CIRCUMFERENTIAL HARMONICS FOR
C  MECHANICAL AND THERMAL LOADS.  THE WORKING SPACE MAY CONTAIN AS
C  MANY AS THREE GROUPS OF NHARM HARMONICS EACH: THE FIRST GROUP
C  CORRESPONDING TO NON-SHEARING MECHANICAL LOAD HARMONICS, THE SECOND
C  TO SHEARING MECHANICAL LOAD HARMONICS, AND THE THIRD TO THERMAL LOAD
C  HARMONICS.
C
C  INPUT DATA...
C
C  NPOS   = STARTING POSITION
C  NHARM  = NUMBER OF CIRCUMFERENTIAL HARMONICS IN THE FOURIER SERIES
C  LINAB  = CONTROL FOR LOADS:
C           0 = NONE
C           1 = TYPE "A" LOADS ONLY
C           2 = TYPE "B" LOADS ONLY
C           3 = BOTH TYPE "A" LOADS AND TYPE "B" LOADS
C
C  LIN    = CONTROL FOR KINDS OF LOADS PRESENT:
C           0 = NONE
C           1 = MECHANICAL LOADS ONLY
C           2 = THERMAL LOADS ONLY
C           3 = BOTH MECHANICAL AND THERMAL LOADS
C
C  LMECH  = CONTROL FOR KINDS OF MECHANICAL LOADS PRESENT:
C           0 = NONE
C           1 = NON-SHEARING TYPE OF LOADS PRESENT ONLY
C           2 = SHEARING TYPE OF LOADS PRESENT ONLY
C           3 = BOTH NON-SHEARING AND SHEARING TYPES OF LOADS PRESENT
C
C  INDXAB = EITHER 1 OR 2, DEPENDING ON WHETHER WE ARE DEALING WITH
C           "A" TYPE OR "B" TYPE LOADS, RESPECTIVELY
C
C  OUTPUT DATA..
C
C  IPOS   = POSITION IN WORKING SPACE OF BEGINNING OF FOURIER
C           CIRCUMFERENTIAL HARMONICS OF LOAD
C
C   The following diagram shows the positions of various circumfer-
C   ential harmonics in working space:
C
C|-------Circumferential harmonics for all loads in Segment-----------|
C|-------L I N E   L O A D S-------|-D I S T R I B U T E D   L O A D S-|
C|--Load system A--|--Load system B--|-Load system A--|-Load system B--|
C|V,H,M|SHEAR|THERM|V,H,M|SHEAR|THERM|Ps,Pn| Pc |THERM|Ps,Pn| Pc |THERM|
C|NHARM|NHARM|NHARM|NHARM|NHARM|NHARM|NHARM|NHAR|NHARM|NHARM|NHAR|NHARM|
C POSITION NUMBER...
C|1    |2    |3    |4    |5    |6    |7    |8   |9    |10   |11  |12   |
C
C  This subroutine establishes the relative positions in working space
C  of three consecutive loading sets. For each segment this subroutine
C  is called four times:
C        1. first time establishes positions for line loads
C           in load system "A" (Positions |1    |2    |3    |)
C        2. second time establishes positions for line loads
C           in load system "B" (Positions |4    |5    |6    |)
C        3. third time establishes positions for distributed loads
C           in load system "A" (Positions |7    |8    |9    |)
C        4. fourth time establishes positions for distributed loads
C           in load system "B" (Positions |10   |11   |12   |)
C
      LOGICAL LAB,L,LM
      DIMENSION IPOS(*)
      COMMON/INSTAB/INDIC
C
      NADD = NHARM
      IF (INDIC.NE.3) NADD = 1
C
C   POSITION OF NON-SHEARING LOADS...
C
      IPOS(1) = NPOS
C
      LAB = LINAB.EQ.INDXAB.OR.LINAB.EQ.3
      L  = LIN.EQ.1.OR.LIN.EQ.3
      LM = LMECH.EQ.1.OR.LMECH.EQ.3
C
C   If LAB is true, I have load system "INDXAB".
C                                INDXAB=1 means "A";  2 means "B"
C   If   L is true, I have mechanical loads in load system "INDXAB"
C   If  LM is true, I have non-shearing mechanical loads.
C
C  POSITION OF SHEARING LOADS...
C
      IF (LAB.AND.L.AND.LM) THEN
         IPOS(2) = IPOS(1) + NADD
      ELSE
         IPOS(2) = IPOS(1)
         IPOS(1) = 0
      ENDIF
C
C  POSITION OF THERMAL LOADS...
C
      LM = LMECH.EQ.2.OR.LMECH.EQ.3
C
C   If  LM is true, I have shearing mechanical loads
C
      IF (LAB.AND.L.AND.LM) THEN
          IPOS(3) = IPOS(2) + NADD
      ELSE
          IPOS(3) = IPOS(2)
          IPOS(2) = 0
      ENDIF
C
C   FIND NEW STARTING POSITION...
C
      L = LIN.EQ.2.OR.LIN.EQ.3
C
C   If  L is true, then I have thermal loads
C
      IF (LAB.AND.L) THEN
          NPOS = IPOS(3) + NADD
      ELSE
          NPOS = IPOS(3)
          IPOS(3) = 0
      ENDIF
C
      RETURN
      END
C=DECK      LODMCH
      SUBROUTINE LODMCH(NLOAD,LMECH)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  PURPOSE IS TO DETERMINE A VALUE FOR LMECH FROM NLOAD(i), i=1,4
C
C  INPUT DATA...
C
C  NLOAD = ARRAY OF INDICATORS FOR LOADING TYPE
C          0 MEANS NO LOAD OF THAT TYPE
C          1 MEANS YES LOAD OF THAT TYPE
C
C  OUTPUT DATA...
C
C  LMECH = INDICATOR FOR WHETHER OR NOT SHEARING LOADS ARE PRESENT
C          WITH OR WITHOUT NONSHEARING LOADS
C          0 MEANS NO LOADS
C          1 MEANS NON SHEARING LOADS ONLY
C          2 MEANS SHEARING     LOADS ONLY
C          3 MEANS BOTH SHEARING LOADS AND NON SHEARING LOADS
C
      DIMENSION NLOAD(*)
C
      IF (NLOAD(2).EQ.0) GO TO 20
C
C  SHEARING LOAD PRESENT...
C
      IF (NLOAD(1).NE.0.OR.NLOAD(3).NE.0.OR.NLOAD(4).NE.0) THEN
         LMECH = 3
      ELSE
         LMECH = 2
      ENDIF
      GO TO 100
C
   20 CONTINUE
C
C     SHEARING LOAD ABSENT...
C
      IF (NLOAD(1).NE.0.OR.NLOAD(3).NE.0.OR.NLOAD(4).NE.0) THEN
         LMECH = 1
      ELSE
         LMECH = 0
      ENDIF
  100 CONTINUE
      RETURN
      END
C=DECK      LODSTO
      SUBROUTINE LODSTO(NHARM,IPOS,P1,P2,T1,PALL)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  PURPOSE IS TO RESTORE CIRCUMFERENTIAL HARMONICS IN THE WORKING
C  SPACE ARRAY, PALL
C
C  INPUT DATA...
C
C  NHARM = NUMBER OF HARMONICS
C   IPOS = POSITIONS OF STARTING HARMONICS
C     P1 = VALUES OF HARMONICS FOR NON-SHEARING LOADS
C     P2 = VALUES OF HARMONICS FOR     SHEARING LOADS
C     T1 = VALUES OF HARMONICS FOR THERMAL LOADING
C
C  OUTPUT DATA...
C
C   PALL = WORKING SPACE ARRAY FOR CIRCUMFERENTIAL HARMONICS; ALL LOADS
C
      DIMENSION IPOS(*),P1(*),P2(*),T1(*),PALL(*)
      COMMON/INSTAB/INDIC
C
      IF (INDIC.NE.3) RETURN
C
      DO 100 I = 1,3
      IF (IPOS(I).EQ.0) GO TO 100
      DO 50 J = 1,NHARM
C
      K = IPOS(I) + J - 1
      GO TO (10,20,30),I
   10 CONTINUE
      PALL(K) = P1(J)
      GO TO 50
   20 CONTINUE
      PALL(K) = P2(J)
      GO TO 50
   30 CONTINUE
      PALL(K) = T1(J)
   50 CONTINUE
  100 CONTINUE
      RETURN
      END
C
C
C
C=DECK      FDYNAM
      SUBROUTINE FDYNAM(Z,ITOT,NHARM,NKR,KRING1,ISEG,PLIN1,
     1                  PLIN2,PAXIAL,LSET)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  THIS SUBROUTINE ADDED 17 AUG. 1985. PURPOSE IS TO GET CONTRIBUTION
C  TO TOTAL FORCES FROM LOADS APPLIED TO THE RINGS. LATER THESE LOADS
C  WILL BE USED TO OBTAIN DALEMBERT FORCES THAT WILL MAKE THE TOTAL
C  LOADS ON THE STRUCTURE SELF-EQUILIBRATING.
C
      DIMENSION Z(*),PLIN1(*),PLIN2(*),PAXIAL(4,50)
      COMMON/GLOBAL/IDZ,IZRING(98),ISAVE(20),INOTE
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
      COMMON/RNGGEO/RC(98),AREA(98),ER(98),IY(98),IX(98),IXY(98),IP(98)
       REAL MX,MY,MZ,ICM,IZ,M,IX,IY,IXY,IP
      COMMON/RMASS/RM(98)
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
C
C     IF (IDYN(LSET).EQ.0) GO TO 40
      NKOUNT = 0
      PI = 3.1415927
      N = NSTART - INCR
  360 N = N + INCR
      NKOUNT = NKOUNT + 1
      IF (NKOUNT.GT.NHARM) GO TO 40
      IF (IABS(N).GT.1) GO TO 360
      INDX = NKOUNT
      DO 9 K = KRING1,NKR
      IZGL = IZRING(K) - ITOT + 1
      VV = PAXIAL(1,K)*PLIN1(INDX)
      SS = PAXIAL(2,K)*PLIN2(INDX)
      HH = PAXIAL(3,K)*PLIN1(INDX)
      FMM= PAXIAL(4,K)*PLIN1(INDX)
      IF (N.NE.-1) GO TO 2
      FX(LSET) = FX(LSET) + PI*RC(K)*(HH-SS)
      MY(LSET) = MY(LSET) + PI*RC(K)*(VV*RC(K) -SS*Z(IZGL) +HH*Z(IZGL)
     1           +FMM)
      GO TO 9
    2 IF (N.NE.0) GO TO 3
      FZ(LSET) = FZ(LSET) - 2.*PI*VV*RC(K)
      MZ(LSET) = MZ(LSET) - 2.*PI*SS*RC(K)**2
      GO TO 9
    3 IF (N.NE.1) GO TO 9
      FY(LSET) = FY(LSET) - PI*RC(K)*(HH+SS)
      MX(LSET) = MX(LSET) + PI*RC(K)*(VV*RC(K) +SS*Z(IZGL) +HH*Z(IZGL)
     1          +FMM)
    9 CONTINUE
      GO TO 360
   40 CONTINUE
      RETURN
      END
C
C
C
C=DECK      PDYNAM
      SUBROUTINE PDYNAM(ZA,NHARM,ISEG,PDIST1,PDIST2,PP,RAD,RADD,CUR2,
     1                  DS,I5I,LSET)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C
C  PURPOSE IS TO CALCULATE TOTAL FORCES AND MOMENTS DUE TO
C  NON-SELF-EQUILIBRATING DISTRIBUTED (AS OPPOSED TO LINE) LOADS.
C  THIS SUBROUTINE ADDED TO BOSOR4 17 AUGUST 1985. RESULTS ARE USED
C  FOR DYNAMIC REACTION CALCULATIONS.
C
      DIMENSION ZA(*),PDIST1(*),PDIST2(*),PP(I5I,3),RAD(*),RADD(*)
      DIMENSION CUR2(*),DS(*)
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,M
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
C
C     IF (IDYN(LSET).EQ.0) GO TO 40
      NKOUNT = 0
      PI = 3.1415927
      N = NSTART - INCR
  360 N = N + INCR
      NKOUNT = NKOUNT + 1
      IF (NKOUNT.GT.NHARM) GO TO 40
      IF (IABS(N).GT.1) GO TO 360
      INDX = NKOUNT
      DO 9 K = 1,I5I
      Z = ZA(K)
      PT = PP(K,1)*PDIST1(INDX)
      PC = PP(K,2)*PDIST2(INDX)
      PN = PP(K,3)*PDIST1(INDX)
      H = DS(K)
      IF (K.EQ.1.OR.K.EQ.I5I) H = DS(K)/2.
      R = RAD(K)
      RD= RADD(K)
      FK2 = CUR2(K)
      RDS = R*H
      IF (N.NE.-1) GO TO 2
      FX(LSET) = FX(LSET) +RDS*PI*(PN*R*FK2 + PT*RD - PC)
      MY(LSET) = MY(LSET) +RDS*PI*(Z*(PN*R*FK2 +PT*RD -PC)
     1                            +R*(PN*RD -PT*R*FK2))
      GO TO 9
    2 IF (N.NE.0) GO TO 3
      FZ(LSET) = FZ(LSET) + RDS*2.*PI*(-PN*RD +PT*R*FK2)
      MZ(LSET) = MZ(LSET) - RDS*2.*PI*PC*R
      GO TO 9
    3 IF (N.NE.1) GO TO 9
      FY(LSET) = FY(LSET) - RDS*PI*(PN*R*FK2 +PT*RD + PC)
      MX(LSET) = MX(LSET) + RDS*PI*(Z*(PN*R*FK2 +PT*RD +PC)
     1                             +R*(PN*RD -PT*R*FK2))
    9 CONTINUE
      GO TO 360
   40 CONTINUE
      RETURN
      END
