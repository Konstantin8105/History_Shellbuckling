C=DECK      PROMPTERLIB
C
C  THIS IS THE PROMPTER LIBRARY (SOURCE FILE)
C

C
C
C=DECK      DATUM
      SUBROUTINE DATUM(IFILE,ISECT,I1,I2,INTEGR,REALL,CHARAC,OUTFIL,
     1 IARRAY,JARRAY,NDIMEN,IPROMP)
C
C      PURPOSE IS TO READ PROMPT AND INPUT DATA
C
      CHARACTER*4 CHARAC
      CHARACTER*80 PHRASE
      COMMON/PWORD/PHRASE
      COMMON/PWORD2/IBLANK
      LOGICAL ANSWEX
      INTEGER OUTFIL
C
      IF (I1.GT.0) GO TO 5
C
C      PROMPT WITH NO INPUT DATA...
C
      CALL PROMPT(IFILE,ISECT,I1,PHRASE,IPROMP)
      GO TO 100
    5 CONTINUE
      IPROM2 = 1
    6 CONTINUE
C
      DO 10 I = I1,I2
      IF (IPROMP.GT.0.AND.IPROM2.GT.0) CALL PROMPT(IFILE,ISECT,I,
     1 PHRASE,IPROMP)
      CALL PHOUT(IARRAY,JARRAY,NDIMEN,PHRASE,IBLANK,IPROMP)
      IF (IPROMP.GT.1.AND.I.LT.I2) GO TO 10
      IF (ANSWEX('H',INTEGR,REALL,ITYPE) ) GO TO 10
      GO TO 20
   10 CONTINUE
C
      WRITE(6,*)' There is no more help. Do your best.'
      IPROM2 = 0
      GO TO 6
   20 CONTINUE
      IF (ITYPE) 30,40,50
   30 CONTINUE
C     INPUT DATA IS OF CHARACTER TYPE...
      CALL I2C(INTEGR,CHARAC)
      IF (IARRAY.EQ.0)
     1WRITE(OUTFIL,'(6X,A1,9X,A,A)') CHARAC(1:1),'$ ',PHRASE(1:IBLANK)
C BEG AUG 2010
C     IF(IARRAY.GT.0)WRITE(OUTFIL,'(6X,A1,9X,A,A,A,I2,A)')CHARAC(1:1),
C    1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
      IF(IARRAY.GT.0)WRITE(OUTFIL,'(6X,A1,9X,A,A,A,I3,A)')CHARAC(1:1),
     1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
C END AUG 2010
      WRITE(6,'(1X,A1)') CHARAC(1:1)
      IF (IPROMP.GT.1) WRITE(IPROMP,'(1X,A1)') CHARAC(1:1)
      GO TO 100
   40 CONTINUE
C
C     INPUT DATA IS OF INTEGER TYPE...
C
      IF (NDIMEN.EQ.0) WRITE(OUTFIL,'(1X,I9,6X,A,A)')INTEGR,'$ ',
     1 PHRASE(1:IBLANK)
C BEG AUG 2010
C     IF (NDIMEN.EQ.1) WRITE(OUTFIL,'(1X,I9,6X,A,A,A,I2,A)') INTEGR,
C    1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
C     IF (NDIMEN.EQ.2) WRITE(OUTFIL,'(1X,I9,6X,A,A,A,I2,A,I2,A)')
C    1 INTEGR,'$ ',PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')'
      IF (NDIMEN.EQ.1) WRITE(OUTFIL,'(1X,I9,6X,A,A,A,I3,A)') INTEGR,
     1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
      IF (NDIMEN.EQ.2) WRITE(OUTFIL,'(1X,I9,6X,A,A,A,I3,A,I3,A)')
     1 INTEGR,'$ ',PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')'
C END AUG 2010
      WRITE(6,'(1X,I9)') INTEGR
      IF (IPROMP.GT.1) WRITE(IPROMP,'(1X,I9)') INTEGR
      GO TO 100
   50 CONTINUE
C
C     INPUT DATA IS OF FLOATING POINT TYPE...
C
      IF (NDIMEN.EQ.0) WRITE(OUTFIL,'(1X,G14.7,1X,A,A)')REALL,
     1 '$ ',PHRASE(1:IBLANK)
C BEG AUG 2010
C     IF (NDIMEN.EQ.1) WRITE(OUTFIL,'(1X,G14.7,1X,A,A,A,I2,A)') REALL,
C    1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
C     IF (NDIMEN.EQ.2) WRITE(OUTFIL,'(1X,G14.7,1X,A,A,A,I2,A,I2,A)')
C    1 REALL,'$ ',PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')'
      IF (NDIMEN.EQ.1) WRITE(OUTFIL,'(1X,G14.7,1X,A,A,A,I3,A)') REALL,
     1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
      IF (NDIMEN.EQ.2) WRITE(OUTFIL,'(1X,G14.7,1X,A,A,A,I3,A,I3,A)')
     1 REALL,'$ ',PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')'
C END AUG 2010
C
      WRITE(6,'(1X,G14.7)') REALL
      IF (IPROMP.GT.1) WRITE(IPROMP,'(1X,G14.7)') REALL
  100 CONTINUE
      RETURN
      END
C
C
C
C=DECK      PROMPT
      SUBROUTINE PROMPT(IFILE,ISECT,ISUB,STORE,IPROMP)
C
C      PURPOSE IS TO PROVIDE PROMPTS FOR INPUT DATA.
C
      CHARACTER*80 STORE,PHRASE
C
      IF (ISECT.EQ.1.AND.ISUB.EQ.0) JSECT = 0
      DO 200 IDSECT = 1,10000
      IF (JSECT.EQ.0.OR.IDSECT.GT.1) READ(IFILE,4,END=250,ERR=400) 
     1 SECT, PHRASE
    4 FORMAT(F7.1,A)
      IF (ISUB.EQ.1) STORE=PHRASE
      JSECT = SECT
      FSECT = JSECT
C
      IF (JSECT.NE.ISECT) GO TO 200
C
C     THIS IS THE SECTION OF THE PROMPTING DATA THAT WE ARE LOOKING FOR
C
      FJSUB = 10.*(SECT - FSECT)  + 0.5
      JSUB  = FJSUB
      IF (JSUB.NE.ISUB) GO TO 200
C
C     THIS IS THE SUBSECTION OF PROMPTING THAT WE ARE LOOKING FOR...
C
      IF (ISUB.NE.1) WRITE(6,'(1X,A)') PHRASE(1:79)
      IF (ISUB.NE.1.AND.IPROMP.GT.1)WRITE(IPROMP,'(1X,A)')PHRASE(1:79)
C
      DO 100 IDSUB = 1,10000
      READ(IFILE,4,END=250,ERR=400) SECT,PHRASE
      JSECT = SECT
      IF (JSECT.NE.0) GO TO 300
      IF (ISUB.NE.1) WRITE(6,'(1X,A)')PHRASE(1:79)
      IF (ISUB.NE.1.AND.IPROMP.GT.1)WRITE(IPROMP,'(1X,A)')PHRASE(1:79)
  100 CONTINUE
C
      GO TO 400
  200 CONTINUE
  250 CONTINUE
      WRITE(6,'(A,I2,A)')' END OF FILE ON FILE NO.',IFILE,
     1 ' ENCOUNTERED.'
  300 RETURN
  400 CONTINUE
      WRITE(6,3) IFILE
    3 FORMAT(//' PROMPT FILE NO.',I3,' IS IN ERROR.')
      CALL ERREX
      END
C
C
C
C=DECK      ANSWEX
      LOGICAL FUNCTION ANSWEX(L,I,R,T)
C
C      PURPOSE IS TO READ INPUT DATA.
C
      INTEGER T
      CHARACTER L*1, U*4, NUL*1
      NUL = CHAR(0)
      I = 0
      CALL NXITEM(I,R,T,M)
      IF (T.EQ.0) R = I
      K = 0
      IF (T .EQ. -1) THEN
         CALL I2C ( I, U )
         DO 120 J = 1,4
            IF (L .EQ. U(J:J) .AND. K .EQ. 0) THEN
               K = J
            ELSE IF (' ' .NE. U(J:J) .AND. NUL .NE. U(J:J) ) THEN
               K = -1
            ENDIF
  120    CONTINUE
      ENDIF
      ANSWEX = K .GT. 0
      RETURN
      END
C
C
C
C
C=DECK      IBLNK
      SUBROUTINE IBLNK(PHRASE,IBLANK)
C
C     PURPOSE IS TO REMOVE TRAILING BLANKS FROM PHRASE...
C
      CHARACTER*80 PHRASE
C
      DO 100 I = 1,80
      IBLANK = 81-I
      IF (PHRASE(IBLANK:IBLANK).NE.' ') GO TO 200
  100 CONTINUE
  200 CONTINUE
      RETURN
      END
C
C
C
C=DECK      PHOUT
      SUBROUTINE PHOUT(IARRAY,JARRAY,NDIMEN,PHRASE,IBLANK,J)
C
C     PRINT OUT THE SHORTEST PROMPT...
C
      CHARACTER*80 PHRASE
      CALL IBLNK(PHRASE,IBLANK)
      IF (NDIMEN.EQ.0) WRITE(6,'(1X,A,A,$)') PHRASE(1:IBLANK),'='
C BEG AUG 2010
C     IF (NDIMEN.EQ.1) WRITE(6,'(1X,A,A,I2,A,$)')
C    1PHRASE(1:IBLANK),'(',IARRAY,')='
C     IF (NDIMEN.EQ.2) WRITE(6,'(1X,A,A,I2,A,I2,A,$)')
C    1PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')='
      IF (NDIMEN.EQ.1) WRITE(6,'(1X,A,A,I3,A,$)')
     1PHRASE(1:IBLANK),'(',IARRAY,')='
      IF (NDIMEN.EQ.2) WRITE(6,'(1X,A,A,I3,A,I3,A,$)')
     1PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')='
C END AUG 2010
C
      IF (J.GT.1) THEN
        IF (NDIMEN.EQ.0) WRITE(J,'(1X,A,A,$)') PHRASE(1:IBLANK),'='
C BEG AUG 2010
C       IF (NDIMEN.EQ.1) WRITE(J,'(1X,A,A,I2,A,$)')
C    1  PHRASE(1:IBLANK),'(',IARRAY,')='
C       IF (NDIMEN.EQ.2) WRITE(J,'(1X,A,A,I2,A,I2,A,$)')
C    1  PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')='
        IF (NDIMEN.EQ.1) WRITE(J,'(1X,A,A,I3,A,$)')
     1  PHRASE(1:IBLANK),'(',IARRAY,')='
        IF (NDIMEN.EQ.2) WRITE(J,'(1X,A,A,I3,A,I3,A,$)')
     1  PHRASE(1:IBLANK),'(',IARRAY,',',JARRAY,')='
C END AUG 2010
      ENDIF
C
      RETURN
      END
C
C
C
C=DECK      I2C
      SUBROUTINE I2C(INTEGR,CHARAC)
C
C     CONVERT INTEGER TO CHARACTER
C
      CHARACTER*4 CHARAC
C
      INT = INTEGR
      DO 100 I = 1,4
      CHARAC(I:I) = CHAR(MOD(INT,256))
      INT = INT/256
  100 CONTINUE
      RETURN
      END
C
C
C
C=DECK      ABORT2
        SUBROUTINE      ABORT2
     1      (II)
      IF(II-2) 20,10,30
   10 I=-1
      WRITE(6,11)
   11 FORMAT('0TERMINATION INITIATED BY PROGRAM...')
      I=SQRT(FLOAT(I))
   20 CALL ERREX
   30 RETURN
      END
C
C
C
C=DECK      NXITEM
        SUBROUTINE      NXITEM
     1   (IVAR,RVAR,TYPE,MORE)
      COMMON /NXICM7/ LIP,NIP,NPL,INPAR(30,2),ISCR(103)
      COMMON/INDAT/NIT
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      INTEGER TYPE
      CHARACTER*4 CH
      EQUIVALENCE (IR,R)
      DATA  LIP,NIP,NPL/0,0,30/
      DATA NOT/6/
      LIP = 1+LIP
      IF (LIP.GT.NIP)                  GO TO 110
      IF (INPAR(LIP,2).GE.0) GO TO 130
      CALL I2C(INPAR(LIP,1),CH)
      IF (CH(1:1).NE.'$')    GO TO 130
  110 CONTINUE
      LIP = 1
  120 CALL READFF(INPAR(1,1),INPAR(1,2),NIP,INPAR(1,2))
      IF (NIP)                         123,124,125
  123 CONTINUE
      IF (NIT.EQ.5) THEN
      WRITE(NOT,3)
      CALL ABORT2(2)
C     CLOSE(UNIT=INALT)
      ELSE
         NIT = 5
         IOUT = 26
      ENDIF
C
                                       GO TO 120
  124 WRITE(NOT,2)
                                       GO TO 120
  125 IF (NIP.LE.NPL)                  GO TO 130
      WRITE(NOT,1) NPL
                                       GO TO 120
  130 TYPE = INPAR(LIP,2)
      IF (TYPE)                        145,135,140
  135 IVAR = INPAR(LIP,1)
                                       GO TO 150
  140 IR   = INPAR(LIP,1)
      RVAR = R
                                       GO TO 150
  145 CONTINUE
      IVAR = INPAR(LIP,1)
      LIP = LIP-TYPE-1
      TYPE=-1
  150 MORE = NIP-LIP
      RETURN
    1 FORMAT(25H SORRY, I CAN ONLY HANDLE,I3,18H ITEMS PER LINE.
     1   14HPLEASE REPEAT.)
    2 FORMAT(22H PLEASE SAY SOMETHING.)
    3 FORMAT(31H INPUT END OF FILE ENCOUNTERED.)
      END
C
C
C
C=DECK      READFF
      SUBROUTINE  READFF (LIST, TYPE, LISTP, STR)
      INTEGER     LIST(1), TYPE(1), LISTP, STR(1)
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
      CHARACTER*6 NAME
      INTEGER ENTITY,CHAR,STRP,ENTER,EXPN
      INTEGER COMMA,BLANK,DOT,PLUS,E,FL,AL,ALNWD,SLASH,STAR
      INTEGER SIGN(2),ENT1,ENT2,ICTL(10)
      CHARACTER*10 STRING
      CHARACTER*1 AAAA(2), CTL(10), LINE(132), upcase
      LOGICAL EXPT,DEC,SGN
      LOGICAL ECHO, REED
C     COMMON/ECHOFF/ECHO,IGNORE,LENGTH
      COMMON/ECHOFF/ECHO,IGNORE
      EQUIVALENCE (ENTITY,RENT), (ICTL(1),COMMA), (ICTL(2),BLANK),
     1  (ICTL(3),DOT), (ICTL(4),PLUS), (ICTL(5),MINUS), (ICTL(6),E),
     2  (ICTL(7),SLASH),(ICTL(8),STAR),(ICTL(9),NUML),(ICTL(10),NUMH)
      COMMON/INDAT/NIT
      DATA NOT/6/
      DATA    INT,FL,AL/0,1,-1/
      DATA    MASK,MXCHAR,NCTL,LENGTH
     1        /63,  80,    10,   4  /
      DATA    CTL/',',' ','.','+','-','E','/','*','0','9'/
C     DATA    COMMA,BLANK,DOT,PLUS,MINUS, E ,SLASH,STAR
C    1        /1H,,  1H , 1H., 1H+, 1H-,1HE , 1H/ , 1H* /
C     DATA    NUML,NUMH/
C    1        /1H0, 1H9/
      DATA MSK1,MSK2,MSK3 /3*0/
C+---------------------------------------------------------------------+
C|    define locqal function  LAND(I,J)                                |
C+---------------------------------------------------------------------+
      LAND(I,J) = IAND(I,J)
C
C
      NAME='READFF'
      REED=.TRUE.
      GO TO 100
C+---------------------------------------------------------------------+
C|    entry point:  R1READ                                             |
C+---------------------------------------------------------------------+
      ENTRY  R1READ (LIST, TYPE, LISTP, STR)
      NAME='R1READ'
      REED=.FALSE.
      GO TO 100
C+---------------------------------------------------------------------+
C|    entry point:  R1READ                                             |
C+---------------------------------------------------------------------+
      ENTRY  A1READ (LIST, TYPE, LISTP, STR)
      NAME='A1READ'
      REED=.FALSE.
C     GO TO 100
C+---------------------------------------------------------------------+
C|    entry point:  R1READ                                             |
C+---------------------------------------------------------------------+
  100 NCHAR = MXCHAR
      LISTP = 0
 
      DO 105 I=1,NCTL
        ICTL(I) = ICHAR(CTL(I))
 105  CONTINUE
C
      IF (REED) THEN
C***********************************************************************
C Changes by Harold Cabiness, Feb. 20, 1986...
C
  999    READ(NIT,1,END=901) (LINE(I), I=1,NCHAR)
c        if (line(1) .eq. 'h') then
           line(1) = UPCASE(line(1))
c        endif
c        if ( line(1) .eq. 'H'  .or.  line(1) .eq. 'h'  .or.
c    :        line(1) .eq. 'Y'  .or.  line(1) .eq. 'y'  .or.
c    :        line(1) .eq. 'N'  .or.  line(1) .eq. 'n' ) then
c           aaaa(1:1) = line(1)
c           aaaa(2:2) = line(2)
c           if ( aaaa .ne. 'H '  .and.  aaaa .ne. 'Y '  .and.
c    :           aaaa .ne. 'N ' ) then 
c              if ( line(1) .eq. 'H'  .or.  line(1) .eq. 'h' ) then
c                 WRITE(6,'(A,$)') ' Please enter "H" for help: '
c                 go to 999
c              else
c                 WRITE(6,'(A,$)')
c    :               ' Please enter "Y" for yes or "N" for no: '
c                 go to 999
c              endif
c           endif
c        endif
C End of Cabiness Feb 20, 1986 mods.
C************************************************************************
      DO 107 I=1,NCHAR
        STR(I) = ICHAR(LINE(I))
  107 CONTINUE
      END IF
C
      DO 110 NCHAR = MXCHAR, 1, -1
         IF (STR(NCHAR) .NE. BLANK) GO TO 115
  110 CONTINUE
  115 CONTINUE
      IF (ECHO) WRITE(NOT,2) (STR(I),I=1,NCHAR)
      IF (STR(1).NE.IGNORE)     GO TO 120
      IF (REED)                 GO TO 100
                                GO TO 900
  120 NCHARP      = NCHAR+1
      STR(NCHARP) = BLANK
      STRP = 1

  125 NSTR = 0
      EXPT = .FALSE.
      DEC  = .FALSE.
      SGN  = .TRUE.

*     ASSIGN 180 TO NEXT
*     ASSIGN 300 TO ENTER
      ENTER = 2
      NEXT  = 1

  130    CONTINUE
         CHAR = STR(STRP+NSTR)
         IF (CHAR.NE.BLANK)     GO TO 150
         IF (NSTR.GT.0)         THEN
           IF (ENTER .EQ. 1)    GO TO 280
           IF (ENTER .EQ. 2)    GO TO 300
           WRITE(6,4) NAME, 'ENTER'
           STOP 'ERROR'
         ENDIF
         STRP = 1+STRP
                                GO TO 500
  150    IF (CHAR.NE.COMMA)     GO TO 170
         IF (NSTR.GT.0)         THEN
           IF (ENTER .EQ. 1)    GO TO 280
           IF (ENTER .EQ. 2)    GO TO 300
           WRITE(6,4) NAME, 'ENTER'
           STOP 'ERROR'
         ENDIF

         STRP = 1+STRP
         LISTP= 1+LISTP
         LIST(LISTP) = 0
         TYPE(LISTP) = INT
                                GO TO 500
  170    NSTR = NSTR+1
         IF (NEXT .EQ. 1)       GO TO 180
         IF (NEXT .EQ. 2)       GO TO 500
         WRITE(6,4) NAME, 'NEXT'
         STOP 'ERROR'

  180    IF (SGN)               GO TO 190
         IF (.NOT.EXPT)         GO TO 200
  190    SGN = .FALSE.
         IF (CHAR.EQ.MINUS)     GO TO 500
         IF (CHAR.EQ.PLUS)      GO TO 500
  200    IF (CHAR.LT.NUML)      GO TO 210
         IF (CHAR.LE.NUMH)      GO TO 500
         IF (CHAR.EQ.SLASH)     GO TO 230
  210    IF (DEC)               GO TO 220
         IF (CHAR.EQ.DOT)       GO TO 225
  220    IF (EXPT)              GO TO 230
         IF (CHAR.EQ.E)         GO TO 223
         IF (CHAR.EQ.MINUS)     GO TO 224
         IF (CHAR.EQ.PLUS)      GO TO 224
         IF (NSTR.EQ.1)         GO TO 230
         IF (CHAR.EQ.STAR )     GO TO 230
  223    SGN = .TRUE.
  224    EXPT= .TRUE.
  225    DEC = .TRUE.
                                GO TO 500
  230    CONTINUE
*        ASSIGN 280 TO ENTER
*        ASSIGN 500 TO NEXT
         ENTER = 1
         NEXT  = 2
                                GO TO 500
C
  280 NWD=(NSTR+LENGTH-1)/LENGTH
      LIST(LISTP+NWD)=BLANK
      J=STRP+NSTR-1
      ALNWD=AL*NWD
      KK=0
      DO 290 K=STRP,J,LENGTH
      KK=KK+1
      JJ=MIN0(J,K+LENGTH-1)
c     WRITE (STRING, 3) (STR(I), I = K,JJ)
      ISTR = 0
      DO 285 I=K,JJ
  285 ISTR = 256*ISTR+STR(I)
      LIST(LISTP+KK) = ISTR
  290 TYPE(LISTP+KK)=ALNWD
      LISTP=LISTP+KK
                                GO TO 430
  300    ENT1 = 0
         ENT2 = 0
         SIGN(1)=1
         SIGN(2)=1
         ISGN=1
         IFRAC= 0
         EXPN = 0
         J    = MIN0(NCHAR,STRP+NSTR-1)
         DEC  =.FALSE.
         EXPT =.FALSE.
         LISTP= 1+LISTP
         DO 400 I=STRP,J
            CHAR = STR(I)
            IF (CHAR.LT.NUML)   GO TO 310
            IF (CHAR.LE.NUMH)   GO TO 340
  310       IF (CHAR.EQ.DOT)    GO TO 330
            IF (CHAR.EQ.E  )    GO TO 320
            IF (I.EQ.STRP)      GO TO 335
  320       EXPT=.TRUE.
  330       DEC=.TRUE.
  335       IF (CHAR.EQ.MINUS) SIGN(ISGN)=-1
            ISGN=2
                                GO TO 400
  340       NUM = CHAR-NUML
            IF (EXPT)           GO TO 350
            IF (DEC)            GO TO 360
            ENT1 = 10*ENT1+NUM
                                GO TO 400
  350       EXPN = 10*EXPN+NUM
                                GO TO 400
  360       IFRAC=IFRAC+1
            ENT2 = 10*ENT2+NUM
  400    CONTINUE
         RENT=FLOAT(ENT1)+FLOAT(ENT2)/10.**IFRAC
         IF (SIGN(2).GE.0) RENT=SIGN(1)*RENT*10.**EXPN
         IF (SIGN(2).LT.0) RENT=SIGN(1)*RENT/10.**EXPN
         IF (DEC)               GO TO 410
         ENTITY=RENT
         TYPE(LISTP)=INT
                                GO TO 420
  410    TYPE(LISTP)=FL
  420    LIST(LISTP)=ENTITY
  430    STRP= NSTR+1+STRP
         IF (STRP-NCHAR)    125,125,900
  500 IF (NSTR+STRP-NCHARP) 130,510,510
 
  510 IF (NSTR.GT.0)           THEN
        IF (ENTER .EQ. 1)      GO TO 280
        IF (ENTER .EQ. 2)      GO TO 300
        WRITE(6,4) NAME, 'ENTER'
        STOP 'ERROR'
      ENDIF

  900 RETURN
  901 LISTP=-1
      RETURN
    1 FORMAT(132A1)
    2 FORMAT(6H <IN> , 80A1)
    3 FORMAT(80A1)
    4 FORMAT(/,a,' ** ERROR ** assign goto ',a,
     $       ' not = 1 or 2?')
      END
C=DECK      ANSL1 
      LOGICAL FUNCTION ANSL1(LETTER,ANS,INPUT)
C=PURPOSE   TRUE IF USER RESPONDS WITH THE GIVEN LETTER     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*1 LETTER, ANSMOD, upcase
      CHARACTER*4 ANS   
C     
      IIERR = 0
      GO TO 5
    4 CONTINUE
      READ(INPUT,1) ANS
      WRITE(IOUT,3) ANS
    3 FORMAT(4X,A4,8X,'$  Proper comment will appear in DOC file.')
C     
    5 CONTINUE
      DO 10 I = 1,4     
      ISTART = I  
      IF (ANS(ISTART:ISTART).NE.' ') GO TO 20   
   10 CONTINUE    
   20 CONTINUE    
      ANSMOD = ANS(ISTART:istart)
c     ANS = ANSMOD
C     
      IF (upcase(ANSMOD).EQ.'N') GO TO 30 
      IF (upcase(ANSMOD).EQ.'Y') GO TO 30 
      WRITE(6,'(A,$)')' Please respond with YES or NO  (Y or N): '  
      IIERR = IIERR +1
      IF (IIERR.GT.1) THEN
         WRITE(6,*)' BAD INPUT. CHECK PREVIOUS INPUT.'
         CALL ERREX
      ENDIF
C
      BACKSPACE(IOUT)
      GO TO 4  
   30 CONTINUE    
C     
      ANSL1 = (upcase(ANSMOD).EQ.LETTER)
    1 FORMAT(A4)  
      RETURN
      END   
C
C
C
C=DECK      REREAD
C BEG JULY 1989
      SUBROUTINE REREAD(IOUT,IFILE3,INFILE,VNAME,LINE,CASE,IOUTFL)
C END JULY 1989
C
C  PURPOSE IS TO PERMIT READING FROM A PARTIALLY COMPLETED FILE, THEN
C  REVERT TO TERMINAL.
C
      CHARACTER*4 ANSOUT,CHARAC
C BEG VMS
C     CHARACTER*28 VNAME
C     CHARACTER*12 CASE
C     CHARACTER*16 CASE2
C END VMS
C BEG UNIX
      CHARACTER*32 VNAME
      CHARACTER*28 CASE
      CHARACTER*32 CASE2
      integer lastch
      logical exists
C END UNIX
      LOGICAL ANSL1
C
      I=INDEX(CASE,' ')
      IF(I.NE.0) THEN
         CASE2=CASE(:I-1)//'.010'
      ELSE
         CASE2=CASE//'.010'
      ENDIF
C BEG VMS
C     OPEN(UNIT=10,FILE=CASE2,STATUS='SCRATCH')
C END VMS
C BEG UNIX
c Open for UNIT 10 changed from SCRATCH to NEW or OLD, 4/13/93
      inquire(FILE=case2(1:lastch(case2)), EXIST=exists)
      if (exists) then
        OPEN(UNIT=10, FILE=case2(1:lastch(case2)), STATUS='OLD')
#if rs6k
        rewind(10)
#endif
      else
        OPEN(UNIT=10, FILE=case2(1:lastch(case2)), STATUS='NEW')
      endif
C END UNIX
      REWIND IFILE3
      CALL DATUM(IFILE3,LINE,1,2,INT,REALL,ANSOUT,10,0,0,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) THEN
C
C    BRANCH FOR NEW SEGMENT, NOT CORRECTING OLD...
C BEG 26 JAN 1989
        IOUT = 27
        INFILE = 5
C BEG VMS
C       OPEN(UNIT=IOUT,FILE=VNAME,STATUS='UNKNOWN')
C END VMS
C BEG UNIX
        inquire(FILE=vname(1:lastch(vname)), EXIST=exists)
        if (exists) then
          OPEN(UNIT=iout, FILE=vname(1:lastch(vname)), STATUS='OLD')
#if rs6k
          rewind(iout)
#endif
        else
          OPEN(UNIT=iout, FILE=vname(1:lastch(vname)), STATUS='NEW')
        endif
C END UNIX
C END 26 JAN 1989
      ELSE
C
C   BRANCH FOR CORRECTING EXISTING FILE...
C
C BEG 26 JAN 1989
        INFILE = 26
C BEG VMS
C       OPEN(UNIT=INFILE,FILE=VNAME,STATUS='UNKNOWN')
C END VMS
C BEG UNIX
        inquire(FILE=vname(1:lastch(vname)), EXIST=exists)
        if (exists) then
          OPEN(UNIT=infile, FILE=vname(1:lastch(vname)), STATUS='OLD')
#if rs6k
          rewind(infile)
#endif
        else
          OPEN(UNIT=infile, FILE=vname(1:lastch(vname)), STATUS='NEW')
        endif
C END UNIX
C BEG JULY 1989
        IOUT = IOUTFL
C END JULY 1989
C END 26 JAN 1989
      ENDIF
C
      RETURN
      END
C
C
C
C=DECK      CASNAM
      SUBROUTINE CASNAM(IUNIT,CASE)
C
C  PURPOSE IS TO ALLOW USER TO SUPPLY NAME OF THE CASE
C
C BEG OCT 2005
C     CHARACTER*12 CASE,CASE2
      CHARACTER*28 CASE,CASE2
C END OCT 2005
C
C BEG JUNE 1990
      IF (IUNIT.EQ.5)
     1    WRITE(6,'(1X,A,$)')' ENTER THE GENOPT CASE NAME: '
         READ(IUNIT,'(A)') CASE
      IF (IUNIT.NE.5.AND.IUNIT.NE.6.AND.IUNIT.NE.0) REWIND IUNIT
C END JUNE 1990
         DO 3 I = 1,12
            ISTART = I
            IF (CASE(I:I).NE.' ') GO TO 4
    3    CONTINUE
    4    CONTINUE
         CASE2 = CASE(ISTART: )
         CASE = CASE2
C
      RETURN
      END
C
C
C
C=DECK      NFILE
C BEG JULY 1989
      SUBROUTINE NFILE(IFILE,INFILE,IOUT,QUAL,IPROMP,IFILE8,FNAME,
     1                 IOUTFL)
C END JULY 1989
C
C    PURPOSE IS TO NAME THE OUTPUT FILE AND OPEN FILES.
C
C  INPUT DATA...
C
C  IFILE = FILE WHERE PROMPTS ARE STORED (PROMPT.DAT)
C  INFILE = UNIT NUMBER FOR INPUT DATA (5 OR 26)
C    QUAL = QUALIFIER = '.BEG' FOR BEGIN AND '.DEC' FOR DECIDE
C
C  OUTPUT DATA...
C
C  IOUT   = UNIT NUMBER FOR IMAGE OF INTERACTIVE SESSION
C
C BEG OCT 2005
C     CHARACTER *28 VNAME, CN*2, FNAME*12, FNAM2*12
      CHARACTER *32 VNAME, CN*2, FNAME*12, FNAM2*12
C END OCT 2005
      CHARACTER*4 ANSOUT,QUAL
      LOGICAL ANSL1
C
C BEG JULY 1989
      IOUT = IOUTFL
C END JULY 1989
      INFILE = 5
      I=INDEX(FNAME,' ')
      IF(I.NE.0) THEN
         VNAME=FNAME(:I-1)//QUAL
      ELSE
         VNAME=FNAME//QUAL
      ENDIF
C
C BEG JULY 1989
      CALL REREAD(IOUT,IFILE,INFILE,VNAME,10,FNAME,IOUTFL)
C END JULY 1989
C
      IPROMP = 1
      CALL DATUM(IFILE,20,1,2,INT,REALL,ANSOUT,IOUT,0,0,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) IPROMP = IFILE8
C
      RETURN
      END
C
C
c
C
C$F77               UPCASE
      character*(*) function UPCASE (s)
C+---------------------------------------------------------------------+
C|    UPCASE converts its character string argument to upper case.     |
C+---------------------------------------------------------------------+
C|    The function calling sequence is:                                |
C|                                                                     |
C|        result   =    UPCASE (S)                                     |
C|                                                                     |
C|    Inputs:                                                          |
C|                                                                     |
C|      S           Character string to be converted.                  |
C|                                                                     |
C|    Outputs:                                                         |
C|                                                                     |
C|      UPCASE      If input S is part/all lower case, then output     |
C|                  is all upper case equivalent.                      |
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C|                  A R G U M E N T S                                  |
C+---------------------------------------------------------------------+
      character*(*) s
C+---------------------------------------------------------------------+
C|                  L O C A L   V A R I A B L E S                      |
C+---------------------------------------------------------------------+
      integer       i,        ich
C+---------------------------------------------------------------------+
C|                  L O G I C                                          |
C+---------------------------------------------------------------------+
      do 1000 i = 1,LEN(s)
        ich   =    ICHAR(s(i:i))
        if (ich.ge.ICHAR('a') .and. ich.le.ICHAR('z'))     then
          UPCASE(i:i)  =  CHAR(ich-(ICHAR('a')-ICHAR('A')))
        else
          UPCASE(i:i)  =  s(i:i)
        endif
 1000 continue
      return
      end
