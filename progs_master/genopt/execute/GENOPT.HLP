C=DECK      HELP
> GENOPT
? COM        DE         FI
? LIB        OV
*
.    Help on various GENOPT features can be obtained by typing
.
.            HELPG TOPIC SUBTOPIC
.
.    in which TOPIC stands for a key word such as COMMAND, DEBUG,
.    FILES, OVERVIEW, or PROGRAMS; and SUBTOPIC stands for another
.    key word belonging as a subtopic under either COMMAND, DEBUG,
.    FILES, OVERVIEW, or PROGRAMS.  For example,
.
.            HELPG COMMAND GENTEXT
.
.    will give you information about providing input data for GENTEXT.
.
!    Information is available on the following topics:
!
! COMMAND        DEBUG         FILES
! LIBRARIES      OVERVIEW
!
! Next, please type HELPG TOPIC, in which TOPIC stands for one of the
! topics listed above.
*
C=DECK      COMMAND
> COM
? GENOPTLOG   HELPG     GENT      GENP
? GETL        INS       CLEANG    BEG
? DEC         MAINS     OPT       CHA
? CHO         DIP       CLEANS    GENOPTCASE
*
.   COMMANDS
.   
!   Information is available on:
!  
! GENOPTLOG   HELPG       GENTEXT      GENPROGRAMS
! GETLIB      INSERT      CLEANGEN     BEGIN
! DECIDE      MAINSETUP   OPTIMIZE     CHANGE
! CHOOSEPLOT  DIPLOT      CLEANSPEC    GENOPTCASE
!
! Next, please type HELPG COMMAND SUBTOPIC, in which SUBTOPIC stands
! for one of the subtopics listed above.
*
> GENOPTLOG
?
*
.   GENOPTLOG
.
.      This command activates commands for execution of GENOPT. The
.      activated commands can be seen by your typing GENOPTLOG.
.
.      NOTE: You must include the following statements in your
.            LOGIN.COM file in order to run GENOPT:
.
.                $ GENOPT     :==SET DEFAULT [USERNAME1.GENOPT]
.                $ GENOPTCASE :==SET DEFAULT [USERNAME2.GENOPTCASE]
.                $ ASSIGN USERDISK:[USERNAME1.GENOPT] GENOPT
.                $ ASSIGN USERDISK:[USERNAME2.GENOPTCASE]  GENOPTCASE
.                $ GENOPTLOG  :== @GENOPT:GENPROMPT
.
.            in which USERNAME1 refers to the keeper of GENOPT and
.            USERNAME2 refers to either the GENOPT user or the end user.
.
*
:
> HELPG
?
*
.   HELPG
.
.      Allows you to obtain help on a number of topics and subtopics
.      related to GENOPT.
.
*
:
> GENT
?
*
.   GENTEXT
.
.      Initiates an interactive session in which the GENOPT user
.      provides input data names, one-line definitions, and "help"
.      paragraphs pertaining to the generic class of problems for
.      which he or she is creating a user-friendly analysis/optimization
.      capability. As this interactive session proceeds, a file
.      called  NAME.INP  is being created which is a record of the
.      interactive session.  (NAME represents the GENOPT user's
.      generic name of the case.)  The file NAME.INP can be used
.      for input to GENTEXT in case the GENOPT user makes an error
.      in one of his input items.  If this happens, the GENOPT user
.      can edit the NAME.INP file and start over, answering "y" to
.      the question:
.
.      ARE YOU CORRECTING, ADDING TO, OR USING  NAME.INP?
. 
.      GENOPT will read NAME.INP in a "batch" mode until the
.      end of NAME.INP, at which point control will be returned
.      to the GENOPT user's terminal for more interactive input.
.
.      In GENTEXT the GENOPT user must supply data names in the
.      following order:
.  
.       1. decision variable candidates (such as thickness,
.          length, width) and constant parameters (such as
.          pointers, tables, material properties)
.
.       2. Loads, temperatures (items that characterize the environment
.
.       3. Behaviors (such as stress, buckling, frequency, clearance)
.
.       4. Allowables (such as max. stress, min. frequency)
.
.       5. Factors of safety
. 
.       6. The objective (such as weight, heat, cost, etc.)
.      
*
:
> GENP
?
*
.   GENPROGRAMS
.
.      This command causes the following absolute elements to be
.      generated:
.                    BEGIN.EXE
.                    DECIDE.EXE
.                    MAINSETUP.EXE
.                    OPTIMIZE.EXE
.                    STORE.EXE
.                    CHOOSEPLOT.EXE
.                    DIPLOT.EXE
.                    CHANGE.EXE
.
.      These absolute elements, as well as the object files,
.      BEGIN.OLB, STOGET.OLB, CHANGE.OLB, STRUCT.OLB, and
.      BEHAVIOR.OLB, are located in the subdirectory
.      [USERNAME2.GENOPTCASE].
.
.      The FORTRAN source codes used as input are located in
.      [USERNAME2.GENOPTCASE]     and     [USERNAME1.GENOPT]:
.
.      GENOPTCASE:BEGIN.NEW              GENOPT:DECIDE.NEW
.      GENOPTCASE:STOGET.NEW             GENOPT:MAINSETUP.NEW
.      GENOPTCASE:CHANGE.NEW             GENOPT:MAIN.NEW
.      GENOPTCASE:STRUCT.NEW             GENOPT:STORE.NEW
.      GENOPTCASE:BEHAVIOR.NEW           GENOPT:CHPLOT.NEW
.                                        GENOPT:DIPLOT.NEW
.                                        GENOPT:UTIL.NEW
.                                        GENOPT:ADDCODEn.NEW
.                                        GENOPT:CONMAN.NEW
.                                        GENOPT:ADS.NEW
.                                        GENOPT:PROMPTER.NEW
.
.      In the example case called PANEL.CAS, additional source code
.      is located in the subdirectory [USERNAME3.PANDA2]. (Which
.      PANDA2 libraries are used can be seen from the
.      GENOPT:LINKMAIN.COM file.)
.
.      The source files *.NEW listed on the left (the GENOPTCASE files)
.      are partly written by GENTEXT. One or both of the files STRUCT.NEW
.      and BEHAVIOR.NEW must be modified by the GENOPT user before
.      meaningful results can be obtained. Please note, however, that if
.      you simply want to see what the end user's output will look like
.      you can run GENPROGRAMS without providing any of your own FORTRAN
.      source code first.
.
.      The source files *.NEW listed on the right (the GENOPT files)
.      remain unchanged by any GENOPT user.
.
*
:
> GETL
?
*
.   GETLIB
.
.      Assembles 'PROGRAM'.OBJ into a library 'PROGRAM'.OLB and
.      deletes 'PROGRAM'.OBJ.
.
*
:
> INS
?
*
.   INSERT
.
.      Can be used by the GENOPT user to modify a NAME.INP file,
.      in which NAME is the generic name for the case. INSERT
.      allows the GENOPT user to add parameters, load types,
.      behavior types and corresponding allowables and factors
.      of safety to the problem class for which the end user
.      will treat specific cases.  INSERT makes use of key words
.      in the NAME.INP file that have the form $n, in which n is
.      an integer denoting a prompting entry (See the NAME.PRO file).
.      INSERT produces a small file called INSERT.INS, which
.      is inserted in the NAME.INP file immediately following
.      the key word $n, where the prompting entry number n is
.      supplied by the GENOPT user.
.
.      After the GENOPT user has completed possibly multiple
.      INSERT's, he or she reruns GENTEXT, answering the question
.      ARE YOU CORRECTING, ADDING TO, OR USING  NAME.INP?
.      with a "y".  GENTEXT then uses the updated NAME.INP file
.      as input, producing new machine-generated code that is
.      consistent with the updated generic problem.
.
.      An example of the use of INSERT appears near the end of
.      the file PLATE.CAS. In this example a new type of load,
.      called MOMENT, is added to the generic problem.
.
*
:
> CLEANG
?
*
.   CLEANGEN
.
.      GENOPT user eliminates many unwanted files.  All files of
.      the type GENOPTCASE:NAME.*, in which NAME is a generic name
.      supplied by the GENOPT user, are deleted except for the file
.      GENOPTCASE:NAME.INP, which is the input file for the GENTEXT
.      processor.
.
.      INSERT.INS and INSERT.INP are also eliminated.
.
.      All files of the types GENOPTCASE:*.EXE and GENOPTCASE:*.OLB
.      are also eliminated.
.
*
:
> BEG
?
*
.   BEGIN
.
.      End user provides, in an interactive mode, a starting design
.      for the object to be analyzed/optimized. The interactive input
.      is saved on a file called NAME.BEG, in which NAME is the
.      specific case name used throughout the specific case. In
.      future runs of this or a similar case, you can edit the file
.      NAME.BEG, then give the command BEGIN, and tell the system that
.      you are using an existing file.  If you goof part way through a
.      case, you can do a CONTROL Y, edit the NAME.BEG file, and
.      re-issue the command BEGIN, telling the system that you are
.      adding to an existing file.  The system will answer all the
.      questions up to your goof in a "batch" mode, then return
.      control to you. You can then complete the interactive input.
.
.      Output from the GENOPT processor BEGIN is stored in a file
.      with the name NAME.OPB. You should print this file and inspect
.      it to make sure that the case is as you intend it to be.
.
.     FORMAT:
.              BEGIN
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.
*
:
> DEC
?
*
.    DECIDE
.
.      You provide, in a conversationally interactive mode, strategy
.      parameters for GENOPT optimization.  You choose which of
.      the problem parameters are to be decision variables (allowed to
.      change) during optimization and their lower and upper bounds.
.      You also choose linked parameters, that is parameters that are
.      not decision variables but vary in proportion to designated
.      decision variables, and you assign factors of proportionality.
.
.      You can also "build" inequality constraints involving up to
.      five design parameters in a given inequality constraint. The
.      file PLATE.CAS shows an example in which there are three
.      inequality constraints: (1) the plate area must be less than
.      100; (2) the plate area must be greater than 50; and (3) the
.      variable called "LENGTH" must be greater than the variable
.      called "WIDTH".

.      Finally, you choose "escape" variables, that is variables that
.      should be increased during any design iteration in which ADS
.      fails to change the design. You should choose only thicknesses
.      as escape variables. In order to use the default option for
.      choosing escape variables, the GENOPT user must have used the
.      word "thickness" in his or her definition of a thickness variable.
.
.      Your interactive input is saved on a file, NAME.DEC, in which
.      NAME is the same name you used for BEGIN. In
.      future runs of this or a similar case, you can edit the file
.      NAME.DEC, then give the command DECIDE, and tell the system that
.      you are using an existing file.  If you goof part way through a
.      case, you can do a CONTROL Y, edit the NAME.DEC file, and
.      re-issue the command DECIDE, telling the system that you are
.      adding to an existing file.  The system will answer all the
.      questions up to your goof in a "batch" mode, then return
.      control to you. You can then complete the interactive input.
.
.      Output from the GENOPT processor DECIDE is stored in a file
.      with the name NAME.OPD. You should print this file and inspect
.      it to make sure that the case is as you intend it to be.
.
.     FORMAT:
.              DECIDE
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.
*
:
> MAINS
?
*
.    MAINSETUP
.
.      You establish strategy parameters for the OPTIMIZE batch run to
.      follow. Strategy parameters include:
.
.          1. type of analysis  (1=optimization or 2=simple analysis)
.          2. how many design iterations do you want OPTIMIZE to do?
.
.      An image of the interactive session in MAINSETUP is stored on
.      a small file with the name NAME.OPT, which is listed at the
.      beginning of the output file from OPTIMIZE. (See OPTIMIZE).
.
.     FORMAT:
.              MAINSETUP
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.
*
:
> OPT
?
*
.    OPTIMIZE
.
.      This command initiates a batch run of the mainprocessor for the
.      specific case (called OPTIMIZE).
.
.      The results are stored in a file NAME.OPM, in which NAME is the
.      same name you chose for BEGIN, DECIDE, and MAINSETUP.
.
.      To do several sets of design iterations you issue the command
.      OPTIMIZE again and again. Make sure to print out the file
.      NAME.OPM after each batch run corresponding to each OPTIMIZE.
.      Only the latest NAME.OPM is retained.
.
.     FORMAT:
.              OPTIMIZE
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               CHANGE             (you change one or more parameters.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.
*
:
> CHA
?
*
.    CHANGE
.
.     You use the CHANGE command to change parameters without having to
.     go back to BEGIN.  The parameters are segregated into five groups:
.
.         1. parameters eligible to be decision variables;
.         2. constant parameters (not eligible to be decision variables);
.         3. loads and/or temperatures (environmental factors);
.         4. allowables (for example, max. stress, min. frequency);
.         5. factors of safety.
.
.      Your interactive input is saved on a file, NAME.CHG, in which
.      NAME is the same name you used for BEGIN, DECIDE, etc. In
.      future runs of this or a similar case, you can edit the file
.      NAME.CHG, then give the command CHANGE, and tell the system that
.      you are using an existing file.  If you goof part way through a
.      case, you can do a CONTROL Y, edit the NAME.CHG file, and
.      re-issue the command CHANGE, telling the system that you are
.      adding to an existing file.  The system will answer all the
.      questions up to your goof in a "batch" mode, then return
.      control to you. You can then complete the interactive input.
.
.      The example case, PANEL.CAS, includes a use of CHANGE.
.
.     FORMAT:
.              CHANGE
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               CHANGE             (you change one or more parameters.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.
*
:
> CHO
?
*
.    CHOOSEPLOT
.
.      You choose which parameters are to be plotted. There are
.      three categories of parameters:
.
.         1. design parameters (which include the decision variables)
.         2. design margins
.         3. the objective.
.
.      All variables are plotted versus design iterations since
.      the beginning of the case, even though you may have given
.      the command OPTIMIZE many times: The results from iterations
.      for each OPTIMIZE are added to results accumulated from
.      previous OPTIMIZEs.
.
.      CHOOSEPLOT automatically chooses 3. the objective. You are
.      allowed to choose up to 10 variables in each of the other
.      two categories.  Please note, however, that all variables
.      chosen within a single category are plotted on the same
.      frame.  Therefore, it might be well to keep the maximum
.      number you choose at one time down to 5 or so.  You can
.      always run CHOOSEPLOT again in order to pick up other
.      variables. Also, it is a good idea to "bundle" those variables
.      together that have similar magnitudes. For example, thicknesses
.      of things are likely to be much smaller than lengths or widths.
.      It is a good idea, therefore, to plot thicknesses in separate
.      runs from those in which you plot lengths and widths.
.
.      An image of the interactive session in CHOOSEPLOT is stored on
.      a small file with the name NAME.CPL, which can be used as input
.      to CHOOSEPLOT in case you goof, as discussed with BEGIN and DECIDE.
.
.      CHOOSEPLOT generates three files, as follows:
.
.         1. NAME.PL3 = design margins chosen in CHOOSEPLOT
.         2. NAME.PL4 = design variables chosen in CHOOSEPLOT
.         3. NAME.PL5 = the objective.
.
.      NAME is the specific case name.  The three files, NAME.PLn, n=3,4,5,
.      are used as input for the DIPLOT processor.
.
.     FORMAT:
.              CHOOSEPLOT
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               CHANGE             (you change one or more parameters.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               CHOOSEPLOT         (You choose which variables to plot.)
.               DIPLOT             (You obtain plots.)
.               CHOOSEPLOT         (You choose more variables to plot.)
.               DIPLOT             (You obtain more plots.)
.
*
:
> DIP
?
*
.    DIPLOT
.
.      You obtain the plots chosen by CHOOSEPLOT.
.      CHOOSEPLOT generates three files, as follows:
.
.         1. NAME.PL3 = design margins chosen in CHOOSEPLOT
.         2. NAME.PL4 = design variables chosen in CHOOSEPLOT
.         3. NAME.PL5 = the objective.
.
.      NAME is the specific case name.
.
.      All variables are plotted versus design iterations since
.      the beginning of the case, even though you may have given
.      the command OPTIMIZE many times: The results from iterations
.      for each OPTIMIZE are added to results accumulated from
.      previous OPTIMIZEs.  
.
.      NAME.PL3, .PL4, and .PL5 have analogous structure, as follows:
.       1. The first record is the number of traces n in the plot frame
.          plus one.
.       2. The second record is the word ITERATIONS.
.       3. The third through n+2 records are the legend definitions
.          of the first through nth traces in the plot frame.
.       7. The remaining records represent the abscissa value and the
.          n ordinate values for the n traces in the plot frame. The
.          first column of this array of data contains the abscissa
.          values, which are iteration numbers in floating point format.
.          The second column contains the ordinate values for the first
.          trace in the plot frame; the third column contains the ordinate
.          values for the second trace in the plot frame, and so on.
.
.      As of this writing (Nov. 15, 1988) DIPLOT, which was written by
.      Karen Neier of Lockheed and modified by D. Bushnell for use with
.      GENOPT, produces plot files via DISSPLA software.
.
.     FORMAT:
.              DIPLOT
.
.     EXAMPLE OF USE IN A RUNSTREAM:
.
.               BEGIN              (you establish a starting design.)
.               DECIDE             (you choose decision variables, etc.)
.               MAINSETUP          (you set up analysis strategy.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               CHANGE             (you change one or more parameters.)
.               OPTIMIZE           (batch run for the specific case.)
.               OPTIMIZE           (batch run for the specific case.)
.               CHOOSEPLOT         (You choose which variables to plot.)
.               DIPLOT             (You obtain plots.)
.               CHOOSEPLOT         (You choose more variables to plot.)
.               DIPLOT             (You obtain more plots.)
.
*
:
> CLEANS
?
*
.   CLEANSPEC
.
.      End user eliminates many unwanted files.  All files of
.      the type GENOPTCASE:NAME.*, in which NAME is a specific name
.      supplied by the end user, are deleted except for the following:
.
.              NAME.BEG     (Input file for the BEGIN processor)
.              NAME.DEC     (Input file for the DECIDE processor)
.              NAME.OPT     (Input file for the MAINSETUP processor)
.              NAME.CHA     (Input file for the CHANGE processor)
.              NAME.CPL     (Input file for the CHOOSEPLOT processor)
.
.      QMS.TMP, a plot file for the laser printer at LPAEL, is
.      also eliminated.
.
*
:
> GENOPTCASE
?
*
.   GENOPTCASE
.    
.      A command introduced into the LOGIN.COM which means
.
.         $ SET DEFAULT USERDISK:[USERNAME2.GENOPTCASE]
.
*
:
:
C=DECK      DEBUG
> DE
? GENPR          GEN
*
.   DEBUG
.
!   Information is available on:
!
! GENPROGRAMS    GENERAL      
!
! Next, please type HELPG DEBUG SUBTOPIC, in which SUBTOPIC stands for
! one of the subtopics listed above.
*
> GENPR
?
*
.   DEBUGGING after failure of GENPROGRAMS to complete a compilation..
.
.      The most common error is a FORTRAN bug in STRUCT.NEW or
.      BEHAVIOR.NEW, the two libraries which the GENOPT user may
.      modify during application of the GENOPT system.  If
.      GENPROGRAMS errs during processing, the GENOPT user should
.      debug the portions of STRUCT.NEW and BEHAVIOR.NEW which he
.      or she modified.  Be particularly careful about name conflicts
.      between the GENTEST-generated code and whatever code you have
.      introduced into STRUCT.NEW and/or BEHAVIOR.NEW.  During
.      development of the rather complex example case called PANEL.CAS,
.      the writer found that name conflicts were the most common
.      errors and were sometimes rather difficult to track down.
*
:
> GEN
?
*
.   SOME GENERAL TIPS ON DEBUGGING YOUR VERSIONS OF STRUCT.NEW
.   AND BEHAVIOR.NEW...
.
.      1. Do as much of your debugging before you issue the
.         GENPROGRAMS command as possible. Try to compile your
.         versions of STRUCT.NEW and BEHAVIOR.NEW separately at first.
.
.      2. Initially provide plenty of output from your contributions
.         of coding to STRUCT.NEW and BEHAVIOR.NEW.  After you have
.         successfully run several sample cases, you can eliminate this
.         output by "commenting" it out.
.
.      3. If you are fairly certain that there is a bug in one or
.         more of the GENOPT processors, and that this bug is not of
.                    your making, write or call the developer:
.
.                    Dr. David Bushnell, Dept. 93-30/251
.                    Lockheed Palo Alto Research Laboratories
.                    3251 Hanover St., Palo Alto, CA  94304
.                    (415) 424-3237
*
:
:
C=DECK      FILES
> FI
? GENE
? NEW     OLB     EXE     COM     PLOT    MISC
? PAN     PLA     GENO    END
*
.
.   FILES
.
!    Information is available on:
! GENERAL
! NEW     OLB     EXE             COM       PLOT      MISCELLANEOUS
! PANEL   PLATE   GENOPTUSER      ENDUSER
!
! Next, please type HELPAN FILES SUBTOPIC, in which SUBTOPIC stands
! for one of the subtopics listed above. See HELPG FILES GENERAL first.
*
> GENE
?
*
.   GENERAL INFORMATION ON FILES....
.
.      Runs of GENOPT generate many files.  It is helpful to
.      think of these files as belonging to one of three
.      categories:
.               
.        1. Files located in [USERNAME1.GENOPT] which should
.           not be changed and which are the responsibility
.           of the one at your facility that maintains GENOPT (USERNAME1).
.           Neither GENOPT users nor end users have to know anything
.           about most of these files.  Information is given here
.           under the subtopics:
.              NEW, OLB, EXE, COM, PLOT, MISC, PANEL, PLATE.
.           The most significant files from the GENOPT user's and the
.           end user's points of view are:
.              GENOPTST.ORY, GENOPT.HLP, PLATE.CAS, PANEL.CAS
.  
.        2. Files located in [USERNAME2.GENOPTCASE] which are
.           produced by actions of the GENOPT user (USERNAME2).
.           Of the many files in this category, the ones of most
.           significance to the GENOPT user are:
.           NAME.INP, NAME.DEF, and NAME.PRO, in which "NAME" is the
.           generic name for a case, and STRUCT.NEW and BEHAVIOR.NEW,
.           which are source code files that the GENOPT user will
.           probably have to modify. Information on files in this
.           category is obtained from HELPG FILES GENOPTUSER
.
.        3. Files located in [USERNAME2.GENOPTCASE] which are
.           produced by actions of the end user (USERNAME2).
.           Of the many files in this category, the ones of most
.           significance to the end user are:
.           NAME.BEG, NAME.DEC, NAME.CPL, NAME.CHG, and NAME.OPM,
.           in which NAME is the name of the end user's specific case.
.           Information on files in this category is obtained from
.           HELPG FILES ENDUSER.
.           
*
:
> NEW
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. ================================================================
.     FORTRAN SOURCE CODE FILES IN [USERNAME1.GENOPT]
.   (Except for ADDCODE1.NEW, which contains source
.    code for the complex example PANEL.CAS, these
.    files are both generic and specific case-independent.)
. =================================================================
.   FILE NAME       SIZE(BLOCKS)    PURPOSE OF THE FILE
. -----------------------------------------------------------------
.  ADDCODE1.NEW;1     141/141   added subroutines for "PANEL" case
.  ADDCODE2.NEW;1       3/3     dummy library for added subroutines.
.  ADDCODE3.NEW;1       3/3     dummy library for added subroutines.
.  ADDCODE4.NEW;1       3/3     dummy library for added subroutines.
.  ADDCODE5.NEW;1       3/3     dummy library for added subroutines.
.  CHPLOT.NEW;1        27/27    CHOOSEPLOT source program.
.  CONMAN.NEW;1        29/30    optimization library (calls ADS).
.  ADS.NEW;1          121/123   optimization library (EDO ADS, 1987)
.  DECIDE.NEW;1        46/48    DECIDE source library.
.  DIPLOT.NEW;1        45/45    DIPLOT source library. (Neier-plotting)
.  FELIPPA.NEW;1       51/51    Searches GENOPT.HLP and screens output.
.  GENPROMPT.NEW;1    254/255   GENTEXT source library.
.  HELPG.NEW;1          2/3     Searches GENOPT.HLP file (off-line HELP)
.  INSERT.NEW;1        65/66    INSERT source library (add parameters).
.  MAIN.NEW;1          49/51    OPTIMIZE main processor (calls STRUCT).
.  MAINSETUP.NEW;1      7/9     MAINSETUP source library.
.  PROMPTER.NEW;1      37/39    Searches prompting file and displays prompt.
.  STORE.NEW;1          9/9     Stores OPTIMIZE results for later plotting.
.  URBEGIN.NEW;1       24/24    Skeletal BEGIN code to be completed by GENTEXT.
.  URCHANGE.NEW;1      21/21    Skeletal CHANGE code to be completed by GENTEXT.
.  URSTOGET.NEW;1       8/9     Skeletal STOGET code to be completed by GENTEXT.
.  URSTRUCT.NEW;1      18/18    Skeletal STRUCT code to be completed by GENTEXT.
.                                 and possibly further modified by GENOPT user.
.  UTIL.NEW;1          16/18    Utility source library (includes INTERP).
.  QMSNULL.FOR;1        4/6     Source file for plotting via LPARL laser.
.  TQPOP.FOR;1          3/3     Source file for DISSPLA plotting.
. ==========================================================================
. NOTE: File names that begin with "UR" (for "original" or "root") are
.       case independent, but are augmented by GENTEXT-generated FORTRAN
.       code that is generic-case-dependent. The augmented source code is
.       located in files called BEGIN.NEW, STOGET.NEW, CHANGE.NEW, STRUCT.NEW,
.       and BEHAVIOR.NEW, all of which are located in [USERNAME2.GENOPTCASE]
.       at the termination of GENTEXT operation. You can obtain descriptions
.       of these files in the NAME.DEF file, where NAME is the generic name
.       of the case.  Descriptions of them can also be found from the off-line
.       HELP utility if you type HELPG FILES GENOPTUSER.
.        
*
:
> OLB
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =====================================================
.     OBJECT CODE LIBRARIES IN [USERNAME1.GENOPT]
.   (Except for ADDCODE1.OLB, which contains object
.    code for the complex example PANEL.CAS, these
.    files are both generic and specific case-independent.)
. ====================================================
.   FILE NAME       SIZE(BLOCKS)   DATE FILE CREATED
.                                (FOR PURPOSE, SEE *.NEW)
. ----------------------------------------------------
.  ADDCODE1.OLB;4           89/90      20-JUN-1989 08:50
.  ADDCODE2.OLB;1           24/24      22-JUL-1988 10:52
.  ADDCODE3.OLB;1           24/24      22-JUL-1988 10:53
.  ADDCODE4.OLB;1           24/24      22-JUL-1988 10:53
.  ADDCODE5.OLB;1           24/24      22-JUL-1988 10:53
.  ADS.OLB;1               298/300     21-AUG-1989 15:02
.  CHPLOT.OLB;13            30/30      22-AUG-1989 09:49
.  CONMAN.OLB;25            24/24      22-AUG-1989 13:13
.  DECIDE.OLB;19            52/54      22-AUG-1989 07:59
.  DIPLOT.OLB;13            37/39      22-AUG-1989 09:27
.  FELIPPA.OLB;1            17/18      14-NOV-1988 08:32
.  GENPROMPT.OLB;34        301/303     21-AUG-1989 16:44
.  HELPG.OLB;1               5/6       15-NOV-1988 07:31
.  INSERT.OLB;4             73/75       6-JAN-1989 13:37
.  MAIN.OLB;70              42/42      22-AUG-1989 11:29
.  MAINSETUP.OLB;4          11/12      22-AUG-1989 11:25
.  PROMPTER.OLB;1           35/36      20-DEC-1988 05:56
.  STORE.OLB;4              12/12      21-AUG-1989 16:18
.  UTIL.OLB;7               22/24      22-AUG-1989 08:32
.         Total of 19 files, 1144/1161 blocks.
. =====================================================
. NOTE: Users need not be concerned with these files.
.       There are additional *.OLB files in
.       [USERNAME2.GENOPTCASE]. These are object files
.       for programs that are partly written by GENTEXT.
.       See HELPG FILES GENOPTUSER for more information
.       about them.
.
*
:
> EXE
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =====================================================
.     EXECUTABLE ELEMENTS IN [USERNAME1.GENOPT]
. ======================================================
.   FILE NAME       SIZE(BLOCKS)   DATE FILE CREATED
. ------------------------------------------------------
.  GENPROMPT.EXE;12        214/216     21-AUG-1989 16:44
.  HELPG.EXE;1              12/12      15-NOV-1988 07:32
.  INSERT.EXE;2             56/57       6-JAN-1989 13:37
.  QMSNULL.EXE;1             6/6       10-NOV-1988 11:56
.  QMSPOP.EXE;1            277/279     19-JUN-1989 12:12
.  TQPOP.EXE;1             247/249     10-NOV-1988 11:55
.       Total of 6 files, 812/819 blocks.
. ======================================================
. NOTE: For purpose of these files, see HELPG FILES NEW.
.       There are other *.EXE files in [USERNAME2.GENOPTCASE].
.       See HELPG FILES GENOPTUSER for more information.
.
*
:
> COM
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =================================================================
.           PROCEDURE FILES IN [USERNAME1.GENOPT]
.   (These files are both generic and specific case-independent,
.    with the possible exception of LINKMAIN.COM, as described
.    in the NOTE below.)
. =================================================================
.   FILE NAME       SIZE(BLOCKS)    PURPOSE OF THE FILE
. -----------------------------------------------------------------
.  BEGIN.COM;1          1/3       Run BEGIN interactively.
.  CHANGE.COM;1         1/3       Run CHANGE interactively.
.  CHOOSEPLOT.COM;1     1/3       Run CHOOSEPLOT interactively.
.  CLEANGEN.COM;1       5/6       Run CLEANGEN interactively.
.  CLEANSPEC.COM;1      2/3       Run CLEANSPEC interactively.
.  DECIDE.COM;1         1/3       Run DECIDE interactively.
.  DIPLOT.COM;1         1/3       Run DIPLOT interactively.
.  GENPROGRAMS.COM;1   11/12      Run GENPROGRAMS interactively.
.  GENPROMPT.COM;1      5/6       Activate GENOPT set of commands.
.  GENTEXT.COM;1        1/3       Run GENPROMPT interactively (GENTEXT).
.  GETLIB.COM;1         1/3       Create a *.OLB library from *.OBJ.
.  INSERT.COM;1         4/6       Run INSERT interactively.
.  LINKBEG.COM;1        1/3       Linking statement for BEGIN.
.  LINKCHANGE.COM;1     1/3       Linking statement for CHANGE.
.  LINKCHPLOT.COM;1     1/3       Linking statement for CHPLOT (CHOOSEPLOT).
.  LINKDEC.COM;1        1/3       Linking statement for DECIDE.
.  LINKDIPLOT.COM;1     1/3       Linking statement for DIPLOT.
.  LINKGEN.COM;1        1/3       Linking statement for GENPROMPT (GENTEXT).
.  LINKHELP.COM;1       1/3       Linking statement for HELPG.
.  LINKINSERT.COM;1     1/3       Linking statement for INSERT.
.  LINKMAIN.COM;1       3/3       Linking statement for MAIN (OPTIMIZE).
.  LINKMAINSETUP.COM;1  1/3       Linking statement for MAINSETUP.
.  LINKSTORE.COM;1      1/3       Linking statement for STORE (part of OPTIMIZE)
.  LOGIN.COM;1          2/3       Copy of Bushnell's LOGIN.COM file.
.  MAINSETUP.COM;1      1/3       Run MAINSETUP interactively.
.  OPTIMIZE.COM;1       3/3       Set up batch QUEUE and SUBMIT for OPTIMIZE.
.  PPRINT.COM;1         2/3       Plotting procedure (see HELPG FILES PLOT)
.  QMSPOP.COM;1         1/3       Plotting procedure (see HELPG FILES PLOT)
.  QUEUE.COM;1          3/3       Set up batch queue for OPTIMIZE.
. =============================================================
. NOTE: In its present form, the active code in the linking statement for
.       the OPTIMIZE processor contains a line that calls for PANDA2
.       libraries and contains a reference to the object library,
.       ADDCODE1, which contains FORTRAN code for the complex example
.       PANEL.CAS. The GENOPT user can easily modify LINKMAIN.COM in
.       accordance with directions given there if he or she does not
.       have PANDA2.
.
.       The file QUEUE.COM may have to be altered at your facility so
.       that names of batch queues are proper.
.
*
:
> PLOT
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =======================================================================
.                FILES LOCATED IN [USERNAME1.GENOPT]
.                  HAVING TO DO WITH GETTING PLOTS
. ========================================================================
.   FILE NAME       SIZE(BLOCKS)         PURPOSE OF THE FILE
. ------------------------------------------------------------------------
.  DIPLOT.COM;1         1/3       execute DIPLOT (interactive mode).
.  DIPLOT.NEW;1        45/45      source for DIPLOT (originally
.                                  written by Karen Neier and
.                                  modified by D. Bushnell for
.                                  use with GENOPT. DIPLOT calls
.                                  DISSPLA software. If you choose
.                                  "6" for the device option, DIPLOT
.                                  produces a "metafile" called PLT2.DAT.)
.  DIPLOT.OLB;1        37/39      object file for DIPLOT.
.  LINKDIPLOT.COM;1     1/3       linking statement for DIPLOT.
.
. Remaining files listed here all have to do with converting the "metafile"
. PLT2.DAT into a file called QMS.TMP which can be properly interpreted by
. the QMS laser printer on the third floor of Building 251 at Lockheed
. Palo Alto Research Lab.  Please see your system manager for how to get
. plots at your facility.  Please do NOT call D. Bushnell or K. Neier.
.
.  PORT.SET;1           1/3       Called by PPRINT. Sets fonts for QMS printer.
.  PPRINT.COM;1         2/3       Sends plot file QMS.TMP to QMS printer.
.  QMSNULL.EXE;1        6/6       executable element for QMSNULL.
.  QMSNULL.FOR;1        4/6       Converts "metafile" (DISSPLA jargon for
.                                 a device-independent plot file. The file
.                                 is called PLT2.DAT in this case.) into a
.                                 file called QMS.TMP that can be interpreted
.                                 by the QMS laser printer at LPARL B. 251.
.  QMSPOP.COM;1         1/3       Command procedure for calling QMSNULL and
.                                 TQPOP. (Convert "metafile" to QMS.TMP)
.  RESET.QMS;1          1/3       The "reciprocal" of PORT.SET. Resets QMS
.                                 fonts back to their original values.
.  TQPOP.EXE;1        247/249     executable element for TQPOP.FOR.
.  TQPOP.FOR;1          3/3       Another part of the "metafile" conversion
.                                 process.
.  TQPOP.OBJ;1          3/3       object file for TQPOP.FOR.
. ===========================================================================
. NOTE: Plots will appear on your screen if you choose other than "6" for
.       "device."  If you want plots on devices other than those listed
.       on your screen when you respond "H" to the question in DIPLOT about
.       device, you must modify SUBROUTINE DINIT in the DIPLOT library
.       accordingly. DIPLOT uses as input the files NAME.PL3, NAME.PL4, and
.       NAME.PL5, in which NAME is the specific case name. Please see
.       PLATE.CAS and USERG FILES ENDUSER for more information.
.
*
:
> MISC
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. ============================================================
.     MISCELLANEOUS FILES IN [USERNAME1.GENOPT]
. ============================================================
.   FILE NAME       SIZE(BLOCKS)   PURPOSE OF THE FILE
. ------------------------------------------------------------
.  GENOPT.HLP;1       117/117     off-line HELP file. IMPORTANT!
.  GENOPTST.ORY;1      27/27      overview of GENOPT. READ THIS!
.  OPTIMIZE.BAT;1       3/3       Batch procedure for OPTIMIZE.
.  PORT.SET;1           1/3       Change QMS fonts for plotting.
.  RESET.QMS;1          1/3       Reset QMS fonts to original values.
.  URPROMPT.DAT;1      39/39      prompting file that is never
.                                 changed. (Contains prompts for
.                                 DECIDE, MAINSETUP, CHOOSEPLOT,
.                                 DIPLOT, CHANGE.)
.  HOWTO.RUN;12        29/30      directions on how to get
.                                 started with BOSOR4, BOSOR5,
.                                 PANDA, PANDA2, and  GENOPT.
.  HOWTO.UPDATE;5       6/6       how to recompile and link
.                                 the portions of GENOPT not
.                                 written by GENTEXT or linked
.                                 by GENPROGRAMS.
. ============================================================
. NOTE: You should print out the files GENOPTST.ORY and GENOPT.HLP.
.       It is beneficial to have hard copies of these files readily
.       available.
.
*
:
> PAN
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =================================================================
. FILES IN [USERNAME1.GENOPT] RELATING TO THE COMPLEX SAMPLE CASE,
. "PANEL": OPTIMIZATION OF COMPOSITE STRINGER AND/OR RING-STIFFENED
. CYLINDRICAL OR FLAT PANELS AND SHELLS UNDER MULTIPLE
. SETS OF IN-PLATE LOADS.
.
. NOTE: THESE FILES ARE RETAINED IN [USERNAME1.GENOPT] SO THAT YOU
.       CAN EASILY RERUN THIS SAMPLE CASE. FOR DIRECTIONS ON HOW
.       TO RERUN THIS EXAMPLE AT YOUR FACILITY, PLEASE LOOK AT THE
.       LAST FEW PAGES OF THE GENOPT:PANEL.CAS FILE.
.
. =================================================================
.   FILE NAME        SIZE(BLOCKS)    PURPOSE OF THE FILE
. -----------------------------------------------------------------
. GENOPT user files (generic case name = PANEL):
.  PANEL.CAS;1         688/690     documentation of "PANEL" case
.  PANEL.INP;1         108/108     Input file for GENTEXT
.  STRUCT.PANEL;1      105/105     STRUCT.NEW as modified for "PANEL"
.  BEHAVIOR.PANEL;1    185/186     BEHAVIOR.NEW as modified for "PANEL"
.
. End user files (specific case name = ARIANE):
.  ARIANE.BEG;1         52/54      Input file for BEGIN
.  ARIANE.DEC;1         10/12      Input file for DECIDE
.  ARIANE.OPT;1          1/3       Input file for MAINSETUP
.  ARIANE.CHG;1          3/3       Input file for CHANGE
.  ARIANE.CPL;1          5/6       Input file for CHOOSEPLOT
. =================================================================
. NOTE: For a list and descriptions of all files produced by
.       actions of the GENOPT user for the generic case PANEL,
.       type HELPG FILES GENOPTUSER.
.       For a list and descriptions of all files produced by
.       actions of the end user for the specific application ARIANE,
.       type HELPG FILES ENDUSER.
.
.       You should print out and study the file PANEL.CAS. This is
.       an example of a sophisticated use of the GENOPT system.
.
*
:
> PLA
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =========================================================
. FILES IN [USERNAME1.GENOPT] THAT PERTAIN TO THE EXAMPLE CASE,
. "PLATE": OPTIMIZATION OF A RECTANGULAR ISOTROPIC PLATE UNDER
. MULTIPLE SETS OF LOADS AND STRESS, BUCKLING, FREQUENCY, AND
. MAX. NORMAL DISPLACEMENT BEHAVIORAL CONSTRAINTS.
.
. NOTE: THESE FILES ARE RETAINED IN [USERNAME1.GENOPT] SO THAT YOU
.       CAN EASILY RERUN THIS SAMPLE CASE. FOR DIRECTIONS ON HOW
.       TO RERUN THIS EXAMPLE AT YOUR FACILITY, PLEASE LOOK AT THE
.       LAST FEW PAGES OF THE PLATE.CAS FILE.
.
.  ========================================================
.   FILE NAME       SIZE(BLOCKS)     PURPOSE OF THE FILE
.  --------------------------------------------------------
. GENOPT user files (generic case name = PLATE):
.  PLATE.CAS;1        657/657     documentation for the case
.  PLATE.INP;1         29/30      input file for GENTEXT
.  BEHAVIOR.PLATE;1    51/51      BEHAVIOR.NEW as modified for this case
.
. End user files (specific case name = PLATE1):
.  PLATE1.BEG;1        16/18      input file for BEGIN
.  PLATE1.DEC;1         7/9       input file for DECIDE
.  PLATE1.OPT;1         1/3       input file for MAINSETUP
.  PLATE1.CPL;1         3/3       input file for CHOOSEPLOT
.  ========================================================
. NOTE: For a list and descriptions of all files produced by
.       actions of the GENOPT user for a generic case
.       type HELPG FILES GENOPTUSER. 
.       For a list and descriptions of all files produced by
.       actions of the end user for a specific application
.       type HELPG FILES ENDUSER.
.
.       You should print out and study the file PLATE.CAS. This
.       is a relatively unsophisticated example.
.
*
:
> GENO
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =========================================================================
.        FILES GENERATED IN THE DIRECTORY [USERNAME2.GENOPTCASE]
.  BY THE GENOPT USER'S ACTIONS (AS OPPOSED TO THE ACTIONS OF THE END USER)
.  =========================================================================
.               CONTENTS OF FILES CREATED BY   "GENTEXT"
.     (Here the GENOPT user chose "PANEL" as the generic case name.)
.  =========================================================================
.  FILE NAME                DEFINITION OF FILE CONTENTS
.  -------------------------------------------------------------------------
.  PANEL.PRO        Indexed prompts and help paragraphs for interactive
.                     input to the GENOPT-user-developed optimization code.
.                     Examples of *.PRO files appear in PANEL.CAS
.                     and in PLATE.CAS.
.
.  PANEL.NEW        Part of BEGIN.NEW that contains calls to
.                     SUBROUTINE DATUM and SUBROUTINE GETVAR.
.                     This coding sets up the interactive input
.                     for the starting design in the GENOPT-user-generated
.                     design code.
.
.  PANEL.INP        Image of interactive input for GENOPT-user-developed
.                     program, generated to save time in case you make
.                     a mistake during input.
.
.  PANEL.COM        Labelled common blocks generated specifically
.                     for the GENOPT-user-developed class of problems.
.                     This file is inserted by GENTEXT into BEGIN.NEW,
.                     STOGET.NEW, STRUCT.NEW, BEHAVIOR.NEW, CHANGE.NEW.
.
.  PANEL.WRI        Part of subroutine for writing labelled common
.                     blocks in SUBROUTINE STORCM (in Library STOGET).
.
.  PANEL.REA        Part of subroutine for reading labelled common
.                     blocks in SUBROUTINE GETCOM (in Library STOGET).
.
.  PANEL.SET        Part of SUBROUTINE SETUPC in which new values
.                     are installed in labelled common blocks from
.                     the array VAR(I), which contains the latest
.                     values of all candidates for decision variables.
.                     (SUBROUTINCE SETUPC is located in the BEGIN.NEW
.                     library).
.
.  PANEL.CON        Calls to subroutines, BEHX1, BEHX2, BEHX3,...,
.                     which calculate behavior such as stresses
.                     modal frequencies, buckling loads, etc.
.                     Also, calls to CONX, which generate the value
.                     of the behavioral constraints corresponding
.                     to BEHX1, BEHX2, BEHX3,...
.                     Also, generates phrases that identify, in the
.                     output of the GENOPT-user-generated program, the
.                     exact meaning of each behavioral constraint.
.                     This file is inserted by GENTEXT into STRUCT.NEW.
.
.  PANEL.SUB        Skeletal subroutines, BEHX1, BEHX2, ..., and the
.                     skeletal objective function, OBJECT. This file,
.                     when augmented by PANEL.CON and repeated insertions
.                     of PANEL.COM in every BEHXn subroutine (GENTEXT does
.                     this automatically) becomes the BEHAVIOR.NEW library,
.                     ready for you to insert your FORTRAN coding as
.                     appropriate.
.
.  PANEL.DEF        List of GENOPT-user-established variable names,
.                     definitions, and roles that these variables play
.                     in the GENOPT-user-generated program.  Also, contains
.                     list of the files created by GENTEXT and the
.                     functions of these files. Also contains a summary
.                     of the purpose and properties of GENOPT.
.
.  PANEL.CHA        Part of SUBROUTINE NEWPAR (called in the CHANGE
.                     processor) in which labelled common values are
.                     updated. This file forms part of the CHANGE.NEW
.                     library.
.
.  PANEL.DAT        Image of interactive input for GENOPT-user-developed
.                     program, generated to save time in case you make
.                     a mistake during input. This file is used by
.                     the INSERT processor.
.
.  PANEL.MOD        Analogous to PANEL.INP, this file contains one or
.                     more inserts generated through the INSERT processor.
.                     It is copied into PANEL.INP for future GENTEXT
.                     runs in a non-interactive mode.
.
.  PANEL.SAV        The PANEL.INP file before modification by INSERT.
.
.  INSERT.INP       Analogous to PANEL.INP, this file contains an image
.                     of the interactive INSERT session. It can be used
.                     as input to INSERT if the GENOPT user goofs part
.                     way through an INSERT interactive session. The
.                     first entry is the prompt index after which the
.                     insert is to be made.
.
.  INSERT.INS       Looks very much like INSERT.INP, except it does not
.                     contain the GENOPT-user-chosen prompt index which
.                     designates where in the NAME.INP file (NAME=generic
.                     case name) the INSERT.INS file is to be inserted.
.                     This file is inserted by INSERT at the GENOPT-user-
.                     designated location into the NAME.INP file. (In this
.                     example NAME would be PANEL.)
.  ========================================================================
.
.  NOTE:  The only files of those listed above that you (the GENOPT-user)
.         ever need to think about are the file for input to GENTEXT
.         (PANEL.INP), the file called PANEL.DEF, and the prompt file,
.         PANEL.PRO.
.
.  =========================================================================
.           SOURCE CODE LIBRARIES *.NEW CREATED BY "GENTEXT"
.    (THESE LIBRARIES ARE LOCATED IN THE DIRECTORY [USERNAME2.GENOPTCASE]
.     (Here the GENOPT user chose "PANEL" as the generic case name.)
.  =========================================================================
.  FILE NAME                DEFINITION OF FILE CONTENTS
.  -------------------------------------------------------------------------
.  BEGIN.NEW   = source library for FORTRAN program which will
.                be used by the end user to set up the starting design,
.                material properties, loads, allowables, and factors
.                of safety. The files GENOPT:URBEGIN.NEW, and
.                GENOPTCASE:PANEL.COM, GENOPTCASE:PANEL.NEW, and
.                GENOPTCASE:PANEL.SET are appropriately combined by
.                GENTEXT to form the complete source file BEGIN.NEW.
.                BEGIN.NEW does not need to be modified by the
.                GENOPT user.
.
.  STOGET.NEW  = source library for FORTRAN program which will
.                be used to transfer labelled common blocks.
.                These labelled common blocks are the data base.
.                The files GENOPT:URSTOGET.NEW and GENOPTCASE:PANEL.COM,
.                GENOPTCASE:PANEL.WRI, and GENOPTCASE:PANEL.REA are
.                appropriately combined by GENTEXT to form the complete
.                source file STOGET.NEW.   STOGET.NEW does not need
.                to be modified by the GENOPT user.
.
.  CHANGE.NEW  = FORTRAN program that permits the end user to change
.                certain program parameters without having to
.                go back to BEGIN and run a case from scratch.
.                The files GENOPT:URBEGIN.NEW and GENOPTCASE:PANEL.COM
.                and GENOPTCASE:PANEL.CHA are appropriately combined
.                by GENTEXT to form the complete source file CHANGE.NEW.
.                CHANGE.NEW does not need to be modified by the GENOPT
.                user.
.
.  STRUCT.NEW  = Case-dependent source library for FORTRAN program that
.                performs the analysis for each iterate in the set
.                of optimization iterations.  GENTEXT converts
.
.                GENOPT:URSTRUCT.NEW   into    GENOPTCASE:STRUCT.NEW
.
.                by adding to URSTRUCT at the appropriate locations,
.                GENTEXT-generated FORTRAN code fragments contained in the
.                GENOPTCASE:NAME.COM and GENOPTCASE:NAME.CON files.
.                ("NAME" = GENOPT-user-assigned generic case name.)
.
.                The GENOPT user may have to further modify STRUCT.NEW
.                (add dimension statements, subroutine calls, output
.                statements, etc.).  In the simple example case, PLATE.CAS,
.                STRUCT.NEW was not changed, but in the more complex case,
.                PANEL.CAS, STRUCT.NEW was changed.
.
.                The library, STRUCT.NEW, also contains a
.                skeletal routine, SUB. TRANFR, that the GENOPT user
.                can complete in order to translate data names from
.                from those established by the GENOPT user via GENTEXT
.                to other names used by the developer of previously
.                written code that the GENOPT user may plan to incorporate
.                into SUBROUTINE STRUCT and/or SUBROUTINES BEHX1,
.                BEHX2, BEHX3,...BEHXn. 
.
.   BEHAVIOR          (BEHAVIOR is located in [USERNAME2.GENOPTCASE], in which
.                      USERNAME2 = GENOPT user or end user.)
.
.  BEHAVIOR.NEW  = Case-dependent source library for FORTRAN program that
.                performs the analysis for each iterate in the set
.                of optimization iterations.  GENTEXT combines in an
.                appropriate manner the GENTEXT-generated FORTRAN code
.                files
.
.                GENOPTCASE:NAME.COM   and    GENOPTCASE:NAME.SUB
.
.                to form  GENOPTCASE:BEHAVIOR.NEW.
.
.                ("NAME" = GENOPT-user-assigned generic case name.)
.
.                After GENTEXT is finished, BEHAVIOR.NEW consists of the
.                series of skeletal subroutines listed below. The GENOPT
.                user will have to complete SUBROUTINE OBJECT, and depending
.                on his/her strategy may want to complete
.                BEHX1, BEHX2, ...BEHXn.
.
.                In complex cases, such as the example PANEL.CAS, it is
.                likely that the GENOPT user will want to introduce calls
.                to "borrowed" subroutines in STRUCT.NEW, storing the
.                subroutines themselves in one or more of the ADDCODEj.NEW
.                libraries, rather than introduce coding that calculates
.                behavior each of the BEHXn subroutines.  Even so, he/she
.                will have to provide FORTRAN coding in SUBROUTINE OBJECT
.                for calculating the objective.
.
.                In simple cases, such as the example PLATE.CAS, for which
.                relatively simple formulas or interpolatable tables of
.                behavior are available, it is likely that the GENOPT user
.                will want to introduce coding that calculates behavior in
.                each of the BEHXn subroutines. He/she will also have to
.                provide FORTRAN coding in SUBROUTINE OBJECT for calculating
.                the objective.
.
.                The number n of subroutines BEHX1, BEHX2,...BEHXn is
.                determined during the interactive GENTEXT session:
.                Every time the GENOPT user introduces a new role-type 4
.                variable (response variable), a new skeletal SUBROUTINE
.                BEHXi is produced by GENTEXT. For examples, in the simple
.                example, PLATE.CAS, the GENOPT user introduced four
.                response phenomena that might constrain the design:

.                  1. maximum stress          (calculated in BEHX1)
.                  2. buckling load factors   (calculated in BEHX2)
.                  3. lowest frequency        (calculated in BEHX3)
.                  4. maximum deflection      (calculated in BEHX4)
.
.                Therefore, there are four BEHXi routines that the GENOPT
.                user had to complete. Note that the number of BEHXi
.                routines does not depend on how many different sets
.                of loads there are, but only on the number of different
.                phenomena are being accounted for. The number of
.                behavioral constraint conditions generated might be,
.                for example, the number of phenomena accounted for
.                for each load combination times the number of load
.                combinations that the object is being designed to
.                withstand.
.
.                In the complex example, PANEL.CAS, the GENOPT user
.                introduced 18 response phenomena that might constrain
.                the design. (These are listed in the GLOSSARY in the
.                file PANEL.CAS). Therefore, there are 18 skeletal
.                subroutines BEHXi in this case. However, in this
.                complex case, in which code was "borrowed" from PANDA2,
.                the GENOPT user did not add to the skeletal routines
.                BEHXi, i = 1,18, but chose instead to insert appropriate
.                subroutine calls into SUBROUTINE STRUCT and complete
.                the data translation routine, TRANFR.
.
.           SKELETAL SUBROUTINES CONTAINED IN THE  BEHAVIOR  LIBRARY
.                           AND PURPOSES OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    -------------------------------------------------------------------
.       BEHX1           Skeletal routine for calculation of the first
.                       type of response identified by the GENOPT user
.                       during the interactive "GENTEXT" session.
.
.       BEHX2           Skeletal routine for calculation of the second
.                       type of response.
.        .                                .
.        .                                .
.        .                                .
.       BEHXn           Skeletal routine for calculation of the nth
.                       type of response.
.
.       USRCON          Skeletal routine for user-written constraint
.                       condition. (Can be left null without problems.)
.
.       OBJECT          Skeletal routine for calculation of the objective.
.                       NOTE:  This subroutine must end with the statement:
.                              OBJ  = (objective name chosen during GENTEXT)
.========================================================================
. =======================================================================
. NOTE:  The only files of those just listed (*.NEW) that the GENOPT user
.        need consider are STRUCT.NEW and BEHAVIOR.NEW.
.
.
. ====================================================================
.               OTHER FILES IN [USERNAME2.GENOPTCASE]
.    CREATED BY THE GENOPT SYSTEM THROUGH ACTIONS OF THE GENOPT USER
. --------------------------------------------------------------------
.     FILE NAME           SIZE (BLOCKS)        DATE CREATED
.                                       The purpose is given above.
. --------------------------------------------------------------------
. Object elements in [USERNAME2.GENOPTCASE] created by GENPROGRAMS:
.    BEGIN.OLB;3             233/234       15-NOV-1988 07:18
.    BEHAVIOR.OLB;3           35/36        15-NOV-1988 07:20
.    CHANGE.OLB;3             29/30        15-NOV-1988 07:19
.    STOGET.OLB;3             42/42        15-NOV-1988 07:18
.    STRUCT.OLB;3             65/66        15-NOV-1988 07:21
.
. Executable elements in [USERNAME2.GENOPTCASE] created by GENPROGRAMS:
.    BEGIN.EXE;1             176/177       15-NOV-1988 07:19
.    CHANGE.EXE;1             66/66        15-NOV-1988 07:19
.    CHOOSEPLOT.EXE;1         71/72        15-NOV-1988 07:19
.    DECIDE.EXE;1             81/81        15-NOV-1988 07:19
.    DIPLOT.EXE;1            386/387       15-NOV-1988 07:20
.    MAINSETUP.EXE;1          38/39        15-NOV-1988 07:19
.    OPTIMIZE.EXE;1          431/432       15-NOV-1988 07:21
.    STORE.EXE;1              20/21        15-NOV-1988 07:19
.
. ====================================================================
. NOTES: The *.OLB files are located in [USERNAME2.GENOPTCASE] rather
.        than in [USERNAME1.GENOPT] because GENTEXT has created FORTRAN
.        code used in the corresponding *.NEW files. This code is
.        generic-case-dependent, whereas all the files in 
.        [USERNAME1.GENOPT] do not depend on either generic or specific
.        cases (with the exceptions of ADDCODE1 and LINKMAIN, as
.        described in USERG FILES NEW and USERG FILES COM, respectively.
.
.        The *.EXE files are located in [USERNAME2.GENOPTCASE] rather
.        than in [USERNAME1.GENOPT] because GENTEXT has created certain
.        object libraries, such as STOGET.OLB, which is generic-case-
.        dependent. 
.
*
:
> END
?
*
. NOTE: "USERNAME1" = keeper of the GENOPT program system.
.       "USERNAME2" = either GENOPT user or end user.
. =========================================================================
.        FILES GENERATED IN THE DIRECTORY [USERNAME2.GENOPTCASE]
.  BY THE END USER'S ACTIONS (AS OPPOSED TO THE ACTIONS OF THE GENOPT USER)
.  =========================================================================
.            CONTENTS OF FILES CREATED FOR A SPECIFIC CASE
.        BY VARIOUS PROCESSORS OF THE GENOPT-CREATED PROGRAM SYSTEM
.     (Here the end user chose "ARIANE" as the specific case name.)
.  =========================================================================
.   FILE NAME       SIZE (BLOCKS)     PURPOSE OF THE FILE
.  -------------------------------------------------------------------------
.  ARIANE.BEG;1        52/54       Input for BEGIN.
.  ARIANE.CBL;1       231/231      Data base for ARIANE (binary format).
.  ARIANE.CHG;1         3/3        Input for CHANGE.
.  ARIANE.CPL;1         5/6        Input for CHOOSEPLOT.
.  ARIANE.DAT;1         3/54       Scratch file which contains a properly
.                                    annotated copy of the latest interactive
.                                    session.
.  ARIANE.DEC;1        10/12       Input for DECIDE.
.  ARIANE.DIP;1         1/3        Input for DIPLOT.
.  ARIANE.NAM;1         1/3        Contains only the specific case name (ARIANE)
.  ARIANE.ODI;1        11/12       List output from DIPLOT.
.  ARIANE.OPB;1        47/48       List output from BEGIN.
.  ARIANE.OPC;1        49/51       List output from CHANGE.
.  ARIANE.OPD;1        20/21       List output from DECIDE.
.  ARIANE.OPL;1        14/15       List output from CHOOSEPLOT.
.  ARIANE.OPM;19      197/198      List output from OPTIMIZE.
.  ARIANE.OPP;9       148/150      List output from STORE. Contains the values
.                                    of all design parameters, margins, and
.                                    the objective for all design iterations.
.  ARIANE.OPT;2         1/3        Input for MAINSETUP.
.  ARIANE.PL1;10       45/45       Accumulated values of design parameters,
.                                    margins, and objective for all design
.                                    iterations at the start of an "OPTIMIZE".
.                                    This file is in binary form.
.  ARIANE.PL2;1        45/45       Same as ARIANE.PL1, except it contains all
.                                    results at the end of an "OPTIMIZE".
.                                    This file is used as part of input to
.                                    CHOOSEPLOT. (binary format).
.  ARIANE.PL3;1        14/15       Design margins chosen in CHOOSEPLOT v.
.                                    design iterations from the beginning of
.                                    the case (possibly many "OPTIMIZEs".
.                                    This file is produced by CHOOSEPLOT and
.                                    is read by DIPLOT.
.  ARIANE.PL4;1        14/15       Design parameters chosen in CHOOSEPLOT v.
.                                    design iterations, as with ARIANE.PL3.
.  ARIANE.PL5;1         4/6        Objective v. design iterations, as with
.                                    ARIANE.PL3 and ARIANE.PL4.
.  QMS.TMP;1          485/486      Plot information in form that can be
.                                    interpreted by QMS laser printer at
.                                    Lockheed Palo Alto Res. Lab, Bldg. 251.
. ==========================================================================
.
*
:
:
C=DECK      LIBRARIES
> LIB
? INT        ARRAYS     BUCPAN2    FORCES     GETCIJ     SMRCIJ
? CONMAN     ADS        DECIDE     HELPG      MAIN       MAINS
? PROM       UTIL       ADDCODEn   CHPLOT     DIPLOT     FELIPPA
? GENPROMPT  INSERT     STORE      
? URBEGIN    BEGIN      URCHANGE   CHANGE     URSTOGET   STOGET
? URSTRUCT   STRUCT     BEHAVIOR
*
.    LIBRARIES
.
!      Information is available on:
!
! INTRODUCTION    ARRAYS     BUCPAN2     FORCES     GETCIJ      SMRCIJ
! CONMAN          ADS        DECIDE      HELPG      MAIN        MAINSETUP
! PROMPTER        UTIL       ADDCODEn    CHPLOT     DIPLOT      FELIPPA
! GENPROMPT       INSERT     STORE
! URBEGIN         BEGIN      URCHANGE    CHANGE     URSTOGET    STOGET
! URSTRUCT        STRUCT     BEHAVIOR
!
! Next, please type HELPAN LIBRARIES SUBTOPIC, in which SUBTOPIC stands
! for one of the subtopics listed above.
*
> INT
?
*
.    INTRODUCTION
.
.      The libraries ARRAYS, BUCPAN2, FORCES, GETCIJ, SMRCIJ are
.      from PANDA2.  They are used without change. The object
.      libraries *.OLB are collected from PANDA2: .  (See the file
.      LINKMAIN.COM.)  These libraries are required only for the complex
.      example case called PANEL.CAS.
.
.      The library ADDCODE1.NEW consists of code very like that from
.      PANDA2, but for which some changes were required for use for
.      the example case called PANEL.CAS.  ADDCODE1 is required only
.      for PANEL.CAS.
.
.      The remaining libraries are GENOPT libraries, and although
.      some of them, such as PROMPTER.NEW, CONMAN.NEW, ADS.NEW
.      are similar or the same as libraries in the PANDA2 system,
.      they reside in [USERNAME1.GENOPT] or in [USERNAME2.GENOPTCASE],
.      depending on whether or not they are case-dependent.  The
.      libraries *.NEW in [USERNAME1.GENOPT] are NOT case-dependent.
.      The libraries *.NEW in [USERNAME2.GENOPTCASE]  ARE case dependent.
.
.      USERNAME1 = the keeper of the GENOPT system at your facility.
.      USERNAME2 = the GENOPT user or the end user.
.
*
:
> ARRAYS 
?
*
.    ARRAYS     (This library is used unchanged from PANDA2. It is
.                needed for the complex example case, PANEL.CAS. The
.                only routine used from this library is IDSEG.)
.
.                ARRAYS is located in [USERNAME3.PANDA2], in which
.                USERNAME3 = the keeper of the PANDA2 system.
.
.      Similar to a BOSOR4 library of the same name, this library
.      sets up the stiffness and load-geometric matrices for the
.      bifurcation buckling (eigenvalue) problem of the single panel
.      module and of the entire panel with smeared stiffeners.
.      The single panel module is modelled as a prismatic structure with
.      variation of displacement trigonometric along the axis and with
.      the cross section segmented and discretized according to BOSOR4
.      conventions.  The strain-displacement relations have been
.      modified from those used in BOSOR4 to account for the fact that
.      the panel module is not an axisymmetric structure but a
.      prismatic structure.  For example, the radius from the axis of
.      revolution no longer occurs and differentiation by theta in
.      BOSOR4 becomes differentiation with respect to the axial
.      coordinate in PANDA2. Hence, whereas in BOSOR4 differentiation
.      with respect to the circumferential coordinate theta was
.      represented by multiplication by the circumferential wavenumber
.      n; in PANDA2 differentiation with respect to the axial
.      coordinate is represented by multiplication by the factor n*pi/L,
.      in which n is the number of axial half waves and L is the length
.      of the panel in the axial direction.
.
.    SUBROUTINES CONTAINED IN THE  ARRAYS   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.       ARRAYS       Set up global stiffness and load-geom. matrices
.       CHGCIJ       Store constitutive stiffnesses properly to account
.                      for different conventions in PANDA2 nomenclature
.                      from that in BOSOR4 nomenclature.
.       FILLB        Assemble local stiffness or load-geometric matrix
.                      into the global matrix (same as BOSOR4 routine).
.       GETB1        Express strain-displacement relations in discrete
.                      form.  Modified from BOSOR4 routine because of
.                      the prismatic geometry of the panel module.
.       GETGEO       Get geometry parameters for a single segment of
.                      the panel module.
.       GETP         Calculate contribution due to rotation of pressure.
.       GETRNT       Relations between rotations and nodal displacements.
.       GETROT       Same as GETRNT.
.       GETWWD       w, w', w'' at integration point in terms of nodal
.                      point w's.
.       GLOBAL       Set up stiffness and load-geometric matrices for
.                      entire panel with smeared stiffeners and axial load
.                      that varies across the span of the panel.
.       IDSEG        There are two segment numbering schemes for the
.                      single panel module in PANDA2: 1. The numbering
.                      scheme used in Fig. 1 under OVERVIEW PURPOSE; and
.                      2. The BOSOR4-type numbering scheme.  IDSEG
.                      obtains the segment number under the scheme 1.
.                      corresponding to the number under the scheme 2.
.       MATMU4       Performs a similarity transformation at the
.                      finite element level.
.       STABIL       Most of the work is done in STABIL, which calls
.                      all the subroutines just described except ARRAYS
.                      and which also handles the boundary and junction
.                      conditions. Structure is same as STABIL in BOSOR4.
.       VARLOD       Called from GLOBAL. Linearly interpolate to get
.                      varying axial load at every nodal station from
.                      given values at the edges formed by generators.
.   ==================================================================
*
:
> BUCPAN2
?
*
.    BUCPAN2   (This library is used unchanged from PANDA2. It is needed
.               for the complex example, PANEL.CAS.)
.
.                BUCPAN2 is located in [USERNAME3.PANDA2], in which
.                USERNAME3 = the keeper of the PANDA2 system.
.
.     Performs PANDA-type of buckling analyses. (See Ref. 1, Table 1,
.     Figs. 1-4 in Ref. 1). This library contains a collection of
.     routines that calculate eigenvalues and critical combinations of
.     axial and transverse half-waves in buckling analyses. Reduction
.     factors are also calculated (SHRRED) to account for transverse
.     (thru thickness) shear deformation effects.
.
.    SUBROUTINES CONTAINED IN THE  BUCPAN2   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       ALSUM            Find effective thicknesses of end segments of
.                          stiffeners.
.       BEND             Calculate buckling corresponding to stiffener
.                          rolling without participation of the skin.
.       DONELL           Calculate buckling load reduction factor to
.                          compensate for inaccuracy of Donnell's
.                          shallow shell equations, which are used
.                          in the PANDA-type of analysis.
.       EIG1             Calculate buckling load factor for one (n,m)
.                          combination. Vary the slope of the buckling
.                          nodal lines if the laminate is unbalanced or
.                          if in-plane shear is present until, for that
.                          (n,m) combination, a minimum buckling load
.                          factor is found.  Apply Donnell reduction
.                          factor.
.       EIGREG           Calculate buckling eigenvalue (load factor) for
.                          a single (n,m,slope) combination, neglecting
.                          transverse shear deformation effects.
.       EIGROL           Same as EIG1, except terms are included to
.                          account for rolling of the stiffeners.
.       EIGSHR           Same as EIGREG, except that Mindlin plate theory
.                          is used to account for transverse shear
.                          deformation effects. (This subroutine is
.                          inactive in PANDA2. Transverse shear deformation
.                          effects are accounted for via SHRRED (see below).
.       FILLB            Certain arrays B1,B2, etc. needed by EIG1 and
.                          EIGROL are calculated.
.       LUFACS           Perform LU factorization of a real unsymmetric
.                          matrix.  Used by the presently inactive EIGSHR.
.       MATMU4           Form the product C = A(transpose)xBxA, where B
.                          is symmetric. Used by the inactive EIGSHR.
.       MINM             Find critical number of axial halfwaves in
.                          the buckling pattern.
.       MINVAL           Find minimum rolling buckling load factor with
.                          number of half-waves along the stiffener axis
.                          corresponding to rolling of the stiffener
.                          without participation of the panel skin.
.       ROLL             Calculate certain strain energy integrals
.                          corresponding to stiffener rolling.
.       ROLRNG           Calculate rolling eigenvalues for rings, no
.                          participation of the skin.
.       ROLSTR           Calculate rolling eigenvalues for stringers, no
.                          participation of the skin.
.       SHRRED           Calculate reduction of buckling load factors
.                          caused by transverse (thru thickness) shear
.                          deformation. (See tutorial with main processor
.                          for a description of the theory.)
.       SNRM2            Find single precision square root of a sum of
.                          squares. Used by LUFACS.
.       STFROL           Generate contribution of stiffeners to strain
.                          energy in buckling mode including stiffener
.                          rolling with skin participation.
.
.======================================================================
*
:
> FORCES
?
*
.    FORCES   (This library is used unchanged from PANDA2. It is needed
.              for the complex example, PANEL.CAS.)
.
.                FORCES is located in [USERNAME3.PANDA2], in which
.                USERNAME3 = the keeper of the PANDA2 system.
.
.     Calculate the residual warping of the cured panel without load
.     and the additional overall bowing under the current applied Load Set A,
.     (Nx, Ny, Nxy) and separately under the current applied load set B
.     (Nxo,Nyo,Nxyo,p). Determine how much of each in-plane applied load is
.     carried by each of the segments of the panel module, including the
.     effect of bowing under the applied load sets.  Postbuckling effects are
.     neglected in this computation.  Calculate the average in-plane strain
.     and curvature change components, {ex,ey,exy,kx,ky,kxy}, in the panel.
.     Calculate the strain and curvature change components
.     {ex(i),ey(i),exy(i),kx(i),ky(i),kxy(i)}, i = 1,4, in each of the unique
.     segments of the panel module.  These are the deformations caused by the
.     Load Set A (Nx,Ny,Nxy). Do the same for Load Set B (Nxo,Nyo,Nxyo,p).
.     Calculate the thermal (curing) strain and curvature change components
.     {etx(i),ety(i),etxy(i),ktx(i),kty(i),ktxy(i)} in each of the unique
.     panel module segments.  Calculate the stress resultants {Nx(i), Ny(i),
.     Nxy(i)} in each of the panel module segments corresponding to Load
.     Set A (Nx, Ny, Nxy). Do the same for Load Set B (Nxo, Nyo, Nxyo, p).
.     Calculate the stress resultants in each of the panel module segments
.     corresponding to thermal curing.
.
.    SUBROUTINES CONTAINED IN THE  FORCES   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       DIVIDE        Obtain resultants in all segments due to uniform
.                       normal pressure acting on global (smeared stiffener)
.                       model of the entire panel. These resultants are
.                       needed as input to the calculations for nonlinear
.                       static response of the panel module to uniform
.                       normal pressure.
.
.       EPSSKN        Fill the array EPS(i,j,k) with strains for thin
.                       and thick parts of the panel skin.
.
.       EQUFCE        Add up forces in panel module segment parts to
.                       check for equilibrium.
.
.       ETOTAL        Add strains from applied loads to strains from
.                       thermal curing deformations to get total strains.
.
.       FORCES        See the paragraph above.
.
.       INVRTC        Calculate membrane compliances by inversion of
.                       the 3 x 3 integrated constitutive C(i,j)
.
.       OUTNX         Print strains, resultants, for various parts of
.                       the panel module corresponding to Load Set A,
.                       Load Set B, curing, normal pressure.
.
.       OUTPRT        Called from OUTNX. Print resultants and strains in
.                       panel module parts.
.
.       RES           Calculate resultants in panel module parts, given
.                       reference surface strains and changes in
.                       curvature EPS and thermal resultants, THERM.
.
.       STRDIS        Obtain reference surface strains and changes in
.                       curvature in various segments of the panel
.                       module, starting with certain arrays, F, G,
.                       FTHERM, EKAVE, which are computed in GETCIJ.
.
.       WEBFLN        Calculate resultants and total loads carried by
.                       the stiffener web and flange.
.======================================================================
*
:
> GETCIJ
?
*
.    GETCIJ   (This library is used unchanged from PANDA2. It is needed
.              only for the complex example, PANEL.CAS.)
.
.                GETCIJ is located in [USERNAME3.PANDA2], in which
.                USERNAME3 = the keeper of the PANDA2 system.
.
.      This library calculates:
.
.         1. The integrated constitutive law for arbitrary layups of
.            composite laminae: in particular, the 6 x 6 C(i,j) matrix
.            for each unique segment of the panel module.
.
.         2. The thermal stress resultants due to uniform cool-down
.            from the "anneal" temperature, that is the temperature
.            at which the material becomes fixed;
.
.         6. Location of neutral plane for axial loading.
.
.    SUBROUTINES CONTAINED IN THE  GETCIJ   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       BOSCIJ       Fill CBOSOR(6,6), the constitutive law that will
.                    be used in the closed-form PANDA-type buckling
.                    analyses that are conducted during the generation
.                    of knockdown factors to account for in-plane shear
.                    and/or non-zero C(1,3),C(1,6), C(2,3),C(2,6),
.                    C(3,4),C(3,5), C(4,6), C(5,6), and the corresponding
.                    C(j,i). In order to simulate the discretized
.                    module models, PANDA-type analysis is conducted
.                    with CBOSOR instead of CPANDA.  These results are
.                    compared to the results obtined from the PANDA-type
.                    analysis with use of CPANDA, and knockdown factors
.                    obtained from the ratios:
.                    (BUCKLING WITH USE OF CPANDA)/(BUCKLING WITH CBOSOR)
.       CFB1         Very similar to routine in STAGSC-1 by the same
.                      name. Calculates integrated constitutive law
.                      C(i,j) (6x6) for arbitrary laminate. Also calcu-
.                      lates THERM(j) = thermal stress and moment result-
.                      ants for a one-degree temperature rise.
.
.       CONTRA       Similarity transformations used in CFB1
.
.       CSHIFT       Given C(i,j) at one reference plane and distance
.                      to another reference plane, find the C(i,j) at
.                      the new reference plane.
.
.       GETCIJ       Get constitutive law and thermal resultants for
.                      each segment in the panel module and the same
.                      for the panel module with smeared stiffeners.
.
.       INVERT       Invert the 6x6 constitutive matrix (single prec.)
.
.       MOVER        Utility to move vector or zero it out.
.
.       NEUTAX       Find neutral planes in panel with smeared stiffeners.
. 
.       OUTCIJ       Prints out C(i,j) (6x6) constitutive matrix and
.                      thermal resultants, THERM(J), J = 1,6
.
.       RTRSF        Transformation used in CFB1 to go from structure
.                      coordinates to material coordinates.
.
.       SEGCIJ       Find C(i,j) for each segment of the panel module.
.
.       STRTHM       Find residual strains and curvature changes of
.                      reference surface due to thermal loads from
.                      curing.
.
.===================================================================
*
:
> SMRCIJ
?
*
.    SMRCIJ   (This library is used unchanged from PANDA2. It is needed
.              only for the complex example, PANEL.CAS.)
.
.                SMRCIJ is located in [USERNAME3.PANDA2], in which
.                USERNAME3 = the keeper of the PANDA2 system.
.
.      Calculate constitutive law coefficients C(i,j) and contributions
.      from panel curing to thermal terms for panel with smeared segments
.      2 (see BEGIN tutorial) and for panels with smeared stiffeners.
.
.    SUBROUTINES CONTAINED IN THE  SMRCIJ   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       CSMEAR     The constitutive law with smeared stiffeners is
.                    derived, starting from the left-hand-sides of
.                    Eqs. (1)-(4) (mainprocessor tutorial) equated to
.                    the proper combinations of smeared-stiffener-
.                    coefficients and average strains and changes in
.                    curvature and integrated thermal forces and moments.
.
.       CSTIF      Derive stiffener coefficients for stiffness (STIFL)
.                    eccentricity (STIFM), moment (STIFMM), thermal force
.                    (STIFT), thermal moment (STIFMT).  Positions of
.                    centroids of stiffener parts, ZPART, are also
.                    calculated.
.
.       DEFCIJ     Derive Cij for locally postbuckled panel with
.                  smeared stiffeners.
.
.       EPSKAP     Derive certain coefficients D11, D12,.., D21, D22,..
.                    F11, F12,.., F21, F22,.. used subsequently. (See
.                    mainprocessor tutorial for more details.)
.
.       MAXWEL     Check for Maxwell reciprocity (e.g. C12 = C21), and
.                    print out message if it is violated by more than
.                    10 per cent.
.
.       SMRCIJ     Calculate smeared-stiffener C(i,j), CX and CY, for the
.                    panel module segments, and CS for the entire panel
.                    with smeared stiffeners, depending upon which set of
.                    stiffeners is smeared.  Also, find the smeared thermal
.                    resultants and moments from panel curing.
.
.======================================================================
*
:
> ADDCODE1
?
*
.    ADDCODE1       (This library contains code that is very similar
.                    to that in PANDA2, but some changes were required.
.                    It is used only for the complex example case called
.                    PANEL.CAS.  ADDCODE1 is essentially a concatenation of
.                    the PANDA2 libraries BUCPAN1, BUCKLE, STRAIN, and PANCOM
.                    with several routines omitted and others changed.)
.
.                ADDCODE1 is located in [USERNAM1.GENOPT], in which
.                USERNAME1 = the keeper of the GENOPT system.
.
.     BUCPAN1:
.     Performs PANDA-type of buckling analyses. (See Ref. 1, Table 1,
.     Figs. 1-4 of Ref. [6] in HELPG OVERVIEW DOCUMENTS).
.     First fills PANDA common blocks with the
.     appropriate data from PANDA2 (PANCOM) and then calculates various
.     general, local, rolling, buckling loads (GENSTB).
.
.    SUBROUTINES TAKEN FROM THE  PANDA2:BUCPAN1   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       BUCPAN           Performs PANDA-type of buckling analyses. Also
.                          calculates knockdown factors to use for effect
.                          of in-plane shear on buckling load computed
.                          from discretized models, in which (being BOSOR4-
.                          type analyses) in-plane shear is neglected.
.
.       GENSTB           Calculates eigenvalues and critical combinations
.                          of axial and transverse half-waves for local
.                          and general buckling, rolling with and without
.                          participation of the skin.
.    ----------------------------------------------------------------------
.      
.      PANCOM:
.      Transfer data from the PANDA2 labelled common blocks to the PANDA
.      labelled common blocks. Normalized constitutive law coefficients,
.      C(i,j) for PANDA-type buckling analysis.
.
.    SUBROUTINES TAKEN FROM THE  PANDA2:PANCOM   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       CNORM        Normalize C(i,j) to prevent overflow.
.
.       DIFF         Find a floating point quantity, DIFF1, used in
.                      comparison with a tolerance index, TOL, for
.                      logical IF statements.
.
.       FILLC        Transfer C(i,j) matrix into C11, C12,... and B11,
.                      B12,...
.
.       GTRANS       Calculate transverse shear stiffness for smeared
.                      stiffener webs.
.
.       MERR         Error exit for traceback.
.
.       PANCOM       See paragraph above.
.
.       STFTYP       Fill certain PANDA variables (NPART, ANGL, NSEG,
.                      NEND) given PANDA2 variables ISTIF, INTERN.
.
.       ZAZB         Calculate beginning and end coordinates of the
.                      stiffener segments in PANDA coordinate system.
.    ---------------------------------------------------------------
.
.     BUCKLE:
.     This library performs a variety of buckling and crippling
.     analyses.
.
.    SUBROUTINES TAKEN FROM THE  PANDA2:BUCKLE   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       CRIPP2      Get crippling load for stiffener web and flange
.                     buckling together, but corner between them
.                     not moving.
.       CRIPPL      Get crippling loads for stiffener segments.
.       STFEIG      Get crippling of stiffener segments.
.   -------------------------------------------------------------------
.
.      STRAIN:
.      Obtain stresses in material coordinates in the layers in each
.      panel module segment.
.
.    SUBROUTINES TAKEN FROM THE  PANDA2:STRAIN   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.       
.       ROTATE        Transform strains from (axial, transverse=Ex,Ey)
.                       to material (E1,E2) coordinates.
.
.       ROTATS        Transform stresses from (axial, transverse=Sx,Sy)
.                       to material (SIG1, SIG2) coordinates.
.
.       STRAIN        Calculate stress margins in a single layer of
.                       locally unbuckled panel skin and stiffeners.
. 
.       STRCON        Calculate stress constraints in locally unbuckled
.                       panel skin and stiffener parts.
.  ---------------------------------------------------------------------
*
:
> CONMAN
?
*
.    CONMAN             (CONMAN is located in [USERNAME1.GENOPT], in which
.                        USERNAME1 = the keeper of the GENOPT system.)
.
.      Introduce Vanderplaats' optimizer, ADS. Set up the labelled
.      common blocks needed by ADS, the lower and upper bounds of
.      the decision variables, initialize pushoff constants, scale
.      decision variables and objective function, establish the
.      gradients of the constraint conditions, perturb the vector
.      of decision variables, test for necessity to use escape
.      sequence. NOTE: with each entry into ADS the vector of
.      decision variables is normalized.
.
.    SUBROUTINES CONTAINED IN THE  CONMAN   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       CONMAN      Set up labelled common blocks needed by ADS; call
.                     ADS; initialize certain optimization parameters,
.                     Scale the objective function and decision variables.
.       ESCAPE      Push design toward feasible region if ADS can't
.                     handle it. (The variables that the user chose as
.                     escape variables are increased by 10 per cent.)
.       GRADG       Gradients of constraints w.r.t. decision variables
.                    are calculated.
.       NEWY        New vector Y of decision variables is created by
.                     perturbing one of the original decision variables
.                     by a certain percentage.
.       SETUPV      Set up vector of design parameters starting from
.                     vector X of decision variables, pointers to the
.                     decision variables, pointers to linked variables
.                     and linking constants of proportionality.
.       SETUPX      Set up vector X of decision variables, given the
.                     design parameters, pointers to the decision
.                     variables.  Establish lower and upper bounds.
.       VLBVUB      Update lower and upper bounds of decision variables
.                     depending on the design iteration. 
.======================================================================
*
:
> ADS
?
*
.    ADS             (ADS is located in [USERNAME1.GENOPT], in which
.                        USERNAME1 = the keeper of the GENOPT system.)
.
> ADS
?
*
.    ADS
.
.     This is ADS version 2.01, January 1987, written by G. Vanderplaats,
.     et al from 1982 - 1987. It has been truncated so that it will
.     run only the "0-4-7" or "0-5-7" optimization methods (method of
.     feasible directions (like CONMIN) and modified method of feasible
.     directions, respectively).
.
*
:
> DECIDE
?
*
.    DECIDE             (DECIDE is located in [USERNAME1.GENOPT], in which
.                        USERNAME1 = the keeper of the GENOPT system.)
.
.      Permits the user to choose decision variables, upper and lower
.      bounds of same; linked variables, to which decision variables
.      linked and linking constants of proportionality; inequality
.      constraints involving up to 5 variables per constraint; and escape
.      variables, which are used in case ADS can't handle the
.      unfeasible design.
.
.    SUBROUTINES CONTAINED IN THE  DECIDE   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       DECIDE         This is a main program.
.                        Allows user to choose, parameter by parameter,
.                        decision variables, linked variables, and
.                        escape variables, and lower and upper bounds
.                        of decision variables.
.       OUTOPT         List summary of optimization parameters.
.       OUTV2          List table of decision variables.
.======================================================================
*
:
> HELPG
?
*
.    HELPG             (HELPG is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Short program which searches the GENOPT.HLP file to find what
.      the user wants to know about.
.
*
:
> MAIN
?
*
.    MAIN              (MAIN is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      This is the GENOPT mainprocessor, activated when you give the
.      command OPTIMIZE. For more details, see HELPG COMMAND OPTIMIZE.
*
:
> MAINS
?
*
.    MAINSETUP         (MAINSETUP is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Permits user to provide interactively the type of analysis
.      (1 = optimization; 2 = just plain analysis of a fixed design),
.      and the number of design iterations to be used in the next
.      OPTIMIZE run.
.
*
:
> PROM
?
*
.    PROMPTER          (PROMPTER is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      This library makes the interactive input work and generates the
.      annotated files of input that you provide during your interactive
.      sessions. PANDA2 also has a PROMPTER library.  However, the
.      PROMPTER.NEW library with GENOPT has been improved to allow for
.      two array indices.
.
.    SUBROUTINES CONTAINED IN THE  PROMPTER  LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       ABORT2       Abort if error in input.
.       ANSL1        Logical YES (Y)  NO (N) function.
.       ANSWER       As with ANSL1
.       CASNAM       Allow user to supply name of the case.
.       DATUM        Searches prompt file PROMPT.DAT and asks you for
.                     the next datum. After you provide it, writes
.                     the datum and its definition out on the NAME.xxx
.                     file, in which NAME is the case name you chose.
.       ERREX        Divide by zero to provide traceback in case of
.                     error.
.       I2C          Convert integer to character
.       IBLNK        Find location of first blank in definition.
.       NFILE        Name the output file and open files.
.       NXITEM       Read next item (written by P.S.Jensen)
.       PHOUT        Write out datum definition.
.       PROMPT       Search prompt file and issue prompt corresponding
.                    to the index in the argument list of DATUM.
.       READFF       Called by NXITEM. Reads datum. Written by Jensen.
.       REREAD       Permit reading from a partially completed file,
.                      then revert to terminal for input data.
.======================================================================
*
:
> UTIL
?
*
.    UTIL              (UTIL is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Utility library. Various GENOPT users might find it beneficial
.      to contribute utility routines to this library.
.
.    SUBROUTINES CONTAINED IN THE  UTIL   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       BLANKX      Find the length of a character string.
.       CASGEN      Ask the user for the generic case name.
.       CASSPC      Ask the user for the specific case name.
.       PRONAM      Ask the user for the name of the prompt file.
.       CONVR1      Convert 1-digit integer to a one-character string.
.       CONVR2      Convert 2-digit integer to a two-character string.
.       CONVRT      Convert from integer to character.
.       CONVRF      Convert from floating point to character.
.       MOVER       Move vector or zero it out in core.
.       ERREX       Deliberately divide by zero to cause error
.                     exit with traceback.
.       INTERP      Do linear interpolation.
.       NAMES       Extract the name of a variable from its defining
.                   phrase.
.======================================================================
*
:
> ADDCODEn
?
*
.    ADDCODEn, n = 2, 3, 4, 5
.                      (ADDCODEn are located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Dummy libraries that future GENOPT users can use.
.
*
:
> CHPLOT
?
*
.    CHPLOT            (CHPLOT is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Allows the end user to choose which design margins and/or
.      design parameters to plot v. design iterations since the
.      start of the case (possibly over many OPTIMIZEs). Produces
.      three formatted files:
.                        NAME.PL3  (design margins v. iterations)
.                        NAME.PL4  (design parameters v. iterations)
.                        NAME.PL5  (objective v. iterations)
.      which are read by DIPLOT.
.
*
:
> DIPLOT
?
*
.    DIPLOT            (DIPLOT is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Allows the user to get plots on his/her screen, or hard copies.
.      (See HELPG COMMAND DIPLOT and HELPG FILES PLOT for more information.
.
.    SUBROUTINES CONTAINED IN THE  DIPLOT  LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE              PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.    None of the following is a DISSPLA routine, but most of them
.    call DISSPLA routines.
.       ADRAW2      Calls a DISSPLA routine CURVE.
.       ADRAW3      Calls a DISSPLA routine CURVE.
.       AFRAME      Labels axes; calls subroutines that actually
.                     do the plotting; Calls some DISSPLA routines.
.       AXISMK      Called by AFRAME; draws and labels axes. Calls
.                     DISSPLA axis marking routines.
.           
.       DINIT       Select device to plot on. Initializes device.
.                     You will need to modify this if you want plots
.                     on devices other than those provided as choices
.                     in the interactive "DIPLOT" session.
.       DIPLOT      Main program. Allows user to get plots. Calls
.                     DISSPLA routine DONEPL at the end.
.       GRIDAR      Used to find scales for plot axes.
.       JPAUSE      Pauses so that viewer can view screen.
.       NEXT        Not used. In former times, it counted the number
.                     frames and put the total on a header page.
.       READS       Not used. In K. Neier's version, reads input data.
.       READX       Not used. In K. Neier's version, reads input data.
.       SCALG       Not used.
. -----------------------------------------------------------------------
*
:
> FELIPPA
?
*
.    FELIPPA           (FELIPPA is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Searches the HELP file GENOPT.HLP and puts appropriate portion
.      on the user's screen. Used by HELPG.NEW.
.
*
:
> GENPROMPT
?
*
.    GENPROMPT         (GENPROMPT is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      A very long routine that represents the library associated
.      with the command GENTEXT.  The GENOPT user provides data names,
.      definitions, and "help" paragraphs. GENTEXT produces FORTRAN
.      code and combines it with URBEGIN.NEW, URSTOGET.NEW, URSTRUCT.NEW,
.      and URCHANGE.NEW to produce the complete FORTRAN programs
.      BEGIN.NEW, STOGET.NEW, CHANGE.NEW, STRUCT.NEW and BEHAVIOR.NEW.
.      The GENOPT user adds new FORTRAN code to BEHAVIOR.NEW and possibly
.      to STRUCT.NEW in order to permit end users to optimize things
.      that fit within a GENOPT-user-defined generic class.
.
.    SUBROUTINES CONTAINED IN THE  GENPROMPT  LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       GENTXT         The main program. See description above.
.
.       MOREK          Add prompt increment to current prompt index
.                        and convert the integer value to character.
.       SHIFTC         Remove leading blanks from a 7-character string.
.
.       SHIFTP         Remove leading blanks from an 80-character string.
.
.       UNITE1         Combine URSTOGET.NEW, NAME.COM, NAME.WRI, and
.                        NAME.REA to form the complete routing STOGET.NEW.
.                        This routine needs no modification.
.
.       UNITE2         Combine URBEGIN.NEW, NAME.COM, NAME.NEW, and
.                        NAME.SET to form the complete processor
.                        BEGIN.NEW. This processor needs no modification.
.
.       UNITE3         Combine URSTRUCT.NEW, NAME.COM, and NAME.CON to
.                        form the library STRUCT.NEW. This library may
.                        require modification by the GENOPT user. (See
.                        the complex example PANEL.CAS).
.
.       UNITE4         Combine NAME.SUB and NAME.COM (repeatedly) to
.                        form the library BEHAVIOR.NEW. This library
.                        will require modification by the GENOPT user.
.                        (See both examples, PLATE.CAS and PANEL.CAS).
.
.       UNITE5         Combine URCHANGE.NEW, NAME.COM, and NAME.CHA to
.                        form the processor CHANGE.NEW. This processor
.                        needs no modification.
.
.                      (In the explanations given above, "NAME" is the
.                       GENOPT-user-assigned generic name for the case.)
. ----------------------------------------------------------------------
*
:
> INSERT
?
*
.    INSERT            (INSERT is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Allows the GENOPT user to add parameters to a generic case.
.      INSERT takes input data names, definitions, and "help"
.      paragraphs from the GENOPT user in an interactive mode.
.      INSERT then does the following:
.
.        1. It produces a file called INSERT.INS which contains
.           the information taken from the GENOPT user;
.
.        2. It inserts INSERT.INS in NAME.INP immediately following
.           the line containing a prompt index identified by
.           the GENOPT user;
.
.        3. It reruns GENTEXT in a "batch" mode in order to produce
.           new files and new FORTRAN coding that is consistent with
.           the changed NAME.INP file.
.
.      (In the above description "NAME" is the GENOPT-user-assigned
.       generic case name.)
.
.      See the file PLATE.CAS (near the end of that long file) for
.      an example of how INSERT is used and what it does.
*
:
> STORE
?
*
.    STORE             (STORE is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      Stores design parameters, design margins, and the objective
.      for the current set of design iterations performed after the
.      command OPTIMIZE. This set is combined with the corresponding
.      results from previous sets of design iterations, so that a
.      complete history of the evolution of the design, design
.      margins, and objective is maintained.  The results are stored
.      in two files: 
.
.           NAME.PL2 contains the history in binary form.
.                    This file is read by CHOOSEPLOT.
.
.           NAME.OPP contains the history in formatted form.
.                    This file can be printed by the end user
.                    to check results before using CHOOSEPLOT.
.
.      ("NAME" is the end-user-assigned specific case name.)
*
:
> URBEGIN
?
*
.    URBEGIN           (URBEGIN is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      This is a case-independent library that is completed by
.      GENTEXT.  GENTEXT combines URBEGIN with NAME.COM, NAME.NEW,
.      and NAME.SET ("NAME"=GENOPT-user-assigned generic case name)
.      to form the complete processor BEGIN.NEW.
.
.      BEGIN allows the end user to provide a starting design, material
.      properties, loads, allowables, and factors of safety. More
.      information is available in HELPG COMMAND BEGIN, HELPG FILES NEW,
.      and in HELPG FILES GENOPTUSER.
.
.    SUBROUTINES CONTAINED IN THE  URBEGIN   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.       BEGIN        This is a main program. 
.                      Permit the interactive input of starting design,
.                      material properties, loads, allowables, and
.                      factors of safety.
.       GETVAR       Fill parameter array and definitions.
.       OUTVAR       List parameters and their definitions.
.       INPUT        A skeletal routine to which GENTEXT adds labelled
.                      common blocks and calls to DATUM (see HELPG LIB
.                      PROMPTER) and GETVAR, which permit the end user
.                      to provide prompted input in an interactive mode.
.       SETUPC       A skeletal routine to which GENTEXT adds labelled
.                      common blocks and FORTRAN statements that
.                      reconstruct the contents of the labelled common
.                      variables from parameter arrays.
.======================================================================
*
:
> BEGIN
?
*
.    BEGIN                    (located in [USERNAME2.GENOPTCASE])
.
.      This is a case-dependent library, located in
.      [USERNAME2.GENOPTCASE], that has been partly written by
.      GENTEXT.  GENTEXT combines URBEGIN with NAME.COM, NAME.NEW,
.      and NAME.SET ("NAME"=GENOPT-user-assigned generic case name)
.      to form the complete processor BEGIN.NEW.
.
.      BEGIN allows the end user to provide a starting design, material
.      properties, loads, allowables, and factors of safety. More
.      information is available in HELPG COMMAND BEGIN, HELPG FILES NEW,
.      and in HELPG FILES GENOPTUSER.
.
.    SUBROUTINES CONTAINED IN THE  BEGIN   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.       BEGIN        This is a main program. 
.                      Permit the interactive input of starting design,
.                      material properties, loads, allowables, and
.                      factors of safety.
.       GETVAR       Fill parameter array and definitions.
.       OUTVAR       List parameters and their definitions.
.       INPUT        A complete routine to which GENTEXT has added labelled
.                      common blocks and calls to DATUM (see HELPG LIB
.                      PROMPTER) and GETVAR, which permit the end user
.                      to provide prompted input in an interactive mode.
.       SETUPC       A complete routine to which GENTEXT has added
.                      labelled common blocks and FORTRAN statements
.                      that reconstruct the contents of the labelled
.                      common variables from parameter arrays.
.======================================================================
*
:
> URCHANGE
?
*
.    URCHANGE          (URCHANGE is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      This is a case-independent library that is completed by
.      GENTEXT.  GENTEXT combines URCHANGE with NAME.COM and NAME.CHA
.      ("NAME"=GENOPT-user-assigned generic case name) to form the
.      complete processor CHANGE.NEW.
.
.      CHANGE allows the end user to modify the design, material
.      properties, loads, allowables, and factors of safety. More
.      information is available in HELPG COMMAND CHANGE, HELPG FILES NEW,
.      and in HELPG FILES GENOPTUSER.
.
.    SUBROUTINES CONTAINED IN THE  URCHANGE   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       CHANGE           This is a main program.
.                          Permits the end user to change any problem
.                          parameter or parameters.
.       NEWPAR           A skeletal routine to which GENTEXT adds
.                          common blocks and FORTRAN statements to
.                          reconstruct the contents of labelled
.                          common parameters that are not candidates
.                          to be decision variables.
.======================================================================
*
:
> CHANGE
?
*
.    CHANGE                    (located in [USERNAME2.GENOPTCASE])
.
.      This is a case-dependent library that has been partly written by
.      GENTEXT.  GENTEXT combines URCHANGE with NAME.COM and NAME.CHA
.      ("NAME"=GENOPT-user-assigned generic case name) to form the
.      complete processor CHANGE.NEW.
.
.      CHANGE allows the end user to modify the design, material
.      properties, loads, allowables, and factors of safety. More
.      information is available in HELPG COMMAND CHANGE, HELPG FILES NEW,
.      and in HELPG FILES GENOPTUSER.
.
.    SUBROUTINES CONTAINED IN THE  CHANGE   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.
.       CHANGE           This is a main program.
.                          Permits the end user to change any problem
.                          parameter or parameters.
.       NEWPAR           A complete routine to which GENTEXT has added
.                          common blocks and FORTRAN statements to
.                          reconstruct the contents of labelled
.                          common parameters that are not candidates
.                          to be decision variables.
.======================================================================
*
:
> URSTOGET
?
*
.    URSTOGET          (URSTOGET is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
.      This is a case-independent library that is completed by
.      GENTEXT.  GENTEXT combines URSTOGET with NAME.COM, NAME.WRI, and
.      NAME.REA ("NAME"=GENOPT-user-assigned generic case name) to form
.      the complete processor STOGET.NEW.
.
.      STOGET stores and retrieves the GENOPT data base, that is, the
.      labelled common blocks that have been set up by GENTEXT and
.      filled with relevant information by BEGIN, DECIDE, CHANGE, etc.
.      More information is available in HELPG COMMAND CHANGE,
.      HELPG FILES NEW, and in HELPG FILES GENOPTUSER.
.
.    SUBROUTINES CONTAINED IN THE  URSTOGET   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.       GETCOM                   Retrieve labelled common blocks.
.       STORCM                   Store    labelled common blocks.
.======================================================================
*
:
> STOGET
?
*
.    STOGET                    (located in [USERNAME2.GENOPTCASE])
.
.      This is a case-dependent library that has been partly written by
.      GENTEXT.  GENTEXT combines URSTOGET with NAME.COM, NAME.WRI, and
.      NAME.REA ("NAME"=GENOPT-user-assigned generic case name) to form
.      the complete processor STOGET.NEW.
.
.      STOGET stores and retrieves the GENOPT data base, that is, the
.      labelled common blocks that have been set up by GENTEXT and
.      filled with relevant information by BEGIN, DECIDE, CHANGE, etc.
.      More information is available in HELPG COMMAND CHANGE,
.      HELPG FILES NEW, and in HELPG FILES GENOPTUSER.
.
.    SUBROUTINES CONTAINED IN THE  STOGET   LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    ------------------------------------------------------------------
.       GETCOM                   Retrieve labelled common blocks.
.       STORCM                   Store    labelled common blocks.
.======================================================================
*
:
> URSTRUCT
?
*
.   URSTRUCT           (URSTRUCT is located in [USERNAME1.GENOPT], in which
.                       USERNAME1 = the keeper of the GENOPT system.)
.
. URSTRUCT.NEW  = Case-independent source library for FORTRAN program that
.                performs the analysis for each iterate in the set
.                of optimization iterations.  GENTEXT converts
.
.                GENOPT:URSTRUCT.NEW   into    GENOPTCASE:STRUCT.NEW
.
.                by adding to URSTRUCT at the appropriate locations,
.                GENTEXT-generated FORTRAN code fragments contained in the
.                GENOPTCASE:NAME.COM and GENOPTCASE:NAME.CON files.
.                ("NAME" = GENOPT-user-assigned generic case name.)
.
.                The GENOPT user may have to further modify STRUCT.NEW
.                (add dimension statements, subroutine calls, output
.                statements, etc.).  In the simple example case, PLATE.CAS,
.                STRUCT.NEW was not changed, but in the more complex case,
.                PANEL.CAS, STRUCT.NEW was changed.
.
.                The library, URSTRUCT.NEW, also contains a
.                skeletal routine, SUB. TRANFR, that the GENOPT user
.                can complete in order to translate data names from
.                from those established by the GENOPT user via GENTEXT
.                to other names used by the developer of previously
.                written code that the GENOPT user may plan to incorporate
.                into SUBROUTINE STRUCT and/or SUBROUTINES BEHX1,
.                BEHX2, BEHX3,...BEHXn. 
.
.    SUBROUTINES CONTAINED IN THE  URSTRUCT  LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    -------------------------------------------------------------------
.       TRANFR              A dummy routine if not used by GENOPT user.
.                           If used by GENOPT user, TRANFR translates
.                           data names from those chosen by the GENOPT
.                           user during the interactive GENTEXT session
.                           to those used in software "borrowed" by the
.                           GENOPT user from other sources. See the case
.                           PANEL.CAS for an example of the use of TRANFR.
.========================================================================
*
:
> STRUCT
?
*
.     STRUCT           (STRUCT is located in [USERNAME2.GENOPTCASE], in which
.                       USERNAME2 = GENOPT user or end user.)
.
.   STRUCT.NEW  = Case-dependent source library for FORTRAN program that
.                performs the analysis for each iterate in the set
.                of optimization iterations.  GENTEXT converts
.
.                GENOPT:URSTRUCT.NEW   into    GENOPTCASE:STRUCT.NEW
.
.                by adding to URSTRUCT at the appropriate locations,
.                GENTEXT-generated FORTRAN code fragments contained in the
.                GENOPTCASE:NAME.COM and GENOPTCASE:NAME.CON files.
.                ("NAME" = GENOPT-user-assigned generic case name.)
.
.                The GENOPT user may have to further modify STRUCT.NEW
.                (add dimension statements, subroutine calls, output
.                statements, etc.).  In the simple example case, PLATE.CAS,
.                STRUCT.NEW was not changed, but in the more complex case,
.                PANEL.CAS, STRUCT.NEW was changed.
.
.                The library, STRUCT.NEW, also contains a
.                skeletal routine, SUB. TRANFR, that the GENOPT user
.                can complete in order to translate data names from
.                from those established by the GENOPT user via GENTEXT
.                to other names used by the developer of previously
.                written code that the GENOPT user may plan to incorporate
.                into SUBROUTINE STRUCT and/or SUBROUTINES BEHX1,
.                BEHX2, BEHX3,...BEHXn. 
.
.    SUBROUTINES CONTAINED IN THE  STRUCT  LIBRARY AND PURPOSE OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    -------------------------------------------------------------------
.       TRANFR              A dummy routine if not used by GENOPT user.
.                           If used by GENOPT user, TRANFR translates
.                           data names from those chosen by the GENOPT
.                           user during the interactive GENTEXT session
.                           to those used in software "borrowed" by the
.                           GENOPT user from other sources. See the case
.                           PANEL.CAS for an example of the use of TRANFR.
.========================================================================
*
:
> BEHAVIOR
?
*
.   BEHAVIOR          (BEHAVIOR is located in [USERNAME2.GENOPTCASE], in which
.                      USERNAME2 = GENOPT user or end user.)
.
.  BEHAVIOR.NEW  = Case-dependent source library for FORTRAN program that
.                performs the analysis for each iterate in the set
.                of optimization iterations.  GENTEXT combines in an
.                appropriate manner the GENTEXT-generated FORTRAN code
.                files
.
.                GENOPTCASE:NAME.COM   and    GENOPTCASE:NAME.SUB
.
.                to form  GENOPTCASE:BEHAVIOR.NEW.
.
.                ("NAME" = GENOPT-user-assigned generic case name.)
.
.                After GENTEXT is finished, BEHAVIOR.NEW consists of the
.                series of skeletal subroutines listed below. The GENOPT
.                user will have to complete SUBROUTINE OBJECT, and depending
.                on his/her strategy may want to complete
.                BEHX1, BEHX2, ...BEHXn.
.
.                In complex cases, such as the example PANEL.CAS, it is
.                likely that the GENOPT user will want to introduce calls
.                to "borrowed" subroutines in STRUCT.NEW, storing the
.                subroutines themselves in one or more of the ADDCODEj.NEW
.                libraries, rather than introduce coding that calculates
.                behavior each of the BEHXn subroutines.  Even so, he/she
.                will have to provide FORTRAN coding in SUBROUTINE OBJECT
.                for calculating the objective.
.
.                In simple cases, such as the example PLATE.CAS, for which
.                relatively simple formulas or interpolatable tables of
.                behavior are available, it is likely that the GENOPT user
.                will want to introduce coding that calculates behavior in
.                each of the BEHXn subroutines. He/she will also have to
.                provide FORTRAN coding in SUBROUTINE OBJECT for calculating
.                the objective.
.
.                The number n of subroutines BEHX1, BEHX2,...BEHXn is
.                determined during the interactive GENTEXT session:
.                Every time the GENOPT user introduces a new role-type 4
.                variable (response variable), a new skeletal SUBROUTINE
.                BEHXi is produced by GENTEXT. For examples, in the simple
.                example, PLATE.CAS, the GENOPT user introduced four
.                response phenomena that might constrain the design:

.                  1. maximum stress          (calculated in BEHX1)
.                  2. buckling load factors   (calculated in BEHX2)
.                  3. lowest frequency        (calculated in BEHX3)
.                  4. maximum deflection      (calculated in BEHX4)
.
.                Therefore, there are four BEHXi routines that the GENOPT
.                user had to complete. Note that the number of BEHXi
.                routines does not depend on how many different sets
.                of loads there are, but only on the number of different
.                phenomena are being accounted for. The number of
.                behavioral constraint conditions generated might be,
.                for example, the number of phenomena accounted for
.                for each load combination times the number of load
.                combinations that the object is being designed to
.                withstand.
.
.                In the complex example, PANEL.CAS, the GENOPT user
.                introduced 18 response phenomena that might constrain
.                the design. (These are listed in the GLOSSARY in the
.                file PANEL.CAS). Therefore, there are 18 skeletal
.                subroutines BEHXi in this case. However, in this
.                complex case, in which code was "borrowed" from PANDA2,
.                the GENOPT user did not add to the skeletal routines
.                BEHXi, i = 1,18, but chose instead to insert appropriate
.                subroutine calls into SUBROUTINE STRUCT and complete
.                the data translation routine, TRANFR.
.
.           SKELETAL SUBROUTINES CONTAINED IN THE  BEHAVIOR  LIBRARY
.                           AND PURPOSES OF THEM
.
.      SUBROUTINE                   PURPOSE OF THE SUBROUTINE
.    -------------------------------------------------------------------
.       BEHX1           Skeletal routine for calculation of the first
.                       type of response identified by the GENOPT user
.                       during the interactive "GENTEXT" session.
.
.       BEHX2           Skeletal routine for calculation of the second
.                       type of response.
.        .                                .
.        .                                .
.        .                                .
.       BEHXn           Skeletal routine for calculation of the nth
.                       type of response.
.
.       USRCON          Skeletal routine for user-written constraint
.                       condition. (Can be left null without problems.)
.
.       OBJECT          Skeletal routine for calculation of the objective.
.                       NOTE:  This subroutine must end with the statement:
.                              OBJ  = (objective name chosen during GENTEXT)
.========================================================================
*
:
:
C=DECK      OVERVIEW
> OV
? SUM       DOC          HOW            UP            NEWS
*
.   OVERVIEW
.
!   Information is available on:
! 
! SUMMARY       DOCUMENTS        HOWTORUN          UPDATE         NEWS
!
! Next, please type HELPG OVERVIEW SUBTOPIC, in which SUBTOPIC stands
! for one of the subtopics listed above.
*
> SUM
?
*
.  GENOPT - - A PROGRAM THAT WRITES USER-FRIENDLY OPTIMIZATION CODE
.
.                     David Bushnell
.
. Consulting Scientist, Dept. 93-30/251, Lockheed Palo Alto Research Lab,
. 3251 Hanover Street, Palo Alto, California, 94304, Tel: (415)424-3237
.
.
.                        ABSTRACT
.
.The purpose of GENOPT (GENeral OPTimization) is to enable an engineer
.to create, more or less automatically, a user-friendly system of
.programs for analyzing and/or optimizing something. The application
.of GENOPT is not limited to the field of structural mechanics. GENOPT
.is designed to handle problems with small data bases, not large
.finite element models, although it might well be used to provide a
.user-friendly "shell" within which any analysis could be done. GENOPT
.is ideal for generating programs for optimizing things the behavior
.(stress, buckling, vibration, etc.) of which can be expressed by
.relatively simple tables or formulas such as those that appear in
.Roark's handbook [1], or for optimizing things the behavior of which
.has been previously encoded in existing subroutines.  The optimizer
.used in GENOPT is called ADS, and was written by Vanderplaats [2]. 
.It is based on the method of feasible directions [3].  Two examples
.are presented, one relatively simple (PLATE.CAS), the other more
.complex (PANEL.CAS).  (The numbers in brackets are references given
.in HELPG OVERVIEW DOCUMENTS.)
.
.Please see the file GENOPTST.ORY for more introductory information.
.
.The GENOPT code was written during 1987 and 1988.
*
:
> DOC
?
*
.   DOCUMENTATION FOR GENOPT....
.
.
.                      REFERENCES
.
.[1] Roark,    "FORMULAS FOR STRESS AND STRAIN", 3rd edition,
.McGraw-Hill, 1954
.
.[2] Vanderplaats, G. N. and Sugimoto, H., "A general-purpose
.optimization program for engineering design", COMPUTERS AND
.STRUCTURES, vol. 24, pp 13-21 (1986)
.
.[3] Vanderplaats, G. N. and Moses, F., "Structural
.optimization by methods of feasible directions", Computers
.and Structures, Vol. 3, pp 739-755, 1973
.
.[4] Bushnell, D., "BOSOR4: Program for stress, stability,
.and vibration of complex, branched shells of revolution",
.in STRUCTURAL ANALYSIS SYSTEMS, Vol. 2, edited by A.
.Niku-Lari, pp. 25-54, (1986) 
.
.[5] Bushnell, D., "BOSOR5: Program for buckling of complex,
.branched shells of revolution including large deflections,
.plasticity and creep," in STRUCTURAL ANALYSIS SYSTEMS, Vol.
.2,  edited by A. Niku-Lari, pp. 55-67, (1986) 
.
.[6] Bushnell, D., "PANDA2--program for minimum weight
.design of stiffened, composite, locally buckled panels",
.COMPUTERS AND STRUCTURES, vol. 25, No. 4, pp 469-605, 1987
.
.[7] Bushnell, D., "Improved optimum design of dewar
.supports", COMPUTERS and STRUCTURES, Vol. 29, No. 1,
.pp. 1-56 (1988)
.
.[8] Bushnell, D., "ACTUATOR--An interactive computer program for
.optimum design of mirror/actuator systems", unpublished paper written
.in 1983.
.
.[9] Bushnell, D., "GENOPT--A program that writes user-friendly
.optimization code", to appear, International Journal of Solids and
.Structures, 1989.  Also to appear in a bound volume of papers from
.the International Journal of Solids and Structures published in the
.memory of Professor Charles D. Babcock, formerly with California
.Institute of Technology.
.
.
.              FILES THAT YOU SHOULD READ
.
.  GENOPT:GENOPTST.ORY
.  GENOPT:HOWTO.RUN
.  GENOPT:GENOPT.HLP
.  GENOPT:PLATE.CAS
.  GENOPT:PANEL.CAS
.  GENOPTCASE:NAME.DEF,  in which "NAME" is the generic name of a case.
.
*
:
> HOW
?
*
.  HOWTORUN
.
.  GENOPT INSTRUCTIONS:
.
. 1. You must include the following statements in your LOGIN.COM:
.
.           $ GENOPT     :==SET DEFAULT [USERNAME1.GENOPT]
.           $ GENOPTCASE :==SET DEFAULT [USERNAME2.GENOPTCASE]
.           $ ASSIGN USERDISK:[USERNAME1.GENOPT] GENOPT
.           $ ASSIGN USERDISK:[USERNAME2.GENOPTCASE]  GENOPTCASE
.           $ GENOPTLOG  :== @GENOPT:GENPROMPT
.
.    in which:
.             USERNAME1 refers to the keeper of GENOPT and
.             USERNAME2 refers to either the GENOPT user or the end user.
.                       ("GENOPT user" and "end user" are defined in the
.                        file called GENOPTST.ORY, which you must read.)
.    
.  2.  Create two subdirectories:
.
.             [USERNAME1.GENOPT] 
.             [USERNAME2.GENOPTCASE]
.
.  3. Print and read the file GENOPT:GENOPTST.ORY 
.     for information about GENOPT and "How-to-use" instructions.
.     Also print the file GENOPT.HLP and use the interactive
.     HELP utility by giving the command HELPG.
.     List and read the two files with example cases:
.       (a) PLATE.CAS - a relatively simple example
.       (b) PANEL.CAS - a more complex example
.
.  4. TO THE "GENOPT USER":
.     First you must decide upon a class of things for which you want to
.     create a user-friendly analyis/optimization program.  Then you
.     must think about the following:
.      (a) What variables (length, width, thickness,...) are involved?
.      (b) What environments (loads, temperatures,...) is the class of
.          things subjected to?
.      (c) What types of behavior (stress, buckling, vibration,...)
.          should be accounted for?
.      (d) What is the objective (weight, cost,...) of the optimization?
.      (e) From where are you going to obtain algorithms for predicting
.          the types of behavior in (c) and the objective in (d)?
.     In brief, you must have a good idea of your goal before you start.
.     You don't need quantitative answers, only a well-formulated plan.
.
.     TO THE "END USER":
.     (The "END USER" may be the same as the "GENOPT USER")
.     You must choose a specific problem that fits within the
.     class of problems established by the "GENOPT USER"
.     
.  5. When you are ready to begin, go to the subdirectory called
.
.              [USERNAME2.GENOPTCASE]
.
.     and type the command GENOPTLOG.  This activates the GENOPT
.     command menu. Now follow directions given in the "how to run"
.     section of GENOPTST.ORY.
.
.  6. During operation of the GENOPT system, you will launch batch
.     runs. If you are in the subdirectory [USERNAME2.GENOPTCASE]
.     just hit return when it asks you where you want results.
.     Also, hit return when it asks you where GENOPT is stored.
.
.  7. There are two *.COM decks: QUEUE.COM and LINKMAIN.COM which
.     may have to be changed at your facility:
.           QUEUE.COM  assumes certain names for batch queues
.                      which are facility-dependent;
.        LINKMAIN.COM  as presently structured requires the
.                      presence of PANDA2 at your facility.
.                      Directions are given in LINKMAIN.COM
.                      on how to change it to avoid difficulty.
.
.  8. Reference:
.     Bushnell, D., "GENOPT--A program that writes user-friendly
.     optimization code", to appear, International Journal of Solids and
.     Structures, 1989.  Also to appear in a bound volume of papers from
.     the International Journal of Solids and Structures published in the
.     memory of Professor Charles D. Babcock, formerly with the California
.     Institute of Technology.
.
.  9. Directions on how to recompile and relink source libraries are
.     provided in the off-line HELP utility. Type HELPG OVERVIEW UPDATE.
.
. 10. There are two files with results from examples:
.      PLATE.CAS contains the results of a relatively simple case.
.      PANEL.CAS contains the results of a complex case.
.     Files containing input data for these cases are listed with
.     the purpose of each file defined when you type:
.          HELPG FILES PLATE            (for files relating to PLATE.CAS)
.          HELPG FILES PANEL            (for files relating to PANEL.CAS)
.
.
.     The file GENOPTST.ORY contains a section that describes more on
.     how to run GENOPT.
.
*
:
> UP
?
*
.  UPDATE
.
.     RECOMPILING SOURCE FILES, REGENERATING LIBRARIES, RE-LINKING
.
. HOW TO RECOMPILE AND RELINK GENOPT ELEMENTS
.
. RECOMPILE:                         (Note: USERNAME1 = GENOPT keeper)
.
. GENOPT has a number of source code libraries located in
. [USERNAME1.GENOPT].  The files called ADDCODEn.NEW, n=2,3,4,5,
. are written by the GENOPT user, so fixing bugs in those libraries
. is the responsibility of the GENOPT user. The other source
. code files in [USERNAME1.GENOPT] were written primarily by
. the GENOPT developer (D. Bushnell), who will send notices
. of any bugs or modifications to GENOPT keepers at using
. institutions. The source code files are:
.
. ADDCODE1.NEW  CHPLOT.NEW     CONMAN.NEW     ADS.NEW      DECIDE.NEW
. DIPLOT.NEW    FELIPPA.NEW    GENPROMPT.NEW  HELPG.NEW    INSERT.NEW
. MAIN.NEW      MAINSETUP.NEW  PROMPTER.NEW   STORE.NEW   
. URBEGIN.NEW   URCHANGE.NEW   URSTOGET.NEW   URSTRUCT.NEW
.
. If you receive notice of a bug, or if you wish to modify the
. GENOPT source code for any reason, then you do the following:
.
. 1. Edit the appropriate source code library, using standard
.    editing procedures. You can do this with all the files listed above.
.
. 2. Compile the library: $FOR NAME.NEW  in which NAME is one of
.    the library names listed above. You can do this for all
.    the files except URBEGIN, URCHANGE, URSTOGET, URSTRUCT, which
.    are skeletal routines to be completed by GENTEXT.
.
. 3. After successful compilation, give the command: GETLIB
.    The GETLIB procedure is as follows:
.
.      $! This procedure establishes a compressed library from a
.      $! file of object decks and deletes the object file.
.      $     INQUIRE  P1  "GIVE NAME OF LIBRARY FILE"
.      $     LIB/CREATE  'P1'.OLB  'P1'.OBJ
.      $     LIB/COM     'P1'.OLB
.      $     COPY        'P1'.OLB  *.*
.      $     PURGE       'P1'.OLB
.      $     DELETE      'P1'.OBJ;*
.
.    When GETLIB asks for the name of the library file, type the
.    appropriate name, NAME, from the list given above (e.g. GENPROMPT).
.
. 4. When the NAME.OLB file has been successfully generated, and
.    after you have done all your recompilations, give the appropriate
.    linking command or commands.  Most of the linking procedures in the
.    GENOPT system are performed by GENPROGRAMS after GENTEXT-produced
.    FORTRAN code has been combined with the source files listed above.
.    You don't have to use them.  However, GENPROMPT.NEW  and INSERT.NEW,
.    and HELPG.NEW, which have the following linking procedures,
.
.        LINKGEN.COM        LINKHELP.COM        LINKINSERT.COM
.
.    will have to be relinked by the GENOPT keeper, since they are not
.    relinked by GENPROGRAMS.
.
.  EXAMPLE:
.    $FOR GENPROMPT.NEW
.    $@GETLIB
.     GIVE NAME OF LIBRARY FILE:  GENPROMPT
.    $@LINKGEN
.    $PURGE *.EXE
*
:
> NEWS
?
*
.  NEWS
.
.     The file GENOPT.NEWS lists recent GENOPT bulletins.
.     Also, the file GENOPTST.ORY contains GENOPT.NEWS.
.
*
:
:
