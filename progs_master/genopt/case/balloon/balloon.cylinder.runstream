
Table 4 A detailed list of a typical GENOPT/BIGBOSOR4 run stream
=================================================================

balloon.runstream

October 20, 2010

Please read the file, /home/progs/genopt/doc/getting.started.
Please read the paper, /home/progs/genopt/case/balloon/balloon.paper.pdf:

[1] Bushnell, David, "Use of GENOPT and BIGBOSOR4 to obtain optimum
designs of double-walled inflatable cylindrical vacuum chambers",
unpublished report, November, 2010.

Figure numbers and table numbers referenced below are from this report,
called "Ref.[1]" or simply "[1]" in the following text. Note that
Tables 3 - 18 are located in the APPENDIX of [1].

NOTE: It is assumed here that the home directory is "/home/progs".

First, the GENOPT user must establish the program system by means
of which optimum designs in the generic class called "balloon"
can be found.

------------------ begin GENOPT user's activities ------------------

COMMAND                  MEANING OF COMMAND

cd /home/progs/genoptcase	(go to "genoptcase")

genoptlog	(activate the GENOPT set of commands)

gentext		(provide input for GENTEXT: balloon.INP .
                 If you already have a complete file, balloon.INP,
                 then:
                 cp /home/progs/genopt/case/balloon/balloon.INP
                    /home/progs/genoptcase/balloon.INP
                 balloon.INP = Table 3 in the appendix of [1])

insert		(add other variables you may have forgotten
		 during the initial execution of GENTEXT.
		 Remember first to save any valuable new
		 coding that may exist in behavior.new and/or
		 struct.new, as these two files are destroyed
		 by re-execution of GENTEXT.)

See Table 1 in [1] for a glossary of variables created by the
GENOPT user. Table 1 appears as part of the file, balloon.DEF,
in /home/progs/genoptcase. This file is created automatically
by GENTEXT.

See Table 2 in [1] for a complete list of the file, balloon.PRO,
in /home/progs/genoptcase. This file is created automatically
by GENTEXT. It is the file with the input data prompting
phrases and "help" paragraphs that will be seen by the end user.


Next:

1. "flesh out" the skeletal SUBROUTINES BEHX1, BEHX2, BEHX3
   BEHX4, and  OBJECT. See the file:
   /home/progs/genopt/case/balloon/behavior.balloon
   and, if such a file exists in your archive, type:
   cp /home/progs/genopt/case/balloon/behavior.balloon
      /home/progs/genoptcase/behavior.balloon
   behavior.balloon = Table 5 in the appendix of [1].

2. add the three statements, CALL OPNGEN, CALL RWDGEN, and
   call CLSGEN at the appropriate places in the skeletal
   SUBROUTINE STRUCT, See the file:
   /home/progs/genopt/case/balloon/struct.balloon
   and, if such a file exists in your archive, type:
   cp /home/progs/genopt/case/balloon/struct.balloon
      /home/progs/genoptcase/struct.balloon
   struct.balloon = Table 6 in the appendix of [1].

3. Create SUBROUTINE BOSDEC. In this case there are two versions:

   a. bosdec.balloon  = balloon with "truss" (slanted) webs
      (Fig.2 of [1]). See the file:
      /home/progs/genopt/case/balloon/bosdec.balloon
      and, if such a file exists in your archive, type:
      cp /home/progs/genopt/case/balloon/bosdec.balloon
         /home/progs/bosdec/sources/bosdec.balloon).
      bosdec.balloon = Table 7 in the appendix of [1].

   b. bosdec.balloon2 = balloon with radially oriented webs
      (Fig. 1 of [1]). See the file:
      /home/progs/genopt/case/balloon/bosdec.balloon2
      and, if such a file exists in your archive, type:
      cp /home/progs/genopt/case/balloon/bosdec.balloon2
         /home/progs/bosdec/sources/bosdec.balloon2
      bosdec.balloon2 = no table included in [1] for this file.
                        It is very like bosdec.balloon (Table 7)


COMMAND                  MEANING OF COMMAND

cd /home/progs/bosdec/sources	(go to directory where "bosdec" exists)
cp bosdec.balloon bosdec.src
or
cp bosdec.balloon2 bosdec.src
cd /home/progs/genoptcase	(return to "genoptcase" directory)

and, if appropriate:

cp behavior.balloon behavior.new   (store "fleshed out" "behavior")
cp struct.balloon struct.new       (store "fleshed out" "struct")

genprograms	(compiles the GENOPT program system for the
		 generic case called "balloon")

Next:

1. Correct any FORTRAN errors in SUBROUTINE BOSDEC (bosdec.src)
2. Correct any FORTRAN errors in SUBROUTINES BEHX1, BEHX2, BEHX3,
   BEHX4,  OBJECT (behavior.new)
3. Store the updated FORTRAN code as follows:
   cp /home/progs/bosdec/sources/bosdec.src
      /home/progs/bosdec/sources/bosdec.balloon or bosdec.balloon2
   whichever version of SUBROUTINE BOSDEC you are working on.
   cp /home/progs/genoptcase/behavior.new
      /home/progs/genoptcase/behavior.balloon
   Make sure before you do these "cp" that the versions of
   bosdec.src and behavior.new are really the ones you want
   to use to update bosdec.balloon (or bosdec.balloon2) and
   behavior.balloon. You don't want erroneously to overwrite
   your archive files that you have worked so hard on!


COMMAND                  MEANING OF COMMAND

genprograms     (re-compiles the GENOPT program system for the
                 generic case called "balloon")

Next, correct any logical errors or other mistakes in
SUBROUTINE BOSDEC or in SUBROUTINES BEHX1, BEHX2, BEHX3,
BEHX4, OBJECT and again save the updated FORTRAN code as above.

genprograms     (re-compiles the GENOPT program system for the
                 generic case called "balloon")

Keep correcting bosdec.src, behavior.new and recompiling via
the "genprograms" command until you are satisfied that everything
is correct. You will usually have to execute BEGIN, DECIDE,
MAINSETUP, OPTIMIZE as described next in order to complete your
modifications of bosdec.src and behavior.new. Each time through
the "modification loop" make sure to save archive versions of
bosdec.src and behavior.new (here called "bosdec.balloon" and
"behavior.balloon").

------------- end of GENOPT user's activities ------------------

---------------- begin end user's activities -------------------

Next, establish a specific name for a case that fits within the
generic class called "balloon". In this example, we use the
specific name, "try4". Then execute the GENOPT processors,
BEGIN, DECIDE, MAINSETUP, OPTIMIZE, as listed next. Let us
assume that this run stream is based on the balloon model
in which the webs form a truss-like configuration (bosdec.balloon,
Figs. 2 or 5 in [1] and Table 7 in the appendix of [1]). 


COMMAND                  MEANING OF COMMAND

begin		(provide the starting design, etc. Input file for
		 BEGIN = try4.BEG. If you already have a file, say,
		 /home/progs/genopt/case/balloon/try41.starting.beg,
                 then: 
		 cp home/progs/genopt/case/balloon/try41.starting.beg try4.BEG
                 try4.BEG = Table 8 in the appendix of [1])

decide		(provide decision variables, etc. Input file for
		 DECIDE = try4.DEC. If you already have a file, say,
		 /home/progs/genopt/case/balloon/try41.starting.dec,
		 then:
		 cp home/progs/genopt/case/balloon/try41.starting.dec try4.DEC
                 try4.DEC = Table 9 in the appendix of [1])

mainsetup	(provide analysis type, strategy, etc. Input file for
		 MAINSETUP = try4.OPT. If you already have a file, say,
		 /home/progs/genopt/case/balloon/try41.OPT,
		 then:
		 cp home/progs/genopt/case/balloon/try41.OPT try4.OPT
                 try4.OPT = Table 10 in the appendix of [1].

		 IMPORTANT NOTE: At first, always use ITYPE=2, not ITYPE=1 .
		 That is, analyze a fixed design rather than do optimization.
		 After you carefully check to see that everything in the "fixed"
                 design execution is working properly, then you can do
                 optimization as described below.)

optimize	(launch the OPTIMIZE run either to obtain results for
		 a fixed design or to do optimization or to do a
		 design sensitivity analysis. Let us assume that in
		 this case we analyze a fixed design [ITYPE = 2
                 in the try4.OPT file].)

Inspect the try4.OPM file. (No table for this file is included in [1].
It would be analogous to Table 11 in the appendix of [1].)

Suppose you used OPTIMIZE to obtain results for a fixed design, that is,
the starting design that you specified in the try4.BEG file (Table 8 in]
the appendix of [1]).
.
Next, you want to get plots of the buckling modes and the pre-
buckling deformations from direct executions of the version of
BIGBOSOR4 that is independent of the GENOPT system. Do the
following:

First, get a plot of the "general" buckling mode:
("general" is in quotes because the lowest buckling
load factor might well correspond to local buckling, not
general buckling. The lowest eigenvalue could correspond 
either to local or to general buckling.)


COMMAND                  MEANING OF COMMAND

cd /home/progs/work6	(go to a working space, "work6")
bigbosor4log	(activate the BIGBOSOR4 set of commands)
cp /home/progs/genoptcase/try4.BEHX1 try4.ALL	(get BIGBOSOR4 input file)
bigbosorall	(execute BIGBOSOR4: input file = try2.ALL .
		 NOTE: valid input files for bigbosor4 always have the
		 suffix, ".ALL")

Inspect the try2.OUT file. Search for the string, "EIGENVALUE(",
including the trailing left parenthesis.

Next, you want to plot the buckling mode. Do the following:


COMMAND                  MEANING OF COMMAND

bosorplot	(choose what to plot. Use "x" in response to
		 prompt if you want plot on your screen. Use "p"
		 in reponse to prompt if you want plot to be
		 in the file called "metafile.ps".)

gv metafile.ps	(get a plot on your screen via the "ghost view"
		 utility, if "ghost view" is available on your
		 workstation. Fig. 6a in [1] is an edited version
                 of what appears on your screen.)

cleanup		(Clean up the files generated by BIGBOSOR4)


NOTE: THE FOLLOWING LITTLE SECTION IS NOW OBSOLETE BECAUSE THERE IS
NO LONGER ANY *.BEHX2 FILE GENERATED FOR THE GENERIC CASE, "balloon".
Figures 9 and 10 in [1] were generated by temporarily changing the
FORTRAN coding in SUBROUTINE BEHX2 in order to generate plots of
the pre-buckled state of the balloon at Load Step 1 (Fig.9) and at
Load Step 2 (Fig. 10).

--------------- BEGINNING OF THE LITTLE OBSOLETE SECTION --------------

Next, you want to plot the pre-buckling deformations for Load Step No. 1
and for Load Step No. 2. Do the following:

cp /home/progs/genoptcase/try4.BEHX2 try4.ALL   (get BIGBOSOR4 input file)
bigbosorall     (execute BIGBOSOR4: input file = try4.ALL)

Inspect the try4.OUT file. Search for the string, "LOAD STEP",
and look to see how many Newton iterations were required for convergence.

Next, you want to plot the pre-buckled state for Load Step 1 or 2.
Do the following:


COMMAND                  MEANING OF COMMAND

bosorplot       (choose what to plot. Use "x" in response to
                 prompt if you want plot on your screen. Use "p"
                 in reponse to prompt if you want plot to be
                 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. Fig. 9 in [1] is for Load Step 1)

bosorplot	(choose what to plot. Use "x" in response to
		 prompt if you want plot on your screen. Use "p"
		 in reponse to prompt if you want plot to be
		 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. Fig. 10 in [1] is for Load Step 2)

cleanup         (Clean up the files generated by BIGBOSOR4)

---------------  END OF THE LITTLE OBSOLETE SECTION -------------------


cd /home/progs/genoptcase	(return to genoptcase)


Next, suppose you want to optimize the specific case, "try4".
Before you do any optimization make as certain as possible that
your versions of behavior.new and bosdec.src are correct and
have been compiled by execution of the "genprograms" command.
.
First, you edit the try4.OPT file so that it appears as follows:

  n      $ Do you want a tutorial session and tutorial output?
     0   $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
     0   $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
     1   $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
     5   $ How many design iterations in this run (3 to 25)?
  n      $ Take "shortcuts" for perturbed designs (Y or N)?
     2   $ Choose 1 or 2 or 3 or 4 or 5 for IDESIGN
     1   $ Choose 1 or 2 or 3 or 4 or 5 for move limits, IMOVE
  y      $ Do you want default (RATIO=10) for initial move limit jump?
  y      $ Do you want the default perturbation (dx/x = 0.05)?
  n      $ Do you want to have dx/x modified by GENOPT?
  n      $ Do you want to reset total iterations to zero (Type H)?
     1   $ Choose IAUTOF= 1 or 2 or 3 or 4 or 5 or 6 to change X(i)


Then, type the following commands:

COMMAND                  MEANING OF COMMAND

mainsetup	(use the try4.OPT file just listed as input)
superopt	(launch the "global" optimizer. Use 5 OPTIMIZEs per
		 AUTOCHANGE)

SUPEROPT will require about 20 hours (for a model with 15 modules
such as that shown in Fig. 1 of [1]) if SUPEROPT runs successfully
to completion (about 470 design iterations).


------------BEGINNING OF A SMALL DIGRESSION ----------------------

Inspect the try4.OPP file to see if SUPEROPT finished successfully.
If it did, then there should be about 470 design iterations. Look
near the end of try4.OPP to inspect the best FEASIBLE design and
the best ALMOST FEASIBLE design.

Sometimes the SUPEOPT run aborts before there are about
470 design iterations. When that happens look at the
end of the *.OPM file. You will probably find a message
such as occurred on October 19, 2010 in the try4.OPM file:

 ************* ABORT **********
 0.5 x FLOUTR is greater than ROUTER
 0.5 x FLOUTR =  7.1845E+00; ROUTER =  7.1000E+00; IMODX= 1
 Put a higher lower bound on ROUTER.
 The run is now aborting.
 ********************************

You can either follow the directions given in the "ABORT"
diagnostic by appropriately editing the try4.DEC file
(input for DECIDE), executing DECIDE and then re-launching
SUPEROPT.

Or you can accept the optimum design that SUPEROPT has produced
up to the point when the SUPEROPT run aborted by looking near
the end of the try4.OPP file and accepting either the
"BEST FEASIBLE" design or the "ALMOST FEASIBLE" design,
whichever you prefer.

NOTE: With "BEST FEASIBLE" designs all design margins
must be greater than -0.01. With "ALMOST FEASIBLE" designs
all design margins must be greater than -0.05.

If SUPEROPT quits before 470 design iterations, and you do
not see an "ABORT" message at the end of the *.OPM file, then
look at the end of the *.OUT file. You may find output such as
the following at the end of the *.OUT file:

--- beginning of excerpt from the *.OUT file of a run that terminated early ----

 PRESSURE MULTIPLIER, P=   1.000000E-01, TEMPERATURE MULTIPLIER,TEMP =   1.000000E-01
 ANGULAR VELOCITY, OMEGA=   0.000000E+00

 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   0. START FACTORING AND SOLVING
 Factoring done for iteration   0; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  0
 ITERATION NO.  0 MAXIMUM DISPLACEMENT=  2.4119E+01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   1. START FACTORING AND SOLVING
 Factoring done for iteration   1; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  1
 ITERATION NO.  1 MAXIMUM DISPLACEMENT=  1.9859E+01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   2. START FACTORING AND SOLVING
 Factoring done for iteration   2; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  2
 ITERATION NO.  2 MAXIMUM DISPLACEMENT=  4.8352E+01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   3. START FACTORING AND SOLVING
 Factoring done for iteration   3; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  3
 ITERATION NO.  3 MAXIMUM DISPLACEMENT=  5.8661E+01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   4. START FACTORING AND SOLVING
 Factoring done for iteration   4; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  4
 ITERATION NO.  4 MAXIMUM DISPLACEMENT=  3.3983E+02
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   5. START FACTORING AND SOLVING
 Factoring done for iteration   5; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  5
 ITERATION NO.  5 MAXIMUM DISPLACEMENT=  4.1441E+03
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   6. START FACTORING AND SOLVING
 Factoring done for iteration   6; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  6
 ITERATION NO.  6 MAXIMUM DISPLACEMENT=  1.6590E+06
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   7. START FACTORING AND SOLVING
 Factoring done for iteration   7; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  7
 ITERATION NO.  7 MAXIMUM DISPLACEMENT=  9.7225E+10
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   8. START FACTORING AND SOLVING
 Factoring done for iteration   8; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  8
 ITERATION NO.  8 MAXIMUM DISPLACEMENT=  2.5642E+16
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   9. START FACTORING AND SOLVING
 Factoring done for iteration   9; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  9
 ITERATION NO.  9 MAXIMUM DISPLACEMENT=  8.0107E+21
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.  10. START FACTORING AND SOLVING
 Factoring done for iteration  10; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO. 10
 ITERATION NO. 10 MAXIMUM DISPLACEMENT=  7.5466E+30
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.  11. START FACTORING AND SOLVING

 ********** ALMOST SINGULAR STIFFNESS MATRIX **********
 Maximum diagonal of factored matrix at iteration 0=  2.8868E+11
 Maximum diagonal of factored matrix, current iter.=  3.3820E+27
 Newton iterations now aborting.
 ********** ALMOST SINGULAR STIFFNESS MATRIX **********
 Factoring done for iteration  11; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO. 11
 ITERATION NO. 11 MAXIMUM DISPLACEMENT=  2.2389E+37

 INITIAL LOADS TOO HIGH FOR THIS STRUCTURE. REDUCE THEM AND RERUN.

SHELL COLLAPSES AXISYMMETRICALLY AT P=0.1    

--- end of excerpt from the *.OUT file of a run that terminated early ---


If you find this kind of output in *.OUT, then probably you should
increase either the lower bound of RINNER or increase the lower
bound of ROUTER, whichever of RINNER or ROUTER is closest to
its lower bound. If RINNER and/or ROUTER are not decision variables
then increase the value of the one of them that is not a decision
variable or the values of the both of them that are not decision
variables.

NOTE: RINNER should be greater than RADIUS x (pi/2)/(2 x NMODUL).
ROUTER should be greater than (RADIUS+HEIGHT) x (pi/2)/(2 x NMODUL).

---------------- END OF A SMALL DIGRESSION ----------------------


Next, obtain a plot of the objective versus design iterations.
Execute CHOOSEPLOT with the file, try4.CPL, as input:

try4.CPL file:
  n      $ Do you want a tutorial session and tutorial output?
  n      $ Any design variables to be plotted v. iterations (Y or N)?
  n      $ Any design margins to be plotted v. iterations (Y or N)?
  n      $ Do you want to get more plots before your next "SUPEROPT"?
 

COMMAND                  MEANING OF COMMAND

chooseplot	(get plot file, objective v. design iterations)
diplot		(this command produces the file, try4.5.ps)
gv try4.5.ps    (your screen shows the plot from try4.5.ps
                try4.5.ps = Fig. 6b in [1])

Next, you want to run OPTMIZE with the following input file, try4.OPT,
that is, you want to do an analysis of the fixed, optimized design::

  n      $ Do you want a tutorial session and tutorial output?
     0   $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
     2   $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
     2   $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
     5   $ How many design iterations in this run (3 to 25)?
  n      $ Take "shortcuts" for perturbed designs (Y or N)?
     2   $ Choose 1 or 2 or 3 or 4 or 5 for IDESIGN
     1   $ Choose 1 or 2 or 3 or 4 or 5 for move limits, IMOVE
  y      $ Do you want default (RATIO=10) for initial move limit jump?
  y      $ Do you want the default perturbation (dx/x = 0.05)?
  n      $ Do you want to have dx/x modified by GENOPT?
  n      $ Do you want to reset total iterations to zero (Type H)?
     1   $ Choose IAUTOF= 1 or 2 or 3 or 4 or 5 or 6 to change X(i)


COMMAND                  MEANING OF COMMAND

mainsetup	(use the try4.OPT file just listed as input: fixed design)
optimize	(get the try4.OPM file for the fixed, optimized design)

Inspect the try4.OPM file. try4.OPM = Table 11 in the appendix of [1].

Next, save the optimum design listed near the top of Table 11 of [1].

Next, we want to save the optimized design. If you do not have an
appropriate file called try4.CHG, do the following:

change		(answer the prompts interactively)

If you do have an appropriate file, do the following:

cp /home/progs/genopt/case/balloon/try41.superopt1.chg try4.CHG
  try41.superopt1.chg = Table 12 in the appendix of [1] 

change		(use the try4.CHG file as input)
optimize	(analyze the fixed, optimized, design)


Next, we wish to do more optimization. Notice in the
try4.DEC file listed as Table 9 in [1] that the
variables, RINNER and ROUTER, are not decision variables.
These were not used as decision variables during the first
optimization in order to avoid prebuckling axisymmetric collapse,
which causes an early termination of the SUPEROPT execution
analogous to the type described earlier when SUPEROPT was first
executed. We wish now to introduce RINNER and ROUTER as additional
decision variables while keeping HEIGHT and the various wall
thicknesses as decision variables. Also, we may wish to change the
upper or lower bounds of one or more of the decision variables,
depending on the optimum design determined after the first SUPEROPT
execution. For example, if a thickness is at or near its lower
bound, we will probably want to lower that lower bound in the
*.DEC file (input for DECIDE).

Do the following:

COMMAND                  MEANING OF COMMAND

decide          (provide decision variables, etc. Input file for
                 DECIDE = try4.DEC. If you already have a file, say,
                 /home/progs/genopt/case/balloon/try41.dec2,
                 then:
		 cp /home/progs/genopt/case/balloon/try41.dec2 try4.DEC
                 try4.DEC = Table 13 in the appendix of [1])

mainsetup	(use try4.OPT with NPRINT = 0 and ITYPE = 1 as input)
superopt        (launch the "global" optimizer. Use 5 OPTIMIZEs per
                 AUTOCHANGE)

SUPEROPT will require about 20 hours (for a model with 15 modules)
if it runs successfully to completion (about 470 design iterations).

Inspect the try4.OPP file to see if SUPEROPT finished successfully.
If it did, then there should be about 470 design iterations. Look
near the end of try4.OPP to inspect the best FEASIBLE design and
the best ALMOST FEASIBLE design.

Next, obtain a plot of the objective versus design iterations.
Execute CHOOSEPLOT with the file, try4.CPL, as input:

try4.CPL 
  n      $ Do you want a tutorial session and tutorial output?
  n      $ Any design variables to be plotted v. iterations (Y or N)?
  n      $ Any design margins to be plotted v. iterations (Y or N)?
  n      $ Do you want to get more plots before your next "SUPEROPT"?


COMMAND                  MEANING OF COMMAND

chooseplot      (get plot file, objective v. design iterations)
diplot          (this command produces the file, try4.5.ps)
gv try4.5.ps    (your screen shows the plot from try4.5.ps)
                try4.5.ps = Fig. 7 in [1]

Next, you want to run OPTMIZE with the following input file, try4.OPT:

  n      $ Do you want a tutorial session and tutorial output?
     0   $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
     2   $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
     2   $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
     5   $ How many design iterations in this run (3 to 25)?
  n      $ Take "shortcuts" for perturbed designs (Y or N)?
     2   $ Choose 1 or 2 or 3 or 4 or 5 for IDESIGN
     1   $ Choose 1 or 2 or 3 or 4 or 5 for move limits, IMOVE
  y      $ Do you want default (RATIO=10) for initial move limit jump?
  y      $ Do you want the default perturbation (dx/x = 0.05)?
  n      $ Do you want to have dx/x modified by GENOPT?
  n      $ Do you want to reset total iterations to zero (Type H)?
     1   $ Choose IAUTOF= 1 or 2 or 3 or 4 or 5 or 6 to change X(i)


COMMAND                  MEANING OF COMMAND

mainsetup       (use the try4.OPT file just listed as input: fixed design)
optimize        (get the try4.OPM file for the fixed, optimized design)

Inspect the try4.OPM file. try4.OPM = Table 14 in the appendix of [1].

Next, save the optimum design listed near the top of Table 14 of [1].

Next, we want to save the optimized design. If you do not have an
appropriate file called try4.CHG, do the following:

change          (answer the prompts interactively)

If you do have an appropriate file, do the following:

cp /home/progs/genopt/case/balloon/try41.superopt2.chg try4.CHG
  try41.superopt2.chg = Table 15 in the appendix of [1].

change          (use the try4.CHG file as input)
optimize        (analyze the fixed, optimized, design)


Next, we wish to do still more optimization, mainly because
the variable, HEIGHT, in the previous optimization reached its
lower bound: 50 inches. Hence, we decrease the lower bound from
50 to 40 inches. Do the following:


COMMAND                  MEANING OF COMMAND

decide          (provide decision variables, etc. Input file for
                 DECIDE = try4.DEC. If you already have a file, say,
                 /home/progs/genopt/case/balloon/try41.dec3,
                 then:
                 cp /home/progs/genopt/case/balloon/try41.dec3 try4.DEC
                 try4.DEC = Table 16 in in the appendix of [1])

mainsetup	(use try4.OPT with NPRINT = 0 and ITYPE = 1 as input)
superopt        (launch the "global" optimizer. Use 5 OPTIMIZEs per
                 AUTOCHANGE)

SUPEROPT will require about 20 hours (for a model with 15 modules)
if it runs successfully to completion (about 470 design iterations).

Inspect the try4.OPP file to see if SUPEROPT finished successfully.
If it did, then there should be about 470 design iterations. Look
near the end of try4.OPP to inspect the best FEASIBLE design and
the best ALMOST FEASIBLE design. It turns out in this case that the
best design is the same as the optimum design obtained after the
2nd execution of SUPEROPT (Table 14 in the appendix of [1]).

Next, obtain a plot of the objective versus design iterations.
Execute CHOOSEPLOT with the file, try4.CPL, as input:

try4.CPL 
  n      $ Do you want a tutorial session and tutorial output?
  n      $ Any design variables to be plotted v. iterations (Y or N)?
  n      $ Any design margins to be plotted v. iterations (Y or N)?
  n      $ Do you want to get more plots before your next "SUPEROPT"?


COMMAND                  MEANING OF COMMAND

chooseplot      (get plot file, objective v. design iterations)
diplot          (this command produces the file, try4.5.ps)
gv try4.5.ps    (your screen shows the plot from try4.5.ps
                try4.5.ps = Fig. 8 in [1])


Next, you want to get a plot of the buckling mode of the
optimized design from a direct execution of the version of
BIGBOSOR4 that is independent of the GENOPT system.
Do the following:


COMMAND                  MEANING OF COMMAND

cd /home/progs/work6    (go to a working space, "work6")
bigbosor4log    (activate the BIGBOSOR4 set of commands)
cp /home/progs/genoptcase/try4.BEHX1 try4.ALL   (get BIGBOSOR4 input file)
bigbosorall     (execute BIGBOSOR4: input file = try4.ALL)

Inspect the try4.OUT file. Search for the string, "EIGENVALUE(",
including the trailing left parenthesis.

Next, you want to plot the buckling mode. Do the following:


COMMAND                  MEANING OF COMMAND

bosorplot       (choose what to plot. Use "x" in response to
                 prompt if you want plot on your screen. Use "p"
                 in reponse to prompt if you want plot to be
                 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. metafile.ps, with some editing,
                 produces Fig. 11 in [1].)

cleanup         (Clean up the files generated by BIGBOSOR4)


Next, we want to get more than one buckling eigenvector. In this
particular case the lowest eigenvalue happens to correspond to
general buckling, and we want to see what local buckling modes 
look like. Therefore, we do the following:

Edit the "cleaned up" (properly annotated) file, try4.ALL:
Search for the string, "NVEC". Change NVEC from 1 to 10. Then
do the following:

COMMAND                  MEANING OF COMMAND

bigbosorall	(execute BIGBOSOR4: input file=try4.ALL)

Inspect the try4.OUT file. Search for the string, "EIGENVALUE(",
including the trailing left parenthesis. Just above, you will
see 10 eigenvalues, all clustered very close together. The first
eigenvalue in this particular case  corresponds to global buckling
as displayed in Fig. 11 of [1]. Eigenvalues 2 - 9 correspond to
various combinations of local buckling and general buckling, as
shown, for examples, in Figs. 13 and 14 of [1]. The 10th
eigenvalue in this particular case corresponds to almost pure
local buckling, as shown in Fig. 12 of [1].

Next, you want to plot some of the "higher" buckling modes.
Do the following:


COMMAND                  MEANING OF COMMAND

bosorplot       (choose the 2nd eigenvalue. Use "x" in response to
                 prompt if you want plot on your screen. Use "p"
                 in reponse to prompt if you want plot to be
                 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. metafile.ps, with some editing,
                 produces Fig. 13 in [1].)

bosorplot       (choose the 3rd eigenvalue. Use "x" in response to
                 prompt if you want plot on your screen. Use "p"
                 in reponse to prompt if you want plot to be
                 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. metafile.ps, with some editing,
                 produces Fig. 14 in [1].)

bosorplot       (choose the 10th eigenvalue. Use "x" in response to
                 prompt if you want plot on your screen. Use "p"
                 in reponse to prompt if you want plot to be
                 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. metafile.ps, with some editing,
                 produces Fig. 12 in [1].)

cleanup         (Clean up the files generated by BIGBOSOR4)

cd /home/progs/genoptcase       (return to genoptcase)


Next, use GENOPT/BIGBOSOR4 to do "design sensitivity" analyses
(ITYPE = 3 in the *.OPT file).

Suppose you want to obtain a plot of the buckling margin as a function
of the radius, ROUTER,  of the local outward "bulges" in the outer membrane.
Ordinarily, the optimum value of ROUTER should fall approximately in
the middle of the range of ROUTER explored in this "design sensitivity"
analysis (ITYPE=3 in the try4.OPT file). The try4.OPT file should
be as follows in this particular case:

    n       $ Do you want a tutorial session and tutorial output?
       0    $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
       2    $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
       3    $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
       3    $ Choose a design variable (1, 2, 3, ...), IBVAR
  8.95000   $ Starting value of the design parameter, VARBEG
 12.95000   $ Ending value of the design parameter, VAREND
    n       $ Do you want to use the default for the number of steps?
      11    $ Number of steps from VARBEG to VAREND. NSTEPS


COMMAND                  MEANING OF COMMAND

mainsetup       (use the try4.OPT file just listed as input)
optimize        (get the try4.OPM file for the range of ROUTER)


Next, obtain a plot of the buckling and stress margins versus ROUTER:

chooseplot	(choose what to plot versus the range of ROUTER.
		 The input file in this case, try4.CPL, follows:)

    n       $ Do you want a tutorial session and tutorial output?
    y       $ Any design margins to be plotted v. iterations (Y or N)?
       1    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    y       $ Any more margins to be plotted (Y or N) ?
       2    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    y       $ Any more margins to be plotted (Y or N) ?
       4    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    y       $ Any more margins to be plotted (Y or N) ?
       7    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    y       $ Any more margins to be plotted (Y or N) ?
       9    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    y       $ Any more margins to be plotted (Y or N) ?
      12    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    y       $ Any more margins to be plotted (Y or N) ?
      14    $ Choose a margin to be plotted v. iterations (1,2,3,..)
    n       $ Any more margins to be plotted (Y or N) ?
       1    $ Give maximum value (positive) to be included in plot frame.


COMMAND                  MEANING OF COMMAND

diplot		(diplot creates try4.3.ps and try4.5.ps. The
		 design margins chosen in CHOOSEPLOT" are in
		 the file, try4.3.ps and the objective versus
		 ROUTER is in the file, try4.5.ps.)

gv try4.3.ps	(this command shows the plot of the design
		 margins versus ROUTER for 8.95 < ROUTER < 12.95.) 
		 The plot is displayed in Fig. 17 in [1].


Do an analogous "design sensitivity" study (ITYPE = 3 in the *.OPT file)
with use of RINNER as the changing decision variable. The input to
MAINSETUP is as follows:

    n       $ Do you want a tutorial session and tutorial output?
       0    $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
       2    $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
       3    $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
       2    $ Choose a design variable (1, 2, 3, ...), IBVAR
 6.280400   $ Starting value of the design parameter, VARBEG
 7.000000   $ Ending value of the design parameter, VAREND
    n       $ Do you want to use the default for the number of steps?
      11    $ Number of steps from VARBEG to VAREND. NSTEPS

The relevant plot is Fig. 16 in [1].


Do an analogous "design sensitivity" study (ITYPE = 3 in the *.OPT file)
with use of HEIGHT as the changing decision variable. The input to
MAINSETUP is as follows:

    n       $ Do you want a tutorial session and tutorial output?
       0    $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
       2    $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
       3    $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
       1    $ Choose a design variable (1, 2, 3, ...), IBVAR
 40.00000   $ Starting value of the design parameter, VARBEG
 60.00000   $ Ending value of the design parameter, VAREND
    n       $ Do you want to use the default for the number of steps?
      11    $ Number of steps from VARBEG to VAREND. NSTEPS

The relevant plot is Fig. 15 in [1].


Up to this point we have used POUTER = 5.0 psi and a factor of safety
of 3.0 for buckling. Although the "real" case has POUTER = 15.0 psi and
factor of safety for buckling of 1.0, we have used the lower POUTER and
the higher factor of safety in order to avoid pre-buckling collapse
during optimization cycles. Hence, we must next check the optimized
design with the use of POUTER = 15.0 psi and factor of safety for
buckling of 1.0. Do the following:


COMMAND                  MEANING OF COMMAND

cleanspec	(clean up the files with the specific name, try4)

Edit the try4.BEG file (Table 8 in the appendix of [1]), making
the following changes:

The following lines in the try4.BEG file:
  5.00000   $ pressure outside the outer membrane: POUTER(  1)
 1.000000   $ allowable for general buckling load factor: GENBUKA(  1)
 3.000000   $ general buckling factor of safety: GENBUKF(  1)

should be changed to the following lines in the new try4.BEG file:
 15.00000   $ pressure outside the outer membrane: POUTER(  1)
 1.000000   $ allowable for general buckling load factor: GENBUKA(  1)
 1.000000   $ general buckling factor of safety: GENBUKF(  1)


Then, do the following:

COMMAND                  MEANING OF COMMAND

begin		(input is the new try4.BEG file)

change		(input is the file, try41.superopt2.chg:
		 cp /home/progs/genopt/case/balloon/try41.superopt2.chg try4.CHG
		 Table 15 in the appendix of [1])

decide		(input is the file, try41.dec2:       
                 cp /home/progs/genopt/case/balloon/try41.dec2 try4.DEC
                 Table 13 in the appendix of [1])

mainsetup	(input is the file, try41.OPT:
                 cp /home/progs/genopt/case/balloon/try41.OPT try4.OPT
                 Table 10 in [1] with NPRINT=2 and ITYPE = 2 for the
		 analysis of the fixed, optimized design)

optimize	(run OPTIMIZE and inspect the try4.OPM file.
		 try4.OPM = try41.optimum.POUTER15.opm = Table 17 in
		 the appendix of [1])


Next, you want to get a plot of the buckling mode of the
optimized design from a direct execution of the version of
BIGBOSOR4 that is independent of the GENOPT system.
Do the following:

COMMAND                  MEANING OF COMMAND

cd /home/progs/work6    (go to a working space, "work6")
bigbosor4log    (activate the BIGBOSOR4 set of commands)
cp /home/progs/genoptcase/try4.BEHX1 try4.ALL   (get BIGBOSOR4 input file)
bigbosorall     (execute BIGBOSOR4: input file = try4.ALL)

Inspect the try4.OUT file. Search for the string, "EIGENVALUE(",
including the trailing left parenthesis.

Next, you want to plot the buckling mode. Do the following:


COMMAND                  MEANING OF COMMAND

bosorplot       (choose what to plot. Use "x" in response to
                 prompt if you want plot on your screen. Use "p"
                 in reponse to prompt if you want plot to be
                 in the file called "metafile.ps".)

gv metafile.ps  (get a plot on your screen via the "ghost view"
                 utility, if "ghost view" is available on your
                 workstation. metafile.ps, with some editing,
                 produces results essentially the same as
		 Fig. 11 in [1]. 

cleanup         (Clean up the files generated by BIGBOSOR4)

cd /home/progs/genoptcase       (return to genoptcase)

---------------- end of end user's activities -------------------

===================================================================== 
