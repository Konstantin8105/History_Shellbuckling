C=DECK      B4READ
C
C      THIS IS THE MAIN PROGRAM OF THE BOSOR4 PREPROCESSOR.
C
      SUBROUTINE B4READ
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
C     COMMON/BWORK/BBB(400000),BMODE(90000),TMODE(90000),SMODE(90000)
C END JUN 2009
C END FEB 2008
C END MAR 2007
C END OCT 2005
      COMMON/FLUTNK/GAMMAF,AXLONG,RBIG,ZBEGIN
      COMMON/NUMTNK/IFLSEG(295)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/STRHD/NSHEAD
      COMMON/COUNTR/NKOUNT
      COMMON/PAXTAX/ PAXIAL(4,50),TAXIAL(3,50)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/NLINS/NSTART,NFIN
      COMMON/DSPACE/IDS
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT
      COMMON/IIFIFE/IIIF
      COMMON/RGFCE/RHF(198)
      COMMON/PSTSS/IPSTS(295)
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/LRANGE/FSTART,FMAX,DF
      COMMON/DETER/DET,NEX
      COMMON/TESTIT/NTEST
      COMMON/ITERAT/IMODE
      COMMON/TOTPTS/M3
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/IDENT/IPRW(20)
      COMMON/HYDRO/PRAD,RV
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/INSTAB/INDIC
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/ERROR/ERR
      COMMON/NFAC/NFACT,NDIC
      COMMON/ITERS/ITER
      COMMON/ALFAT/ALPHAT
      COMMON/POSDEF/ IDIAG
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
C BEG AUG 1999
      COMMON/TWORHS/ITWO,IDMOD2(200)
      COMMON/AMPFC2/IMPHI(200)
      COMMON/IZDTR/IZZ
C END AUG 1999
      COMMON/SIG/NFLAGI
      COMMON/OUTP/ NPRT
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/SFLAG/ MONOQ
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/IDZREF/IZREF(295)
C BEG SEP 2005
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/IDSTFP/ISTFPR(295)
      COMMON/IDMSKN/INSKIN(2,295)
      COMMON/BUCIDX/IDBUCK(100)
C END SEP 2005
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/TEMTUR/TEMP,DTEMP
c Modified 1/14/90
      COMMON/SIGNALL/ISIG
c end 1/14/90 modification
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/XID/IDX
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB
C BEG MAR 2007
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
C END MAR 2007
      COMMON/NCONDS/NCOND
      COMMON/IHIGHX/ITOOHI
      COMMON/LSTEPS/ISTEP
C BEG JULY 1989
      COMMON/PRERT/PREROT,SIGNLL,IPREBK
C END JULY 1989
      COMMON/NOHARM/NHARM
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/VCTRSB/NVECRL(50)
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/IDHIGH/IDMAX
      COMMON/STRSEG/ISTRSS(295)
      COMMON/NLAMIN/LAMINA(295)
      COMMON/NVVIB/NVIB
C BEG APR 1992
      COMMON/JWATCH/JOLD
      COMMON/ILVARS/ILVAR(11,295),ITREF(295),NLVAR(295),ITIO(295)
C END APR 1992
C
C     IBM SUBROUTINE ERRSET IS CALLED TO SUPPRESS THE UNDERFLOW ERROR
C     MESSAGE NO.208.
C
C      CALL ERRSET(208,0,-1,0,0,0)
C
      CALL MAIN1
C
C     INITIALIZE CLOCK.
      CALL SR100T(1)
C
      IIIF=21
      NEDPLT=-1
C
10    CONTINUE
C     INITIALIZE DRUM
      NVIB = 0
      NFIRST = 0
      IDMAX = 0
C
C     INITIALIZATION OF VARIOUS PROGRAM QUANTITIES.
C
      CALL GASP(DUM1,DUM2,-1,DUM3)
C
      IFILE9 = 9
      IPLOT = 1
      IPREBK = 0
      IDZ = 0
C BEG JULY 1989
      SIGNLL = 0.
C END JULY 1989
      DIV = 1000.
      STEPMS = 0.0
      IPREB2 = 0
      ITOOHI = 0
      MNUMB = 0
      NKOUNT = 0
      IDS = 0
      IDX = 0
      IFLGG = 0
      ITRACK = 0
      KNT = 0
      INDSIG = 0
      IFIN = 0
      IFTOT = 0
      ILOCP = 0
      ILOCB = 0
      IIWP = 0
      IIWB = 0
      IFB = 0
C BEG APR 1992
      JOLD = 0
C END APR 1992
      DO 40 I=1,20
      IPRW(I) = 0
      NGBK(I) = 0
      NFK(I) = 0
      NGBKP(I) = 0
      NKFP(I) = 0
      DO 30 J=1,5
30    IDRW(I,J) = 0
40    CONTINUE
      DO 50 I=1,198
      RHF(I) = 0.
      RHFIX(I) = 0.
   50 CONTINUE
      DO 51 I = 1,50
      NVECRL(I) = 0
      IOYES(I) = 0
      IPV1(I)  = 0
      IPV2(I)  = 0
   51 CONTINUE
      DO 53 I = 1,100
C BEG SEP 2005
      IDBUCK(I) = 0
C END SEP 2005
   53 IMOAD(I) = 0
      DO 55 I = 1,500
      IDMODE(I) = 0
55    EIGENW(I) = 0.
C BEG AUG 1999
      ITWO = 0
      IZZ  = 0
      DO 56 I = 1,200
      IMPHI(I) = 0
   56 IDMOD2(I) = 0
C END AUG 1999
      DO 60 I=1,295
      ISHL(I) = 0
      IWAL(I) = 0
      ITHK(I) = 0
      IARC(I) = 0
      ILOAD(I) = 0
      IPMODE(I) = 0
      IPSMD(I) = 0
      IZREF(I) = 0
C BEG SEP 2005
      ICSKIN(I) = 0
      ISTFPR(I) = 0
      INSKIN(1,I) = 0
      INSKIN(2,I) = 0
C END SEP 2005
      IOSEG(I) = 0
      ISTRSS(I) = 0
      LAMINA(I) = 0
C BEG APR 1992
      ITREF(I) = 0
      NLVAR(I) = 0
      ITIO(I)  = 0
      DO 58 J = 1,11
   58 ILVAR(J,I) = 0
C END APR 1992
C BEG SEP 1997
      IFLSEG(I) = 0
C END SEP 1997
   60 CONTINUE
C
C     DATA READ IN FOR NEXT CASE
C     LINK 1 CALLED INTO CORE WITH READIT.
C
      ISWTCH = 1
C     CALL OVERLAY(5HBOSOR,1,0)
      CALL READIT
      IF (INDIC.LE.0) NVEC = 1
C
C BEG SEP 1999
      REWIND IFILE9
c open/close statments added 6/91
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL STOCM1(IFILE9)
      CALL STOCM2(IFILE9)
C     CLOSE(IFILE9)
c end 6/91 changes
C END SEP 1999
C
C     CALL GASP(DUM1,DUM2,-2,DUM3)
C BEG JULY 1989
c Comments added 6/91
c     CLOSE(IFILE)
c     CLOSE(IFILE2)
c     CLOSE(IFILE3)
c     CLOSE(IFILE4)
c     CLOSE(3)
c End 6/91
C END JULY 1989
      RETURN
      END
C
C
C
C=DECK      MESH  
      SUBROUTINE MESH(NMESH,DS,DSTOT,ISEG)
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN   
C     MESH POINT DISTRIBUTION IN ISEGTH SEGMENT IS DETERMINED.    
C     SPACING CAN VARY, OF COURSE.  
      COMMON/INTRVL/ INTVAL(295),IIOUT,NDIST,NCIRC,NTHETA     
      DIMENSION IHVALU(100),HVALU(100),FI(100),DS(100),DW(100)    
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*4 CHARAC
10    FORMAT(10I6)                                          
20    FORMAT(6E12.8)                                        
C     MEANINGS OF THESE INPUT VARIABLES GIVEN BELOW   
      IFACT = 0
      INTVAL(ISEG) = 0
   25 CONTINUE
      REWIND IFILE2
      IF (ISEG.EQ.1)
     1CALL DATUM(IFILE2,100,0,0,INT,REALL,CHARAC,IOUT,0,1)
      WRITE(IOUT,35) ISEG,ISEG,ISEG,ISEG,ISEG,ISEG,ISEG,ISEG
   35 FORMAT(6X,'H',9X,'$'/6X,'H',9X,'$ SEGMENT NUMBER',8I5)
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ NODAL POINT DISTRIBUTION FOLLOWS...')
      CALL DATUM(IFILE2,101,1,2,NMESH,REALL,CHARAC,IOUT,ISEG,1)
C
      IF (IFACT.LT.2) FACT = 1./20. 
      IF (IFACT.GE.2) FACT = 1./FLOAT(IFACT)    
      IF (INTVAL(ISEG).EQ.0) INTVAL(ISEG) = 1   
      IF (NMESH.GT.2.AND.NMESH.LE.98) GO TO 40  
      WRITE(IFILE4,30)
30    FORMAT(/,' NUMBER OF MESH POINTS IN A SEGMENT MUST BE GREATER',
     1/,' THAN 4 AND LESS THAN OR EQUAL TO 98')                         
      GO TO 25
40    CONTINUE    
C     
C     NMESH = NUMBER OF MESH POINTS IN CURRENT SEGMENT
C     NTYPEH = POINTER FOR TYPE OF MESH SPACING INPUT TO FOLLOW---
C     NTYPEH = 1 -- 'NORMALIZED' VALUES OF SPACING READ IN FOR A FEW    
C                   SCATTERED STATIONS AND SPACING EVERYWHERE     
C                   DETERMINED BY LINEAR INTERPOLATION BETWEEN CALLOUTS 
C     NTYPEH = 2- - MESH SPACING READ IN FOR ALL POINTS IN SEGMENT
C     NTYPEH = 3- - MESH SPACING CONSTANT IN CURRENT SEGMENT.     
C     
C     INTVAL(ISEG) SIGNIFIES PRINT AND PLOT OUTPUT FOR EVERY
C     INTVAL(ISEG)TH MESH POINT     
C     
      NMESH1 = NMESH - 1
      CALL DATUM(IFILE2,102,1,3,NTYPEH,REALL,CHARAC,IOUT,0,1)
      GO TO (50,90,100),NTYPEH
C     NHVALU = NO. OF MERIDIONAL STATIONS AT WHICH MESH SPACING HVALU   
C              IS TO BE SPECIFIED.  
C     IHVALU = MESH POINT TAG AT WHICH HVALU  IS TO BE SPECIFIED  
C     HVALU = MESH POINT SPACING (BETWEEN W-POINTS. AT CALLOUT IHVALU.  
C             SPACING WILL VARY LINEARLY BETWEEN STATIONS AT WHICH
C             IT IS CALLED OUT. IT IS EMPHASIZED THAT THIS SPACING
C             REFERS TO THE ARC LENGTH DISTANCE BETWEEN ADJACENT  
C             W-POINTS. 
   50 CONTINUE
      CALL DATUM(IFILE2,103,1,2,NHVALU,REALL,CHARAC,IOUT,0,1)
      DO 55 I = 1,NHVALU
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,104,1,2,IHVALU(I),REALL,CHARAC,IOUT,I,IPROMP)
   55 CONTINUE
      IF (IHVALU(1).EQ.1.AND.IHVALU(NHVALU).EQ.NMESH1) GO TO 70   
      WRITE(IFILE4,60)
60    FORMAT(/,' MESH SPACING CALLOUTS MUST INCLUDE VALUES AT ENDS',
     1' OF SEGMENT')
      REWIND IFILE2
      GO TO 50
70    CONTINUE    
      DO 75 I = 1,NHVALU
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,105,1,2,INT,HVALU(I),CHARAC,IOUT,I,IPROMP)
   75 CONTINUE
      DO 80 I=1,NMESH   
80    FI(I) = I   
      CALL FINDZ(NHVALU,IHVALU,HVALU,NMESH1,DW,FI)    
      GO TO 120   
   90 CONTINUE
      DO 95 I = 1,NMESH1
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,105,1,2,INT,DW(I),CHARAC,IOUT,I,IPROMP)
   95 CONTINUE
      GO TO 120   
100   DO 110 I=1,NMESH1 
110   DW(I) = 1.0 
120   DSTOT = 0.0 
      DO 130 I=1,NMESH1 
130   DSTOT = DSTOT + DW(I)   
      DO 140 I=3,NMESH1 
      I1 = I - 1  
140   DS(I) = DW(I1)    
      DS(1) = FACT*DW(1)
      DS(2) = (1.-FACT)*DW(1) 
      NMESHP = NMESH + 1
      DS(NMESHP) = FACT*DW(NMESH1)  
      DS(NMESH) = (1.-FACT)*DW(NMESH1)    
      DO 150 I=1,NMESHP 
150   DW(I) = DS(I)     
      NMESH = NMESHP + 1
      NMESH1 = NMESHP   
      DO 160 I=2,NMESH1 
      I1 = I - 1  
160   DS(I) = (DW(I1) + DW(I))/2.   
      DS(1) = DW(1)     
      DS(NMESH) = DW(NMESH1)  
C     DS(I) NOW CONTAINS THE ENERGY INTEGRATION WEIGHTS OR LENGTHS
C     OF THE FINITE-DIFFERENCE 'ELEMENTS'.
      RETURN
      END   
C
C
C
C=DECK      OUTAX
C     OVERLAY (2,2)
      SUBROUTINE OUTAX(I,I5,P ,THERM,S)
      DIMENSION  P(I5,6),THERM(I5,8),S(*)
      COMMON/OUTP/NPRT
      COMMON/INSTAB/INDIC
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT
      LOGICAL ANSL1
      CALL DATUM(IFILE3,610,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 110
      IF (INDIC.NE.3) GO TO 70
      DO 65 IL = 1,2
      IF (IL.EQ.1) WRITE (IFILE4,10)
      IF (IL.EQ.2) WRITE (IFILE4,15)
      WRITE(IFILE4,30)
10    FORMAT(/,' NONSYMMETRIC DISTRIBUTED MECHANICAL AND THERMAL',
     1' LOAD COMPONENTS FOLLOW. AXIAL DISTRIBUTIONS. LOAD SET A')
15    FORMAT(/,' NONSYMMETRIC DISTRIBUTED MECHANICAL AND THERMAL',
     1' LOAD COMPONENTS FOLLOW. AXIAL DISTRIBUTIONS. LOAD SET B')
      WRITE (IFILE4,20)
20    FORMAT('       STATION           PU           PV           PW   ',
     1'           TN1         TN2          TM1          TM2        ',/)
30    FORMAT(25X,' AXIAL DISTRIBUTION OF LOAD COMPONENTS FOR ALL',
     1' CIRCUMFERENTIAL HARMONICS')
      WRITE (IFILE4,40)I
40    FORMAT(/,40X,' LOAD COMPONENTS FOR SEGMENT NO. ',I3,/)
      DO 60 K=1,I5
      IF (IL.EQ.1) THEN
      WRITE (IFILE4,50)K,S(K),P(K,1),P(K,2),P(K,3),THERM(K,1),
     1 THERM(K,2),THERM(K,3),THERM(K,4)
      ELSE
      WRITE (IFILE4,50)K,S(K),P(K,4),P(K,5),P(K,6),THERM(K,5),
     1 THERM(K,6),THERM(K,7),THERM(K,8)
      ENDIF
50    FORMAT(I5,1P8E13.4)                              
60    CONTINUE
65    CONTINUE
      GO TO 110
70    CONTINUE
C     WRITE OUT SYMMETRIC MECHANICAL AND THERMAL LOADS
      DO 105 IL = 1,2
      IF (IL.EQ.1) WRITE (IFILE4,80)
80    FORMAT(/,15X,' SYMMETRIC DISTRIBUTED MECHANICAL AND THERMAL',
     1' LOAD COMPONENTS FOLLOW.  LOAD SET A')     
      IF (IL.EQ.2) WRITE(IFILE4,85)
85    FORMAT(/,15X,' SYMMETRIC DISTRIBUTED MECHANICAL AND THERMAL',
     1' LOAD COMPONENTS FOLLOW.  LOAD SET B')
      WRITE (IFILE4,90)
90    FORMAT('       STATION           PU           PV          PW  ',
     1'           TN1         TN2          TM1          TM2 ',/)
      WRITE (IFILE4,40)I
      DO 100 K=1,I5
      IF (IL.EQ.1) THEN
      WRITE (IFILE4,50)K,S(K),P(K,1),P(K,2),P(K,3),THERM(K,1),
     1 THERM(K,2),THERM(K,3),THERM(K,4)
      ELSE
      WRITE (IFILE4,50)K,S(K),P(K,4),P(K,5),P(K,6),THERM(K,5),
     1 THERM(K,6),THERM(K,7),THERM(K,8)
      ENDIF
100   CONTINUE
105   CONTINUE
110   CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTIN1
      SUBROUTINE OUTIN1(IPRE,INDIC,ISTRES,NCOND,NLAST,NPRT,P,NSEG,STEP,
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     PRINTS OUT SOME INPUT DATA.
     1NVEC,IBOUND)
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
      COMMON/NLINS/NSTART,NFIN
C BEG MAR 2007
C BEG JUN 2009
      COMMON/JUNCT/IFIX(598,6),IFX(598,6),ITYPE(598)
      COMMON/JUNCTB/IFIXB(598,6),IFXB(598,6),ITYPEB(598)
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/LRANGE/FSTART,FMAX,DF
      COMMON/HED/TITLE(18)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/ACCELR/GRAVTY,GLATRL,GAXIAL
      COMMON/RESTRT/IREST
10    FORMAT(/,' BEGINNING OF NEXT CASE',/)         
20    FORMAT(1X,12A4//)
      INDP = INDIC + 3
C
C     WRITE PARAGRAPH ON FIRST PAGE OF OUTPUT TELLING WHAT TYPE OF
C     ANALYSIS THIS CASE REPRESENTS.
C
      GO TO (30,40,50,60,70,80,90),INDP
30    WRITE (IFILE4,110)
      GO TO 100
40    WRITE (IFILE4,120)
      WRITE (IFILE4,130)
      GO TO 100
50    WRITE (IFILE4,140)
      GO TO 100
60    WRITE (IFILE4,150)
      GO TO 100
70    WRITE (IFILE4,160)
      GO TO 100
80    WRITE (IFILE4,170)
      GO TO 100
90    WRITE (IFILE4,180)
100   CONTINUE
C23456789012345678901234567890123456789012345678901234567890123456789012
110   FORMAT(/,' STABILITY ANALYSIS WITH PLOT OF STABILITY DETERMIN-',
     1/,' ANT. NONLINEAR PREBUCKLING EFFECTS ARE INCLUDED. INDIC IS',
     1/,' CHANGED TO -1 WHEN DET CHANGES SIGN OR WHEN IT IS PERCEIVED',
     1/,' THAT MULTIPLE ROOTS HAVE BEEN SKIPPED FROM ONE LOAD STEP TO',
     1/,' THE NEXT. CALCULATIONS TERMINATE WHEN THE LOAD EXCEEDS THE',
     1/,' MAXIMUM ALLOWABLE VALUE, OR WHEN THE CORRECTION FACTOR IS',
     1/,' LESS THAN ERR, OR WHEN THE PREBUCKLING SOLUTION FAILS TO',
     1/,' CONVERGE.',/)
120   FORMAT(/' STABILITY ANALYSIS -- NONLINEAR PREBUCKLING EFFECTS',
     1/,' INCLUDED. EIGENVALUE REPRESENTS CORRECTION FACTOR TO',
     2/,' THE LOAD. CALCULATIONS FOR GIVEN VALUE OF N TERMINATE',
     3/,' IF THE EIGENVALUE IS SMALLER THAN ERR. N IS CHANGED',
     4/,' IN INCREMENTS (OR DECREMENTS) OF INCR UNTIL N IS LESS',
     5/,' THAN NMIN, GREATER THAN NMAX, OR UNTIL A MINIMUM',
     6/,' BUCKLING LOAD HAS BEEN FOUND. CALCULATIONS ALSO TER-',
     7/,' MINATE IF MORE THAN 10 ESTIMATES OF THE CRITICAL')
130   FORMAT(' LOAD AT A GIVEN N ARE REQUIRED FOR CONVERGENCE OF',
     1/,' THE EIGENVALUE TO WITHIN THE ACCURACY SPECIFIED BY ',
     2/,' ERR, OR IF THE PREBUCKLING SOLUTION FAILS TO CON-',
     3/,' VERGE WITHIN THE ACCURACY SPECIFIED BY ERR.',/) 
C23456789012345678901234567890123456789012345678901234567890123456789012
140   FORMAT(/,' STRESS ANALYSIS INCLUDING NONLINEAR EFFECTS. THIS',
     1/,' ANALYSIS YIELDS THE AXISYMMETRIC PREBUCKLING STRESSES',
     2/,' AND DISPLACEMENTS FOR A GIVEN VALUE OR SEQUENCE OF',
     3/,' VALUES OF THE APPLIED LOAD OR LOADS.',/)
150   FORMAT(/,' STABILITY ANALYSIS WITH "LINEAR" BENDING PREBUCKLING',
     1/,' ANALYSIS.  ACTUALLY, THE PREBUCKLING ANALYSIS IS NONLINEAR,',
     1/,' BUT IF THE USER SUPPLIES LOADS THAT ARE VERY SMALL COMPARED',
     1/,' TO THE DESIGN LOAD, THE STRUCTURAL BEHAVIOR WILL CLOSELY',
     1/,' APPROXIMATE LINEAR BEHAVIOR.  IF YOU WANT LINEAR BEHAVIOR,',
     1/,' PLEASE USE SMALL LOADS.',/)
160   FORMAT(/,' VIBRATION ANALYSIS OF PRESTRESSED SHELLS. THE EIGEN-',
     1/,' VALUE REPRESENTS THE FREQUENCY IN CPS. FREQUENCIES',
     2/,' ARE OBTAINED FOR N0.LE.N.LE.NMAX.',/)
170   FORMAT(/,' LINEAR STATIC ANALYSIS FOR NON-SYMMETRIC LOADS',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
180   FORMAT(/,' BUCKLING OF A NONSYMMETRICALLY LOADED SHELL.',
     1/,' PREBUCKLING STATE CALCULATED FROM LINEAR THEORY ',
     2/,' FOR HARMONICS N0 THRU NMAX. PRESTRESS N10,N20 AND ',
     3/,' PREBUCKLING ROTATIONS BETA0 IN THE STABILITY EQUA-',
     4/,' TIONS ARE THOSE CORRESPONDING TO CIRCUMFERENTIAL',
     5/,' LOCATION THETAS, AND ARE ASSUMED AXISYMMETRIC IN THE',
     6/,' STABILITY PART OF THE PROGRAM. BUCKLING LOADS CAL-',
     7/,' CULATED FOR WAVES N0B THRU NMAXB IN INCREMENTS OF',
     8/,' INCRB FROM LINEAR THEORY.',/)
C
C     WRITE OUT SOME OF THE PRELIMINARY INPUT DATA.
C
      WRITE (IFILE4,190)INDIC,NPRT,NLAST,ISTRES,IPRE
190   FORMAT(/,' ANALYSIS TYPE = ',I3,', PRINT OPTION = ',I2,
     1', PLOT OPTION = ',I2,', STRESS OPTION = ',I2,/,
     2 ', PRESTRESS CALCULATION OPTION=',I2,/)
      WRITE (IFILE4,200)NSEG
200   FORMAT(' NUMBER OF SHELL SEGMENTS = ',I3,/)
      WRITE (IFILE4,210)NSTART,NFIN,INCR
210   FORMAT(/,' STRESS CALCULATED FOR CIRCUMFERENTIAL WAVES FROM ', I7,
     1' TO ',I7,' IN INCREMENTS OF ',I7,/)
      WRITE (IFILE4,220)N0B,NMINB,NMAXB,INCRB
C23456789012345678901234567890123456789012345678901234567890123456789012
220   FORMAT(' INITIAL BUCKLING OR VIBRATION WAVE NO.= ',I6,', MINIMUM',
     1' WAVE NO.= ',I6,', MAXIMUM WAVE NO.= ',I6,', INCREMENT= ',I6,/)
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       WRITE (IFILE4,230)NVEC
230    FORMAT(2X,I3,' EIGENVALUES SOUGHT FOR EACH CIRCUMFERENTIAL WAVE',
     1' NUMBER.',/)
      ELSE
       WRITE (IFILE4,231)NVEC
231    FORMAT(2X,I3,' EIGENVALUES SOUGHT FOR EACH AXIAL HALF WAVE',
     1' NUMBER.',/)
      ENDIF
C END FEB 2010
      IF (NCOND.EQ.0) GO TO 260
      WRITE (IFILE4,240)
240   FORMAT(/,45X,' CONSTRAINT CONDITION DATA FOLLOW',/)
      CALL WRCON(NCOND,IFIX,D1,D2)
C     IF (IBOUND.EQ.0) GO TO 260
      WRITE (IFILE4,250)
250   FORMAT(/,' CONSTRAINT CONDITIONS FOR STABILITY OR VIBRATION',
     1' PROBLEM FOLLOW',/)
      CALL WRCON(NCOND,IFIXB,D1,D2)
260   CONTINUE
      WRITE (IFILE4,270)P,STEP,TEMP,DTEMP
270   FORMAT(/,' PRESSURE MULTIPLIER P =',1PE12.4,', INCREMENT DP=',
     11PE12.4,/,' TEMPERATURE MULT.TEMP=',1PE12.4,', INCREMENT DTEMP=',
     21PE12.4,/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE (IFILE4,280)FSTART,FMAX,DF
280   FORMAT(' INITIAL LOAD, FSTART =',1PE12.4,', MAXIMUM LOAD, FMAX=',
     11PE12.4,/,' STEP SIZE, DF=',1PE12.4,/)
      WRITE(IFILE4,'(A,G12.3,A,G12.3)')' ANGULAR VELOCITY, OMEGA=',
     1 OMEGA,'   INCREMENT IN OMEGA, DOMEGA=',DOMEGA
C
      IF (OMEGDR.EQ.0.) GO TO 285
      WRITE(IFILE4,283) OMEGDR
  283 FORMAT(/,' HARMONIC FORCING AT AN ANGULAR FREQUENCY, OMEGDR=',
     1 1PE12.3,/)
      IF (GLATRL.EQ.0.0.AND.GAXIAL.EQ.0.0) GO TO 285
      WRITE(IFILE4,284) GRAVTY,GLATRL,GAXIAL
  284 FORMAT(' ACCELERATION OF GRAVITY, GRAVTY=',1PE12.3,/,
     1   ' LATERAL COMPONENT OF BASE EXCITATION, GLATRL=',1PE12.3,/,
     1   ' AXIAL COMPONENT OF BASE EXCITATION,   GAXIAL=',1PE12.3,/)
  285 CONTINUE
C23456789012345678901234567890123456789012345678901234567890123456789012
      P = P - STEP
      TEMP = TEMP - DTEMP
      OMEGA = OMEGA - DOMEGA
      IF (NSEG.LE.295) GO TO 300
      WRITE(IFILE4,290)
290   FORMAT(/,' NSEG TOO LARGE. MAXIMUM NUMBER OF SEGMENTS = 295.',/)
      CALL ERREX
C BEG MAR 2007
C BEG JUN 2009
300   IF (IMAXP.GT.400000) IMAXP = 400000
      IF (IMAXB.GT.400000) IMAXB = 400000
      IF (IMAXP.EQ.0) IMAXP=400000
      IF (IMAXB.EQ.0) IMAXB=400000
C
      IF (NCOND.LE.598) GO TO 320
      WRITE(IFILE4,310)
310   FORMAT(/,' NCOND TOO LARGE.',/,
     1' MAXIMUM NUMBER OF CONSTRAINT POINTS = 598',/)
C END JUN 2009
C END MAR 2007
      CALL ERREX
320   CONTINUE
      RETURN
      END
C
C
C
C=DECK      READIT
      SUBROUTINE READIT
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      COMMON/NLINS/NSTART,NFIN
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)   
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)    
      COMMON/NCONDS/NCOND     
      COMMON/TOTPTS/M3  
C BEG MAR 2007
C BEG JUN 2009
      COMMON/JUNCT/IFIX(598,6),IFX(598,6),ITYPE(598)
      COMMON/JUNCTB/IFIXB(598,6),IFXB(598,6),ITYPEB(598)
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
      COMMON/BLK/IBLK,NGBK(20),NKF(20)    
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/DSPACE/IDS 
      COMMON/KCHNG/NNWALL(295),CCH(295)     
      COMMON/RGFCE/RHF(198)    
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR    
      COMMON/INSTAB/INDIC     
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT    
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G   
      COMMON/HED/TITLE(18)    
      COMMON/EIGNO/NVEC,EGV(50),AXB 
      COMMON/OUTP/ NPRT 
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1             IY(198),IX(198),IXY(198),IP(198) 
      REAL IX,IY,IXY,IP
      COMMON/RING2/GAM(198),GJ(198), YC(198), XC(198),
     1             E1(198),E2(198),PHI(200)
      COMMON/RMASS/RM(198)     
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198) 
      COMMON/TEMGRD/NTGRAD    
      COMMON/LRANGE/FSTART,FMAX,DF  
      COMMON/ALLRNG/NTOT,IPRE 
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/SFLAG/ISTRES     
      COMMON/STRSEG/ISTRSS(295)
      COMMON/ERROR/ERR  
      COMMON/MAXSTP/STEPM,STEPMI,RHOM     
      COMMON/FORCES/V(198),HF(198),FM(198)   
      COMMON/SHEARF/SHEAR(198) 
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)    
      COMMON/DRGTEM/DTNR(198),DTMR(198),DTMRX(198) 
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)   
      COMMON/FICTP/ IFICT     
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/INTRVL/ INTVAL(295),IIOUT,NDIST,NCIRC,NTHETA     
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB 
      COMMON/NOHARM/NHARM     
c Renamed SIGNAL to SIGNAx, Feb 1996
      COMMON/PRERT/PREROT,SIGNAx,IPREBK   
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE    
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/IFRHX/IFB,RHFIX(198),
     1             KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSEG,LFIX
      COMMON/ALOFIT/INDSIG,II,ITOT,K,L,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP  
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(198),TT(600)   
      COMMON/STRATG/ISTRAT,IFACTR   
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/ACCELR/GRAVTY,GLATRL,GAXIAL
C BEG SEP 1997
      COMMON/FLUTNK/GAMMAF,AXLONG,RBIG,ZBEGIN
      COMMON/NUMTNK/IFLSEG(295)
      DIMENSION ISTANK(295)
C END SEP 1997
      COMMON/RESTRT/IREST
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
      COMMON/JRING/JJRING
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      COMMON/BWORK1/BBX(400000),Z(10000),S(10000),DS(10000),
     1 ZAX(10000),RGLOB(10000),ANGLE(10000),PHORIG(10000)
C END JUN 2009
C END FEB 2008
C END MAR 2007
      CHARACTER*4 ANSOUT,CHARAC
C BEG OCT 2004
C     CHARACTER*16 CASE,CASE2,CASE3
      CHARACTER*28 CASE
      CHARACTER*32 CASE2,CASE3
C END OCT 2004
      CHARACTER*72 HEADNG
      LOGICAL ANSL1
10    FORMAT(18A4)                                     
20    FORMAT(10I6)                                                
30    FORMAT(6I6,2E12.8)                                          
40    FORMAT(6E12.8)                                              
      DATA IPRE,NSTART,NFIN,INCR/0,0,0,0/
      DATA N0B,NMINB,NMAXB,INCRB,NVEC/0,0,0,0,1/
      DATA NDIST,NCIRC,NTHETA/0,0,2/
      DATA THETAM,THETAS,PREROT/0.,0.,0./
      DATA P,STEP,TEMP,DTEMP/0.,0.,0.,0./
      DATA FSTART,FMAX,DF/0.,0.,0./
      DATA JPLOT,ISTRAT,IFACTR/0,0,0/
      DATA ITHETA(1),THETA(1)/0,0./
C BEG MAR 2007
C BEG JUN 2009
C     CALL MOVER(0.,0,BBX,1,160000)
      CALL MOVER(0.,0,BBX,1,400000)
C END JUN 2009
C END MAR 2007
C BEG SEP 1999
C     IFILE = 26
C     IFILE2= 27
C     IFILE3 = 28
C     IFILE4 = 30
C END SEP 1999
C BEG UNIX
C     integer lastch
C     common/caseblock/case
C     logical exists
c
C#if hp700
C     call getarg(2, case)
C#else
C     call getarg(1, case)
C#endif
C END UNIX
C BEG VMS
C     IUNAME = 12
C BEG SEP 1999
C     REWIND IUNAME
C     OPEN(UNIT=12,STATUS='OLD')
C     CALL CASNAM(IUNAME,CASE)
C     CLOSE(IUNAME)
C END VMX
      WRITE(IFILE4,'(A)') ' CASE NAME =',CASE
C     I=INDEX(CASE,' ')
C     IF(I.NE.0) THEN
C        CASE3=CASE(:I-1)//'.ALL'
C     ELSE
C        CASE3=CASE//'.ALL'
C     ENDIF
C     WRITE(IFILE4,'(A)') ' INPUT FILE NAME =',CASE3
C
C BEG VMS
C FOLLOWING USED FOR VAX/VMS..
C     OPEN(UNIT=24,FILE=CASE3,STATUS='UNKNOWN')
C     OPEN(UNIT=26,FILE='BOSOR4:PROMPT.DAT',STATUS='OLD',READONLY)
C     OPEN(UNIT=27,FILE='BOSOR4:PROMPT2.DAT',STATUS='OLD',READONLY)
C     OPEN(UNIT=28,FILE='BOSOR4:PROMPT3.DAT',STATUS='OLD',READONLY)
C END SEP 1999
C END VAX/VMS OPEN STATEMENTS
C
C FOLLOWING USED FOR UNIX...
C     OPEN(UNIT=2,FILE='BOSOR4/PROMPT.DAT',STATUS='OLD')
C     OPEN(UNIT=4,FILE='BOSOR4/PROMPT2.DAT',STATUS='OLD')
C     OPEN(UNIT=7,FILE='BOSOR4/PROMPT3.DAT',STATUS='OLD')
C END UNIX OPEN STATEMENTS
C
C BEG AUG 1999 COMMENTED OUT
C     OPEN(UNIT=3,FILE='FOR003',STATUS='NEW')
C END AUG 1999
C
      IMAXP = 0
      IMAXB = 0
      NMIN = 0
      NMAX = 0
      N0 = 0
      INCR = 1
      IOUT  = 25
      INFILE = 24
      REWIND INFILE
      REWIND IFILE
      REWIND IOUT
      REWIND IFILE4
      REWIND IFILE9
      IREST = 0
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      IMAX = 400000 
C END JUN 2009
C END FEB 2008
C BEG MAR 2007
C BEG AUG 2010
      WRITE(IFILE4,'(A)')
     1' ********** AUGUST, 2010 VERSION OF BIGBOSOR4 ***********'
C END AUG 2010
      WRITE(IFILE4, 50)     
50    FORMAT(/,' START READING DATA FOR THIS CASE')
C     CALL SR100T (2)   
C
      CALL DATUM(IFILE,1,0,0,INT,REALL,CHARAC,IOUT,0,1)
C     CALL DATUM(IFILE,1,1,1,INT,REALL,TITLE,IOUT,0,1)
C
      WRITE(IFILE4,53)
   53 FORMAT(/,' Please provide a title (42 characters or less)...',/)
C     READ(INFILE,10) (TITLE(I),I=1,12)
      READ(INFILE,'(A)') HEADNG
      WRITE(IOUT,'(A)')  HEADNG
      WRITE(IFILE4,'(A)') HEADNG
C BEG APR 2009
C BEG MAY 2009
C     ILET1 = INDEX(HEADNG,'prism')
C     ILET2 = INDEX(HEADNG,'Prism')
C     ILET3 = INDEX(HEADNG,'PRISM')
      ILET1 = INDEX(HEADNG,'ixprism')
      ILET2 = INDEX(HEADNG,'ixPrism')
      ILET3 = INDEX(HEADNG,'ixPRISM')
C END MAY 2009
      IPRISM = 0
      IF (ILET1.NE.0.OR.ILET2.NE.0.OR.ILET3.NE.0) IPRISM = 1
      IF (IPRISM.EQ.1) THEN
        CALL DATUM(IFILE,12,0,0,INT,REALL,CHARAC,IOUT,0,1)
        CALL DATUM(IFILE,13,1,1,INT,AXIALL,CHARAC,IOUT,0,1)
        REWIND IFILE
      ENDIF
C END APR 2009
   11 FORMAT(1X,18A4)
C
      CALL DATUM(IFILE,2,1,2,INDIC,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,3,1,1,NPRT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,5,1,2,ISTRES,REALL,CHARAC,IOUT,0,1)
      IF (INDIC.NE.0.AND.INDIC.NE.3) ISTRES = 0
      IF (INDIC.EQ.4)CALL DATUM(IFILE,6,1,2,IPRE,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,10,1,1,NSEG,REALL,CHARAC,IOUT,0,1)
      DO 55 I = 1,NSEG
   55 ISTRSS(I) = ISTRES
      IF (INDIC.LT.3) GO TO 66
      IF (INDIC.EQ.4.AND.IPRE.EQ.0) GO TO 66
      CALL DATUM(IFILE,16,1,2,NSTART,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,17,1,2,NFIN  ,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,18,1,2,INCR  ,REALL,CHARAC,IOUT,0,1)
      NMIN = MIN0(NSTART,NFIN)
      NMAX = MAX0(NSTART,NFIN)
      N0 = NSTART 
      CALL DATUM(IFILE,29,1,2,INT,THETAM,CHARAC,IOUT,0,1)
      IF (THETAM.GT.181.) CALL ERREX
      IF (THETAM.LT.-0.5) CALL ERREX
      THETAM = THETAM*3.14159/180.
   66 CONTINUE
      CALL RFIRST1
C     START LOOP FOR INPUT DATA FOR ALL SEGMENTS
C     
      INDSIG = 0
      IF (INDIC.EQ.4.AND.IPRE.EQ.1) INDSIG = 1
      IF (INDIC.EQ.4.AND.IPRE.EQ.1) INDIC = 3
C     
      DO 170 ISEGNO=1,NSEG   
      JJRING = 0
      WRITE(IFILE4,165) ISEGNO
  165 FORMAT(/,' PLEASE PROVIDE DATA FOR SEGMENT NO.',I3,/)
      L = ISEGNO 
      KRINGS = KRING    
      REWIND IFILE3
C     MESH GENERATOR    
      CALL MESH(I5(ISEGNO),DS(ITOT),DSTOT,ISEGNO)   
C     CALL OVERLAY(5HBOSOR,1,2)     
      REWIND IFILE2
C BEG DEC 2005
      CALL GEOMTR(BBX,Z,S,DS,ZAX,RGLOB,ANGLE,PHORIG) 
C END DEC 2005
C     CALL OVERLAY(5HBOSOR,1,3)     
      REWIND IFILE2
      CALL RZLG(BBX,S,ZAX,DS)
C     CALL OVERLAY(5HBOSOR,1,4)     
      REWIND IFILE2
C BEG DEC 2005
      CALL WALLS(BBX,Z,S,DS,ZAX,PHORIG)  
C END DEC 2005
      REWIND IFILE3
      CALL OUTAX(ISEGNO,I5I,BBX(27*I5I+IPOS),BBX(IPOS),S(ITOT))
C     INPUT DATA READ IN NOW FOR ITH SEGMENT.   
      ITOT = ITOT + I5I 
      SEND = S(ITOT-1)  
      ITOTL = ITOTL + I5I     
170   CONTINUE    
C
      IF (INDSIG.EQ.1.AND.INDIC.EQ.3) INDIC = 4
C
      REWIND IFILE
      WRITE(IOUT,171)
  171 FORMAT(6X,'H',9X,'$',/,6X,'H',9X,'$ GLOBAL DATA BEGINS...')
C
      CALL DATUM(IFILE,4,1,2,NLAST,REALL,CHARAC,IOUT,0,1)
      DO 60 I=1,20
      LPLOT(I) = 0
60    KPLOT(I) = 0
      IF (NLAST.GT.-1) CALL BLOWUP(IFILE3,IOUT,JPLOT,KPLOT,LPLOT)
C
      IF (INDIC.EQ.0.OR.INDIC.EQ.3) GO TO 62
C BEG JAN 2010
      IF (IPRISM.EQ.0) THEN
         CALL DATUM(IFILE,19,1,1,N0B   ,REALL,CHARAC,IOUT,0,1)
         CALL DATUM(IFILE,20,1,1,NMINB ,REALL,CHARAC,IOUT,0,1)
         CALL DATUM(IFILE,21,1,1,NMAXB ,REALL,CHARAC,IOUT,0,1)
         IF (NMAXB.LT.NMINB) CALL ERREX
         CALL DATUM(IFILE,22,1,1,INCRB ,REALL,CHARAC,IOUT,0,1)
      ELSE
         CALL DATUM(IFILE,31,0,0,INT   ,REALL,CHARAC,IOUT,0,1)
         CALL DATUM(IFILE,32,1,1,N0B   ,REALL,CHARAC,IOUT,0,1)
         CALL DATUM(IFILE,34,1,1,NMINB ,REALL,CHARAC,IOUT,0,1)
         CALL DATUM(IFILE,36,1,1,NMAXB ,REALL,CHARAC,IOUT,0,1)
         IF (NMAXB.LT.NMINB) CALL ERREX
         CALL DATUM(IFILE,38,1,1,INCRB ,REALL,CHARAC,IOUT,0,1)
         REWIND IFILE
      ENDIF
C END JAN 2010
      CALL DATUM(IFILE,23,1,1,NVEC  ,REALL,CHARAC,IOUT,0,1)
      IF (NVEC.LE.0) CALL ERREX
      IF (NVEC.GT.100) CALL ERREX
   62 CONTINUE
      IF (INDIC.LT.3.OR.IPRE.EQ.0) GO TO 69
      CALL DATUM(IFILE,24,1,2,NDIST ,REALL,CHARAC,IOUT,0,1)
      THETA(1) = 0.
      IF (NDIST.EQ.0) GO TO 61
      DO 63 I = 1,NDIST 
      IPROMP = 1  
      IF (I.GT.1) IPROMP = 0  
      CALL DATUM(IFILE,25,1,1,INT   ,THETA(I),CHARAC,IOUT,I,IPROMP)     
      THETA(I) = THETA(I)*3.141593/180.
   63 CONTINUE    
   61 CONTINUE
      CALL DATUM(IFILE,26,1,2,NCIRC ,REALL,CHARAC,IOUT,0,1) 
      NTHETA = 2
      ITHETA(1) = 1001
      IF (NCIRC.EQ.0) GO TO 65
      DO 64 I = 1,NCIRC 
      IPROMP = 1  
      IF (I.GT.1) IPROMP = 0  
      CALL DATUM(IFILE,27,1,2,ITHETA(I),REALL,CHARAC,IOUT,I,IPROMP)     
   64 CONTINUE    
  644 CONTINUE
      CALL DATUM(IFILE,28,1,2,NTHETA,REALL,CHARAC,IOUT,0,1) 
      IF (NTHETA.LE.1) THEN
         WRITE(IFILE4,*)' NTHETA MUST BE GREATER THAN 1. TRY AGAIN'
         BACKSPACE(IOUT)
         REWIND IFILE
         GO TO 644
      ENDIF
   65 CONTINUE
      CALL DATUM(IFILE,30,1,2,INT,THETAS,CHARAC,IOUT,0,1)
      THETAS = THETAS*3.14159/180.  
   69 CONTINUE
C     
      NLTYPE = 0  
      LINTYP = 0  
      IF (INDIC.GT.2) GO TO 160
      CALL DATUM(IFILE,45,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,47,1,2,INT,P,CHARAC,IOUT,0,1)
      IF (INDIC.NE.2)CALL DATUM(IFILE,48,1,1,INT,STEP,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,49,1,2,INT,TEMP,CHARAC,IOUT,0,1)
      IF (INDIC.NE.2)CALL DATUM(IFILE,50,1,1,INT,DTEMP,CHARAC,IOUT,0,1)
      
      IF (INDIC.NE.0.AND.INDIC.NE.-2) GO TO 160 
      CALL DATUM(IFILE,51,1,2,NSTEPS,REALL,CHARAC,IOUT,0,1)
      IF (NSTEPS.LE.0) THEN
         WRITE(IFILE4,*)' BAD VALUE FOR  NSTEPS.  USE POSITIVE INTEGER.'
         CALL ERREX
      ENDIF
      FSTEPS = NSTEPS
      FMAX   = FSTEPS + .001
      DF     = 1.
      FSTART = 1.
160   CONTINUE    
C
      OMEGA = 0.
      DOMEGA = 0.
      IF (IPRE.EQ.0) GO TO 162
      CALL DATUM(IFILE,55,1,1,INT,OMEGA,CHARAC,IOUT,0,1)
      IF (INDIC.LT.3) GO TO 162
      REWIND IFILE3
      CALL DATUM(IFILE3,480,1,2,IOMGAB,REALL,CHARAC,IOUT,0,1)
      REWIND IFILE
  162 CONTINUE
      IF (INDIC.LT.2)
     1CALL DATUM(IFILE,56,1,1,INT,DOMEGA,CHARAC,IOUT,0,1)
C
      OMEGDR = 0.
      YLATRL = 0.
      YAXIAL = 0.
      GLATRL = 0.
      GAXIAL = 0.
      GRAVTY = 0.
C
      IF (INDIC.LT.3.OR.IPRE.EQ.0) GO TO 174
C
      REWIND IFILE3
      CALL DATUM(IFILE3,702,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 174
      REWIND IFILE
      CALL DATUM(IFILE,57,1,1,INT,OMEGDR,CHARAC,IOUT,0,1)
      REWIND IFILE3
      CALL DATUM(IFILE3,704,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 174
      CALL DATUM(IFILE3,706,1,1,INT,GRAVTY,CHARAC,IOUT,0,1)
      REWIND IFILE
      CALL DATUM(IFILE,58,1,1,INT,GLATRL,CHARAC,IOUT,0,1)
      YLATRL = GLATRL*GRAVTY/OMEGDR**2
      CALL DATUM(IFILE,59,1,1,INT,GAXIAL,CHARAC,IOUT,0,1)
      YAXIAL = GAXIAL*GRAVTY/OMEGDR**2
C BEG SEP 1997
      CALL DATUM(IFILE,134,1,2,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 174   
      CALL DATUM(IFILE,136,1,1,INT,GAMMAF,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,138,1,1,INT,AXLONG,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,140,1,1,INT,RBIG,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,142,1,1,INT,ZBEGIN,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,144,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,146,1,2,NSEGFL,REALL,CHARAC,IOUT,0,1)
      DO 1725 I = 1,NSEGFL
         CALL DATUM(IFILE,148,1,1,ISTANK(I),REALL,CHARAC,IOUT,I,1)
         INDX = ISTANK(I)
         IFLSEG(INDX) = 1
         CALL DATUM(IFILE,149,1,2,INT,REALL,ANSOUT,IOUT,0,1)
         IF (ANSL1('N',ANSOUT,INFILE)) IFLSEG(INDX) = -1
         REWIND IFILE
 1725 CONTINUE
  174 CONTINUE    
      REWIND IFILE
C END SEP 1997
C
C    PROVIDE CONSTRAINT CONDITIONS...
C
      CALL CONSTR
C
      WRITE(IOUT,173)
  173 FORMAT(6X,'H',9X,'$ "GLOBAL3" QUESTIONS (AT END OF CASE)...')
      REWIND IFILE3
      DO 175 I = 1,NSEG
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE3,710,1,1,INT,REALL,ANSOUT,IOUT,I,IPROMP)
      IF (ANSL1('Y',ANSOUT,INFILE)) IOSEG(I) = 1
  175 CONTINUE
      REWIND IFILE3
      IF (INDIC.NE.0) GO TO 176
      IOYES(1) = 1
  176 CONTINUE
      IF (INDIC.EQ.0.OR.INDIC.GE.3) GO TO 177
      IOYES(2) = 1
  177 CONTINUE
      CALL DATUM(IFILE3,740,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) IOYES(3) = 1
C
C     ALL INPUT DATA HAS BEEN READ IN.    
C     
C
C     CALL OVERLAY(5HBOSOR,1,1)     
      CALL RFIRST 
      I2 = ITOT - 1
      CALL GASP(DS,I2,1,IDS)
      CALL GASP(BBX,IEND,1,ISHL(INOTE))
      ISAVE(INOTE) = IEND
      CALL GASP(S,I2,1,IARC(1))
C     CALL OVERLAY(5HBOSOR,1,5)     
C BEG OCT 2005
      CALL RFIVE
C END OCT 2005
  180 CONTINUE    
      RETURN
      END   
C
C
C
C=DECK      BLOWUP
      SUBROUTINE BLOWUP(IFILE3,IOUT,JPLOT,KPLOT,LPLOT)
C
C     PURPOSE IS TO ALLOW USER TO PROVIDE LOCATIONS AND FACTORS FOR
C     EXPANDED PLOTS OF UNDEFORMED AND DEFORMED STRUCTURE.
C
      COMMON/PRMOUT/IFIL3X,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      DIMENSION LPLOT(*),KPLOT(*)
      LOGICAL ANSL1
      CHARACTER*4 ANSWER,CHARAC
C
      JPLOT = 0
      DO 10 I = 1,20
      LPLOT(I) = 0
      KPLOT(I) = 0
   10 CONTINUE
C
      REWIND IFILE3
      CALL DATUM(IFILE3,500,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE3,510,1,1,INT,REALL,ANSWER,IOUT,0,1)
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 100
   20 CONTINUE
      JPLOT = JPLOT + 1
      REWIND IFILE3
      IF (JPLOT.GT.1)
     1      CALL DATUM(IFILE3,520,1,1,INT,REALL,ANSWER,IOUT,0,1)
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 100
      CALL DATUM(IFILE3,530,1,2,ISEG,REALL,CHARAC,IOUT,0,1)
      KPLOT(JPLOT) = ISEG*1000 + 1
      CALL DATUM(IFILE3,540,1,2,LPLOT(JPLOT),REALL,CHARAC,IOUT,0,1)
      IF (LPLOT(JPLOT).LT.1) THEN
         WRITE(IFILE4,*)
     1 ' IMPROPER MAGNIFICATION FACTOR. USE INTEGER > 1 '
         CALL ERREX
      ENDIF
      GO TO 20
  100 CONTINUE
      IF (JPLOT.GT.0) JPLOT = JPLOT - 1
      RETURN
      END
C
C
C
C=DECK      CONSTR
      SUBROUTINE CONSTR 
C     
C    PURPOSE IS TO PROVIDE INPUT FOR BOUNDARY, POLE, AND JUNCTURE 
C    CONDITIONS.  
C COMMON BLOCK ADDED 17 AUG 85 FOR DYNAMIC REACTION..
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,MAS,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,MAS
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)    
      COMMON/NCONDS/NCOND     
C BEG MAR 2007
C BEG JUN 2009
      COMMON/JUNCT/IFIX(598,6),IFX(598,6),ITYPE(598)
      COMMON/JUNCTB/IFIXB(598,6),IFXB(598,6),ITYPEB(598)
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
      COMMON/INSTAB/INDIC     
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G   
C     
      LOGICAL ANSL1     
      CHARACTER*4 ANSCON,CHARAC
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)   
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      DIMENSION IMESH(198)     
C     
      IBOUND = 0  
      IRIGID = 0  
      NCOND  = 0  
      REWIND IFILE
      CALL DATUM (IFILE,60,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      WRITE(IOUT,32)
   32 FORMAT(6X,'H',9X,'$ CONSTRAINT CONDITIONS FOLLOW....')
      CALL DATUM (IFILE,61,1,1,NSEG,REALL,CHARAC,IOUT,0,1)
      IF (NSEG.LE.0) CALL ERREX
      IF (NSEG.GT.295) CALL ERREX
C     
    2 CONTINUE    
      DO 100 ISEG = 1,NSEG    
C     
      I5I = I5(ISEG)
      WRITE(IFILE4,*)
     1' CONSTRAINT CONDITIONS FOR SEGMENT NO. ISEG =',ISEG
      WRITE(IFILE4,*)
     1' Endpoint of this segment is at Nodal Point No.',I5I
      IF (ISEG.GT.1)
     1   WRITE(IFILE4,'(1X,A,A,I2)')' Endpoint of previous',
     1' segment is at Nodal Point No. ',I5(ISEG-1)
      WRITE(IOUT,35) ISEG,ISEG,ISEG,ISEG
   35 FORMAT(6X,'H',9X,'$',/,
     1 6X,'H',9X,'$ CONSTRAINT CONDITIONS FOR SEGMENT NO.',4I5)
      WRITE(IOUT,3)
    3 FORMAT(6X,'H',9X,'$ POLES INPUT FOLLOWS...')
      REWIND IFILE
      CALL DATUM(IFILE,62,1,2,NPOLES,REALL,CHARAC,IOUT,ISEG,1)    
      IF (NPOLES.LE.-1) CALL ERREX
      IF (NPOLES.GT.20) CALL ERREX
      IF (NPOLES.EQ.0) GO TO 20     
C     
C    CONSTRAINT CONDITIONS FOR A POLE (r=0)...  
C     
      DO 10 I = 1,NPOLES
      REWIND IFILE
      NCOND = NCOND + 1 
      CALL DATUM(IFILE,64,1,1,IMESH(I),REALL,CHARAC,IOUT,I,1)     
      IF (IMESH(I).LE.0) CALL ERREX
      IF (IMESH(I).GT.I5(ISEG)) THEN
        WRITE(IFILE4,*)
     1   ' POLE LOCATED AT HIGHER MESH STATION THAN NMESH'
        CALL ERREX
      ENDIF
      IFIX(NCOND,1) = 1000*ISEG + IMESH(I)
      IFIX(NCOND,2) = IFIX(NCOND,1) 
      DO 5 J = 3,6
    5 IFIX(NCOND,J) = 0 
      D1(NCOND) = 0.    
      D2(NCOND) = 0.    
      DO 7 J = 1,6
    7 IFIXB(NCOND,J) = IFIX(NCOND,J)
   10 CONTINUE    
   20 CONTINUE    
C     
C   CONSTRAINTS TO GROUND (OTHER THAN POLES) FOLLOW....     
C     
      WRITE(IOUT,4)
    4 FORMAT(6X,'H',9X,'$ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...')
      CALL DATUM(IFILE,66,1,2,NGRND,REALL,CHARAC,IOUT,0,1)  
      IF (NGRND.LE.-1) CALL ERREX
      IF (NGRND.GT.35) CALL ERREX
      IF (NGRND.EQ.0) GO TO 40
      DO 30 I = 1,NGRND 
      REWIND IFILE
      I1 = I - 1  
      NCOND = NCOND + 1 
   22 CONTINUE    
      CALL DATUM(IFILE,68,1,1,IMESH(I),REALL,CHARAC,IOUT,I,1)     
      IF (IMESH(I).LE.0) CALL ERREX
      IF (IMESH(I).GT.I5(ISEG)) THEN
        WRITE(IFILE4,*)
     1  ' FIXITY LOCATED AT HIGHER MESH STATION THAN NMESH'
        CALL ERREX
      ENDIF
      IF (I.EQ.1) GO TO 24    
      MESHDF = IMESH(I) - IMESH(I1) 
      IF (MESHDF.GE.3) GO TO 24     
      WRITE(IFILE4,'(A,A)')
     1' CONSTRAINTS TO GROUND MUST BE AT INTERVALS',    
     1' ALONG THE MERIDIAN OF AT LEAST 3 NODAL POINTS'
      REWIND IFILE
      GO TO 22    
   24 CONTINUE    
      IFIX(NCOND,1) = 1000*ISEG + IMESH(I)
      IFIX(NCOND,2) = IFIX(NCOND,1) 
      CALL DATUM(IFILE,70,1,2,IFIX(NCOND,3),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,71,1,1,IFIX(NCOND,4),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,72,1,1,IFIX(NCOND,5),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,73,1,1,IFIX(NCOND,6),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,74,1,2,INT,D1(NCOND),CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,75,1,1,INT,D2(NCOND),CHARAC,IOUT,0,1)
C     
      DO 25 J = 1,6     
   25 IFIXB(NCOND,J) = IFIX(NCOND,J)
C     
      CALL DATUM(IFILE,80,1,2,INT,REALL,ANSCON,IOUT,0,1)    
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 30   
C     
      CALL DATUM(IFILE,81,1,2,IFIXB(NCOND,3),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,82,1,1,IFIXB(NCOND,4),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,83,1,1,IFIXB(NCOND,5),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,84,1,1,IFIXB(NCOND,6),REALL,CHARAC,IOUT,0,1)     
C     
      IBOUND = 1  
   30 CONTINUE    
   40 CONTINUE    
C     
C    JUNCTURE CONDITIONS ARE NEXT...
C     
      WRITE(IFILE4,*)
     1 ' The current segment is Segment No. ISEG =', ISEG
C     
      WRITE(IOUT,6)
    6 FORMAT(6X,'H',9X,'$ JUNCTION CONDITION INPUT FOLLOWS...')
      CALL DATUM(IFILE,86,1,2,INT,REALL,ANSCON,IOUT,0,1)    
      IF (ANSL1('N',ANSCON,INFILE)) GO TO 80   
      CALL DATUM(IFILE,88,1,2,NJUNCT,REALL,CHARAC,IOUT,0,1) 
      IF (NJUNCT.LT.-1) CALL ERREX
      IF (NJUNCT.GT.35) CALL ERREX
      IF (NJUNCT.EQ.0) GO TO 80     
      DO 60 I = 1,NJUNCT
      REWIND IFILE
      I1 = I - 1  
      NCOND = NCOND + 1 
   42 CONTINUE    
      CALL DATUM(IFILE,90,1,1,IMESH(I),REALL,CHARAC,IOUT,I,1)     
      IF (IMESH(I).LE.0) CALL ERREX
      IF (IMESH(I).GT.I5(ISEG)) THEN
      WRITE(IFILE4,*)
     1 ' JUNCTION AT HIGHER NODE THAN NUMBER OF NODES IN SEG.'
      CALL ERREX
      ENDIF
      IF (I.EQ.1) GO TO 44    
      MESHDF = IMESH(I) - IMESH(I1) 
      IF (MESHDF.GE.3) GO TO 44     
C BEG JULY 1989
      IF (IMESH(I).EQ.1) GO TO 44
C END JULY 1989
      WRITE(IFILE4,'(A,A)')
     1' JUNCTURES TO EARLIER SEGMENTS MUST BE SPACED',  
     1' AT INTERVALS OF AT LEAST 3 NODAL POINTS.'     
      REWIND IFILE
      GO TO 42    
   44 CONTINUE    
      CALL DATUM(IFILE,92,1,1,JSEG,REALL,CHARAC,IOUT,0,1)   
      IF (JSEG.LE.0) CALL ERREX
      IF (JSEG.GT.295) CALL ERREX
      CALL DATUM(IFILE,94,1,1,JNODE,REALL,CHARAC,IOUT,0,1)  
      IF (JNODE.LE.0) CALL ERREX
      IF (JNODE.GT.I5(JSEG)) THEN
       WRITE(IFILE4,*)
     1' JNODE IS AT HIGHER NODAL STATION THAN NODES IN SEG.'
       CALL ERREX
      ENDIF
      IFIX(NCOND,1) = 1000*JSEG + JNODE   
      IFIX(NCOND,2) = 1000*ISEG + IMESH(I)
      CALL DATUM(IFILE,96,1,2,IFIX(NCOND,3),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,98,1,1,IFIX(NCOND,4),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,100,1,1,IFIX(NCOND,5),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,102,1,1,IFIX(NCOND,6),REALL,CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,104,1,2,INT,D1(NCOND),CHARAC,IOUT,0,1)     
      CALL DATUM(IFILE,106,1,1,INT,D2(NCOND),CHARAC,IOUT,0,1)     
C     
      DO 50 J = 1,6     
   50 IFIXB(NCOND,J) = IFIX(NCOND,J)
C     
      CALL DATUM(IFILE,108,1,2,INT,REALL,ANSCON,IOUT,0,1)   
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 60   
      CALL DATUM(IFILE,110,1,2,IFIXB(NCOND,3),REALL,CHARAC,IOUT,0,1)    
      CALL DATUM(IFILE,111,1,1,IFIXB(NCOND,4),REALL,CHARAC,IOUT,0,1)    
      CALL DATUM(IFILE,112,1,1,IFIXB(NCOND,5),REALL,CHARAC,IOUT,0,1)    
      CALL DATUM(IFILE,113,1,1,IFIXB(NCOND,6),REALL,CHARAC,IOUT,0,1)    
C     
      IBOUND = 1  
   60 CONTINUE    
   80 CONTINUE    
C     
C BEG JUN 2009
      WRITE(IFILE4,'(/,A,2I10)')
     1' In ISEG loop: Shell segment, ISEG, Constraint sites,NCOND,=',
     1 ISEG,NCOND
      IF (NCOND.GT.598) THEN
         WRITE(IFILE4,'(/,A,/,A,A,I6,/,A)')
     1 ' *************** RUN ABORT ***************************',
     1 ' Number of constraint sites, NCOND, exceeds max.of 598',
     1 ' NCOND=',NCOND,
     1 ' *****************************************************'
         CALL ERREX
      ENDIF
C END JUN 2009
  100 CONTINUE
C
C    RIGID BODY MOTION STUFF FOLLOWS...   
C     
      WRITE(IOUT,8)
    8 FORMAT(6X,'H',9X,'$ RIGID BODY CONSTRAINT INPUT FOLLOWS...')
      REWIND IFILE
      CALL DATUM(IFILE,115,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,120,1,2,INT,REALL,ANSCON,IOUT,0,1)   
      IF (ANSL1('N',ANSCON,INFILE)) GO TO 200  
      CALL DATUM(IFILE,121,1,2,INT,REALL,ANSCON,IOUT,0,1)
      IF (ANSL1('N',ANSCON,INFILE)) GO TO 190
      IRIGID = 1  
  110 CONTINUE    
      CALL DATUM(IFILE,122,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,123,1,1,ISEG,REALL,CHARAC,IOUT,0,1)  
      IF (ISEG.LE.0) CALL ERREX
      IF (ISEG.GT.295) CALL ERREX
      CALL DATUM(IFILE,124,1,1,INODE,REALL,CHARAC,IOUT,0,1) 
      IF (INODE.LE.0) CALL ERREX
      IF (INODE.GT.I5(ISEG)) THEN
      WRITE(IFILE4,*)
     1' INODE IS GREATER THAN NUMBER OF NODES IN SEGMENT.'
      CALL ERREX
      ENDIF
      IFIXR = 1000*ISEG + INODE     
      IF (NCOND.EQ.0) GO TO 122     
      DO 120 I = 1,NCOND
      II = I
      IF (IFIXR.NE.IFIX(I,1)) GO TO 120   
      IF(IFIX(I,2).EQ.IFIX(I,1)) GO TO 140
      WRITE(IFILE4,*)' THIS LOCATION IS ILLEGAL.  CHOOSE ANOTHER.'     
      CALL ERREX
  120 CONTINUE    
  122 CONTINUE    
      NCOND = NCOND + 1 
      IFIX(NCOND,1) = IFIXR   
      IFIX(NCOND,2) = IFIXR   
      DO 125 I = 3,6    
  125 IFIX(NCOND,I) = 0 
      D1(NCOND) = 0.    
      D2(NCOND) = 0.    
      II = NCOND  
  140 CONTINUE    
C     
      ISTOP0(1) = IFIX(II,1)  
      ISTOP0(2) = IFIX(II,2)  
      ISTOP1(1) = IFIX(II,1)  
      ISTOP1(2) = IFIX(II,2)  
      CALL DATUM(IFILE,125,0,0,INT,REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,126,1,2,ISTOP0(3),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,127,1,1,ISTOP0(4),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,128,1,1,ISTOP0(5),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,129,1,1,ISTOP0(6),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,130,1,1,ISTOP1(3),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,131,1,1,ISTOP1(4),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,132,1,1,ISTOP1(5),REALL,CHARAC,IOUT,0,1)   
      CALL DATUM(IFILE,133,1,1,ISTOP1(6),REALL,CHARAC,IOUT,0,1)   
  190 CONTINUE
C DYNAMIC REACTION STUFF ADDED AUG 17, 1985...
      IDYN(1) = 0
      IDYN(2) = 0
      IF (INDIC.LT.3) GO TO 200
      CALL DATUM(IFILE,150,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE,155,1,2,INT,REALL,ANSCON,IOUT,0,1)
      IF (ANSL1('Y',ANSCON,INFILE)) IDYN(1) = 1
      CALL DATUM(IFILE,160,1,2,INT,REALL,ANSCON,IOUT,0,1)
      IF (ANSL1('Y',ANSCON,INFILE)) IDYN(2) = 1
C END 17 AUG 85 MODS...
C     
  200 CONTINUE    
      RETURN
      END   
C
C
C
C=DECK      RFIRST
      SUBROUTINE RFIRST
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/FICTP/IFICT
      COMMON/ERROR/ERR
      COMMON/INSTAB/INDIC
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/SFLAG/ISTRES
      COMMON/STRSEG/ISTRSS(295)
      COMMON/NOHARM/NHARM
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/BUCKN/N0B,NMINB,NMAXB,INCRB
      COMMON/LRANGE/FSTART,FMAX,DF
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/NCONDS/NCOND
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT
      COMMON/OUTP/NPRT
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      INDSIG = 0
#if (_genopt_)
C BEG OCT 2010
C     ERR = 0.001
      IF (ERR.NE.0.01) ERR = 0.001
C END OCT 2010
#else
      ERR = 0.001
#endif
C     IF (INDIC.EQ.0.OR.INDIC.EQ.3.OR.INDIC.EQ.4) IBOUND = 0
      IF (INDIC.NE.1.AND.INDIC.NE.2.AND.INDIC.NE.4) NVEC = 1
      IF (INCR.EQ.0) INCR = 1
      IF (INCRB.EQ.0) INCRB = 1
      IF (INDIC.EQ.-1) DF = 1.0
      IF (INDIC.GT.1.AND.TEMP.EQ.0.0) TEMP = 1.
      RHOM = FMAX
      RHO = FSTART - DF
      STEPM = DF
      STEPMI = DF
      IF (INDIC.EQ.4.AND.IPRE.EQ.1) INDSIG = 1
C     PRINT OUT SOME OF ABOVE INPUT DATA
      CALL OUTIN1(IPRE,INDIC,ISTRES,NCOND,NLAST,NPRT,P,NSEG,STEP,NVEC,
     1IBOUND)
      IF (INDSIG.EQ.1) INDIC = 3
      NHARM = IABS(NMAX-NMIN)/IABS(INCR) + 1
      RETURN
      END
C
C
C
C=DECK      RFIRST1
      SUBROUTINE RFIRST1
C
C    PURPOSE IS TO INITIALIZE CERTAIN VARIABLES...
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/FICTP/IFICT
      COMMON/NOHARM/NHARM
      COMMON/INSTAB/INDIC
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/WAVES/N0,NNN,NMIN,NMAX,INCR
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/ALOFIT/INDSIG,II,ITOT,M,N,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
C  FOLLOWING STATEMENTS ADDED 17 AUG. 1985, FOR DYNAMIC REACTION...
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,MM,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,MM
       COMMON/IRNGZ/ KRNG
      DO 5 I = 1,2
       FX(I) = 0.
       FY(I) = 0.
       FZ(I) = 0.
       MX(I) = 0.
       MY(I) = 0.
       MZ(I) = 0.
       IDYN(I)=0
    5 CONTINUE
       ICM = 0.
       IZ = 0.
       MM = 0.
       ZCM = 0.
C  END OF STATEMENTS ADDED ON 17 AUG. 1985 FOR DYNAMIC REACTION.
      IFICT = 1
      DO 10 I=1,295
      NSTATN(I) = 0
      DO 10 J=1,20
10    IRING(I,J) = 0
      SEND = 0.0
      KRING = 0
      ITOT = 1
      NHARM = IABS(NMAX-NMIN)/IABS(INCR) + 1
      IEND = 0
      ITOTL = 0
      INOTE = 1
      IF (INDIC.NE.4) IPRE = 1
      RETURN
      END
C
C
C
C=DECK      WRCON
      SUBROUTINE WRCON(NCOND,IFIX,D1,D2)
C     CALLED FROM OUTIN1, WHOSE TRACE IS READIT,MAIN
C     PROVIDES FORMAT TO WRITE OUT CONSTRAINT CONDITIONS
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG JUN 2009
      DIMENSION IFIX(598,6),D1(598),D2(598)
C END JUN 2009
      WRITE (IFILE4,10)
C23456789012345678901234567890123456789012345678901234567890123456789012
10    FORMAT(' SEG. POINT CONNECTED TO SEG. POINT     USTAR VSTAR ',
     1'WSTAR BETA     RADIAL DISC. D1(I)   AXIAL DISC. D2(I)',/)
      DO 30 I=1,NCOND
      J1 = IFIX(I,1)/1000
      J2 = IFIX(I,2)/1000
      J3 = IFIX(I,1) -J1*1000
      J4 = IFIX(I,2) -J2*1000
      WRITE (IFILE4,20)J1,J3,J2,J4,IFIX(I,3),IFIX(I,4),IFIX(I,5),
     1 IFIX(I,6),D1(I),D2(I)
20    FORMAT( I4,I6, I18,I6,I9,I6,I6,I6,1P2E20.8)
30    CONTINUE
      RETURN
      END
C
C
C
C=DECK      B4MAIN
C
C     THIS IS THE MAIN PROGRAM OF THE BOSOR4 MAIN PROCESSOR (WITH OUTPT)
C
      SUBROUTINE B4MAIN
C BEG NOV 2010
      COMMON/WRDCLX/WRDCOL
      CHARACTER*45 WRDCOL
C END NOV 2010
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
C BEG MAR 2008
      COMMON/IDETCTX/IDETCT
      COMMON/RING11/DXGLOB(10,30),DYGLOB(10,30),DZGLOB(10,30)
C END MAR 2008
C BEG OCT 2005
      COMMON/IBIGX1/IBUCMN(295),IBUCMS(295),IBUCMR(295)
      COMMON/IBIGX2/ISTFMS(295),ISTFMR(295),ISKNMX(295)
      COMMON/BUCCON/BUCMIN(295),BUCMNS(295),BUCMNR(295)
      COMMON/STRCON/STFMXS(295),STFMXR(295),SKNMAX(295)
      COMMON/LOCALX/BUCSKN,BUCSTF,STRSTF
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
C BEG SEP 2005
      COMMON/NUMSTX/NUMSTF(295)
      DIMENSION NSAVE(295)
C END SEP 2005
C BEG AUG 1999
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/TOTMAX/TOTMAS
      COMMON/ENDUVX/ENDUV,STRMAX,ARCLEN
      COMMON/EIGB4M/EIGCOM(200),EIGNEG(200),EIGCRN
C BEG MAR 2012
      COMMON/IFAILX/IFAILD(200),IFAIL
C END MAR 2012
C BEG FEB 2014
      COMMON/ISKIPX/ISKIPR
C END FEB 2014
C BEG MAY 2014
      COMMON/NSTEPX/NSTEPY,IEBAND
C END MAY 2014
C BEG APR 2014
      COMMON/NSHFTX/NSHIFT
      DIMENSION TST(600)
      DIMENSION VOLD(198),HFOLD(198),FMOLD(198)
C END APR 2014
C BEG OCT 2011
      COMMON/EIGB42/EIGCM2(200)
C END OCT 2011
      COMMON/WVEB4M/NWVCOM(200),NWVNEG(200),IWAVEB,NWVCRN
      COMMON/EIGBUK/EIGCRT
      COMMON/NWVBUK/NWVCRT
      COMMON/LAMSTR/STRRAT(99)
      COMMON/WRDSTR/STRWRD(99)
      CHARACTER*80 STRWRD
C END AUG 1999
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      COMMON/BWORK/BBB(400000),BMODE(90000),TMODE(90000),SMODE(90000)
C END FEB 2008
      DIMENSION BMAT(400000),CMAT(400000),DI(30000),DIAG(30000)
C END JUN 2009
C END MAR 2007
      DOUBLE PRECISION BMAT,CMAT,DI
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE    
      COMMON/STRHD/NSHEAD     
      COMMON/COUNTR/NKOUNT    
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
      COMMON/TWORHS/ITWO,IDMOD2(200)
      COMMON/NLINS/NSTART,NFIN
      COMMON/DSPACE/IDS 
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT    
      COMMON/IIFIFE/IIIF
      COMMON/RGFCE/RHF(198)    
      COMMON/PSTSS/IPSTS(295)  
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)     
      COMMON/LRANGE/FSTART,FMAX,DF  
      COMMON/DETER/DET,NEX    
      COMMON/TESTIT/NTEST     
      COMMON/ITERAT/IMODE     
      COMMON/TOTPTS/M3  
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR    
      COMMON/FORCES/V(198),HF(198),FM(198)   
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G   
      COMMON/IDENT/IPRW(20)   
      COMMON/HYDRO/PRAD,RV    
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)    
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198) 
      COMMON/INSTAB/INDIC     
      COMMON/MAXSTP/STEPM,STEPMI,RHOM     
      COMMON/ERROR/ERR  
      COMMON/NFAC/NFACT,NDIC  
      COMMON/ITERS/ITER 
      COMMON/ALFAT/ALPHAT     
      COMMON/POSDEF/ IDIAG    
      COMMON/EIGNO/NVEC,EGV(50),AXB 
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
      COMMON/SIG/NFLAGI 
      COMMON/OUTP/ NPRT 
      COMMON/BLK/IBLK,NGBK(20),NFK(20)    
      COMMON/BCK/IDRW(20,5)   
      COMMON/SFLAG/ MONOQ     
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)   
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/IDZREF/IZREF(295) 
      COMMON/ALLRNG/NTOT,IPRE 
      COMMON/TEMTUR/TEMP,DTEMP
c Modified 1/14/90
      COMMON/SIGNALL/ISIG
c end 1/14/90 modification
      COMMON/ORTA/IFLGG,KTM,KROOTS  
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA     
      COMMON/XID/IDX    
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB 
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/NCONDS/NCOND     
      COMMON/IHIGHX/ITOOHI     
      COMMON/LSTEPS/ISTEP
C BEG JULY 1989
      COMMON/PRERT/PREROT,SIGNLL,IPREBK   
C END JULY 1989
      COMMON/NOHARM/NHARM     
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX   
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      COMMON/VCTRSB/NVECRL(50)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RESTRT/IREST
      COMMON/IDHIGH/IDMAX
      COMMON/RHARM/RVAR(198),RFIX(198)
      COMMON/COLAPS/IDONE
      COMMON/NVVIB/NVIB
C     
C     IBM SUBROUTINE ERRSET IS CALLED TO SUPPRESS THE UNDERFLOW ERROR   
C     MESSAGE NO.208.   
C     
C      CALL ERRSET(208,0,-1,0,0,0)  
C     
C BEG FEB 2014
      ISKIPR = 0
C END FEB 2014
C BEG MAY 2014
      IEBAND = 0
C END MAY 2014
C BEG MAR 2008
      IDETCT = 0
      CALL MOVER(0.,0,DXGLOB,1,900)
C END MAR 2008
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      CALL MOVER(0.,0,BBB,1,670000)
C END JUN 2009
C END FEB 2008
C END MAR 2007
      CALL MAIN1  
      DIV = 1000.
C
      REWIND IFILE9
c open/close statments added 6/91
C BEG SEP 1999
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL GETCM1(IFILE9)
      CALL GETCM2(IFILE9)
C     CLOSE(IFILE9)
C END SEP 1999
c end 6/91 changes
C
#if (_genopt_)
C BEG FEB 2010
C     IF (IREST.NE.0) CALL GASP(DUM1,DUM2,-1,DUM3)
C END FEB 2010
#else
      IF (IREST.NE.0) CALL GASP(DUM1,DUM2,-1,DUM3)
#endif
C BEG OCT 2010
      WRITE(IFILE4,'(A)')
     1' ********** October, 2010 VERSION OF BIGBOSOR4 ***********'
C END OCT 2010
C     
C     INITIALIZE CLOCK. 
C     CALL SR100T(1)    
C     
      IIIF=21     
      NEDPLT=-1   
      NVECTL = 0
C BEG OCT 2005
      BUCSKN = 0.
      BUCSTF = 0.
      STRSTF = 0.
      ENDUV  = 0.
      STRMAX = 0.
      DO 5 I = 1,NSEG
         BUCMIN(I) = 0.
         BUCMNS(I) = 0.
         BUCMNR(I) = 0.
         STFMXS(I) = 0.
         STFMXR(I) = 0.
         SKNMAX(I) = 0.
         IBUCMN(I) = 0
         IBUCMS(I) = 0
         IBUCMR(I) = 0
         ISTFMS(I) = 0
         ISTFMR(I) = 0
         ISKNMX(I) = 0
    5 CONTINUE
C END OCT 2005
C     
10    CONTINUE    
C
      NVECS = NVEC
70    CONTINUE    
      ITWO = 1
      IF (IREST.EQ.2) GO TO 78
      IF (INDIC.LT.3) GO TO 78
      DO 75 I = 1,NSEG
      IF (ILPOS(4,I).NE.0) ITWO = 2
      IF (ILPOS(5,I).NE.0) ITWO = 2
      IF (ILPOS(6,I).NE.0) ITWO = 2
      IF (ILPOS(10,I).NE.0) ITWO = 2
      IF (ILPOS(11,I).NE.0) ITWO = 2
      IF (ILPOS(12,I).NE.0) ITWO = 2
   75 CONTINUE
   78 CONTINUE
C
      K = INDIC + 3     
C     
C     SWITCHING TO VARIOUS BRANCHES DEPENDING ON TYPE OF ANALYSIS TO    
C     BE PERFORMED.     
C
      GO TO (80,120,280,290,330,340,380),K
80    CONTINUE    
C     DETERMINANT PLOT. 
      DET = 1.0   
      NEX = 0     
      N = N0B     
      IF (DF.EQ.0.) CALL ERREX 
      NSTEPS = ABS((FMAX-FSTART)/DF) + 1.0
C BEG MAY 2014
   85 CONTINUE
      IF (IEBAND.EQ.1) THEN
        NSTEPS = NSTEPY
        FSTEPS = NSTEPS
        FMAX   = FSTEPS + .001
        DF     = 1.
        FSTART = 1.
        RHOM = FMAX
        RHO = FSTART - DF
        STEPM = DF
        STEPMI = DF
        NSTEPS = ABS((FMAX-FSTART)/DF) + 1.0
        DET = 1.0
        NEX = 0
        N = N0B
        K = 1
        IEBAND = 0
C23456789012345678901234567890123456789012345678901234567890123456789012
        WRITE(IFILE4,'(A,/,8I5)')
     1' K,INDIC,NSTEPS,N,N0B,NMINB,NMAXB,INCRB=',
     1  K,INDIC,NSTEPS,N,N0B,NMINB,NMAXB,INCRB
        WRITE(IFILE4,'(A,I5,1P2E12.4)')' IEBAND,P,STEP=',IEBAND,P,STEP
C       CALL ERREX
      ENDIF
C END MAY 2014
      DO 110 I=1,NSTEPS 
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C        WRITE(IFILE4,'(A,4I5,1P2E12.4)')
C    1 ' After DO 110...: K,INDIC,IEBAND,I,P,STEP=',
C    1                    K,INDIC,IEBAND,I,P,STEP
C        IF (I.EQ.50) CALL ERREX
c     ENDIF
C END MAY 2014
C     NONLINEAR PREBUCKLING ANALYSIS
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C        WRITE(IFILE4,'(A,3I5,1P2E12.4)')
C    1 ' before 1st CALL PRE: IDONE,IEBAND,I,P,STEP=',
C    1                        IDONE,IEBAND,I,P,STEP
C        IF (I.EQ.1) CALL ERREX
C     ENDIF
C END MAY 2014
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C        WRITE(IFILE4,'(A,4I5,1P2E12.4)')
C    1 ' after 1st CALL PRE: INDIC,IDONE,IEBAND,I,P,STEP=',
C    1                       INDIC,IDONE,IEBAND,I,P,STEP
C        IF (I.EQ.1) CALL ERREX
C     ENDIF
C END MAY 2014
      IF (IDONE.GT.0) GO TO 400
      REWIND IFILE9
c open/close statments added 6/91
C BEG SEP 1999
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL STOCM1(IFILE9)
      CALL STOCM2(IFILE9)
C     CLOSE(IFILE9)
C END SEP 1999
c end 6/91 changes
C     STABILITY EQUATIONS FORMULATED
C     CALL OVERLAY(5HBOSOR,3,0)     
C BEG SEP 2005
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,0) 
C END SEP 2005
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C        WRITE(IFILE4,'(A,3I5,1P2E12.4)')
C    1 ' After 1st CALL ARRAYS: INDIC,IEBAND,I,P,STEP=',
C    1                          INDIC,IEBAND,I,P,STEP
C        IF (I.EQ.1) CALL ERREX
C     ENDIF
C END MAY 2014
      DS = DET    
      NEXS = NEX  
C     STABILITY DETERMINANT CALCULATED    
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
C BEG APR 2014
      WRITE(IFILE4,'(/,A,3I10)')
     1 ' IDETCT,KTM,KROOTS=',IDETCT,KTM,KROOTS
C END APR 2014
C     OUTPUT PRINTED    
      ISWTCH = 2  
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
      IF (KTM.LE.(KROOTS+1)) GO TO 90     
C
C     CHANGE LOAD STEPS DEPENDING ON PREVIOUS CALCULATIONS  
      CALL CHANGL(-1.0,NTOT)  
      GO TO 100   
90    IF (I.EQ.1) GO TO 110   
      IF ((DS*DET).GT.0.) GO TO 110 
      NDEXP = NEX - NEXS
      RATIO = ABS(DET/DS)*10.**NDEXP
      RAT = RATIO/(1.+RATIO)  
      CALL CHANGL(-RAT,NTOT)  
100   CONTINUE    
C BEG MAR 2008
      IDETCT = 1
C END MAR 2008
C BEG APR 2014
      WRITE(IFILE4,'(/,A,3I10)')
     1 ' IDETCT,KTM,KROOTS=',IDETCT,KTM,KROOTS
C END APR 2014
      WRITE(IFILE4,105) N,NMINB,NMAXB,INCRB
  105 FORMAT(/,' BIFURCATION BUCKLING EIGENVALUE(S) DETECTED BETWEEN',
     1/,' SECOND-TO-LAST AND LAST LOAD STEPS FOR N =',I7,' CIRCUMFER-',
     1/,' ENTIAL WAVES.  ANALYSIS TYPE (INDIC) IS NOW BEING CHANGED',
     1/,' FROM INDIC = -2  TO  INDIC = -1  .',/,
     1/,' A SEARCH FOR THE MINIMUM BIFURCATION BUCKLING LOAD WILL NOW',
     1/,' BE CONDUCTED IN THE RANGE NMINB =',I7,' TO NMAXB =',I7,
     1/,' IN INCREMENTS OF INCRB =',I7,'   CIRCUMFERENTIAL WAVES.',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG MAY 2014
C     IF (IEBAND.EQ.1) CALL ERREX
C END MAY 2014
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      CALL CHANGL(-1.,NTOT)   
C     INDIC CHANGED TO -1 BECAUSE WE,VE BRACKETED BUCKLING LOAD BY
C     DETERMINANT 'PLOT'.     
      INDIC = -1  
      K = 2 
      IFLGG = 1   
      GO TO 140   
110   CONTINUE    
      GO TO 400   
120   CONTINUE    
C     NONLINEAR PREBUCKLING WITH SEARCH   
      N = N0B     
130   KNT = 0     
C     PREBUCKLING ANALYSIS WITH 'FIXED' LOADS.  
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
140   IF (NMAXB.EQ.NMINB) ITRACK = 0
      IF (NMAXB.EQ.NMINB) GO TO 240 
C     PREBUCKLING ANALYSIS WITH EIGENVALUE LOADS OR 'VARIABLE' LOADS.   
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      I = 0 
      EGV(1) = 0. 
150   CONTINUE    
C BEG APR 2014
      IF (IDETCT.EQ.1.AND.NSHIFT.GT.2) EGV(1) = ABS(EGV(1))
C END APR 2014
      RHOS = EGV(1)     
C     CALCULATION OF STABILITY STIFFNESS MATRIX, LOAD-GEOMETRIC MATRIX  
C     AND LAMBDA**2- MATRIX.  
160   CONTINUE    
C     CALL OVERLAY(5HBOSOR,3,0)     
C BEG SEP 2005
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,0) 
C END SEP 2005
C     SOLUTION OF EIGENVALUE PROBLEM A*X  + LAMBDA*B*S  +  LAMBDA**2*C*X
C     = 0.  
      NVEC = NVECS
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
C BEG APR 2014
      WRITE(IFILE4,'(/,A,3I10)')
     1 ' IDETCT,KTM,KROOTS=',IDETCT,KTM,KROOTS
      IF (IDETCT.EQ.1.AND.NSHIFT.GT.2) EGV(1) = ABS(EGV(1))
C END APR 2014
      IF (IPREBK.EQ.1) GO TO 160    
      IF (ITOOHI.GT.0.AND.ITOOHI.LT.4) GO TO 130
      I = I + 1   
      IF (I-2) 170,190,190    
C     CIRCUMFERENTIAL WAVE NUMBER VARIED TO FIND MINIMUM BUCKLING LOAD
170   N = N + INCRB     
      IF (N .LE. NMAXB .AND. N .GE. NMINB)  GO TO 150 
      WRITE(IFILE4,180)     
180   FORMAT(/,' WAVENUMBER N EXCEEDS RANGE NMINB.LE.N.LE.NMAXB',/)
C BEG FEB 28, 2014
      WRDCOL= 'WAVENUMBER N EXCEEDS RANGE NMINB.LE.N.LE.NMAXB'
      WRITE(IFILE4,'(/,A,/,A)') ' BIGBOSOR4 aborting because:',
     1 ' WRDCOL= WAVENUMBER N EXCEEDS RANGE NMINB.LE.N.LE.NMAXB' 
C END FEB 28, 2014
      CALL ERREX
190   IF (EGV(1).LT.RHOS) GO TO 170 
      IF (I.GT.2) GO TO 200   
      N = N - 2*INCRB   
      INCRB = - INCRB   
      GO TO 160   
200   N = N - INCRB     
C BEG APR 2014
      WRITE(IFILE4,'(/,A,I6,1P,E12.4)')
     1 ' Critical wavenumber, N, and eigenvalue, RHOS=',N,RHOS
C BEG APRIL 21, 2014
      IF (IDETCT.EQ.1) N0B = N
C END APRIL 21, 2014
      NWVCRT = N
      NOLD = N
      POLD = P - STEP
      TMPOLD = TEMP - DTEMP
      OMGOLD = OMEGA - DOMEGA
      WRITE(IFILE4,201) POLD,TMPOLD,OMGOLD
201   FORMAT(/,' PRESSURE MULTIPLIER =',1PE15.6,', TEMPERATURE',
     1' MULTIPLIER =',1PE15.6,/,'  ANGULAR VELOCITY=',1PE15.6)
      WRITE(IFILE4,202) STEP,DTEMP,DOMEGA
202   FORMAT(' PRESSURE INCREMENT =',1PE15.6,', TEMPERATURE',
     1' INCREMENT =',1PE15.6,/,
     1'  ANGULAR VELOCITY INCREMENT=',1PE15.6)
      CALL MOVER(0.,0,TST,1,600)
      IF (POLD.NE.0.) TST(1)=ABS(STEP*RHOS/POLD)
      IF (TMPOLD.NE.0.) TST(2)=ABS(DTEMP*RHOS/TMPOLD)
      IF (OMGOLD.NE.0.) TST(3)=ABS(DOMEGA*RHOS/OMGOLD)
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (NTOT.EQ.0) GO TO 207 
      DO 206 J=1,NTOT
       VOLD(J) = V(J)-STEP1(J)
       HFOLD(J) = HF(J)-STEP2(J)
       FMOLD(J) = FM(J)-STEP3(J)
       WRITE(IFILE4,203)J,VOLD(J),HFOLD(J),FMOLD(J)
203    FORMAT(' J =',I3,' AXIAL LOAD/LENGTH V(J)=',1PE12.4,/,
     1 ' RADIAL LOAD/LENGTH H(J)=',1PE12.4,
     1 ' MOMENT/LENGTH M(J)=',1PE12.4)
       WRITE(IFILE4,204)J,STEP1(J),STEP2(J),STEP3(J)
204    FORMAT(' J =',I3,', LINE LOAD INCREMENTS:',
     1 ' AXIAL LOAD/LENGTH DV(J)=',1PE12.4,/,
     1 ' RADIAL LOAD/LENGTH DH(J)=',1PE12.4,
     1 ' MOMENT/LENGTH DM(J)=',1PE12.4)
       L = 3 + 3*(J-1) + 1
       IF (VOLD(J).NE.0.) TST(L)=ABS(STEP1(J)*RHOS/VOLD(J))
       IF (HFOLD(J).NE.0.) TST(L+1)=ABS(STEP2(J)*RHOS/HFOLD(J))
       IF (FMOLD(J).NE.0.) TST(L+2)=ABS(STEP3(J)*RHOS/FMOLD(J))
206   CONTINUE
207   CONTINUE
      TSTLOD = 0.
      DO 208 J = 1,600
       TSTLOD = MAX(TSTLOD,TST(J))
208   CONTINUE
      WRITE(IFILE4,'(A,1P,E12.4)') ' TSTLOD =',TSTLOD
C END APR 2014
C     CHANGE LOAD STEPS 
210   CALL CHANGL(RHOS-1.,NTOT)     
220   CONTINUE    
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      IF (STEP.NE.0.) STEP = P/DIV  
      IF (DTEMP.NE.0.) DTEMP = TEMP/DIV   
      IF (DOMEGA.NE.0.) DOMEGA = OMEGA/DIV
      STEPM = RHO/DIV   
      STEPMS = STEPM    
      IF (NTOT.EQ.0) GO TO 240
      DO 230 J=1,NTOT   
      IF (STEP1(J).NE.0.) STEP1(J) = V(J)/DIV   
      IF (STEP2(J).NE.0.) STEP2(J) =HF(J)/DIV   
230   IF (STEP3(J).NE.0.) STEP3(J) =FM(J)/DIV   
240   CONTINUE    
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
C       WRITE(IFILE4,'(A,5I5,1P2E12.4)')
C    1' After 2nd CALL PRE: IPREB2,IPREBK,IDONE,INDIC,IEBAND,P,STEP=',
C    1                      IPREB2,IPREBK,IDONE,INDIC,IEBAND,P,STEP
C        CALL ERREX
C     ENDIF
C END MAY 2014
      IF (IDONE.GT.0) GO TO 400
250   IF (IPREB2.EQ.1.AND.IPREBK.EQ.1) GO TO 400
260   CONTINUE    
C     CALL OVERLAY(5HBOSOR,3,0)     
C BEG SEP 2005
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,0) 
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
C       WRITE(IFILE4,'(A,5I5,1P2E12.4)')
C    1' After 2nd CALL ARRAYS: ITRACK,IFLGG,NVECS,INDIC,IEBAND,P,STEP=',
C    1                         ITRACK,IFLGG,NVECS,INDIC,IEBAND,P,STEP
C        CALL ERREX
C     ENDIF
C END MAY 2014
C END SEP 2005
      ITRACK = ITRACK + 1     
      IFLGG = ITRACK - 1
      NVEC = NVECS
C     CALL OVERLAY(5HBOSOR,4,0)     
C BEG APR 2014
      ISKPSV = ISKIPR
C END APR 2014
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
C BEG MAY 2014
C     IF (NSTEPS.EQ.50) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
C       WRITE(IFILE4,'(A,5I5,1P2E12.4)')
C    1' After 2nd CALL BUCKLE: ITRACK,IFLGG,NVECS,INDIC,IEBAND,P,STEP=',
C    1                         ITRACK,IFLGG,NVECS,INDIC,IEBAND,P,STEP
C        CALL ERREX
C     ENDIF
C END MAY 2014
C BEG MAY 2014
      IF (IEBAND.EQ.1) THEN
       INDIC = -2
       ISKIPR = 0
       GO TO 85
      ENDIF
C END MAY 2014
C BEG APR 2014
      WRITE(IFILE4,'(/,A,6I10)')
     1 ' IDETCT,KTM,KROOTS,ISKPSV,ISKIPR,N=',
     1   IDETCT,KTM,KROOTS,ISKPSV,ISKIPR,N
      IF (IDETCT.EQ.1.AND.NSHIFT.GT.2) EGV(1) = ABS(EGV(1))
C
      IF (ISKIPR.GT.ISKPSV.AND.TSTLOD.LT.0.05) THEN
        N = NOLD
        NWVCRT = N
        P = POLD
        TEMP = TMPOLD
        OMEGA = OMGOLD
        IF (NTOT.EQ.0) GO TO 270
        DO 2605 J = 1,NTOT
         V(J) = VOLD(J)
         HF(J) = HFOLD(J)
         FM(J) = FMOLD(J)
2605    CONTINUE
        GO TO 270
      ENDIF
      WRITE(IFILE4,'(/,A,3I10)')
     1 ' IDETCT,KTM,KROOTS=',IDETCT,KTM,KROOTS
      IF (IDETCT.EQ.1.AND.NSHIFT.GT.2) EGV(1) = ABS(EGV(1))
C END APR 2014
      IF (ITOOHI.GT.0.AND.ITOOHI.LT.4.AND.IFLGG.EQ.0) GO TO 130   
      IF (ITOOHI.GT.0.AND.ITOOHI.LT.4.AND.IFLGG.GT.0) GO TO 220   
      RHOS = EGV(1)     
C BEG APR 2014
      IF (NMAXB.EQ.NMINB) THEN
        WRITE(IFILE4,'(/,A,I6,1P,E12.4)')
     1 ' Critical wavenumber, N, and eigenvalue, RHOS=',N,RHOS
        NWVCRT = N
        POLD = P - STEP
        TMPOLD = TEMP - DTEMP
        OMGOLD = OMEGA - DOMEGA
        WRITE(IFILE4,261) POLD,TMPOLD,OMGOLD
261     FORMAT(/,' PRESSURE MULTIPLIER =',1PE15.6,', TEMPERATURE',
     1' MULTIPLIER =',1PE15.6,/,'  ANGULAR VELOCITY=',1PE15.6)
        WRITE(IFILE4,262) STEP,DTEMP,DOMEGA
262     FORMAT(' PRESSURE INCREMENT =',1PE15.6,', TEMPERATURE',
     1' INCREMENT =',1PE15.6,/,
     1'  ANGULAR VELOCITY INCREMENT=',1PE15.6)
        CALL MOVER(0.,0,TST,1,600)
        IF (POLD.NE.0.) TST(1)=ABS(STEP*RHOS/POLD)
        IF (TMPOLD.NE.0.) TST(2)=ABS(DTEMP*RHOS/TMPOLD)
        IF (OMGOLD.NE.0.) TST(3)=ABS(DOMEGA*RHOS/OMGOLD)
C23456789012345678901234567890123456789012345678901234567890123456789012
        IF (NTOT.EQ.0) GO TO 267
        DO 266 J=1,NTOT
         VOLD(J) = V(J)-STEP1(J)
         HFOLD(J) = HF(J)-STEP2(J)
         FMOLD(J) = FM(J)-STEP3(J)
         WRITE(IFILE4,263)J,VOLD(J),HFOLD(J),FMOLD(J)
263      FORMAT(' J =',I3,' AXIAL LOAD/LENGTH V(J)=',1PE12.4,/,
     1 ' RADIAL LOAD/LENGTH H(J)=',1PE12.4,
     1 ' MOMENT/LENGTH M(J)=',1PE12.4)
         WRITE(IFILE4,264)J,STEP1(J),STEP2(J),STEP3(J)
264      FORMAT(' J =',I3,', LINE LOAD INCREMENTS:',
     1 ' AXIAL LOAD/LENGTH DV(J)=',1PE12.4,/,
     1 ' RADIAL LOAD/LENGTH DH(J)=',1PE12.4,
     1 ' MOMENT/LENGTH DM(J)=',1PE12.4)
         L = 3 + 3*(J-1) + 1
         IF (VOLD(J).NE.0.) TST(L)=ABS(STEP1(J)*RHOS/VOLD(J))
         IF (HFOLD(J).NE.0.) TST(L+1)=ABS(STEP2(J)*RHOS/HFOLD(J))
         IF (FMOLD(J).NE.0.) TST(L+2)=ABS(STEP3(J)*RHOS/FMOLD(J))
266     CONTINUE
267     CONTINUE
        TSTLOD = 0.
        DO 268 J = 1,600
         TSTLOD = MAX(TSTLOD,TST(J))
268     CONTINUE
        WRITE(IFILE4,'(A,1P,E12.4)') ' TSTLOD =',TSTLOD
        IF (TSTLOD.LT.0.05) THEN
          P = POLD
          TEMP = TMPOLD
          OMEGA = OMGOLD
          IF (NTOT.EQ.0) GO TO 270
          DO 269 J = 1,NTOT
           V(J) = VOLD(J)
           HF(J) = HFOLD(J)
           FM(J) = FMOLD(J)
269       CONTINUE
          GO TO 270
        ENDIF
      ENDIF
C  End of (NMINB.EQ.NMAXB) condition.
C END APR 2014
      IF (IPREBK.EQ.1) GO TO 250    
      IF (STEPM.NE.STEPMS) GO TO 210
C BEG MAR 2008
C     IF (ABS(RHOS).LT.5.) GO TO 270
      IF (ABS(RHOS).LT.20.) GO TO 270
C END MAR 2008
      GO TO 210   
C     MINIMUM CRITICAL LOAD DETERMINED.  NOW GET MODE SHAPE.
270   CONTINUE    
C     CALL OVERLAY(5HBOSOR,5,0)     
C     CALL MODE1  
C     PRINT MODE SHAPE AND LOAD     
      ISWTCH = 2  
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
C     PLOT MODE SHAPE   
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
C BEG JULY 1989
      IF (SIGNLL.NE.1.) GO TO 400   
      SIGNLL = 0.0
C END JULY 1989
      IPREBK = 0  
      IPREB2 = 1  
      GO TO 260   
280   CONTINUE    
C     NONLINEAR STRESS ANALYSIS     
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      ISWTCH = 2  
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
      GO TO 400   
290   CONTINUE    
C     BUCKLING WITH NO ITERATIONS   
      IF (IREST.GT.0) GO TO 300
C     PRESTRESS WITH FIXED LOADS    
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
C BEG OCT 2005
C     IF (ITESTX.EQ.1) WRITE(IFIL8X,'(A,I3)')
C    1' before 1st PRE: ITESTX=',ITESTX
C     IF (ITESTX.EQ.1) CALL EXIT
C END OCT 2005
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
C BEG OCT 2005
C     IF (ITESTX.EQ.1) WRITE(IFIL8X,'(A,I3)')
C    1' after 1st PRE: ITESTX=',ITESTX
C     IF (ITESTX.EQ.1) CALL EXIT
C END OCT 2005
      IF (IDONE.GT.0) GO TO 400
C     PRESTRESS WITH EIGENVALUE OR VARIABLE LOADS     
      LFIX = 0    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
300   IINCR = IABS(INCRB)     
      NVECS = NVEC
      IWAVEB = 0
C BEG AUG 1999
      EIGMIN = 10.E+25
      EIGMNN = 10.E+25
C END AUG 1999
      DO 320 N=NMINB,NMAXB,IINCR    
C BEG AUG 1999 (IWAVEB MOVED UP FROM BELOW)
      IWAVEB = IWAVEB + 1
C BEG MAR 2012
      IFAIL = 0
      IFAILD(IWAVEB) = 0
C END MAR 2012
C END AUG 1999
C     BUCKLING OR VIBRATION ANALYSIS .  SEVERAL (NVEC) EIGENVALUES
C     FOR EACH CIRCUMFERENTIAL WAVE NO. N ARE CALCULATED.   
C     STABILITY OR VIBRATION EQUATIONS SET UP   
C     
310   CONTINUE    
      NVEC = NVECS
C     CALL OVERLAY(5HBOSOR,3,0)     
C BEG SEP 2005
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,0) 
C END SEP 2005
C     STABILITY OR VIBRATION EQUATIONS SOLVED.  
C     CALL OVERLAY(5HBOSOR,4,0)     
      CALL BUCKLE(BMAT,CMAT,DI,DIAG) 
      IF (IPREBK.EQ.1) GO TO 310    
      CALL B4OUTM(BBB) 
C BEG AUG 1999
C     IWAVEB = IWAVEB + 1   REMOVED FROM HERE AND MOVED UP
C BEG MAR 2012
      IF (INDIC.EQ.1.OR.INDIC.EQ.4) THEN
         EIGCOM(IWAVEB) = ABS(EGV(1))
         IFAILD(IWAVEB) = IFAIL
      ENDIF
C END MAR 2012
      IF (INDIC.EQ.2) EIGCOM(IWAVEB) =     EGV(1)
C BEG OCT 2011
      IF (INDIC.EQ.2.AND.NVEC.EQ.2) EIGCM2(IWAVEB) = EGV(2)
C END OCT 2011
      NWVCOM(IWAVEB) = N
      IF (INDIC.EQ.1.OR.INDIC.EQ.4) THEN
         DO 313 I = 1,NVEC
            IF (I.EQ.1) THEN
               EIGNEG(IWAVEB) = 0.
               NWVNEG(IWAVEB) = 1000000
            ENDIF
            IF (I.EQ.1.AND.EGV(1).LE.0.) THEN
               EIGNEG(IWAVEB) = EGV(I)
               NWVNEG(IWAVEB) = NWVCOM(IWAVEB)
            ENDIF
            IF (EGV(I).GT.0.) THEN
               EIGCOM(IWAVEB) = EGV(I)
               GO TO 314
            ENDIF
  313    CONTINUE
  314    CONTINUE
      ENDIF
C BEG MAR 2012
C     EIGMIN = MIN(EIGCOM(IWAVEB),EIGMIN)
      IF (IFAILD(IWAVEB).EQ.0)
     1 EIGMIN = MIN(EIGCOM(IWAVEB),EIGMIN)
C END MAR 2012
      EIGMNN = MIN(EIGNEG(IWAVEB),EIGMNN)
C END AUG 1999
      NVECRL(IWAVEB) = NVEC
      NVECTL = NVECTL + NVECRL(IWAVEB)
C     MODE SHAPES PLOTTED WITH SC 4020 PLOTTER  
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
320   CONTINUE    
C BEG AUG 1999
      DO 322 I = 1,IWAVEB
         DIFF = ABS(EIGCOM(I) - EIGMIN)/ABS(EIGCOM(I))
         IF (DIFF.LT.0.0001) THEN
            EIGCRT = EIGMIN
            NWVCRT  = NWVCOM(I)
            GO TO 323
         ENDIF
  322 CONTINUE
  323 CONTINUE
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        WRITE(IFILE4, 324) EIGCRT, NWVCRT
  324   FORMAT(/,' **** CRITICAL EIGENVALUE AND WAVENUMBER ****',/,
     1' EIGCRT=',1P,E12.4,'; NO. OF CIRC. WAVES, NWVCRT=',I5,/,
     1' ****************************************************')
        WRITE(IFILE4,'(/,A,/,A,/,A)')
     1' ***** EIGENVALUES AND MODE SHAPES *****',
     1'  EIGENVALUE(CIRC. WAVES)',
     1' ======================================='
C23456789012345678901234567890123456789012345678901234567890123456789012
      ELSE
        WRITE(IFILE4, 325) EIGCRT, NWVCRT
  325   FORMAT(/,' **** CRITICAL EIGENVALUE AND WAVENUMBER ****',/,
     1' EIGCRT=',1P,E12.4,'; NO. OF AXIAL HALF WAVES, NWVCRT=',I5,/,
     1' ****************************************************')
        WRITE(IFILE4,'(/,A,/,A,/,A)')
     1' ***** EIGENVALUES AND MODE SHAPES *****',
     1'  EIGENVALUE(AXIAL HALF WAVES)',
     1' ======================================='
      ENDIF
C END FEB 2010
      DO 326 I = 1,IWAVEB
C BEG JAN 2010
C       WRITE(IFILE4,'(A,1P,E12.4,A,I4,A)')
C BEG MAR 2012
        WRITE(IFILE4,'(A,1P,E12.4,A,I6,A,I2)')
     1 '  ',EIGCOM(I),'(',NWVCOM(I),'); IFAILD=',IFAILD(I)
C END MAR 2012
C END JAN 2010
  326 CONTINUE
      WRITE(IFILE4,'(A)')
     1' ======================================='
C END AUG 1999
C BEG SEP 2005
      EIGCRN = 0.
      NWVCRN = 1000000
      DO 3221 I = 1,IWAVEB
         DIFF = 1.0
         IF (EIGNEG(I).LT.0.)
     1   DIFF = ABS(EIGNEG(I) - EIGMNN)/ABS(EIGNEG(I))
         IF (DIFF.LT.0.0001) THEN
            EIGCRN = EIGMNN
            NWVCRN  = NWVNEG(I)
            GO TO 3231
         ENDIF
 3221 CONTINUE
 3231 CONTINUE
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        WRITE(IFILE4, 3241) EIGCRN, NWVCRN
 3241   FORMAT(/,' CRITICAL NEGATIVE EIGENVALUE AND WAVENUMBER',/,
     1' EIGCRN=',1P,E12.4,'; NO. OF CIRC. WAVES, NWVCRN=',I5,/,
     1' ****************************************************')
        WRITE(IFILE4,'(/,A,/,A,/,A)')
     1' ***** NEGATIVE EIGENVALUES AND MODE SHAPES *****',
     1'  EIGENVALUE(CIRC. WAVES)',
     1' ======================================='
      ELSE
        WRITE(IFILE4, 3251) EIGCRN, NWVCRN
 3251   FORMAT(/,' CRITICAL NEGATIVE EIGENVALUE AND WAVENUMBER',/,
     1' EIGCRN=',1P,E12.4,'; NO. OF AXIAL HALF WAVES, NWVCRN=',I5,/,
     1' ****************************************************')
        WRITE(IFILE4,'(/,A,/,A,/,A)')
     1' ***** NEGATIVE EIGENVALUES AND MODE SHAPES *****',
     1'  EIGENVALUE(AXIAL HALF WAVES)',
     1' ======================================='
      ENDIF
      DO 3261 I = 1,IWAVEB
C BEG JAN 2010
C       WRITE(IFILE4,'(A,1P,E12.4,A,I4,A)')
        WRITE(IFILE4,'(A,1P,E12.4,A,I6,A)')
     1 '  ',EIGNEG(I),'(',NWVNEG(I),')'
C END JAN 2010
 3261 CONTINUE
      WRITE(IFILE4,'(A)')
     1' ======================================='
C
      IBEG = 1
      KOUNT = 1
  327 CONTINUE
      IISKIN = 0
      DO 328 I = IBEG,NSEG
         IF (NUMSTF(I).GE.2) THEN
            N = NUMSTF(I)/2 + 0.1
            NSAVE(KOUNT) = N
            IF (KOUNT.GT.1) THEN
               KOUNT1 = KOUNT - 1
               DO 3272 J = 1,KOUNT1
                  IF (N.EQ.NSAVE(J)) GO TO 328
 3272          CONTINUE
            ENDIF
            IISKIN = 1
            IBEG = I + 1
            KOUNT = KOUNT + 1
            GO TO 329
         ENDIF
  328 CONTINUE
  329 CONTINUE
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1) THEN
         NVEC = NVECS
         CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,1)
         CALL BUCKLE(BMAT,CMAT,DI,DIAG)
         CALL B4OUTM(BBB)
         IWAVEB = IWAVEB + 1
         NVECRL(IWAVEB) = NVEC
         NVECTL = NVECTL + NVECRL(IWAVEB)
         WRITE(IFILE4,'(/,/,A,/,A,/,(1P,5E12.4))')
     1 ' ****** SKIN BUCKLING EIGENVALUES FOLLOW *********',
     1 ' Eigenvalues for skin buckling:',(EGV(I),I=1,NVEC)
         WRITE(IFILE4,'(A,/,/)')
     1 ' *************************************************'
      ENDIF
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1.AND.
     1                   IBEG.GT.1.AND.IBEG.LE.NSEG) GO TO 327
C END SEP 2004
      GO TO 400   
330   CONTINUE    
C     VIBRATION OF PRESTRESSED SHELLS     
      IF (IREST.GT.0) GO TO 300
C     PRESTRESS ANALYSIS WITH FIXED LOADS 
      LFIX = 1    
C     CALL OVERLAY(5HBOSOR,2,0)     
      CALL PRE(BBB,BMAT,CMAT,DI,DIAG)    
      IF (IDONE.GT.0) GO TO 400
      GO TO 300   
340   CONTINUE    
350   CONTINUE    
      IF (IREST.GT.0) GO TO 370
C     LINEAR STRESS ANALYSIS WITH NONSYMMETRIC LOADS  
      NKOUNT = 0  
      N = NSTART - INCR 
360   N = N + INCR
      NKOUNT = NKOUNT + 1     
      IF (NKOUNT.GT.NHARM) GO TO 370
C     EQUILIBRIUM EQUATIONS AND RIGHT-HAND-SIDE VECTOR ARE CALCULATED   
C     EQUILIBRIUM EQUATIONS ARE SOLVED.   
C     CALL OVERLAY(5HBOSOR,3,0)     
C BEG SEP 2005
      CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,0) 
C END SEP 2005
      GO TO 360   
370   CONTINUE    
C     SHELL DISPLACEMENTS AND STRESS RESULTANTS OR STRESSES ARE   
C     CALCULATED AND SUPERPOSED.    
C     CALL OVERLAY(5HBOSOR,5,0)     
      IF (IREST.EQ.2) WRITE(IFILE4,375)
  375 FORMAT(/,' RESTART IN MAINPROCESSOR...',/)
      CALL MODE1(1,BBB,BMODE,TMODE,SMODE)  
      IF (ITWO.EQ.2) CALL MODE1(2,BBB,BMODE,TMODE,SMODE)
C     CALL OVERLAY(5HBOSOR,1,0)     
      CALL B4OUTM(BBB) 
      NVECTL = NHARM + NVIB
C     IF (NLAST.GE.0) CALL OVERLAY(5HBOSOR,6,0) 
C     IF (NLAST.GE.0) CALL PLOT11   
      IF (INDSIG.EQ.1) GO TO 390    
      GO TO 400   
380   CONTINUE    
C     BUCKLING WITH LINEAR NONSYMMETRIC PREBUCKLING OR PRESTRESS INPUT  
      IF (IPRE.EQ.0) GO TO 390
C     FIRST SOLVE LINEAR NONSYMMETRIC PRESTRESS PROBLEM.    
C     
      K = 6 
      INDIC = 3   
      INDSIG = 1  
      GO TO 350   
390   K = 7 
C     NOW SOLVE LINEAR STABILITY ANALYSIS 
      INDIC = 4   
      NKOUNT = 0  
      INDSIG = 0  
      GO TO 300   
400   CONTINUE    
C BEG FEB 28, 2014
C#if (_genopt_)
      IF (INDIC.EQ.-1) THEN
         EIGCRT = P
         WRITE(IFILE4,'(A,1P,E12.4)') 'In B4MAIN: EIGCRT=',EIGCRT
C        CALL ERREX
      ENDIF
C#else
C
C#endif
C END FEB 28, 2014
C
      REWIND IFILE9
c open/close statments added 6/91
C BEG SEP 1999
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL STOCM1(IFILE9)
      CALL STOCM2(IFILE9)
C     CLOSE(IFILE9)
C END SEP 1999
c end 6/91 changes
C
C     CALL GASP(DUM1,DUM2,-2,DUM3)
C
C BEG OCT 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (INDIC.EQ.0) THEN
         DO 420 I = 1,NSEG
            WRITE(IFILE4,'(/,A,I4)')
     1 ' Local skin and smeared stiffener buckling and stress, Seg.',I
         WRITE(IFILE4,'(A,1P,E12.4,A,I3,/,A,1P,E12.4,A,I3)')
     1 ' Skin buckling load factor,                     BUCMIN=',
     1   BUCMIN(I),' at nodal point',IBUCMN(I),
     1 ' Smeared stringer/isogrid buckling load factor, BUCMNS=',
     1   BUCMNS(I),' at nodal point',IBUCMS(I)
         WRITE(IFILE4,'(A,1P,E12.4,A,I3,/,A,1P,E12.4,A,I3)')
     1 ' Smeared ring buckling load factor,             BUCMNR=',
     1   BUCMNR(I),' at nodal point',IBUCMR(I),
     1 ' Smeared stringer/isogrid maximum eff. stress,  STFMXS=',
     1   STFMXS(I),' at nodal point',ISTFMS(I)
         WRITE(IFILE4,'(A,1P,E12.4,A,I3,/,A,1P,E12.4,A,I3)')
     1 ' Smeared ring maximum effective stress,         STFMXR=',
     1   STFMXR(I),' at nodal point',ISTFMR(I),
     1 ' Shell skin maximum effective stress,           SKNMAX=',
     1   SKNMAX(I),' at nodal point',ISKNMX(I)
  420    CONTINUE
C
         WRITE(IFILE4,'(/,A,1P,E12.4,/,A,1P,E12.4)')
     1 ' Skin buckling load factor,           BUCSKN=',BUCSKN,
     1 ' Stiffener buckling load factor,      BUCSTF=',BUCSTF
         WRITE(IFILE4,'(A,1P,E12.4,/,A,1P,E12.4,/,A,1P,E12.4,/)')
     1 ' Skin maximum effective stress,       STRMAX=',STRMAX,
     1 ' Stiffener maximum effective stress,  STRSTF=',STRSTF,
     1 ' Normal displacement of shell at apex, ENDUV=',ENDUV
C BEG NOV 2010
         WRITE(IFILE4,'(/,A,A)') ' WRDCOL=',WRDCOL
C END NOV 2010
      ENDIF
C
C     IF (ITESTX.EQ.0) THEN
C        CALL IDGASP(IFILE4)
C     ELSE
C        CALL IDGASP(IFIL8X)
C     ENDIF
C END OCT 2005
C
      RETURN
      END
C
C
C
C=DECK      B4OUTM
      SUBROUTINE B4OUTM(BBB)
C
C     BOSOR4 PRINTED OUTPUT PROVIDED BY B4OUTM...
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/OUTP/NPRT
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT
      DIMENSION BBB(*)
C
180   CONTINUE
C     IF (NPRT.GT.1) CALL SR100T(2) 
C     CALL OVERLAY(5HBOSOR,1,6)     
      CALL OUTFIM(BBB) 
200   FORMAT(/,' JUST LEFT SUBROUTINE OUT2')
      IF (NPRT.GT.1) WRITE(IFILE4,200)  
C     IF (NPRT.GT.0) CALL SR100T(2) 
210   CONTINUE    
      RETURN
220   CONTINUE    
      RETURN
      END
C
C
C
C=DECK      OUTFIM
C     OVERLAY(1,6)
      SUBROUTINE OUTFIM(BBB)
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/ALLRNG/NTOT,IPRE
      DIMENSION BBB(*)
      CALL OUT2M(NVEC,NTOT,EGV,BBB)
      RETURN
      END
C
C
C
C=DECK      OUT2M
      SUBROUTINE OUT2M(NVEC ,NTOT,EGV,BBB)
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     ESSENTIAL OUTPUT FROM CURRENT CASE IS PRINTED.
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/ITERS/ITER
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/INSTAB/INDIC
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/LSTEPS/ISTEP
      COMMON/SFLAG/MONOQ
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/DETER/DET,NEX
      COMMON/GMASS/GM(500)
      COMMON/GMAXX/GMI(50)
C BEG MAR 2014
      COMMON/ENERGX/ENERGY(50),ENERG(500)
C END MAR 2014
      COMMON/IDEIG/IDMODE(500),NVECTL,EIGENW(500)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      DIMENSION EGV(50),BBB(*)
      DIMENSION VERT(198),HORIZ(198),FMOM(198)
      K = INDIC + 3
      GO TO (10,20,50,90,200,210,220),K
10    CONTINUE
C     INDIC = -2 - - LOAD INCREASED IN STEPS UNTIL DETERMINANT CHANGES
C     SIGN. THEN INDIC CHANGED TO - 1.
C
      CALL OUTLOM(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
      GO TO 230
20    CONTINUE
C     INDIC = - 1 - - STABILITY ANALYSIS WITH NONLINEAR PREBUCKING
C     AND SEARCH FOR MINIMUM BUCKLING LOAD WITH CIRCUMFERENTIAL
C     WAVENUMBER,N.
C
      CALL OUTLOM(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
      GO TO 230
50    CONTINUE
C     AXISYMMETRIC NONLINEAR STRESS ANALYSIS
      GO TO 230
90    CONTINUE
C     INDIC = 1,2, OR 4--BUCKLING AND VIBRATION ANALYSES IN WHICH
C     MANY EIGENVALUES AND EIGENVECTORS FOR EACH N MAY BE OBTAINED.
C
      IF (INDIC.EQ.1.OR.INDIC.EQ.4) WRITE(IFILE4,100)
100   FORMAT(/,' BUCKLING LOADS FOLLOW')
      IF (INDIC.EQ.2) WRITE(IFILE4,110)
110   FORMAT(/,' VIBRATION FREQUENCIES (CPS) FOLLOW')
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        WRITE(IFILE4,120)N
120     FORMAT(' CIRCUMFERENTIAL WAVE NUMBER, N = ',I7)
      ELSE
        WRITE(IFILE4,121)N
121     FORMAT(' AXIAL HALF WAVE NUMBER, N = ',I7)
      ENDIF
C END FEB 2010
      WRITE(IFILE4,140)(EGV(I),I=1,NVEC)
140   FORMAT(/,' EIGENVALUES =',/,  1P7E15.5,/)
      DO 190 I=1,NVEC
      NVECTP = NVECTL + I
      EIGENW(NVECTP) = EGV(I)
C BEG MAR 2014
C     IF (INDIC.EQ.4) ENERG(NVECTP) = ENERGY(I)
C END MAR 2014
      IF (INDIC.EQ.2) GM(NVECTP) = GMI(I)
      IF (INDIC.NE.1) GO TO 170
      PRESS = P + (EGV(I) - 1.)*STEP
      TEMPT=TEMP+ (EGV(I) - 1.)*DTEMP
      OMEGAX = OMEGA + (EGV(I) -1.)*DOMEGA
      IF (NTOT.EQ.0) GO TO 170
      DO 150 J=1,NTOT
      VERT(J) = V(J) + (EGV(I) - 1.)*STEP1(J)
      HORIZ(J)= HF(J)+ (EGV(I) - 1.)*STEP2(J)
150   FMOM(J) = FM(J)+ (EGV(I) - 1.)*STEP3(J)
      WRITE(IFILE4,160)I
160   FORMAT(/,' CRITICAL LOAD COMBINATION FOR EIGENVALUE NO.',I3,
     1' FOLLOWS',/)
      CALL OUTLOM(INDIC,ITER,DET,NEX,PRESS,TEMPT,VERT,HORIZ,FMOM,NTOT,
     1  OMEGAX)
170   CONTINUE
190   CONTINUE
      GO TO 230
200   CONTINUE
C     INDIC = 2  - -  VIBRATION MODES
      GO TO 90
210   CONTINUE
C     INDIC = 3  - - LINEAR NONSYMMETRIC STRESS ANALYSIS
      IF (IOYES(5).EQ.0) CALL VARFIX(BBB)
      GO TO 230
220   CONTINUE
C     INDIC = 4 - - BUCKLING WITH NONSYMMETRIC PRESTRESS OR WITH
C     PRESTRESS ANALYSIS BYPASSED
      GO TO 90
230   CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTLOM
      SUBROUTINE OUTLOM(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
C     CALLED FROM OUT2, WHOSE TRACE IS READIT, MAIN
C     PRINTS OUT  CRITICAL LOADS, STABILITY DETERMINANT
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION V(198),HF(198),FM(198)
      WRITE(IFILE4,10)INDIC,ITER
10    FORMAT(/,' ANALYSIS TYPE (INDIC) =', I2,/,
     1' NEWTON-RAPHSON ITERATIONS REQUIRED FOR LAST',
     1' PRESTRESS SOLUTION =',I2)     
      IF (INDIC.EQ.0.OR.INDIC.EQ.-2) WRITE(IFILE4,20) DET,NEX
20    FORMAT(/,' VALUE OF STABILITY DETERMINANT =',1PE12.4,/,
     1' TIMES TEN TO THE ',I10,'TH POWER')
      WRITE(IFILE4,30)
30    FORMAT(/,' PRESSURE, TEMPERATURE RISE, ANGULAR VELOCITY',
     1' AND LINE LOADS FOLLOW...')
      WRITE(IFILE4,40)P,TEMP,OMEGA
40    FORMAT(/,' PRESSURE MULTIPLIER =',1PE15.6,', TEMPERATURE',
     1' MULTIPLIER =',1PE15.6,/,'  ANGULAR VELOCITY=',1PE15.6)
      WRITE(IFILE4,50)
50    FORMAT(/,' LINE LOADS FOLLOW',/)
      IF (NTOT.EQ.0) RETURN
      DO 70 I=1,NTOT
      WRITE(IFILE4,60)I,V(I),HF(I),FM(I)
60    FORMAT(' I =',I3,' AXIAL LOAD/LENGTH V(I)=',1PE12.4,/,
     1' RADIAL LOAD/LENGTH H(I)=',1PE12.4,
     1' MOMENT/LENGTH M(I)=',1PE12.4)
70    CONTINUE
      RETURN
      END
C
C
C
C=DECK      VARFIX
      SUBROUTINE VARFIX(BBB)
C
C  PURPOSE IS TO PRINT OUT PREBUCKLING MEMBRANE STRESS RESULTANTS FROM
C  LOAD SYSTEMS A (EIGENVALUE) AND B (CONSTANT)
C
      DIMENSION BBB(*)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/RGFCE/RHF(198)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
C
      ITOT = 1
      ITOTL = 0
      CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 240 I=1,NSEG
C
C     MODAL DISPLACEMENTS AND STRESSES FOR EACH SEGMENT FOUND IN LOCAL.
C
      I5I = I5(I)
220   IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      IF (IEND.LT.400000) GO TO 230
C END JUN 2009
C END FEB 2008
C END MAR 2007
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 220
230   CONTINUE
      CALL NONOUT(THETAS,I,I5I,BBB(33*I5I+IPOS),BBB(36*I5I+IPOS))
C
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
  240 CONTINUE
C
C   NEXT, OUTPUT FOR RING FORCES...
C
      IF (NTOT.EQ.0) RETURN
C
      THETAP = THETAS*180./3.1415927
      WRITE(IFILE4,250) THETAP
C23456789012345678901234567890123456789012345678901234567890123456789012
  250 FORMAT(/,' HOOP FORCE IN DISCRETE RINGS AT CIRCUMFERENTIAL',
     1' STATION THETA =',1PE12.4,/,
     1'    RING NO.     RING FORCE FROM    RING FORCE FROM',/,
     1'                 LOAD SYSTEM "A"    LOAD SYSTEM "B"',/,
     1'                 (EIGENPARAMETER)     (CONSTANT)')
      DO 300 I = 1,NTOT
      WRITE(IFILE4,270) I, RHF(I), RHFIX(I)
  270 FORMAT(I10,1P2E20.8)
  300 CONTINUE
      RETURN
      END
C
C
C
C=DECK      NONOUT
      SUBROUTINE NONOUT(THETAS,ISEG,I5,PSTS,PFXD)
C
C  PURPOSE IS TO PRINT OUT PRESTRESS IN SHELL SEGMENT CORRESPONDING TO
C  NONSYMMETRIC LOAD SYSTEM A  AND NONSYMMETRIC LOAD SYSTEM B
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION PSTS(I5,3),PFXD(I5,3)
C
      THETAP = THETAS*180./3.1415927
      WRITE(IFILE4,10) ISEG,THETAP
C23456789012345678901234567890123456789012345678901234567890123456789012
   10 FORMAT(/,' PREBUCKLING STRESS RESULTANTS IN SHELL SEGMENT NO.',I3,
     1/,' FOR CIRCUMFERENTIAL ANGLE, THETAS =',1PE12.4,/,
     1'           PREBUCKLING MEMBRANE STATE    PREBUCKLING MEMBRANE',
     1' STATE',/,
     1'              FOR LOAD SYSTEM "A"          FOR LOAD SYSTEM "B"',
     1/,
     1'               (EIGENPARAMETER)                 (CONSTANT)',/,
     1' STATION   MERIDIONAL   CIRCUMFERENTIAL  MERIDIONAL',
     1'   CIRCUMFERENTIAL',/,
     1'   NO.     RESULTANT      RESULTANT      RESULTANT    RESULTANT')
C
      DO 30 I = 1,I5
      WRITE(IFILE4,25) I,PSTS(I,1),PSTS(I,2),PFXD(I,1),PFXD(I,2)
   25 FORMAT(I6,1P4E15.6)
   30 CONTINUE
      RETURN
      END
C
C
C
C=DECK      B4POST
C
C     THIS IS THE MAIN PROGRAM OF THE BOSOR4 POST PROCESSOR 
C
      SUBROUTINE B4POST
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
C BEG SEP 2005
      COMMON/NUMSTX/NUMSTF(295)
      DIMENSION NSAVE(295)
C END SEP 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      COMMON/BWORK/BBB(400000),BMODE(90000),TMODE(90000),SMODE(90000)
C END JUN 2009
C END FEB 2008
C END MAR 2007
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE    
      COMMON/STRHD/NSHEAD     
      COMMON/COUNTR/NKOUNT    
      COMMON/NLINS/NSTART,NFIN
      COMMON/DSPACE/IDS 
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT    
      COMMON/IIFIFE/IIIF
      COMMON/RGFCE/RHF(198)    
      COMMON/PSTSS/IPSTS(295)  
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)     
      COMMON/LRANGE/FSTART,FMAX,DF  
      COMMON/DETER/DET,NEX    
      COMMON/TESTIT/NTEST     
      COMMON/ITERAT/IMODE     
      COMMON/TOTPTS/M3  
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR    
      COMMON/FORCES/V(198),HF(198),FM(198)   
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G   
      COMMON/IDENT/IPRW(20)   
      COMMON/HYDRO/PRAD,RV    
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)    
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198) 
      COMMON/INSTAB/INDIC     
      COMMON/MAXSTP/STEPM,STEPMI,RHOM     
      COMMON/ERROR/ERR  
      COMMON/NFAC/NFACT,NDIC  
      COMMON/ITERS/ITER 
      COMMON/ALFAT/ALPHAT     
      COMMON/POSDEF/ IDIAG    
      COMMON/EIGNO/NVEC,EGV(50),AXB 
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
      COMMON/SIG/NFLAGI 
      COMMON/OUTP/ NPRT 
      COMMON/BLK/IBLK,NGBK(20),NFK(20)    
      COMMON/BCK/IDRW(20,5)   
      COMMON/SFLAG/ MONOQ     
      COMMON/STRSEG/ISTRSS(295)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)   
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/IDZREF/IZREF(295) 
      COMMON/ALLRNG/NTOT,IPRE 
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/SIGNALL/ISIG
      COMMON/ORTA/IFLGG,KTM,KROOTS  
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA     
      COMMON/XID/IDX    
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB 
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/NCONDS/NCOND     
      COMMON/IHIGHX/ITOOHI     
      COMMON/LSTEPS/ISTEP
C BEG JULY 1989
      COMMON/PRERT/PREROT,SIGNLL,IPREBK   
C END JULY 1989
      COMMON/NOHARM/NHARM     
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX   
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      COMMON/VCTRSB/NVECRL(50)
      COMMON/IDHIGH/IDMAX
      COMMON/RESTRT/IREST
      COMMON/RESPO2/ANALY,WSPEC(40)
      COMMON/TWORHS/ITWO,IDMOD2(200)
      COMMON/NVVIB/NVIB
C     
C     IBM SUBROUTINE ERRSET IS CALLED TO SUPPRESS THE UNDERFLOW ERROR   
C     MESSAGE NO.208.   
C     
C      CALL ERRSET(208,0,-1,0,0,0)  
C     
C BEG MAR 2007
C BEG FEB 2008
C BEG SEP 2013
C     CALL MOVER(0.,0,BBB,1,470000)
      CALL MOVER(0.,0,BBB,1,670000)
C EMD SEP 2013
C END FEB 2008
C END MAR 2007
C
C OPEN FILE 53 FOR FORMATTED WRITES.. (APPARENTLY NEEDED FOR UNIX)
C
C     OPEN(UNIT=53, FORM='FORMATTED')
C     
c Added 6/91
C BEG SEP 1999
      REWIND 40
C     OPEN(UNIT=40, STATUS='UNKNOWN')
C END SEP 1999
c End 6/91
      CALL MAIN1  
      WRITE(IFILE4,*)' ENTERING BOSOR4 POSTPROCESSOR...'
C
      REWIND 40
      REWIND 53
      REWIND 54
      REWIND IFILE9
c open/close statments added 6/91
C BEG SEP 1999
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL GETCM1(IFILE9)
      CALL GETCM2(IFILE9)
C     CLOSE(IFILE9)
C END SEP 1999
c end 6/91 changes
C
C     CALL GASP(DUM1,DUM2,-1,DUM3)
C     
C     INITIALIZE CLOCK. 
C     CALL SR100T(1)    
C     
      IIIF=21     
      NEDPLT=-1   
      NVECTL = 0
C     
10    CONTINUE    
C
      NVECS = NVEC
70    CONTINUE    
      K = INDIC + 3     
C     
C     SWITCHING TO VARIOUS BRANCHES DEPENDING ON TYPE OF ANALYSIS TO    
C     BE PERFORMED.     
      GO TO (80,120,280,290,290,340,380),K
80    CONTINUE    
      GO TO 400
120   CONTINUE
      CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
      CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
      IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
      GO TO 400
C
280   CONTINUE
      CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
      IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
      GO TO 400
C
290   CONTINUE
300   IINCR = IABS(INCRB)
      IWAVEB = 0
      DO 320 N = NMINB,NMAXB,IINCR
      IWAVEB = IWAVEB + 1
      NVEC = NVECRL(IWAVEB)
      CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
      CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
      NVECTL = NVECTL + NVECRL(IWAVEB)
      IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
320   CONTINUE
C BEG SEP 2005
      IBEG = 1
      KOUNT = 1
  327 CONTINUE
      IISKIN = 0
      DO 328 I = IBEG,NSEG
         IF (NUMSTF(I).GE.2) THEN
            N = NUMSTF(I)/2 + 0.1
            NSAVE(KOUNT) = N
            IF (KOUNT.GT.1) THEN
               KOUNT1 = KOUNT - 1
               DO 3272 J = 1,KOUNT1
                  IF (N.EQ.NSAVE(J)) GO TO 328
 3272          CONTINUE
            ENDIF
            IISKIN = 1
            IBEG = I + 1
            KOUNT = KOUNT + 1
            GO TO 329
         ENDIF
  328 CONTINUE
  329 CONTINUE
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1) THEN
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A)')
     1 ' *********** SKIN BUCKLING MODES ***************',
     1 ' The following modes are for buckling of the shell',
     1 ' skin between adjacent stringers.',
     1 ' *********** SKIN BUCKLING MODES ***************'
         IWAVEB = IWAVEB + 1
         NVEC = NVECRL(IWAVEB)
         CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
         CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
         NVECTL = NVECTL + NVECRL(IWAVEB)
         IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
      ENDIF
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1.AND.
     1                   IBEG.GT.1.AND.IBEG.LE.NSEG) GO TO 327
C END SEP 2004
      GO TO 400
C
340   CONTINUE
350   CONTINUE
C
      IF (IREST.NE.2) MNUMB = NHARM
      IF (IREST.EQ.2) MNUMB = NVIB
      IANALY = ANALY
      IF (IREST.EQ.2.AND.IANALY.EQ.1) GO TO 360
      IF (IREST.EQ.2) CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
      CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
      NVECTL = NHARM + NVIB
      IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
      IF (ITWO.NE.2) GO TO 370
      NVECTL = 0
      CALL B4OUT(2,BBB,BMODE,TMODE,SMODE)
      NVECTL = NHARM + NVIB
      IF (NLAST.GE.0) CALL PLOT11(2,BBB,BMODE,TMODE,SMODE)
      GO TO 370
  360 CONTINUE
      MNUMB = 1
      DO 365 I = 1,NVIB
      NVECTL = I - 1
      CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
      CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
      IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
  365 CONTINUE
      NVECTL = NHARM + NVIB
  370 CONTINUE
      IF (INDSIG.EQ.1) GO TO 390
      GO TO 400
C
380   CONTINUE
      IF (IPRE.EQ.0) GO TO 390
      K = 6
      INDIC = 3
      INDSIG = 1
      GO TO 350
C
390   CONTINUE
      K = 7
      INDIC = 4
      INDSIG = 0
      GO TO 300
C
400   CONTINUE
C
      REWIND IFILE9
c open/close statments added 6/91
C BEG SEP 1999
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL STOCM1(IFILE9)
      CALL STOCM2(IFILE9)
C     CLOSE(IFILE9)
C END SEP 1999
c end 6/91 changes
C
C     CALL GASP(DUM1,DUM2,-2,DUM3)
c Added 6/91
C BEG SEP 1999
C     CLOSE(40)
C END SEP 1999
c End 6/91
C
C BEG OCT 2005
C     IF (ITESTX.EQ.0) THEN
C        CALL IDGASP(IFILE4)
C     ELSE
C        CALL IDGASP(IFIL8X)
C     ENDIF
C END OCT 2005
C
      RETURN
      END
C
C
C
C=DECK      B4OUT
      SUBROUTINE B4OUT(ILOOP,BBB,BMODE,TMODE,SMODE)
C
C     BOSOR4 PRINTED OUTPUT PROVIDED BY B4OUTM...
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/OUTP/NPRT
      COMMON/ENDOF/NLAST,NFIRST,NEDPLT
C BEG MAR 2007
      DIMENSION BMODE(10000,9),TMODE(*),SMODE(*),BBB(*)
C END MAR 2007
C
180   IF (NPRT.GT.1) WRITE(IFILE4,190)  
190   FORMAT(/,' ENTER SUBROUTINE OUT2')
C     IF (NPRT.GT.1) CALL SR100T(2) 
C     DISPLACEMENT AND STRESS DISTRIBUTIONS FOR PREBUCKLING AND   
C  BUCKLING OR VIBRATION OR NONSYMMETRIC STRESS PROBLEMS AND MODE 
C     SHAPES ARE PRINTED OUT IN OUT2.     
C     CALL OVERLAY(5HBOSOR,1,6)     
      CALL OUTFIN(ILOOP,BBB,BMODE,TMODE,SMODE) 
200   FORMAT(/,' JUST LEFT SUBROUTINE OUT2')
      IF (NPRT.GT.1) WRITE(IFILE4,200)  
C     IF (NPRT.GT.0) CALL SR100T(2) 
210   CONTINUE    
      RETURN
220   CONTINUE    
C     IF(NEDPLT.EQ.1) CALL ENDPLT   
      RETURN
      END
C
C
C
C=DECK      OUTFIN
      SUBROUTINE OUTFIN(ILOOP,BBB,BMODE,TMODE,SMODE)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/ALLRNG/NTOT,IPRE
C BEG MAR 2007
      DIMENSION BMODE(10000,9),SMODE(*),TMODE(*),BBB(*)
C END MAR 2007
      CALL OUT2(NVEC,NTOT,BMODE,SMODE,TMODE,EGV,ILOOP)
      RETURN
      END
C
C
C
C=DECK      OUT2
      SUBROUTINE OUT2(NVEC ,NTOT,BMODE,SMODE,TMODE,EGV,ILOOP)
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     ESSENTIAL OUTPUT FROM CURRENT CASE IS PRINTED.
C BEG DEC 2005
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
C BEG MAR 2007
      COMMON/BUCMOD/WMODE(10000)
      COMMON/BUCIDX/IDBUCK(100)
C END MAR 2007
C END DEC 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/ITERS/ITER
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/INSTAB/INDIC
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/LSTEPS/ISTEP
      COMMON/SFLAG/MONOQ
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/DETER/DET,NEX
      COMMON/GMASS/GM(500)
C BEG MAR 2014
      COMMON/ENERGX/ENERGY(50),ENERG(500)
C END MAR 2014
      COMMON/IDEIG/IDMODE(500),NVECTL,EIGENW(500)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/NVVIB/NVIB
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
C BEG MAR 2007
      DIMENSION BMODE(10000,9),SMODE(*),TMODE(*),EGV(50),X(10000)
C END MAR 2007
      DIMENSION VERT(198),HORIZ(198),FMOM(198)
      K = INDIC + 3
      GO TO (10,20,50,90,200,210,220),K
10    CONTINUE
C     INDIC = -2 - - LOAD INCREASED IN STEPS UNTIL DETERMINANT CHANGES
C     SIGN. THEN INDIC CHANGED TO - 1.
C
      CALL OUTLOD(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
      GO TO 230
20    CONTINUE
C     INDIC = - 1 - - STABILITY ANALYSIS WITH NONLINEAR PREBUCKING
C     AND SEARCH FOR MINIMUM BUCKLING LOAD WITH CIRCUMFERENTIAL
C     WAVENUMBER,N.
C
      CALL OUTLOD(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
      WRITE(IFILE4,30)
30    FORMAT(/,15X,' PREBUCKLING DISPLACEMENTS AND STRESS RESULTANTS',
     1' CORRESPONDING TO CRITICAL LOAD')
      CALL OUTPEE(IPMODE(1),IARC,I2,I5,NSEG,BMODE,0)
      IF (IOYES(4).EQ.1) GO TO 230
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       WRITE(IFILE4,40)N
40     FORMAT(/,' BUCKLING MODE FOR',I7,' CIRCUMFERENTIAL WAVES')
      ELSE
       WRITE(IFILE4,41)N
41     FORMAT(/,' BUCKLING MODE FOR',I7,' AXIAL HALF WAVES')
      ENDIF
C END FEB 2010
C BEG SEP 2005
      CALL OUTBUC(IMOAD(1),IARC,I2,I5,NSEG,BMODE,INDIC,1)
C END SEP 2005
      GO TO 230
50    CONTINUE
C     AXISYMMETRIC NONLINEAR STRESS ANALYSIS
      GO TO 230
90    CONTINUE
C     INDIC = 1,2, OR 4--BUCKLING AND VIBRATION ANALYSES IN WHICH
C     MANY EIGENVALUES AND EIGENVECTORS FOR EACH N MAY BE OBTAINED.
C
      IF (INDIC.EQ.1.OR.INDIC.EQ.4) WRITE(IFILE4,100)
100   FORMAT(/,' BUCKLING LOADS AND MODES FOLLOW')
      IF (INDIC.EQ.2) WRITE(IFILE4,110)
110   FORMAT(/,' VIBRATION MODES FOLLOW')
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        WRITE(IFILE4,120)N
120     FORMAT(/,' CIRCUMFERENTIAL WAVE NUMBER, N =',I7,/)
      ELSE
        WRITE(IFILE4,121)N
121     FORMAT(/,' AXIAL HALF WAVE NUMBER, N =',I7,/)
      ENDIF
C END FEB 2010
      WRITE(IFILE4,140)(EIGENW(NVECTL+I),I=1,NVEC)
140   FORMAT(' EIGENVALUES =',/,(1P,5E12.3))
C BEG MAR 2014
C     IF (INDIC.EQ.4)
C    1 WRITE(IFILE4,144)(ENERG(NVECTL+I),I=1,NVEC)
C144   FORMAT(/,' STRAIN ENERGY =',/,(1P,5E12.3))
C END MAR 2014
      IF (INDIC.EQ.2) WRITE(IFILE4,145)(GM(NVECTL+I),I=1,NVEC)
145   FORMAT(/,' GENERALIZED MASS =',/,(1P,5E12.3))
      IF (INDIC.EQ.2) WRITE(IFILE4,147) (GAMP(NVECTL+I),I=1,NVEC)
147   FORMAT(/,' PARTICIPATION FACTORS=',/,(1P,5E12.3))
      DO 190 I=1,NVEC
      NVECTP = NVECTL + I
      EGV(I) = EIGENW(NVECTP)
      IF (INDIC.NE.1) GO TO 170
      PRESS = P + (EGV(I) - 1.)*STEP
      TEMPT=TEMP+ (EGV(I) - 1.)*DTEMP
      OMEGAX = OMEGA + (EGV(I) - 1.)*DOMEGA
      IF (NTOT.EQ.0) GO TO 170
      DO 150 J=1,NTOT
      VERT(J) = V(J) + (EGV(I) - 1.)*STEP1(J)
      HORIZ(J)= HF(J)+ (EGV(I) - 1.)*STEP2(J)
150   FMOM(J) = FM(J)+ (EGV(I) - 1.)*STEP3(J)
      WRITE(IFILE4,160)I
160   FORMAT(/,' CRITICAL LOAD COMBINATION FOR EIGENVALUE NO.',I3,
     1' FOLLOWS',/)
      CALL OUTLOD(INDIC,ITER,DET,NEX,PRESS,TEMPT,VERT,HORIZ,FMOM,NTOT,
     1 OMEGAX)
170   CONTINUE
      IF (IOYES(4).EQ.1) GO TO 190
      WRITE(IFILE4,180)I
180   FORMAT(/,' MODE SHAPE FOR EIGENVALUE NO.',I3,' FOLLOWS')
C BEG SEP 2005
      CALL OUTBUC(IMOAD(I+NVIB),IARC,I2,I5,NSEG,BMODE,INDIC,I+NVIB)
C END SEP 2005
190   CONTINUE
C BEG DEC 2005
      IF (INDIC.EQ.1.AND.N.EQ.0.AND.NVEC.GT.1) THEN
C     Sort eigenvalues and eigenmodes corresponding to axisymmetric
C     buckling. This is needed for use with GENOPT (optimization)
C     Also, fill WMODE.
         WRITE(IFILE4,'(/,A,I3,/,(1P,5E12.4))')
     1 ' Eigenvalues before sorting. NVEC=',NVEC,(EGV(I),I=1,NVEC)
         DO 195 I=2,NVEC
            I1 = I - 1
            IF (EGV(I).LT.EGV(I1)) THEN
               EIGSAV = EGV(I1)
               EGV(I1) = EGV(I)
               EGV(I) = EIGSAV
               CALL GASP(BMODE(1,3),I2,3,IDBUCK(I))
               CALL GASP(WMODE,I2,3,IDBUCK(I1))
               CALL GASP(WMODE,I2,1,IDBUCK(I))
               CALL GASP(BMODE(1,3),I2,1,IDBUCK(I1))
            ENDIF
195      CONTINUE
         WRITE(IFILE4,'(/,A,I3,/,(1P,5E12.4))')
     1 ' Eigenvalues after sorting. NVEC=',NVEC,(EGV(I),I=1,NVEC)
         CALL GASP(WMODE,I2,3,IDBUCK(1))
      ENDIF
C END DEC 2005
      GO TO 230
200   CONTINUE
C     INDIC = 2  - -  VIBRATION MODES
      GO TO 90
210   CONTINUE
C     INDIC = 3  - - LINEAR NONSYMMETRIC STRESS ANALYSIS
      NNDIST = NDIST
      IF (NDIST.EQ.0) NNDIST = 1
      NNCIRC = NCIRC
      IF (NCIRC.EQ.0) NNCIRC = 1
      CALL OUTNON(IOUT,NDIST,NCIRC,NTHETA,IMOAD,INTVAL,MONOQ,SMODE,
     1TMODE,X,ILOOP,NNDIST,NNCIRC)
      GO TO 230
220   CONTINUE
C     INDIC = 4 - - BUCKLING WITH NONSYMMETRIC PRESTRESS OR WITH
C     PRESTRESS ANALYSIS BYPASSED
      GO TO 90
230   CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTLOD
      SUBROUTINE OUTLOD(INDIC,ITER,DET,NEX,P,TEMP,V,HF,FM,NTOT,OMEGA)
C     CALLED FROM OUT2, WHOSE TRACE IS READIT, MAIN
C     PRINTS OUT  CRITICAL LOADS, STABILITY DETERMINANT
C
C BEG FEB 28, 2014
C     COMMON/EIGBUK/EIGCRT
C END FEB 28, 2014
      DIMENSION V(198),HF(198),FM(198)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      WRITE(IFILE4,10)INDIC,ITER
10    FORMAT(/,' ANALYSIS TYPE (INDIC) =',I2,/,' NEWTON-RAPHSON',
     1' ITERATIONS REQUIRED FOR LAST PRESTRESS SOLUTION =',I2)
      IF (INDIC.EQ.0.OR.INDIC.EQ.-2) WRITE(IFILE4,20)DET,NEX
20    FORMAT(/,' VALUE OF STABILITY DETERMINANT =',1PE12.4,/,
     1' TIMES TEN TO THE',I10,'TH POWER')
      WRITE(IFILE4,30)
30    FORMAT(/,' PRESSURE, TEMPERATURE RISE, ANGULAR VELOCITY, AND',
     1' LINE LOADS FOLLOW...')
      WRITE(IFILE4,40)P,TEMP,OMEGA
   40 FORMAT(/,' PRESSURE MULTIPLIER    (LOAD SYSTEM "A") =',1PE15.6,/,
     1         ' TEMPERATURE MULTIPLIER (LOAD SYSTEM "A") =',1PE15.6,/,
     1         ' ANGULAR VELOCITY, OMEGA                  =',1PE15.6)
C BEG FEB 28, 2014
C#if (_genopt_)
C     IF (INDIC.EQ.-1) THEN
C        EIGCRT = P
C        WRITE(IFILE4,'(A,1P,E12.4)') 'In OUTLOD: EIGCRT=',EIGCRT
C        CALL ERREX
C     ENDIF
C#else
C
C#endif
C END FEB 28, 2014
C23456789012345678901234567890123456789012345678901234567890123456789012
C
      IF (NTOT.EQ.0) RETURN
      WRITE(IFILE4,50)
50    FORMAT(/,' LINE LOADS FOLLOW...(LOAD SYSTEM "A")',/)
      DO 70 I=1,NTOT
      WRITE(IFILE4,60)I,V(I),HF(I),FM(I)
60    FORMAT(' I =',I3,', AXIAL LOAD/LENGTH V(I)=',1PE12.4,/,
     1' RADIAL LOAD/LENGTH H(I)=',1PE12.4,             
     2' MOMENT/LENGTH M(I)=',1PE12.4)               
70    CONTINUE
C
      WRITE(IFILE4,80)
80    FORMAT(/,' LINE LOADS FOLLOW...(LOAD SYSTEM "B")',/)
      DO 90 I=1,NTOT
      WRITE(IFILE4,85)I,VFIX(I),HFIX(I),FMFIX(I)
85    FORMAT(' I =',I3,', AXIAL LOAD/LENGTH VFIX(I)=',1PE12.4,/,
     1' RADIAL LOAD/LENGTH HFIX(I)=',1PE12.4,             
     2' MOMENT/LENGTH MFIX(I)=',1PE12.4)               
90    CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTBUC
C BEG SEP 2005
      SUBROUTINE OUTBUC(IMOAD,IARC,I2,I5,NSEG,BMODE,INDIC,NTHMOD)
C END SEP 2005
C     CALLED FROM OUT2, WHOSE TRACE IS READIT, MAIN.
C     PRINTS OUT BUCKLING OR VIBRATION MODES.
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
C BEG SEP 2005
C BEG MAR 2007
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/BUCMOD/WMODE(10000)
C END MAR 2007
      COMMON/BUCIDX/IDBUCK(100)
C END SEP 2005
C BEG MAR 2007
      DIMENSION IARC(295),I5(295),BMODE(I2,9),S(10000)
C END MAR 2007
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      NM = 3*I2
      CALL GASP(BMODE,NM,3,IMOAD)
      IALL = 0
      CALL GASP(S,I2 ,3,IARC(1))
      DO 60 I=1,NSEG
      I5I = I5(I)
      IF (IOSEG(I).NE.0) GO TO 5
      IALL = IALL + I5I
      GO TO 60
    5 CONTINUE
C BEG SEP 2005
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        IF (INDIC.EQ.2) WRITE(IFILE4,10)I,N
        IF (INDIC.NE.2) WRITE(IFILE4,20)I,N
10      FORMAT(/,
     1 ' VIBRATION MODE FOR SEGMENT',I3,'; N=',I6,' CIRC.WAVES')
20      FORMAT(/,
     1 ' BUCKLING MODE FOR SEGMENT',I3,'; N=',I6,' CIRC. WAVES')
      ELSE
        IF (INDIC.EQ.2) WRITE(IFILE4,11)I,N
        IF (INDIC.NE.2) WRITE(IFILE4,21)I,N
11      FORMAT(/,
     1 ' VIBRATION MODE FOR SEGMENT',I3,'; N=',I6,' AXIAL HALFWAVES')
21      FORMAT(/,
     1 ' BUCKLING MODE FOR SEGMENT',I3,'; N=',I6,' AXIAL HALF WAVES')
      ENDIF
C END FEB 2010
C END SEP 2005
      WRITE(IFILE4,30)
C23456789012345678901234567890123456789012345678901234567890123456789012
30    FORMAT(/' POINT    STATION       U            V            W',/,
     1     '        (ARC LENGTH)  MERID.      CIRCUMF.      NORMAL',/,
     1     '                    DISPLACEMENT   DISP.    DISPLACEMENT',/)
      DO 50 J=1,I5I
      IALL = IALL + 1
      WRITE(IFILE4,40)J,S(IALL),(BMODE(IALL,JJ),JJ=1,3)
40    FORMAT(I5,1P4E12.3)                                               
C BEG SEP 2005
C BEG DEC 2005 (comment out here and do in OUT2)
C     IF (NTHMOD.EQ.1.AND.INDIC.EQ.1.AND.N.EQ.0)
C    1  WMODE(IALL) = BMODE(IALL,3)
C END DEC 2005
C END SEP 2005
50    CONTINUE
60    CONTINUE
C BEG DEC 2005
      IF (INDIC.EQ.1.AND.N.EQ.0) THEN
         CALL GASP(BMODE(1,3),I2,1,IDBUCK(NTHMOD))
         IALL = 0
         DO 80 I = 1,NSEG
            I5I = I5(I)
            IF (IOSEG(I).NE.0) GO TO 65
            IALL = IALL + I5I
            GO TO 80
   65       CONTINUE
            WRITE(IFILE4,'(/,A,I4,/,A,/,A,/,A,/,A,I4,A)')
     1    ' Normal buckling modal displacement w for Segment no.',I,
     1    ' possibly to be used as an axisymmetric imperfection shape.',
     1    ' The following list is in a format suitable for use as an',
     1    ' imperfection ITYPE = 4 for an axisymmetrically imperfect',
     1    ' shell segment (IMP = 1 for Segment',I,' in the *.ALL file).'
C23456789012345678901234567890123456789012345678901234567890123456789012
            DO 70 J=1,I5I
               IALL = IALL + 1
               WRITE(IFILE4,'(1P,E14.6)') BMODE(IALL,3)
   70       CONTINUE
   80    CONTINUE
      ENDIF
C END DEC 2005
      RETURN
      END
C
C
C
C=DECK      OUTNON
      SUBROUTINE OUTNON(IOUT,NDIST,NCIRC,NTHETA,IMOAD,INTVAL,ISTRES,
     1SMODE,TMODE,X,ILOOP,NNDIST,NNCIRC)
C     CALLED FROM OUT2, WHICH IS CALLED FROM READIT.
C     OUTPUT OF RESULTS OF LINEAR NONSYMMETRIC STRESS ANALYSIS
C BEG AUG 1999
C     WWWMAX(1), STRMAX(1) = MAX NORMAL DISP. AND STRESS FROM LOAD SET A
C     WWWMAX(2), STRMAX(2) = MAX NORMAL DISP. AND STRESS FROM LOAD SET B
C BEG APR 2012
      REAL N1FIX,N2FIX,N1VAR,N2VAR,N12VAR,N12FIX
      COMMON/N1N2FX/N1FIX(100,295),N2FIX(100,295)
      COMMON/N1N2VR/N1VAR(100,295),N2VAR(100,295)
      COMMON/N12VR/N12VAR(100,295),N12FIX(100,295)
C END APR 2012
      COMMON/MAXNON/WWWMAX(2),STRMAX(2)
      COMMON/MAXLOC/LOCATW(2),LOCATS(2)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C END AUG 1999
      DIMENSION SMODE(IOUT,NNDIST,9),TMODE(NTHETA,NNCIRC,9),X(*)
C BEG MAR 2007
      DIMENSION S(10000)
C END MAR 2007
      DIMENSION IMOAD(100),INTVAL(295)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/XID/IDX
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/NOHARM/NHARM
      COMMON/RGFCE/RHF(198)
      COMMON/IFRHX/IFB,RHFIX(198),KKKK,MMNUMB,ISWTCH,KKNT,IFTOT,INDSG,
     1  LFXX
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/ALLRNG/ NTOT,IPRE
      COMMON/NLINS/NSTART,NFIN
      COMMON/EIGNO/MVEC,EGV(50),AXB
      COMMON/RESTRT/IREST
      COMMON/RESPO2/ANALY,WSPEC(40)
      COMMON/STRSEG/ISTRSS(295)
      COMMON/KCHNG/NWALL(295),CCH(295)
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
C BEG MAR 2007
      DIMENSION FF(100000),F(62500)
C END MAR 2007
C BEG APR 1992
C  NEW VARIABLES FOR STRESS CONSTRAINTS FOR COMPOSITE MATERIAL...
      DIMENSION WORDB(99),IPOINC(1500),CONSTR(99)
      DIMENSION EMAX(5,20),EMARG(5,20)
      CHARACTER*80 WORDB
C END APR 1992
C     RETRIEVE MERIDIONAL STRESS OR STRESS RESULTANT DISTRIBUTIONS.
      NN = IOUT*NDIST*9
      IF (NN.EQ.0) GO TO 4
      IF (ILOOP.EQ.1) CALL GASP(SMODE,NN,3,IMOAD(100))
      IF (ILOOP.EQ.2) CALL GASP(SMODE,NN,3,IMOAD( 98))
    4 CONTINUE
      NN = NTHETA*NCIRC*9
      IF (NN.EQ.0) GO TO 5
C     RETRIEVE CIRCUMFERENTIAL DISTRIBUTIONS
      IF (ILOOP.EQ.1) CALL GASP(TMODE,NN,3,IMOAD(99))
      IF (ILOOP.EQ.2) CALL GASP(TMODE,NN,3,IMOAD(97))
    5 CONTINUE
      NN = NTOT*NHARM*4
      IF (NN.EQ.0) GO TO 6
      IF (ILOOP.EQ.1) CALL GASP(F,NN,3,IMOAD(96))
      IF (ILOOP.EQ.2) CALL GASP(F,NN,3,IMOAD(95))
C
    6 CONTINUE
C     RECOVER MERIDIONAL STATIONS CORRESPONDING TO MERIDIONAL
C     DISTRIBUTIONS
      CALL GASP(X,IOUT,3,IDX)
C     PRINT OUT AXIAL DISTRIBUTIONS FOR NDIST CIRCUMFERENTIAL STATIONS.
C
      IF (NDIST.EQ.0) GO TO 105
C BEG AUG 1999
      STRMAX(ILOOP) = 0.
      WWWMAX(ILOOP) = 0.
      SIGNW = 1.
      LOCATW(ILOOP) = 0
      LOCATS(ILOOP) = 0
C END AUG 1999
      DO 100 IDIST=1,NDIST
      THET = THETA(IDIST)*180./3.141593
      WRITE(IFILE4,10)THET
10    FORMAT(/,' MERIDIONAL DISTRIBUTION OF SUPERPOSED QUANTITIES',/,
     1'  CORRESPONDING TO CIRCUMFERENTIAL STATION, THETA= ',
     11PE12.4,' DEG.')
C23456789012345678901234567890123456789012345678901234567890123456789012
      ITOT = 0
      IS = 1
      ISTTHK = 0
      DO 90 ISEG=1,NSEG
C BEG MAR 2008
      WRITE(IFILE4,10)THET
C END MAR 2008
      WRITE(IFILE4,20)ISEG,ISEG,ISEG,ISEG,ISEG
   20 FORMAT(/,' STRESS RESULTANTS OR STRESSES OR STRAINS AND',/,
     1        ' CHANGES IN CURVATURE IN SEGMENT NUMBER',5I6)
      IF (ILOOP.EQ.1) WRITE(IFILE4,22)
      IF (ILOOP.EQ.2) WRITE(IFILE4,23)
   22 FORMAT(' ****** RESULTS FROM APPLICATION OF LOAD SYSTEM "A" ***',
     1'***')
   23 FORMAT(' ****** RESULTS FROM APPLICATION OF LOAD SYSTEM "B" ***',
     1'***')
      IF (ISTRSS(ISEG).EQ.0.AND.ISTRES.EQ.0) WRITE(IFILE4,30)
C23456789012345678901234567890123456789012345678901234567890123456789012
30    FORMAT(/,' POINT    STATION       U           V           W     ',
     1'   N1         N2         N12          M1         M2        MT',/,
     2        '       (ARC LENGTH)   MERID.     CIRCUMF.     NORMAL   ',
     3' MERID.    CIRCUMF.    IN-PLANE     MERID.     CIRCUMF.',
     4'     TWISTING',/,
     5        '                      DISP.    DISPLACEMENT   DISP.    ',
     6' RESULTANT RESULTANT    SHEAR       MOMENT      MOMENT',
     7'      MOMENT',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (ISTRSS(ISEG).EQ.1.AND.NWALL(ISEG).NE.4.AND.NWALL(ISEG).NE.9)
     1     WRITE(IFILE4,40)
      IF (ISTRSS(ISEG).EQ.1.AND.(NWALL(ISEG).EQ.4.OR.NWALL(ISEG).EQ.9))
     1     WRITE(IFILE4,45)
      IF (ISTRSS(ISEG).EQ.2) WRITE(IFILE4,45)
      IF (ISTRSS(ISEG).EQ.0.AND.ISTRES.EQ.1) WRITE(IFILE4,45)
C23456789012345678901234567890123456789012345678901234567890123456789012
40    FORMAT(/,' POINT  STATION     U         V         W      S1(IN) ',
     1' S1(OUT)   TAU(IN)   S2(IN)   S2(OUT)   TAU(OUT)  SVON(IN)',
     1'  SVON(OUT)',/,
     3      '     (ARC LENGTH) MERID.   CIRCUMF.  NORMAL    MERID.    ',
     4' MERID.   IN-PLANE  CIRCUMF.  CIRCUMF.  IN-PLANE     VON MISES',
     5/,    '                  DISP.  DISPLACEMENT DISP.    STRESS    ',
     6' STRESS    SHEAR    STRESS    STRESS     SHEAR',
     7'    EFFECTIVE STRESS',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
45    FORMAT(/, ' POINT    STATION       U            V            W  ',
     1'      E1         E2          E12         K1           K2',
     1'         K12',/,
     2           '       (ARC LENGTH)   MERID.      CIRCUMF.',
     3'     NORMAL ',
     3'    MERID.    CIRCUMF.     IN-PLANE    MERID.      CIRCUMF.',
     4'     TWIST',/,
     5         '                      DISP.    DISPLACEMENT     DISP. ',
     6'    STRAIN     STRAIN       SHEAR     CHANGES IN CURVATURE',/)
      INEXT = ITOT + 1
      IEND = ITOT + I5(ISEG)
      I5I = I5(ISEG)
      DO 80 I=1,I5I
      ITOT = ITOT + 1
      IF (ITOT.NE.INEXT) GO TO 80
C BEG AUG 1999
C BEG JUL 2001 (some statements commented out)
C     IF (ISEG.EQ.NSEG.AND.I.EQ.I5I) THEN
        DISMAX = ABS(SMODE(IS,IDIST,3))
        WWWMAX(ILOOP) = MAX(WWWMAX(ILOOP),DISMAX)
        DIFF = 0.
        IF (ABS(WWWMAX(ILOOP)).GT.0.)
     1  DIFF =
     1   ABS(WWWMAX(ILOOP) - DISMAX)/ABS(WWWMAX(ILOOP))
        IF (DIFF.LT.0.000001.AND.DISMAX.GT.0.) THEN
           KNDX = 3
C          DIFF2 = ABS(DISMAX - ABS(SMODE(IS,IDIST,1)))/DISMAX
C          IF (DIFF2.LT.0.000001) KNDX = 1
           SIGNW = SMODE(IS,IDIST,KNDX)/ABS(SMODE(IS,IDIST,KNDX))
           LOCATW(ILOOP) = 1000*ISEG + I
        ENDIF
C     ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUL 2001
C END AUG 1999
      IF (ISTRSS(ISEG).EQ.0.OR.ISTRSS(ISEG).EQ.2)
     1WRITE(IFILE4,50)I,X(IS),(SMODE(IS,IDIST,J),J=1,9)
50    FORMAT(I5,1P10E12.3)
C BEG APR 2012
      IF (ILOOP.EQ.1.AND.(ISTRSS(ISEG).EQ.0.OR.ISTRSS(ISEG).EQ.2)) THEN
         N1VAR(I,ISEG) = SMODE(IS,IDIST,4)
         N2VAR(I,ISEG) = SMODE(IS,IDIST,5)
         N12VAR(I,ISEG)= SMODE(IS,IDIST,6)
      ENDIF
      IF (ILOOP.EQ.2.AND.(ISTRSS(ISEG).EQ.0.OR.ISTRSS(ISEG).EQ.2)) THEN
         N1FIX(I,ISEG) = SMODE(IS,IDIST,4)
         N2FIX(I,ISEG) = SMODE(IS,IDIST,5)
         N12FIX(I,ISEG)= SMODE(IS,IDIST,6)
      ENDIF
C END APR 2012
      IF (ISTRSS(ISEG).NE.1.OR.NWALL(ISEG).EQ.4.OR.NWALL(ISEG).EQ.9)
     1          GO TO 70
C     MERIDIONAL DISTRIBUTIONS OF EFFECTIVE STRESS COMPONENTS
      SIGEIN = SQRT(SMODE(IS,IDIST,4)**2 + SMODE(IS,IDIST,7)**2
     1- SMODE(IS,IDIST,4)*SMODE(IS,IDIST,7) + 3.*SMODE(IS,IDIST,6)**2)
      SIGEO  = SQRT(SMODE(IS,IDIST,5)**2 + SMODE(IS,IDIST,8)**2
     1- SMODE(IS,IDIST,5)*SMODE(IS,IDIST,8) + 3.*SMODE(IS,IDIST,9)**2)
C BEG AUG 1999
      SIGVON = MAX(SIGEIN,SIGEO)
      STRMAX(ILOOP) = MAX(STRMAX(ILOOP),SIGVON)
      DIFF = 0.
      IF (STRMAX(ILOOP).GT.0.)
     1 DIFF = ABS(STRMAX(ILOOP) - SIGVON)/STRMAX(ILOOP)
      IF (DIFF.LT.0.000001.AND.SIGVON.NE.0.) THEN
         LOCATS(ILOOP) = 1000*ISEG + I
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END AUG 1999
      WRITE(IFILE4,60)I,X(IS),(SMODE(IS,IDIST,J),J=1,9),SIGEIN,SIGEO
60    FORMAT(I5,1P12E10.2)
70    IS = IS + 1
      INEXT = ITOT + INTVAL(ISEG)
      IF (INEXT.GT.IEND) INEXT = IEND
80    CONTINUE
      IF ((NWALL(ISEG).EQ.4.OR.NWALL(ISEG).EQ.9)
     1         .AND.ISTRSS(ISEG).EQ.1.AND.ISTRES.EQ.1) ISTTHK=1
90    CONTINUE
C
C  PRINT OUT STRESSES IN COMPOSITE LAMINATED WALL... (25 AUG., 1985)
C
      IF (ISTTHK.EQ.1) THEN
         ICOL1 = 4
         ICOL2 = 5
         ICOL3 = 6
         ICOL4 = 7
         ICOL5 = 8
         ICOL6 = 9
C BEG APR 1992
C        CALL STRTHK(SMODE,IOUT,NNDIST,IDIST,1.0,NSEG,I5,ILOOP,
C    1               INTVAL,NWALL,THET,ICOL1,ICOL2,ICOL3,ICOL4,
C    1               ICOL5,ICOL6)
C 
C INCLUDE STRESS CONSTRAINTS FOR LAMINATED COMPOSITE MATERIAL...
         CALL STRTHX(SMODE,IOUT,NNDIST,IDIST,FSSTR,NSEG,I5,
     1                  ILOOP,INTVAL,NWALL,THET,ICOL1,ICOL2,ICOL3,
     1                  ICOL4,ICOL5,ICOL6,WORDB,EMAX,EMARG,
     1                  IMOD,ITYPE,FMAX,INUMTT,IPOINC,ICONST,CONSTR,
     1                  3)
C
C END APR 1992
      ENDIF
C
C  END OF 25 AUG., 1985 MODIFICATION.
C
  100 CONTINUE
C BEG AUG 1999
      WWWMAX(ILOOP) = SIGNW*WWWMAX(ILOOP)
      IF (ILOOP.EQ.1) WRITE(IFILE4,101) WWWMAX(ILOOP),LOCATW(ILOOP)
      IF (ILOOP.EQ.2) WRITE(IFILE4,102) WWWMAX(ILOOP),LOCATW(ILOOP)
  101 FORMAT(/,
     1' ****** MAX. NORMAL DISPLACEMENT, LOAD SET A ************',/,
     1' WWWMAX(1)=',1P,E12.4,', LOCATW(1)=1000*ISEG+I=',I6,/,
     1' ********************************************************')
  102 FORMAT(/
     1' ****** MAX. NORMAL DISPLACEMENT, LOAD SET B ************',/,
     1' WWWMAX(2)=',1P,E12.4,', LOCATW(2)=1000*ISEG+I=',I6,/,
     1' ********************************************************')
       IF (ILOOP.EQ.1) WRITE(IFILE4,103) STRMAX(ILOOP),LOCATS(ILOOP)
       IF (ILOOP.EQ.2) WRITE(IFILE4,104) STRMAX(ILOOP),LOCATS(ILOOP)
  103  FORMAT(/
     1' ****** MAX. EFF. STRESS IN ISOTROPIC WALL,LOAD A ******',/,
     1' STRMAX(1)=',1P,E12.4,', LOCATS(1)=1000*ISEG+I=',I6,/,
     1' ******************************************************')
  104  FORMAT(/
     1' ****** MAX. EFF. STRESS IN ISOTROPIC WALL,LOAD B ******',/,
     1' STRMAX(2)=',1P,E12.4,', LOCATS(2)=1000*ISEG+I=',I6,/,
     1' ******************************************************')
C END AUG 1999
  105 CONTINUE
C
C
C     PRINT OUT CIRCUMFERENTIAL DISTRIBUTIONS FOR NCIRC AXIAL STATIONS.
C
      CALL GASP(S,I2   ,3,IARC(1))
      IF (NCIRC.EQ.0) GO TO 175
      DO 170 ICIRC=1,NCIRC
      ISEG = ITHETA(ICIRC)/1000
      IPOINT = ITHETA(ICIRC) - ISEG*1000
      ITOT = 0
      ISEG1 = ISEG - 1
      IF (ISEG1.EQ.0) GO TO 120
      DO 110 I=1,ISEG1
110   ITOT = ITOT + I5(I)
120   IGLOB = ITOT + IPOINT
      WRITE(IFILE4,130)IPOINT,ISEG,S(IGLOB)
130   FORMAT(/,' CIRCUMFERENTIAL VARIATION OF SUPERPOSED QUANTITIES',
     1' AT POINT NO.',I3,/,' SEGMENT NO.',I3,', MERIDIONAL STATION=',
     21P,E11.3)                    
      IF (ILOOP.EQ.1) WRITE(IFILE4,22)
      IF (ILOOP.EQ.2) WRITE(IFILE4,23)
      IF (ISTRSS(ISEG).EQ.0.AND.ISTRES.EQ.0) WRITE(IFILE4,30)
      IF (ISTRSS(ISEG).EQ.1.AND.NWALL(ISEG).NE.4.AND.NWALL(ISEG).NE.9)
     1     WRITE(IFILE4,40)
      IF (ISTRSS(ISEG).EQ.1.AND.(NWALL(ISEG).EQ.4.OR.NWALL(ISEG).EQ.9))
     1     WRITE(IFILE4,45)
      IF (ISTRSS(ISEG).EQ.2) WRITE(IFILE4,45)
      IF (ISTRSS(ISEG).EQ.0.AND.ISTRES.EQ.1) WRITE(IFILE4,45)
      CFACT = 1.0
      CDIF  = (ABS(THETAM) - 3.1415)/3.1415
      IF (ABS(CDIF).LT.0.1) THEN
         IF (NSTART.NE.0.AND.NFIN.NE.0) THEN
            IF ((NSTART*NFIN).LT.0) THEN
               CFACT = 2.0
            ENDIF
         ENDIF
      ENDIF
      DTHETA = CFACT*THETAM/FLOAT(NTHETA-1)
      THET = -DTHETA
      DO 160 I=1,NTHETA
      THET = THET + DTHETA
      TDEG = THET*180./3.141593
      IF (ISTRSS(ISEG).EQ.0.OR.ISTRSS(ISEG).EQ.2)
     1 WRITE(IFILE4,140)I,TDEG,(TMODE(I,ICIRC,J),J=1,9)
140   FORMAT(I5,1P10E12.3)
      IF (ISTRSS(ISEG).NE.1.OR.NWALL(ISEG).EQ.4.OR.NWALL(ISEG).EQ.9)
     1          GO TO 160
C     CIRCUMFERENTIAL DISTRIBUTIONS OF EFFECTIVE STRESS COMPONENTS
      SIGEIN = SQRT(TMODE(I,ICIRC,4)**2 + TMODE(I,ICIRC,7)**2
     1- TMODE(I,ICIRC,4)*TMODE(I,ICIRC,7) + 3.*TMODE(I,ICIRC,6)**2)
      SIGEO  = SQRT(TMODE(I,ICIRC,5)**2 + TMODE(I,ICIRC,8)**2
     1- TMODE(I,ICIRC,5)*TMODE(I,ICIRC,8) + 3.*TMODE(I,ICIRC,9)**2)
      WRITE(IFILE4,150)I,TDEG,(TMODE(I,ICIRC,J),J=1,9),SIGEIN,SIGEO
150   FORMAT(I5,1P12E10.2)
160   CONTINUE
170   CONTINUE
  175 CONTINUE
      IF (NTOT.EQ.0) RETURN
      IF (IREST.NE.2) NVEC = IABS(NSTART-NFIN)/IABS(INCR) + 1
      IANALY = ANALY
      IF (IREST.EQ.2.AND.IANALY.NE.1) NVEC = MVEC
      IF (IREST.EQ.2.AND.IANALY.EQ.1) NVEC = 1
      MTHETA = NTHETA
180   MXDIM = MTHETA*NTOT*4
C BEG MAR 2007
      IF (MXDIM.LT.100000) GO TO 190
C END MAR 2007
      MTHETA = 2*MTHETA/3
      GO TO 180
190   CONTINUE
      DO 200 I=1,MXDIM
200   FF(I) = 0.0
C     SUPERPOSITION OF DISCRETE RING FORCES FOR ALL HARMONICS.
      IF (ILOOP.EQ.1)CALL SUPER(MTHETA,NTOT,NVEC,FF,F,IANALY,RHF,ILOOP)
      IF (ILOOP.EQ.2)CALL SUPER(MTHETA,NTOT,NVEC,FF,F,IANALY,RHFIX,
     1                                                           ILOOP)
      RETURN
      END
C
C
C
C=DECK      SUPER
      SUBROUTINE SUPER(MTHETA,NTOT,NVEC,FF,F,IANALY,RHF,ILOOP)
C     CALLED FROM OUTNON, WHOSE TRACE IS OUT2, READIT,MAIN
C     SUPERPOSE DISCRETE RING FORCES AND MOMENTS
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
      COMMON/RING8/UVW(10,30,3)
      COMMON/RING9/AAAX(10,30),BBBX(10,30),CCCX(10,30)
      COMMON/RING10/RADRNG(198)
      COMMON/RING11/DXGLOB(10,30),DYGLOB(10,30),DZGLOB(10,30)
C BEG OCT 2011
      COMMON/RING12/SPRLNG(30,198),SPRDLG(30,198),SPRLOD(30,198)
      COMMON/RING13/VERMX(198),CIRMX(198),RADMX(198),FMOMX(198)
      COMMON/RING14/CIRC1(50,198),CIRC2(50,198)
      COMMON/RING15/YPLUS1(50,198),YPLUS2(50,198)
      COMMON/RING16/MCIRC1(198),MCIRC2(198)
      COMMON/RING18/CIRANG(198)
C END OCT 2011
      DIMENSION SPRFCE(10,30),FLONG(30),SPFRAD(30),SPFCIR(30)
      DIMENSION SPFVER(30),ANGPHI(30),ANGGAM(30),FMONET(30)
C BEG OCT 2011
      DIMENSION SPFMOM(30)
C END OCT 2011
      DIMENSION RADNET(30),CIRNET(30),VERNET(30),NOTANG(30)
      DIMENSION ALTITV(30),ALTITH(30),ALTITS(30),ALTITM(30)
      DIMENSION CIRC(99),VERAMP(99),CIRAMP(99),RADAMP(99),FMOAMP(99)
      DIMENSION DELTAL(30)
C END MAR 2008
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/RESTRT/IREST
      DIMENSION F(NTOT,NVEC,4),FF(MTHETA,NTOT,4)
      DIMENSION RHF(*)
      DO 5 K = 1,198
5     RHF(K) = 0.0
      CFACT = 1.0
      CDIF  = (ABS(THETAM) - 3.1415)/3.1415
      IF (ABS(CDIF).LT.0.1) THEN
         IF (NSTART.NE.0.AND.NFIN.NE.0) THEN
            IF ((NSTART*NFIN).LT.0) THEN
               CFACT = 2.0
            ENDIF
         ENDIF
      ENDIF
      DTHETA = CFACT*THETAM/FLOAT(MTHETA-1)
C
      DO 40 IVEC=1,NVEC
      FN = FLOAT(NSTART + (IVEC-1)*INCR)
      DO 30 K=1,NTOT
      ANGLE = - DTHETA
      DO 20 J=1,MTHETA
      ANGLE = ANGLE + DTHETA
      FNANGL = ABS(FN*ANGLE)
      SI = SIN(FNANGL)
      CO = COS(FNANGL)
      IF (FN.GT.0.0) GO TO 10
      SI = CO
      CO = SIN(FNANGL)
10    CONTINUE
      IF (IREST.EQ.2) GO TO 15
      FF(J,K,1) = FF(J,K,1) + F(K,IVEC,1)*SI
C     SUPERPOSED FORCES AND MOMENTS ARE IN FF
C        FF(J,K,1) = HOOP FORCE AT JTH CIRC. POINT IN KTH RING
C        FF(J,K,2) = OUT-OF-PLANE MOMENT
C        FF(J,K,3) = IN-PLANE MOMENT
C        FF(J,K,4) = TORQUE
      FF(J,K,2) = FF(J,K,2) + F(K,IVEC,2)*SI
      IF ((NTOT*NVEC*3).GT.6250) GO TO 20
      FF(J,K,3) = FF(J,K,3) + F(K,IVEC,3)*SI
      IF ((NTOT*NVEC*4).GT.6250) GO TO 20
      FF(J,K,4) = FF(J,K,4) + F(K,IVEC,4)*CO
      GO TO 20
   15 CONTINUE
C
      NPOWER = 2
      IF (IANALY.EQ.1) NPOWER = 1
      FF(J,K,1) = FF(J,K,1) + (AMPLTD*F(K,IVEC,1)*SI)**NPOWER
C     SUPERPOSED FORCES AND MOMENTS ARE IN FF
C        FF(J,K,1) = HOOP FORCE AT JTH CIRC. POINT IN KTH RING
C        FF(J,K,2) = OUT-OF-PLANE MOMENT
C        FF(J,K,3) = IN-PLANE MOMENT
C        FF(J,K,4) = TORQUE
      FF(J,K,2) = FF(J,K,2) + (AMPLTD*F(K,IVEC,2)*SI)**NPOWER
      IF ((NTOT*NVEC*3).GT.6250) GO TO 20
      FF(J,K,3) = FF(J,K,3) + (AMPLTD*F(K,IVEC,3)*SI)**NPOWER
      IF ((NTOT*NVEC*4).GT.6250) GO TO 20
      FF(J,K,4) = FF(J,K,4) + (AMPLTD*F(K,IVEC,4)*CO)**NPOWER
20    CONTINUE
      FNANGL = ABS(FN*THETAS)
      SI = SIN(FNANGL)
      CO = COS(FNANGL)
      IF (FN.GT.0.0) GO TO 22
      SI = CO
      CO = SIN(FNANGL)
22    CONTINUE
      IF (IREST.NE.2) RHF(K) = RHF(K) + F(K,IVEC,1)*SI
      IF (IREST.EQ.2) RHF(K) = RHF(K) + AMPLTD*F(K,IVEC,1)*SI
30    CONTINUE
40    CONTINUE
      IF (IREST.NE.2) GO TO 48
      IF (IANALY.EQ.1) GO TO 48
      DO 47 I = 1,4
      DO 46 K = 1,NTOT
      DO 45 J = 1,MTHETA
      FF(J,K,I) = SQRT(FF(J,K,I))
   45 CONTINUE
   46 CONTINUE
   47 CONTINUE
   48 CONTINUE
      IF ((NTOT*NVEC*3).LT.6250) GO TO 60
      WRITE(IFILE4,50)
50    FORMAT(/,' DISCRETE RING IN-PLANE MOMENT NOT CALCULATED',/,
     1' BECAUSE (NO. RINGS)*(NO. HARMONICS)*3 EXCEEDS 6250',/)
60    IF ((NTOT*NVEC*4).LT.6250) GO TO 80
      WRITE(IFILE4,70)
70    FORMAT(/,' DISCRETE RING TORQUE NOT CALCULATED BECAUSE',/,
     1' (NO. RINGS)*(NO. HARMONICS)*4 EXCEEDS 6250',/)
80    CONTINUE
      IF (IOYES(3).EQ.0) GO TO 205
C BEG MAR 2008
      IGROUN = 0
C END MAR 2008
      DO 200 K=1,NTOT
C BEG MAR 2008
      IF (NTYPAL(K).EQ.0) GO TO 200 
      IF (NTYPAL(K).EQ.-1) GO TO 121
C END MAR 2008
      IF (ILOOP.EQ.1) WRITE(IFILE4,90)K
      IF (ILOOP.EQ.2) WRITE(IFILE4,95)K
   90 FORMAT(/,20X,' FORCE, MOMENT, AND TORQUE RESULTANTS FOR RING NO.',
     1 I3,'  (LOAD SYSTEM "A")')
   95 FORMAT(/,20X,' FORCE, MOMENT, AND TORQUE RESULTANTS FOR RING NO.',
     1 I3,'  (LOAD SYSTEM "B")')
      WRITE(IFILE4,100)
100   FORMAT(/' STATION NO.    CIRC. ANGLE          HOOP FORCE    OUT',
     1'-OF-PLANE MOMENT    IN-PLANE-MOMENT         TORQUE',/)
      ANGLE = -DTHETA
      DO 120 I=1,MTHETA
      ANGLE = ANGLE + DTHETA
      TDEG = ANGLE*180./3.1415927
      WRITE(IFILE4,110)I,TDEG,(FF(I,K,J),J=1,4)
110   FORMAT(I7,1P5E20.6)                     
120   CONTINUE
C
C BEG MAR 2008
  121 CONTINUE
C  Print out forces in springs
      IF (NTYPAL(K).EQ.-1.AND.NGROUN(K).EQ.1) THEN
C
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(/,A,/,A,I3,/,A)')
     1 ' ***************** OUTPUT RELATING TO SPRINGS ****************',
     1 ' The following output is for springs attached to ring no.',K,
     1 ' *************************************************************'
C
         WRITE(IFILE4,'(A,/,A)')
     1 ' The following are input quantities relating',
     1 ' to all the springs attached to this ring:'
         WRITE(IFILE4,'(A,I12,A,/,A)')
     1 ' NTYPAL =',NTYPAL(K),' =index for type of ring (NTYPAL = -1',
     1 '           means a ring with springs attached to it.)'
         WRITE(IFILE4,'(A,I12,A,/,A,/,A,/,A)')
     1 ' NGROUN =',NGROUN(K),' = 1 if springs are attached to ground,',
     1 '           = 0 if springs are attached to a previous',
     1 '           ring. (NOTE: The coding has not been',
     1 '           written for the NGROUN = 0 option.)'
         WRITE(IFILE4,'(A,I12,A,/,A)')
     1 ' NSPRNG =',NSPRNG(K),' = number of springs attached to this',
     1 '                         ring.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPRAXL =',SPRAXL(K),' = global axial coordinate of this',
     1 '                         ring.'
         JJUP = NSPRNG(K)
         WRITE(IFILE4,'(A,I2,A,A,/,(1P5E12.4))')
     1 ' SPRANG =',NSPRNG(K),' circumferential angles of spring',
     1 ' attachment points on this ring:',(SPRANG(J,K),J=1,JJUP)
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(A,I2,A,I2,A,/,(1P5E12.4))')
     1 ' SPRKON =',NSPRNG(K),' spring constants for the',NSPRNG(K),
     1 ' springs attached to this ring:',(SPRKON(J,K),J=1,JJUP)
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPREC1 =',SPREC1(K),' = radial eccentricity e1 of the',
     1 '           attachment points of all the springs to this ring.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPREC2 =',SPREC2(K),' = axial  eccentricity e2 of the',
     1 '           attachment points of all the springs to this ring.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A,/,A)')
     1 ' SPRAXG =',SPRAXG(K),' = global axial coordinate of the',
     1 '           attachment of all the springs associated with this',
     1 '           ring to ground.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPRRAD =',SPRRAD(K),' = radius of spring ground attachment',
     1 '                         points'
         WRITE(IFILE4,'(A,I2,A,A,/,(1P5E12.4))')
     1 ' SPRAGG =',NSPRNG(K),' circumferential angles of spring',
     1 ' attachment points to ground:',(SPRAGG(J,K),J=1,JJUP)
C
         IGROUN = IGROUN + 1
         IF (ILOOP.EQ.1) WRITE(IFILE4,122) K
         IF (ILOOP.EQ.2) WRITE(IFILE4,123) K
C23456789012345678901234567890123456789012345678901234567890123456789012
  122 FORMAT(/,' QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.',
     1   I3,' (LOAD SYSTEM "A")')
  123 FORMAT(/,' QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.',
     1   I3,' (LOAD SYSTEM "B")')
         WRITE(IFILE4,124)
  124 FORMAT(/,
     1'           SPRANG(i)                           SPRKON(i)',
     1'   SPRFCE(i)',/,
     1' SPRING   CIRC. ANGLE   SPRING    CHANGE IN      SPRING',
     1'     SPRING',/,
     1'  NO.    OF ATTACHMENT LENGTH, L  LENGTH, dL    CONSTANT',
     1'     FORCE',/,
     1'         POINT ON RING')
C
         JJUP = NSPRNG(K)
C
         DO 127 IANGLE = 1,JJUP
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG FEB 2012
C           WRITE(IFILE4,'(/,A,2I3,1P3E12.4)')
C    1    ' IGROUN,IANGLE,U,V,W=',IGROUN,IANGLE,UVW(IGROUN,IANGLE,1),
C    1      UVW(IGROUN,IANGLE,2),UVW(IGROUN,IANGLE,3)
C
C           WRITE(IFILE4,'(/,A,A,/,1P3E12.4)')
C    1    ' DXGLOB(IGROUN,IANGLE),DYGLOB(IGROUN,IANGLE),',
C    1    ' DZGLOB(IGROUN,IANGLE) =',DXGLOB(IGROUN,IANGLE),
C    1      DYGLOB(IGROUN,IANGLE),DZGLOB(IGROUN,IANGLE)
C
C           WRITE(IFILE4,'(/,A,A,/,1P3E12.4)')
C    1    ' AAAX(IGROUN,IANGLE),BBBX(IGROUN,IANGLE),',
C    1    ' CCCX(IGROUN,IANGLE) =',AAAX(IGROUN,IANGLE),
C    1      BBBX(IGROUN,IANGLE),CCCX(IGROUN,IANGLE)
C END FEB 2012
C         The change in length of the spring due to shell deformation is
C         given by
C         (delta L) =    (A*dx + B*dy + C*dz)/L
C         in which the undeformed length of the spring, L, is given by
C         L = sqrt(A*A + B*B + C*C)
C         in which
C         A =(XRING -XGROUND);  B =(YRING -YGROUND); C =(ZRING-ZGROUND)
C         where XRING, YRING, ZRING are the global cartesian coordinates
C         of the end of the spring which is connected to the fake ring
C         and XGROUND, YGROUND, ZGROUND are the global cartesian
C         coordinates of the end of the spring connected to ground.
C         In this subroutine A,B,C are called AAAX, BBBX, CCCX
C
            FLONG2 = AAAX(IGROUN,IANGLE)**2 + BBBX(IGROUN,IANGLE)**2
     1                                      + CCCX(IGROUN,IANGLE)**2
            FLONG(IANGLE) = SQRT(FLONG2)
C
            DELTAL(IANGLE) =
     1              (AAAX(IGROUN,IANGLE)*DXGLOB(IGROUN,IANGLE)
     1             + BBBX(IGROUN,IANGLE)*DYGLOB(IGROUN,IANGLE)
     1             + CCCX(IGROUN,IANGLE)*DZGLOB(IGROUN,IANGLE))/
     1                                                    FLONG(IANGLE)
C
            SPRFCE(IGROUN,IANGLE) = SPRKON(IANGLE,K)*DELTAL(IANGLE)
C
C BEG OCT 2011
            SPRLNG(IANGLE,K) = FLONG(IANGLE)
            SPRDLG(IANGLE,K) = DELTAL(IANGLE)
            SPRLOD(IANGLE,K) = SPRKON(IANGLE,K)*DELTAL(IANGLE)
C END OCT 2011
C23456789012345678901234567890123456789012345678901234567890123456789012
            WRITE(IFILE4,125)
     1       IANGLE,SPRANG(IANGLE,K),FLONG(IANGLE),DELTAL(IANGLE),
     1       SPRKON(IANGLE,K),SPRFCE(IGROUN,IANGLE)
  125       FORMAT(I4,1PE16.4,1P4E12.4)
  127    CONTINUE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(/,A,I3,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' IN THE FOLLOWING LIST THE CONCENTRATED SPRING LOADS AT RING',K,
     1 ' ARE RESOLVED IN THE SHELL COORDINATE DIRECTIONS: RADIAL,',
     1 ' CIRCUMFERENTIAL, AND AXIAL. CONCENTRATED LOADS IN THESE',
     1 ' SHELL COORDINATE DIRECTIONS MAY BE CALLED FOR AS PART OF THE',
     1 ' INPUT DATA IN A SUBSEQUENT BIGBOSOR4 MODEL CONSTRUCTED BY',
     1 ' YOU IN ORDER TO DETERMINE THE CONTRIBUTION OF HIGH-CIRCUMFER-',
     1 ' ENTIAL-WAVENUMBER HARMONICS TO STRESS AND BUCKLING BEHAVIOR.'
C
         IF (ILOOP.EQ.1) WRITE(IFILE4,122) K
         IF (ILOOP.EQ.2) WRITE(IFILE4,123) K
         WRITE(IFILE4,129)
  129 FORMAT(/,
     1' SPRING    AZIMUTHAL  INCLINATION   RADIAL      CIRCUMF.',
     1'    VERTICAL',/,
     1'  NO.       ANGLE        ANGLE      FORCE        FORCE  ',
     1'     FORCE',/,
     1'           RELATIVE     RELATIVE   ON RING      ON RING ',
     1'    ON RING',/,
     1'           TO RING      TO RING')
C
            PI = 3.1415927
         DO 130 IANGLE = 1,JJUP
            SLONG =SQRT(AAAX(IGROUN,IANGLE)**2 +CCCX(IGROUN,IANGLE)**2)
            RADDIF = ABS(SPRRAD(K) -(RADRNG(K) + SPREC1(K)))
            THETAG = (SPRAGG(IANGLE,K) - SPRANG(IANGLE,K))*PI/180.
            DBIG = SPRRAD(K)*(1.-COS(THETAG))
            SPRRAT = (RADDIF-DBIG)/SLONG
            SPRPHI = ACOS(SPRRAT)
            IF (SPRAGG(IANGLE,K).LT.SPRANG(IANGLE,K)) SPRPHI = -SPRPHI
            SPRGAM = ACOS(SLONG/FLONG(IANGLE))
            IF (BBBX(IGROUN,IANGLE).GT.0.) SPRGAM = -SPRGAM
            SPRFCS = SPRFCE(IGROUN,IANGLE)*COS(SPRGAM)
            SPFRAD(IANGLE) = SPRFCS*COS(SPRPHI)
            SPFCIR(IANGLE) = SPRFCS*SIN(SPRPHI)
            SPFVER(IANGLE) = -SPRFCE(IGROUN,IANGLE)*SIN(SPRGAM)
C BEG OCT 2011
            SPFMOM(IANGLE) = SPFRAD(IANGLE)*SPREC2(K)
     1                      +SPFVER(IANGLE)*SPREC1(K)
            SPFNRM = SQRT(SPFRAD(IANGLE)**2 + SPFCIR(IANGLE)**2
     1                                      + SPFVER(IANGLE)**2)
            IF (ABS(SPFRAD(IANGLE)).LT.0.0001*SPFNRM)
     1              SPFRAD(IANGLE) = 0.0001*SPFNRM
            IF (ABS(SPFCIR(IANGLE)).LT.0.0001*SPFNRM)
     1              SPFCIR(IANGLE) = 0.0001*SPFNRM
            IF (ABS(SPFVER(IANGLE)).LT.0.0001*SPFNRM)
     1              SPFVER(IANGLE) = 0.0001*SPFNRM
C END OCT 2011
            ANGPHI(IANGLE) = SPRPHI*180./PI
            ANGGAM(IANGLE) = SPRGAM*180./PI
C23456789012345678901234567890123456789012345678901234567890123456789012
            WRITE(IFILE4,125) IANGLE,ANGPHI(IANGLE),ANGGAM(IANGLE),
     1                SPFRAD(IANGLE),SPFCIR(IANGLE),SPFVER(IANGLE)
  130    CONTINUE
C
         IF (ILOOP.EQ.1) WRITE(IFILE4,122) K
         IF (ILOOP.EQ.2) WRITE(IFILE4,123) K
         WRITE(IFILE4,131)
  131 FORMAT(/,
     1' SPRING    AZIMUTHAL  INCLINATION   FORCES       SPRING ',/,
     1'  NO.       ANGLE       ANGLE     ON SPRING     CONSTANT',/,
     1'           RELATIVE    RELATIVE  DERIVED FROM DERIVED FROM',/,
     1'           TO RING     TO RING   SHELL LOADS  SHELL LOADS')
C
         DO 134 IANGLE = 1,JJUP
            SPRPHI = ANGPHI(IANGLE)*PI/180.
            SPRGAM = ANGGAM(IANGLE)*PI/180.
            CPHI = COS(SPRPHI)
            SPHI = SIN(SPRPHI)
            CGAM = COS(SPRGAM)
            SGAM = SIN(SPRGAM)
            FCESPR = -(SPFRAD(IANGLE)*CPHI +SPFCIR(IANGLE)*SPHI)*CGAM
     1               + SPFVER(IANGLE)*SGAM
            STFSPR = 0.0
            IF (DELTAL(IANGLE).NE.0.0)
     1      STFSPR = ABS(FCESPR/DELTAL(IANGLE))
            WRITE(IFILE4,133) IANGLE,ANGPHI(IANGLE),ANGGAM(IANGLE),
     1                        FCESPR,STFSPR 
  133       FORMAT(I4,1PE17.4,1P3E12.4)
  134    CONTINUE
C
C  Find the net forces at the attachment points from the springs on ring.
C
         CALL MOVER(0,0,NOTANG,1,30)
C BEG OCT 2011
C        CALL MOVER(0.,0,RADNET,1,30)
C        CALL MOVER(0.,0,CIRNET,1,30)
C        CALL MOVER(0.,0,VERNET,1,30)
C        CALL MOVER(0.,0,FMONET,1,30)
         CALL MOVER(SPFRAD,1,RADNET,1,30)
         CALL MOVER(SPFCIR,1,CIRNET,1,30)
         CALL MOVER(SPFVER,1,VERNET,1,30)
         CALL MOVER(SPFMOM,1,FMONET,1,30)
C END OCT 2011
C
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 140 IANGLE = 1,JJUP
         IANGL1 = IANGLE + 1
         IF (IANGL1.GT.JJUP) GO TO 140
         DO 135 JANGLE = IANGL1,JJUP
            DIFF = ABS(SPRANG(JANGLE,K) - SPRANG(IANGLE,K))
            IF (DIFF.LT.1.0) THEN
               IF (NOTANG(JANGLE).EQ.0) RADNET(IANGLE) = SPFRAD(IANGLE)
               RADNET(IANGLE) = RADNET(IANGLE) + SPFRAD(JANGLE)
               SPFRAD(JANGLE) = 0.
               IF (NOTANG(JANGLE).EQ.0) CIRNET(IANGLE) = SPFCIR(IANGLE)
               CIRNET(IANGLE) = SPFCIR(IANGLE)
               CIRNET(IANGLE) = CIRNET(IANGLE) + SPFCIR(JANGLE)
               SPFCIR(JANGLE) = 0.
               IF (NOTANG(JANGLE).EQ.0) VERNET(IANGLE) = SPFVER(IANGLE)
               VERNET(IANGLE) = VERNET(IANGLE) + SPFVER(JANGLE)
               SPFVER(JANGLE) = 0.
               NOTANG(JANGLE) = 1
            ENDIF
  135    CONTINUE
  140    CONTINUE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' THE SPRINGS MAY BE ARRANGED IN PAIRS THAT MEET AT THE "FAKE"',
     1 ' RING. THEREFORE, SOME OF THE SPRING FORCES FROM INDIVIDUAL',
     1 ' SPRINGS MAY COMBINE TO CANCEL EACHOTHER OR TO DOUBLE THE',
     1 ' LOAD "SEEN" AT A PARTICULAR CIRCUMFERENTIAL LOCATION ON THE',
     1 ' "FAKE" RING. THIS COMBINING HAS BEEN ACCOUNTED FOR IN THE',
     1 ' FOLLOWING LIST OF CONCENTRATED LOADS RESOLVED IN THE SHELL',
     1 ' COORDINATE DIRECTIONS: RADIAL, CIRCUMFERENTIAL, AND AXIAL.'
         IF (ILOOP.EQ.1) WRITE(IFILE4,122) K
         IF (ILOOP.EQ.2) WRITE(IFILE4,123) K
         WRITE(IFILE4,142)
  142 FORMAT(/' CIRCUMFERENTIAL  NET RADIAL    NET CIRCUMFE',
     1'R. NET VERTICAL   NET MERIDIONAL',/,
     1        '   COORDINATE    FORCE ON RING  FORCE ON RIN',
     1'G FORCE ON RING   MOMENT ON RING')
C
         BASE = (RADRNG(K) + SPREC1(K))*10.*PI/180.
         DO 145 IANGLE = 1,JJUP
            IF (NOTANG(IANGLE).EQ.0) THEN
              FMONET(IANGLE) = RADNET(IANGLE)*SPREC2(K)
     1                        +VERNET(IANGLE)*SPREC1(K)
              ALTITV(IANGLE) = 2.*VERNET(IANGLE)/BASE
              ALTITS(IANGLE) = 2.*CIRNET(IANGLE)/BASE
              ALTITH(IANGLE) = 2.*RADNET(IANGLE)/BASE
              ALTITM(IANGLE) = 2.*FMONET(IANGLE)/BASE
              WRITE(IFILE4,144) SPRANG(IANGLE,K),RADNET(IANGLE),
     1             CIRNET(IANGLE),VERNET(IANGLE),FMONET(IANGLE)
  144         FORMAT(1PE13.4,1P4E15.4)
            ENDIF
  145    CONTINUE
C
C    Next, suggest circumferential distributions of line loads, V, H, S, M
C    needed to simulate the concentrated spring loads in another
C    BIGBOSOR4 run.
C
C23456789012345678901234567890123456789012345678901234567890123456789012
         ICIRC = 0
         DO 150 IANGLE = 1,JJUP
            IF (NOTANG(IANGLE).EQ.0) THEN
               ICIRC = ICIRC + 1
               IF (SPRANG(IANGLE,K).LT.5.0
     1                             .OR.SPRANG(IANGLE,K).GT.355.) THEN
                  CIRC(ICIRC)  =  0.
                  IF (SPRANG(IANGLE,K).GT.355.) CIRC(ICIRC) = 360. 
                  VERAMP(ICIRC)= ALTITV(IANGLE)
                  CIRAMP(ICIRC)= ALTITS(IANGLE)
                  RADAMP(ICIRC)= ALTITH(IANGLE)
                  FMOAMP(ICIRC)= ALTITM(IANGLE)
                  JCIRC = ICIRC + 1
                  CIRC(JCIRC)  =  5.0
                  VERAMP(JCIRC)= 0.
                  CIRAMP(JCIRC)= 0.
                  RADAMP(JCIRC)= 0.
                  FMOAMP(JCIRC)= 0.
                  ICIRC = JCIRC
               ELSE
                  ICIRC = ICIRC + 1
                  JCIRC = ICIRC
                  IF (ICIRC.EQ.2) THEN
                     CIRC(1) = 0.
                     VERAMP(1)= 0.
                     CIRAMP(1)= 0.
                     RADAMP(1)= 0.
                     FMOAMP(1)= 0.
                     JCIRC = ICIRC + 1
                  ENDIF
                  ICIRC = JCIRC 
                  CIRC(ICIRC)  = SPRANG(IANGLE,K)
                  VERAMP(ICIRC)= ALTITV(IANGLE)
                  CIRAMP(ICIRC)= ALTITS(IANGLE)
                  RADAMP(ICIRC)= ALTITH(IANGLE)
                  FMOAMP(ICIRC)= ALTITM(IANGLE)
                  JCIRC = ICIRC - 1
                  CIRC(JCIRC)  = SPRANG(IANGLE,K) - 5.0
                  VERAMP(JCIRC)= 0. 
                  CIRAMP(JCIRC)= 0. 
                  RADAMP(JCIRC)= 0. 
                  FMOAMP(JCIRC)= 0. 
                  JCIRC = ICIRC + 1
                  CIRC(ICIRC+1)  = SPRANG(IANGLE,K) + 5.0
                  VERAMP(JCIRC)= 0.
                  CIRAMP(JCIRC)= 0.
                  RADAMP(JCIRC)= 0.
                  FMOAMP(JCIRC)= 0.
                  ICIRC = ICIRC + 1
                  IF (IANGLE.EQ.JJUP.AND.SPRANG(IANGLE,K).LT.355.) THEN
                     ICIRC = ICIRC + 1
                     CIRC(ICIRC) = 355.
                     VERAMP(ICIRC)= 0.
                     CIRAMP(ICIRC)= 0.
                     RADAMP(ICIRC)= 0.
                     FMOAMP(ICIRC)= 0.
                  ENDIF
               ENDIF
            ENDIF
  150    CONTINUE
         NCIRC = ICIRC
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1' ******************* IMPORTANT NOTE **************************',
     1' This model essentially smears out the springs. Only the n = 0',
     1' (axisymmetric up-and-down displacement and/or uniform rolling',
     1' about the axis of revolution) and n = 1 (uniform lateral',
     1' displacement and/or pitching displacement) are predicted',
     1' accurately. In order to obtain the static response for higher',
     1' circumferential wavenumbers, n, than n = 0 and/or n = 1, you',
     1' must include as BIGBOSOR4 input in another run the',
     1' concentrated forces that the springs apply to the "fake" ring',
     1' and therefore to the shell where they are attached.',
     1' ***************************************************************'
C
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' THE FOLLOWING CAN BE USED AS A GUIDE FOR BIGBOSOR4 INPUT FOR',
     1 ' LINEAR NON-AXISYMMETRIC STATIC RESPONSE INCLUDING',
     1 ' CONCENTRATED LOADS APPLIED BY THE SPRINGS TO THE SHELL. IN',
     1 ' THE FOLLOWING OUTPUT THE CONCENTRATED SPRING LOADS ARE',
     1 ' MODELED AS LINE LOADS WITH TRIANGULAR-SHAPED "PULSES". THE',
     1 ' AREA UNDERNEATH EACH "PULSE" IS EQUAL TO THE CONCENTRATED',
     1 ' SPRING LOAD AS RESOLVED IN THE RADIAL, CIRCUMFERENTIAL, AND',
     1 ' AXIAL SHELL COORDINATE DIRECTIONS. THESE LINE LOADS ARE THE',
     1 ' "H", "S", "V", AND "M" LINE LOADS, INPUT FOR WHICH IS CALLED',
     1 ' FOR BY BIGBOSOR4.'
C
         IF (ILOOP.EQ.1) WRITE(IFILE4,122) K
         IF (ILOOP.EQ.2) WRITE(IFILE4,123) K
         WRITE(IFILE4,152)
  152 FORMAT(/' CIRCUMFERENTIAL  RADIAL LINE   CIRCUMFER.LI',
     1'NE VERTICAL LINE  MERIDIONAL LINE',/,
     1        '   COORDINATE     LOAD ON RING   LOAD ON RIN',
     1'G  LOAD ON RING   MOMENT ON RING')
C
         DO 155 ICIRC = 1,NCIRC
           WRITE(IFILE4,154) CIRC(ICIRC) ,RADAMP(ICIRC),
     1        CIRAMP(ICIRC),VERAMP(ICIRC),FMOAMP(ICIRC)
  154      FORMAT(1PE13.4,1P4E15.4)
  155    CONTINUE
C
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' FOR EVEN AND ODD DISTRIBUTIONS OF LINE LOAD ABOUT THE ORIGIN',
     1 ' OF THE CIRCUMFERENTIAL COORDINATE, theta, BIGBOSOR4 REQUIRES',
     1 ' INPUT DATA ONLY IN THE RANGE: 0.0.LE.theta.LE.180. DEGREES.', 
     1 ' ALSO, IT IS BEST TO SUPPLY THE CIRCUMFERENTIAL DISTRIBUTION',
     1 ' OF LINE LOAD AS NORMALIZED, THAT IS, WITH THE PEAK LINE LOAD',
     1 ' EQUAL TO UNITY AND THE ENTIRE DISTRIBUTION MULTIPLIED BY THE',
     1 ' ACTUAL VALUE OF THE PEAK LINE LOAD. THE FOLLOWING LIST',
     1 ' PRESENTS THE CIRCUMFERENTIAL DISTRIBUTION OF SPRING LOADS AT',
     1 ' THIS "FAKE" RING IN THIS MANNER.'
C
         WRITE(IFILE4,
     1   '(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1 ' IN BIGBOSOR4 THERE IS A RULE THAT THE CIRCUMFERENTIAL',
     1 ' DISTRIBUTIONS OF RADIAL LINE LOAD, H, AXIAL LINE LOAD, V, AND',
     1 ' MERIDIONAL LINE MOMENT, M, MUST BE THE SAME. THEREFORE, WE',
     1 ' TRY TO ARRANGE THE SIGNS OF THE LINE LOAD FACTORS SO THAT',
     1 ' THIS IS TRUE FOR THIS CASE. IF ANY CIRCUMFERENTIAL DISTRIBU-',
     1 ' TION CONSISTS ENTIRELY OF ZEROES, THAT DOES N0T COUNT.',
     1 ' IN THE BIGBOSOR4 INPUT YOU SIMPLY INDICATE THAT THERE IS NO',
     1 ' LINE LOAD OF THAT PARTICULAR TYPE. THE CIRCUMFERENTIAL',
     1 ' DISTRIBUTION OF THE CIRCUMFERENTIALLY ORIENTED LINE LOAD, S,',
     1 ' CAN BE DIFFERENT FROM THAT FOR H, V, AND M. NOTE: IF YOU HAVE',
     1 ' MORE THAN ONE RING WITH SPRINGS ATTACHED, MAKE SURE THAT IF',
     1 ' THE SPRINGS ARE ARRANGED DIFFERENTLY ON THE TWO RINGS THAT',
     1 ' EACH OF THE RINGS IS LOCATED IN A DIFFERENT SHELL SEGMENT.'
C
         RADMAX = 0.
         CIRMAX = 0.
         VERMAX = 0.
         FMOMAX = 0.
         DO 160 ICIRC = 1,NCIRC
            RADMAX = AMAX1(RADMAX,ABS(RADAMP(ICIRC)))
            CIRMAX = AMAX1(CIRMAX,ABS(CIRAMP(ICIRC)))
            VERMAX = AMAX1(VERMAX,ABS(VERAMP(ICIRC)))
            FMOMAX = AMAX1(FMOMAX,ABS(FMOAMP(ICIRC)))
  160    CONTINUE
C BEG OCT 2011
C        IF (RADMAX.EQ.0.) RADMAX = 0.0000001 
C        IF (CIRMAX.EQ.0.) CIRMAX = 0.0000001 
C        IF (VERMAX.EQ.0.) VERMAX = 0.0000001 
C        IF (FMOMAX.EQ.0.) FMOMAX = 0.0000001 
         IF (RADMAX.EQ.0.) RADMAX = 1.E-07 
         IF (CIRMAX.EQ.0.) CIRMAX = 1.E-07 
         IF (VERMAX.EQ.0.) VERMAX = 1.E-07 
         IF (FMOMAX.EQ.0.) FMOMAX = 1.E-07 
C END OCT 2011
         VERSGN = 1.0
C BEG OCT 2011
C        IF (VERMAX.GT.0.0000001) THEN
         IF (VERMAX.GE.1.E-07) THEN
C END OCT 2011
            DO 161 ICIRC = 1,NCIRC
               DIFF =(ABS(VERAMP(ICIRC)) - VERMAX)/VERMAX
               IF (ABS(DIFF).LT.0.0001) THEN
                  VERSGN = VERAMP(ICIRC)/ABS(VERAMP(ICIRC))
C BEG OCT 2011
                  CIRANG(K) = CIRC(ICIRC)
                  IF (CIRANG(K).GT.180.) THEN
                     DELTHT = CIRANG(K) - 180.
                     CIRANG(K) = CIRANG(K) - DELTHT
                  ENDIF
C END OCT 2011
                  GO TO 162
               ENDIF
  161       CONTINUE
  162       CONTINUE
         ENDIF
         RADSGN = 1.0
C BEG OCT 2011
C        IF (RADMAX.GT.0.0000001) THEN
         IF (RADMAX.GE.1.E-07) THEN
C END OCT 2011
            DO 163 ICIRC = 1,NCIRC
               DIFF = (ABS(RADAMP(ICIRC)) - RADMAX)/RADMAX
               IF (ABS(DIFF).LT.0.0001) THEN
                  RADSGN = RADAMP(ICIRC)/ABS(RADAMP(ICIRC))
                  GO TO 164
               ENDIF
  163       CONTINUE
  164       CONTINUE
         ENDIF
         IF (RADSGN.NE.VERSGN) RADMAX = -RADMAX 
         FMOSGN = 1.0
C BEG OCT 2011
C        IF (FMOMAX.GT.0.0000001) THEN
         IF (FMOMAX.GE.1.E-07) THEN
C END OCT 2011
            DO 165 ICIRC = 1,NCIRC
               DIFF = (ABS(FMOAMP(ICIRC)) - FMOMAX)/FMOMAX
               IF (ABS(DIFF).LT.0.0001) THEN
                  FMOSGN = FMOAMP(ICIRC)/ABS(FMOAMP(ICIRC))
                  GO TO 166
               ENDIF
  165       CONTINUE
  166       CONTINUE
         ENDIF
         IF (FMOSGN.NE.VERSGN) FMOMAX = -FMOMAX
C
         IF (ILOOP.EQ.1) WRITE(IFILE4,122) K
         IF (ILOOP.EQ.2) WRITE(IFILE4,123) K
C
         WRITE(IFILE4,168) RADMAX,CIRMAX,VERMAX,FMOMAX
  168 FORMAT(/,
     1'                  RADIAL LOAD     CIRC.LOAD     VERT.LOAD     M',
     1'OMENT LOAD',/,
     1'                    FACTOR         FACTOR        FACTOR        ',
     1' FACTOR',/,
     1 13X,1P4E15.4)
C23456789012345678901234567890123456789012345678901234567890123456789012

         WRITE(IFILE4,152)
C
         DO 169 ICIRC = 1,NCIRC
            IF (CIRC(ICIRC).GT.180.) GO TO 170
            RADNRM = RADAMP(ICIRC)/RADMAX
            IF (ABS(RADNRM).LT.0.0001) RADNRM = 0.
            CIRNRM = CIRAMP(ICIRC)/CIRMAX
            IF (ABS(CIRNRM).LT.0.0001) CIRNRM = 0.
            VERNRM = VERAMP(ICIRC)/VERMAX
            IF (ABS(VERNRM).LT.0.0001) VERNRM = 0.
            FMONRM = FMOAMP(ICIRC)/FMOMAX
            IF (ABS(FMONRM).LT.0.0001) FMONRM = 0.
            WRITE(IFILE4,154) CIRC(ICIRC),RADNRM,CIRNRM,VERNRM,FMONRM
  169    CONTINUE
  170    CONTINUE
         NCIRC = ICIRC - 1
C
C BEG OCT 2011
C        IF (ILOOP.EQ.1.AND.(RADAMP(1).NE.0.0.OR.VERAMP(1).NE.0.0
C    1       .OR.RADAMP(NCIRC).NE.0.0.OR.VERAMP(NCIRC).NE.0.0)) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (ILOOP.EQ.1.AND.(RADMAX.GE.1.E-07.OR.VERMAX.GE.1.E-07
     1                                                       )) THEN
C END OCT 2011
          WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,A,/,A)')
     1  ' ******** NOTE ************* NOTE ************ NOTE *********',
     1  ' THE FOLLOWING SAMPLE BOSOR4 INPUT IS VALID ONLY IF:',
     1  ' 1. ONLY LOAD SET A EXISTS. THERE IS NO LOAD SET B.',
     1  ' 2. THE LINE LOADS, V, H, AND M, ARE EVEN FUNCTIONS OF THETA.',
     1  ' 3. THE LINE LOAD, S, IS AN ODD FUNCTION OF THETA.',
     1  ' 4. THERE IS ONLY ONE RING IN THIS SHELL SEGMENT WITH',
     1  ' ATTACHED SPRINGS.',
     1  ' ************************************************************'
C
          WRITE(IFILE4,'(/,A,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A)')
     1  ' BOSOR4 INPUT FOR LINE LOADS CORRESPONDING TO THE OUTPUT',
     1  ' JUST LISTED',
     1  ' H    $ LINE LOAD INPUT FOLLOWS...',
     1  ' 1    $ LINAB=indicator (0, 1, 2 or 3) for load set A and B',
     1  ' H    $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS',
     1  ' 1    $ LINTYP=indicator (0,1,2 or 3) for type of line loads',
     1  ' 4    $ NTYPEL=index (use 4) for input of nonsymmetric loads',
     1  ' 1    $ NLOAD(1)=indicator for axial load or disp. (1 = some)',
     1  ' 1    $ NLOAD(2)=indicator for shear load or disp. (1 = some)',
     1  ' 1    $ NLOAD(3)=indicator for radial load or disp.(1 = some)',
     1  ' 1    $ NLOAD(4)=indicator for line moment or rot. (1 = some)'
          WRITE(IFILE4,
     1               '(1PE12.4,A,/,1PE12.4,A,/,1PE12.4,A,/,1PE12.4,A)')
     1    VERMAX,' $ V(i)=fixed or initial axial load or disp.  V(1)',
     1    CIRMAX,' $ S(i)=fixed or initial shear load or disp.  S(1)',
     1    RADMAX,' $ H(i)=fixed or initial radial load or disp. H(1)',
     1    FMOMAX,' $ M(i)=fixed or initial moment or rotation.  M(1)'
C BEG OCT 2011
          VERMX(K) = VERMAX
          CIRMX(K) = CIRMAX
          RADMX(K) = RADMAX
          FMOMX(K) = FMOMAX
          MCIRC = NCIRC
          IF (CIRC(NCIRC).LT.0.999*180.0) MCIRC = NCIRC + 1
          WRITE(IFILE4,'(I5,A,/,A,/,A)')
     1    MCIRC,' $ NTHETA=number of circumferential callouts for load',
     1  ' 2    $ NOPT=control for how g(THETA) is to be input',
     1  ' 1    $ NODD=control for the oddness or evenness of g(THETA)'
C END OCT 2011
          DO 172 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     CIRC(ICIRC),' $ circumferential coordinate, THETA(',ICIRC,')'
C BEG OCT 2011
           CIRC1(ICIRC,K) = CIRC(ICIRC)
C END OCT 2011
  172     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A,I2,A)')
     1         ' 180.0   $ circumferential coordinate, THETA(',MCIRC,')'
          IF ((MCIRC-NCIRC).EQ.1) CIRC1(MCIRC,K) = 180.0
C END OCT 2011
          DO 174 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     VERAMP(ICIRC)/VERMAX,
     1                  ' $ YPLUS=value of g(THETA) at THETA(',ICIRC,')'
C BEG OCT 2011
           YPLUS1(ICIRC,K) = VERAMP(ICIRC)/VERMAX
C END OCT 2011
  174     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A)')
     1           ' 0.0    $ YPLUS=value of g(THETA) at 180 degrees'
          IF ((MCIRC-NCIRC).EQ.1) YPLUS1(MCIRC,K) = 0.0
          MCIRC1(K) = MCIRC
C END OCT 2011
          WRITE(IFILE4,'(A,/,I5,A,/,A,/,A)')
     1  ' Y    $ Do you want to print out output Fourier expansion?',
C BEG OCT 2011
     1    MCIRC,' $ NTHETA=number of circumferential callouts for load',
     1  ' 2    $ NOPT=control for how g(THETA) is to be input',
     1  ' 2    $ NODD=control for the oddness or evenness of g(THETA)'
C END OCT 2011
          DO 176 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     CIRC(ICIRC),' $ circumferential coordinate, THETA(',ICIRC,')'
C BEG OCT 2011
           CIRC2(ICIRC,K) = CIRC(ICIRC)
C END OCT 2011
  176     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A,I2,A)')
     1         ' 180.0   $ circumferential coordinate, THETA(',MCIRC,')'
          IF ((MCIRC-NCIRC).EQ.1) CIRC2(MCIRC,K) = 180.0
C END OCT 2011
          DO 178 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     CIRAMP(ICIRC)/CIRMAX,
     1                  ' $ YPLUS=value of g(THETA) at THETA(',ICIRC,')'
C BEG OCT 2011
           YPLUS2(ICIRC,K) = CIRAMP(ICIRC)/CIRMAX
C END OCT 2011
  178     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A)')
     1           ' 0.0    $ YPLUS=value of g(THETA) at 180 degrees'
          IF ((MCIRC-NCIRC).EQ.1) YPLUS2(MCIRC,K) = 0.0
          MCIRC2(K) = MCIRC
C END OCT 2011
          WRITE(IFILE4,'(A)')
     1  ' Y    $ Do you want to print out output Fourier expansion?'
         ENDIF
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C END MAR 2008
  200 CONTINUE
  205 CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTPEE
      SUBROUTINE OUTPEE(IPMODE,IARC,I2,I5,NSEG,BMODE,ISTRES)
C     CALLED FROM OUT2, WHOSE TRACE IS READIT,MAIN
C     AXISYMMETRIC PRESTRESS STATE IS PRINTED OUT
C
C BEG SEP 2005
      COMMON/LSTEPS/ISTEP
      COMMON/PSTEPX/PSTEP(200),ENDUVS(200)
      COMMON/IBIGX2/ISTFMS(295),ISTFMR(295),ISKNMX(295)
      COMMON/STRCON/STFMXS(295),STFMXR(295),SKNMAX(295)
      DIMENSION SIGVON(100)
C END SEP 2005
C BEG AUG 1999
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ENDUVX/ENDUV,STRMAX,ARCLEN
C END AUG 1999
      COMMON/RGFCE/ RHF(198)
      COMMON/ALLRNG/ NTOT,IPRE
      COMMON/INSTAB/INDIC
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/STRSEG/ISTRSS(295)
      COMMON/SFLAG/MONOQ
      COMMON/KCHNG/NWALL(295),CCH(295)
C BEG MAR 2007
      DIMENSION IARC(295),I5(295),BMODE(I2,9),S(10000)
C END MAR 2007
      NN = 9*I2
      CALL GASP(BMODE,NN,3,IPMODE)
      IALL = 0
      CALL GASP(S,I2 ,3,IARC(1))
      DO 60 I=1,NSEG
      I5I = I5(I)
      IF (IOSEG(I).NE.0) GO TO 5
      IALL = IALL + I5I
      GO TO 60
    5 CONTINUE
      WRITE(IFILE4,10)I
C BEG DEC 2010
   10 FORMAT(/,25X,'AXISYMMETRIC PRESTRESS DISTRIBUTION FOR SEGMENT',
     1  I4)
C END DEC 2010
      IF (ISTRSS(I).EQ.0.AND.MONOQ.EQ.0) WRITE(IFILE4,20)
      IF (ISTRSS(I).EQ.1.AND.MONOQ.EQ.1
     1      .AND.NWALL(I).NE.4.AND.NWALL(I).NE.9) WRITE(IFILE4,30)
      IF (ISTRSS(I).EQ.1.AND.MONOQ.EQ.1
     1      .AND.(NWALL(I).EQ.4.OR.NWALL(I).EQ.9)) WRITE(IFILE4,35)
      IF (ISTRSS(I).EQ.2) WRITE(IFILE4,35)
      IF (ISTRSS(I).EQ.0.AND.MONOQ.EQ.1) WRITE(IFILE4,35)
20    FORMAT(/,' POINT   STATION        W0         U0          BETA   ',
     1'   UV          N10         N20         M10         M20',/,
     2       '       (ARC LENGTH)   NORMAL   MERIDIONAL     MERID.    ',
     3'  AXIAL       MERID.     CIRCUMF.     MERID.     CIRCUMF.',/,
     4       '                      DISP.   DISPLACEMENT     ROT.     ',
     5'  DISP.     RESULTANT   RESULTANT    MOMENT      MOMENT',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
30    FORMAT(/,' POINT    STATION       W0         U0      SIGMA1(IN) ',
     1'SIGMA1(OUT) SIGMA2(IN) SIGMA2(OUT) SIGMAE(IN) SIGMAE(OUT)',/,
     2       '       (ARC LENGTH)   NORMAL   MERIDIONAL     MERID.    ',
     3'MERIDIONAL   CIRCUMF.   CIRCUMF.    VON MISES EQUIVALENT',/,
     4       '                       DISP.  DISPLACEMENT    STRESS    ',
     5'  STRESS      STRESS     STRESS  INNER FIBER  OUTER FIBER',/)
35    FORMAT(/, ' POINT    STATION       W0         U0       EPSILON 1',
     1'   EPSILON 2   KAPPA 1      KAPPA 2 ',/,
     2          '       (ARC LENGTH)   NORMAL   MERIDIONAL    MERID.  ',
     3'   CIRCUMF.    MERID.      CIRCUMF.',/,
     4          '                       DISP.  DISPLACEMENT    STRAIN ',
     5'    STRAIN     CHANGES IN CURVATURE',/)
C
C BEG OCT 2005
      SKNMAX(I) = 0.
C END OCT 2005
      DO 50 J=1,I5I
      IALL = IALL + 1
      WRITE(IFILE4,40)J,S(IALL),(BMODE(IALL,JJ),JJ=1,8)
C BEG JAN 2011
C40   FORMAT(I5,1P9E12.3)                      
40    FORMAT(I5,1PE12.5,8E12.3)
C END JAN 2011
C BEG AUG 1999
      IF (I.EQ.1.AND.J.EQ.1) THEN
         STRMAX = 0.
         IF (ISTRSS(I).EQ.0.AND.MONOQ.EQ.0) THEN
            ENDUV = BMODE(IALL,4)
            WRITE(IFILE4,42) ENDUV
   42       FORMAT(/' ***** Axial displacement, UV *******',/,
     1    ' ENDUV =',1P,E12.4,/,
     1    ' ************************************************')
C BEG SEP 2005
            IF (ISTEP.GT.0.AND.ISTEP.LE.200)
     1      ENDUVS(ISTEP) = ENDUV
C END SEP 2005
         ENDIF
      ENDIF
      IF (ISTRSS(I).EQ.1.AND.MONOQ.EQ.1.AND.NWALL(I).EQ.2) THEN
C BEG OCT 2005
         SIGVON(J) = MAX(BMODE(IALL,7),BMODE(IALL,8))
         STRMAX = MAX(STRMAX,SIGVON(J))
         SKNMAX(I) = MAX(SKNMAX(I),SIGVON(J))
C END OCT 2005
      ENDIF
      IF (I.EQ.NSEG.AND.J.EQ.I5I) ARCLEN= S(IALL)
C END AUG 1999
50    CONTINUE
C BEG OCT 2005
      DO 55 J = 1,I5I
       DIFF = 1.
       IF (SKNMAX(I).NE.0.) DIFF = ABS(SIGVON(J)-SKNMAX(I))/SKNMAX(I)
       IF (DIFF.LT.0.0001) ISKNMX(I) = J
   55 CONTINUE
C END OCT 2005
60    CONTINUE
C BEG AUG 1999
      WRITE(IFILE4,62) STRMAX
   62 FORMAT(/
     1' ****** MAXIMUM EFFECTIVE STRESS IN ISOTROPIC WALL ******',/,
     1' STRMAX=',1P,E12.4,/,
     1' ******************************************************')
C END AUG 1999
      IF (NTOT.EQ.0) RETURN
      IF (INDIC.EQ.0) RETURN
      IF (IOYES(3).EQ.0) RETURN
      WRITE(IFILE4,70)
70    FORMAT(/,' HOOP FORCES IN DISCRETE RINGS')
      WRITE(IFILE4,80)
80    FORMAT(/,'  RING NO.              HOOP FORCE',/)
      DO 90 I=1,NTOT
90    WRITE(IFILE4,100)I,RHF(I)
100   FORMAT(I7, 1PE20.8)                      
      RETURN
      END
C
C
C
C=DECK      GEOMLIB
C
C  THIS IS THE GEOM LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      ANGLE
C     OVERLAY(3,0)
      SUBROUTINE ANGLE(Y1,Y2,X1,X2,TH12)
      DOUBLE PRECISION Y1,Y2,X1,X2,TH12
      PI = 3.141592654
      TH12 = DATAN2(Y2-Y1,X2-X1)
      IF (TH12.LT.0.0) TH12 = TH12 + 2*PI
      RETURN
      END
C
C
C
C=DECK      ARCDRW
      SUBROUTINE ARCDRW(X1,X2,X3,Y1,Y2,Y3)
C     CALLED FROM GEOM2. TRACE IS GEOM,GEOMTY,READIT,MAIN. .
C     SPHERICAL AND TOROIDAL SHELL GEOMETRY
C
C     (X3,Y3)  IS THE CENTER OF THE CIRCLE
C     (X1,Y1) AND (X2,Y2) ARE THE TWO POINTS ON THE ARC
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      X4=(X2+X1)/2.0
      Y4=(Y2+Y1)/2.0
      IF (X2-X1) 10,40,10
10    IF (Y2-Y1) 20,30,20
20    CONTINUE
C     FOR POINTS OF THE FORM  (X1,Y1) AND (X2,Y2)
      SLOPE=(Y2-Y1)/(X2-X1)
C
C     (X5,Y5)  US THE NEW CENTER COORDINATE
      X5=(X4/SLOPE+Y4-Y3+SLOPE*X3)/(SLOPE+1/SLOPE)
      Y5=SLOPE*(X5-X3)+Y3
      GO TO 50
C     FOR POINTS OF THE FORM   (X1,Y) AND (X2,Y)
30    X5=(X2+X1)/2.0
      Y5=Y3
      GO TO 50
C     FOR POINTS OF THE FORM  (X,Y1)  AND (X,Y2)
40    X5=X3
      Y5=(Y2+Y1)/2.0
C
C     D1 IS THE DISTANCE BETWEEN (X4,Y4) AND (X5,Y5)
C     D2 IS THE DISTANCE BETWEEN THE NEW CENTER AND THE OLD CENTER
50    D1=SQRT((X4-X5)**2+(Y4-Y5)**2)
      D2=SQRT((X3-X5)**2+(Y3-Y5)**2)
      IF (D2) 80,80,60
60    CONTINUE
      IF (D1.EQ.0.0) GO TO 80
      RATIO=D2/D1
      IF(RATIO .LT. .01)   RETURN
      WRITE(IFILE4,70)X3,Y3,X5,Y5,D2
C23456789012345678901234567890123456789012345678901234567890123456789012
70    FORMAT(' ERROR - CENTER COORDINATES REPLACED WITH NEW',
     1' COORDINATES -',/,10X,' OLD COORDINATE - (', E10.4,',',E10.4,')',
     1/,10X,' NEW COORDINATE - (',E10.4,',',E10.4,')',/,
     110X,' DISTANCE BETWEEN COORDINATES - ',E10.4)                                                         
      X3=X5
      Y3=Y5
80    RETURN
      END
C
C
C
C=DECK      CURV
C./      ADD   NAME=CURV
      SUBROUTINE CURV(X1S,X2S,X3S,Y1S,Y2S,Y3S,RHOS,TH23S,TH12S)
C
C     THIS SUBROUTINE CALCULATES CURVATURE OF CIRCLE PASSING THRU THE
C     THREE POINTS (X1,Y1),(X2,Y2),(X3,Y3)
C
C     FIRST FIND ANGLES FROM POSITIVE X-AXIS TO LINE SEGMENTS
C     (X1,Y1) TO (X2,Y2)  AND (X2,Y2) TO (X3,Y3) AND (X1,Y1) TO (X3,Y3)
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DOUBLE PRECISION PI,X1,X2,X3,Y1,Y2,Y3,RHO,TH23,TH12,TH13,FACT1
      DOUBLE PRECISION C11,C12,C21,C22,A1,A2,DEN,Q1,Q2
C
      X1 = X1S
      X2 = X2S
      X3 = X3S
      Y1 = Y1S
      Y2 = Y2S
      Y3 = Y3S
C
      CALL ANGLE(Y1,Y2,X1,X2,TH12)
      CALL ANGLE(Y2,Y3,X2,X3,TH23)
      CALL ANGLE(Y1,Y3,X1,X3,TH13)
      PI = 3.141592654
      IF (DABS(TH13-TH12).LT.PI) GO TO 10
      IF (DABS(TH13)/(2.*PI).GT.0.7) TH13 = TH13 - 2.*PI
      IF (DABS(TH12)/(2.*PI).GT.0.7) TH12 = TH12 - 2.*PI
10    CONTINUE
C
C     GET PROPER SIGN ON MERIDIONAL CURVATURE
C
      FACT1 = -1.0
      IF (TH13.GT.TH12) FACT1 = 1.0
C     CALCULATE CURVATURE
C
      C11 = 2.*(X2- X1)
      C12 = 2.*(Y2 - Y1)
      C21 = 2.*(X3 - X1)
      C22 = 2.*(Y3 - Y1)
      A1 = X1*X1 + Y1*Y1 - X2*X2 - Y2*Y2
      A2 = X1*X1 + Y1*Y1 - X3*X3 - Y3*Y3
      DEN = C11*C22 - C12*C21
      Q1 =  C12*A2 - C22*A1
      Q2 =  C21*A1 - C11*A2
      RHO = FACT1*DABS(DEN)/DSQRT((DEN*X1 - Q1)**2 + (DEN*Y1 - Q2)**2)
C
      RHOS = RHO
      TH12S = TH12
      TH23S = TH23
C
      RETURN
      END
C
C
C
C=DECK      GEOM  
C BEG DEC 2005
      SUBROUTINE GEOM(ISEG,NCST,I5,R,RD,C1,C2,C1D,S,IMP,NFLAG,SEND,     
     1DS,DSTOT,ZAX,PHI)     
C END DEC 2005
C     
C     CALLED FROM GEOMTY, WHICH IS CALLED FROM READIT, WHICH IS CALLED  
C     FROM MAIN.  
C     GEOMETRY PARAMETERS FOR SEGMENT NUMBER ISEG ARE CALCULATED. 
C     THESE PARAMETERS ARE R - - PARALLEL CIRCLE RADIUS     
C                          RD -DERIVATIVE OF PARALLEL CIRCLE RADIUS WITH
C                              RESPECT TO ARC LENGTH S.     
C                          C1 -MERIDIONAL CURVATURE   
C                          C2 -CIRCUMFERENTIAL NORMAL CURVATURE   
C                          C1D-DERIVATIVE OF MERIDIONAL CURVATURE 
C     MESH STATION SPACING HC(ISEG) AND ARC LENGTH S ALSO OBTAINED.     
C     GEOM1,GEOM2, ETC. CORRESPOND TO VARIOUS TYPES OF SHELLS     
C     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),ZAX(*),DS(500)  
C BEG OCT 2005
      COMMON/GORIGL/RORIGL(100),ZORIGL(100)
C END OCT 2005
C BEG DEC 2005
      DIMENSION PHI(*)
C END DEC 2005
C BEG MARCH 1990
      COMMON/ZZZGLB/ZGLOBL
      ZGLOBL = 0.
C END MARCH 1990
      GO TO (10,20,30,40,50),NCST   
10    CALL GEOM1(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
20    CALL GEOM2(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
C BEG FEB 2008
C 30  CALL GEOM3(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
   30 CONTINUE
      WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/)')
     1' ********** THIS RUN WILL ABORT ***************',
     1' You cannot use GEOM3 because of element "lockup"',
     1' caused by the meridional radius of curvature changing',
     1' within a single shell segment. Generate the shell',
     1' geometry in another way, with multiple segments',
     1' in which the meridional curvature is constant in',
     1' each of these segments, such as toroidal segments',
     1' combined with cylindrical, conical, or flat segments.',
     1' *********** RUN ABORT *************************'
      CALL ERREX
C23456789012345678901234567890123456789012345678901234567890123456789012
C END FEB 2008
      GO TO 60    
40    CALL GEOM4(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
C BEG FEB 2008
C 50    CALL GEOM5(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)
   50 CONTINUE
      WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/)')
     1' ********** THIS RUN WILL ABORT ***************',
     1' You cannot use GEOM5 because of element "lockup"',
     1' caused by the meridional radius of curvature changing',
     1' within a single shell segment. Generate the shell',
     1' geometry in another way, with multiple segments',
     1' in which the meridional curvature is constant in',
     1' each of these segments, such as toroidal segments',
     1' combined with cylindrical, conical, or flat segments.',
     1' *********** RUN ABORT *************************'
      CALL ERREX
C23456789012345678901234567890123456789012345678901234567890123456789012
C END FEB 2008
60    CONTINUE    
C
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ IMPERFECTION SHAPE FOLLOWS...')
C BEG MARCH 1990  (The following statement is commented out...)
C     CALL DATUM(IFILE2,132,0,0,INT,REALL,CHARAC,IOUT,0,1)
C END MARCH 1990
      CALL DATUM(IFILE2,133,1,1,IMP,REALL,CHARAC,IOUT,0,1)
      IF (IMP.NE.0.AND.IMP.NE.1) THEN
        WRITE(IFILE4,*)' IMP MUST BE EITHER 0 OR 1'
        CALL ERREX
      ENDIF
C BEG OCT 2005
C BEG DEC 2005
      PI = 3.1415927
      DO 65 I = 1,I5
         RORIGL(I) = R(I)
         ZORIGL(I) = ZAX(I)
         if (rd(i) .gt. 1.0) then
           rd(i) = 1.0
         else if (rd(i) .lt. -1.0) then
           rd(i) = -1.0
         endif
         IF (RD(I).GE.0.) then
           IF (C2(I).GE.0.) then
             PHI(I) = ACOS(RD(I))
           else
             PHI(I) = 2*PI - ACOS(RD(I))
           endif
         else
           IF (C2(I).GE.0.) then
             PHI(I) = PI - ACOS(ABS(RD(I)))
           else
             PHI(I) = PI + ACOS(ABS(RD(I)))
           endif
         endif
         PHI(I) = PHI(I)*180./PI
   65 CONTINUE
C END DEC 2005
C END OCT 2005
      IF (IMP.EQ.0) GO TO 70  
C     VARIOUS IMPERFECTION SHAPES READ IN IN IMPERF   
C BEG AUG 2005
      CALL IMPERF(NFLAG,I5,R,RD,C1,C2,C1D,S,SEND,ISEG,ZAX)
C END AUG 2005
70    CONTINUE    
      DO 80 I=1,I5
80    S(I) = S(I) + SEND
      RETURN
      END   
C
C
C
C=DECK      GEOM1 
C     OVERLAY(1,2)
      SUBROUTINE GEOM1(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,Z) 
C     
C     THIS SUBROUTINE FOR CYLINDRICAL,CONICAL SHELLS OR FLAT PLATES     
C     INPUT DATA . . .  
C     
C        R1,Z1 = COORDINATES IN R-Z SPACE OF BEGINNING OF SEGMENT 
C        R2,Z2 = COORDINATES IN R-Z SPACE OF END OF SEGMENT 
C     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),Z(*)     
      DIMENSION DS(500) 
      CALL DATUM(IFILE2,112,1,2,INT,R1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,113,1,1,INT,Z1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,114,1,1,INT,R2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,115,1,1,INT,Z2,CHARAC,IOUT,0,1)
C     MUST LEAVE SMALL HOLE AT APEX OF CONE     
C     
      IF ((R1-R2).EQ.0.0) GO TO 5   
      ZRAT = ABS((Z1-Z2)/(R1-R2))   
      IF (ZRAT.LT.0.01) GO TO 5     
      IF(R1.LT.0.001*R2) R1 = 0.001*R2    
      IF (R2.LT.0.001*R1) R2 = 0.001*R1   
5     CONTINUE    
10    FORMAT(6E12.8)                                                  
      WRITE(IFILE4,20)ISEG,R1,Z1,R2,Z2  
20    FORMAT(/,' SEGMENT NO.',I3,' IS A CYLINDER OR CONE.',/,
     15X,' END POINT COORDINATES (',E10.4,',',E10.4,') AND (',
     1 E10.4,',',E10.4,')')
      SL=SQRT((R2-R1)**2+(Z2-Z1)**2)
      SALPH=SQRT((R2-R1)**2)/SL     
      CALPH=SQRT((Z2-Z1)**2)/SL     
      FACT = SL/DSTOT   
      R(1) = R1   
      Z(1) = Z1   
      S(1) = 0.0  
      RD(1) = SALPH     
      IF (R2.LT.R1) RD(1) = -SALPH  
      C1(1) = 0.0 
      C1D(1) = 0.0
      C2(1) = 0.0 
      IF (R1.EQ.0.) GO TO 30  
      C2(1) = CALPH/R1  
      IF (Z2.LT.Z1) C2(1) = - CALPH/R1    
30    CONTINUE    
      DS(1) = DS(1)*FACT
      DO 40 I=2,I5
      DS(I) = DS(I)*FACT
      I1 = I-1    
      S(I) = S(I1) + (DS(I) + DS(I1))/2.  
      R(I) = R1 + (R2 - R1)*S(I)/SL 
      Z(I) = Z1 + (Z2-Z1)*S(I)/SL   
      RD(I)=SALPH 
      IF(R2 .LT. R1)   RD(I)=-SALPH 
      C1(I)=0.0   
      RI = DS(1)/100.   
      IF(R(I) .GT. 0.0)   RI=R(I)   
      C2(I)=CALPH/RI    
      IF (Z2.LT.Z1) C2(I) = - CALPH/RI    
      C1D(I)=0.0  
40    CONTINUE    
50    FORMAT(' R(I),Z(I)',  2(3X,E12.6))                                      
      RETURN
      END   
C
C
C
C=DECK      GEOM2 
      SUBROUTINE GEOM2 (ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,Z)
C     
C     THIS SUBROUTINE FOR SPHERICAL, TOROIDAL, OR OGIVAL SEGMENTS 
C     
C     INPUT DATA . . .  
C     
C        R1,Z1 - COORDINATES IN R-Z SPACE OF BEGINNING OF SEGMENT 
C        R2,Z2 - COORDINATES IN R-Z SPACE OF END OF SEGMENT 
C        RC,ZC - COORDINATES IN R-Z SPACE OF CENTER OF MERIDIONAL CURV. 
C        SROT - SIGN OF MERIDIONAL CURVATURE - -
C     
C            SROT POSITIVE FOR INCREASING ARC LENGTH CLOCKWISE DIRECTION
C            SROT NEGATIVE FOR INCREASING S ANTICLOCKWISE   
C     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),Z(*)     
      DIMENSION DS(500) 
C     
      CALL DATUM(IFILE2,116,1,2,INT,R1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,117,1,1,INT,Z1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,118,1,1,INT,R2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,119,1,1,INT,Z2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,120,1,2,INT,RC,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,121,1,1,INT,ZC,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,122,1,2,INT,SROT,CHARAC,IOUT,0,1)
10    FORMAT(6E12.8)                                                          
      WRITE(IFILE4,20)ISEG,R1,Z1,R2,Z2,RC,ZC  
C BEG FEB 2008
20    FORMAT(/,' SEGMENT NO.',I3,' IS SPHERICAL OR TOROIDAL.',/,
     15X,' END POINT COORDINATES (',E12.6,',',E12.6,') AND (',
     1E12.6,',',E12.6,')',/,' AND CENTER (',E15.7,',',E15.7,')')                      
C END FEB 2008
C     
C     CHECK TO INSURE THAT CENTER COORDINATE IS CORRECT     
C     
      CALL ARCDRW(R1,R2,RC,Z1,Z2,ZC)
C     
      FN=FLOAT(I5)-1.0  
      PI=3.1415927
      ROT=SQRT((R1-RC)**2+(Z1-ZC)**2)     
      SROT = - SROT     
      DR1 = R1 - RC     
      DR2 = R2 - RC     
      DZ1 = ZC - Z1     
      DZ2 = ZC - Z2     
      ANG1 = ATAN2(DR1,DZ1)   
      ANG2 = ATAN2(DR2,DZ2)   
      IF (ANG1.LT.0.0) ANG1 = ANG1 + 2.*PI
      IF (ANG2.LT.0.0) ANG2 = ANG2 + 2.*PI
      AN1DEG=ANG1*180./PI     
      AN2DEG=ANG2*180./PI     
      NSROT = SROT
      IF (NSROT.EQ.-1) WRITE(IFILE4,30) ROT, AN1DEG,AN2DEG 
      IF (NSROT.EQ. 1) WRITE(IFILE4,40) ROT, AN1DEG,AN2DEG 
C BEG FEB 2008
30    FORMAT(' RADIUS = ',1PE15.7,'  ALPHA1 = ', 1PE15.7,/,
     1' ALPHA2 = ',1PE15.7,'  INCREASING ARC LENGTH CLOCKWISE',/)
40    FORMAT(' RADIUS =  ',1PE15.7,' ALPHA1 =  ',1PE15.7,/,
     1' ALPHA2 = ',1PE15.7,'  INCREASING ARC LENGTH ANTICLOCKWISE',/)
C END FEB 2008
      DPHI = ANG2 - ANG1
      IF (SROT.LT.0.0.AND.DPHI.GT.0.0) DPHI = DPHI - 2.*PI  
      IF (SROT.GT.0.0.AND.DPHI.LT.0.0) DPHI = DPHI + 2.*PI  
      SL = ABS(ROT*DPHI)
      FACT = SL/DSTOT   
      S(1) = 0.0  
      R(1) = R1   
      Z(1) = Z1   
      SPHI = SIN(ANG1)  
      CPHI = COS(ANG1)  
      RD(1) = SROT*CPHI 
      IF (ABS(RD(1)).LT.0.0005) RD(1) = 0.
      C1(1) = SROT/ROT  
      C1D(1) = 0.0
      C2(1) = C1(1)     
      IF (R1.GT.0.) C2(1) = SROT*SPHI/R1  
      DS(1) = DS(1)*FACT
      DO 50 I=2,I5
      I1 = I - 1  
      DS(I) = DS(I)*FACT
      S(I) = S(I1) + (DS(I) + DS(I1))/2.  
      PHI = ANG1 + DPHI*S(I)/SL     
      PI2 = 2.*PI 
      IF (PHI.GT.PI2) PHI = PHI - PI2     
      SPHI = SIN(PHI)   
      CPHI = COS(PHI)   
      R(I) = RC + ROT*SPHI    
      Z(I)=ZC-ROT*CPHI  
      RD(I) = CPHI*SROT 
      IF (ABS(RD(I)).LT.0.0005) RD(I) = 0.
      C1(I) = SROT/ROT  
      C2(I) = C1(I)     
      IF (R(I).GT.0.0) C2(I) = SROT*SPHI/R(I)   
      C1D(I) = 0.0
50    CONTINUE    
60    FORMAT(' R(I),Z(I)',  2(3X,E12.6))                                      
      RETURN
      END   
C
C
C
C=DECK      GEOM3
      SUBROUTINE GEOM3(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,Z)
C     READ GEOMETRY PARAMETERS AT A FEW POINTS AND INTERPOLATE LINEARLY
C     (FINDZ) FOR INTERMEDIATE VALUES.
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),DS(*),Z(*)     
      DIMENSION RIN(50),RDIN(50),C1IN(50),C2IN(50),C1DIN(50),IGVAL(50)
10    FORMAT(10I6)                                                       
20    FORMAT(6E12.8)                                                     
      READ (5,20)ARCLTH
      FACT = ARCLTH/DSTOT
      DS(1) = DS(1)*FACT
      S(1) = 0.
      DO 30 I=2,I5
      I1 = I - 1
      DS(I) = DS(I)*FACT
30    S(I) = S(I1) + (DS(I) + DS(I1))/2.
C     NGVAL = NO. OF CALLOUTS
C     IGVAL = MESH PT. TAGS OF CALLOUTS.
      READ (5,10)NGVAL
      READ (5,10)(IGVAL(I),I=1,NGVAL)
      JSTART = 1
      IF (IGVAL(1).EQ.1) JSTART = 2
      IF (NGVAL.LT.JSTART) GO TO 50
      DO 40 J=JSTART,NGVAL
40    IGVAL(J) = IGVAL(J) + 1
      IF (IGVAL(NGVAL).EQ.(I5-1)) IGVAL(NGVAL) = IGVAL(NGVAL) + 1
50    CONTINUE
C     INPUT PARAMETERS (SEE GEOM FOR DEFINITIONS)
      READ (5,20)(RIN(I),I=1,NGVAL)
      READ (5,20)(RDIN(I),I=1,NGVAL)
      READ (5,20)(C1IN(I),I=1,NGVAL)
      READ (5,20)(C2IN(I),I=1,NGVAL)
      READ (5,20)(C1DIN(I),I=1,NGVAL)
C      INTERPOLATE FOR OUTPUT VALUES R,RD,C1,C2,C1D
      CALL FINDZ(NGVAL,IGVAL,  RIN,I5,  R,S)
      CALL FINDZ(NGVAL,IGVAL, RDIN,I5, RD,S)
      CALL FINDZ(NGVAL,IGVAL, C1IN,I5, C1,S)
      CALL FINDZ(NGVAL,IGVAL, C2IN,I5, C2,S)
      CALL FINDZ(NGVAL,IGVAL,C1DIN,I5,C1D,S)
      Z(1) = 0.0
      DO 60 I=2,I5
      I1 = I -1
C     Z IS THE AXIAL COORDINATE
60    Z(I) = Z(I1) + SQRT((S(I)-S(I1))**2 + (R(I)-R(I1))**2)
      RETURN
      END
C
C
C
C=DECK      GEOM4
      SUBROUTINE GEOM4(ISEG,I5,RAD,RADD,CUR1,CUR2,CUR1D,S,DS,DSTOT,Z)
C     GEOMETRICAL INPUT (RAD,RADD,CUR1,CUR2) FOR ARBITRARY SHELL
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG JULY 1996
      COMMON/INNERX/INNER
C END JULY 1996
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT
      CHARACTER*4 CHARAC
      LOGICAL ANSL1
      COMMON/APEX/INDX
      COMMON/TORUS/ALPHAT,ZMAX,XMAX,NST
      DIMENSION RI(100),ZI(100),DS(*),ZT(20),TH(20)
      DIMENSION RAD(*),RADD(*),CUR1(*),CUR2(*),CUR1D(*),S(*),Z(*)
C BEG NOV 1995
      DIMENSION RADOLD(100),SN(200),DSN(200),ZN(200)
      DIMENSION RADM(100),RADDM(100),CUR1M(100),CUR2M(100),CUR1DM(100)
      DIMENSION RADN(200),RADDN(200),CUR1N(200),CUR2N(200),CUR1DN(200)
C END NOV 1995
10    FORMAT(23X,2E15.8)
20    FORMAT (/,42X,' COORDINATES OF SHELL SEGMENT FOLLOW',/,
     142X,' AXIAL COORDINATE',9X,' RADIUS',/,50X,'Z',20X,'R',/,
     2(43X,E15.8,5X,E15.8))
30    FORMAT (/,25X,' ARC LENGTH',7X,'RADIUS',9X,'DR/DS',12X,'K1',
     113X,'K2',/,29X,'(S)',12X,'(RAD)',9X,'(RADD)',9X,'(CUR1)',9X,
     2'(CUR2)')
40    FORMAT (23X,5E15.8)
C
C     CARTESIAN COORDINATES OF SHELL REFERENCE SURFACE CALCULATED IN
C     SHELL
      ALPHAT = 0.0
60    CALL SHELL(NRZIN,ZI,RI,ZT,TH,NSUR,ISEG,INDX)
      REWIND IFILE3
      CALL DATUM(IFILE3,602,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE))
     1WRITE(IFILE4,20)(ZI(I),RI(I),I=1,NRZIN)
      CALL GMFIND(RAD,RADD,CUR1,CUR2,CUR1D,S,DS,DSTOT,RI,ZI,NRZIN,I5,Z)
      DO 210 I = 1,I5
      IF (NST.NE.4) GO TO 200
      E2 = 1. - (ZMAX/XMAX)**2
C BEG MAY 1994
      E1 = ABS(XMAX/(ZMAX**2))
C END MAY 1994
      E3 = SQRT(1. - E2*RADD(I)**2)
      CUR1(I) = E1*E3**3
      E4 = (ZMAX/XMAX)**2
      E5 = SQRT(ZMAX**2 - RAD(I)**2*E4*E2)
      CUR2(I) = E4/E5
      CUR1D(I) = 3.*E1*E2*CUR1(I)*E3*RADD(I)*RAD(I )*CUR2(I)
200   CONTINUE
      IF(ALPHAT.NE.0.)CUR2(I)=CUR2(I)*RAD(I)/(RAD(I) + ALPHAT)
C BEG NOV 1995
      RADOLD(I) = RAD(I)
C END NOV 1995
210   RAD(I) = RAD(I) + ALPHAT
C BEG NOV 1995
      IF (NST.EQ.4.AND.(ALPHAT-XMAX).GT.0.0) THEN
C BEG JULY 1996
C        REWIND IFILE3
C        CALL DATUM(IFILE3,582,1,2,INT,REALL,ANSOUT,IOUT,0,1)
C        IF (ANSL1('N',ANSOUT,INFILE)) GO TO 1000
         IF (INNER.EQ.0) GO TO 1000
C END JULY 1996
         DO 220 I = 1,I5
          RADM(I) = ALPHAT - RADOLD(I)
          RADDM(I) = RADD(I)
          CUR1M(I) = CUR1(I)
          CUR1DM(I) = - CUR1D(I)
          CUR2M(I) = -SQRT(1. - RADD(I)**2)/RADM(I)
  220    CONTINUE
         IPROSS = 0
         IF (Z(I5).GE.1.99*ZMAX) THEN
C  THIS IS A "TOP" (AS OPPOSED TO "BOTTOM") DOME...
            IF (Z(I5).LT.1.9999*ZMAX) THEN
               WRITE(IFILE4,225) Z(I5), 2.0*ZMAX
  225          FORMAT(/,' END POINT ZB IS NOT NEAR ENOUGH TO TOP OF',/,
     1       ' DOME TO PERMIT "REFLECTING" THE ELLIPSOIDAL SEGMENT',/,
     1       ' ZB = ',1PE12.4,'. ZB MUST BE EQUAL TO',1PE12.4,'.',/,
     1       ' RUN WILL NOW ABORT IN GEOM4. PLEASE RESET ZB.',/)
               CALL ERREX
C23456789012345678901234567890123456789012345678901234567890123456789012
            ENDIF
            IPROSS = 1
C           DO 230 I = 1,I5
C            RADN(I) = RAD(I)
C            RADDN(I) = RADD(I)
C            CUR1N(I) = CUR1(I)
C            CUR1DN(I)= CUR1D(I)
C            CUR2N(I) = CUR2(I)
C            SN(I) = S(I)
C            DSN(I)= DS(I)
C            ZN(I) = Z(I)
C 230       CONTINUE
C           I51 = I5 + 1
C           I52 = 2*I5 - 1
C           DO 240 I = I51,I52
C            J = I52 - I + 1
            DO 240 I = 1,I5
             J = I5 - I + 1
             RADN(I) = RADM(J)
             RADDN(I) = RADDM(J)
             CUR1N(I) = CUR1M(J)
             CUR1DN(I)= CUR1DM(J)
             CUR2N(I) = CUR2M(J)
C            SN(I) =  2.*S(I5) - S(J)
             SN(I) =     S(I5) - S(J)
             DSN(I)= DS(J)
             ZN(I) = Z(J)
  240       CONTINUE
         ENDIF
         IF (Z(1).GE.0.0.AND.Z(1).LE.0.001*ZMAX) THEN
C  THIS IS A "BOTTOM" (AS OPPOSED TO "TOP") DOME...
            IF (Z(1).GT.0.00001*ZMAX) THEN
               WRITE(IFILE4,245) Z(1)
  245          FORMAT(/,' STARTING POINT ZA IS NOT NEAR ENOUGH TO',/,
     1       ' BOTTOM OF DOME TO PERMIT "REFLECTING" THE',/,
     1       ' TORI-ELLIPSOIDAL SEGMENT. ZA = ',1PE12.4,'. ZA MUST',/,
     1       ' BE EQUAL TO ZERO.',/,
     1       ' RUN WILL NOW ABORT IN GEOM4. PLEASE RESET ZA.',/)
               CALL ERREX
C23456789012345678901234567890123456789012345678901234567890123456789012
            ENDIF
            IPROSS = 1
C           DO 250 I = 1,I5
C            J = I5 - 1 + I
C            RADN(J) = RAD(I)
C            RADDN(J) = RADD(I)
C            CUR1N(J) = CUR1(I)
C            CUR1DN(J)= CUR1D(I)
C            CUR2N(J) = CUR2(I)
C            SN(J) = S(I5) + S(I)
C            DSN(J)= DS(I)
C            ZN(J) = Z(I)
C 250       CONTINUE
C           I51 = I5 - 1
C           DO 260 I = 1,I51
            DO 260 I = 1,I5
             J = I5 - I + 1
             RADN(I) = RADM(J)
             RADDN(I) = RADDM(J)
             CUR1N(I) = CUR1M(J)
             CUR1DN(I)= CUR1DM(J)
             CUR2N(I) = CUR2M(J)
             SN(I) =  S(I5) - S(J)
             DSN(I)= DS(J)
             ZN(I) = Z(J)
  260       CONTINUE
         ENDIF
         IF (IPROSS.EQ.0) THEN
            WRITE(IFILE4,265)
  265       FORMAT(/,' SOMETHING IS WRONG WITH YOUR INPUT IN GEOM4.',/,
     1              ' PLEASE TRY AGAIN. TORI-ELLIPSOIDAL REFLECTING',/,
     1              ' NOT PERMITTED FOR THE INPUT DATA YOU SUPPLIED.',/,
     1              ' CHANGE YOUR ZA AND/OR ZB INPUT')
C23456789012345678901234567890123456789012345678901234567890123456789012
            CALL ERREX
         ENDIF
C        I52 = 2*I5 - 1
C        IF (I52.GT.97) THEN
C     THERE ARE TOO MANY NODES IN THE "DOUBLED" SEGMENT, CUT THEM
C     BY TAKING EVERY OTHER NODE:
C           J = 0
C           DO 270 I = 1,I52,2
C            J = J + 1
C            RAD(J) = RADN(I)
C            RADD(J) = RADDN(I)
C            CUR1(J) = CUR1N(I)
C            CUR1D(J)= CUR1DN(I)
C            CUR2(J) = CUR2N(I)
C            S(J) = SN(I)
C            DS(J)= DSN(I)
C            Z(J) = ZN(I)
C 270       CONTINUE
C           I5 = J
C        ELSE
C    "DOUBLED" NUMBER OF NODES IN THE "DOUBLED" SEGMENT IS OK.
C           DO 280 I = 1,I52
            DO 280 I = 1,I5
             J = I
             RAD(J) = RADN(I)
             RADD(J) = RADDN(I)
             CUR1(J) = CUR1N(I)
             CUR1D(J)= CUR1DN(I)
             CUR2(J) = CUR2N(I)
             S(J) = SN(I)
             DS(J)= DSN(I)
             Z(J) = ZN(I)
  280       CONTINUE
C           I5 = J
C        ENDIF
 1000    CONTINUE
      ENDIF
C END NOV 1995
      RETURN
      END
C
C
C
C=DECK      GEOM5
      SUBROUTINE GEOM5(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,Z)
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),DS(*),S(*),Z(*)     
      DIMENSION NSHAPE(10),IPOINT(10)
      DIMENSION ARCLTH(10)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C
C     THIS SUBROUTINE IS FOR CONSECUTIVE SUBSEGMENTS OF STRAIGHT AND
C     CIRCULAR FORM,  IN WHICH ALL SUBSEGMENTS ARE TOGETHER TREATED AS
C     A  SINGLE SEGMENT.  EXAMPLES ARE CYLINDER WITH HEMISPHERICAL
C     HEAD, CYLINDER CONNECTED TO CONE, Z-SECTION DISCRETE RING TREATED
C     AS THIN SHELL.
C
C     INPUT DATA . . .
C        NSUB . . NUMBER OF SUBSEGMENTS (MAXIMUM OF 10)
C        (NSHAPE(I), I = 1,NSUB) . . . SHAPE OF SUBSEGMENTS . .
C                                            1= CYL.,CONE,PLATE
C                                            2 = SPHERE,TOROID,OGIVE
C
C     (IPOINT(I), I = 1,(NSUB-1)) . . MESH PT. LOCATIONS OF JUNCTURES
C                                     BETWEEN SUBSEGMENTS.
C     ADDITIONAL INPUT DATA READ FROM GEOM1 AND GEOM2 FOR EACH SUB-
C     SEGMENT IS DESCRIBED IN THOSE SUBROUTINES.
C
10    FORMAT(/,'  SEGMENT NO.',I3,' CONSISTS OF ',I3,' SUBSEGMENTS.',
     1' PROPERTIES FOLLOW',/)                                            
20    FORMAT(10I6)                                                       
      READ (5,20)NSUB
      WRITE(IFILE4,10)ISEG,NSUB
      READ (5,20)(NSHAPE(I),I=1,NSUB)
      NSUB1 = NSUB - 1
      READ (5,20)(IPOINT(I),I=1,NSUB1)
      DO 30 I=1,NSUB1
30    IPOINT(I) = IPOINT(I) + 1
      IPOINT(NSUB) = I5
      READ (5,40)(ARCLTH(I),I=1,NSUB)
40    FORMAT(6E12.8)                                                     
      ISAVE = 1
      S(ISAVE) = 0.
      DO 100 I=1,NSUB
      ISAVE1 = ISAVE+ 1
      IMESH = IPOINT(I) - ISAVE + 1
      NS = NSHAPE(I)
      IEND = IPOINT(I)
      IEND1 = IPOINT(I) - 1
      DSALL = ARCLTH(I)
      GO TO (50,60),NS
50    CALL GEOM1(I,IMESH,R(ISAVE1),RD(ISAVE1),C1(ISAVE1),C2(ISAVE1)
     1, C1D(ISAVE1),S(ISAVE1),DS(ISAVE),DSALL,Z)
      GO TO 70
60    CALL GEOM2(I,IMESH,R(ISAVE1),RD(ISAVE1),C1(ISAVE1),C2(ISAVE1)
     1, C1D(ISAVE1),S(ISAVE1),DS(ISAVE),DSALL,Z)
70    IF (I.NE.1) GO TO 80
      R(1) = R(2)
      RD(1) = RD(2)
      C1(1) = C1(2)
      C2(1) = C2(2)
      C1D(1) = C1D(2)
80    CONTINUE
      R(ISAVE) = (R(ISAVE) + R(ISAVE1))/2.
      RD(ISAVE)=(RD(ISAVE) +RD(ISAVE1))/2.
      C1(ISAVE)=(C1(ISAVE) +C1(ISAVE1))/2.
      C2(ISAVE)=(C2(ISAVE) +C2(ISAVE1))/2.
      DO 90 J=ISAVE1,IEND
      J1 = J + 1
      R(J) = R(J1)
      RD(J) = RD(J1)
      C1(J) = C1(J1)
      C2(J) = C2(J1)
      C1D(J) = C1D(J1)
90    S(J) = S(ISAVE) + S(J1)
      IF (I.GT.1) C1D(ISAVE) = (C1(ISAVE1) - C1(ISAVE-1))/
     1((DS(ISAVE1) + DS(ISAVE-1))/2. + DS(ISAVE))
      ISAVE = IPOINT(I)
100   CONTINUE
      RETURN
      END
C
C
C
C=DECK      GEOMTR
C BEG DEC 2005
      SUBROUTINE GEOMTR(BBB,Z,S,DS,ZAX,RGLOB,ANGLE,PHI)
C END DEC 2005
C     SHELL REFERENCE SURFACE GEOMETRY INPUT FOR ITH SEGMENT
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(198),TT(100,6)
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
C BEG OCT 1999
      DIMENSION BBB(*),Z(*),S(*),DS(*)
      DIMENSION ZAX(*),RGLOB(*),ANGLE(*)
C END OCT 1999
C BEG DEC 2005
      DIMENSION PHI(*)
C END DEC 2005
      I5I = I5(I)
10    IPOS = 43*ITOTL + 1
      IENDS = IEND
      IEND = IPOS + 43*I5I - 1
      IF (IEND.LT.IMAX) GO TO 20
      CALL GASP(BBB,IENDS,1,ISHL(INOTE))
      ITOTL = 0
      ISAVE(INOTE) = IENDS
      INOTE = INOTE + 1
      IEND = 0
      GO TO 10
20    CONTINUE
C BEG DEC 2005
      CALL GEOMTY(I,Z(ITOT),I5I,BBB(22*I5I+IPOS),BBB(23*I5I+IPOS),
     1BBB(25*I5I+IPOS),S(ITOT),SEND,DS(ITOT),DSTOT,BBB(24*I5I+IPOS),
     2BBB(26*I5I+IPOS),ZAX(ITOT),RGLOB(ITOT),ANGLE(ITOT),PHI(ITOT))
C END DEC 2005
      RETURN
      END
C
C
C
C=DECK      GEOMTY
C BEG DEC 2005
      SUBROUTINE GEOMTY(I,Z,NMSH,R,RD,C2,S,  SEND,DS,DSTOT,C1,C1D,
     1ZAX,RGLOB,ANGLE,PHI)  
C END DEC 2005
C     
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.  
C     SHELL GEOMETRY PARAMETERS CALCULATED IN GEOM, DISTANCE OF REFER   
C     ENCE SURFACE FROM INNER SURFACE ESTABLISHED IN GETZ.  
C     
      COMMON/OUTP/NPRT  
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C BEG OCT 1999
      DIMENSION Z(*),R(100),RD(100),C2(100),S(*),DS(*),C1(100)
      DIMENSION C1D(100),ZAX(*),RGLOB(*),ANGLE(*)   
C END OCT 1999
C BEG DEC 2005
      DIMENSION PHI(*)
C END DEC 2005
10    FORMAT(10I6)                                                            
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ REFERENCE SURFACE GEOMETRY FOLLOWS...')
      CALL DATUM(IFILE2,110,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,111,1,2,NSHAPE,REALL,CHARAC,IOUT,0,1)
      IF (NSHAPE.NE.1.AND.NSHAPE.NE.2.AND.NSHAPE.NE.4) THEN
        WRITE(IFILE4,*)' NSHAPE MUST BE EITHER   1  or  2  or  4'
        CALL ERREX
      ENDIF
      IF (I.EQ.1) NFLAG = 0   
C BEG DEC 2005
      CALL GEOM(I,NSHAPE,NMSH,R,RD,C1,C2,C1D,S,IMP,NFLAG,SEND,DS,DSTOT  
     1, ZAX,PHI)
C END DEC 2005
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ REFERENCE SURFACE LOCATION RELATIVE TO WALL')
      CALL DATUM(IFILE2,141,1,2,NTYPEZ,REALL,CHARAC,IOUT,0,1)
      IF (NTYPEZ.NE.1.AND.NTYPEZ.NE.3) THEN
        WRITE(IFILE4,*)' NTYPEZ MUST BE EITHER  1  or  3'
        CALL ERREX
      ENDIF
      IPRM(1) = 142
      IPRM(2) = 143
      CALL GETZ(NTYPEZ,NMSH,S,Z,R,RD,ZAX) 
      REWIND IFILE3
      CALL DATUM(IFILE3,601,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) WRITE(IFILE4,20) I
20    FORMAT(45X,' REFERENCE SURFACE GEOMETRY FOR SEGMENT NO.',I3,/)
      IF (ANSL1('Y',ANSOUT,INFILE)) WRITE(IFILE4,30)
30    FORMAT(
     1' STATION   ARC LENGTH          RAD              RADD        ',
     2'      CUR1             CUR2            CUR1D           Z',/)
      RMAX = 0.0  
      DO 40 J=1,NMSH    
40    RMAX = AMAX1(R(J),RMAX) 
      IF (ABS(R(NMSH)/RMAX).LT.0.001.AND.ABS(RD(NMSH)).GT.0.95)   
     1R(NMSH) = 0.0     
      PI = 3.141592654    
      DO 90 J=1,NMSH    
      RGLOB(J) = R(J)
c
C     FIND GLOBAL ANGLES FOR LATER PLOTTING OF DEFORMATIONS 
c     write(0,'(1x, ''rd['', j, ''] = '', 1pe32.25)') j, rd(j)
      if (rd(j) .gt. 1.0) then
        rd(j) = 1.0
      else if (rd(j) .lt. -1.0) then
        rd(j) = -1.0
      endif
      IF (RD(J).GE.0.) then
        IF (C2(J).GE.0.) then
          ANGLE(J) = ACOS(RD(J))
        else
          ANGLE(J) = 2*PI - ACOS(RD(J))
        endif
      else
        IF (C2(J).GE.0.) then
          ANGLE(J) = PI - ACOS(ABS(RD(J)))    
        else
          ANGLE(J) = PI + ACOS(ABS(RD(J)))    
        endif
      endif
c
      IF (ANSL1('Y',ANSOUT,INFILE))
     1WRITE (IFILE4,100)J,S(J),R(J),RD(J),C1(J),C2(J),C1D(J),Z(J)
100   FORMAT(I5,7E17.8)                                                       
   90 CONTINUE
110   CONTINUE    
      RETURN
      END   
C
C
C
C=DECK      GMFIND
      SUBROUTINE GMFIND(R,RD,CUR1,CUR2,CUR1D,S,DS,DSTOT,X,Y,NRZIN,I5,Z)
      DIMENSION R(*),RD(*),CUR1(*),CUR2(*),CUR1D(*),S(*),DS(*),X(*),Y(*)
      DIMENSION RHO(100),TH(100),RHOAVE(100),SIN2(100),SIN1(100),Z(*)
      DIMENSION RAVE(100),YAVE(100)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT
      LOGICAL ANSL1
      DOUBLE PRECISION FL23S,ARG,THETA,THETA2,THSAVE,A,DARC,YP,YM
      DOUBLE PRECISION XP,XM,RHOAV,X1,Y1,X2,Y2,THE,S1,S2,PI,CAS,FACT1
      DOUBLE PRECISION CA,D,ALPHA,BETA,GAMMA,ALOCAL
C
      IF (NRZIN.LT.100) GO TO 10
      WRITE(IFILE4,5) NRZIN
5     FORMAT(/,' NRZIN (OR ZNUMB) TOO LARGE. SHOULD BE LESS THAN OR',
     1' EQUAL TO 99. IT EQUALS',I4,/)
      CALL ERREX
10    CONTINUE
      NRZINP = NRZIN + 1
      NRZINM = NRZIN - 1
      DO 100 I = 2,NRZINM
      IM = I - 1
      IP = I + 1
      CALL CURV(  X(IM),X(I),X(IP),Y(IM),Y(I),Y(IP),RHO(I),TH(I),THF)
      IF (I.EQ.2) TH(1) = THF
100   CONTINUE
      RHO(1) = RHO(2)
      RHO(NRZIN) = RHO(NRZINM)
      S(1) = 0.0
      SIN1(1) = 0.0
      SIN2(1) = 0.0
C
      DO 200 I = 1,NRZINM
      IP = I + 1
      RHOAVE(IP) = (RHO(I) + RHO(IP))/2.
      RHOAV = RHOAVE(IP)
      YP = Y(IP)
      YM = Y(I)
      XP = X(IP)
      XM = X(I)
C
      FL23S = (YP-YM)**2  +  (XP-XM)**2
      ARG = 1.0 - 0.5*RHOAV**2*FL23S
      THETA = DACOS(ARG)
      THETA2 = THETA/2.
      IF (I.EQ.1) THSAVE = THETA2
      A = TH(I)
      RAVE(IP) = 0.5*(X(IP) + X(I))
      IF (ABS(RAVE(IP)*RHOAVE(IP)).GT.0.01)
     1RAVE(IP) = RAVE(IP) + (1.-DCOS(THETA2))*DSIN(A)/RHOAV
      YAVE(IP) = 0.5*(Y(IP) + Y(I))
      IF (ABS(RAVE(IP)*RHOAVE(IP)).GT.0.01)
     1YAVE(IP) = YAVE(IP) - (1.-DCOS(THETA2))*DCOS(A)/RHOAV
      DARC = DSQRT(FL23S)
      IF (ABS(RAVE(IP)*RHOAVE(IP)).GT.0.01)
     1DARC = THETA/DABS(RHOAV)
      SIN1(IP) = SIN1(I) + DARC
      SIN2(IP) = SIN1(IP) - DARC/2.
200   CONTINUE
      RAVE(1) = X(1)
      YAVE(1) = Y(1)
      RHOAVE(1) = RHOAVE(2)
      RAVE(NRZINP) = X(NRZIN)
      YAVE(NRZINP) = Y(NRZIN)
      SIN2(NRZINP) = SIN1(NRZIN)
      RHOAVE(NRZINP) = RHOAVE(NRZIN)
      DO 300 I = 1,I5
300   DS(I) = DS(I) *SIN1(NRZIN)/DSTOT
      DO 310 I = 2,I5
      I1 = I - 1
310   S(I) = S(I1) + (DS(I) +DS(I1))/2.
C
C     NOW LINEARLY INTERPOLATE.
C
      CUR1(1) = RHOAVE(1)
      DO 400 I = 2,I5
      I1 = I - 1
      DO 350 JJ = 2,NRZINP
      J = JJ
      J1 = J -1
      IF (SIN2(J).GE.S(I)) GO TO 355
350   CONTINUE
      J = NRZINP
355   CONTINUE
      FRACT = (S(I) - SIN2(J1))/(SIN2(J) - SIN2(J1))
      CUR1(I) = RHOAVE(J1) + FRACT*(RHOAVE(J) - RHOAVE(J1))
      CUR1D(I) = (CUR1(I)-CUR1(I1))/DS(I)
400   CONTINUE
      CUR1D(1) = CUR1D(2)
      R(1) = X(1)
      PI = 3.141592654
      DO 800 I = 1,I5
      DO 750 JJ = 2,NRZIN
      J = JJ
      J1 = J - 1
      IF (SIN1(J).GE.S(I).AND.SIN2(J).LE.S(I)) GO TO 755
      IF (SIN2(J).GE.S(I).AND.SIN1(J1).LE.S(I)) GO TO 756
750   CONTINUE
      J = NRZIN
755   CONTINUE
      X1 = RAVE(J)
      Y1 = YAVE(J)
      S1 = SIN2(J)
      X2 = X(J)
      Y2 = Y(J)
      S2 = SIN1(J)
      GO TO 758
756   CONTINUE
      X1 = X(J1)
      Y1 = Y(J1)
      S1 = SIN1(J1)
      X2 = RAVE(J)
      Y2 = YAVE(J)
      S2 = SIN2(J)
758   CONTINUE
      SA =(S1 + S2 )/2.
      DO 760 KK = 2,I5
      K = KK
      K1 = K - 1
      IF (S(K).GT.SA) GO TO 765
760   CONTINUE
      K = I5
765   CONTINUE
      FRACT = (SA - S(K1))/(S(K) - S(K1))
      CA = CUR1(K1) + FRACT*(CUR1(K) - CUR1(K1))
      CAS = DABS(CA)
      FACT1 = 1.0
      IF (CAS.GT.0.0) FACT1 = CA/CAS
      THETA = CAS*(S2-S1)
      BETA = (PI-THETA)/2.
      ALPHA = CAS*(S(I) - S1)
      GAMMA = PI - ALPHA - BETA
      CALL ANGLE(Y1,Y2,X1,X2,THE)
      ALOCAL = THE + (-THETA/2. + ALPHA)*FACT1
      RD(I) = DCOS(ALOCAL)
      IF (ABS(RD(I)).LT.0.0005) RD(I) = 0.0
      D = 0.0
      A =(S(I) - S1 )/DSIN(GAMMA)
      IF (I.GT.1) R(I) = R(I-1) + RD(I-1)*(S(I) - S(I-1))
      IF(R(I)*CAS.GT.0.01) D = (1. - DSIN(BETA)/DSIN(GAMMA))/CA
      IF (ALPHA.GT.PI/180.) A = DSIN(ALPHA)/(CAS*DSIN(GAMMA))
      R(I) = X1 + A*DCOS(THE) + D*DSIN(ALOCAL)
      Z(I) = Y1 + A*DSIN(THE) - D*DCOS(ALOCAL)
      IF (I.NE.1) CUR2(I) = CUR2(I-1)
      IF (R(I).GT.DS(I)/10.) CUR2(I) = DSIN(ALOCAL)/R(I)
800   CONTINUE
      IF (ABS(R(1)).LT.DS(1)/10.) CUR2(1) = CUR2(2)
C
C     NOW WRITE OUT SOME STUFF TO CHECK THE SUBROUTINE
C
C     REWIND IFILE3
C     CALL DATUM(IFILE3,603,1,1,INT,REALL,ANSOUT,IOUT,0,1)
C     IF (ANSL1('N',ANSOUT,INFILE)) GO TO 560
C     WRITE(IFILE4,500)
C 500 FORMAT(/,' WRITE OUT SHIFTED R,Z COORDINATES AND OTHER VALUES',
C    1' FROM WHICH THE FINAL VALUES ARE INTERPOLATED')                          
C     WRITE(IFILE4,510)
C 510 FORMAT(//' POINT   ARC          R            Z           RHOAVE    
C   1    TH    ')C    C    C    C    C    C    C    C    C        
C     DO 550 I = 1,NRZINP
C     WRITE(IFILE4,540)I,SIN2(I),RAVE(I),YAVE(I),RHOAVE(I),TH(I)
C 540 FORMAT(I5,1P5E13.4)                                                
C 550 CONTINUE
  560 CONTINUE
      RETURN
      END
C
C
C
C=DECK      IMPERF
C BEG AUG 2005
      SUBROUTINE IMPERF(NFLAG,I5,R,RD,C1,C2,C1D,S,SEND,ISEG,Z)
C END AUG 2005
C     CALLED FROM GEOM, WHOSE TRACE IS GEOMTY, READIT, MAIN.
C     CALCULATES GEOMETRICAL PARAMETERS R, RD, C1, C2, C1D ( SEE GEOM   
C     FOR DEFINITIONS) FOR IMPERFECT SHELL
      DOUBLE PRECISION W,PHI,FL     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C BEG AUG 2005
      DIMENSION AMPIMP(20),ISTART(20),NUMB(20),WSHAPE(100,20)
      DIMENSION Z(*)
C END AUG 2005
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),WTOT(100)
      DIMENSION W(20),PHI(20),FL(20)
C BEG DEC 1992
      DIMENSION WTRIG(20),FLTRIG(20)
C END DEC 1992
C     ITYPE = TYPE OF IMPERFECTION  
      CALL DATUM(IFILE2,134,1,2,ITYPE,REALL,CHARAC,IOUT,0,1)
C BEG DEC 1992
C BEG AUG 2005
      IF (ITYPE.NE.1.AND.ITYPE.NE.2.AND.ITYPE.NE.3
     1                             .AND.ITYPE.NE.4) THEN
       WRITE(6,*)' ITYPE MUST BE EITHER 1 OR 2 OR 3 OR 4'
C END AUG 2005
C END DEC 1992
        CALL ERREX
      ENDIF
10    FORMAT(10I6)                                                            
20    FORMAT(6E12.8)                                                          
      PI = 3.1415927    
C BEG AUG 2005
      GO TO (30,130,170,179),ITYPE
C END AUG 2005
30    CONTINUE    
C     
C     RANDOM SERIES OF SINUSOIDAL IMPERFECTIONS 
C     
      IF (NFLAG.EQ.1) GO TO 60
      CALL DATUM(IFILE2,135,1,1,INT,FM   ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,136,1,1,INT,C    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,137,1,1,INT,FLMIN,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,138,1,1,INT,FLMAX,CHARAC,IOUT,0,1)
      M = FM
      CALL URVEC(M,W) 
      CALL URVEC(M,PHI)     
      CALL URVEC(M,FL)
      WSUM = 0.0  
      DO 40 I=1,M 
      WSUM = WSUM + W(I)
      PHI(I) = PHI(I)*2.*PI   
      FL(I) = FL(I)*(FLMAX-FLMIN) + FLMIN 
40    CONTINUE    
      DO 50 I=1,M 
50    W(I) = W(I)*C/WSUM
60    CONTINUE    
      WRITE (IFILE4,70)ISEG  
70    FORMAT(/,' COMPONENTS OF RANDOM IMPERFECTION FOR SEGMENT',I3,/)     
      WRITE (IFILE4,80)
80    FORMAT(/,'    COMPONENT     AMPLITUDE      HALF-WAVELENGTH',
     1'    PHASE(RADIANS)')
      DO 90 I=1,M 
90    WRITE (IFILE4,100)I,W(I),FL(I),PHI(I)    
100   FORMAT(I9,1P3E18.8)                                                     
      DO 120 I=1,I5     
      WTOT(I) = 0.0     
      ARC = SEND + S(I) 
      WD = 0.0    
      WDD = 0.0   
      WDDD = 0.0  
      DO 110 J=1,M
      ARG = PI/FL(J)    
      SI = SIN(ARG*ARC + PHI(J))    
      CO = COS(ARG*ARC + PHI(J))    
      WTOT(I) = WTOT(I) + W(J)*SI   
      WD = WD + W(J)*ARG*CO   
      WDD = WDD - W(J)*ARG**2*SI    
      WDDD = WDDD - W(J)*ARG**3*CO  
110   CONTINUE    
      FACT = 1./SQRT(1.+ WD**2)     
      SPHI = R(I)*C2(I) 
      CPHI = RD(I)
      FK1 = C1(I) 
      R(I) = R(I) + WTOT(I)*SPHI    
      RD(I) = FACT*(CPHI + WD*SPHI) 
      C1(I) = FK1-WDD   
      C1D(I) = C1D(I)-WDDD    
      IF (R(I).GT.0.) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)  
120   CONTINUE    
      NFLAG = 0   
      GO TO 220   
C     
C     IMPERFECTION IS SIMPLE SINE WAVE    
C     
130   CONTINUE    
      IF (NFLAG.EQ.1) GO TO 140     
      CALL DATUM(IFILE2,139,1,1,INT,W0    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,140,1,2,INT,WLNGTH,CHARAC,IOUT,0,1)
140   ARG = PI/WLNGTH   
      WRITE (IFILE4,150)ISEG,W0,WLNGTH   
150   FORMAT(/,' SINUSOIDAL IMPERFECTION, SEGMENT',I3,/,
     1' AMPLITUDE =',1PE12.4,' HALF-WAVELENGTH =',1PE12.4,/)
      DO 160 I=1,I5     
      ARC = SEND + S(I) 
      SI = SIN(ARG*ARC) 
      CO = COS(ARG*ARC) 
      WTOT(I) = W0*SI   
      WD = W0*ARG*CO    
      WDD = - W0*ARG**2*SI    
      WDDD = -W0*ARG**3*CO    
      FACT = 1./SQRT(1.+ WD**2)     
      SPHI = R(I)*C2(I) 
      CPHI = RD(I)
      FK1 = C1(I) 
      R(I) = R(I) + WTOT(I)*SPHI    
      RD(I) = FACT*(CPHI + WD*SPHI) 
      C1(I) = FK1-WDD   
      C1D(I) = C1D(I)-WDDD    
      IF (R(I).GT.0.) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)  
160   CONTINUE    
      NFLAG = 0   
      GO TO 220   
170   CONTINUE    
C     DUMMY POSITION ,  TO BE FILLED IN BY USER.
C BEG DEC 1992
C     DETERMINISTIC SUM OF SINUSOIDAL TERMS (1 DEC 1992)
      IF (NFLAG.EQ.1) GO TO 173
      CALL DATUM(IFILE2,135,1,1,INT,FM   ,CHARAC,IOUT,0,1)
      M = FM
      I = 0
171   CONTINUE
      I = I + 1
      IF (I.GT.M) GO TO 173
      REWIND IFILE2
      CALL DATUM(IFILE2,139,1,1,INT,WTRIG(I) ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,140,1,2,INT,FLTRIG(I),CHARAC,IOUT,0,1)
      WRITE (IFILE4,172) ISEG,WTRIG(I),FLTRIG(I)   
172   FORMAT(/' SINUSOIDAL IMPERFECTION, SEGMENT',I3,/,
     1' AMPLITUDE =',1PE12.4,' HALF-WAVELENGTH =',1PE12.4,/)
      GO TO 171
173   CONTINUE
      DO 177 I=1,I5
      WTOT(I) = 0.0     
      ARC = SEND + S(I) 
      WD = 0.0    
      WDD = 0.0   
      WDDD = 0.0  
      DO 175 J=1,M
      W(J) = WTRIG(J)
      FL(J)= FLTRIG(J)
      ARG = PI/FL(J)    
      SI = SIN(ARG*ARC)    
      CO = COS(ARG*ARC)
      WTOT(I) = WTOT(I) + W(J)*SI   
      WD = WD + W(J)*ARG*CO   
      WDD = WDD - W(J)*ARG**2*SI    
      WDDD = WDDD - W(J)*ARG**3*CO  
175   CONTINUE    
      FACT = 1./SQRT(1.+ WD**2)     
      SPHI = R(I)*C2(I) 
      CPHI = RD(I)
      FK1 = C1(I) 
      R(I) = R(I) + WTOT(I)*SPHI    
      RD(I) = FACT*(CPHI + WD*SPHI) 
      C1(I) = FK1-WDD   
      C1D(I) = C1D(I)-WDDD    
      IF (R(I).GT.0.) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)  
177   CONTINUE    
      NFLAG = 0   
C END DEC 1992
C BEG AUG 2005
      GO TO 220
179   CONTINUE
C     READ NORMAL DEFLECTION MODES W AND OBTAIN NEW VALUES FOR R,RD,C1,C2
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (NFLAG.EQ.1) GO TO 183
      IMODE = 1
1792  CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,705,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,710,1,2,INT,AMPIMP(IMODE),CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,714,1,2,ISTART(IMODE),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,716,1,2,NUMB(IMODE),REALL,CHARAC,IOUT,0,1)
      WRITE(IFILE4,'(/,A,I3,/,A,I3,/,A,1P,E12.4,/,A,I4,/,A,I4,/,A,I4)')
     1' Imperfection is provided node-by-node in segment      ',ISEG,
     1' Imperfection mode number,                       IMODE=',IMODE,
     1' Amplitude of this imperfection mode,           AMPIMP=',
     1 AMPIMP(IMODE),
     1' Starting nodal point for this imperfection,    ISTART=',
     1 ISTART(IMODE),
     1' Number of nodal points at which WSHAPE is input, NUMB=',
     1 NUMB(IMODE),
     1' Number of nodal points in this shell segment,      I5=',I5
C
      REWIND IFILE2
      ITOP = NUMB(IMODE)
      DO 1815 I = 1,ITOP
         IPROMP = 1
         IF (I.GT.1) IPROMP = 0
         CALL DATUM(IFILE2,720,1,2,INT,WSHAPE(I,IMODE),CHARAC,IOUT,I,
     1                                                          IPROMP)
         WRITE(IFILE4,'(A,I3,A,1P,E12.4)')
     1 ' Mode no.',IMODE,
     1 ' Normalized normal displacement of imperfection, WSHAPE=',
     1   WSHAPE(I,IMODE)
1815  CONTINUE
      CALL DATUM(IFILE2,722,1,2,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 183 
      IMODE = IMODE + 1
      GO TO 1792
183   CONTINUE
      REWIND IFILE2
      DO 184 I=1,I5
184   WTOT(I) = 0.0
      DO 186 JMODE = 1,IMODE
      NUMBMD = NUMB(JMODE)
      DO 185 I = 1,NUMBMD
      IWTOT = I + ISTART(JMODE) -1
      WTOT(IWTOT) = WTOT(IWTOT) + AMPIMP(JMODE)*WSHAPE(I,JMODE)
185   CONTINUE
186   CONTINUE
C
C BEG OCT 2005
      RMAX = 0.
C END OCT 2005
      DO 210 I=1,I5
      SPHI = R(I)*C2(I)
      CPHI = RD(I)
      FK1 = C1(I)
      WW= WTOT(I)
      IF (I.GT.1) GO TO 180
      WD = (WTOT(2) -WW)/(S(2) - S(1))
      WDD = ((WTOT(3)-WTOT(2))/(S(3)-S(2)) -WD)/(0.5*(S(3)-S(1)))
      GO TO 200
  180 IF (I.LT.I5) GO TO 190
      WD = (WW-WTOT(I-1))/(S(I) - S(I-1))
      WDD=(WD-(WTOT(I-1)-WTOT(I-2))/(S(I-1)-S(I-2)))/(.5*(S(I)-S(I-2)))
      GO TO 200
  190 IP = I+1
      IM = I-1
      WD = (WTOT(IP) -WTOT(IM))/(S(IP)-S(IM))
      WDD=((WTOT(IP)-WW)/(S(IP)-S(I)) -(WW-WTOT(IM))/(S(I)-S(IM)))/
     1  (0.5*(S(IP)-S(IM)))
  200 R(I) = R(I) +WW*SPHI
      Z(I) = Z(I) - WTOT(I)*CPHI
      FACT = 1./SQRT(1. + WD*WD)
      RD(I) = FACT*(CPHI + WD*SPHI)
      C1(I) = FK1 - WDD
      IF (R(I).NE.0.0) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)
C BEG OCT 2005
      RMAX = MAX(RMAX,R(I))
C END OCT 2005
  210 CONTINUE
C BEG OCT 2005
      DO 215 I = 1,I5
         IF (ABS(R(I))/RMAX.LT.0.00001) THEN
            IF (ABS(RD(I)).GT.0.95) THEN
               IF (I.EQ.1) THEN
                  C2(1) = C1(1)
                  C2(2) = C1(2)
                  C2(3) = C1(3)
               ENDIF
               IF (I.EQ.I5) THEN
                  C2(I5) = C1(I5)
                  C2(I5-1) = C1(I5-1)
                  C2(I5-2) = C1(I5-2)
               ENDIF
            ENDIF
         ENDIF
  215 CONTINUE
C END OCT 2005
  220 CONTINUE
      WRITE (IFILE4,230)ISEG
  230 FORMAT(//52H NORMAL (POSITIVE OUTWARD) IMPERFECTION FOR SEGMENT
     1  I3//)
      WRITE (IFILE4,240)(WTOT(I),I=1,I5)
  240 FORMAT(1P10E12.4)
C END AUG 2005
      RETURN
      END
C
C
C
C=DECK      SHELL 
C./      ADD   NAME=SHELL     
      SUBROUTINE SHELL(NRZIN,Z,R,ZT,T,NSUR,ISEG,INDX) 
C     
C     CALLED FROM GEOM4, WHICH IS CALLED FROM GEOM,WHICH IS CALLED FROM 
C     GEOMTY, WHICH IS CALLED FROM READIT.
C     PROVIDES CARTESIAN COORDINATES (Z,R PAIRS) WHICH ARE USED BY GEOM4
C     TO CALCULATE RAD,RADD,CUR1,CUR2 FOR ARBITRARY SHELL MERIDIAN.     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/TORUS/ALPHAT,ZMAX,XMAX,NST   
C BEG MARCH 1990
      COMMON/ZZZGLB/ZGLOBL
C END MARCH 1990
      CHARACTER*4 CHARAC
      DIMENSION Z(100),R(100) 
      DIMENSION DZ(100) 
      DIMENSION ZT(20),T(20)  
      REAL LPHI   
C BEG JULY 1996
      COMMON/INDAT/INFILE
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INNERX/INNER
      CHARACTER*4 ANSOUT
      LOGICAL ANSL1
C END JULY 1996
      NSUR = 0    
10    FORMAT (10I6)                                                           
20    FORMAT (6E12.8)                                                         
      DO 30 I=1,100     
      Z(I) = 0.0  
30    R(I) = 0.0  
      CALL DATUM(IFILE2,123,1,1,NST,REALL,CHARAC,IOUT,0,1)
      IF (NST.NE.1.AND.NST.NE.4) THEN
        WRITE(IFILE4,*)' NST MUST BE EITHER  1  or  4'
        CALL ERREX
      ENDIF
C     
C     NST DENOTES TYPE OF SHELL.. . .     
C        NST = 1 . . GENERAL SHELL . READ IN CARTESIAN COORDINATES OF   
C                                    REFERENCE SURFACE.     
C        NST = 2 . . SHELL WITH CURVATURE AND SLOPE DISCONTINUITY 
C                    ACCORDING TO FORMULA GIVEN BELOW (SKOGH).    
C        NST = 3 . . SPHERICAL CAP WITH SINKAGE NEAR APEX, DZ(I). 
C        NST = 4 . . SEGMENT OF TORUS WITH ELLIPTICAL CROSS-SECTION     
C     
      GO TO (40,50,70,90,50,110),NST
40    CONTINUE    
C     GENERAL SHELL     
C     NRZIN = NO. OF INPUT POINTS IN CARTESIAN FRAME  
      CALL DATUM(IFILE2,124,1,1,NRZIN,REALL,CHARAC,IOUT,0,1)
      IF (NRZIN.LT.5.OR.NRZIN.GT.50) THEN
        WRITE(IFILE4,*)' NRZIN NOT IN PERMISSIBLE RANGE  5  TO  50'
        CALL ERREX
      ENDIF
C     CARTESIAN COORDINATES OF INPUT POINTS     
      DO 42 I = 1,NRZIN
      IPROMP = 1
      REWIND IFILE2
      CALL DATUM(IFILE2,125,1,1,INT,Z(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE2,126,1,1,INT,R(I),CHARAC,IOUT,I,IPROMP)
   42 CONTINUE
      ALPHAT = 0.0
      GO TO 150   
50    CONTINUE    
C     SHELL WITH CURVATURE AND SLOPE DISCONTINUITY,(SKOGH)  
      READ (5,10)NRZIN  
      READ (5,20)RSTART,A,B,PHIS,PHIE     
      READ (5,20)CM,CN  
      ALPHAT = 0.0
      PI = 3.1415927    
      PHIS = PHIS*PI/180.     
      PHIE = PHIE*PI/180.     
      LPHI = PHIE - PHIS
      DPHI = LPHI/(FLOAT(NRZIN) - 1.)     
      ETA = - DPHI/LPHI 
      DO 60 I=1,NRZIN   
      J = I 
      IF(NST.EQ.5) J = NRZIN + 1 - I
      ETA = ETA + DPHI/LPHI   
      RP = RSTART + A*ETA**CM + B*ETA**CN 
      PHI = PHIS + ETA*LPHI   
      IF (NST.EQ.5) PHI = PI/2. - PHI     
      R(J) = RP*SIN(PHI)
      Z0 = RSTART*COS(PHIS)   
      IF (NST.EQ.5) Z0 = (RSTART+A+B)*SIN(PHIE) 
      Z(J) = Z0 - RP*COS(PHI) 
60    CONTINUE    
      GO TO 150   
70    CONTINUE    
C     SPHERICAL CAP WITH OUT-OF-ROUND DZ(R), POS. INWARD    
      READ (5,10)NRZIN  
C     ALPHA = POLAR ANGLE OF EDGE OF FLAT SPOT  
C     ROT  =  NOMINAL RADIUS OF SPHERE    
      READ (5,20)ALPHA,ROT    
      ALPHA = ALPHA*3.14159/180.    
C     CARTESIAN COORDINATES OF SINKAGE (FLAT SPOT)    
      READ (5,20)(DZ(I),R(I),I=1,NRZIN)   
      ALPHAT = 0.0
      CA = COS(ALPHA)   
      DO 80 I=1,NRZIN   
      CPHI = SQRT(1.0 - (R(I)/ROT)**2 )   
      ZNOM = ROT*(CA - CPHI)  
      Z(I) = ZNOM + DZ(I) - DZ(1)   
80    CONTINUE    
      GO TO 150   
90    CONTINUE    
C     SEGMENT OF TORUS WITH ELLIPTICAL CROSS SECTION  
C     ZMAX = 1/2 LENGTH OF AXIAL AXIS     
C     XMAX = 1/2 LENGTH OF RADIAL AXIS    
C     ZA, ZB = AXIAL COORDINATES OF A AND B ENDS OF SEGMENT 
C     ZNUMB = NO. OF POINTS FOR SPLINE FIT.     
C     ALPHAT = RADIUS FROM AXIS OF REVOLUTION TO INTERSECTION OF  
C              SEMIMAJOR AND SEMIMINOR AXES     
C     
      CALL DATUM(IFILE2,127,1,1,INT,ZMAX,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,128,1,1,INT,XMAX,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,129,1,1,INT,ZA  ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,130,1,1,INT,ZB  ,CHARAC,IOUT,0,1)
      ZNUMB = 50.
      CALL DATUM(IFILE2,131,1,2,INT,ALPHAT,CHARAC,IOUT,0,1)
C BEG JULY 1996
      INNER = 0
      IF ((ALPHAT-XMAX).GT.0.0) THEN
         REWIND IFILE3
         CALL DATUM(IFILE3,584,1,2,INT,REALL,ANSOUT,IOUT,0,1)
         IF (ANSL1('Y',ANSOUT,INFILE)) THEN
            INNER = 1
            IF (ZA.GT.ZB) THEN
                TEMPZ = ZA
                ZA = ZB
                ZB = TEMPZ
            ENDIF
         ENDIF
         REWIND IFILE3
      ENDIF
C END JULY 1996
C BEG MARCH 1990
      CALL DATUM(IFILE2,132,1,2,INT,ZGLOBL,CHARAC,IOUT,0,1)
      ZGLOBL = ZGLOBL - ZA
C END MARCH 1990
      NRZIN = ZNUMB     
      DELZ = (ZB - ZA)/(ZNUMB-1.)   
      Z(1) = ZA  
      DO 100 I=2,NRZIN  
      K = I - 1   
      Z(I) = Z(K) + DELZ
      Z0 = ZMAX - Z(I)   
      DISCRM = ABS(1. - Z0**2/ZMAX**2)
100   R(I) = XMAX*SQRT(DISCRM)
      Z0 = ZMAX - Z(1)    
      R(1) = XMAX*SQRT(1. - Z0**2/ZMAX**2)
      GO TO 150   
110   CONTINUE    
C     
C     HYPERBOLOIDAL SHELL IN WHICH - - -  
C     
C         R(I)**2/RW**2  -  Z(I)**2/C**2  =  1.0
C     
C     WHERE - - - 
C                 R(I) = RADIUS AT ITH AXIAL STATION  
C                 Z(I) = AXIAL DISTANCE MEASURED FROM WAIST,POSITIVE    
C                        TOWARD B END OF SEGMENT.     
C                 C = INPUT PARAMETER IN ABOVE EQUATION.    
C                 RW = RADIUS AT WAIST    
C                 ZA = AXIAL DISTANCE FROM WAIST TO A END OF SEGMENT.   
C                 ZB = AXIAL DISTANCE FROM WAIST TO B END OF SEGMENT.   
C                 ZNUMB = NUMBER OF POINTS FOR SPLINE FIT.  
C     
C     NOTE THAT ZA AND ZB SHOULD BE READ IN AS POSITIVE QUANTITIES.     
C     
      READ (5,20)C,RW,ZA,ZB,ZNUMB   
      NRZIN = ZNUMB     
      DELZ = (ZB+ZA)/(ZNUMB-1.)     
      Z(1) = - ZA 
      DO 120 I=2,NRZIN  
      K = I - 1   
120   Z(I) = Z(K) + DELZ
      DO 130 I=1,NRZIN  
130   R(I) = RW*SQRT(1.  +  Z(I)**2/C**2) 
150   CONTINUE    
      RETURN
      END   
C
C
C
C=DECK      SPLICO
      SUBROUTINE SPLICO(X,Y,M,C)
C     CALLED FROM GEOM4, WHOSE TRACE IS GEOM,GEOMTY,READIT,MAIN.
C     SUBROUTINE TO DETERMINE C(1,K),C(2,K),C(3,K) AND C(4,K).
      DIMENSION X(100),Y(100),A(100,3),B(100),Z(100)
      DIMENSION D(99),P(99),E(99),C(4,99)
      MM = M-1
      DO 10 K=1,MM
      D(K) = X(K+1) - X(K)
      P(K) = D(K)/6.0
10    E(K) = (Y(K+1)-Y(K))/D(K)
      DO 20 K=2,MM
20    B(K) = E(K) - E(K-1)
      A(1,2) = -1.0-D(1)/D(2)
      A(1,3) = D(1)/D(2)
      A(2,3) = P(2)-P(1)*A(1,3)
      A(2,2) = 2.0*(P(1)+P(2)) - P(1)*A(1,2)
      A(2,3) = A(2,3)/A(2,2)
      B(2) = B(2)/A(2,2)
      DO 30 K=3,MM
      A(K,2) = 2.0*(P(K-1)+P(K))-P(K-1)*A(K-1,3)
      B(K) = B(K)-P(K-1)*B(K-1)
      A(K,3) = P(K)/A(K,2)
30    B(K) = B(K)/A(K,2)
      Q = D(M-2)/D(M-1)
      A(M,1) = 1.0+Q+A(M-2,3)
      A(M,2) = -Q-A(M,1)*A(M-1,3)
      B(M) = B(M-2)-A(M,1)*B(M-1)
      Z(M) = B(M)/A(M,2)
      MN = M-2
      DO 40 I=1,MN
      K = M-I
40    Z(K) = B(K)-A(K,3)*Z(K+1)
      Z(1) = -A(1,2)*Z(2)-A(1,3)*Z(3)
      DO 50 K=1,MM
      Q = 1.0/(6.0*D(K))
      C(1,K) = Z(K)*Q
      C(2,K) = Z(K+1)*Q
      C(3,K) = Y(K)/D(K)-Z(K)*P(K)
50    C(4,K) = Y(K+1)/D(K)-Z(K+1)*P(K)
      RETURN
      END
C
C
C
C=DECK      SPLINE
      SUBROUTINE SPLINE (X,Y,M,C,XINT,YINT,DYDX,D2YDX2)
C     CALLED FROM GEOM4, WHOSE TRACE IS GEOM,GEOMTY,READIT,MAIN.
C     SUBROUTINE FOR SPLINE FIT INTERPOLATION IN THE TABLE OF VALUES
C     (X1,Y1) TO (XM,YM), WHERE M MAY BE AS LARGE AS 100, WHERE THE
C     CONSTANTS C(1,K),C(2,K),C(3,K) AND C(4,K) ARE ALREADY COMPUTED
C     AND STORED.
C     SUBROUTINE ALSO COMPUTES DY/DX AND D2Y/DX2 AT XINT.
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION X(100),Y(100),C(4,99)
      IF (XINT-X(1)) 80,10,20
10    YINT = Y(1)
      K=1
      GO TO 70
20    K = 1
30    IF (XINT-X(K+1)) 60,40,50
40    YINT = Y(K+1)
      GO TO 70
50    K = K + 1
      IF (M-K) 80,80,30
60    YINT = (X(K+1) - XINT)*(C(1,K)*(X(K+1)-XINT)**2+C(3,K))
      YINT = YINT + (XINT-X(K))*(C(2,K)*(XINT-X(K))**2+C(4,K))
70    DYDX=-3.0*(C(1,K)*(X(K+1)-XINT)**2-C(2,K)*(XINT-X(K))**2)
     1-C(3,K)+C(4,K)
      D2YDX2=6.0*(C(1,K)*(X(K+1)-XINT)+C(2,K)*(XINT-X(K)))
      RETURN
80    WRITE(IFILE4,90)
90    FORMAT (' OUT OF RANGE FOR INTERPOLATION')                        
      RETURN
      END
C
C
C
C=DECK      RZLGLIB
C
C  THIS IS THE RZLG LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      RZLG
      SUBROUTINE RZLG(BBB,S,ZAX,DS)
C     DISCRETE RING INPUT FOR RINGS BELONGING TO ITH SEGMENT
C     NRINGS = NUMBER OF DISCRETE RINGS IN CURRENT SEGMENT. USER MUST
C              PUT DISCRETE RINGS AT STATIONS WHERE LINE LOADS OCCUR
C
C BEG JUL 2010
      COMMON/IFRHX/IFB,RHFIX(198),
     1             KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSGX,IFIX
C END JUL 2010
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(198),TT(600)
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/NOHARM/NHARM
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/TEMGRD/NTGRAD
      COMMON/RGFCE/RHF(198)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/FNDAT/FSTIF(295)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/PAXTAX/PAXIAL(4,50),TAXIAL(3,50)
      CHARACTER*4 CHARAC
C BEG OCT 1999
      DIMENSION BBB(*),S(*),ZAX(*),DS(*)
C END OCT 1999
10    FORMAT(10I6)
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ DISCRETE RING INPUT FOLLOWS...')
      CALL DATUM(IFILE2,148,1,2,NRINGS,REALL,CHARAC,IOUT,0,1)
      IF (NRINGS.LE.-1.OR.NRINGS.GT.20) THEN
      WRITE(IFILE4,*)
     1' NRINGS IS NOT IN THE PERMISSIBLE RANGE, 0 TO 20 .'
      CALL ERREX
      ENDIF
C     DISCRETE RING PROPERTIES READ IN IN RGDATA
C
      IF (NRINGS.NE.0) CALL RGDATA(I,BBB(22*I5I+IPOS),BBB(23*I5I+IPOS),
     1BBB(25*I5I+IPOS),KRING,S(ITOT),SEND,NRINGS,ARC,I5I,ITOT,ZAX(ITOT))
C
C     ELASTIC FOUNDATION STIFFNESS INPUT...
      FSTIF(I) = 0.
      CALL DATUM(IFILE2,190,1,2,INT,FSTIF(I),CHARAC,IOUT,0,1)
C
C     LOAD INPUT
C     ZERO OUT SOME LOAD QUANTITIES
      CALL ZEROIT(I,I5I,BBB(IPOS),BBB(8*I5I+IPOS),BBB(27*I5I+IPOS),
     1BBB(33*I5I+IPOS),BBB(36*I5I+IPOS),BBB(39*I5I+IPOS),TT,NSEG)
C     MECHANICAL AND THERMAL LINE LOADS AND MECHANICAL DISTRIBUTED
C     LOADS AND TEMPERATURE DISTRIBUTION ARE READ IN IN LOADER.
C
      IF (I.GT.1) NLPOS(I) = NLPOS(I-1)
      IF (IPRE.NE.0)
     1CALL LOADRE(I,KRINGS,NRINGS,NSEG,NHARM,NTGRAD,I5I,BBB(27*I5I+IPOS
     2),TT,ZAX(ITOT),BBB(22*I5I+IPOS),BBB(23*I5I+IPOS),S(ITOT),
     3 NLPOS(I),ILPOS(1,I),PALL,LAB(I),IDAB(I),ITOT,BBB(25*I5I+IPOS),
     4 DS(ITOT))
C
C     INPUT PRESTRESS DIRECTLY
C
C BEG JUL 2010
C     IF (IPRE.EQ.0)
C    1CALL GETPST(I,I5I,BBB(33*I5I+IPOS),RHF,S(ITOT),BBB(22*I5I+IPOS),
C    2BBB(23*I5I+IPOS),ZAX(ITOT))
C
      IF (IPRE.EQ.0)
     1CALL GETPST(I,I5I,BBB(33*I5I+IPOS),BBB(36*I5I+IPOS),RHF,RHFIX,
     2S(ITOT),BBB(22*I5I+IPOS),BBB(23*I5I+IPOS),ZAX(ITOT))
C END JUL 2010
      RETURN
      END
C
C
C
C=DECK      RGDATA
      SUBROUTINE RGDATA(I,RAD,RADD,CUR2,K,S,SEND,NRINGS,ARC,I5,ITOT,Z)
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.
C     RING DATA FOR THE DISCRETE RINGS IN THE ITH SEGMENT ARE READ IN.
C     ANY RING CROSS-SECTION MAY BE ORIENTED IN THE PLANE OF THE
C     PARALLEL CIRCLE OF THE SHELL OF REVOLUTION, OR NORMAL TO THE
C     UNDEFORMED SHELL MERIDIAN.
C     THE RINGS ARE CONSIDERED TO BE ATTACHED TO THE SHELL REFERENCE
C     SURFACE AT A SINGLE MESH POINT, ISTATN. THE CROSS-SECTION HAS
C     THE SAME ROTATION AS THE ROTATION OF THE SHELL WALL AT THAT
C     MESH STATION.  THE CENTROID AND SHEAR CENTER
C     ARE CONSIDERED TO COINCIDE IN THE THEORY, AND WARPING IS NEGLECTED
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
C END MAR 2008
      DIMENSION RAD(*),RADD(*),CUR2(*),ZC(198),SC(198),NTYPER(20)
      DIMENSION S(*),ARC(*),IRG(20),Z(*)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      COMMON/RING2/GAM(198),GJ(198), YC(198), 
     1              XC(198),E1(198),E2(198),PHI(200)
      COMMON/RMASS/RM(198)
      COMMON/INERT/ FIS(198),FIN(198),FISN(198)
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/JRING/JJRING
C BEG MAR 2008
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C END MAR 2008
      REAL IS,IN,ISN,IX,IY,IXY,IP
      IF (NRINGS.LT.21) GO TO 20
      WRITE(IFILE4,10)I,NRINGS
10    FORMAT(/,' NRINGS TOO LARGE FOR SEGMENT NO.',I3,/,
     1' MAXIMUM ALLOWABLE=20. VALUE READ IN=',I3,/)
      CALL ERREX
20    CONTINUE
      DO 30 J=1,20
      IRING(I,J) = 0
30    NTYPER(J) = 0
40    FORMAT(10I6)
50    FORMAT(6E12.8)
C
C     NUMBER OF RINGS IN SEGMENT = NRINGS. THIS INCLUDES RINGS AT
C     SEGMENT BOUNDARIES WHICH HAVE NOT BEEN INCLUDED IN PREVIOUS
C     SEGMENT. REMEMBER FICTITIOUS RINGS CORRESPONDING TO STATIONS
C     AT WHICH LINE MECHANICAL OR THERMAL LOADS EXIST.
C
      NSTATN(I) = NRINGS
C
C     IRING(I,J) = LOCAL MESH PT NUMBER OF JTH RING IN ITH SEGMENT.
      IPRM(2)= 149
      JJRING = 1
      CALL STA(IRG,Z,RAD,RADD,S,NRINGS,I5)
      JJRING = 0
      DO 60 J=1,NRINGS
60    IRING(I,J) = IRG(J)
C
C     NTYPER(J) TELLS WHETHER THE RING CROSS SECTION IS ORIENTED
C     RELATIVE TO AXES NORMAL AND IN THE PLANE OF THE SHELL PARALLEL
C     CIRCLE, OR ORIENTED WITH AXES NORMAL AND TANGENTIAL TO SHELL
C     MERIDIAN.  NTYPER = 1 FOR  FORMER,=2 FOR LATTER.WITH NTYPER = 0
C     THERE IS NO RING AT THIS STATION. (THE STATION IS CALLED OUT BECAU
C     LINE LOADS WILL BE READ IN CORRESPONDING TO THIS POINT ON THE SHEL
C
      DO 65 J = 1,NRINGS
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,152,1,2,NTYPER(J),REALL,CHARAC,IOUT,J,IPROMP)
C BEG MAR 2008
C     IF (NTYPER(J).LE.-1.OR.NTYPER(J).GT.5) THEN
      IF (NTYPER(J).LT.-1.OR.NTYPER(J).GT.5) THEN
      WRITE(IFILE4,*)' NTYPER(J) IS NOT IN PERMISSIBLE RANGE,-1 TO 5'
C END MAR 2008
      CALL ERREX
      ENDIF
   65 CONTINUE
C
      RNGMAS = 0.
      DO 190 J=1,NRINGS
      K = K + 1
      NT = NTYPER(J)
      IF (NTYPER(J).EQ.0) NT = 3
C BEG MAR 2008
      IF (NTYPER(J).EQ.-1) NT = 3
      NTYPAL(K) = NTYPER(J)
      NGROUN(K) = 0
C END MAR 2008
      GO TO (70,80,90,100,110),NT
C
C     RING CROSS SECTION ORIENTED IN PLANE OF PARALLEL CIRCLE.
   70 CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,153,1,1,INT,ER(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,154,1,1,INT,AREA(K),CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,155,1,1,INT,IY(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,156,1,1,INT,IX(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,157,1,1,INT,IXY(K) ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,158,1,1,INT,E1(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,159,1,1,INT,E2(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,160,1,1,INT,GJ(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,161,1,1,INT,RM(K)  ,CHARAC,IOUT,J,1)
C
      GO TO 120
C
C     RING CROSS SECTION ORIENTED NORMAL AND TANGENTIAL TO SHELL MERIDIA
   80 CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,162,1,1,INT,ER(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,163,1,1,INT,AREA(K),CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,164,1,1,INT,FIS(K) ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,165,1,1,INT,FIN(K) ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,166,1,1,INT,FISN(K),CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,167,1,1,INT,ZC(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,168,1,1,INT,SC(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,169,1,1,INT,GJ(K)  ,CHARAC,IOUT,J,1)
      CALL DATUM(IFILE2,170,1,1,INT,RM(K)  ,CHARAC,IOUT,J,1)
C
      GO TO 120
90    CONTINUE
C
C     NO RING HERE.
      ER(K) = 0.0
      AREA(K) = 0.0
      IY(K) = 0.0
      IX(K) = 0.0
      IXY(K) = 0.0
      E1(K) = 0.0
      E2(K) = 0.0
      FIN(K) = 0.0
      FIS(K) = 0.0
      FISN(K) = 0.0
      GJ(K) = 0.0
      RM(K) = 0.0
C BEG MAR 2008
      NGROUN(K) = 0
      IF (NTYPER(J).EQ.-1) THEN
C Read input for springs
C23456789012345678901234567890123456789012345678901234567890123456789012
        REWIND IFILE2
        CALL DATUM(IFILE2,815,1,2,INT,SPRAXL(K)  ,CHARAC,IOUT,J,1)
        CALL DATUM(IFILE2,820,1,2,NSPRNG(K),REALL,CHARAC,IOUT,J,1)
        IUP = NSPRNG(K)
        DO 95 II = 1,IUP
         CALL DATUM(IFILE2,825,1,2,INT,SPRANG(II,K),CHARAC,IOUT,II,1)
         REWIND IFILE2
   95   CONTINUE
        DO 952 II = 1,IUP
         CALL DATUM(IFILE2,830,1,2,INT,SPRKON(II,K),CHARAC,IOUT,II,1)
         REWIND IFILE2
  952   CONTINUE
        CALL DATUM(IFILE2,835,1,2,INT,SPREC1(K)  ,CHARAC,IOUT,J,1)
        CALL DATUM(IFILE2,840,1,2,INT,SPREC2(K)  ,CHARAC,IOUT,J,1)
        E1(K) = SPREC1(K)
        E2(K) = SPREC2(K)
        CALL DATUM(IFILE2,845,1,2,INT,REALL,ANSOUT,IOUT,0,1)
        IF (ANSL1('N',ANSOUT,INFILE)) GO TO 97 
        NGROUN(K) = 1
        CALL DATUM(IFILE2,850,1,2,INT,SPRAXG(K)  ,CHARAC,IOUT,J,1)
        CALL DATUM(IFILE2,855,1,2,INT,SPRRAD(K)  ,CHARAC,IOUT,J,1)
        DO 96 II = 1,IUP
         CALL DATUM(IFILE2,860,1,2,INT,SPRAGG(II,K),CHARAC,IOUT,II,1)
         REWIND IFILE2
   96   CONTINUE
C
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(/,A,/,A,I3,/,A)')
     1 ' ***************** OUTPUT RELATING TO SPRINGS ****************',
     1 ' The following output is for springs attached to ring no.',K,
     1 ' *************************************************************'
C
         WRITE(IFILE4,'(A,/,A)')
     1 ' The following are input quantities relating',
     1 ' to all the springs attached to this ring:'
         WRITE(IFILE4,'(A,I12,A,/,A)')
     1 ' NTYPAL =',NTYPAL(K),' =index for type of ring (NTYPAL = -1',
     1 '           means a ring with springs attached to it.)'
         WRITE(IFILE4,'(A,I12,A,/,A,/,A,/,A)')
     1 ' NGROUN =',NGROUN(K),' = 1 if springs are attached to ground,',
     1 '           = 0 if springs are attached to a previous',
     1 '           ring. (NOTE: The coding has not been',
     1 '           written for the NGROUN = 0 option.)'
         WRITE(IFILE4,'(A,I12,A,/,A)')
     1 ' NSPRNG =',NSPRNG(K),' = number of springs attached to this',
     1 '                         ring.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPRAXL =',SPRAXL(K),' = global axial coordinate of this',
     1 '                         ring.'
         JJUP = NSPRNG(K)
         WRITE(IFILE4,'(A,I2,A,A,/,(1P5E12.4))')
     1 ' SPRANG =',NSPRNG(K),' circumferential angles of spring',
     1 ' attachment points on this ring:',(SPRANG(II,K),II=1,JJUP)
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(A,I2,A,I2,A,/,(1P5E12.4))')
     1 ' SPRKON =',NSPRNG(K),' spring constants for the',NSPRNG(K),
     1 ' springs attached to this ring:',(SPRKON(II,K),II=1,JJUP)
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPREC1 =',SPREC1(K),' = radial eccentricity e1 of the',
     1 '           attachment points of all the springs to this ring.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPREC2 =',SPREC2(K),' = axial  eccentricity e2 of the',
     1 '           attachment points of all the springs to this ring.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A,/,A)')
     1 ' SPRAXG =',SPRAXG(K),' = global axial coordinate of the',
     1 '           attachment of all the springs associated with this',
     1 '           ring to ground.'
         WRITE(IFILE4,'(A,1PE12.4,A,/,A)')
     1 ' SPRRAD =',SPRRAD(K),' = radius of spring ground attachment',
     1 '                         points'
         WRITE(IFILE4,'(A,I2,A,A,/,(1P5E12.4))')
     1 ' SPRAGG =',NSPRNG(K),' circumferential angles of spring',
     1 ' attachment points to ground:',(SPRAGG(II,K),II=1,JJUP)
C
         WRITE(IFILE4,962)
  962 FORMAT(/,
     1' SPRING   CIRC. ANGLE CIRC. ANGLE   SPRING     AZIMUTHAL',
     1'  INCLINATION',/,
     1'  NO.     OF ATTACH-  OF ATTACH-   LENGTH,L      ANGLE  ',
     1'     ANGLE',/,
     1'          MENT POINT  MENT POINT               RELATIVE ', 
     1'   RELATIVE',/,
     1'            ON RING   ON GROUND                 TO RING ',
     1'   TO RING')
C23456789012345678901234567890123456789012345678901234567890123456789012
         IPOINT = IRING(I,J)
         PI = 3.1415927
         DO 965 IANGLE = 1,JJUP
            THETRI = SPRANG(IANGLE,K)*PI/180.
            CTHETR = COS(THETRI)
            STHETR = SIN(THETRI)
            XRING  = (RAD(IPOINT) + SPREC1(K))*CTHETR
            YRING  = SPRAXL(K)
            ZRING  = (RAD(IPOINT) + SPREC1(K))*STHETR
            THETGI = SPRAGG(IANGLE,K)*PI/180.
            CTHETG = COS(THETGI)
            STHETG = SIN(THETGI)
            XGROUN = SPRRAD(K)*CTHETG
            YGROUN = SPRAXG(K)
            ZGROUN = SPRRAD(K)*STHETG
            AAAX   = XRING - XGROUN
            BBBX   = YRING - YGROUN
            CCCX   = ZRING - ZGROUN
            FLONG  = SQRT(AAAX**2 +BBBX**2 +CCCX**2)
            SLONG  = SQRT(AAAX**2 +CCCX**2)
            RADDIF = ABS(SPRRAD(K) -(RAD(IPOINT) + SPREC1(K)))
            THETAG = (SPRAGG(IANGLE,K) - SPRANG(IANGLE,K))*PI/180.
            DBIG = SPRRAD(K)*(1.-COS(THETAG))
            SPRRAT = (RADDIF-DBIG)/SLONG
            SPRPHI = ACOS(SPRRAT)
            IF (SPRAGG(IANGLE,K).LT.SPRANG(IANGLE,K)) SPRPHI = -SPRPHI
            SPRGAM = ACOS(SLONG/FLONG)
            IF (BBBX.GT.0.) SPRGAM = -SPRGAM
            ANGPHI = SPRPHI*180./PI
            ANGGAM = SPRGAM*180./PI
C23456789012345678901234567890123456789012345678901234567890123456789012
            WRITE(IFILE4,963)IANGLE,SPRANG(IANGLE,K),SPRAGG(IANGLE,K),
     1                       FLONG,ANGPHI,ANGGAM
  963       FORMAT(I4,1PE16.4,1P4E12.4)
  965    CONTINUE
C
        REWIND IFILE2
        GO TO 120
   97   CONTINUE
        CALL DATUM(IFILE2,865,1,2,INT,REALL,ANSOUT,IOUT,0,1)
        IF (ANSL1('N',ANSOUT,INFILE)) GO TO 98
        CALL DATUM(IFILE2,870,1,2,ISPRSG(K),REALL,CHARAC,IOUT,J,1)
        CALL DATUM(IFILE2,875,1,2,ISPRRG(K),REALL,CHARAC,IOUT,J,1)
        REWIND IFILE2
        GO TO 120
   98   CONTINUE
C       WRITE(IFILE4,'(/,A,/,A,/,A,/,A)')
C     1' ************** RUN ABORTING *********************',
C     1' Illegal input for springs. The "other" ends of the',
C     1' springs are not connected to anything. CALL EXIT',
C     1' *************************************************'
C       CALL ERREX
        REWIND IFILE2
      ENDIF
C END MAR 2008
      GO TO 120
100   CONTINUE
      CALL RSTIFF(ER(K),AREA(K),IX(K),IY(K),IXY(K),E1(K),E2(K),GJ(K),
     1RM(K),J)
      GO TO 120
110   CONTINUE
      CALL RSTIFF(ER(K),AREA(K),FIN(K),FIS(K),FISN(K),ZC(K),SC(K),GJ(K),
     1RM(K),J)
120   CONTINUE
C     TRANSFORM RING INERTIAS TO PARALLEL CIRCLE ORIENTATION.
      L = IRING(I,J)
C     GLOBAL STATION OF KTH DISCRETE RING STORED IN IZRING(K)
      IZRING(K) = ITOT + L - 1
      ARC(K) = S(L)
      SP = RAD(L)*CUR2(L)
      CP = RADD(L)
      GO TO (130,140,150,130,140),NT
130   CONTINUE
      FIN(K) = IY(K)*CP**2 + IX(K)*SP**2 + 2.*IXY(K)*SP*CP
      FIS(K) = IY(K)*SP**2 + IX(K)*CP**2 - 2.*IXY(K)*SP*CP
      FISN(K)= CP*SP*(IY(K)-IX(K)) + IXY(K)*(SP**2 - CP**2)
      GO TO 180
140   CONTINUE
      IS = FIS(K)
      IN = FIN(K)
      ISN = FISN(K)
      E1(K) = ZC(K)*SP + SC(K)*CP
      E2(K) =-ZC(K)*CP + SC(K)*SP
      IX(K) = IS*CP**2 + IN*SP**2 - 2.*ISN*SP*CP
      IY(K) = IS*SP**2 + IN*CP**2 + 2.*ISN*SP*CP
      IXY(K)= CP*SP*(IN-IS) + ISN*(SP**2 - CP**2)
      GO TO 180
150   CONTINUE
      GO TO 180
180   CONTINUE
      IF (IX(K)*IY(K).GE.IXY(K)**2) GO TO 265
      WRITE(IFILE4,262) K,IX(K),IY(K),IXY(K)
262   FORMAT(/,' RING NO.',I3,' HAS BAD PROPERTIES. IX,IY,IXY = ',
     11P3E12.3)
      CALL ERREX
265   CONTINUE
C
C     RC IS THE RADIUS TO RING CENTROID, AN IMPORTANT VARIABLE USED LATE
      RC(K) = RAD(L) + E1(K)
      IP(K) = IX(K) + IY(K)
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
         RNGMAS = RNGMAS + RM(K)*AREA(K)*RC(K)
      ELSE
         RNGMAS = RNGMAS + RM(K)*AREA(K)*AXIALL
      ENDIF
190   CONTINUE
C BEG APR 2009
      IF (IPRISM.EQ.0) RNGMAS = 2.*3.1415927*RNGMAS
C END APR 2009
      WRITE(IFILE4,200) I, RNGMAS
  200 FORMAT(/,' MASS OF DISCRETE RINGS IN SEGMENT NO.',I3,' = ',
     1  1PE12.4,/)
      RETURN
      END
C
C
C
C=DECK      RSTIFF
C     OVERLAY(1,3)
      SUBROUTINE RSTIFF(E,AREA,IX,IY,IXY,E1,E2,GJ,RM,JJ)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      REAL IX,IY,IXY,J,L
      DIMENSION L(3),T(3),X(3),A(3),Y(3)
10    FORMAT(6E12.8)
      REWIND IFILE2
      CALL DATUM(IFILE2,171,1,1,INT,L(1)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,172,1,1,INT,L(2)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,173,1,1,INT,L(3)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,174,1,1,INT,T(1)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,175,1,1,INT,T(2)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,176,1,1,INT,T(3)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,177,1,1,INT,E     ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,178,1,1,INT,U     ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,179,1,1,INT,X1P   ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,180,1,1,INT,Y(1)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,181,1,1,INT,Y(2)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,182,1,1,INT,Y(3)  ,CHARAC,IOUT,JJ,1)
      CALL DATUM(IFILE2,183,1,1,INT,RM    ,CHARAC,IOUT,JJ,1)
C
      G = 0.5*E/(1.+U)
      IMEM = 3
      AREA = 0.
      E1 = 0.
      E2 = 0.
C     FIND AREA
      DO 20 I=1,IMEM
      A(I) = L(I)*T(I)
20    AREA = AREA + A(I)
      X(1) = X1P + T(1)/2.
      X(2) = X1P + T(1) + L(2)/2.
      X(3) = X1P + T(1) + L(2) + T(3)/2.
      IY = (L(1)*T(1)**3 + T(2)*L(2)**3 + L(3)*T(3)**3)/12.
      IX = (T(1)*L(1)**3 + L(2)*T(2)**3 + T(3)*L(3)**3)/12.
      J = 0.
C     FIND E1 AND E2
      DO 30 I=1,IMEM
      IF (AREA.EQ.0.0) GO TO 30
      E1 = E1 + A(I)*X(I)/AREA
      E2 = E2 + A(I)*Y(I)/AREA
30    CONTINUE
C     FIND IY, IX, AND J
      DO 40 I=1,IMEM
      IY = IY + A(I)*(E1 - X(I))**2
      IX = IX + A(I)*(E2 - Y(I))**2
      IF (L(I).EQ.0.0) GO TO 40
      J = J + L(I)*T(I)**3*(.333-3.36*(T(I)/L(I))*(1.-(T(I)/L(I))**4/12.
     1)/16.)
40    CONTINUE
      GJ = G*J
C     FIND IXY
      Y1A = Y(1) - L(1)/2. - E2
      Y1B = Y1A + L(1)
      Y3A = Y(3) - L(3)/2. - E2
      Y3B = Y3A + L(3)
      X2A = X(2) - L(2)/2. - E1
      X2B = X2A + L(2)
      IXY = (X(1)-E1)*T(1)*(Y1B**2-Y1A**2)/2.
     1+ (X(3)-E1)*T(3)*(Y3B**2 -Y3A**2)/2.
     2+ (Y(2)-E2)*T(2)*(X2B**2 -X2A**2)/2.
      RETURN
      END
C
C
C
C=DECK      ZEROIT
      SUBROUTINE ZEROIT(I,I5,THERM,C,P,PSVAR,PSFIX,TIO,TT,NSEG)
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     CERTAIN LINE LOADS AND DISTRIBUTED LOADS ARE INITIALIZED.
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/PAXTAX/ PAXIAL(4,50),TAXIAL(3,50)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      DIMENSION THERM(I5,8),C(I5,14),P(I5,6),PSVAR(I5,3),PSFIX(I5,3)
      DIMENSION TIO(I5,4),TT(I5,6)
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/INSTAB/INDIC
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/SHEARF/SHEAR(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/DTNR(198),DTMR(198),DTMRX(198)
      COMMON/NOHARM/NHARM
      COMMON/WALPRP/EA(295),EB(295),GAB(295),UAB(295),
     1              ALPH1(295),ALPH2(295)
      COMMON/FOSAVE/VSAVE(198),HSAVE(198),FMSAVE(198)
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      IF (I.NE.1) GO TO 60
      IOMGAB = 1
      DO 10 J=1,295
      NLPOS(J) = 0
      LAB(J) = 0
      IDAB(J) = 0
      DO 5 K = 1,12
    5 ILPOS(K,J) = 0
      EA(J) = 0.
      EB(J) = 0.
      GAB(J)= 0.
      UAB(J)= 0.
      ALPH1(J) = 0.
      ALPH2(J) = 0.
   10 CONTINUE
      NLPOS(1) = 1
C BEG MAR 2007
      DO 20 J=1,40000
C END MAR 2007
   20 PALL(J  ) = 0.
      DO 50 J=1,198
      V(J) = 0.0
      HF(J) = 0.0
      FM(J) = 0.0
      SHEAR(J) = 0.0
      VFIX(J) = 0.
      SHFIX(J) = 0.
      HFIX(J) = 0.
      FMFIX(J) = 0.
      TNR(J) = 0.0
      TMR(J) = 0.0
      TMRX(J) = 0.0
      DTNR(J) = 0.0
      DTMR(J) = 0.0
      DTMRX(J) = 0.0
      STEP1(J) = 0.0
      STEP2(J) = 0.0
      STEP3(J) = 0.0
      VSAVE(J) = 0.0
      HSAVE(J) = 0.0
      FMSAVE(J) = 0.0
50    CONTINUE
      DO 51 J = 1,50
      DO 30 K=1,4
30    PAXIAL(K,J) = 0.0
      DO 40 K=1,3
40    TAXIAL(K,J) = 0.0
51    CONTINUE
60    CONTINUE
      DO 110 J=1,I5
      DO 70 K=1,3
      PSVAR(J,K) = 0.0
   70 PSFIX(J,K) = 0.0
      DO 75 K = 1,6
      TT(J,K) = 0.
   75 P(J,K) = 0.
      DO 80 K=1,8
80    THERM(J,K) = 0.0
      DO 90 K=1,14
90    C(J,K) = 0.0
      DO 100 K=1,4
100   TIO(J,K) = 0.0
110   CONTINUE
      RETURN
      END
C
C
C
C=DECK      LOADRE
      SUBROUTINE LOADRE(I,KRING,NRINGS,NSEG,NHARM,NTGRAD,I5,PP,TT,Z,
     1RAD,RADD,S,NPOS,IPOS,PALL,LINAB,IDISAB,ITOT,CUR2,DS)
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/INSTAB/INDIC
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      DIMENSION TAXIAL(3,20),CUR2(*),DS(*)
      DIMENSION PP(I5,6),TT(I5,6),Z(*),RADD(*),RAD(*),S(*),IPOS(*)
      DIMENSION PALL(*),P1(100),P2(100),T1(100)
10    FORMAT(10I6)
      CALL DATUM(IFILE2,192,0,0,INT,REALL,CHARAC,IOUT,0,1)
      LINAB = 1
      LINTYP = 0
      LMECH  = 0
      ILOOP  = 0
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ LINE LOAD INPUT FOLLOWS...')
      IF (INDIC.NE.3) GO TO 15
      CALL DATUM(IFILE2,194,1,2,LINAB,REALL,CHARAC,IOUT,0,1)
      IF (LINAB.LT.0.OR.LINAB.GT.3) THEN
       WRITE(IFILE4,*)' LINAB NOT IN PERMISSIBLE RANGE 0 TO 3'
       CALL ERREX
      ENDIF
      IF (LINAB.EQ.1.OR.LINAB.EQ.3)
     1CALL DATUM(IFILE2,196,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (LINAB.EQ.2)
     1CALL DATUM(IFILE2,198,0,0,INT,REALL,CHARAC,IOUT,0,1)
   15 CONTINUE
C
      INDXAB = 1
      IF (ILOOP.EQ.2.OR.LINAB.EQ.2) INDXAB = 2
      LSET = 1
      IF (ILOOP.EQ.2.OR.LINAB.EQ.2) LSET   = 4
C
      IF (LINAB.EQ.0) GO TO 18
      IF (LSET.EQ.1.AND.INDIC.GE.3) WRITE(IFILE4,13) I
C23456789012345678901234567890123456789012345678901234567890123456789012
   13 FORMAT(/,' LINE LOADS FOR LOAD SYSTEM "A", SEGMENT NO.',I3,'...')
      IF (LSET.EQ.4) WRITE(IFILE4,14) I
   14 FORMAT(/,' LINE LOADS FOR LOAD SYSTEM "B", SEGMENT NO.',I3,'...')
      IF (LSET.EQ.1.AND.INDIC.GE.3) WRITE(IOUT,16)
   16 FORMAT(6X,'H',9X,'$ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS')
      IF (LSET.EQ.4) WRITE(IOUT,17)
   17 FORMAT(6X,'H',9X,'$ LINE LOAD INPUT FOR LOAD SET "B" FOLLOWS')
   18 CONTINUE
C
      IF (ILOOP.EQ.2)
     1CALL DATUM(IFILE2,198,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (LINAB.NE.0) THEN
        CALL DATUM(IFILE2,201,1,2,LINTYP,REALL,CHARAC,IOUT,0,1)
        IF (LINTYP.LT.0.OR.LINTYP.GT.3) THEN
          WRITE(IFILE4,*)' LINTYP NOT IN PERMISSIBLE RANGE 0 TO 3'
          CALL ERREX
        ENDIF
      ENDIF
C
      IF (NSTATN(I).EQ.0.AND.LINTYP.NE.0) GO TO 20
      GO TO 40
20    WRITE(IFILE4,30)I
C23456789012345678901234567890123456789012345678901234567890123456789012
   30 FORMAT(/,' LINE LOADS MUST ALWAYS BE ASSOCIATED WITH DISCRETE',/,
     1' RINGS.  RUN "INPUT" OR "MODIFY" AGAIN, THIS TIME INTRODUCING',/,
     1' FAKE RINGS AT MERIDIONAL STATIONS WHERE LINE LOADS ARE',/,
     1' APPLIED.  THIS IS SEGMENT NO.',I3,/)
C
      CALL ERREX
40    CONTINUE
C
      IF (LINAB.EQ.0.OR.LINAB.EQ.2)
     1 CALL LODPOS(NPOS,NHARM,LINAB,LINTYP,LMECH,1,IPOS(1))
C
C     LINTYP = 0 - - - NO LOAD
C     LINTYP = 1 - - - MECHANICAL LOADS ONLY
C     LINTYP = 2 - - - THERMAL LINE LOADS ONLY
C     LINTYP = 3 - - - MECHANICAL AND THERMAL LINE LOADS
C
      CALL LINELD(LINTYP,INDIC,KRING,NRINGS,I,NSEG,NHARM,LMECH,LSET,
     1 P1,P2,T1,Z,ITOT)
      CALL LODPOS(NPOS,NHARM,LINAB,LINTYP,LMECH,INDXAB,IPOS(LSET))
      CALL LODSTO(NHARM,IPOS(LSET),P1,P2,T1,PALL)
C
      IF (LINAB.NE.3) GO TO 42
      IF (ILOOP.EQ.2) GO TO 42
      ILOOP = 2
      REWIND IFILE2
      GO TO 15
   42 CONTINUE
C
      IF (LINAB.EQ.0.OR.LINAB.EQ.1)
     1 CALL LODPOS(NPOS,NHARM,LINAB,0,0,2,IPOS(4))
C
C     DISTRIBUTED THERMAL AND MECHANICAL LOAD INPUT FOR ITH SEGMENT
C
      WRITE(IOUT,3)
    3 FORMAT(6X,'H',9X,'$ DISTRIBUTED LOAD INPUT FOLLOWS...')
      CALL DATUM(IFILE2,240,1,2,IDISAB,REALL,CHARAC,IOUT,0,1)
      IF (IDISAB.LT.0.OR.IDISAB.GT.3) THEN
         WRITE(IFILE4,*)' IDISAB NOT IN PERMISSIBLE RANGE 0 TO 3'
         CALL ERREX
      ENDIF
      NLTYPE = 0
      LMECH  = 0
      IF (IDISAB.EQ.1.OR.IDISAB.EQ.3)
     1CALL DATUM(IFILE2,242,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (IDISAB.EQ.2)
     1CALL DATUM(IFILE2,244,0,0,INT,REALL,CHARAC,IOUT,0,1)
      ILOOP = 1
   45 CONTINUE
C
      INDXAB = 1
      IF (ILOOP.EQ.2.OR.IDISAB.EQ.2) INDXAB = 2
      LSET = 7
      IF (ILOOP.EQ.2.OR.IDISAB.EQ.2) LSET   = 10
      ILPRE = 1
      IF (ILOOP.EQ.2.OR.IDISAB.EQ.2) ILPRE = 4
      IF (IDISAB.EQ.0) GO TO 49
      IF (ILPRE.EQ.1) WRITE(IFILE4,43) I
C23456789012345678901234567890123456789012345678901234567890123456789012
   43 FORMAT(/,' SURFACE LOADS FOR LOAD SYSTEM "A", SEGMENT NO.',I3)
      IF (ILPRE.EQ.4) WRITE(IFILE4,44) I
   44 FORMAT(/,' SURFACE LOADS FOR LOAD SYSTEM "B", SEGMENT NO.',I3)
      IF (ILPRE.EQ.1) WRITE(IOUT,46)
   46 FORMAT(6X,'H',9X,'$ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS')
      IF (ILPRE.EQ.4) WRITE(IOUT,47)
   47 FORMAT(6X,'H',9X,'$ SURFACE LOAD INPUT FOR LOAD SET "B" FOLLOWS')
   49 CONTINUE
C
      IF (ILOOP.EQ.2)
     1CALL DATUM(IFILE2,244,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (IDISAB.NE.0) THEN
        CALL DATUM(IFILE2,250,1,2,NLTYPE,REALL,CHARAC,IOUT,0,1)
        IF (NLTYPE.LT.0.OR.NLTYPE.GT.3) THEN
           WRITE(IFILE4,*)' NLTYPE NOT IN PERMISSIBLE RANGE 0 TO 3'
           CALL ERREX
        ENDIF
      ENDIF
C
      IF (IDISAB.EQ.0.OR.IDISAB.EQ.2)
     1 CALL LODPOS(NPOS,NHARM,IDISAB,NLTYPE,LMECH,1,IPOS(7))
C
C     NLTYPE = 0 - - - NO LOAD
C     NLTYPE = 1 - - - MECHANICAL LOADS ONLY
C     NLTYPE = 2 - - - THERMAL DISTRIBUTED LOADS ONLY
C     NLTYPE = 3 - - - MECHANICAL AND THERMAL DISTRIBUTED LOADS
C
      CALL DISTL(I5,NLTYPE,NPSTAT,NTSTAT,PP(1,ILPRE),TT(1,ILPRE),
     1 TAXIAL,INDIC,I,NSEG,NHARM,Z,RAD,RADD,S,LMECH,LSET,P1,P2,T1,
     1 CUR2,DS,INDXAB)
      CALL LODPOS(NPOS,NHARM,IDISAB,NLTYPE,LMECH,INDXAB,IPOS(LSET))
      CALL LODSTO(NHARM,IPOS(LSET),P1,P2,T1,PALL)
C
      IF (IDISAB.NE.3) GO TO 50
      IF (ILOOP.EQ.2) GO TO 50
      ILOOP = 2
      REWIND IFILE2
      GO TO 45
   50 CONTINUE
C
      IF (IDISAB.EQ.0.OR.IDISAB.EQ.1)
     1 CALL LODPOS(NPOS,NHARM,IDISAB,0,0,2,IPOS(10))
C
      WRITE(IFILE4,60) (IPOS(J),J=1,12)
   60 FORMAT(/,' POINTERS TO CIRCUMFERENTIAL HARMONICS OF LOADING',12I5)
C23456789012345678901234567890123456789012345678901234567890123456789012
      RETURN
      END
C
C
C
C=DECK      LINELD
      SUBROUTINE LINELD(LINTYP,INDIC,KRING,NRINGS,I,NSEG,NHARM,LMECH,
     1 LSET,PLIN1,PLIN2,TLIN,Z,ITOT)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/DTNR(198),DTMR(198),DTMRX(198)
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/SHEARF/SHEAR(198)
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/PAXTAX/ PAXIAL(4,50),TAXIAL(3,50)
      DIMENSION PLIN1(*),PLIN2(*),TLIN(*),Z(*)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      CHARACTER*4 CHARAC
C
      IF (LINTYP.EQ.0) GO TO 80
      NKR = KRING + NRINGS
      KRING1 = KRING + 1
      IF (LINTYP.EQ.2) GO TO 40
      CALL DATUM(IFILE2,202,0,0,INT,REALL,CHARAC,IOUT,0,1)
C     READ MECHANICAL LINE LOADS
      IF (INDIC.NE.3) GO TO 10
C     READ NONSYMMETRIC MECHANICAL LINE LOADS
      CALL LOADRD(1,4,50,NRINGS,I,NSEG,NHARM,INDIC,PLIN1,PLIN2,
     1PAXIAL(1,KRING1),203,LMECH,LSET)
C
      IF (LSET.EQ.1) THEN
C
C  FOLLOWING STATEMENT ADDED 17 AUG 1985 (DYNAMIC REACTION)...
C
      CALL FDYNAM(Z,ITOT,NHARM,NKR,KRING1,I,PLIN1,PLIN2,PAXIAL,1)
C  END 17 AUG. MODIFICATION.
      DO 5 K = KRING1,NKR
      V(K)     = PAXIAL(1,K)
      SHEAR(K) = PAXIAL(2,K)
      HF(K)    = PAXIAL(3,K)
      FM(K)    = PAXIAL(4,K)
    5 CONTINUE
      ELSE
C
C  FOLLOWING STATEMENT ADDED 17 AUG 1985 (DYNAMIC REACTION)...
C
      CALL FDYNAM(Z,ITOT,NHARM,NKR,KRING1,I,PLIN1,PLIN2,PAXIAL,2)
C  END 17 AUG. MODIFICATION.
      DO 6 K = KRING1,NKR
      VFIX(K)  = PAXIAL(1,K)
      SHFIX(K) = PAXIAL(2,K)
      HFIX(K)  = PAXIAL(3,K)
      FMFIX(K) = PAXIAL(4,K)
    6 CONTINUE
      ENDIF
C
      GO TO 40
C     READ FIXED AXISYMMETRICAL MECHANICAL LINE LOADS
10    CALL LOADRD(1,4,50,NRINGS,I,NSEG,NHARM,INDIC,PLIN1,PLIN2,
     1PAXIAL(1,KRING1),203,LMECH,LSET)
      IF (LSET.EQ.1) THEN
      DO 12 K = KRING1,NKR
      V(K)     = PAXIAL(1,K)
      HF(K)    = PAXIAL(3,K)
      FM(K)    = PAXIAL(4,K)
   12 CONTINUE
      ELSE
      DO 14 K = KRING1,NKR
      VFIX(K)  = PAXIAL(1,K)
      HFIX(K)  = PAXIAL(3,K)
      FMFIX(K) = PAXIAL(4,K)
   14 CONTINUE
      ENDIF
C
      IF (LSET.NE.1) GO TO 40
C     READ VARIABLE MECHANICAL LINE LOADS OR MECHANICAL L.L.INCREMENTS
      CALL LOADRD(1,4,50,NRINGS,I,NSEG,NHARM,INDIC,PLIN1,PLIN2,
     1PAXIAL(1,KRING1),211,LMECH,LSET)
C
      DO 30 K=KRING1,NKR
      STEP1(K) = PAXIAL(1,K)
      STEP2(K) = PAXIAL(3,K)
30    STEP3(K) = PAXIAL(4,K)
40    CONTINUE
      IF (LINTYP.EQ.1) GO TO 80
C     READ THERMAL LINE LOADS
      CALL DATUM(IFILE2,230,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IF (INDIC.NE.3) GO TO 50
C     READ NONSYMMETRIC THERMAL LINE LOADS
      CALL LOADRD(2,3,50,NRINGS,I,NSEG,NHARM,INDIC,TLIN ,PLIN2,TAXIAL
     1(1,KRING1),231,LMECH,LSET)
      IF (LSET.EQ.1) THEN
      DO 42 K = KRING1,NKR
      TNR(K) = TAXIAL(1,K)
      TMR(K) = TAXIAL(2,K)
      TMRX(K)= TAXIAL(3,K)
   42 CONTINUE
      ELSE
      DO 44 K = KRING1,NKR
      DTNR(K) = TAXIAL(1,K)
      DTMR(K) = TAXIAL(2,K)
      DTMRX(K)= TAXIAL(3,K)
   44 CONTINUE
      ENDIF
      GO TO 80
C     READ AXISYMMETRIC FIXED THERMAL LINE LOADS
50    CALL LOADRD(2,3,50,NRINGS,I,NSEG,NHARM,INDIC,TLIN ,PLIN2,
     1TAXIAL(1,KRING1),231,LMECH,LSET)
      IF (LSET.EQ.1) THEN
      DO 60 K=KRING1,NKR
      TNR(K) = TAXIAL(1,K)
      TMR(K) = TAXIAL(2,K)
60    TMRX(K)= TAXIAL(3,K)
      ELSE
      DO 62 K = KRING1,NKR
      DTNR(K) = TAXIAL(1,K)
      DTMR(K) = TAXIAL(2,K)
      DTMRX(K)= TAXIAL(3,K)
   62 CONTINUE
      ENDIF
C
80    CONTINUE
      RETURN
      END
C
C
C
C=DECK      LOADRD
      SUBROUTINE LOADRD(LTYPE,LKIND,NSTATN,KSTATN,ISEG,NSEG,NHARM,INDIC,
     1P1,P2,P,JPRM,LMECH,LSET)
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      DIMENSION P1(*),P2(*),P(LKIND,NSTATN),NLOAD(4)
10    FORMAT(10I6)
20    FORMAT(6E12.8)
      IF (KSTATN.EQ.0) GO TO 90
      IF (INDIC.EQ.3) THEN
        CALL DATUM(IFILE2,JPRM,1,2,NTYPEL,REALL,CHARAC,IOUT,0,1)
        IF (NTYPEL.NE.4.AND.NTYPEL.NE.3) THEN
           WRITE(IFILE4,*)' NTYPEL NOT IN PERMISSIBLE RANGE 3 TO 4'
           CALL ERREX
        ENDIF
      ENDIF
      NLOAD(4) = 0
      DO 23 I = 1,LKIND
      IPROMP = JPRM + I
      CALL DATUM(IFILE2,IPROMP,1,1,NLOAD(I),REALL,CHARAC,IOUT,0,1)
      IF (NLOAD(I).NE.0.AND.NLOAD(I).NE.1) THEN
       WRITE(IFILE4,*)' NLOAD(I) NOT IN PERMISSIBLE RANGE 0 TO 1'
       CALL ERREX
      ENDIF
   23 CONTINUE
      IF (LTYPE.EQ.1.OR.LTYPE.EQ.3) CALL LODMCH(NLOAD,LMECH)
      JPRMN = JPRM + LKIND
      IF (NLOAD(2).NE.0) NLOAD(2) = -1
C     AXIAL DISTRIBUTIONS
      DO 50 M=1,LKIND
      NHLP = 2
      IF (NLOAD(M).EQ.0) GO TO 30
      DO 26 L = 1,KSTATN
      IPROMP = 1
      IF (L.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRMN+M,1,NHLP,INT,P(M,L),CHARAC,IOUT,L,IPROMP)
   26 CONTINUE
      GO TO 50
30    DO 40 L=1,KSTATN
40    P(M,L) = 0.0
50    CONTINUE
      IF (INDIC.NE.3) GO TO 90
C     CIRCUMFERENTIAL DISTRIBUTION DEVELOPED
      IF (NTYPEL.EQ.4) GO TO 60
C     HARMONIC AMPLITUDES READ IN
      JPRMN = JPRM + 2*LKIND
      IF (LKIND.EQ.4) JPRMN = JPRM + 4*LKIND
      DO 52 L = 1,NHARM
      IPROMP = 1
      IF (L.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRMN+1,1,2,INT,P1(L),CHARAC,IOUT,L,IPROMP)
   52 CONTINUE
C
      M = 1
      CALL OUTCC(ISEG,LTYPE,M)
      CALL OUTHM(ISEG,NHARM,NSTART,NMIN,NMAX,INCR,M,P1(1))
      IF (LTYPE.EQ.2.OR.LTYPE.EQ.4) GO TO 90
      DO 55 L = 1,NHARM
      IPROMP = 1
      IF (L.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRMN+2,1,1,INT,P2(L),CHARAC,IOUT,L,IPROMP)
   55 CONTINUE
      M = 2
      CALL OUTCC(ISEG,LTYPE,M)
      CALL OUTHM(ISEG,NHARM,NSTART,NMIN,NMAX,INCR,M,P2(1))
      GO TO 90
60    CONTINUE
C     FOURIER SERIES DEVELOPED, GIVEN INPUT CIRCUMFERENTIAL DISTRIBUTION
      IF (LTYPE.EQ.2.OR.LTYPE.EQ.4) GO TO 53
      IF (NLOAD(1).EQ.0.AND.NLOAD(3).EQ.0.AND.NLOAD(4).EQ.0) GO TO 70
53    CONTINUE
      M = 1
      INDX = 1
      IF (LTYPE.EQ.1) WRITE(IFILE4,62)
   62 FORMAT(/,' Next provide input for the circumferential variation',
     1/,' of axial load V, radial load H, and meridional moment M in',/,
     1' this segment. Note that all these three load components must',/,
     1' have the same circumferential variation and this circumfer-',/,
     1' ential variation must be the same for all the rings in this',/,
     1' shell segment.',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (LTYPE.EQ.2) WRITE(IFILE4,63)
   63 FORMAT(/,' Next provide input for the circumferential variation',
     1/,' of thermal line loads in this segment. Note that this circum',
     1/,' ferential variation must be the same for all the rings in',/,
     1' this shell segment.',/)
      IF (LTYPE.EQ.3) WRITE(IFILE4,64)
   64 FORMAT(/,' Next provide input for the circumferential variation',
     1/,' of axial component of traction PT and the normal pressure',/,
     1' PN.   Note that both of these two distributed load components',
     1/,' must have the same circumferential variation.',/)
      IF (LTYPE.EQ.4) WRITE(IFILE4,65)
   65 FORMAT(/,' Next provide input for the circumferential variation',
     1/,' of the temperature in this segment.',/)
C
      CALL FOUR(P1(1),INDX,M,LTYPE,ISEG)
      IF (LTYPE.EQ.2.OR.LTYPE.EQ.4) GO TO 80
70    IF (NLOAD(2).EQ.0) GO TO 80
      M = 2
      INDX = -1
      IF (LTYPE.EQ.1) WRITE(IFILE4,72)
   72 FORMAT(/,' Next provide input for the circumferential variation',
     1/,' of the shear load S in this segment.  Note that this circum-',
     1/,' ferential variation must be the same for all rings in this',/,
     1' segment',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (LTYPE.EQ.3) WRITE(IFILE4,74)
   74 FORMAT(/,' Next provide input for the circumferential variation',
     1/,' of the circumferential component of traction PC.',/)
C
      CALL FOUR(P2(1),INDX,M,LTYPE,ISEG)
80    CONTINUE
90    CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTCC
      SUBROUTINE OUTCC(ISEG,LTYPE,M)
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      WRITE (IFILE4,20)ISEG
C23456789012345678901234567890123456789012345678901234567890123456789012
20    FORMAT(/,' THERMAL OR MECHANICAL LINE OR DISTRIBUTED LOADS FOR',
     1'THE ',I3,' SEGMENT.',/,
     1' VALID FOR LOADS EXPRESSED IN FORM FS(S)*Y(THETA)',/)
      IF (LTYPE.EQ.1) GO TO 30
      IF (LTYPE.EQ.2) GO TO 150
      IF (LTYPE.EQ.3) GO TO 80
      IF (LTYPE.EQ.4) GO TO 130
30    GO TO (40,60),M
40    WRITE (IFILE4,50)
50    FORMAT(/,' CIRCUMFERENTIAL DISTRIBUTION OF AXIAL LINE LOADS',
     1' V(K)',/,' RADIAL LINE LOADS,H(K), AND LINE MOMENTS M(K)',/)
      GO TO 170
60    WRITE (IFILE4,70)
70    FORMAT(/,' CIRCUMFERENTIAL DISTRIBUTION OF SHEAR LINE LOADS S(K)'
     1,/)
      GO TO 170
80    GO TO (90,110),M
90    WRITE (IFILE4,100)
100   FORMAT(/,' CIRCUMFERENTIAL DISTRIBUTION OF TANG. PRESSURE PT',    
     1' AND NORMAL PRESSURE PN',/)
      GO TO 170
110   WRITE (IFILE4,120)
120   FORMAT(/,' CIRCUMFERENTIAL DISTRIBUTION OF CIRC. PRESSURE PC',
     1/)
      GO TO 170
130   WRITE (IFILE4,140)
140   FORMAT(/,' CIRCUMFERENTIAL DISTRIBUTION OF TEMP COEFFICIENTS',
     1' T1,T2, AND T3',/)
      GO TO 170
150   WRITE (IFILE4,160)
160   FORMAT(/,' CIRCUMFERENTIAL DISTRIBUTION OF THERMAL LINE LOADS',
     1' NT(K),MTX(K), AND MTY(K)',/)
      GO TO 170
170   CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTHM
      SUBROUTINE OUTHM(     ISEG,NHARM,NSTART,NMIN,NMAX,INCR,M,P)
      DIMENSION P(NHARM)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      N = NSTART - INCR
      KOUNT = 0
10    N = N + INCR
      KOUNT = KOUNT + 1
      IF (KOUNT.GT.NHARM) GO TO 70
      IF (N.LE.0) GO TO 60
      IF (M.EQ.2) GO TO 40
20    WRITE (IFILE4,30)N,P(KOUNT)
30    FORMAT(' WAVE NO.N=',I6,'. CIRC. HARMONIC AMPLIT. A(N)=',
     11P,E15.5,'. CIRC. DIST. Y(THETA)= A*SIN(N*THETA)')
      GO TO 10
40    WRITE (IFILE4,50)N,P(KOUNT)
50    FORMAT(' WAVE NO.N=',I6,'. CIRC. HARMONIC AMPLIT. A(N)=',
     11P,E15.5,'. CIRC. DIST. Y(THETA)= A*COS(N*THETA)')
      GO TO 10
60    IF (M.EQ.1.OR.N.EQ.0) GO TO 40
      GO TO 20
70    CONTINUE
      RETURN
      END
C
C
C
C=DECK      FOUR
      SUBROUTINE FOUR(A,NLOAD,M,LTYPE,ISEG)
C     CALLED FROM LOADRD
C     GIVEN INPUT FUNCTION Y(X), (READ IN BELOW), THIS SUBROUTINE
C     CALCULATES THE FOURIER SERIES AND PRINTS OUT THE OUTPUT FUNCTION.
C
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/NOHARM/NHARM
      DIMENSION XPLUS(100),XMINUS(100),YPLUS(100),YMINUS(100),A(20)
      DIMENSION F(300 ),Z(300 )
      COMMON/OUTP/NPRT
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C     NX = NUMBER OF X-VALUES (CIRCUMFERENTIAL POINTS IN RANGE
C          THETA. GE. 0 AND THETA . LE . THETAM)
C     NOPT = CONTROL INTEGER FOR TYPE OF Y-INPUT
C     NOPT = 1  NEITHER EVEN NOR ODD FUNCTION Y(X)
C     NOPT = 2 ODD OR EVEN FUNCTION Y(X)
C     NOPT = 3 CALCULATE Y(X) FROM USER-GENERATED SUBROUTINE GETY
C     NODD = 1  Y(X) EVEN
C     NODD = 2 Y(X) ODD
C     NODD = 3 Y(X) NEITHER EVEN NOR ODD
C
    2 CONTINUE
      CALL DATUM(IFILE2,324,1,2,NX,REALL,CHARAC,IOUT,0,1)
      IF (NX.LT.2.OR.NX.GT.100) THEN
       WRITE(IFILE4,*)' NTHETA OUT OF PERMISSIBLE RANGE 2 TO 100'
       CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,325,1,2,NOPT,REALL,CHARAC,IOUT,0,1)
      IF (NOPT.LT.1.OR.NOPT.GT.3) THEN
        WRITE(IFILE4,*)' NOPT NOT IN PERMISSIBLE RANGE 1 TO 3'
        CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,326,1,2,NODD,REALL,CHARAC,IOUT,0,1)
      IF (NODD.LT.1.OR.NODD.GT.3) THEN
        WRITE(IFILE4,*)' NODD NOT IN PERMISSIBLE RANGE 1 TO 3'
        CALL ERREX
      ENDIF
C     XPLUS = CIRCUMFERENTIAL STATION IN DEGREES
      DO 3 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,327,1,2,INT,XPLUS(I),CHARAC,IOUT,I,IPROMP)
    3 CONTINUE
C
      THEMS = THETAM*180./3.14159
      IF(ABS(XPLUS(NX)-THEMS).LT.1.0) GO TO 5
      WRITE(IFILE4,7) NX,XPLUS(NX),THEMS
7     FORMAT(/,' NX = ',I2,' XPLUS(NX)= ',1PE12.3,' DEG. THETAM = ',
     11PE12.3,' XPLUS(NX) MUST EQUAL THETAM.',/)
      REWIND IFILE2
      GO TO 2
5     CONTINUE
      DO 10 I=1,NX
10    XPLUS(I) = XPLUS(I)*3.1415927/180.
20    FORMAT(12I6)
30    FORMAT(6E12.8)
      DO 40 I=1,NX
40    XMINUS(I) = - XPLUS(I)
      GO TO (50,60,110),NOPT
C     YPLUS,YMINUS = VALUES OF INPUT FUNCTION Y AT XPLUS AND XMINUS
C     STATIONS AROUND THE CIRCUMFERENCE OF THE SHELL
   50 CONTINUE
      DO 55 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,328,1,2,INT,YPLUS(I),CHARAC,IOUT,I,IPROMP)
   55 CONTINUE
      DO 56 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,329,1,2,INT,YMINUS(I),CHARAC,IOUT,I,IPROMP)
   56 CONTINUE
C
      GO TO 120
   60 CONTINUE
      DO 65 I = 1,NX
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,328,1,2,INT,YPLUS(I),CHARAC,IOUT,I,IPROMP)
   65 CONTINUE
C
      GO TO (70,90),NODD
70    DO 80 I=1,NX
80    YMINUS(I) = YPLUS(I)
      GO TO 120
90    DO 100 I=1,NX
100   YMINUS(I) = - YPLUS(I)
      GO TO 120
C     USER-WRITTEN FUNCTION WHICH CALCULATES YPLUS AND YMINUS, GIVEN
C     XPLUS AND XMINUS.
110   CALL GETY(NX,XPLUS,YMINUS,YPLUS)
120   CONTINUE
      REWIND IFILE2
      J = 0
      NSTART = N0*NLOAD
      NLOW = NMIN
      NHIGH = NMAX
      IF (NLOAD.LT.0) NHIGH = NMIN*NLOAD
      IF (NLOAD.LT.0) NLOW =  NMAX*NLOAD
      NSTEP = INCR*NLOAD
      NEND = NHIGH
      IF (NSTEP.LT.0) NEND = NLOW
      NMULT = 3.1415927/XPLUS(NX) + 0.5
      NSTART = NSTART/NMULT
      NEND = NEND/NMULT
      NSTEP = NSTEP/NMULT
      NDIFF = IABS(NSTART - NEND) + 1
      NSTEPA = IABS(NSTEP)
      IQ = IABS(INCR)
      ITRY = IQ - (IQ/NMULT)*NMULT
      IF (ITRY.EQ.0) GO TO 125
      WRITE(IFILE4,124) NMULT,INCR
124   FORMAT(/,' PI/THETAM= ',I4,'.  THEREFORE THE ABS(INCR) MUST BE',
     1' DIVISIBLE BY PI/THETAM. YOUR VALUE OF INCR IS ',I2,/)
      CALL ERREX
125   CONTINUE
      N = NSTART
      DO 130 I=1,NDIFF,NSTEPA
      J = J + 1
C     CALCULATE FOURIER SERIES COEFFICIENTS IN FCOEF
      CALL FCOEF(J,NX,N,XPLUS,YPLUS,YMINUS,A)
      N = N + NSTEP
130   CONTINUE
      PI = 3.1415927
      FL = XPLUS(NX)
      NPTS = 12*MAX0(IABS(NEND), IABS(NSTART))
      IF (NPTS.GT.300) NPTS = 300
      IF (NPTS.LT.100) NPTS = 100
      DZ = 2.*FL/ FLOAT(NPTS-1)
      Z(1) = - FL
      F(1) = 0.0
      DO 140 I=2,NPTS
      F(I) = 0.0
      I1 = I - 1
140   Z(I) = Z(I1) + DZ
      J = 0
      I = NSTART
      DO 180 II=1,NDIFF,NSTEPA
      J = J + 1
      Q = ABS(FLOAT(I))*PI/FL
      DO 170 K=1,NPTS
      IF (I) 150,150,160
150   F(K) = F(K) + A(J)*COS(Q* Z(K))
      GO TO 170
160   F(K) = F(K) + A(J)*SIN(Q* Z(K))
170   CONTINUE
      I = I + NSTEP
180   CONTINUE
      CALL OUTCC(ISEG,LTYPE,M)
      WRITE (IFILE4,190)
190   FORMAT(/,'             INPUT LOAD DISTRIBUTION',/)
      DO 210 I=1,NX
      XP = XPLUS(I)*180./3.1415927
      XM = XMINUS(I)*180./3.1415927
      WRITE (IFILE4,200)I,XP,YPLUS(I),XM,YMINUS(I)
200   FORMAT(' CIRC. STA ',I3,' CIRC. COORD.(DEGREES) = ',E10.3,    
     1' INPUT LOAD VALUE= ',E10.3,' CIRC. COORD.= ',E10.3,
     2' INPUT LOAD VALUE= ',E10.3)
210   CONTINUE
      WRITE (IFILE4,220)
220   FORMAT(/,'      CALCULATED FOURIER HARMONICS OF LOAD',/)
      CALL OUTHM(ISEG,NHARM,N0,NMIN,NMAX,INCR,M,A)
      REWIND IFILE3
      CALL DATUM(IFILE3,604,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 260
      WRITE (IFILE4,230)
230   FORMAT(/,'              OUTPUT EXPANSION OF LOAD',/)
      DO 250 I=1,NPTS
      ZP = Z(I)*180./3.1415927
      IF (NPRT.GT.1) WRITE (IFILE4,240)I,ZP,F(I)
240   FORMAT(' CIRC. STA. ',I3,' CIRCUMFERENTIAL COORDINATE = ',
     11PE13.4,' EXPANDED LOAD FUNCTION = ',1P,E15.5)
250   CONTINUE
260   CONTINUE
      RETURN
      END
C
C
C
C=DECK      GETY
      SUBROUTINE GETY(NX,XPLUS,YMINUS,YPLUS)
C     CALLED FROM FOUR, WHOSE TRACE IS LOADRD, (LINELD,DISTP,DISTT),
C     LOADER,READIT,MAIN.
C     USER-WRITTEN SUBROUTINE TO OBTAIN Y(X) FOR WHICH FOURIER SERIES
C     WILL BE CALCULATED.
      DIMENSION XMINUS(100),XPLUS(100),YMINUS(100),YPLUS(100)
      DO 10 I=1,NX
      YPLUS(I) =      EXP(-12.8*XPLUS(I)**2)
10    YMINUS(I) = YPLUS(I)
      RETURN
      END
C
C
C
C=DECK      FCOEF
      SUBROUTINE FCOEF(J,NX,N,XPLUS,YPLUS,YMINUS,A)
C     CALLED FROM FOUR, WHOSE TRACE IS LOADRD, (LINELD,DISTP,DISTT),
C     LOADER,READIT,MAIN
C     CALCULATES A(J), COEFFICIENT OF FOURIER SINE OR COSINE OR
C     MIXED SERIES CORRESPONDING TO GIVEN CIRCUMFERENTIAL WAVENUMBER N.
      DIMENSION XPLUS(100),YPLUS(100),YMINUS(100),A(20)
      PI = 3.1415927
      FL = XPLUS(NX)
      FNPI = ABS(FLOAT(N))*PI
      Q = FNPI/FL
      A(J) = 0.0
      DO 30 I=2,NX
      I1 = I - 1
      H = XPLUS(I) - XPLUS(I1)
      QX = Q*XPLUS(I)
      QX1 = Q*XPLUS(I1)
      CS = COS(QX)
      CS1 = COS(QX1)
      SS = SIN(QX)
      SS1 = SIN(QX1)
      IF (N) 10,10,20
C     COEFFICIENTS OF COSINE SERIES
10    Y = YPLUS(I) + YMINUS(I)
      Y1 = YPLUS(I1) + YMINUS(I1)
      C = (Y - Y1)/H
      IF (N.EQ.0) A(J) = A(J) + 0.25*H*(Y + Y1)/FL
      IF (N.EQ.0) GO TO 30
      A(J) = A(J) + (C*(CS-CS1)/Q + Y*SS - Y1*SS1)/FNPI
      GO TO 30
C     SINE SERIES COEFFICIENTS
20    Y = YPLUS(I) - YMINUS(I)
      Y1 = YPLUS(I1) - YMINUS(I1)
      C = (Y - Y1)/H
      A(J) = A(J) + (C*(SS-SS1)/Q - Y*CS + Y1*CS1)/FNPI
30    CONTINUE
      RETURN
      END
C
C
C
C=DECK      DISTL
C./      ADD   NAME=DISTL
      SUBROUTINE DISTL(I5I,NLTYPE,NPSTAT,NTSTAT,PP,TT,TAXIAL,INDIC,I,
     1NSEG,NHARM,Z,RAD,RADD,S,LMECH,LSET,PDIST1,PDIST2,TDIST,CUR2,DS,
     1 INDXAB)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      DIMENSION PDIST1(*),PDIST2(*),TDIST(*),CUR2(*),DS(*)
      DIMENSION IPVAL(20),ITVAL(20),Z(*),RAD(*),RADD(*),S(*)
      DIMENSION PP(I5I,3),TT(I5I,3),TAXIAL(3,20),PAXIAL(3,20),P(20)
10    FORMAT(6E12.8)
      IF (NLTYPE.EQ.0) GO TO 190
      IF (NLTYPE.EQ.2) GO TO 100
   12 CONTINUE
      CALL DATUM(IFILE2,252,1,2,NPSTAT,REALL,CHARAC,IOUT,0,1)
      IF (NPSTAT.LT.0.OR.NPSTAT.GT.20) THEN
       WRITE(IFILE4,*)' NPSTAT NOT IN PERMISSIBLE RANGE 0 TO 20'
       CALL ERREX
      ENDIF
      IF (NPSTAT.EQ.0.AND.INDIC.NE.3) GO TO 30
      IF (NPSTAT.GE.2) GO TO 15
      WRITE(IFILE4,13)
   13 FORMAT(/,' INDIC = 3.  THEREFORE, NPSTAT MUST BE GREATER THAN',
     1' OR EQUAL TO 2',/)
      REWIND IFILE2
      GO TO 12
   15 CONTINUE
C     READ MECHANICAL DISTRIBUTED LOADS
      IF (INDIC.NE.3) GO TO 20
C     READ NONSYMMETRIC MECHANICAL DISTRIBUTED LOADS
      CALL LOADRD(3,3,NPSTAT,NPSTAT,I,NSEG,NHARM,INDIC,PDIST1,PDIST2,
     1PAXIAL,255,LMECH,LSET)
      GO TO 50
C     READ AXISYMMETRIC MECHANICAL DISTRIBUTED LOADS
20    CALL LOADRD(3,3,NPSTAT,NPSTAT,I,NSEG,NHARM,INDIC,PDIST1,PDIST2,
     1PAXIAL,255,LMECH,LSET)
      GO TO 50
30    CONTINUE
      LMECH = 1
      P12 = 0.
      P13 = 0.
      P14 = 0.
      P15 = 0.
      CALL DATUM(IFILE2,253,1,1,INT,P11,CHARAC,IOUT,0,1)
C
      P22 = 0.
      P23 = 0.
      P24 = 0.
      P25 = 0.
      CALL DATUM(IFILE2,254,1,1,INT,P21,CHARAC,IOUT,0,1)
C
      PP(1,1) = P21
      PP(1,2) = 0.0
      PP(1,3) = P11
      DO 40 J=2,I5I
      SJ = S(J) - S(1)
      PP(J,1) = P21 + P22*SJ**P23 + P24*SJ**P25
      PP(J,2) = 0.0
      PP(J,3) = P11 + P12*SJ**P13 + P14*SJ**P15
40    CONTINUE
      GO TO 100
   50 CONTINUE
      IPRM(2) = 264
      CALL STA(IPVAL,Z,RAD,RADD,S,NPSTAT,I5I)
      IF (IPVAL(1).EQ.1.AND.IPVAL(NPSTAT).EQ.I5I) GO TO 70
      WRITE(IFILE4,60)I
60    FORMAT(/,'   PRESSURE DISTRIBUTION CALLOUTS MUST INCLUDE VALUES',
     1' AT FIRST AND LAST MESH PTS. IN SEG.',I3,/) 
      WRITE(IFILE4,62) NPSTAT,I5I,(IPVAL(I),I=1,NPSTAT)
   62 FORMAT(' NO. OF CALLOUTS,                           NPSTAT=',I3,/,
     1       ' NUMBER OF NODAL POINTS IN SEGMENT,            I5I=',I3,/,
     1' POINTS CORRESPONDING TO CALLOUTS, (IPVAL(I),I=1,NPSTAT)=',/,
     1 20I5)
C23456789012345678901234567890123456789012345678901234567890123456789012
      CALL ERREX
70    CONTINUE
      DO 90 K=1,3
      DO 80 J=1,NPSTAT
80    P(J) = PAXIAL(K,J)
      CALL FINDZ(NPSTAT,IPVAL,P,I5I,PP(1,K),S)
90    CONTINUE
C ADD STATEMENT FOR DYNAMIC REACTION (17 AUG 1985)...
C CALCULATE TOTAL FORCES THAT CREATE RIGID BODY INERTIA TERMS...
      IF (INDIC.EQ.3)
     1 CALL PDYNAM(Z,NHARM,I,PDIST1,PDIST2,PP,RAD,RADD,CUR2,DS,I5I,
     1            INDXAB)
C END 17 AUG 85 MODIFICATION
C
100   IF (NLTYPE.EQ.1) GO TO 190
      CALL DATUM(IFILE2,270,0,0,INT,REALL,CHARAC,IOUT,0,1)
  102 CONTINUE
      CALL DATUM(IFILE2,271,1,2,NTSTAT,REALL,CHARAC,IOUT,0,1)
      IF (NTSTAT.LT.0.OR.NTSTAT.GT.20) THEN
       WRITE(IFILE4,*)' NTSTAT NOT IN PERMISSIBLE RANGE 0 TO 20'
       CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,272,1,2,NTGRAD,REALL,CHARAC,IOUT,0,1)
      IF (NTGRAD.LT.1.OR.NTGRAD.GT.3) THEN
       WRITE(IFILE4,*)' NTGRAD NOT IN PERMISSIBLE RANGE 1 TO 3'
       CALL ERREX
      ENDIF
C
      IF (NTSTAT.EQ.0.AND.INDIC.NE.3) GO TO 120
      IF (NTSTAT.GE.2) GO TO 105
      WRITE(IFILE4,103)
  103 FORMAT(/' INDIC = 3.  THEREFORE, NTSTAT MUST BE GREATER THAN',
     1' OR EQUAL TO 2',/)
      REWIND IFILE2
      GO TO 102
  105 CONTINUE
C     READ THERMAL DISTRIBUTED LOADS
      IF (INDIC.NE.3) GO TO 110
C     READ NONSYMMETRIC THERMAL DISTRIBUTED LOADS
      CALL LOADRD(4,3,NTSTAT,NTSTAT,I,NSEG,NHARM,INDIC,TDIST,PDIST2,
     1TAXIAL,276,LMECH,LSET)
      GO TO 140
C     READ AXISYMMETRIC THERMAL DISTRIBUTED LOADS
110   CALL LOADRD(4,3,NTSTAT,NTSTAT,I,NSEG,NHARM,INDIC,TDIST,PDIST2,
     1TAXIAL,276,LMECH,LSET)
      GO TO 140
120   CONTINUE
      IF (NLTYPE.EQ.2) LMECH = 0
      T12 = 0.
      T13 = 0.
      T14 = 0.
      T15 = 0.
      CALL DATUM(IFILE2,273,1,1,INT,T11,CHARAC,IOUT,0,1)
C
      T22 = 0.
      T23 = 0.
      T24 = 0.
      T25 = 0.
      CALL DATUM(IFILE2,274,1,1,INT,T21,CHARAC,IOUT,0,1)
C
      T32 = 0.
      T33 = 0.
      T34 = 0.
      T35 = 0.
      CALL DATUM(IFILE2,275,1,1,INT,T31,CHARAC,IOUT,0,1)
C
      TT(1,1) = T11
      TT(1,2) = T21
      TT(1,3) = T31
      DO 130 J=2,I5I
      SJ = S(J) - S(1)
      TT(J,1) = T11 + T12*SJ**T13 + T14*SJ**T15
      TT(J,2) = T21 + T22*SJ**T23 + T24*SJ**T25
      TT(J,3) = T31 + T32*SJ**T33 + T34*SJ**T35
130   CONTINUE
      GO TO 190
140   CONTINUE
      IPRM(2) = 284
      CALL STA(ITVAL,Z,RAD,RADD,S,NTSTAT,I5I)
      IF (ITVAL(1).EQ.1.AND.ITVAL(NTSTAT).EQ.I5I) GO TO 160
      WRITE(IFILE4,150)I
150   FORMAT(/,' TEMPERATURE DISTRIBUTION CALLOUTS MUST INCLUDE VALUES',
     1/,' AT FIRST AND LAST MESH PTS. IN SEG.',I3,/) 
      WRITE(IFILE4,152) NTSTAT,I5I,(ITVAL(I),I=1,NTSTAT)
  152 FORMAT(' NO. OF CALLOUTS,                           NTSTAT=',I3,/,
     1       ' NUMBER OF NODAL POINTS IN SEGMENT,            I5I=',I3,/,
     1' POINTS CORRESPONDING TO CALLOUTS, (ITVAL(I),I=1,NTSTAT)=',/,
     1 20I5)
C23456789012345678901234567890123456789012345678901234567890123456789012
      CALL ERREX
160   CONTINUE
      DO 180 K=1,3
      DO 170 J=1,NTSTAT
170   P(J) = TAXIAL(K,J)
      CALL FINDZ(NTSTAT,ITVAL,P,I5I,TT(1,K),S)
180   CONTINUE
190   CONTINUE
      RETURN
      END
C
C
C
C=DECK      GETPST
C BEG JUL 2010
C     SUBROUTINE GETPST(ISEG,I5,      PSTS,RHF,S,RAD,RADD,Z)
      SUBROUTINE GETPST(ISEG,I5,PSTS,PSTFIX,RHF,RHFIX,S,RAD,RADD,Z)
C END JUL 2010
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C     PREBUCKLING MEMBRANE STRESSES AND RING HOOP LOADS ARE READ IN AT
C     CONTROL POINTS, RATHER THAN BEING CALCULATED IN PRESTRESS ANALYSIS
C
      DIMENSION            PSTS(I5,3),RHF(198),ISTRES(198),IRING(198)
C BEG JUL 2010
      DIMENSION          PSTFIX(I5,3),RHFIX(198)
C END JUL 2010
      DIMENSION STRESS(198),S(100),RAD(100),RADD(100) ,Z(*)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/ALOFIT/IDUM(10),KRING,IDUM1(11)
      COMMON/SEGS/ NSEG,M2,I6(295),I2,I2G
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
10    FORMAT(10I6)
20    FORMAT(6E12.8)
C     NSTRES  = NO. OF MERIDIONAL STATIONS FOR WHICH N10,N20, AND CHI0
C               ARE READ IN
C     NRLOAD = NO. OF DISCRETE RINGS WHICH ARE PRELOADED BY HOOP FORCE.
C              ( IN ENTIRE SHELL, NOT JUST FIRST SEGMENT)
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ PREBUCKLING RESULTANTS INPUT FOLLOWS...')
      CALL DATUM(IFILE2,310,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,311,1,2,NSTRES,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,312,1,2,NRLOAD,REALL,CHARAC,IOUT,0,1)
C     MESH POINT TAGS FOR PRESTRESS CALLOUTS ARE ASSIGNED IN STA
      NTOT = KRING
      IF (NSTRES.EQ.0) GO TO 60
   25 CONTINUE
      IPRM(2) = 313
      CALL STA(ISTRES,Z,RAD,RADD,S,NSTRES,I5)
      IF (ISTRES(1).EQ.1.AND.ISTRES(NSTRES).EQ.I5) GO TO 40
      WRITE(IFILE4,30)ISEG
30    FORMAT(/,' PRESTRESS DISTRIBUTION CALLOUTS MUST INCLUDE VALUES',
     1' AT FIRST AND LAST MESH PTS IN SEG.',I3,/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      CALL ERREX
40    CONTINUE
      DO 50 J=1,2
C     STRESS(I) = N10 IF J = 1
C               = N20 IF J = 2
      NHLP = 2
      IF (J.EQ.2) NHLP = 1
      JPRM = 316
      IF (J.EQ.2) JPRM = 317
      DO 45 I = 1,NSTRES
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRM,1,NHLP,INT,STRESS(I),CHARAC,IOUT,I,IPROMP)
   45 CONTINUE
C
      CALL FINDZ(NSTRES,ISTRES,STRESS,I5,PSTS(1,J),S)
50    CONTINUE
C BEG JUL 2010 (Read in fixed (non-eigenvalue) shell prestress)
      DO 58 J=1,2
C     STRESS(I) = N10FIX IF J = 1
C               = N20FIX IF J = 2
      NHLP = 2
      IF (J.EQ.2) NHLP = 1
      JPRM = 321
      IF (J.EQ.2) JPRM = 322
      DO 55 I = 1,NSTRES
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,JPRM,1,NHLP,INT,STRESS(I),CHARAC,IOUT,I,IPROMP)
   55 CONTINUE
C
      CALL FINDZ(NSTRES,ISTRES,STRESS,I5,PSTFIX(1,J),S)
58    CONTINUE
C END JUL 2010
      GO TO 80
60    DO 70 J=1,I5
      DO 70 K=1,3
70    PSTS(J,K) = 0.0
80    CONTINUE
      IF (ISEG.NE.1) GO TO 110
      IF (NRLOAD.EQ.0) GO TO 110
C     IRING(I) = RING NUMBER OF RING WHICH IS PRESTRESSED
C     STRESS(I) = HOOP PRESTRESS IN ITH RING
C BEG JUL 2010
      REWIND IFILE2
C END JUL 2010
      DO 85 I = 1,NRLOAD
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,318,1,2,IRING(I),REALL,CHARAC,IOUT,I,IPROMP)
   85 CONTINUE
C
      DO 87 I = 1,NRLOAD
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,319,1,1,INT,STRESS(I),CHARAC,IOUT,I,IPROMP)
   87 CONTINUE
C
      DO 90 I = 1,198
90    RHF(I) = 0.0
      DO 100 I=1,NRLOAD
      J = IRING(I)
100   RHF(J) = STRESS(I)
C BEG JUL 2010 (Read in fixed (non-eigenvalue) ring preload)
      DO 112 I = 1,NRLOAD
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,323,1,1,INT,STRESS(I),CHARAC,IOUT,I,IPROMP)
  112 CONTINUE
C
      DO 114 I = 1,198
114   RHFIX(I) = 0.0
      DO 116 I=1,NRLOAD
      J = IRING(I)
116   RHFIX(J) = STRESS(I)
110   CONTINUE
C END JUL 2010
      REWIND IFILE3
      CALL DATUM(IFILE3,605,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 145
      WRITE(IFILE4,120) ISEG
120   FORMAT(/,' PRESTRESS QUANTITIES FOR SEGMENT',I3,/)
C BEG JUL 2010
      WRITE(IFILE4,'(A,/,A,/,A)')
     1' STATION   EIGENVALUE    EIGENVALUE      FIXED        FIXED',
     1'         MERID. RESULT. CIRC. RESULT. MERID. RESULT.  CIRC.',
     1'              N10           N20           N10          N20'
C END JUL 2010
      DO 140 I=1,I5
      PSTS(I,3) = 0.0
C BEG JUL 2010
C     WRITE (IFILE4,130)I,PSTS(I,1),PSTS(I,2),PSTS(I,3)
C 130 FORMAT(' STATION ',I3,', MERID. RESULT. N10 =',1PE12.4,/,
C    1' CIRC. RESULT. N20 =',1PE12.4,', MERID. ROT. BETA =',1PE12.4)
      WRITE(IFILE4,'(I5,1P,4E15.6)')
     1 I,PSTS(I,1),PSTS(I,2),PSTFIX(I,1),PSTFIX(I,2)
C END JUL 2010
140   CONTINUE
145   CONTINUE
      IF (ISEG.NE.NSEG) GO TO 180
      IF (NTOT.EQ.0) GO TO 180
      WRITE (IFILE4,150)NTOT,NRLOAD
150   FORMAT(/,' OF A TOTAL OF ',I3,' DISCRETE RINGS,',I2,
     1' ARE PRESTRESSED.',/)
      DO 160 I=1,NTOT
C BEG JUL 2010
C 160 WRITE (IFILE4,170)I,RHF(I)
C 170 FORMAT(' DISCRETE RING NO.',I3,'.  HOOP PRESTRESS RESULTANT=',
C    11PE20.8)
      WRITE(IFILE4,'(A,I4,A,1P,E12.4,A,1P,E12.4)')
     1' DISCRETE RING NO.',I,', EIGENVALUE PRELOAD=',RHF(I),
     1', FIXED PRELOAD=',RHFIX(I)
C END JUL 2010
160   CONTINUE
180   CONTINUE
      RETURN
      END
C
C
C
C=DECK      GETFS
      SUBROUTINE GETFS(M,NS,FS)
C     USER-WRITTEN SUBROUTINE FOR MERIDIONAL DISTRIBUTION OF LOAD FOR
C     WHICH A CIRCUMFERENTIAL FOURIER SERIES EXPANSION WILL BE CALC.
      DIMENSION FS(4,20)
      DTHETA = 3.1415927/ FLOAT(NS-1)
      FS(M,1) = 1.0
      THETA = 0.0
      DO 10 I=2,NS
      THETA = THETA + DTHETA
      FS(M,I) = 0.5*(1. + COS(THETA))
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      LODPOS
      SUBROUTINE LODPOS(NPOS,NHARM,LINAB,LIN,LMECH,INDXAB,IPOS)
C
C  PURPOSE IS TO DETERMINE THE POSITION OF THE LOAD HARMONICS IN A
C  WORKING SPACE THAT CONTAINS CIRCUMFERENTIAL HARMONICS FOR
C  MECHANICAL AND THERMAL LOADS.  THE WORKING SPACE MAY CONTAIN AS
C  MANY AS THREE GROUPS OF NHARM HARMONICS EACH: THE FIRST GROUP
C  CORRESPONDING TO NON-SHEARING MECHANICAL LOAD HARMONICS, THE SECOND
C  TO SHEARING MECHANICAL LOAD HARMONICS, AND THE THIRD TO THERMAL LOAD
C  HARMONICS.
C
C  INPUT DATA...
C
C  NPOS   = STARTING POSITION
C  NHARM  = NUMBER OF CIRCUMFERENTIAL HARMONICS IN THE FOURIER SERIES
C  LINAB  = CONTROL FOR LOADS:
C           0 = NONE
C           1 = TYPE "A" LOADS ONLY
C           2 = TYPE "B" LOADS ONLY
C           3 = BOTH TYPE "A" LOADS AND TYPE "B" LOADS
C
C  LIN    = CONTROL FOR KINDS OF LOADS PRESENT:
C           0 = NONE
C           1 = MECHANICAL LOADS ONLY
C           2 = THERMAL LOADS ONLY
C           3 = BOTH MECHANICAL AND THERMAL LOADS
C
C  LMECH  = CONTROL FOR KINDS OF MECHANICAL LOADS PRESENT:
C           0 = NONE
C           1 = NON-SHEARING TYPE OF LOADS PRESENT ONLY
C           2 = SHEARING TYPE OF LOADS PRESENT ONLY
C           3 = BOTH NON-SHEARING AND SHEARING TYPES OF LOADS PRESENT
C
C  INDXAB = EITHER 1 OR 2, DEPENDING ON WHETHER WE ARE DEALING WITH
C           "A" TYPE OR "B" TYPE LOADS, RESPECTIVELY
C
C  OUTPUT DATA..
C
C  IPOS   = POSITION IN WORKING SPACE OF BEGINNING OF FOURIER
C           CIRCUMFERENTIAL HARMONICS OF LOAD
C
C   The following diagram shows the positions of various circumfer-
C   ential harmonics in working space:
C
C|-------Circumferential harmonics for all loads in Segment-----------|
C|-------L I N E   L O A D S-------|-D I S T R I B U T E D   L O A D S-|
C|--Load system A--|--Load system B--|-Load system A--|-Load system B--|
C|V,H,M|SHEAR|THERM|V,H,M|SHEAR|THERM|Ps,Pn| Pc |THERM|Ps,Pn| Pc |THERM|
C|NHARM|NHARM|NHARM|NHARM|NHARM|NHARM|NHARM|NHAR|NHARM|NHARM|NHAR|NHARM|
C POSITION NUMBER...
C|1    |2    |3    |4    |5    |6    |7    |8   |9    |10   |11  |12   |
C
C  This subroutine establishes the relative positions in working space
C  of three consecutive loading sets. For each segment this subroutine
C  is called four times:
C        1. first time establishes positions for line loads
C           in load system "A" (Positions |1    |2    |3    |)
C        2. second time establishes positions for line loads
C           in load system "B" (Positions |4    |5    |6    |)
C        3. third time establishes positions for distributed loads
C           in load system "A" (Positions |7    |8    |9    |)
C        4. fourth time establishes positions for distributed loads
C           in load system "B" (Positions |10   |11   |12   |)
C
      LOGICAL LAB,L,LM
      DIMENSION IPOS(*)
      COMMON/INSTAB/INDIC
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C
      NADD = NHARM
      IF (INDIC.NE.3) NADD = 1
C
C   POSITION OF NON-SHEARING LOADS...
C
      IPOS(1) = NPOS
C
      LAB = LINAB.EQ.INDXAB.OR.LINAB.EQ.3
      L  = LIN.EQ.1.OR.LIN.EQ.3
      LM = LMECH.EQ.1.OR.LMECH.EQ.3
C
C   If LAB is true, I have load system "INDXAB".
C                                INDXAB=1 means "A";  2 means "B"
C   If   L is true, I have mechanical loads in load system "INDXAB"
C   If  LM is true, I have non-shearing mechanical loads.
C
C  POSITION OF SHEARING LOADS...
C
      IF (LAB.AND.L.AND.LM) THEN
         IPOS(2) = IPOS(1) + NADD
      ELSE
         IPOS(2) = IPOS(1)
         IPOS(1) = 0
      ENDIF
C
C  POSITION OF THERMAL LOADS...
C
      LM = LMECH.EQ.2.OR.LMECH.EQ.3
C
C   If  LM is true, I have shearing mechanical loads
C
      IF (LAB.AND.L.AND.LM) THEN
          IPOS(3) = IPOS(2) + NADD
      ELSE
          IPOS(3) = IPOS(2)
          IPOS(2) = 0
      ENDIF
C
C   FIND NEW STARTING POSITION...
C
      L = LIN.EQ.2.OR.LIN.EQ.3
C
C   If  L is true, then I have thermal loads
C
      IF (LAB.AND.L) THEN
          NPOS = IPOS(3) + NADD
      ELSE
          NPOS = IPOS(3)
          IPOS(3) = 0
      ENDIF
C
      RETURN
      END
C
C
C
C=DECK      LODMCH
      SUBROUTINE LODMCH(NLOAD,LMECH)
C
C  PURPOSE IS TO DETERMINE A VALUE FOR LMECH FROM NLOAD(i), i=1,4
C
C  INPUT DATA...
C
C  NLOAD = ARRAY OF INDICATORS FOR LOADING TYPE
C          0 MEANS NO LOAD OF THAT TYPE
C          1 MEANS YES LOAD OF THAT TYPE
C
C  OUTPUT DATA...
C
C  LMECH = INDICATOR FOR WHETHER OR NOT SHEARING LOADS ARE PRESENT
C          WITH OR WITHOUT NONSHEARING LOADS
C          0 MEANS NO LOADS
C          1 MEANS NON SHEARING LOADS ONLY
C          2 MEANS SHEARING     LOADS ONLY
C          3 MEANS BOTH SHEARING LOADS AND NON SHEARING LOADS
C
      DIMENSION NLOAD(*)
C
      IF (NLOAD(2).EQ.0) GO TO 20
C
C  SHEARING LOAD PRESENT...
C
      IF (NLOAD(1).NE.0.OR.NLOAD(3).NE.0.OR.NLOAD(4).NE.0) THEN
         LMECH = 3
      ELSE
         LMECH = 2
      ENDIF
      GO TO 100
C
   20 CONTINUE
C
C     SHEARING LOAD ABSENT...
C
      IF (NLOAD(1).NE.0.OR.NLOAD(3).NE.0.OR.NLOAD(4).NE.0) THEN
         LMECH = 1
      ELSE
         LMECH = 0
      ENDIF
  100 CONTINUE
      RETURN
      END
C
C
C
C=DECK      LODSTO
      SUBROUTINE LODSTO(NHARM,IPOS,P1,P2,T1,PALL)
C
C  PURPOSE IS TO RESTORE CIRCUMFERENTIAL HARMONICS IN THE WORKING
C  SPACE ARRAY, PALL
C
C  INPUT DATA...
C
C  NHARM = NUMBER OF HARMONICS
C   IPOS = POSITIONS OF STARTING HARMONICS
C     P1 = VALUES OF HARMONICS FOR NON-SHEARING LOADS
C     P2 = VALUES OF HARMONICS FOR     SHEARING LOADS
C     T1 = VALUES OF HARMONICS FOR THERMAL LOADING
C
C  OUTPUT DATA...
C
C   PALL = WORKING SPACE ARRAY FOR CIRCUMFERENTIAL HARMONICS; ALL LOADS
C
      DIMENSION IPOS(*),P1(*),P2(*),T1(*),PALL(*)
      COMMON/INSTAB/INDIC
C
      IF (INDIC.NE.3) RETURN
C
      DO 100 I = 1,3
      IF (IPOS(I).EQ.0) GO TO 100
      DO 50 J = 1,NHARM
C
      K = IPOS(I) + J - 1
      GO TO (10,20,30),I
   10 CONTINUE
      PALL(K) = P1(J)
      GO TO 50
   20 CONTINUE
      PALL(K) = P2(J)
      GO TO 50
   30 CONTINUE
      PALL(K) = T1(J)
   50 CONTINUE
  100 CONTINUE
      RETURN
      END
C
C
C
C=DECK      FDYNAM
      SUBROUTINE FDYNAM(Z,ITOT,NHARM,NKR,KRING1,ISEG,PLIN1,
     1                  PLIN2,PAXIAL,LSET)
C
C  THIS SUBROUTINE ADDED 17 AUG. 1985. PURPOSE IS TO GET CONTRIBUTION
C  TO TOTAL FORCES FROM LOADS APPLIED TO THE RINGS. LATER THESE LOADS
C  WILL BE USED TO OBTAIN DALEMBERT FORCES THAT WILL MAKE THE TOTAL
C  LOADS ON THE STRUCTURE SELF-EQUILIBRATING.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION Z(*),PLIN1(*),PLIN2(*),PAXIAL(4,50)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
       REAL MX,MY,MZ,ICM,IZ,M,IX,IY,IXY,IP
      COMMON/RMASS/RM(198)
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
C
C     IF (IDYN(LSET).EQ.0) GO TO 40
      NKOUNT = 0
      PI = 3.1415927
      N = NSTART - INCR
  360 N = N + INCR
      NKOUNT = NKOUNT + 1
      IF (NKOUNT.GT.NHARM) GO TO 40
      IF (IABS(N).GT.1) GO TO 360
      INDX = NKOUNT
      DO 9 K = KRING1,NKR
      IZGL = IZRING(K) - ITOT + 1
      VV = PAXIAL(1,K)*PLIN1(INDX)
      SS = PAXIAL(2,K)*PLIN2(INDX)
      HH = PAXIAL(3,K)*PLIN1(INDX)
      FMM= PAXIAL(4,K)*PLIN1(INDX)
      IF (N.NE.-1) GO TO 2
C BEG APR 2009
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (IPRISM.EQ.0) THEN
        FX(LSET) = FX(LSET) + PI*RC(K)*(HH-SS)
        MY(LSET) = MY(LSET) + PI*RC(K)*(VV*RC(K) -SS*Z(IZGL) +HH*Z(IZGL)
     1             +FMM)
      ELSE
        FX(LSET) = FX(LSET) + AXIALL*(HH-SS)
        MY(LSET) = MY(LSET) + AXIALL*(VV*0.0     -SS*Z(IZGL) +HH*Z(IZGL)
     1             +FMM)
      ENDIF
C END APR 2009
C
      GO TO 9
    2 IF (N.NE.0) GO TO 3
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        FZ(LSET) = FZ(LSET) - 2.*PI*VV*RC(K)
        MZ(LSET) = MZ(LSET) - 2.*PI*SS*RC(K)**2
      ELSE
        FZ(LSET) = FZ(LSET) - AXIALL*VV
        MZ(LSET) = MZ(LSET) - AXIALL*SS*0.0
      ENDIF
C END APR 2009
      GO TO 9
    3 IF (N.NE.1) GO TO 9
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        FY(LSET) = FY(LSET) - PI*RC(K)*(HH+SS)
        MX(LSET) = MX(LSET) + PI*RC(K)*(VV*RC(K) +SS*Z(IZGL) +HH*Z(IZGL)
     1            +FMM)
      ELSE
        FY(LSET) = FY(LSET) - AXIALL*(HH+SS)
        MX(LSET) = MX(LSET) + AXIALL*(VV*0.0 +SS*Z(IZGL) +HH*Z(IZGL)
     1            +FMM)
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END APR 2009
    9 CONTINUE
      GO TO 360
   40 CONTINUE
      RETURN
      END
C
C
C
C=DECK      PDYNAM
      SUBROUTINE PDYNAM(ZA,NHARM,ISEG,PDIST1,PDIST2,PP,RAD,RADD,CUR2,
     1                  DS,I5I,LSET)
C
C  PURPOSE IS TO CALCULATE TOTAL FORCES AND MOMENTS DUE TO
C  NON-SELF-EQUILIBRATING DISTRIBUTED (AS OPPOSED TO LINE) LOADS.
C  THIS SUBROUTINE ADDED TO BOSOR4 17 AUGUST 1985. RESULTS ARE USED
C  FOR DYNAMIC REACTION CALCULATIONS.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION ZA(*),PDIST1(*),PDIST2(*),PP(I5I,3),RAD(*),RADD(*)
      DIMENSION CUR2(*),DS(*)
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,M
      COMMON/NLINS/NSTART,NFIN
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
C
C     IF (IDYN(LSET).EQ.0) GO TO 40
      NKOUNT = 0
      PI = 3.1415927
      N = NSTART - INCR
  360 N = N + INCR
      NKOUNT = NKOUNT + 1
      IF (NKOUNT.GT.NHARM) GO TO 40
      IF (IABS(N).GT.1) GO TO 360
      INDX = NKOUNT
      DO 9 K = 1,I5I
      Z = ZA(K)
      PT = PP(K,1)*PDIST1(INDX)
      PC = PP(K,2)*PDIST2(INDX)
      PN = PP(K,3)*PDIST1(INDX)
      H = DS(K)
      IF (K.EQ.1.OR.K.EQ.I5I) H = DS(K)/2.
      R = RAD(K)
      RD= RADD(K)
      FK2 = CUR2(K)
      RDS = R*H
C BEG APR 2009
      RFK2 = R*FK2
      IF (IPRISM.EQ.1) THEN
C BEG JAN 2010
         FK2 = FK2/1000000.
         R = R*1000000.
C END JAN 2010
         IF (ABS(RD).GT.0.999999) THEN
            RFK2 = 0.0
         ELSE
            RFK2 = (FK2/ABS(FK2))*SQRT(1.-RD**2)
         ENDIF
         RDS = H
      ENDIF
C END APR 2009
      IF (N.NE.-1) GO TO 2
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        FX(LSET) = FX(LSET) +RDS*PI*(PN*RFK2 + PT*RD - PC)
        MY(LSET) = MY(LSET) +RDS*PI*(Z*(PN*RFK2 +PT*RD -PC)
     1                              +R*(PN*RD -PT*RFK2))
      ELSE
        FX(LSET) = FX(LSET) +RDS*AXIALL*(PN*RFK2 + PT*RD - PC)
        MY(LSET) = MY(LSET) +RDS*AXIALL*(Z*(PN*RFK2 +PT*RD -PC)
     1                              +0.0*(PN*RD -PT*RFK2))
      ENDIF
C END APR 2009
      GO TO 9
    2 IF (N.NE.0) GO TO 3
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        FZ(LSET) = FZ(LSET) + RDS*2.*PI*(-PN*RD +PT*RFK2)
        MZ(LSET) = MZ(LSET) - RDS*2.*PI*PC*R
      ELSE
        FZ(LSET) = FZ(LSET) + RDS*AXIALL*(-PN*RD +PT*RFK2)
        MZ(LSET) = MZ(LSET) - RDS*AXIALL*PC*0.0
      ENDIF
C END APR 2009
      GO TO 9
    3 IF (N.NE.1) GO TO 9
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        FY(LSET) = FY(LSET) - RDS*PI*(PN*RFK2 +PT*RD + PC)
        MX(LSET) = MX(LSET) + RDS*PI*(Z*(PN*RFK2 +PT*RD +PC)
     1                               +R*(PN*RD -PT*RFK2))
      ELSE
        FY(LSET) = FY(LSET) - RDS*AXIALL*(PN*RFK2 +PT*RD + PC)
        MX(LSET) = MX(LSET) + RDS*AXIALL*(Z*(PN*RFK2 +PT*RD +PC)
     1                               +0.0*(PN*RD -PT*RFK2))
      ENDIF
C END APR 2009
    9 CONTINUE
      GO TO 360
   40 CONTINUE
      RETURN
      END
C
C
C
C=DECK      WALLLIB
C
C  THIS IS THE WALL LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      WALLS
C     OVERLAY(1,4)
C BEG DEC 2005
      SUBROUTINE WALLS(BBB,Z,S,DS,ZAX,PHORIG)
      DIMENSION PHORIG(*)
C END DEC 2005
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(198),TT(600)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/SFLAG/ISTRES
      COMMON/STRSEG/ISTRSS(295)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/KCHNG/NNWALL(295),CCH(295)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG SEP 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/ISOGRX/ISOGRD(295),IRECT(2,295),INTEXT(2,295),ISTSMR(2,295)
      COMMON/NUMSTX/NUMSTF(295)
C END SEP 2005
C BEG APR 1992
      COMMON/ILVARS/ILVAR(11,295),ITREF(295),NLVAR(295),ITIO(295)
C END APR 1992
      CHARACTER*4 CHARAC
C BEG OCT 1999
      DIMENSION BBB(*), Z(*),S(*),ZAX(*),DS(*)
C END OCT 1999
C     CALCULATION OF WALL STIFFNESS COEFFICIENTS AND THERMAL LOADS,ITH S
10    FORMAT(10I6)
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ SHELL WALL CONSTRUCTION FOLLOWS...')
   20 CONTINUE
      CALL DATUM(IFILE2,340,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,341,1,2,NWALL,REALL,CHARAC,IOUT,0,1)
C BEG APR 1992
C BEG SEP 2005
      IF (NWALL.LT.1.OR.NWALL.GT.10) THEN
       WRITE(IFILE4,*)' NWALL NOT IN PERMISSIBLE RANGE 1 TO 10'
C END SEP 2005
C END APR 1992
       CALL ERREX
      ENDIF
C BEG SEP 2005
      ISOGRD(I) = 0
      IRECT(1,I) = 0
      IRECT(2,I) = 0
      INTEXT(1,I) = 0
      INTEXT(2,I) = 0
      ISTSMR(1,I) = 0
      ISTSMR(2,I) = 0
      NUMSTF(I) = 0
      IF (NWALL.EQ.10) THEN
C      rectangular isogrid members are added to monocoque isotropic wall:
         ISOGRD(I) = 1
         CALL DATUM(IFILE2,342,1,2,NWALL2,REALL,CHARAC,IOUT,0,1)
         IF (NWALL2.NE.2.AND.NWALL2.NE.4
     1                 .AND.NWALL2.NE.5.AND.NWALL2.NE.9) THEN
          WRITE(IFILE4,*)' NWALL2  must be 2 or 4 or 5 or 9'
          CALL ERREX
         ENDIF
      ENDIF
      IF (ISOGRD(I).EQ.1) NWALL = NWALL2
C END SEP 2005
C
      NNWALL(I) = NWALL
      IF (ISTRES.EQ.2) GO TO 30
      IF (NWALL.NE.2.AND.NWALL.NE.5.AND.NWALL.NE.4.AND.NWALL.NE.9)
     1    ISTRSS(I) = 0
   30 CONTINUE
      ILD = 0
      IF (ILPOS(12,I).NE.0) ILD = 4
      ILT = 1
      IF (ILPOS(12,I).NE.0) ILT = 4
      ILTIO = 39
      IF (ILPOS(12,I).NE.0) ILTIO = 41
C BEG DEC 2005
      CALL WALLCF(I,NWALL,I5I,TT,ILT,BBB(22*I5I+IPOS),BBB(8*I5I+IPOS),
     1 BBB(ILD*I5I+IPOS),Z(ITOT),S(ITOT),TEMP,BBB(ILTIO*I5I+IPOS),NSEG,
     2BBB(23*I5I+IPOS),BBB(24*I5I+IPOS),BBB(25*I5I+IPOS),ZAX(ITOT),
     2 DS(ITOT),ITOT,PHORIG(ITOT))
C END DEC 2005
C BEG APR 1992
      CALL GASP(BBB(39*I5I+IPOS),I5I*4,1,ITIO(I))
C END APR 1992
      RETURN
      END
C
C
C
C=DECK      WALLCF
C BEG DEC 2005
      SUBROUTINE WALLCF(II,NWALL,I5,TT,ILT,RAD,C,THERM,ZREF,S,TEMP,
     1TIO,NSEG,RADD,CUR1,CUR2,ZAXIAL,DS,ITOT,PHORIG)
C END DEC 2005
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.
C     THE WALL STIFFNESS COEFFICIENTS CIJ ARE CALCULATED FOR THE
C     CURRENT SEGMENT, II. SEVERAL TYPES OF SHELL WALLS MAY BE
C     INCLUDED IN THE ANALYSIS OF A COMPOSITE SHELL STRUCTURE, AS LONG
C     AS THE MODEL REMAINS AXISYMMETRIC.
C BEG MAY 2009
C BEG JUL 2010
      COMMON/CSKINY/CSKIN1(6,6,295),THERM1(4,295)
C END JUL 2010
C END MAY 2009
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C BEG AUG 1999
      COMMON/TOTMAX/TOTMAS
      COMMON/CWWALL/CW11,CW12,CW14,CW15,CW22,CW24,CW25,
     1              CW44,CW45,CW55,CW33,CW36,CW66,SMPAW
C END AUG 1999
      COMMON/OUTP/NPRT
      COMMON/IDZREF/IZREF(295)
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
C BEG SEP 2005
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/CSKINX/CSKIN(6,6,100)
      COMMON/IDSTFP/ISTFPR(295)
      COMMON/STFPRX/STFPRP(4,2,100)
C END SEP 2005
      COMMON/SFLAG/MONOQ
      COMMON/AXIALZ/ZAX(100)
      COMMON/CMAXS/CMAX
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/INSTAB/INDIC
C  FOLLOWING COMMON BLOCKS ADDED 17 AUG 1985 FOR DYNAMIC REACTION..
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
       REAL MX,MY,MZ,ICM,IZ,M,IX,IY,IXY,IP
      COMMON/RMASS/RM(198)
      COMMON/IRNGZ/KRNG
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
C  END 17 AUG INSERT
      DIMENSION ZREF(*),TT(I5,6),C(I5,14),THERM(I5,4),TIO(I5,2)
C BEG MAR 2007
      DIMENSION THICK(10000)
C END MAR 2007
      DIMENSION  ZAXIAL(*),DS(*)
      DIMENSION S(*),RAD(*),RADD(*),CUR1(*),CUR2(*),TH(100)
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT
      LOGICAL ANSL1
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG MARCH 1990
      COMMON/ZZZGLB/ZGLOBL
C END MARCH 1990
      CALL GASP(ZREF,I5,1,IZREF(II))
      WRITE (IFILE4,10)II
10    FORMAT(/,40X,' PHYSICAL PROPERTIES OF SEGMENT NO. ',I3)
      J = 1
      DO 20 I=1,I5
20    ZAX(I) = ZAXIAL(I)
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFILE4,'(/,A,I3,A,/,(1P10E12.4))')
     1' Local axial coordinates, z, in Segment No.',II,
     1' ZAX(i),i=1,i5=',(ZAX(I),I=1,I5)
C END MAR 2008
   25 CONTINUE
      WALMAS = 0
      IF (II.EQ.1) THEN
         DO 26 I = 1,295
   26    NODALL(I) = 1
         CALL MOVER(0,0,NODES,1,295)
         NODTOT = 0
      ENDIF
C
      DO 190 I=1,I5
C BEG SEP 2005
      C11 = 0.
      C12 = 0.
      C13 = 0.
      C14 = 0.
      C15 = 0.
      C16 = 0.
      C22 = 0.
      C23 = 0.
      C24 = 0.
      C25 = 0.
      C26 = 0.
      C33 = 0.
      C34 = 0.
      C35 = 0.
      C36 = 0.
      C44 = 0.
      C45 = 0.
      C46 = 0.
      C55 = 0.
      C56 = 0.
      C66 = 0.
      SMPA = 0.
C END SEP 2005
      Z = ZREF(I)
      T1 = TT(I,ILT)
      T2 = TT(I,ILT+1)
      T3 = TT(I,ILT+2)
C
C     GO TO APPROPRIATE CFB TO FIND THE CIJ FOR THIS SEGMENT.
C
C BEG APR 1992
      GO TO (50,60,70,80,90,100,110,120,125),NWALL
C END APR 1992
C     READ IN CIJ FOR ARBITRARY SHELL. PROPERTIES MUST BE CONSTANT
C     ALONG MERIDIAN
C BEG DEC 2005
50    CALL CFB1(II,I,RAD,NWALL,Z,T,I5,S,C,RADD,PHORIG)
C END DEC 2005
      GO TO 130
C     MONOCOQUE SHELL WITH CONSTANT OR VARIABLE THICKNESS
C BEG DEC 2005
60    CALL CFB2(TH,II,I,RAD,NWALL,ZREF,I5,S,THERM,T1,T2,T3,J,TIO,
     1C,RADD,CUR1,CUR2,PHORIG)
C END DEC 2005
      GO TO 130
C     MONOCOQUE SHELL WITH SKEWED STIFFENERS. AVOID USING IF POSSIBLE
C     AS THIS SUBROUTINE IS NOT CHECKED OUT
70    CALL CFB3(I)
      GO TO 130
C     LAYERED LAMINATED SHELL (ROUTINE CFB4 INCLUDED ON 21 AUG, 1985)
C BEG DEC 2005
80    CALL CFB4(II,I,RAD,NWALL,Z,I5,S,C,RADD,THERM,T1,T2,T3,TIO,
     1          PHORIG)
C END DEC 2005
      GO TO 130
C     LAYERED ORTHOTROPIC SHELL WHERE LAYERS MAY BE OF CONSTANT OR OF
C     VARIABLE THICKNESS
C BEG DEC 2005
90    CALL CFB5(I,RAD,NWALL,Z,I5,THERM,T1,T2,T3,J,S,C,RADD,II,TIO,
     1          PHORIG)
C END DEC 2005
      GO TO 130
C     CORRUGATED SHELL WITHOUT SMOOTH SKIN
C BEG DEC 2005
100   CALL CFB6(II,I,RAD,NWALL,Z,I5,S,C,RADD,PHORIG)
C END DEC 2005
      GO TO 130
C     SEMI-SANDWICH CORRUGATED SHELL. SKIN MAY VARY IN THICKNESS
C BEG DEC 2005
110   CALL CFB7(I,RAD,NWALL,Z,S,I5,II,TIO,S,C,RADD,PHORIG)
C END DEC 2005
      GO TO 130
C     LAYERED ORTHOTROPIC SHELL WITH TEMPERATURE-DEPENDENT MATERIAL
C     PROPERTIES. LAYERS MAY VARY IN THICKNESS. BE SURE TEMPERATURE
C     DEPENDENCE IS AXISYMMETRIC OR SOLUTION MAY NOT MAKE SENSE.
C BEG DEC 2005
120   CALL CFB8(II,I,RAD,NWALL,Z,I5,THERM,T1,T2,T3,TEMP,J,S,C,RADD,
     1          PHORIG)
C END DEC 2005
C BEG APR 1992
      GO TO 130
C     LAYERED COMPOSITE WITH SOME VARIABLE THICKNESS LAYERS...
C BEG DEC 2005
  125 CALL CFB9(II,I,RAD,NWALL,Z,I5,S,C,RADD,THERM,T1,T2,T3,TIO,
     1          THICK,PHORIG)
C END DEC 2005
C END APR 1992
130   CONTINUE
      C(I,1) = C11
      C(I,2) = C12
      C(I,3) = C14
      C(I,4) = C15
      C(I,5) = C22
      C(I,6) = C24
      C(I,7) = C25
      C(I,8) = C44
      C(I,9) = C45
      C(I,10) = C55
      C(I,11) = C33
      C(I,12) = C36
      C(I,13) = C66
C     SHELL MASS/SURFACEAREA
      C(I,14) = SMPA
C BEG SEP 2005
C BEG MAY 2009
      IF (I.EQ.I5) THEN
         CALL GASP(CSKIN,3600,1,ICSKIN(II))
         CALL MOVER(CSKIN(1,1,1),1,CSKIN1(1,1,II),1,36)
C BEG JUL 2010
         THERM1(1,II) = THERM(1,1)
         THERM1(2,II) = THERM(1,2)
         THERM1(3,II) = THERM(1,3)
         THERM1(4,II) = THERM(1,4)
C END JUL 2010
      ENDIF
C END MAY 2009
      IF (I.EQ.I5) CALL GASP(STFPRP,800,1,ISTFPR(II))
C END SEP 2005
      IF (C11.EQ.0.) THEN
         WRITE(IFILE4,*)
     1 ' ZERO STIFFNESS C11 DETECTED AT NODAL POINT', I
         REWIND IFILE2
         GO TO 25
      ENDIF
C
C  FOLLOWING STATEMENTS ADDED 17 AUGUST, 1985 FOR DYNAMIC REACTION..
C
      IF (II.EQ.1.AND.I.EQ.1) KRNG = 1
      FACT = 0.
      IF ((ITOT+I-1).EQ.IZRING(KRNG)) FACT = 1.
C
C  TOTAL MASS, MASS MOMENT OF INERTIA, CENTER OF MASS
C
      H = DS(I)
      IF (I.EQ.1.OR.I.EQ.I5) H = DS(I)/2.
      RDS = RAD(I)*H
      IF (IPRISM.EQ.1) RDS = H
      PI = 3.1415927
C BEG MARCH 1990
      ZGLBL = ZAX(I) + ZGLOBL
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        ICM = ICM + PI*RDS*SMPA*(RAD(I)**2 +2.*ZGLBL**2)
     1   + FACT*PI*RM(KRNG)*RC(KRNG)*AREA(KRNG)*
     1          (RC(KRNG)**2 +2.*ZGLBL**2)
        M   = M +2.*PI*(RDS*SMPA +FACT*RC(KRNG)*AREA(KRNG)*RM(KRNG))
        IZ = IZ +2.*PI*(RDS*SMPA*RAD(I)**2 +FACT*AREA(KRNG)*RM(KRNG)*
     1          RC(KRNG)**3)
        ZCM = ZCM + 2.*PI*(RDS*SMPA*ZGLBL +FACT*RC(KRNG)*AREA(KRNG)*
     1          RM(KRNG)*ZGLBL)
      ELSE
        ICM = ICM + 0.5*RDS*SMPA*(AXIALL**2 + ZGLBL**2)
     1   + FACT*0.5*AXIALL*RM(KRNG)*AREA(KRNG)*
     1          (AXIALL**2 +2.*ZGLBL**2)
        M   = M +AXIALL*(RDS*SMPA +FACT*AREA(KRNG)*RM(KRNG))
        IZ = IZ +AXIALL**3*(RDS*SMPA +FACT*AREA(KRNG)*RM(KRNG))
        ZCM = ZCM + AXIALL*(RDS*SMPA*ZGLBL +FACT*AREA(KRNG)*
     1          RM(KRNG)*ZGLBL)
      ENDIF
C END APR 2009
C END MARCH 1990
C
      IF ((ITOT+I-1).EQ.IZRING(KRNG)) KRNG = KRNG + 1
C
C  END OF 17 AUG 1985 DYNAMIC REACTION STATEMENTS
C
      IF (I.GT.1) GO TO 160
      REWIND IFILE3
      CALL DATUM(IFILE3,607,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 180
      WRITE (IFILE4,140)II
140   FORMAT(/,' WALL STIFFNESS COEFFICIENTS,CIJ, AND MASS/AREA, SMPA',
     1' FOR SEGMENT NUMBER ',I3)                  
      WRITE (IFILE4,150)
150   FORMAT('   C11      C12      C14      C15      C22      C24  ',
     1'    C25      C44      C45      C55      C33      C36      C66',
     1'   SMPA',/)                          
160   CONTINUE
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 180
      WRITE(IFILE4,170) C11,C12,C14,C15,C22,C24,C25,C44,
     1 C45,C55,C33,C36,C66,SMPA
170   FORMAT(1P14E9.2)
180   CONTINUE
      IF (II.EQ.1.AND.I.EQ.1) CMAX = ABS(C11)
      CMAX = AMAX1(ABS(C11),CMAX)
C BEG FEB 2008
C     WALMAS = WALMAS + C(I,14)*DS(I)*RAD(I)
      WALMAS = WALMAS + C(I,14)*RDS
C END FEB 2008
C BEG AUG 1999
      IF (INDIC.EQ.0.AND.II.EQ.NSEG.AND.I.EQ.I5) THEN
         CW11 = C11
         CW12 = C12
         CW14 = C14
         CW15 = C15
         CW22 = C22
         CW24 = C24
         CW25 = C25
         CW44 = C44
         CW45 = C45
         CW55 = C55
         CW33 = C33
         CW36 = C36
         CW66 = C66
         SMPAW= SMPA
      ENDIF
C END AUG 1999
190   CONTINUE
C
      WALMAS = 2.*3.1415927*WALMAS
      WRITE(IFILE4,200) II, WALMAS
  200 FORMAT(/,' SHELL WALL MASS OF SEGMENT NO.',I3,' = ',1PE12.4,/,
     1         ' (DISCRETE RINGS NOT INCLUDED)',/)
C BEG FEB 2008
      WRITE(IFILE4,'(/,A,I4,A,1PE12.4)')
     1' Accumulated mass, M, (including rings) at the end of Segment',
     1 II,':     M =',M
      WRITE(IFILE4,'(/,A,/,A,I4,A,1PE12.4)')
     1' Accumulated mass moment of inertia (including rings) about the',
     1' origin of the global coordinate system at the end of Segment',
     1 II,':   ICM =',ICM
      IF (M.GT.0.) WRITE(IFILE4,'(/,A,/,A,I4,A,1PE12.4)')
     1' Axial location, Z(cg), of the center of gravity of the',
     1' accumulated mass, M, (including rings) at the end of Segment',
     1 II,': Z(cg) =',ZCM/M
C23456789012345678901234567890123456789012345678901234567890123456789012
C END FEB 2008
C
C  FOLLOWING STATEMENTS ADDED 17 AUG, 1985 (DYNAMIC REACTION)
C
      IF (II.NE.NSEG) GO TO 400
      IF (M.GT.0.) ZCM = ZCM/M
      ICM = ICM - M*ZCM**2
      WRITE(IFILE4,250) ZCM
  250 FORMAT(/,' ***************************************',/,
     1' TOTAL FORCES AND MOMENTS FROM APPLIED LOADS. THE FORCES AND',/,
     1' MOMENTS OCCUR AT THE ORIGIN OF THE GLOBAL X,Y,Z AXIS SYSTEM,',/,
     1' WHICH IS LOCATED AT AXIAL STATION Z=0. NOTE THAT THE TOTAL',/,
     1' FORCES AND MOMENTS ARE NOT APPLIED AT THE C.G. OF THE',/,
     1' STRUCTURE, WHICH IS AT AXIAL LOCATION ZCM=',1PE12.4,', BUT',/,
     1' THEY ARE APPLIED AT AXIAL STATION Z = 0.',/,/,
     1' NOTE: IN ORDER FOR THE MASS PROPERTIES AND DYNAMIC REACTIONS',/,
     1' TO BE PROPERLY COMPUTED, THE GEOMETRY OF EVERY SEGMENT IN',/,
     1' THE ENTIRE STRUCTURE MUST BE EXPRESSED IN TERMS OF THE',/,
     1' GLOBAL AXIAL COORDINATE, Z.  THAT IS, YOU MUST HAVE PROVIDED',/,
     1' AS INPUT FOR EACH SEGMENT THE GLOBAL Z COORDINATES.')
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFILE4,260) FX(1),FY(1),FZ(1),MX(1),MY(1),MZ(1)
  260 FORMAT(/,' TOTAL FORCES FROM LOAD SET A...',/,
     1'  X-DIRECTION (THETA=  0 DEG.), FX(1) =             ',1PE12.4,/,
     1'  Y-DIRECTION (THETA=270 DEG.), FY(1) =             ',1PE12.4,/,
     1'  Z-DIRECTION (AXIAL UPWARD)  , FZ(1) =             ',1PE12.4,/,
     1' TOTAL MOMENTS FROM LOAD SET A...',/,
     1'  ABOUT X-AXIS                , MX(1) =             ',1PE12.4,/,
     1'  ABOUT Y-AXIS                , MY(1) =             ',1PE12.4,/,
     1'  ABOUT Z-AXIS                , MZ(1) =             ',1PE12.4,/)
      WRITE(IFILE4,265) FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2)
  265 FORMAT(/,' TOTAL FORCES FROM LOAD SET B...',/,
     1'  X-DIRECTION (THETA=  0 DEG.), FX(2) =             ',1PE12.4,/,
     1'  Y-DIRECTION (THETA=270 DEG.), FY(2) =             ',1PE12.4,/,
     1'  Z-DIRECTION (AXIAL)         , FZ(2) =             ',1PE12.4,/,
     1' TOTAL MOMENTS FROM LOAD SET B...'/
     1'  ABOUT X-AXIS                , MX(2) =             ',1PE12.4,/,
     1'  ABOUT Y-AXIS                , MY(2) =             ',1PE12.4,/,
     1'  ABOUT Z-AXIS                , MZ(2) =             ',1PE12.4,/)
      WRITE(IFILE4,300) M,IZ,ICM,ZCM
  300 FORMAT(/,' TOTAL MASS, LOCATION OF C.G., MASS MOMENTS OF INERTIA',
     1/,'   TOTAL MASS, M (e.g. lb-sec**2/in)          M =   ',1PE12.4,
     1/,'   POLAR MASS MOMENT OF INERTIA,             IZ =   ',1PE12.4,
     1/,'   MASS MOMENT OF INERTIA ABOUT C.G.        ICM =   ',1PE12.4,
     1/,'   AXIAL POSITION OF THE C.G.               ZCM =   ',1PE12.4/)
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG AUG 1999
      TOTMAS = M
      WRITE(IFILE4,330) TOTMAS
  330 FORMAT(/,' ***************** TOTAL MASS *******************',/,
     1' TOTMAS =',1P,E12.4,/,
     1' ********************************************************')
C END AUG 1999
C
  400 CONTINUE
C
C END OF 17 AUG 1985 STATEMENTS.
      RETURN
      END
C
C
C
C=DECK      CFB1
C BEG DEC 2005
      SUBROUTINE CFB1(ISEG,I,RAD,NWALL,Z,TD,I5,S,C,RADD,PHORIG)
C END DEC 2005
C     CALLED FROM WALLCF, WHICH IS CALLED FROM READIT, WHICH IS CALLED
C     FROM MAIN. CAUSES CIJ TO BE READ IN DIRECTLY OR MODIFIES SHELL
C     WALL STIFFNESS COEFFICIENTS CIJ TO ACCOUNT FOR MERIDIONAL AND/OR
C     CIRCUMFERENTIAL STIFFENERS WHICH ARE SMEARED OUT ACCORDING TO
C     THE BARUCH-SINGER THEORY.
C
C     ALSO CALLED FROM CFB2,CFB4,CFB5,CFB6,CFB7, AND CFB8.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C BEG DEC 2005
      DIMENSION PHORIG(*)
      COMMON/IPHIHI/IPHIOL(295),IARCLT(295),IHISTF(295),ITHSTF(295)
C END DEC 2005
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(295),IRECT(2,295),INTEXT(2,295),ISTSMR(2,295)
      COMMON/NUMSTX/NUMSTF(295)
      COMMON/CSKINX/CSKIN(6,6,100)
      COMMON/STFPRX/STFPRP(4,2,100)
C END SEP 2005
C BEG MAR 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/ALOFIT/INDSIG(4),ISEGMT,IBOUND(9),DSTOT(2),IPOS(6)
      COMMON/RECSTF/PK1(295),PE1(295),PH1(295),
     1              PK2(295),PE2(295),PH2(295)
C END MAR 2005
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSWER,ANSCON,ANSREC,CHARAC
      LOGICAL ANSL1
10    FORMAT(10I6)
      COMMON/SHMASS/SMPA
      DIMENSION RAD(100),S(100),C(I5,14),ISTATN(50),T(50),H(50),X(50)
      DIMENSION A(50),XI(50),XJ(50),D(50),RADD(100)
      COMMON/AXIALZ/ZAXIAL(100)
20    FORMAT (6E12.8)
30    FORMAT (/,' STIFFNESS COEFFICIENTS READ AS INPUT.',/,
     1' C11=',E15.8,5X,'C12=',E15.8,5X,'C14=',E15.8,5X,'C15=',E15.8,/,
     1' C22=',E15.8,5X,'C24=',E15.8,5X,'C25=',E15.8,5X,'C33=',E15.8,/,
     1' C44=',E15.8,5X,
     3'C45=',E15.8,5X,'C55=',E15.8,5X,'C66=',E15.8,5X,'C36=',E15.8)
40    FORMAT (/,' NO STRINGERS OR RINGS.')
50    FORMAT (/,' ANALYSIS IS FOR AN ABRITRARY SHELL.')
C BEG MAR 2005
C BEG SEP 2013
      IF (ISEGMT.EQ.1) CALL MOVER(0.,0,PK1,1,1770)
C END SEP 2013
C END MAR 2005
      IF (NWALL.NE.1) GO TO 70
      IF (I.NE.1) GO TO 60
      WRITE (IFILE4,50)
C
C     READ STIFFNESS COEFFICIENTS FOR ARBITRARY SHELL.
C
      CALL DATUM(IFILE2,350,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,351,1,1,INT,SMPAD,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,352,1,1,INT,D11,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,353,1,1,INT,D12,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,354,1,1,INT,D14,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,355,1,1,INT,D15,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,356,1,1,INT,D22,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,357,1,1,INT,D24,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,358,1,1,INT,D25,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,359,1,1,INT,D33,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,360,1,1,INT,D44,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,361,1,1,INT,D45,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,362,1,1,INT,D55,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,363,1,1,INT,D66,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,364,1,1,INT,D36,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,365,1,2,INT,ANRS,CHARAC,IOUT,0,1)
C
      WRITE(IFILE4,30)D11,D12,D14,D15,D22,D24,D25,D33,D44,
     1 D45,D55,D66,D36
60    NRS=ANRS
      SMPA = SMPAD
      C11 = D11
      C12 = D12
      C14 = D14
      C15 = D15
      C22 = D22
      C24 = D24
      C25 = D25
      C33 = D33
      C36 = D36
      C44 = D44
      C45 = D45
      C55 = D55
      C66 = D66
      IF (NRS.NE.0) GO TO 70
      IF (I.EQ.1) WRITE(IFILE4,40)
      RETURN
C
C     MODIFY STIFFNESS COEFFICIENTS FOR EFFECT OF RINGS AND STRINGERS.
C
70    CONTINUE
      IF (I.NE.1) GO TO 600
C
C     IRECT1 = 1   RECTANGULAR STRINGERS
C     IRECT1 = 0  NON-RECTANGULAR STRINGERS
C     IRECT2 = 1  RECTANGULAR RINGS
C     IRECT2 = 0  NON-RECTANGULAR RINGS
C     IVAR1 = 1  STRINGER CROSS-SECTION PROPERTIES VARY ALONG MERIDIAN
C     IVAR2 = 1      RING CROSS-SECTION PROPERTIES VARY ALONG MERIDIAN
C     IVAR1 = 0  STRINGER CROSS-SECTION CONSTANT ALONG MERIDIAN
C     IVAR2 = 0      RING CROSS-SECTION CONSTANT ALONG MERIDIAN
C
      WRITE(IOUT,2)
    2 FORMAT(6X,'H',9X,'$ SMEARED STIFFENER INPUT FOLLOWS...')
      CALL DATUM(IFILE2,500,0,0,INT,REALL,CHARAC,IOUT,0,1)
      IRECT1 = 1
      IRECT2 = 1
      IVAR1  = 0
      IVAR2  = 0
      N1 = 1
      K1 = 0
      E1 = 0.
      U1 = 0.
      STIFMD = 0.
      T1 = 0.
      H1 = 0.
      K2 = 0
      E2 = 0.
      U2 = 0.
      RGMD=0.
      D2 = 1.
      T2 = 0.
      H2 = 0.
C
      CALL DATUM(IFILE2,501,1,1,INT,REALL,ANSWER,IOUT,0,1)
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 130
C
C BEG SEP 2005
      N1 = 0
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         CALL DATUM(IFILE2,502,1,1,N1,REALL,CHARAC,IOUT,0,1)
         NUMSTF(ISEGMT) = N1
      ENDIF
C END SEP 2005
      CALL DATUM(IFILE2,503,1,2,K1,REALL,CHARAC,IOUT,0,1)
      IF (K1.NE.0.AND.K1.NE.1) THEN
       WRITE(IFILE4,*)' K1 NOT IN PERMISSIBLE RANGE 0 TO 1'
       CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,504,1,1,INT,E1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,505,1,1,INT,U1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,506,1,1,INT,STIFMD,CHARAC,IOUT,0,1)
C BEG SEP 2005
      IF (ISOGRD(ISEGMT).EQ.1)
     1CALL DATUM(IFILE2,507,1,2,INT,SPACNG,CHARAC,IOUT,0,1)
C END SEP 2005
      CALL DATUM(IFILE2,509,1,1,INT,REALL,ANSCON,IOUT,0,1)
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 80
C
C    STRINGER CROSS SECTION VARIES IN THE MERIDIONAL DIRECTION..
C
      IVAR1 = 1
      CALL DATUM(IFILE2,510,1,2,NSTATN,REALL,CHARAC,IOUT,0,1)
      IF (NSTATN.LT.2.OR.NSTATN.GT.20) THEN
       WRITE(IFILE4,*)' NSTATN NOT IN PERMISSIBLE RANGE 2 TO 20'
       CALL ERREX
      ENDIF
      IPRM(2) = 511
      CALL STA(ISTATN,ZAXIAL,RAD,RADD,S,NSTATN,I5)
   80 CONTINUE
C BEG SEP 2005
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         CALL DATUM(IFILE2,514,1,1,INT,REALL,ANSREC,IOUT,0,1)
         IF (ANSL1('N',ANSREC,INFILE)) GO TO 90
      ENDIF
C END SEP 2005
C
C   STRINGER CROSS SECTIONS ARE RECTANGULAR...
C
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 85
C
C   RECTANGULAR CROSS SECTION OF STRINGER VARIES ALONG THE MERIDIAN..
C
      DO 83 K= 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,515,1,1,INT,T(K),CHARAC,IOUT,K,IPROMP)
   83 CONTINUE
      DO 84 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,516,1,1,INT,H(K),CHARAC,IOUT,K,IPROMP)
   84 CONTINUE
C
      CALL FINDZ(NSTATN,ISTATN,T,I5,C(1,1),S)
      CALL FINDZ(NSTATN,ISTATN,H,I5,C(1,2),S)
      GO TO 130
C
   85 CONTINUE
C
C   RECTANGULAR CROSS SECTION IS CONSTANT ALONG THE MERIDIAN...
C
      CALL DATUM(IFILE2,521,1,1,INT,T1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,522,1,1,INT,H1,CHARAC,IOUT,0,1)
C BEG MAR 2005
      PK1(ISEGMT) = K1
      PE1(ISEGMT) = E1
      PH1(ISEGMT) = H1
C END MAR 2005
      GO TO 130
C
C
   90 CONTINUE
      IRECT1 = 0
C
C   STRINGER CROSS SECTIONS ARE NOT RECTANGULAR...
C
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 100
C
C   STRINGER CROSS SECTION VARIES ALONG THE MERIDIAN...
C
      DO 92 K = 1,NSTATN
      IPROMP =1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,517,1,2,INT,X(K),CHARAC,IOUT,K,IPROMP)
   92 CONTINUE
      DO 94 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,518,1,1,INT,A(K),CHARAC,IOUT,K,IPROMP)
   94 CONTINUE
      DO 96 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,519,1,2,INT,XI(K),CHARAC,IOUT,K,IPROMP)
   96 CONTINUE
      DO 98 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,520,1,1,INT,XJ(K),CHARAC,IOUT,K,IPROMP)
   98 CONTINUE
C
C     SMEARED STRINGER PROPERTIES FOLLOW
C     NSTATN = NO. OF MERIDIONAL STATIONS FOR WHICH STRINGER PROPERTIES
C              ARE TO BE READ IN
C     N1 = NO. OF STRINGERS
C     K1 = 1  EXTERNAL STRINGERS
C     K1 = 0  INTERNAL STRINGERS
C     E1 = STRINGER MODULUS
C     U1 = STRINGER POISSON RATIO
C     STIFMD = STRINGER MATERIAL MASS DENSITY
C     T1 = STRINGER THICKNESS
C     H1 = STRINGER HEIGHT
C     XS = DISTANCE FROM NEUTRAL SURFACE OF STRINGER TO CLOSEST SHELL
C              SURFACE.
C     A1 = CROSS-SECTION AREA OF STRINGER
C     XI1 = STRINGER MOMENT OF INERTIA ABOUT ITS CENTROID
C     XJ1 = STRINGER TORSIONAL CONSTANT, J
C
C
      CALL FINDZ(NSTATN,ISTATN,X,I5,C(1,1),S)
      CALL FINDZ(NSTATN,ISTATN,A,I5,C(1,2),S)
      CALL FINDZ(NSTATN,ISTATN,XI,I5,C(1,3),S)
      CALL FINDZ(NSTATN,ISTATN,XJ,I5,C(1,4),S)
C
      GO TO 130
C
  100 CONTINUE
C
C     NON-RECTANGULAR STRINGER CROSS SECTIONS ARE MERIDIONALLY CONSTANT.
C
      CALL DATUM(IFILE2,523,1,2,INT,XS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,524,1,1,INT,A1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,525,1,2,INT,XI1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,526,1,1,INT,XJ1,CHARAC,IOUT,0,1)
C
130   CONTINUE
C
C
C     SMEARED RING PROPERTIES
C
C
C     K2 = 0  INTERNAL RINGS
C     K2 = 1  EXTERNAL RINGS
C     E2 =  RING MODULUS
C     U2 = RING POISSON RATIO
C     RGMD =  RING MASS DENSITY
C     D2 =  SPACING BETWEEN RINGS
C     T2 =  RING THICKNESS
C     H2 =  RING HEIGHT
C     NRINGS = NO. OF MERIDIONAL STATIONS FOR WHICH RING PROPERTIES
C              ARE READ IN
C     XR =  DISTANCE FROM NEUTRAL SURFACE OF RING TO CLOSEST SHELL
C              SURFACE
C     A2 =  RING CROSS-SECTION AREA
C     XI2 = RING MOMENT OF INERTIA ABOUT CENTROID
C     XJ2 = RING TORSION CONSTANT, J
C
      CALL DATUM(IFILE2,530,1,1,INT,REALL,ANSWER,IOUT,0,1)
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 190
C
      CALL DATUM(IFILE2,531,1,2,K2,REALL,CHARAC,IOUT,0,1)
      IF (K2.NE.0.AND.K2.NE.1) THEN
        WRITE(IFILE4,*)' K2 NOT IN PERMISSIBLE RANGE 0 TO 1'
        CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,532,1,1,INT,E2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,533,1,1,INT,U2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,534,1,1,INT,RGMD,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,535,1,1,INT,REALL,ANSCON,IOUT,0,1)
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 135
C
C    RING CROSS SECTION VARIES IN THE MERIDIONAL DIRECTION..
C
      IVAR2 = 1
      CALL DATUM(IFILE2,536,1,2,NSTATN,REALL,CHARAC,IOUT,0,1)
      IF (NSTATN.LT.2.OR.NSTATN.GT.20) THEN
        WRITE(IFILE4,*)' NSTATN NOT IN PERMISSIBLE RANGE 2 TO 20'
        CALL ERREX
      ENDIF
      IPRM(2) = 537
      CALL STA(ISTATN,ZAXIAL,RAD,RADD,S,NSTATN,I5)
  135 CONTINUE
      CALL DATUM(IFILE2,540,1,1,INT,REALL,ANSREC,IOUT,0,1)
      IF (ANSL1('N',ANSREC,INFILE)) GO TO 150
C
C   RING CROSS SECTIONS ARE RECTANGULAR...
C
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 140
C
C   RECTANGULAR CROSS SECTION OF STRINGER VARIES ALONG THE MERIDIAN..
C
      DO 136 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,541,1,1,INT,D(K),CHARAC,IOUT,K,IPROMP)
  136 CONTINUE
      DO 137 K= 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,542,1,1,INT,T(K),CHARAC,IOUT,K,IPROMP)
  137 CONTINUE
      DO 138 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,543,1,1,INT,H(K),CHARAC,IOUT,K,IPROMP)
  138 CONTINUE
C
      CALL FINDZ(NSTATN,ISTATN,D,I5,C(1,5),S)
      CALL FINDZ(NSTATN,ISTATN,T,I5,C(1,6),S)
      CALL FINDZ(NSTATN,ISTATN,H,I5,C(1,7),S)
      GO TO 190
C
  140 CONTINUE
C
C   RECTANGULAR CROSS SECTION IS CONSTANT ALONG THE MERIDIAN...
C
      CALL DATUM(IFILE2,549,1,1,INT,D2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,550,1,1,INT,T2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,551,1,1,INT,H2,CHARAC,IOUT,0,1)
C BEG MAR 2005
      PK2(ISEGMT) = K2
      PE2(ISEGMT) = E2
      PH2(ISEGMT) = H2
C END MAR 2005
      GO TO 190
C
C
  150 CONTINUE
      IRECT2 = 0
C
C   RING CROSS SECTIONS ARE NOT RECTANGULAR...
C
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 170
C
C   RING CROSS SECTION VARIES ALONG THE MERIDIAN...
C
      DO 152 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,544,1,2,INT,X(K),CHARAC,IOUT,K,IPROMP)
  152 CONTINUE
      DO 154 K = 1,NSTATN
      IPROMP =1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,545,1,1,INT,D(K),CHARAC,IOUT,K,IPROMP)
  154 CONTINUE
      DO 156 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,546,1,1,INT,A(K),CHARAC,IOUT,K,IPROMP)
  156 CONTINUE
      DO 158 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,547,1,2,INT,XI(K),CHARAC,IOUT,K,IPROMP)
  158 CONTINUE
      DO 160 K = 1,NSTATN
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,548,1,1,INT,XJ(K),CHARAC,IOUT,K,IPROMP)
  160 CONTINUE
C
      CALL FINDZ(NSTATN,ISTATN,X,I5,C(1,5),S)
      CALL FINDZ(NSTATN,ISTATN,D,I5,C(1,6),S)
      CALL FINDZ(NSTATN,ISTATN,A,I5,C(1,7),S)
      CALL FINDZ(NSTATN,ISTATN,XI,I5,C(1,8),S)
      CALL FINDZ(NSTATN,ISTATN,XJ,I5,C(1,9),S)
      GO TO 190
  170 CONTINUE
C
C     NON-RECTANGULAR RING CROSS SECTIONS ARE MERIDIONALLY CONSTANT.
C
      CALL DATUM(IFILE2,552,1,2,INT,XR,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,553,1,1,INT,D2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,555,1,1,INT,A2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,556,1,2,INT,XI2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,557,1,1,INT,XJ2,CHARAC,IOUT,0,1)
C
190   CONTINUE
      IF (K1.EQ.1) GO TO 210
C BEG SEP 2005
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         WRITE (IFILE4,200)N1
200      FORMAT(/, I10,' INTERNAL STRINGERS') 
      ELSE
         WRITE (IFILE4,202)
202      FORMAT(/,' INTERNAL ISOGRID STIFFENING')
      ENDIF
      GO TO 230
210   CONTINUE
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         WRITE (IFILE4,220)N1
220      FORMAT(/, I10,' EXTERNAL STRINGERS')
      ELSE
         WRITE (IFILE4,222)
222      FORMAT(/,' EXTERNAL ISOGRID STIFFENING')
      ENDIF
230   CONTINUE
      IF (K2.EQ.1) GO TO 250
C END SEP 2005
      WRITE (IFILE4,240)
240   FORMAT(/,' INTERNAL RINGS')
      GO TO 270
250   WRITE (IFILE4,260)
260   FORMAT(/,' EXTERNAL RINGS')
270   WRITE (IFILE4,280)E1,U1,STIFMD
280   FORMAT(/,' STRINGER PROPERTIES-MODULUS=',1PE13.5,/,
     1' POISSON,S RATIO=',1PE13.5,',  MASS DENSITY=',1PE13.5)
      IF (IRECT1.EQ.0) GO TO 350
      WRITE (IFILE4,290)
290   FORMAT(/,' STRINGERS OF RECTANGULAR CROSS-SECTION')
      IF (IVAR1.NE.0) GO TO 310
      WRITE (IFILE4,300)T1,H1
300   FORMAT(/,' STRINGER THICKNESS, T1=',1PE13.5,', STRINGER HEIGHT,',
     1' H1=',1PE13.5)
      GO TO 430
C BEG DEC 2005
310   WRITE (IFILE4,320) ISEG
320   FORMAT(/,' RECTANGULAR STRINGERS WITH THICKNESS AND HEIGHT',
     1' VARIABLE ALONG MERIDIAN, SEG.',I3)
      WRITE(IFILE4,'(A)')
     1' MESH PT.    STATION,S     THICKNESS       HEIGHT        ANGLE'
      DO 330 KK=1,I5
      WRITE(IFILE4,'(I5,1P,4E15.4)')
     1  KK,S(KK),C(KK,1),C(KK,2),PHORIG(KK)
330   CONTINUE
C  Store thickness and height of rectangular stringers for
C  later use in user-subroutine WALL for STAGS models.
      CALL GASP(C(1,1),I5,1,ITHSTF(ISEG))
      CALL GASP(C(1,2),I5,1,IHISTF(ISEG))
C END DEC 2005
      GO TO 430
350   WRITE (IFILE4,360)
360   FORMAT(/,' STRINGERS OF ARBITRARY CROSS-SECTION')
      IF (IVAR1.NE.0) GO TO 380
      WRITE (IFILE4,370)XS,A1,XI1,XJ1
C23456789012345678901234567890123456789012345678901234567890123456789012
370   FORMAT(/,' DISTANCE,XS, FROM NEUTRAL AXIS OF STRINGER TO CLOSEST',
     1' SHELL SURFACE=',1PE13.5,/,' STRINGER AREA=',1PE13.5,
     1' MOMENT OF INERTIA=',1PE13.5,', TORSION CONSTANT,J=',1PE13.5)
      GO TO 430
380   WRITE (IFILE4,390)
390   FORMAT(/,' ARBITRARY STRINGERS WITH GEOMETRICAL PROPERTIES',
     1' VARIABLE ALONG MERIDIAN',/)
      WRITE (IFILE4,400)
400   FORMAT(' MESH PT.   STATION   HEIGHT(XS)  AREA(A1)',
     1'   MOM. INERTIA  TORSION CONSTANT',/) 
      DO 410 KK=1,I5
410   WRITE (IFILE4,420)KK,S(KK),C(KK,1),C(KK,2),C(KK,3),C(KK,4)
420   FORMAT(I6,1P5E15.5) 
430   WRITE (IFILE4,440)E2,U2,RGMD
440   FORMAT(/,' RING PROPERTIES- MODULUS=',1PE13.5,
     1',  POISSON,S RATIO=',1PE13.5,/,' MASS DENSITY=',1PE13.5) 
      IF (IRECT2.EQ.0) GO TO 510
      WRITE (IFILE4,450)
450   FORMAT(/,' RINGS OF RECTANGULAR CROSS-SECTION') 
      IF (IVAR2.NE.0) GO TO 470
      WRITE (IFILE4,460)D2,T2,H2
460   FORMAT(/,' RING SPACING,D2=',1PE13.5,',  RING THICKNESS,T2=',
     11PE13.5,/,' RING HEIGHT,H2=',1PE13.5)
      GO TO 590
470   WRITE (IFILE4,480)
480   FORMAT(/,' RECTANGULAR RINGS WITH SPACING, THICKNESS, AND',
     1' HEIGHT VARIABLE ALONG MERIDIAN',/)
      DO 490 KK=1,I5
490   WRITE (IFILE4,500)KK,S(KK),C(KK,5),C(KK,6),C(KK,7)
500   FORMAT(' MESH PT.= ',I3,', STATION,S=',1PE13.5,', SPACING=',
     11PE13.5,/,' THICKNESS=',1PE13.5,',  HEIGHT=',1PE13.5)
      GO TO 590
510   WRITE (IFILE4,520)
520   FORMAT(/,' RINGS OF ARBITRARY CROSS-SECTION') 
      IF (IVAR2.NE.0) GO TO 540
      WRITE (IFILE4,530)XR,D2,A2,XI2,XJ2
530   FORMAT(/,' DISTANCE,XR, FROM NEUTRAL AXIS OF RING TO CLOSEST',
     1' SHELL SURFACE=',1PE13.5,/,' RING SPACING=',1PE13.5,
     1',  RING AREA=',1PE13.5,/,
     1' MOMENT OF INERTIA=',1PE13.5,',  TORSION CONSTANT,J=',1PE13.5)
      GO TO 590
540   WRITE (IFILE4,550)
550   FORMAT(/,' ARBITRARY RINGS WITH GEOMETRICAL PROPERTIES VARIABLE',
     1' ALONG MERIDIAN',/)
      WRITE (IFILE4,560)
560   FORMAT(' MESH PT.   STATION   HEIGHT(XR)   SPACING(D2)   ',
     1'AREA(A2)  MOM. INERTIA  TORSION CONSTANT',/)
      DO 570 KK=1,I5
570   WRITE(IFILE4,580)KK,S(KK),C(KK,5),C(KK,6),C(KK,7),C(KK,8),C(KK,9)
580   FORMAT(I6,1P6E15.5)
590   CONTINUE
      AN1 = N1
      IF (AN1.EQ.0.0) AN1 = 1.0
      IF (D2.EQ.0.0) D2 = 1.0
C BEG SEP 2005
600   CONTINUE
C BEG APR 2009
      IF (ISOGRD(ISEGMT).EQ.0) THEN
C BEG JAN 2010
C        IF (IPRISM.EQ.0) D1 = 2.*3.1415927*RAD(I)/AN1
C        IF (IPRISM.EQ.1) D1 = AXIALL/(AN1 - 1.)
         D1 = 2.*3.1415927*RAD(I)/AN1
C END JAN 2010
      ENDIF
C END APR 2009
      IF (ISOGRD(ISEGMT).EQ.1) D1 = SPACNG
C END SEP 2005
      IF (IRECT1.EQ.0) GO TO 640
      IF (IVAR1.EQ.0) GO TO 610
      T1 = C(I,1)
      H1 = C(I,2)
610   A1 = H1*T1
      XI1 = T1*H1**3/12.
      XS = H1/2.
      IF (T1-H1) 620,620,630
620   XJ1 = T1**3*H1/3.
      GO TO 650
630   XJ1 = H1**3*T1/3.
      GO TO 650
640   IF (IVAR1.EQ.0) GO TO 650
      XS = C(I,1)
      A1 = C(I,2)
      XI1 = C(I,3)
      XJ1 = C(I,4)
650   IF (IRECT2.EQ.0) GO TO 690
      IF (IVAR2.EQ.0) GO TO 660
      D2 = C(I,5)
      T2 = C(I,6)
      H2 = C(I,7)
660   A2 = T2*H2
      XI2 = T2*H2**3/12.
      XR = H2/2.
      IF (T2-H2) 670,670,680
670   XJ2 = T2**3*H2/3.
      GO TO 700
680   XJ2 = H2**3*T2/3.
      GO TO 700
690   IF (IVAR2.EQ.0) GO TO 700
      XR = C(I,5)
      D2 = C(I,6)
      A2 = C(I,7)
      XI2 = C(I,8)
      XJ2 = C(I,9)
700   CONTINUE
      IF (K1.NE.0) GO TO 710
      X1 = XS + Z
      GO TO 720
710   X1 = -XS - TD + Z
720   IF (K2.NE.0) GO TO 730
      X2 = XR + Z
      GO TO 740
730   X2= -XR - TD + Z
740   CONTINUE
      IF (D1.EQ.0.0) D1 = 1.0
C BEG SEP 2005
C
      IF (I.EQ.1) THEN
         IRECT(1,ISEGMT) = IRECT1
         IRECT(2,ISEGMT) = IRECT2
         INTEXT(1,ISEGMT) = K1
         INTEXT(2,ISEGMT) = K2
         IF (E1.GT.0.0) ISTSMR(1,ISEGMT) = 1
         IF (E2.GT.0.0) ISTSMR(2,ISEGMT) = 1
      ENDIF
C
      STFPRP(1,1,I) = T1
      STFPRP(2,1,I) = H1
      STFPRP(3,1,I) = D1
      STFPRP(4,1,I) = E1
C
      STFPRP(1,2,I) = T2
      STFPRP(2,2,I) = H2
      STFPRP(3,2,I) = D2
      STFPRP(4,2,I) = E2
C
      CSKIN(1,1,I) = C11
      CSKIN(1,2,I) = C12
      CSKIN(1,3,I) = C13
      CSKIN(1,4,I) = C14
      CSKIN(1,5,I) = C15
      CSKIN(1,6,I) = C16
      CSKIN(2,1,I) = C12
      CSKIN(2,2,I) = C22
      CSKIN(2,3,I) = C23
      CSKIN(2,4,I) = C24
      CSKIN(2,5,I) = C25
      CSKIN(2,6,I) = C26
      CSKIN(3,1,I) = C13
      CSKIN(3,2,I) = C23
      CSKIN(3,3,I) = C33
      CSKIN(3,4,I) = C34
      CSKIN(3,5,I) = C35
      CSKIN(3,6,I) = C36
      CSKIN(4,1,I) = C14
      CSKIN(4,2,I) = C24
      CSKIN(4,3,I) = C34
      CSKIN(4,4,I) = C44
      CSKIN(4,5,I) = C45
      CSKIN(4,6,I) = C46
      CSKIN(5,1,I) = C15
      CSKIN(5,2,I) = C25
      CSKIN(5,3,I) = C35
      CSKIN(5,4,I) = C45
      CSKIN(5,5,I) = C55
      CSKIN(5,6,I) = C56
      CSKIN(6,1,I) = C16
      CSKIN(6,2,I) = C26
      CSKIN(6,3,I) = C36
      CSKIN(6,4,I) = C46
      CSKIN(6,5,I) = C56
      CSKIN(6,6,I) = C66
C
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         C11=C11+E1*A1/D1
         C14=C14+(X1*E1*A1/D1)
         C22=C22+E2*A2/D2
         C25=C25+(X2*E2*A2/D2)
         C44=C44+(E1*XI1/D1+X1**2*E1*A1/D1)
         C55=C55+(E2*XI2/D2+X2**2*E2*A2/D2)
         C66=C66+0.25*(E1*XJ1/(2.*(1.+U1)*D1)+E2*XJ2/(2.*(1.+U2)*D2))
         SMPA = SMPA + STIFMD*A1/D1 + RGMD*A2/D2
      ELSE
         EEFF = E1*T1/D1
C BEG FEB 2008
C        FNUEFF = 0.3
         FNUEFF = 0.3333
C END FEB 2008
         FNUDEN = 1. - FNUEFF**2
         C11ISO = EEFF*H1/FNUDEN
         C12ISO = FNUEFF*C11ISO
         C22ISO = C11ISO
         C33ISO = EEFF*H1/(2.*(1.+FNUEFF))
         C44ISO = EEFF*H1**3/(12.*FNUDEN)
         C55ISO = C44ISO
         C45ISO = FNUEFF*C44ISO
         C66ISO = C33ISO*H1**2/12.
         SMPA = SMPA + 3.0*STIFMD*A1/D1 + RGMD*A2/D2
         IF (K1.EQ.1) DSHIFT = -(H1/2. + TD - Z)
         IF (K1.EQ.0) DSHIFT = H1/2. + Z
C        IF (I.EQ.1) WRITE (IFILE4,'(A,I4,1P3E12.4)')
C    1 ' in CFB1: K1, TD, Z, DSHIFT=',K1, TD, Z, DSHIFT
         C11 = C11 + C11ISO
         C22 = C22 + C22ISO
         C12 = C12 + C12ISO
         C33 = C33 + C33ISO
         C14 = C14 + DSHIFT*C11ISO
         C15 = C15 + DSHIFT*C12ISO
         C24 = C24 + DSHIFT*C12ISO
         C25 = C25 + DSHIFT*C22ISO
         C36 = C36 - DSHIFT*C33ISO
         C44 = C44 + C44ISO + DSHIFT*DSHIFT*C11ISO
         C45 = C45 + C45ISO + DSHIFT*DSHIFT*C12ISO
         C55 = C55 + C55ISO + DSHIFT*DSHIFT*C22ISO
         C66 = C66 + C66ISO + DSHIFT*DSHIFT*C33ISO
       ENDIF
C END SEP 2005
      RETURN
      END
C
C
C
C=DECK      FINDTH
      SUBROUTINE FINDTH(Z1,Z2,T1,T2,T3,NUM,FOUT)
C
C     INTEGRAL OF TEMPERATURE THRU SHELL THICKNESS CALCULATED FROM
C     SIMPSON,S RULE. THIS SUBROUTINE CALLED FROM CFB2 AND CFB5, AND
C     APPLIES FOR SHELLS WHOSE WALL PROPERTIES ARE INDEPENDENT OF THE
C     TEMPERATURE.
C
      IC = NUM - 1
      T = Z2 - Z1
      DZ = T/FLOAT(IC)
      FOUT = 0.0
      Z = Z1
      DO 10 I=1,IC,2
      ZDZ = Z + DZ
      ZDZ2 = Z + 2.*DZ
C
C     TEMPERATURE PROFILE THRU THICKNESS DETERMINED BY FUNCT
C
      F1 =  FUNCT(T1,T2,T3,Z)
      F2 =  FUNCT(T1,T2,T3,ZDZ)
      F3 =  FUNCT(T1,T2,T3,ZDZ2)
      Z = ZDZ2
      FOUT = FOUT + (F1 + 4.*F2 + F3)*DZ/3.
10    CONTINUE
      RETURN
      END
C
C
C
C=DECK      FUNCT
C./      ADD   NAME=FUNCT
      FUNCTION FUNCT(T1,T2,T3,ZETA)
C
C     CALLED FROM FINDTH, WHICH IS CALLED FROM CFB2,CFB5,.ALSO CALLED
C     FROM STIFF, WHICH IS CALLED FROM CFB8. GIVEN T1,T2,T3 AS INPUT
C     VARIABLES, FUNCT GIVES THE TEMPERATURE DISTRIBUTION THRU THE
C     THICKNESS OF THE SHELL WALL.
C
      COMMON/TEMGRD/NTGRAD
      COMMON/ZGRAD/NTSGD
      FUNCT1(T1,T2,T3,ZETA) = T1 + T2*ZETA + T3*ZETA**2
      FUNCT2(T1,T2,T3,ZETA) = T1 + T2*ZETA**T3
      FUNCT3(T1,T2,T3,ZETA) = T1 + T2*EXP(ZETA*T3)
      GO TO (10,20,30),NTGRAD
10    FUNCT = FUNCT1(T1,T2,T3,ZETA)
      GO TO 40
20    FUNCT = FUNCT2(T1,T2,T3,ZETA)
      GO TO 40
30    FUNCT = FUNCT3(T1,T2,T3,ZETA)
40    IF (NTSGD.EQ.0) RETURN
      IF (NTSGD.EQ.1) FUNCT = FUNCT*ZETA
      IF (NTSGD.EQ.2) FUNCT = FUNCT*ZETA*ZETA
      RETURN
      END
C
C
C
C=DECK      CFB2
C BEG DEC 2005
      SUBROUTINE CFB2(THICK,II,K,RAD,NWALL,ZREF,I5,S,THERM,T1,T2,T3
     1,J,TIO,C,RADD,CUR1,CUR2,PHORIG)
C END DEC 2005
C
C     SAME TRACE AS CFB1--WALLCF,READIT,MAIN.
C     CALCULATES CIJ FOR MONOCOQUE SHELL WITH VARIABLE THICKNESS.
C     THERMAL STRESS RESULTANTS NT AND MT ARE CALCULATED
C     MATERIAL PROPERTIES ARE ASSUMED TO BE TEMPERATURE-INDEPENDENT
C
C BEG MAY 2009
      COMMON/CSKINX/CSKIN(6,6,100)
C END MAY 2009
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/ZGRAD/NTSGD
      COMMON/WALPRP/EA(295),EB(295),GAB(295),UAB(295),
     1              ALPH1(295),ALPH2(295)
C BEG DEC 2005
      DIMENSION PHORIG(*)
      COMMON/IPHIHI/IPHIOL(295),IARCLT(295),IHISTF(295),ITHSTF(295)
C END DEC 2005
      DIMENSION TIO(I5,2),C(I5,14),RADD(100),CUR1(100),CUR2(100)
      DIMENSION THICK(I5),ZREF(I5),RAD(100),S(100),THERM(I5,4)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/OUTP/NPRT
      COMMON/AXIALZ/ZAX(100)
      COMMON/SFLAG/MONOQ
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
10    FORMAT(10I6)
20    FORMAT (6E12.8) 
C23456789012345678901234567890123456789012345678901234567890123456789012
30    FORMAT (/,' MODULUS OF ELASTICITY= ',E12.5,3X,', POISSON RATIO=',
     1E12.5,3X,/,' SHELL DENSITY = ',E12.5,3X,', THERMAL EXP COEF.= ',
     1E12.5,/)
40    FORMAT(/,' ANALYSIS IS FOR A MONOCOQUE SHELL')
      IF (J.GT.1) GO TO 170
      IF (K.NE.1) GO TO 140
      WRITE (IFILE4,40)
C
C     E = MODULUS
C     U = POISSON,S RATIO
C     SM = WALL MATERIAL MASS DENSITY
C     ALPHA = THERMAL EXPANSION COEFFICIENT
C     ANRS = 1 SMEARED STRINGERS AND RINGS TO BE ADDED
C     ANRS = 0 NO SMEARED STRINGERS AND RINGS
C     SUR = 0 REFERENCE SURFACE IS MIDDLE SURFACE
C     SUR = 1 REFERENCE SURFACE IS OUTER SURFACE
C     SUR =-1 REFERENCE SURFACE IS LOCATED AN ARBITRARY DISTANCE FROM
C             THE WALL INNER SURFACE
C
C
      CALL DATUM(IFILE2,370,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,371,1,1,INT,E,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,372,1,1,INT,U,CHARAC,IOUT,0,1)
      IF (U.GT.1) THEN
         WRITE(IFILE4,*)' BAD POISSON RATIO, nu = ', U
         CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,373,1,1,INT,SM,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,374,1,1,INT,ALPHA,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,375,1,2,INT,ANRS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,376,1,2,INT,SUR,CHARAC,IOUT,0,1)
C
      EA(II) = E
      EB(II) = E
      UAB(II)= U
      GAB(II)= .5*E/(1.+U)
      ALPH1(II) = ALPHA
      ALPH2(II) = ALPHA
C
      NSUR = SUR
      IF (NSUR.EQ.0) GO TO 50
      IF (NSUR-1) 90,70,90
50    DO 60 KK=1,I5
60    THICK(KK) = 2.*ZREF(KK)
      GO TO 100
70    DO 80 KK=1,I5
80    THICK(KK) = ZREF(KK)
      GO TO 100
   90 CONTINUE
      CALL DATUM(IFILE2,377,1,2,NTYPET,REALL,CHARAC,IOUT,0,1)
      IF (NTYPET.NE.1.AND.NTYPET.NE.3) THEN
         WRITE(IFILE4,*)' NTYPET SHOULD BE EITHER  1  or  3 '
         CALL ERREX
      ENDIF
      IPRM(1) = 378
      IPRM(2) = 379
      CALL GETZ(NTYPET,I5,S,THICK,RAD,RADD,ZAX)
100   CONTINUE
      CALL GASP(THICK,I5,1,ITHK(II))
      WRITE (IFILE4,30)E,U,SM,ALPHA
      IF (NSUR.EQ.1) GO TO 140
      REWIND IFILE3
      CALL DATUM(IFILE3,606,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 140
C BEG DEC 2005
      WRITE (IFILE4,110) II
110   FORMAT(/,' MESH POINT   STATION   REF. SURFACE    THICKNESS',
     1'   ANGLE(perfect shell), Segment no.',I3,/)
      DO 120 KK=1,I5
120   WRITE (IFILE4,130)KK,S(KK),ZREF(KK),THICK(KK),PHORIG(KK)
130   FORMAT(I8,1P4E14.5)
C END DEC 2005
140   CONTINUE
C BEG DEC 2005
C  Store angle, PHORIG and arc length S (X-coordinates) for
C  later use in user-subroutine WALL for STAGS models with thickness
C  that varies meridionally.
      CALL GASP(PHORIG,I5,1,IPHIOL(II))
      CALL GASP(S,I5,1,IARCLT(II))
C END DEC 2005
      Z = ZREF(K)
      T = THICK(K  )
150   FORMAT(' STATION S =',E17.8,', Z =',E17.8,',  T =',E17.8)
160   CONTINUE
      E11 = E/(1.-U*U)
      E22 = E11
      E12 = U*E11
      TZ = T-Z
      TTZ = T**2/3. - T*Z + Z**2
      FMUL = 0.0
      FK1 = FMUL*CUR1(K)
      FK2 = FMUL*CUR2(K)
C
C     INTEGRATION THRU THICKNESS FOR MERIDIONAL FACES OF ELEMENT
C
      FK1S = FK1
      IF (-FK1*Z.LE.-1.0) FK1 = .9/Z
      IF( FK1*TZ.LE.-1.0) FK1 = -.9/TZ
      CALL INGRAT(-Z,TZ ,FK1,FK2,DZ,ZDZ,Z2DZ)
      FK1 = FK1S
      C11 = E11*DZ
      C12 = E12*T
      C14 = -E11*ZDZ
      C15 = -E12*(TZ**2 -Z**2)/2.
      C24 = C15
      C44 = E11*Z2DZ
      C45 = E12*(TZ**3+Z**3)/3.
C
C     INTEGRATION FOR CIRCUMFERENTIAL FACES OF ELEMENT
C
      FK2S = FK2
      IF (-FK2*Z.LE.-1.0) FK2 = .9/Z
      IF( FK2*TZ.LE.-1.0) FK2 = -.9/TZ
      CALL INGRAT(-Z,TZ,FK2,FK1,DZ,ZDZ,Z2DZ)
      FK2 = FK2S
      C22 = E22*DZ
      C25 = - E22*ZDZ
      C55 = E22*Z2DZ
      C33 = E*T/(2.*(1.+U))
      C36 = C33*(0.5*T-Z)
      C66 = C33*TTZ
      SMPA = SM*T
C     THERMAL STRESS RESULTANTS CALCULATED FOR KTH POINT IN IITH SEGMENT
  170 CONTINUE
      NUM = 25
      Z1 = - ZREF(K)
      Z2 = - ZREF(K) + THICK(K)
      NTSGD = 0
C
C     INNER AND OUTER SURFACE TEMPERATURE RISES ABOVE AMBIENT
      TIO(K,1) = FUNCT(T1,T2,T3,Z1)
      TIO(K,2) = FUNCT(T1,T2,T3,Z2)
      CALL FINDTH(Z1,Z2,T1,T2,T3,NUM,TN1)
      NTSGD = 1
      CALL FINDTH(Z1,Z2,T1,T2,T3,NUM,TM1)
C
C     THERMAL STRESS RESULTANTS AND THERMAL MOMENT RESULTANTS
      THERM(K,1) = - TN1*ALPHA*E/(1.-U)
      THERM(K,2) = THERM(K,1)
      THERM(K,3) = TM1*ALPHA*E/(1.-U)
      THERM(K,4) = THERM(K,3)
      THERM(K,1) = THERM(K,1)  -FK2*THERM(K,3)
      THERM(K,2) = THERM(K,2)  -FK1*THERM(K,4)
      NTSGD  = 2
      CALL FINDTH(Z1,Z2,T1,T2,T3,NUM,TL1)
      THERM(K,3) = (TM1 + TL1*FK2)*ALPHA*E/(1.-U)
      THERM(K,4) = (TM1 + TL1*FK1)*ALPHA*E/(1.-U)
      IF (J.GT.1) GO TO 190
180   NRS = ANRS
C BEG MAY 2009
      IF (NRS.EQ.0) THEN
         CSKIN(1,1,K) = C11
         CSKIN(1,2,K) = C12
         CSKIN(1,3,K) = C13
         CSKIN(1,4,K) = C14
         CSKIN(1,5,K) = C15
         CSKIN(1,6,K) = C16
         CSKIN(2,1,K) = C12
         CSKIN(2,2,K) = C22
         CSKIN(2,3,K) = C23
         CSKIN(2,4,K) = C24
         CSKIN(2,5,K) = C25
         CSKIN(2,6,K) = C26
         CSKIN(3,1,K) = C13
         CSKIN(3,2,K) = C23
         CSKIN(3,3,K) = C33
         CSKIN(3,4,K) = C34
         CSKIN(3,5,K) = C35
         CSKIN(3,6,K) = C36
         CSKIN(4,1,K) = C14
         CSKIN(4,2,K) = C24
         CSKIN(4,3,K) = C34
         CSKIN(4,4,K) = C44
         CSKIN(4,5,K) = C45
         CSKIN(4,6,K) = C46
         CSKIN(5,1,K) = C15
         CSKIN(5,2,K) = C25
         CSKIN(5,3,K) = C35
         CSKIN(5,4,K) = C45
         CSKIN(5,5,K) = C55
         CSKIN(5,6,K) = C56
         CSKIN(6,1,K) = C16
         CSKIN(6,2,K) = C26
         CSKIN(6,3,K) = C36
         CSKIN(6,4,K) = C46
         CSKIN(6,5,K) = C56
         CSKIN(6,6,K) = C66
      ENDIF
C END MAY 2009
C
      IF (NRS.EQ.0) RETURN
C
C     CFB1 CALLED IF MONOCOQUE SHELL SEGMENT IS MERIDIONALLY AND/OR
C     CIRCUMFERENTIALLY STIFFENED BY STIFFENERS WHICH CAN BE SMEARED OUT
C     FOR THE PURPOSE  OF ANALYSIS.
C BEG DEC 2005
      CALL CFB1(II,K,RAD,NWALL,Z,T,I5,S,C,RADD,PHORIG)
C END DEC 2005
190   RETURN
      END
C
C
C
C=DECK      CFB3
      SUBROUTINE CFB3(I)
C
C        SUBROUTINE FOR SKEW STIFFENED SHELLS.
C     THIS SUBROUTINE HAS NOT BEEN CAREFULLY CHECKED OUT.
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SRBLOK/TD,Z,ZN,EXA,EXB
      COMMON/SHMASS/SMPA
10    FORMAT(6E12.8)
20    FORMAT (/,' MODULUS OF ELASTICITY=',E15.6,5X,', POISSON RATIO=',
     1E15.8,5X,', SHELL DENSITY =',E15.6,/,' STIFFENER ANGLE=',E15.6,
     2', STIFFENER SPACING=',E15.6,5X,/,' STIFFENER THICKNESS=',
     1E15.8,5X,', STIFFENER HEIGHT=',E15.8)
30    FORMAT (/,' STIFFENERS ARE INTERNAL.')
40    FORMAT (/,' STIFFENERS ARE EXTERNAL.')
50    FORMAT (/,' ANALYSIS IS FOR A SKEW STIFFENED SHELL.') 
C
C
      IF (I.NE.1) GO TO 110
      WRITE(IFILE4,50)
      READ (5,10)E,U,T,SM
      READ (5,10)TH,A,B,H,AK,STFMD
C
C     E=MODULUS OF ELASTICITY OF SKIN
C     U=POISSON'S RATIO OF SKIN
C     T=THICKNESS OF SKIN
C     THS=ANGLE BETWEEN STIFFENERS AND SHELL GENERATOR (DEGREES)
C     A=STIFFENER SPACING ALONG CIRCUMFERENCE
C     B=STIFFENER THICKNESS (NORMAL)
C     H=STIFFENER HEIGHT TO NEAREST WALL SURFACE
C     AK=INDICATOR FOR STIFFENER LOCATION
C            IF 0 ... STIFFENERS INSIDE
C            IF 1 ... STIFFENERS OUTSIDE
C
      WRITE(IFILE4,20)E,U,SM,TH,A,B,H
      IF (AK) 60,60,70
60    WRITE(IFILE4,30)
      GO TO 80
70    WRITE(IFILE4,40)
80    TH=3.1415927*TH/180.
      U2=1.-U*U
      GA=T**2/12.
      UM=2.*B*H*U2/(A*T)
      ETT=B*H**3*U2/(6.*A*T)
      ET=H*B**3*(1.-U)/(1.5*A*T)
      RH=0.5*(H+T)
      IF (AK) 90,90,100
90    RH=-RH
100   S=SIN(TH)
      C=COS(TH)
      ZL=S/C
      S1=C*S**2
      S3=S**3
      S4=C**3
      RM=2.*UM*S1/(1.-U)
      RH1=RH/(1.+RM)
      RH2=RH-RH1
      Z=-RH2+T/2.
      C11=1.+UM*S4
      C12=U+UM*S1
      C14=RH2-UM*RH1*S4
      C15=U*RH2-UM*RH1*S1
      C22=1.+ZL*UM*S3
      C24=C15
      C25=RH2-ZL*UM*RH1*S3
      C33=0.5*(1.-U)+UM*S1
      C44=GA+RH2**2+(UM*RH1**2+ETT)*S4+ET*S1
      C45=U*(GA+RH2**2)+(UM*RH1**2+ETT)*S1-ET*S1
      C55=GA+RH2**2+ZL*(UM*RH1**2+ETT)*S3+ET*S1
      C66=2.*(1.-U)*GA+2.*(1.-U)*RH2**2+4.*(UM*RH1**2+ETT)*S1+
     1ET*(C**2-S**2)**2/C
      FNORM=E*T/(1.0-U*U)
      C11=C11*FNORM
      C12=C12*FNORM
      C14=C14*FNORM
      C15=C15*FNORM
      C22=C22*FNORM
      C24=C24*FNORM
      C25=C25*FNORM
      C33=C33*FNORM
      C44=C44*FNORM
      C45=C45*FNORM
      C55=C55*FNORM
      C66=C66*FNORM
      SMPA = SM*T + STFMD*B*H/(A*C)
110   RETURN
      END
C
C
C
C=DECK      CFB4
C BEG DEC 2005
      SUBROUTINE CFB4(ISEG,IPOINT,RAD,NWALL,Z,I5,S,C,RADD,THERM,
     1 T1,T2,T3,TIO,PHORIG)
C END DEC 2005
C
C  OBTAIN CONSTITUTIVE LAW FOR COMPOSITE WALL WITH LAMINAE AT
C  VARIOUS ANGLES WITH RESPECT TO THE MERIDIONAL COORDINATE.
C
C
C BEG OCT 2011
      COMMON/CONDTX/CONDT,CON1L(90),CON2L(90)
C END OCT 2011
C BEG MAY 2009
      COMMON/CSKINX/CSKIN(6,6,100)
C END MAY 2009
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
C BEG OCT 2004
      COMMON/ZGRAD/NTSGD
C END OCT 2004
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG JUN 2009
      COMMON/LAYER/MATL(90),LTYPE(5500),T(90),ANGLE(90),NLAYER(295)
C END JUN 2009
      COMMON/MATER1/E1(20),E2(20),G(20),FNU(20),DENS(20)
      COMMON/MATERT/ALPHA1(20),ALPHA2(20),CURETP(20),EALLOW(5,20)
      COMMON/JWATCH/JOLD
      COMMON/CMAXS/CMAX
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
C
      DIMENSION CX(6,6),THERMX(6),CNEW(6,6),RAD(*),RADD(*),S(*)
      DIMENSION E1L(99),E2L(99),GL(99),ZETL(99),U12L(99),RHOL(99)
      DIMENSION A1L(99),A2L(99),A1L1(99),A1L2(99),A2L1(99),A2L2(99)
      DIMENSION TL(99),C(I5,14),THERM(I5,4),THMSFT(6),TIO(I5,2)
C
      IF (ISEG.EQ.1.AND.IPOINT.EQ.1) THEN
         JOLD = 0
         CALL MOVER(0,0,MATL,1,90)
      ENDIF
      IF (IPOINT.NE.1) GO TO 100
      CALL INPROP(NLAY,LTYPE,T,ANGLE,MATL,E1,E2,G,FNU,
     1           ALPHA1,ALPHA2,DENS,NRS,CURETP,EALLOW,JOLD)
C
      CALL NODOUT(NWALL,ISEG,I5,NODES,NODALL,NODTOT)
C
      TD = 0.
      DO 30 J = 1,NLAY
C
      JJ = J + JOLD
      K = LTYPE(JJ)
      M = MATL(K)
C
      E1L(J) = E1(M)
      E2L(J) = E2(M)
       GL(J) =  G(M)
      U12L(J)= FNU(M)
      RHOL(J)= DENS(M)
       TL(J) =  T(K)
       TD    = TD + TL(J)
      ZETL(J)= ANGLE(K)
      A1L(J) = ALPHA1(M)*(-CURETP(M))
      A2L(J) = ALPHA2(M)*(-CURETP(M))
      A1L1(J)= A1L(J)
      A1L2(J)= A1L(J)
      A2L1(J)= A2L(J)
      A2L2(J)= A2L(J)
   30 CONTINUE
C
      JOLD = JOLD + NLAY
      NLAYER(ISEG) = NLAY
  100 CONTINUE
      Z1 = -Z
      Z2 = Z1 + TD
C BEG OCT 2004
      NTSGD = 0
C END OCT 2004
      TIO(IPOINT,1) = FUNCT(T1,T2,T3,Z1)
      TIO(IPOINT,2) = FUNCT(T1,T2,T3,Z2)
      BI = 0.5*TL(1)
      TEMP1 = TIO(IPOINT,1)
      DT = TIO(IPOINT,2) - TEMP1
      DO 120 J = 1,NLAY
         TEMP = TEMP1 + DT*BI/TD
         TEMPL= TEMP1 + DT*(BI-0.5*TL(J))/TD
         TEMPR= TEMP1 + DT*(BI+0.5*TL(J))/TD
         JJ = J + JOLD - NLAY
         K = LTYPE(JJ)
         M = MATL(K)
         A1L(J) = ALPHA1(M)*(-CURETP(M)+TEMP)
         A2L(J) = ALPHA2(M)*(-CURETP(M)+TEMP)
         A1L1(J)= ALPHA1(M)*(-CURETP(M)+TEMPL)
         A2L1(J)= ALPHA2(M)*(-CURETP(M)+TEMPL)
         A1L2(J)= ALPHA1(M)*(-CURETP(M)+TEMPR)
         A2L2(J)= ALPHA2(M)*(-CURETP(M)+TEMPR)
         IF (J.LT.NLAY) BI = BI + 0.5*(TL(J)+TL(J+1))
  120 CONTINUE
      ZREF = 0.
C BEG OCT 2011
      CALL CFBL(NLAY,ZREF,E1L,E2L,GL,U12L,RHOL,TL,ZETL,CX,
     1     A1L,A2L,THERMX,TMS,TD,A1L1,A1L2,A2L1,A2L2,
     1     CONDT,CON1L,CON2L,4)
C END OCT 2011
      DZREF = Z - TD/2.
      CALL CSHIFT(CX,DZREF,CNEW,THERMX,THMSFT)
      SMPA = TMS
C
      C11 = CNEW(1,1)
      C12 = CNEW(1,2)
      C13 = 0.
      C14 = CNEW(1,4)
      C15 = CNEW(1,5)
      C16 = 0.
      C22 = CNEW(2,2)
      C23 = 0.
      C24 = CNEW(2,4)
      C25 = CNEW(2,5)
      C26 = 0.
      C33 = CNEW(3,3)
      C34 = 0.
      C35 = 0.
      C36 = CNEW(3,6)
      C44 = CNEW(4,4)
      C45 = CNEW(4,5)
      C46 = 0.
      C55 = CNEW(5,5)
      C56 = 0.
      C66 = CNEW(6,6)
C
      THERM(IPOINT,1) = -THERMX(1)
      THERM(IPOINT,2) = -THERMX(2)
      THERM(IPOINT,3) =  THMSFT(4)
      THERM(IPOINT,4) =  THMSFT(5)
C
C BEG MAY 2009
      IF (NRS.EQ.0) THEN
         CSKIN(1,1,IPOINT) = C11
         CSKIN(1,2,IPOINT) = C12
         CSKIN(1,3,IPOINT) = C13
         CSKIN(1,4,IPOINT) = C14
         CSKIN(1,5,IPOINT) = C15
         CSKIN(1,6,IPOINT) = C16
         CSKIN(2,1,IPOINT) = C12
         CSKIN(2,2,IPOINT) = C22
         CSKIN(2,3,IPOINT) = C23
         CSKIN(2,4,IPOINT) = C24
         CSKIN(2,5,IPOINT) = C25
         CSKIN(2,6,IPOINT) = C26
         CSKIN(3,1,IPOINT) = C13
         CSKIN(3,2,IPOINT) = C23
         CSKIN(3,3,IPOINT) = C33
         CSKIN(3,4,IPOINT) = C34
         CSKIN(3,5,IPOINT) = C35
         CSKIN(3,6,IPOINT) = C36
         CSKIN(4,1,IPOINT) = C14
         CSKIN(4,2,IPOINT) = C24
         CSKIN(4,3,IPOINT) = C34
         CSKIN(4,4,IPOINT) = C44
         CSKIN(4,5,IPOINT) = C45
         CSKIN(4,6,IPOINT) = C46
         CSKIN(5,1,IPOINT) = C15
         CSKIN(5,2,IPOINT) = C25
         CSKIN(5,3,IPOINT) = C35
         CSKIN(5,4,IPOINT) = C45
         CSKIN(5,5,IPOINT) = C55
         CSKIN(5,6,IPOINT) = C56
         CSKIN(6,1,IPOINT) = C16
         CSKIN(6,2,IPOINT) = C26
         CSKIN(6,3,IPOINT) = C36
         CSKIN(6,4,IPOINT) = C46
         CSKIN(6,5,IPOINT) = C56
         CSKIN(6,6,IPOINT) = C66
      ENDIF
C END MAY 2009
C BEG DEC 2005
      IF (NRS.NE.0) CALL CFB1(ISEG,IPOINT,RAD,NWALL,Z,TD,I5,S,C,
     1                        RADD,PHORIG)
C END DEC 2005
C      
      RETURN
      END
C
C
C
C=DECK      INPROP
      SUBROUTINE INPROP(NLAY,LTYPE,T,ANGLE,MATL,E1,E2,G,FNU,
     1            ALPHA1,ALPHA2,DENS,NRS,CURETP,EALLOW,JOLD)
C
C  PURPOSE IS TO READ IN PROPERTIES OF LAYERED WALL WITH LAMINAE
C  AT VARIOUS WINDING ANGLES.
C
      DIMENSION LTYPE(*),T(*),ANGLE(*),MATL(*),E1(*),E2(*),G(*)
      DIMENSION FNU(*),ALPHA1(*),ALPHA2(*),DENS(*),CURETP(*)
      DIMENSION EALLOW(5,20)
C BEG APR 1992
      DIMENSION IMATL(90)
C END APR 1992
C
      COMMON/PRMFIL/IFILEX,IFILE,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C
      IPROMP = 1
      REWIND IFILE
      CALL DATUM(IFILE,384,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,385,1,2,NLAY,REALL,CHARAC,IOUT,0,IPROMP)
C
C BEG APR 1992
      DO 10 J = 1,NLAY
      IMATL(J) = 0
   10 CONTINUE
      MAXMAT = 0
      LKOUNT = 0
C END APR 1992
      DO 30 J = 1,NLAY
      L = J + JOLD
      REWIND IFILE
   20 CONTINUE
      CALL DATUM(IFILE,386,1,2,LTYPE(L),REALL,CHARAC,IOUT,J,IPROMP)
      CALL DATUM(IFILE,387,1,1,INT,REALL,ANSOUT,IOUT,0,IPROMP)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 30
C
C  NEW LAYER TYPE.  READ IN THICKNESS, WINDING ANGLE, MATERIAL TYPE...
C
      K = LTYPE(L)
      CALL DATUM(IFILE,388,0,0,INT,REALL,CHARAC,IOUT,K,IPROMP)
      CALL DATUM(IFILE,389,1,1,INT,T(K),CHARAC,IOUT,K,IPROMP)
      CALL DATUM(IFILE,390,1,2,INT,ANGLE(K),CHARAC,IOUT,K,IPROMP)
      CALL DATUM(IFILE,391,1,1,MATL(K),REALL,CHARAC,IOUT,K,IPROMP)
C BEG APR 1992
      LKOUNT = LKOUNT + 1
      IF (LKOUNT.EQ.1) THEN
         IMATL(J) = MATL(K)
         MAXMAT = 1
C BEG JAN 1993 (FOLLOWING STATEMENT IS COMMENTED OUT)
C        GO TO 26
C END JAN 1993
      ENDIF
      IF (J.GT.1) THEN
         L1 = J - 1
         DO 25 LL = 1,L1
            IF (MATL(K).EQ.IMATL(LL)) GO TO 26
   25    CONTINUE
         IMATL(J) = MATL(K)
   26    CONTINUE
      ENDIF
   30 CONTINUE
      IF (MAXMAT.GT.0)
     1 CALL DATUM(IFILE,392,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      DO 200 J = 1,NLAY
      I = IMATL(J)
      IF (I.EQ.0) GO TO 200
C END APR 1992
C
      REWIND IFILE
      CALL DATUM(IFILE,393,1,2,INT,REALL,ANSOUT,IOUT,I,IPROMP)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 200
      WRITE(IFILE4,115) I
  115 FORMAT(/,' MATERIAL PROPERTIES FOR MATERIAL TYPE',I3)
C
      CALL DATUM(IFILE,394,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,395,1,1,INT,E1(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,396,1,1,INT,E2(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,397,1,1,INT, G(I),CHARAC,IOUT,I,IPROMP)
      KKOUNT = 0
  150 CONTINUE
      CALL DATUM(IFILE,398,1,1,INT,FNU(I),CHARAC,IOUT,I,IPROMP)
      FNUTST = 1000000.
      IF (E2(I).NE.0.) FNUTST = FNU(I)*E1(I)/E2(I)
      DIF    = 1. - FNUTST*FNU(I)
      IF (DIF.LE.0.) THEN
       WRITE(IFILE4,155)
  155  FORMAT(/,' BAD VALUE FOR POISSONS RATIO. NOTE THAT THERE ARE',/,
     1' TWO POISSONS RATIOS, NU12 AND NU21. THE ONE THAT YOU ARE',/,
     1' ASKED TO PROVIDE, NU12, IS GIVEN BY:',/,
     1'               NU12  = NU21*E2/E1',/,
     1' THEREFORE, IF E1 IS LARGER THAN E2 (WHICH IS USUALLY THE',/,
     1' CASE), YOU MUST PROVIDE AS INPUT HERE THE SMALLER OF THE TWO',/,
     1' POISSONS RATIOS.',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
C
       BACKSPACE(IOUT)
       REWIND IFILE
       GO TO 150
      ENDIF
C
      IF (FNUTST.GT.1.0.AND.KKOUNT.EQ.0.AND.E2(I).NE.0.) THEN
       WRITE(IFILE4,156)
  156  FORMAT(/,' POISSONS RATIO MAY BE TOO BIG.  NOTE THAT THERE ARE',/,
     1' TWO POISSONS RATIOS, NU12 AND NU21. THE ONE THAT YOU ARE',/,
     1' ASKED TO PROVIDE, NU12, IS GIVEN BY:',/,
     1'               NU12  = NU21*E2/E1',/,
     1' THEREFORE, IF E1 IS LARGER THAN E2 (WHICH IS USUALLY THE',/,
     1' CASE), YOU MUST PROVIDE AS INPUT HERE THE SMALLER OF THE TWO'/
     1' POISSONS RATIOS.',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
       WRITE(IFILE4,157)
  157  FORMAT(/,' BOSOR4 WILL ASK YOU AGAIN FOR THE POISSONS RATIO.',/,
     1' PLEASE MAKE SURE THAT YOU SUPPLY THE SMALLER OF THE TWO',/,
     1' POISSONS RATIOS FOR THIS ORTHOTROPIC MATERIAL.',/)
       BACKSPACE(IOUT)
       REWIND IFILE
       KKOUNT = KKOUNT + 1
       GO TO 150
      ENDIF
C
  160 CONTINUE
      CALL DATUM(IFILE,399,1,1,INT,ALPHA1(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,400,1,1,INT,ALPHA2(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,401,1,2,INT,CURETP(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,402,1,2,INT,DENS(I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,403,0,0,INT,REALL,CHARAC,IOUT,0,IPROMP)
      CALL DATUM(IFILE,404,1,1,INT,EALLOW(1,I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,405,1,1,INT,EALLOW(2,I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,406,1,1,INT,EALLOW(3,I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,407,1,1,INT,EALLOW(4,I),CHARAC,IOUT,I,IPROMP)
      CALL DATUM(IFILE,408,1,1,INT,EALLOW(5,I),CHARAC,IOUT,I,IPROMP)
  200 CONTINUE
      CALL DATUM(IFILE,409,1,2,NRS,REALL,CHARAC,IOUT,0,IPROMP)
C
      RETURN
      END
C
C
C
C=DECK      CFBL
C BEG OCT 2011
      SUBROUTINE CFBL(NLAY,ZREF,E1L,E2L,GL,U12L,RHOL,TL,ZETL,CCC,
     1                A1L,A2L,THERM,TMS,TD,A1L1,A1L2,A2L1,A2L2,
     1                CONDT,CON1L,CON2L,ICALL)
C END OCT 2011
C
C  PURPOSE IS TO CALCULATE C(i,j) AND THERM(J) FOR ONE MULTI-LAYERED
C  SKIN.
C
C BEG OCT 2011
      DIMENSION CON1L(*),CON2L(*)
C END OCT 2011
      DIMENSION E1L(99),E2L(99),GL(99),ZETL(99),U12L(99),RHOL(99)
      DIMENSION A1L(99),A2L(99),THL(2),THERM(6)
      DIMENSION A1L1(99),A1L2(99),A2L1(99),A2L2(99),THLDIF(2)
      DIMENSION S(99),R(3,3),TL(99),CCC(6,6)  
      DIMENSION CL(3,3),CP(3,3),CT(3,3),CTP(3,3)
      DATA DTR,RTD,PI /.017453293, 57.29577951, 3.141592654/
C
      CALL MOVER(0.,0,CCC,1,36)
      CALL MOVER(0.,0,THERM,1,6)
      B = 1.
      A = 1.
      C = 0.
C
      TD = 0.     
C BEG OCT 2011
      IF (ICALL.EQ.4) CONDT = 0.
C END OCT 2011
      TMS = 0.    
      DO 10 L=1,NLAY    
      U21 = 0.
      IF (E2L(L).GT.0.) U21 = U12L(L)*E1L(L)/E2L(L)   
      UD = 1.-U12L(L)*U21     
      S(L) = E1L(L)/UD  
      TD = TD+TL(L)     
   10 TMS = TMS+TL(L)*RHOL(L) 
C
      ECCREF = (0.5*TD - ZREF)
      IF (ZREF.EQ.0.) ECCREF = 0.
      BI = .5*(TD-TL(1))
      KT = 1
C     ------------------------------------------------------------------
C       INTEGRATION THROUGH TOTAL THICKNESS     
C     ------------------------------------------------------------------
      DO 100 L=1,NLAY   
      CALL MOVER (0,0,CL,1,9) 
      CALL MOVER (0,0,CT,1,9)
      CALL MOVER (0,0,R,1,9)  
      H = - ECCREF - BI   
      IF (E1L(L).EQ.0.) GO TO 77    
C     ------------------------------------------------------------------
C       LAYER CONSTITUTIVE MATRIX (W.R.T. PHI1(L),PHI2(L))  
C     ------------------------------------------------------------------
      CL(1,1) = S(L)    
      CL(1,2) = U12L(L)*S(L)  
      CL(2,1) = CL(1,2) 
      CL(2,2) = 0.
      IF (E1L(L).GT.0.) CL(2,2) = S(L)*E2L(L)/E1L(L)  
      CL(3,3) = GL(L)   
C
C     COMPUTE STRAIN TRANSFORMATION MATRIX FROM ELEMENT TO FIBER AXES   
C
      ZA = ZETL(L)*DTR  
      CALL RTRSF (A,B,C,ZA,R) 
      CALL CONTRA (R,3,3,CL,3,CP)   
      CALL CONTRA (R,3,3,CT,3,CTP)
C
C  THERMAL RESULTANTS, NT, AND MOMENTS, MT...
C
      ET1 = CL(1,1)*A1L(L)+CL(1,2)*A2L(L)
      ET2 = CL(2,1)*A1L(L)+CL(2,2)*A2L(L)
      THL(1) = R(1,1)*ET1+R(2,1)*ET2
      THL(2) = R(1,2)*ET1+R(2,2)*ET2
      ET11= CL(1,1)*A1L1(L)+CL(1,2)*A2L1(L)
      ET12= CL(1,1)*A1L2(L)+CL(1,2)*A2L2(L)
      ET21= CL(2,1)*A1L1(L)+CL(2,2)*A2L1(L)
      ET22= CL(2,1)*A1L2(L)+CL(2,2)*A2L2(L)
      THLDIF(1) = R(1,1)*(ET12-ET11) +R(2,1)*(ET22-ET21)
      THLDIF(2) = R(1,2)*(ET12-ET11) +R(2,2)*(ET22-ET21)
C BEG OCT 2011
C  CONDUCTIVITY ALONG THE AXIS OF A SUPPORT STRUT...
      IF (ICALL.EQ.4) CONDF = R(1,1)*CON1L(L) + R(2,1)*CON2L(L)
C END OCT 2011
   72 DZ = TL(L)  
      ZDZ = H*DZ  
      Z2DZ = DZ*(H**2+DZ**2/12.)    
C     ------------------------------------------------------------------
C       ACCUMULATE CONSTITUTIVE MATRIX (W.R.T. XP,YP) 
C     ------------------------------------------------------------------
      DO 1000 I=1,3     
      DO 1000 J=1,3     
      CCC(I,J) = CCC(I,J)+CP(I,J)*DZ
      CCC(I,J+3) = CCC(I,J+3)-CP(I,J)*ZDZ 
      CCC(I+3,J+3) = CCC(I+3,J+3)+CP(I,J)*Z2DZ  
 1000 CONTINUE    
C
C  THERMAL TERMS...
C
      DO 1100 J = 1,2
         THERM(J) = THERM(J) + THL(J)*DZ
         THERM(J+3) = THERM(J+3) - THL(J)*ZDZ -THLDIF(J)*TL(L)**2/12.
 1100 CONTINUE
C
C BEG OCT 2011
C  CONDUCTIVITY ALONG THE AXIS OF A SUPPORT STRUT...
      IF (ICALL.EQ.4) CONDT = CONDT + CONDF*DZ
C END OCT 2011
   77 IF (L.EQ.NLAY) GO TO 100
      BI = BI-.5*(TL(L)+TL(L+1))    
  100 CONTINUE    
C
C  CHANGE SIGN OF C(3,6) TO AGREE WITH BOSOR4 CONVENTION...
C
      CCC(3,6) = - CCC(3,6)
      CCC(6,3) =   CCC(3,6)
C
C  COMPLETE TRANSVERSE SHEAR STIFFNESS CALCULATION...
C
C  SYMMETRIZE CCC...
C
      DO 1200 I = 1,6
      DO 1200 J = I,6
 1200 CCC(J,I) = CCC(I,J)
C
      RETURN
      END   
C
C
C
C=DECK      CONTRA
      SUBROUTINE CONTRA (T,MT,NT,A,MA,C)  
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION T(MT,NT),A(MA,MA),C(NT,NT)
      IF(MT.NE.MA) GO TO 99   
      MC =NT*NT    
      CALL MOVER (0,0,C,1,MC) 
      DO 1 K=1,MA 
      DO 1 L=1,MA 
      V=A(K,L)    
      IF (V.EQ.0.) GO TO 1    
      DO 2 I=1,NT 
      DO 2 J=1,NT 
    2 C(I,J)=C(I,J)+T(K,I)*V*T(L,J) 
    1 CONTINUE    
      RETURN
   99 WRITE(IFILE4,111)
C23456789012345678901234567890123456789012345678901234567890123456789012
  111 FORMAT (' * DIMENSIONS OF T AND A ARE INCONSISTENT IN SUBROUTINE',
     1' CONTRA*')   
      CALL ERREX
      END   
C
C
C
C=DECK      RTRSF 
      SUBROUTINE RTRSF(A,B,C,Z,R)   
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION R(3,3)  
C    TRANSFORMATION MATRIX FOR STRAINS FROM NONORTHOGONAL TO ORTHOGONAL 
C          WITH ANGLE Z 
      D=A*A*B*B-C*C     
      IF(D.LE.0) GO TO 100    
      D=SQRT(D)   
      CS=C/D
      S=A*B/D     
      CZ=COS(Z)   
      SZ=SIN(Z)   
      B11=CZ-CS*SZ
      B12=-(CS*CZ+SZ)   
      B21=S*SZ    
      B22=S*CZ    
      R(1,1)=B11*B11    
      R(1,2)=B21*B21    
      R(1,3)=B11*B21    
      R(2,1)=B12*B12    
      R(2,2)=B22*B22    
      R(2,3)=B12*B22    
      R(3,1)=2.*B11*B12 
      R(3,2)=2.*B21*B22 
      R(3,3)=B11*B22+B21*B12  
      GO TO 101   
  100 CONTINUE    
      WRITE(IFILE4,200)     
  200 FORMAT (/,' ** IMPROPER SHELL GEOMETRY DETECTED BY RTRSF..A**2*',
     1'B**2-C**2=0 **')   
C23456789012345678901234567890123456789012345678901234567890123456789012
      CALL ERREX
  101 CONTINUE    
      RETURN
      END   
C
C
C
C=DECK      NEUTAX
      SUBROUTINE NEUTAX(C,NX,NY,DNEUT)
C
C  Purpose is to find the neutral planes of the panel with smeared
C  stiffeners.
C
C  Input:  C = 6x6 constitutive law for panel with smeared stiffeners
C         NX = axial load/circ. arc (Nx = 1.0 for calc. of DNEUTX, 
C                                         0.0 for calc. of DNEUTY)
C         NY = circ. load/axial arc (Ny = 0.0 for calc. of DNEUTX,
C                                         1.0 for calc. of DNEUTY)
C
C  Output:
C      DNEUT = distance from middle surface of skin to neutral plane
C
      DIMENSION C(6,6)
      REAL NX, NY
C
      B11 = C(2,2)*C(1,4) - C(1,2)*C(2,4)
      B12 = C(2,2)*C(1,5) - C(1,2)*C(2,5)
      B21 = C(1,1)*C(2,4) - C(1,2)*C(1,4)
      B22 = C(1,1)*C(2,5) - C(1,2)*C(1,5)
C
      DEN1= C(1,1)*C(2,2) - C(1,2)**2
      C44BAR = C(4,4) -(B11*C(1,4) + B21*C(2,4))/DEN1
      C45BAR = C(4,5) -(B12*C(1,4) + B22*C(2,4))/DEN1
      C54BAR = C(4,5) -(B11*C(1,5) + B21*C(2,5))/DEN1
      C55BAR = C(5,5) -(B12*C(1,5) + B22*C(2,5))/DEN1
C
      Q1 = - (C(1,4)*(C(2,2)*NX - C(1,2)*NY)
     1     +  C(2,4)*(C(1,1)*NY - C(1,2)*NX) )/DEN1
      Q2 = - (C(1,5)*(C(2,2)*NX - C(1,2)*NY)
     1     +  C(2,5)*(C(1,1)*NY - C(1,2)*NX) )/DEN1
C
      DEN = -C55BAR*C44BAR + C54BAR*C45BAR
      F1  = Q2*C45BAR - Q1*C55BAR
      F2  = Q2*C44BAR - Q1*C54BAR
C
      IF (NX.GT.0.) DNEUT = -( F1*(-C44BAR) - F2*(-C45BAR) )/(DEN*NX)
      IF (NY.GT.0.) DNEUT = -( F2*( C55BAR) - F1*( C54BAR) )/(DEN*NY)
C
      RETURN
      END
C
C
C
C=DECK      CSHIFT
      SUBROUTINE CSHIFT(C,D,CNEW,THMOLD,THMNEW)
C
C  PURPOSE IS TO DERIVE CNEW(I,J) FOR NEW REFERENCE SURFACE LOCATED A
C  DISTANCE D FROM THE OLD REFERENCE SURFACE.
C
C  INPUT...
C
C    C = OLD CONSTITUTIVE MATRIX
C    D = REFERENCE SURFACE SHIFT
C   THMOLD = OLD THERMAL RESULTANT
C   THMNEW = SHIFTED THERMAL RESULTANT
C
C  OUTPUT...
C
C    CNEW = NEW CONSTITUTIVE MATRIX
C
      DIMENSION C(6,6),CNEW(6,6),THMOLD(6),THMNEW(6)
C
      CALL MOVER(THMOLD,1,THMNEW,1,6)
C
      DO 10 I = 1,3
      DO 10 J = 1,3
         CNEW(I,J) = C(I,J)
   10 CONTINUE
C
      CNEW(1,4) = C(1,4) + D*C(1,1)
      CNEW(4,1) = CNEW(1,4)
      CNEW(1,5) = C(1,5) + D*C(1,2)
      CNEW(5,1) = CNEW(1,5)
      CNEW(1,6) = C(1,6) - D*C(1,3)
      CNEW(6,1) = CNEW(1,6)
C
      CNEW(2,4) = C(2,4) + D*C(1,2)
      CNEW(4,2) = CNEW(2,4)
      CNEW(2,5) = C(2,5) + D*C(2,2)
      CNEW(5,2) = CNEW(2,5)
      CNEW(2,6) = C(2,6) - D*C(2,3)
      CNEW(6,2) = CNEW(2,6)
C
      CNEW(3,4) = C(3,4) + D*C(1,3)
      CNEW(4,3) = CNEW(3,4)
      CNEW(3,5) = C(3,5) + D*C(2,3)
      CNEW(5,3) = CNEW(3,5)
      CNEW(3,6) = C(3,6) - D*C(3,3)
      CNEW(6,3) = CNEW(3,6)
C
      CNEW(4,4) = C(4,4) + 2.*D*C(1,4) + D*D*C(1,1)
      CNEW(4,5) = C(4,5) + D*(C(2,4)+C(1,5)) + D*D*C(1,2)
      CNEW(5,4) = CNEW(4,5)
      CNEW(4,6) = C(4,6) + D*(C(1,6)-C(3,4)) - D*D*C(1,3)
      CNEW(6,4) = CNEW(4,6)
C
      CNEW(5,5) = C(5,5) + 2.*D*C(2,5) + D*D*C(2,2)
      CNEW(5,6) = C(5,6) + D*(C(2,6)-C(3,5)) - D*D*C(2,3)
      CNEW(6,5) = CNEW(5,6)
C
      CNEW(6,6) = C(6,6) - 2.*D*C(3,6) + D*D*C(3,3)
C
      THMNEW(4) = -THMOLD(4) - D*THMOLD(1)
      THMNEW(5) = -THMOLD(5) - D*THMOLD(2)
C
      RETURN
      END
C
C
C
C=DECK      CFB5
C BEG DEC 2005
      SUBROUTINE CFB5(K,RAD,NWALL,Z,I5,THERM,T1,T2,T3,J,S,C,RADD,
     1                ISEG,TIO,PHORIG)
C END DEC 2005
C
C     SUBROUTINE FOR ORTHOTROPIC LAYERED SHELLS
C     MATERIAL PROPERTIES ARE ASSUMED TO BE TEMPERATURE-INDEPENDENT
C     THERMAL STRESS RESULTANTS NT AND MT ARE CALCULATED
C
C BEG MAY 2009
      COMMON/CSKINX/CSKIN(6,6,100)
C END MAY 2009
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
      DIMENSION RAD(100),RADD(100),ALPHA1(20),ALPHA2(20),THERM(I5,4)
      COMMON/ZGRAD/NTSGD
      DIMENSION TIO(I5,2)
      COMMON/SFLAG/ISTRES
      COMMON/STRSEG/ISTRSS(295)
      COMMON/WALPRP/EA(295),EB(295),GAB(295),UAB(295),
     1              ALPH1(295),ALPH2(295)
      COMMON/NLAMIN/LAMINA(295)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/AXIALZ/ZAXIAL(100)
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
      DIMENSION SM(20),T(20),S(100),C(I5,14)
      DIMENSION ITIN(50),THICK(100,16),TIN(50)
      DIMENSION G(20),EX(20),EY(20),UXY(20),UYX(20),U1(20)
10    FORMAT(10I6) 
20    FORMAT (6E12.8) 
30    FORMAT(/,59X,'MODULUS OF',7X,'POISSON',8X,'DENSITY',/,
     135X,'LAYER',5X,'THICKNESS',5X,'ELASTICITY',8X,'RATIO')
40    FORMAT(37X,I2,2X,4E15.8) 
50    FORMAT(/,28X,'SHEAR',9X,'YOUNGS',9X,'YOUNGS',9X,'POISSON',
     18X,'DENSITY',7X,'THERMAL',9X,'THERMAL',/,
     21X,'LAYER',5X,'THICKNESS',7X,'MODULUS',6X,'MODULUS(X)',5X,
     3'MODULUS(Y)',6X,'RATIO(XY)',20X,'EXP.COEF(X)',5X,'EXP.COEF(Y)')
C23456789012345678901234567890123456789012345678901234567890123456789012
60    FORMAT(3X,I2,2X,8E15.8)
70    FORMAT(/,'  ANALYSIS IS FOR A LAYERED SHELL.',
     1'   INNER LAYER IS NUMBER 1')
C
C
      IF (J.GT.1) GO TO 240
      IF (K.NE.1) GO TO 170
      WRITE (IFILE4,70)
      CALL DATUM(IFILE2,410,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,411,1,1,INT,WRAPS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,412,1,2,INT,ANRS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,413,1,2,INT,TYPET,CHARAC,IOUT,0,1)
C
C     WRAPS = NO. OF LAYERS
C     ANRS = 0 NO SMEARED STRINGERS OR RINGS
C     ANRS = 1    SMEARED STRINGERS OR RINGS
C     TYPET = 0 CONSTANT THICKNESS LAYERS
C     TYPET = 1 VARIABLE THICKNESS LAYERS,  READ LAYER THICKNESSES
C     TYPET = 2 VARIABLE THICKNESS LAYERS,  LAYER THICKNESS FROM FUNCT.
      LAYERS=WRAPS
      LAMINA(ISEG) = LAYERS
      IF (LAYERS.LT.1.OR.LAYERS.GT.20) THEN
        WRITE(IFILE4,*)' LAYERS IS NOT IN PERMISSIBLE RANGE 1 TO 20'
        CALL ERREX
      ENDIF
      DO 80 I=1,LAYERS
80    T(I) = 0.0
      NRS=ANRS
      NTYPET = TYPET
      IF (NTYPET.NE.0.AND.NTYPET.NE.1) THEN
        WRITE(IFILE4,*)' NTYPET NOT IN PERMISSIBLE RANGE 0 TO 1'
        CALL ERREX
      ENDIF
C
C     I = 1 . . INNER LAYER,   I = LAYERS . . OUTER LAYER
C     T =  THICKNESS
C     G =  SHEAR MODULUS
C     EX =  MERIDIONAL MODULUS
C     EY =  CIRCUMFERENTIAL MODULUS
C     UXY = POISSON,S RATIO . . EY*UXY = EX*UYX
C     SM = LAYER MATERIAL MASS DENSITY
C     ALPHA1 = MERIDIONAL THERMAL EXPANSION COEFFICIENT
C     ALPHA2 = CIRCUMFERENTIAL THERMAL EXPANSION COEFFICIENT
C
C
      IF (NTYPET.NE.0) GO TO 82
      DO 81 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,414,1,1,INT,T(I),CHARAC,IOUT,I,IPROMP)
   81 CONTINUE
   82 CONTINUE
      DO 83 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,415,1,1,INT,G(I),CHARAC,IOUT,I,IPROMP)
   83 CONTINUE
      DO 84 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,416,1,1,INT,EX(I),CHARAC,IOUT,I,IPROMP)
   84 CONTINUE
      DO 85 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,417,1,1,INT,EY(I),CHARAC,IOUT,I,IPROMP)
   85 CONTINUE
      DO 86 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,418,1,1,INT,UXY(I),CHARAC,IOUT,I,IPROMP)
   86 CONTINUE
      DO 87 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,419,1,1,INT,SM(I),CHARAC,IOUT,I,IPROMP)
   87 CONTINUE
      DO 88 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,420,1,1,INT,ALPHA1(I),CHARAC,IOUT,I,IPROMP)
   88 CONTINUE
      DO 89 I = 1,LAYERS
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,421,1,1,INT,ALPHA2(I),CHARAC,IOUT,I,IPROMP)
   89 CONTINUE
C
      EA(ISEG) = EX(1)
      EB(ISEG) = EY(1)
      UAB(ISEG)= UXY(1)
      GAB(ISEG)= G(1)
      ALPH1(ISEG) = ALPHA1(1)
      ALPH2(ISEG) = ALPHA2(1)
C
      DO 90 I = 1,I5
   90 THICK(I,1) = T(1)
      IF (ISTRSS(ISEG).EQ.2) GO TO 100
      IF (LAYERS.GT.1) ISTRSS(ISEG) = 0
100   IF (NTYPET.EQ.0) GO TO 120
      IF (NTYPET.EQ.2) GO TO 115
C
C     NTIN = NO. OF MERIDIONAL STATIONS FOR WHICH LAYER THICKNESSES
C            TO BE READ IN.. LOCATION OF CALLOUTS DETERMINED IN STA
C     TIN = THICKNESS OF GIVEN LAYER AT THE NTIN CALLOUT POINTS DETER-
C           MINED IN SUBROUTINE STA.
C
      CALL DATUM(IFILE2,422,1,2,NTIN,REALL,CHARAC,IOUT,0,1)
      IF (NTIN.LT.2.OR.NTIN.GT.20) THEN
        WRITE(IFILE4,*)' NTIN NOT IN PERMISSIBLE RANGE 2 TO 20'
        CALL ERREX
      ENDIF
C
      IPRM(2) = 423
      CALL STA(ITIN,ZAXIAL,RAD,RADD,S,NTIN,I5)
      CALL DATUM(IFILE2,426,0,0,INT,REALL,CHARAC,IOUT,0,1)
      DO 110 I=1,LAYERS
      DO 105 II = 1,NTIN
      IPROMP = 1
      IF (II.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,426,1,1,INT,TIN(II),CHARAC,IOUT,II,IPROMP)
  105 CONTINUE
C
      CALL FINDZ(NTIN,ITIN,TIN,I5,THICK(1,I),S)
      REWIND IFILE2
110   CONTINUE
      GO TO 120
C
C     LAYER THICKNESSES FROM FUNCTION. . .
C
115   DO 117 I = 1,LAYERS
      READ(5,20) TH1,TH2,TH3,TH4,TH5
      DO 116 II = 1,I5
      SARC = S(II) - S(1)
      THICK(II,I) = TH1 + TH2*SARC**TH3 + TH4*SARC**TH5
116   CONTINUE
117   CONTINUE
C
120   WRITE (IFILE4,50)
      WRITE (IFILE4,60)(I,T(I),G(I),EX(I),EY(I),UXY(I),SM(I),ALPHA1(I),
     1 ALPHA2(I),I=1,LAYERS)
      CALL GASP(THICK(1,1),I5,1,ITHK(ISEG))
      IF (NTYPET.EQ.0) GO TO 170
      REWIND IFILE3
      CALL DATUM(IFILE3,608,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 170
      WRITE(IFILE4,130)
130   FORMAT(/,'  THICKNESS DISTRIBUTION OF LAYERS, STARTING WITH',
     1' INNER LAYER AS NUMBER 1')
      WRITE (IFILE4,140)
140   FORMAT(/,' POINT    T(1)      T(2)      T(3)      T(4)      T(5)',
     1'      T(6)      T(7)      T(8)      T(9)      T(10)     T(11)  ',
     2' T(12)') 
C23456789012345678901234567890123456789012345678901234567890123456789012
      DO 150 I=1,I5
150   WRITE (IFILE4,160)I,(THICK(I,JJ),JJ=1,LAYERS)
160   FORMAT(I5,1P12E10.2) 
170   CONTINUE
      IF (NTYPET.EQ.0) GO TO 190
      DO 180 I=1,LAYERS
180   T(I) = THICK(K,I)
190   CONTINUE
      BI=0.5*T(1)
      CB33=0.0
      C33=0.0
      DO 200 I=1,LAYERS
      UYX(I) = 0.0
      IF (EX(I).NE.0.0) UYX(I) = EY(I)*UXY(I)/EX(I)
      U1(I)=1.0-UXY(I)*UYX(I)
      CI33=G(I)*T(I)
      CB33 = CB33 + BI*CI33
      C33=C33+CI33
      IF (I.LT.LAYERS) BI = BI + 0.5*(T(I) + T(I+1))
200   CONTINUE
      BI=0.5*T(1)
      C11=0.0
      C12=0.0
      C14=0.0
      C15=0.0
      C22=0.0
      C24=0.0
      C25=0.0
      C36 = 0.0
      C44=0.0
      C45=0.0
      C55=0.0
      C66=0.0
      SMPA = 0.0
      DO 230 I=1,LAYERS
      SMPA = SMPA + SM(I)*T(I)
      HI=Z-BI
      HI2=HI*HI
      CI11=EX(I)*T(I)/U1(I)
      CI22=EY(I)*T(I)/U1(I)
      CI12 = UYX(I)*CI11
      IF ((CI11*CI22).GE.(CI12**2)) GO TO 220
      WRITE(IFILE4,210)I
210   FORMAT(/,' WALL MATERIAL PROPERTIES FOR LAYER NO.',I3,
     1' INCONSISTENT.',/,' EX(I)/EY(I) MUST BE GREATER THAN UXY(I)**2',
     1/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      CALL ERREX
220   CONTINUE
      CI14=HI*CI11
      CI15=HI*CI12
      CI25=HI*CI22
      CI33=G(I)*T(I)
      RT=T(I)**2/12.
      CI44=CI11*RT
      CI45=CI12*RT
      CI55=CI22*RT
      CI66=    CI33*RT
      C11=C11+CI11
      C12=C12+CI12
      C14=C14+CI14
      C15=C15+CI15
      C22=C22+CI22
      C25=C25+CI25
      C36 = C36 - HI*CI33
      C44=C44+CI44+HI2*CI11
      C45=C45+CI45+HI2*CI12
      C55=C55+CI55+HI2*CI22
      C66=C66+CI66+    HI2*CI33
      IF (I.LT.LAYERS) BI = BI +0.5*(T(I) +T(I+1))
230   CONTINUE
      C24=C15
240    CONTINUE
C     THERMAL LOADS FOR KTH POINT OF IITH SEGMENT,LAYERED ORTHOTROPIC
      THERM(K,1) = 0.0
      THERM(K,2) = 0.0
      THERM(K,3) = 0.0
      THERM(K,4) = 0.0
      BB = 0.0
      NUM = 25
      DO 270 I=1,LAYERS
      I1 = I - 1
      IF (I1.EQ.0) GO TO 250
      BB = BB + T(I1)
250   CONTINUE
      Z1 = -(Z      -BB)
      Z2 = - (Z - BB - T(I))
      NTSGD = 0
      TIO(K,1) = FUNCT(T1,T2,T3,Z1)
      TIO(K,2) = FUNCT(T1,T2,T3,Z2)
260   CONTINUE
      CALL FINDTH(Z1,Z2,T1,T2,T3,NUM,TN1)
      NTSGD = 1
      CALL FINDTH(Z1,Z2,T1,T2,T3,NUM,TM1)
      E11 = EX(I)/U1(I)
      E22 = EY(I)/U1(I)
      E12 = UYX(I)*EX(I)/U1(I)
C     THERMAL STRESS RESULTANTS AND MOMENT RESULTANTS
      ABAR1 = -ALPHA1(I)*E11 - ALPHA2(I)*E12
      ABAR2 = -ALPHA1(I)*E12 - ALPHA2(I)*E22
      THERM(K,1) = THERM(K,1) + TN1*ABAR1
      THERM(K,2) = THERM(K,2) + TN1*ABAR2
      THERM(K,3) = THERM(K,3) - TM1*ABAR1
      THERM(K,4) = THERM(K,4) - TM1*ABAR2
270   CONTINUE
      IF (J.GT.1) GO TO 290
280   CONTINUE
C BEG MAY 2009
      IF (NRS.EQ.0) THEN
         CSKIN(1,1,K) = C11
         CSKIN(1,2,K) = C12
         CSKIN(1,3,K) = C13
         CSKIN(1,4,K) = C14
         CSKIN(1,5,K) = C15
         CSKIN(1,6,K) = C16
         CSKIN(2,1,K) = C12
         CSKIN(2,2,K) = C22
         CSKIN(2,3,K) = C23
         CSKIN(2,4,K) = C24
         CSKIN(2,5,K) = C25
         CSKIN(2,6,K) = C26
         CSKIN(3,1,K) = C13
         CSKIN(3,2,K) = C23
         CSKIN(3,3,K) = C33
         CSKIN(3,4,K) = C34
         CSKIN(3,5,K) = C35
         CSKIN(3,6,K) = C36
         CSKIN(4,1,K) = C14
         CSKIN(4,2,K) = C24
         CSKIN(4,3,K) = C34
         CSKIN(4,4,K) = C44
         CSKIN(4,5,K) = C45
         CSKIN(4,6,K) = C46
         CSKIN(5,1,K) = C15
         CSKIN(5,2,K) = C25
         CSKIN(5,3,K) = C35
         CSKIN(5,4,K) = C45
         CSKIN(5,5,K) = C55
         CSKIN(5,6,K) = C56
         CSKIN(6,1,K) = C16
         CSKIN(6,2,K) = C26
         CSKIN(6,3,K) = C36
         CSKIN(6,4,K) = C46
         CSKIN(6,5,K) = C56
         CSKIN(6,6,K) = C66
      ENDIF
C END MAY 2009
      IF (NRS.EQ.0) RETURN
      TD=BI+0.5*T(LAYERS)
C BEG DEC 2005
      CALL CFB1(ISEG,K,RAD,NWALL,Z,TD,I5,S,C,RADD,PHORIG)
C END DEC 2005
290   CONTINUE
      RETURN
      END
C
C
C
C=DECK      CFB6
C BEG DEC 2005
      SUBROUTINE CFB6(ISEG,I,RAD,NWALL,Z,I5,S,C,RADD,PHORIG)
C END DEC 2005
C
C        SUBROUTINE FOR SHELLS WITH CORRUGATED SKIN.
C
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
      DIMENSION RAD(100),S(100),C(I5,14),RADD(100)
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
10    FORMAT (6E12.8) 
20    FORMAT (/,' MODULUS OF ELASTICITY=',E15.6,5X,', POISSON RATIO=',
     1E15.8,/,' C=',E15.6,5X,', H=',E15.6,5X,', HD=',E15.6,5X,/,
     1' T=',E15.6,5X,', B=',E15.6)
30    FORMAT (/,' ANALYSIS IS FOR A SHELL WITH CORRUGATED SKIN.')
C
C
      IF (I.NE.1) GO TO 40
      WRITE (IFILE4,30)
      CALL DATUM(IFILE2,598,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,600,1,1,INT,E,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,602,1,1,INT,U,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,604,1,2,INT,ANRS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,606,1,2,INT,SMPAD,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,607,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,608,1,1,INT,CT,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,610,1,2,INT,CB,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,612,1,1,INT,CC,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,614,1,1,INT,CD,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,616,1,1,INT,CH,CHARAC,IOUT,0,1)
C
C     E=MODULUS OF ELASTICITY OF CORRUGATED SKIN
C     U=POISSON'S RATIO OF CORRUGATED SKIN
C     ANRS=INDICATOR OF WALL STIFFENING
C            IF 0 ... NO STRINGERS AND/OR RINGS
C            IF 1 ... STIFFENED BY STRINGERS AND/OR RINGS
C     SMPA = SHELL MASS PER UNIT AREA
C     CC=WIDTH OF TOP OF CORRUGATION (AT MIDDLE SURFACE)
C     CH=TOTAL OVER-ALL HEIGHT OF CORRUGATION
C     CD=WIDTH OF TROUGH BETWEEN CORRUGATIONS (AT MIDDLE SURFACE)
C     CT=THICKNESS OF CORRUGATED SHEET
C     CB=CENTERLINE-TO-CENTERLINE SPACING OF CORRUGATIONS
C     Z = DISTANCE FROM SHELL INNER SURFACE TO REFERENCE SURFACE
C
      WRITE (IFILE4,20)E,U,CC,CH,CD,CT,CB
40    NRS = ANRS
      BE=(CB-CC-CD)/(2.*(CH-CT))
      ALP=SQRT(1.+BE**2)
      F=CC-CT*(ALP+BE)
      G=CD-CT*(ALP+BE)
      TX=2.*CT/CB*(0.5*(F+G)+ALP*CH+BE*CT)
      EP=CT*(0.5*CT*(G-F)+CH*(F+BE*CT+ALP*CH))/(CB*TX)
      XI=CT/CB*((ALP*CH**3+CT**2*(0.5*(F+G)+BE*CT))/6.+2.*ALP*CH*(0.5*CH
     1-EP)**2+G*(EP-0.5*CT)**2+F*(CH-EP-0.5*CT)
     2**2+BE*CT*((EP-2.*CT/3.)**
     32+(CH-EP-2.*CT/3.)**2))
      YI=CT**3*CB/(12.*(1.-U**2)*(ALP*2.*(CH-CT)+CC+CD))
      CTB=CT*CB/(2.*ALP*(CH-CT)+CC+CD)
      XJ = (CT**3/6.)*(ALP/BE +(CC+CD)*(1.-ALP/BE)/CB)
      DD = 0.5*CH - Z
      C11=E*TX
      C12=0.0
      C14=0.0
      C15=0.0
      C22=0.0
      C24=0.0
      C25=0.0
      C33=CTB*E/(2.*(1.+U))
      C36 = 0.0
      C44=E*XI
      C45=0.
      C55=E*YI
      C66 = 0.25*E*XJ/(2.*(1.+U))
      C14 = - DD*C11
      C15 = - DD*C12
      C24 = C15
      C25 = - DD*C22
      C36 = DD*C33
      C44 = C44 + DD*DD*C11
      C45 = 0.0
      C55 = C55 + DD*DD*C22
      C66 = C66 + DD*DD*C33
      SMPA = SMPAD
50    IF (NRS.EQ.0) RETURN
      TD=CH
      REWIND IFILE2
C BEG DEC 2005
      CALL CFB1(ISEG,I,RAD,NWALL,Z,TD,I5,S,C,RADD,PHORIG)
C END DEC 2005
      RETURN
      END
C
C
C
C=DECK      CFB7
C BEG DEC 2005
      SUBROUTINE CFB7(I,RAD,NWALL,Z,SS,I5,ISEG,TIO,SSS,CCC,RADD,
     1                PHORIG)
C END DEC 2005
C
C     SUBROUTINE FOR ONE PLANE AND ONE CORRUGATED SKIN
C
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
      DIMENSION RAD(100),SS(100),THICK(100),RADD(100)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/WALPRP/EA(295),EB(295),GAB(295),UAB(295),
     1              ALPH1(295),ALPH2(295)
      DIMENSION TIO(I5,2),SSS(100),CCC(I5,14)
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/KCHNG/NNWALL(295),CCH(295)
      COMMON/AXIALZ/ZAX(100)
      COMMON/SFLAG/MONOQ
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
5     FORMAT(10I6) 
10    FORMAT (6E12.8) 
20    FORMAT (/,' MODULUS OF ELASTICITY=',E15.6,5X,', POISSON RATIO=',
     1E15.6,/,', C=',E15.6,5X,', H=',E15.6,5X,', HD=',E15.6,5X,/,
     1' T=',E15.6,5X,', B=',E15.6,', PHI=',E15.6) 
C23456789012345678901234567890123456789012345678901234567890123456789012
30    FORMAT (/,' PROPERTIES OF PLANE SKIN ARE')
40    FORMAT (/,' PROPERTIES OF CORRUGATED SKIN ARE')
50    FORMAT (/,' MODULUS OF ELASTICITY=',E15.6,5X,', POISSON RATIO=',
     1E15.6,/,' THICKNESS=',E15.6)
60    FORMAT (/,' EXTERNAL CORRUGATIONS')
70    FORMAT (/,' INTERNAL CORRUGATIONS')
80    FORMAT (/,' ANALYSIS IS FOR A SHELL WITH ONE PLANE AND ONE',
     1' CORRUGATED SKIN.') 
C
C
      IF (I.NE.1.AND.NTYPET.EQ.0) GO TO 130
      IF (I.NE.1) GO TO 100
      WRITE (IFILE4,80)
      CALL DATUM(IFILE2,617,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,618,1,1,INT,E,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,620,1,1,INT,U,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,622,1,2,INT,ANRS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,624,1,2,INT,SMPAD,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,625,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,626,1,1,INT,CT,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,628,1,2,INT,CB,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,630,1,1,INT,CC,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,632,1,1,INT,CD,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,634,1,1,INT,CH,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,635,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,636,1,1,INT,ES,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,638,1,1,INT,US,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,640,1,1,INT,TS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,642,1,2,NTYPET,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,644,1,2,INT,FIBOND,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,646,1,1,INOUT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,648,1,2,INT,PHI,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,650,1,2,INT,BAXIAL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,652,1,2,INT,BHOOP,CHARAC,IOUT,0,1)
C
      ANC = INOUT
      IF(BAXIAL.EQ.0.) BAXIAL = 1.
      IF(BHOOP .EQ.0.) BHOOP  = 1.
C
C     E=MODULUS OF ELASTICITY OF CORRUGATED SKIN
C     U=POISSON'S RATIO OF CORRUGATED SKIN
C     ANRS=INDICATOR OF WALL STIFFENING
C            IF 0 ... NO STRINGERS AND/OR RINGS
C            IF 1 ... STIFFENED BY STRINGERS AND/OR RINGS
C     SMPA = SHELL MASS PER UNIT AREA
C     BAXIAL = KNOCKDOWN FACTOR FOR AXIAL BENDING STIFFNESS C44 WHICH
C              DEPENDS ON THE DISCRETE RING SPACING.
C     BHOOP = KNOCKUP FACTOR FOR HOOP BENDING STIFFNESS, C55
C
C
C     CC=WIDTH OF TOP OF CORRUGATION (AT MIDDLE SURFACE)
C     CH=TOTAL OVER-ALL HEIGHT OF CORRUGATION
C     CD=WIDTH OF TROUGH BETWEEN CORRUGATIONS (AT MIDDLE SURFACE)
C     CT=THICKNESS OF CORRUGATED SHEET
C     CB=CENTERLINE-TO-CENTERLINE SPACING OF CORRUGATIONS
C     PHI=REDUCTION FACTOR FOR TORSIONAL STIFFNESS...SOMEWHERE BETWEEN
C                       0.25 AND 0.85
C
      WRITE (IFILE4,40)
      WRITE (IFILE4,20)E,U,CC,CH,CD,CT,CB,PHI
      CCH(ISEG) = CH
      NRS=ANRS
      BE=(CB-CC-CD)/(2.*(CH-CT))
      ALP=SQRT(1.+BE**2)
      F=CC-CT*(ALP+BE)
      G=CD-CT*(ALP+BE)
      TX=2.*CT/CB*(0.5*(F+G)+ALP*CH+BE*CT)
      EP=CT*(0.5*CT*(G-F)+CH*(F+BE*CT+ALP*CH))/(CB*TX)
      XI=CT/CB*((ALP*CH**3+CT**2*(0.5*(F+G)+BE*CT))/6.+2.*ALP*CH*(0.5*CH
     1-EP)**2+G*(EP-0.5*CT)**2+F*(CH-EP-0.5*CT)
     2**2+BE*CT*((EP-2.*CT/3.)**
     32+(CH-EP-2.*CT/3.)**2))
      YI=CT**3*CB/(12.*(1.-U**2)*(ALP*2.*(CH-CT)+CC+CD))
      CTB=CT*CB/(2.*ALP*(CH-CT)+CC+CD)
      IF (BE.NE.0.0) THEN
         XJ = (CT**3/6.)*(ALP/BE +(CC+CD)*(1.-ALP/BE)/CB)
      ELSE
         XJ =  CT**3/6.
      ENDIF
C
C     ES = MODULUS OF SMOOTH SKIN
C     POISSON'S RATION OF SMOOTH SKIN
C     THICKNESS OF SMOOTH SKIN
C     ANC=INDICATOR FOR POSITION OF CORRUGATION
C            IF 0 ... INSIDE CORRUGATION
C            IF 1 ... OUTSIDE CORRUGATION
C    NTYPET = THICKNESS VARIATION INDICATOR. . .
C                       0 = CONSTANT THICKNESS SKIN
C                       1 = VARIABLE THICKNESS SKIN, INPUT DATA READ
C                           IN FROM SUBROUTINE GETZ
C     FIBOND = MANUFACTURING TECHNIQUE INDICATOR - -
C                  0 = SKIN RIVETED TO CORRUGATIONS
C                  1 = SKIN WELDBONDED TO CORRUGATIONS
C     Z = DISTANCE FROM SHELL INNER SURFACE TO REFERENCE SURFACE
C     IF CORRUGATION INTERNAL, Z= DISTANCE FROM CROWN OF CORRUGATION
C     TO REFERENCE SURFACE.
C
      EA(ISEG) = ES
      EB(ISEG) = ES
      UAB(ISEG)= US
      GAB(ISEG)= .5*ES/(1.+US)
      ALPH1(ISEG) = 0.
      ALPH2(ISEG) = 0.
C
      IBOND = FIBOND
      LTYPET = 3
      IF (NTYPET.EQ.1) LTYPET = 1
      DO 90 II=1,I5
      TIO(II,1) = 0.0
      TIO(II,2) = 0.0
90    THICK(II) = TS
      IF (NTYPET.NE.1) GO TO 95
      IPRM(1) = 658
      IPRM(2) = 659
      CALL GETZ(LTYPET,I5,SS,THICK,RAD,RADD,ZAX)
   95 CONTINUE
      CALL GASP(THICK,I5,1,ITHK(ISEG))
      WRITE (IFILE4,30)
100   TS = THICK(I)
      IF (I.NE.1) GO TO 105
      WRITE (IFILE4,50)ES,US,TS
      IF (NTYPET.EQ.0) GO TO 105
      DO 104 II = 1,I5
      WRITE(IFILE4,103) II,SS(II),THICK(II)
103   FORMAT(' STATION = ',I3,', ARC LENGTH= ', 1PE14.4,
     1', THICKNESS = ',1PE14.4)
104   CONTINUE
105   CONTINUE
      V=E/(2.*(1.+U))
      GS=ES/(2.*(1.+US))
      S=TS
      TST = 0.5*V*CTB*(CH+TS)/(GS*S+V*CTB)
      IF (ANC) 120,120,110
110   IF (I.EQ.1) WRITE(IFILE4,60)
      E1=EP-TST+0.5*S
      E2=TST
      DD = TST + 0.5*S - Z
      GO TO 130
120   IF (I.EQ.1) WRITE(IFILE4,70)
      E1=-EP+TST-0.5*S
      E2=-TST
      DD = - TST +0.5*S - Z + CH
130   CONTINUE
      A=0.5*(CH-CT/2.)*(CC+CB-CD)
      C=ES*S/(1.-US**2)
      D=ES*S**3/(12.*(1.-US**2))
      IF (IBOND.EQ.0) GO TO 135
      DSKIN = D
      DPLUS = ES*(S+CT)**3/(12.*(1.-US**2))
      FL1 = CB - CD
      FL2 = CD
      D = (FL1 +FL2)/(FL1/DSKIN  + FL2/DPLUS)
135   CONTINUE
      C11=E*TX+C
      C12=US*C
      CB14 = - E1*E*TX + E2*C
      CB15 = US*E2*C
      CB24 = CB15
      C22 = C
      CB25 = E2*C
      C33=GS*S+V*CTB
      C44=D+E*XI+E*TX*E1**2+C*E2**2
      C45 = US*D + E2**2*C*US
      C55 = D*BHOOP + E2**2*C + E*YI
      C66=(V*XJ+GS*S**3/3.+PHI*4.*A**2/(CB*((CB-CD)/(GS*S)+(CC+ALP*2.
     1*(CH-CT))/(V*CT))))/4.
C
C     SHIFT REFERENCE SURFACE FROM SHEAR CENTER TO POINT A DISTANCE Z
C     FROM THE SHELL INNER SURFACE.
      C14 = CB14 - DD*C11
      C15 = CB15 - DD*C12
      C24 = C15
      C25 = CB25 - DD*C22
      C36 = DD*C33
      C44 = C44 - 2.*DD*CB14 + DD*DD*C11
      C45 = C45 - DD*CB15 - DD*CB24 + DD*DD*C12
      C55 = C55 - 2.*DD*CB25 + DD*DD*C22
      C66 = C66 + DD*DD*C33
      SMPA = SMPAD
      TD=CH+S
140   IF (NRS.EQ.0) RETURN
C     ADD SMEARED RINGS AND STRINGERS
      REWIND IFILE2
C BEG DEC 2005
      CALL CFB1(ISEG,I,RAD,NWALL,Z,TD,I5,SSS,CCC,RADD,PHORIG)
C END DEC 2005
      RETURN
      END
C
C
C
C=DECK      CFB8
C BEG DEC 2005
      SUBROUTINE CFB8(ISEG,I,RAD,NWALL,Z,I5,THERM,T1,T2,T3,TEMP,IJ,S,C,
     1                RADD,PHORIG)
C END DEC 2005
C     SUBROUTINE FOR SHELLS WITH TEMPERATURE-DEPENDENT WALL PROPERTIES.
C BEG MAY 2009
      COMMON/CSKINX/CSKIN(6,6,100)
C END MAY 2009
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/ SMPA
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
      DIMENSION SM(5),T(5),HEAT(5,20),FOUT(16)
      DIMENSION G(20,5),EX(20,5),EY(20,5),UXY(20,5),A1(20,5),A2(20,5)
      DIMENSION RAD(100),NPOINT( 5),THERM(I5,4)
      DIMENSION S(100),C(I5,14),RADD(100)
      COMMON/AXIALZ/ZAXIAL(100)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
      DIMENSION ITIN(50),THICK(100, 5),TIN(50)
10    FORMAT(10I6) 
20    FORMAT(6E12.8)
30    FORMAT(/,' ANALYSIS FOR LAYERED SHELL WITH')
40    FORMAT(' TEMPERATURE-DEPENDENT MATERIAL PROPERTIES.',/)
50    FORMAT(7E17.8)
      IF (IJ.GT.1) GO TO 190
      IF (I.NE.1) GO TO 160
      WRITE (IFILE4,30)
      WRITE (IFILE4,40)
C
C     WRAPS = NO.OF LAYERS
C     ANRS = 0 . . NO STRINGERS AND RINGS
C     ANRS = 1  STRINGERS AND RINGS
C     TYPET = 0  CONSTANT LAYER THICKNESSES
C     TYPET = 1 VARIABLE LAYER THICKNESSES
      CALL DATUM(IFILE2,430,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,431,1,1,INT,WRAPS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,432,1,2,INT,ANRS,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,433,1,2,INT,TYPET,CHARAC,IOUT,0,1)
C
      TEMP = 1.0
      LAYERS = WRAPS
      IF (LAYERS.LT.1.OR.LAYERS.GT.20) THEN
        WRITE(IFILE4,*)' LAYERS NOT IN PERMISSIBLE RANGE 1 TO 20'
        CALL ERREX
      ENDIF
      DO 60 J=1,LAYERS
60    T(J) = 0.0
      NRS = ANRS
      NTYPET = TYPET
      IF (NTYPET.NE.0.AND.NTYPET.NE.1) THEN
        WRITE(IFILE4,*)' NTYPET NOT IN PERMISSIBLE RANGE 0 TO 1'
        CALL ERREX
      ENDIF
C     J = 1 . . INNERMOST LAYER. = LAYERS . . OUTERMOST LAYER
C     T = LAYER THICKNESS
      IF (NTYPET.NE.0) GO TO 65
      DO 63 J = 1,LAYERS
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,434,1,1,INT,T(J),CHARAC,IOUT,J,IPROMP)
   63 CONTINUE
   65 CONTINUE
      IF (NTYPET.EQ.0) GO TO 80
C     NTIN = NO. OF MERIDIONAL STATIONS FOR WHICH THICKNESS TO BE
C            SPECIFIED. POSITION (MESH PT TAG) OF THICKNESS CALLOUTS
C            DETERMINED IN STA
C     TIN =  THICKNESS OF GIVEN LAYER AT CALLOUT POINTS. THICKNESSES
C            AT INTERMEDIATE POINTS OBTAINED BY LINEAR INTERPOLATION
      CALL DATUM(IFILE2,435,1,2,NTIN,REALL,CHARAC,IOUT,0,1)
      IF (NTIN.LT.2.OR.NTIN.GT.20) THEN
        WRITE(IFILE4,*)' NTIN NOT IN PERMISSIBLE RANGE 2 TO 20'
        CALL ERREX
      ENDIF
      IPRM(2) = 436
      CALL STA(ITIN,ZAXIAL,RAD,RADD,S,NTIN,I5)
      CALL DATUM(IFILE2,439,0,0,INT,REALL,CHARAC,IOUT,0,1)
      DO 70 J=1,LAYERS
      DO 68 II = 1,NTIN
      IPROMP = 1
      IF (II.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,439,1,1,INT,TIN(II),CHARAC,IOUT,II,IPROMP)
   68 CONTINUE
      CALL FINDZ(NTIN,ITIN,TIN,I5,THICK(1,J),S)
      REWIND IFILE2
70    CONTINUE
80    CONTINUE
C
C     SM = LAYER MATERIAL MASS DENSITY
      DO 83 J = 1,LAYERS
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,440,1,1,INT,SM(J),CHARAC,IOUT,J,IPROMP)
   83 CONTINUE
      WRITE (IFILE4,90)(T(J),SM(J),J=1,LAYERS)
90    FORMAT(' LAYER THICKNESS = ', E15.6,',  LAYER MASS DENSITY =',
     1E15.8)
C
C     NPOINT(J) = NUMBER OF VALUES OF TEMPERATURE RISE FOR WHICH
C                 PROPERTIES GIVEN IN JTH LAYER
      DO 95 J = 1,LAYERS
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,441,1,2,NPOINT(J),REALL,CHARAC,IOUT,J,IPROMP)
   95 CONTINUE
      WRITE (IFILE4,100)LAYERS
100   FORMAT(/,' MATERIAL PROPERTIES AS FUNCTIONS OF TEMPERATURE',
     1' FOR SHELL WITH ',I2,'  LAYERS.',/) 
      WRITE (IFILE4,110)
110   FORMAT(6X,'TEMPERATURE',9X,'SHEAR',11X,'YOUNGS',11X,'YOUNGS',    
     111X,7HPOISSON,10X,7HTHERMAL,11X,7HTHERMAL       / 
     29X,'RISE',12X,'MODULUS',8X,'MODULUS(X)',8X,'MODULUS(Y)',
     38X,'RATIO(XY)',6X,'EXP.COEF(X)',6X,'EXP.COEF(Y)')
      IF (NTYPET.EQ.0) GO TO 160
      REWIND IFILE3
      CALL DATUM(IFILE3,609,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 160
      WRITE (IFILE4,120)
120   FORMAT(/,'  THICKNESS DISTRIBUTION OF LAYERS, STARTING WITH',
     1' INNER LAYER AS NUMBER 1')
      WRITE (IFILE4,130)
130   FORMAT(/,' POINT    T(1)      T(2)      T(3)      T(4)      T(5)',
     1'      T(6)      T(7)      T(8)      T(9)      T(10)     T(11)  ',
     2'  T(12)')
C23456789012345678901234567890123456789012345678901234567890123456789012
      DO 140 J=1,I5
140   WRITE (IFILE4,150)J,(THICK(J,JJ),JJ=1,LAYERS)
150   FORMAT(I5,1P12E10.2)
160   CONTINUE
      IF (NTYPET.EQ.0) GO TO 180
      DO 170 J=1,LAYERS
170   T(J) = THICK(I,J)
180   CONTINUE
      BI = 0.5*T(1)
      C11 = 0.0
      C12 = 0.0
      C14 = 0.0
      C15 = 0.0
      C22 = 0.0
      C24 = 0.0
      C25 = 0.0
      C33 = 0.0
      C36 = 0.0
      C44 = 0.0
      C45 = 0.0
      C55 = 0.0
      C66 = 0.0
      SMPA = 0.0
190   THERM(I,1) = 0.0
      THERM(I,2) = 0.0
      THERM(I,3) = 0.0
      THERM(I,4) = 0.0
      IF (IJ.GT.1) GO TO 240
      NUM = 25
      BB = 0.0
      IF (NTYPET.NE.0) REWIND IFILE2
      DO 230 J=1,LAYERS
      NPT = NPOINT(J)
      IF (I.GT.1) GO TO 210
C
C     HEAT = TEMPERATURES ABOVE ZERO-STRESS FOR WHICH WALL PROPERTIES
C            WILL BE SPECIFIED
C     G = SHEAR MODULUS
C     EX = MERIDIONAL MODULUS
C     EY = CIRCUMFERENTIAL MODULUS
C     UXY = POISSON,S RATIO
C     A1 = MERIDIONAL THERMAL COEFFICIENT OF EXPANSION
C     A2 = CIRCUMFERENTIAL THERMAL COEFFICIENT OF EXPANSION
      DO 191 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,442,1,2,INT,HEAT(J,K),CHARAC,IOUT,K,IPROMP)
  191 CONTINUE
      DO 192 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,443,1,1,INT,G(K,J),CHARAC,IOUT,K,IPROMP)
  192 CONTINUE
      DO 193 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,444,1,1,INT,EX(K,J),CHARAC,IOUT,K,IPROMP)
  193 CONTINUE
      DO 194 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,445,1,1,INT,EY(K,J),CHARAC,IOUT,K,IPROMP)
  194 CONTINUE
      DO 195 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,446,1,2,INT,UXY(K,J),CHARAC,IOUT,K,IPROMP)
  195 CONTINUE
      DO 196 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,447,1,1,INT,A1(K,J),CHARAC,IOUT,K,IPROMP)
  196 CONTINUE
      DO 197 K = 1,NPT
      IPROMP = 1
      IF (K.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,448,1,1,INT,A2(K,J),CHARAC,IOUT,K,IPROMP)
  197 CONTINUE
C
      WRITE (IFILE4,200)J
200   FORMAT(/,' WALL PROPERTIES AS FUNCTION OF TEMPERATURE FOR',
     1' LAYER NUMBER',I2,/)
      WRITE (IFILE4,50)(HEAT(J,K),G(K,J),EX(K,J),EY(K,J),UXY(K,J),
     1 A1(K,J),A2(K,J), K=1,NPT)
210   CONTINUE
C     SMPA = MASS/AREA OF SHELL WALL
      SMPA = SMPA + SM(J)*T(J)
      J1 = J - 1
      IF (J1.EQ.0) GO TO 220
      BB = BB + T(J1)
220   CONTINUE
      Z1 = - (Z-BB)
      Z2 = - (Z-BB-T(J))
C
C     CONTRIBUTION OF JTH LAYER TO TOTAL STIFFNESS OF SHELL WALL IS
C     EVALUATED IN STIFF.
C
      CALL STIFF(Z1,Z2,T1,T2,T3,TEMP,NUM,NPT,FOUT,J,HEAT,G(1,J),EX(1,J),
     1EY(1,J),UXY(1,J),A1(1,J),A2(1,J))
      C11 = C11 + FOUT(4)
      C12 = C12 + FOUT(10)
      C14 = C14 - FOUT(5)
      C15 = C15 - FOUT(11)
      C22 = C22 + FOUT(7)
      C24 = C24 - FOUT(11)
      C25 = C25 - FOUT(8)
      C33 = C33 + FOUT(1)
      C36 = C36 + FOUT(2)
      C44 = C44 + FOUT(6)
      C45 = C45 + FOUT(12)
      C55 = C55 + FOUT(9)
      C66 = C66 + FOUT(3)
C     THERMAL STRESS AND MOMENT RESULTANTS
      THERM(I,1) = THERM(I,1) + FOUT(13)/TEMP
      THERM(I,2) = THERM(I,2) + FOUT(15)/TEMP
      THERM(I,3) = THERM(I,3) - FOUT(14)/TEMP
      THERM(I,4) = THERM(I,4) - FOUT(16)/TEMP
      IF (J.LT.LAYERS) BI = BI + 0.5*(T(J) + T(J+1))
      IF (J.LT.LAYERS) REWIND IFILE2
230   CONTINUE
C BEG MAY 2009
      IF (NRS.EQ.0) THEN
         CSKIN(1,1,I) = C11
         CSKIN(1,2,I) = C12
         CSKIN(1,3,I) = C13
         CSKIN(1,4,I) = C14
         CSKIN(1,5,I) = C15
         CSKIN(1,6,I) = C16
         CSKIN(2,1,I) = C12
         CSKIN(2,2,I) = C22
         CSKIN(2,3,I) = C23
         CSKIN(2,4,I) = C24
         CSKIN(2,5,I) = C25
         CSKIN(2,6,I) = C26
         CSKIN(3,1,I) = C13
         CSKIN(3,2,I) = C23
         CSKIN(3,3,I) = C33
         CSKIN(3,4,I) = C34
         CSKIN(3,5,I) = C35
         CSKIN(3,6,I) = C36
         CSKIN(4,1,I) = C14
         CSKIN(4,2,I) = C24
         CSKIN(4,3,I) = C34
         CSKIN(4,4,I) = C44
         CSKIN(4,5,I) = C45
         CSKIN(4,6,I) = C46
         CSKIN(5,1,I) = C15
         CSKIN(5,2,I) = C25
         CSKIN(5,3,I) = C35
         CSKIN(5,4,I) = C45
         CSKIN(5,5,I) = C55
         CSKIN(5,6,I) = C56
         CSKIN(6,1,I) = C16
         CSKIN(6,2,I) = C26
         CSKIN(6,3,I) = C36
         CSKIN(6,4,I) = C46
         CSKIN(6,5,I) = C56
         CSKIN(6,6,I) = C66
      ENDIF
C END MAY 2009
      IF (NRS.EQ.0) RETURN
      TD = BI + 0.5 *T(LAYERS)
C     ADD SMEARED RINGS AND STRINGERS
C BEG DEC 2005
      CALL CFB1(ISEG,I,RAD,NWALL,Z,TD,I5,S,C,RADD,PHORIG)
C END DEC 2005
240   CONTINUE
      RETURN
      END
C
C
C
C=DECK      INGRAT
      SUBROUTINE INGRAT(FMIN,FMAX,A,B,DZ,ZDZ,Z2DZ)
C     CALLED FROM CFB2, WHOSE TRACE IS WALLCF, READIT, MAIN
C     CALCULATES INTEGRALS THROUGH THICKNESS OF FUNCTIONS SUCH AS
C     1./(1. + Z/A),  Z/(1. + Z/A), AND Z**2/(1. + Z/A) IN WHICH
C     Z/A IS LESS THAN UNITY.
      F1(A,B,X) = (ALOG(1.+A*X) +B*(A*X*X/2. -A*A*X*X*X/3. +A*A*A*X*X*X*
     1X/4. -A**4*X**5/5.) )/A
      F2(A,B,X) = (A*X*X/2. -A*A*X*X*X/3. +A**3*X**4/4. -A**4*X**5/5.
     1+B*(A**3*X**3/3. -A**4*X**4/4. + A**5*X**5/5.)/A**2)/A
      F3(A,B,X) = X**3/3. + (1.-B/A)*(-A*X**4/4. +A*A*X**5/5. -A**3*X**6
     1/6.)
      IF (ABS(A).LT.0.001) GO TO 10
      DZ = F1(A,B,FMAX) - F1(A,B,FMIN)
      ZDZ = F2(A,B,FMAX) - F2(A,B,FMIN)
      Z2DZ = F3(A,B,FMAX) - F3(A,B,FMIN)
      GO TO 20
10    CONTINUE
      DZ = FMAX - FMIN + B*(FMAX**2 -FMIN**2)/2.
      ZDZ = (FMAX**2 -FMIN**2)/2. + B*(FMAX**3 - FMIN**3)/3.
      Z2DZ = (FMAX**3 -FMIN**3)/3. +B*(FMAX**4 -FMIN**4)/4.
20    CONTINUE
      RETURN
      END
C
C
C
C=DECK      STIFF
C     OVERLAY(2,0)
      SUBROUTINE STIFF(Z1,Z2,T1,T2,T3,TEMP,NUM,NPT,FOUT,J,HEAT,GG,EXX,
     1EYY,UXYI,ALPH1,ALPH2)
C
C     CALLED FROM CFB8,WHOSE TRACE IS WALLCF,READIT,MAIN.
C     THE STIFFNESS OF THE JTH LAYER OF AN ORTHOTROPIC SHELL WHOSE
C     MATERIAL PROPERTIES ARE TEMPERATURE-DEPENDENT IS CALCULATED. THIS
C     IS STIFFNESS RELATIVE TO THE SHELL REFERENCE SURFACE, OF COURSE.
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION FOUT(16),     HEAT(5,20),TMAX(5),TMIN(5),TDEG(25)
      DIMENSION GG(20),EXX(20),EYY(20),UXYI(20),ALPH1(20),ALPH2(20)
      DIMENSION RATIO(25),G(25),E11(25),E22(25),E12(25),A1(25),A2(25)
      COMMON/ZGRAD/NTSGD
      NTSGD = 0
C     TEMPERATURE BOUNDS ESTABLISHED FROM TABLE.
      TMIN(J) = HEAT(J,1)
      TMAX(J) = HEAT(J,NPT)
      IC = NUM - 1
      T = Z2 - Z1
      DZ = T/FLOAT(IC)
      Z = Z1 - DZ
C     LOOP STARTS FOR OBTAINING VALUES AT STATIONS THRU THICKNESS
C     WHICH WILL SUBSEQUENTLY BE INTEGRATED.
      DO 30 K=1,NUM
      Z = Z + DZ
      TDEG(K) = FUNCT(T1,T2,T3,Z)*TEMP
      IF (TDEG(K).GT.TMAX(J).OR.TDEG(K).LT.TMIN(J)) GO TO 60
      DO 10 KK=1,NPT
      IF (TDEG(K).GE.HEAT(J,KK)) GO TO 10
      KS = KK - 1
      KS1 = KS + 1
      GO TO 20
10    CONTINUE
      KS = NPT
      KS1 = NPT - 1
20    CONTINUE
C
C     LINEAR INTERPOLATION FOR PROPERTIES AT KTH POINT IN JTH LAYER,
C     SINCE INPUT TABLES GIVE ONLY A FEW VALUES.
      RATIO(K) = (TDEG(K) - HEAT(J,KS))/(HEAT(J,KS1) - HEAT(J,KS))
      G(K) = GG(KS) + RATIO(K)*(GG(KS1) - GG(KS))
      EX = EXX(KS) + RATIO(K)*(EXX(KS1) - EXX(KS))
      EY = EYY(KS) + RATIO(K)*(EYY(KS1) - EYY(KS))
      UXY = UXYI(KS) + RATIO(K)*(UXYI(KS1) - UXYI(KS))
      ALPHA1 = ALPH1(KS) + RATIO(K)*(ALPH1(KS1) - ALPH1(KS))
      ALPHA2 = ALPH2(KS) + RATIO(K)*(ALPH2(KS1) - ALPH2(KS))
      UYX = EY*UXY/EX
      U1 = 1. - UXY*UYX
      E11(K) = EX/U1
      E22(K) = EY/U1
      E12(K) = UYX*EX/U1
      A1(K) = - ALPHA1*E11(K) - ALPHA2*E12(K)
      A2(K) = - ALPHA1*E12(K) - ALPHA2*E22(K)
30    CONTINUE
C
C     END OF FIRST LOOP. NOW START SIMPSON,S RULE INTEGRATION THRU
C     THICKNESS.
      DO 40 L=1,16
40    FOUT(L) = 0.0
      Z = Z1 - DZ
      DO 50 K=2,IC,2
      KM = K - 1
      KP = K + 1
      Z = Z + 2.*DZ
      ZM = Z - DZ
      ZP = Z + DZ
      GAVE = (G(KM) + 4.*G(K) + G(KP))*DZ/3.
      GAVEZ = (G(KM)*ZM + 4.*G(K)*Z + G(KP)*ZP)*DZ/3.
      GAVEZ2 = (G(KM)*ZM*ZM + 4.*G(K)*Z*Z + G(KP)*ZP*ZP)*DZ/3.
      E11AVE = (E11(KM) + 4.*E11(K) + E11(KP))*DZ/3.
      E11Z = (E11(KM)*ZM + 4.*E11(K)*Z + E11(KP)*ZP)*DZ/3.
      E11Z2 = (E11(KM)*ZM*ZM + 4.*E11(K)*Z*Z + E11(KP)*ZP*ZP)*DZ/3.
      E22AVE = (E22(KM) + 4.*E22(K) + E22(KP))*DZ/3.
      E22Z = (E22(KM)*ZM + 4.*E22(K)*Z + E22(KP)*ZP)*DZ/3.
      E22Z2 = (E22(KM)*ZM*ZM + 4.*E22(K)*Z*Z + E22(KP)*ZP*ZP)*DZ/3.
      E12AVE = (E12(KM) + 4.*E12(K) + E12(KP))*DZ/3.
      E12Z = (E12(KM)*ZM + 4.*E12(K)*Z + E12(KP)*ZP)*DZ/3.
      E12Z2 = (E12(KM)*ZM*ZM + 4.*E12(K)*Z*Z + E12(KP)*ZP*ZP)*DZ/3.
      A1M = A1(KM)*TDEG(KM)
      A2M = A2(KM)*TDEG(KM)
      A10 = A1(K )*TDEG(K )
      A20 = A2(K )*TDEG(K )
      A1P = A1(KP)*TDEG(KP)
      A2P = A2(KP)*TDEG(KP)
      TAVE1 = (A1M + 4.*A10 + A1P)*DZ/3.
      TAVE1Z = (A1M*ZM + 4.*A10*Z + A1P*ZP)*DZ/3.
      TAVE2 = (A2M + 4.*A20 + A2P)*DZ/3.
      TAVE2Z = (A2M*ZM + 4.*A20*Z + A2P*ZP)*DZ/3.
      FOUT(1) = FOUT(1) + GAVE
      FOUT(2) = FOUT(2) + GAVEZ
      FOUT(3) = FOUT(3) + GAVEZ2
      FOUT(4) = FOUT(4) + E11AVE
      FOUT(5) = FOUT(5) + E11Z
      FOUT(6) = FOUT(6) + E11Z2
      FOUT(7) = FOUT(7) + E22AVE
      FOUT(8) = FOUT(8) + E22Z
      FOUT(9) = FOUT(9) + E22Z2
      FOUT(10)= FOUT(10)+ E12AVE
      FOUT(11)= FOUT(11)+ E12Z
      FOUT(12)= FOUT(12)+ E12Z2
      FOUT(13) = FOUT(13) + TAVE1
      FOUT(14) = FOUT(14) + TAVE1Z
      FOUT(15) = FOUT(15) + TAVE2
      FOUT(16) = FOUT(16) + TAVE2Z
50    CONTINUE
C
C     INTEGRATION OF STIFFNESS PROPERTIES THRU JTH LAYER COMPLETED.
      GO TO 80
60    CONTINUE
      WRITE(IFILE4,70)
70    FORMAT(' TEMPERATURE NOT IN RANGE OF TABULATED INPUT DATA.',/)
      CALL ERREX
80    CONTINUE
      RETURN
      END
C
C
C
C BEG APR 1992
C=DECK      CFB9
C BEG DEC 2005
      SUBROUTINE CFB9(ISEG,IPOINT,RAD,NWALL,Z,I5,S,C,RADD,THERM,
     1                T1,T2,T3,TIO,THICK,PHORIG)
C END DEC 2005
C
C  OBTAIN CONSTITUTIVE LAW FOR COMPOSITE WALL WITH LAMINAE AT
C  VARIOUS ANGLES WITH RESPECT TO THE MERIDIONAL COORDINATE.
C  SELECTED LAYERS MAY HAVE VARIABLE THICKNESS.
C
C
C BEG OCT 2011
      COMMON/CONDTX/CONDT,CON1L(90),CON2L(90)
C END OCT 2011
C BEG MAY 2009
      COMMON/CSKINX/CSKIN(6,6,100)
C END MAY 2009
C BEG DEC 2005
      DIMENSION PHORIG(*)
C END DEC 2005
C BEG JUN 2009
      COMMON/LAYER/MATL(90),LTYPE(5500),T(90),ANGLE(90),NLAYER(295)
C END JUN 2009
      COMMON/MATER1/E1(20),E2(20),G(20),FNU(20),DENS(20)
      COMMON/MATERT/ALPHA1(20),ALPHA2(20),CURETP(20),EALLOW(5,20)
      COMMON/JWATCH/JOLD
      COMMON/CMAXS/CMAX
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34
      COMMON/ACXXX/ C35,C36,C44,C45,C46,C55,C56,C66
      COMMON/SHMASS/SMPA
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
      COMMON/AXIALZ/ZAXIAL(100)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      COMMON/ILVARS/ILVAR(11,295),ITREF(295),NLVAR(295),ITIO(295)
      COMMON/ZGRAD/NTSGD
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
      DIMENSION ITIN(50),THICK(I5,11),TIN(50),ITSET(90),TIO(I5,2)
C
      DIMENSION CX(6,6),THERMX(6),CNEW(6,6),RAD(*),RADD(*),S(*)
      DIMENSION E1L(99),E2L(99),GL(99),ZETL(99),U12L(99),RHOL(99)
      DIMENSION A1L(99),A2L(99),A1L1(99),A1L2(99),A2L1(99),A2L2(99)
      DIMENSION TL(99),C(I5,14),THERM(I5,4),THMSFT(6),TTEMP(90)
C
      IF (ISEG.EQ.1.AND.IPOINT.EQ.1) THEN
         JOLD = 0
         CALL MOVER(0,0,MATL,1,90)
      ENDIF
      IF (IPOINT.NE.1) GO TO 100
      CALL INPROP(NLAY,LTYPE,T,ANGLE,MATL,E1,E2,G,FNU,
     1           ALPHA1,ALPHA2,DENS,NRS,CURETP,EALLOW,JOLD)
C
      CALL NODOUT(NWALL,ISEG,I5,NODES,NODALL,NODTOT)
C
      IVAR = 1
      CALL MOVER(0,0,ILVAR(1,ISEG),1,11)
      CALL MOVER(0,0,ITSET,1,90)
      CALL DATUM(IFILE2,413,1,2,INT,TYPET,CHARAC,IOUT,0,1)
      NTYPET = TYPET
      IF (NTYPET.NE.0.AND.NTYPET.NE.1) THEN
        WRITE(IFILE4,*)' NTYPET NOT IN PERMISSIBLE RANGE 0 TO 1'
        CALL ERREX
      ENDIF
      IF (NTYPET.EQ.0) GO TO 28
   10 CONTINUE
C  THE THICKNESS OF ONE OR MORE OF THE LAYERS VARIES ALONG THE SEGMENT...
      IF (IVAR.EQ.1)
     1      CALL DATUM(IFILE2,428,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,429,1,2,ILVAR(IVAR,ISEG),REALL,CHARAC,
     1           IOUT,0,1)
      L = ILVAR(IVAR,ISEG)
      ITSET(L) = IVAR
      REWIND IFILE2
C     NTIN = NO. OF MERIDIONAL STATIONS FOR WHICH THICKNESS TO BE
C            SPECIFIED. POSITION (MESH PT TAG) OF THICKNESS CALLOUTS
C            DETERMINED IN STA
C     TIN =  THICKNESS OF GIVEN LAYER AT CALLOUT POINTS. THICKNESSES
C            AT INTERMEDIATE POINTS OBTAINED BY LINEAR INTERPOLATION
      CALL DATUM(IFILE2,422,1,2,NTIN,REALL,CHARAC,IOUT,0,1)
      IF (NTIN.LT.2.OR.NTIN.GT.20) THEN
        WRITE(IFILE4,*)' NTIN NOT IN PERMISSIBLE RANGE 2 TO 20'
        CALL ERREX
      ENDIF
      IPRM(2) = 423
      CALL STA(ITIN,ZAXIAL,RAD,RADD,S,NTIN,I5)
      DO 18 I = 1,NTIN
      IPROMP = 1
      IF (I.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,426,1,1,INT,TIN(I),CHARAC,IOUT,I,IPROMP)
   18 CONTINUE
      CALL FINDZ(NTIN,ITIN,TIN,I5,THICK(1,IVAR),S)
      IVAR = IVAR + 1
      CALL DATUM(IFILE2,427,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('Y',ANSOUT,INFILE)) THEN
       IF (IVAR.GT.10) THEN
        WRITE(IFILE4,*)' MAX. OF 10 VARIABLE-THICKNESS LAYERS ALLOWED.'
        CALL ERREX
       ENDIF
       REWIND IFILE2
       GO TO 10
      ENDIF
      NLVAR(ISEG) = IVAR - 1
      NVAR = NLVAR(ISEG)
      INUMB = I5*NLVAR(ISEG)
      CALL GASP(THICK,INUMB,1,ITREF(ISEG))
      REWIND IFILE3
      CALL DATUM(IFILE3,608,1,1,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 170
      IF (NLAY.GT.10) THEN
         WRITE(IFILE4,130)
  130    FORMAT(/,' THICKNESS DISTRIBUTION OF LAYERS WITH VARIABLE',
     1 ' THICKNESS. (LAYERS WITH CONSTANT THICKNESS NOT LISTED HERE)')
         WRITE (IFILE4,140) (ILVAR(I,ISEG),I=1,10)
  140 FORMAT(/,' POINT    T(',I2,')     T(',I2,')     T(',I2,')     T(',
     1 I2,')     T(',I2,')     T(',I2,')     T('I2,')     T(',I2,
     1 ')     T(',I2,')     T(',I2,')')
C23456789012345678901234567890123456789012345678901234567890123456789012
         DO 150 I=1,I5
  150    WRITE (IFILE4,160)I,(THICK(I,JJ),JJ=1,NVAR)
  160    FORMAT(I5,1P10E10.2)
      ELSE
         WRITE(IFILE4,132)
  132    FORMAT(/,' THICKNESS DISTRIBUTION OF LAYERS, STARTING WITH',
     1 ' LEFTMOST LAYER AS NUMBER 1')
         WRITE (IFILE4,142)
  142 FORMAT(/,' POINT    T(1)      T(2)      T(3)      T(4)      T(',
     1'5)      T(6)      T(7)      T(8)      T(9)      T(10)')
         DO 168 I=1,I5
            DO 161 J = 1,NLAY
               JJ = J + JOLD
               K = LTYPE(JJ)
               TTEMP(J) = T(K)
               ITVAR = ITSET(J)
               IF (ITVAR.NE.0) TTEMP(J) = THICK(I,ITVAR)
  161       CONTINUE
            WRITE (IFILE4,162)I,(TTEMP(JJ),JJ=1,NLAY)
  162       FORMAT(I5,1P10E10.2)   
  168    CONTINUE
      ENDIF
170   CONTINUE
   28 CONTINUE
C
      DO 30 J = 1,NLAY
C
      JJ = J + JOLD
      K = LTYPE(JJ)
      M = MATL(K)
C
      E1L(J) = E1(M)
      E2L(J) = E2(M)
       GL(J) =  G(M)
      U12L(J)= FNU(M)
      RHOL(J)= DENS(M)
       TL(J) =  T(K)
      ZETL(J)= ANGLE(K)
      A1L(J) = ALPHA1(M)*(-CURETP(M))
      A2L(J) = ALPHA2(M)*(-CURETP(M))
   30 CONTINUE
C
      JOLD = JOLD + NLAY
      NLAYER(ISEG) = NLAY
  100 CONTINUE
      TD = 0.
      DO 110 J = 1,NLAY
         JJ = J + JOLD - NLAY
         K = LTYPE(JJ)
         TL(J) = T(K)
         IF (ITSET(J).NE.0) THEN
            IVAR = ITSET(J)
            TL(J) = THICK(IPOINT,IVAR)
         ENDIF
         TD = TD + TL(J)
  110 CONTINUE
      Z1 = -Z
      Z2 = Z1 + TD
C BEG OCT 2004
      NTSGD = 0
C END OCT 2004
      TIO(IPOINT,1) = FUNCT(T1,T2,T3,Z1)
      TIO(IPOINT,2) = FUNCT(T1,T2,T3,Z2)
      BI = 0.5*TL(1)
      TEMP1 = TIO(IPOINT,1)
      DT = TIO(IPOINT,2) - TEMP1
      DO 120 J = 1,NLAY
         TEMP = TEMP1 + DT*BI/TD
         TEMPL= TEMP1 + DT*(BI-0.5*TL(J))/TD
         TEMPR= TEMP1 + DT*(BI+0.5*TL(J))/TD
         JJ = J + JOLD - NLAY
         K = LTYPE(JJ)
         M = MATL(K)
         A1L(J) = ALPHA1(M)*(-CURETP(M)+TEMP)
         A2L(J) = ALPHA2(M)*(-CURETP(M)+TEMP)
         A1L1(J)= ALPHA1(M)*(-CURETP(M)+TEMPL)
         A2L1(J)= ALPHA2(M)*(-CURETP(M)+TEMPL)
         A1L2(J)= ALPHA1(M)*(-CURETP(M)+TEMPR)
         A2L2(J)= ALPHA2(M)*(-CURETP(M)+TEMPR)
         IF (J.LT.NLAY) BI = BI + 0.5*(TL(J)+TL(J+1))
  120 CONTINUE
      ZREF = 0.
C BEG OCT 2011
      CALL CFBL(NLAY,ZREF,E1L,E2L,GL,U12L,RHOL,TL,ZETL,CX,
     1     A1L,A2L,THERMX,TMS,TD,A1L1,A1L2,A2L1,A2L2,
     1     CONDT,CON1L,CON2L,9)
C END OCT 2011
      SMPA = TMS
      DZREF = Z - TD/2.
      CALL CSHIFT(CX,DZREF,CNEW,THERMX,THMSFT)
C
      C11 = CNEW(1,1)
      C12 = CNEW(1,2)
      C13 = 0.
      C14 = CNEW(1,4)
      C15 = CNEW(1,5)
      C16 = 0.
      C22 = CNEW(2,2)
      C23 = 0.
      C24 = CNEW(2,4)
      C25 = CNEW(2,5)
      C26 = 0.
      C33 = CNEW(3,3)
      C34 = 0.
      C35 = 0.
      C36 = CNEW(3,6)
      C44 = CNEW(4,4)
      C45 = CNEW(4,5)
      C46 = 0.
      C55 = CNEW(5,5)
      C56 = 0.
      C66 = CNEW(6,6)
C
      THERM(IPOINT,1) = -THERMX(1)
      THERM(IPOINT,2) = -THERMX(2)
      THERM(IPOINT,3) =  THMSFT(4)
      THERM(IPOINT,4) =  THMSFT(5)
C
C BEG MAY 2009
      IF (NRS.EQ.0) THEN
         CSKIN(1,1,IPOINT) = C11
         CSKIN(1,2,IPOINT) = C12
         CSKIN(1,3,IPOINT) = C13
         CSKIN(1,4,IPOINT) = C14
         CSKIN(1,5,IPOINT) = C15
         CSKIN(1,6,IPOINT) = C16
         CSKIN(2,1,IPOINT) = C12
         CSKIN(2,2,IPOINT) = C22
         CSKIN(2,3,IPOINT) = C23
         CSKIN(2,4,IPOINT) = C24
         CSKIN(2,5,IPOINT) = C25
         CSKIN(2,6,IPOINT) = C26
         CSKIN(3,1,IPOINT) = C13
         CSKIN(3,2,IPOINT) = C23
         CSKIN(3,3,IPOINT) = C33
         CSKIN(3,4,IPOINT) = C34
         CSKIN(3,5,IPOINT) = C35
         CSKIN(3,6,IPOINT) = C36
         CSKIN(4,1,IPOINT) = C14
         CSKIN(4,2,IPOINT) = C24
         CSKIN(4,3,IPOINT) = C34
         CSKIN(4,4,IPOINT) = C44
         CSKIN(4,5,IPOINT) = C45
         CSKIN(4,6,IPOINT) = C46
         CSKIN(5,1,IPOINT) = C15
         CSKIN(5,2,IPOINT) = C25
         CSKIN(5,3,IPOINT) = C35
         CSKIN(5,4,IPOINT) = C45
         CSKIN(5,5,IPOINT) = C55
         CSKIN(5,6,IPOINT) = C56
         CSKIN(6,1,IPOINT) = C16
         CSKIN(6,2,IPOINT) = C26
         CSKIN(6,3,IPOINT) = C36
         CSKIN(6,4,IPOINT) = C46
         CSKIN(6,5,IPOINT) = C56
         CSKIN(6,6,IPOINT) = C66
      ENDIF
C END MAY 2009
C BEG DEC 2005
      IF (NRS.NE.0) CALL CFB1(ISEG,IPOINT,RAD,NWALL,Z,TD,I5,S,C,
     1                        RADD,PHORIG)
C END DEC 2005
C      
      RETURN
      END
C END APR 1992
C
C
C=DECK      RFIVELIB
C
C  THIS IS THE RFIVE LIBRARY (SOURCE FILE)
C
C
C
C=DECK      RFIVE
C BEG OCT 2005
      SUBROUTINE RFIVE
C END OCT 2005
C
C     PURPOSE IS TO RESTORE STUFF BY GASPING.  ALSO, TO GET TEMPLATES
C     OF MATRICES THAT GOVERN PREBUCKLING AND BUCKLING PROBLEMS.
C
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C BEG DEC 2005
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      COMMON/BWORK1/BBX(400000),ZZZ(10000),SSS(10000),DSS(10000),
     1 ZAX(30000),PHORIG(10000)
C END JUN 2009
C END FEB 2008
C END MAR 2007
C23456789012345678901234567890123456789012345678901234567890123456789012
C END OCT 2005
      COMMON/DFLAG/IDFLAG
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(198),TT(100,6)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/OUTP/NPRT
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/NCONDS/NCOND
      COMMON/INTRVL/INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
C BEG MAR 2007
C BEG JUN 2009
      COMMON/JUNCT/IFIX(598,6),IFX(598,6),ITYPE(598)
      COMMON/JUNCTB/IFIXB(598,6),IFXB(598,6),ITYPEB(598)
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/INSTAB/INDIC
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/BLK/IBLK,NGBK(20),NKF(20)
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/TOTPTS/M3
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
C BEG MAR 2007
      DIMENSION ILOC(30000),IW(10000)
C END MAR 2007
      COMMON/DSPACE/IDS
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/IZDTR/IZZ
C
C
C     NTOT = TOTAL NO. OF DISCRETE RINGS IN ENTIRE SHELL
      NTOT = KRING
C     PRINT OUT DISCRETE RING PROPERTIES, LINE LOADS, DISTRIBUTED LOADS
      CALL OUTIN2(NTOT,ARC,INDIC,NCOND)
      II = I2 + 2*NSEG
C     II = TOTAL NO. OF W-POINTS IN ENTIRE SHELL, INCLUDING FICT. PTS.
C     SUBROUTINE ISHIFT ADJUSTS CONSTRAINT CONDITION CALLOUTS TO
C     ALLOW FOR 'EXTRA' MESH POINTS INSERTED NEAR EDGES.
      CALL ISHIFT(JPLOT,KPLOT,I5)
      CALL ISHIFT(NCIRC,ITHETA,I5)
      CALL ISHIFT(NCOND,IFIX(1,1),I5)
      CALL ISHIFT(NCOND,IFIX(1,2),I5)
      CALL ISHIFT(NCOND,IFIXB(1,1),I5)
      CALL ISHIFT(NCOND,IFIXB(1,2),I5)
      IF (ISTOP0(1).EQ.0) GO TO 10
      ISEG = ISTOP0(1)/1000
      IPT = ISTOP0(1) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) ISTOP0(1) = ISTOP0(1) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) ISTOP0(1) = ISTOP0(1) + 2
10    IF (ISTOP1(1).EQ.0) GO TO 20
      ISEG = ISTOP1(1)/1000
      IPT = ISTOP1(1) - 1000*ISEG
      IF (IPT.GT.1.AND.IPT.LT.(I5(ISEG)-2)) ISTOP1(1) = ISTOP1(1) + 1
      IF (IPT.EQ.(I5(ISEG)-2)) ISTOP1(1) = ISTOP1(1) + 2
20    CONTINUE
      CALL ZGLOBE(ZAX,I5,NSEG,IFIX,NCOND,D2)
C BEG OCT 2005
      IF (ITESTX.EQ.1) THEN
C        CALL BLKDBG(1)
         CALL GASP(BBX,ISAVE(1),3,ISHL(1))
         WRITE(IFIL8X,'(A,/,A,/,4I6,1P,3E12.4)')
     1 ' Before CALL GASP(ZAX...) in RFIVE:',
     1 ' IDZ, INOTE, ISAVE(1), ISHL(1), BBX(585), BBX(3404), BBX(4983)',
     1   IDZ, INOTE, ISAVE(1), ISHL(1), BBX(585), BBX(3404), BBX(4983)
C        CALL IDGASP(IFIL8X)
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END OCT 2005
C BEG MAR 2007
      CALL GASP(ZAX,30000,1,IDZ)
C END MAR 2007
      WRITE(IFILE4,22) I2
   22 FORMAT(/,' GLOBAL (AXIAL,RADIAL) COORDINATES FOR ENTIRE MODEL.',/,
     1        ' NUMBER OF FINITE ELEMENTS IN ENTIRE MODEL, I2=',I4,/,
     1' ELEMENT NO.   GLOBAL AXIAL COORDINATE   GLOBAL RADIAL COORD.')
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG OCT 2005
      IF (ITESTX.EQ.1) THEN
         CALL GASP(BBX,ISAVE(1),3,ISHL(1))
         WRITE(IFIL8X,'(A,/,A,/,4I6,1P,3E12.4)')
     1 ' After CALL GASP(ZAX...) in RFIVE:',
     1 ' IDZ, INOTE, ISAVE(1), ISHL(1), BBX(585), BBX(3404), BBX(4983)',
     1   IDZ, INOTE, ISAVE(1), ISHL(1), BBX(585), BBX(3404), BBX(4983)
C        CALL BLKDBG(0)
C        CALL IDGASP(IFIL8X)
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END OCT 2005
      DO 25 I = 1,I2
C BEG JAN 1996
C BEG MAR 2007
         III = 10000 + I
C END MAR 2007
         WRITE(IFILE4, 24) I, ZAX(I), ZAX(III)
C END JAN 1996
   24    FORMAT(I7, 1PE25.8, 1PE25.8)
   25 CONTINUE
C
      IDFLAG = 0
28    CONTINUE
C FOLLOWING TWO STATEMENTS ADDED 17 AUG, 1985. (DYNAMIC REACTION)
      IZZ = 0
      CALL GASP(ZAX,I2,1,IZZ)
C
C     IF (INDIC.GT.2) GO TO 30
C     THIS CALL TO SKILIN GENERATES A 'TEMPLATE' OF THE PRESTRESS MATRIX
C
      CALL SKILIN(5,3,3,IFIX,ILOC,8,M2,IMAXP,IBLKP,NGBKP,NKFP,NSEG,I5,
     1NCOND,IFX,IROWCP,IW,ITYPE,KMAXP)
      IDFLAG = 1
C
C     PREBUCKLING GLOBAL EQUATION NO.S OF W-POINTS STORED
      CALL GASP(IW,II,1,IIWP)
C     LOCATION OF MAIN-DIAGONAL OF PREBUCKLING MATRIX STORED
      CALL GASP(ILOC,M2,1,ILOCP)
30    IF (INDIC.EQ.0) GO TO 40
C
C     THIS CALL TO SKILIN GENERATES A 'TEMPLATE' OF THE STABILITY OR
C     VIBRATION OR NONSYMMETRIC STRESS MATRICES. STIFFNESS, LOAD-
C     GEOMETRIC, AND MASS MATRICES ALL HAVE THE SAME TEMPLATE.
      CALL SKILIN(7,4,4,IFIXB,ILOC,11,M3,IMAXB,IBLK,NGBK,
     1NKF,NSEG,I5,NCOND,IFXB,IROWCB,IW,ITYPEB,KMAXB)
C
C     GLOBAL EQUATION NO.S OF W-POINTS STORED FOR BUCKLING OR VIB OR
C     NON-SYMMETRIC STRESS PROBLEMS
      CALL GASP(IW,II,1,IIWB)
C     LOCATION OF MAIN-DIAGONAL OF STABILITY,VIBRATION, OR NONSYMMETRIC
C     STRESS MATRICES IS STORED
      CALL GASP(ILOC,M3,1,ILOCB)
      IF (INDSIG.EQ.1) INDIC = 4
      INDSIG = 0
40    CONTINUE
50    FORMAT(/', DATA READ IN AND PROCESSED FOR THIS CASE.',
     1' LEAVING SUBROUTINE READIT')
      IF (NPRT.GT.0) CALL SR100T(2)
      RETURN
      END
C
C
C
C=DECK      OUTIN2
      SUBROUTINE OUTIN2(NTOT,ARC,INDIC,NCOND)
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/PAXTAX/PAXIAL(4,50),TAXIAL(3,50)
C     PRINTS OUT MORE INPUT DATA
      DIMENSION ARC(198)
      COMMON/NOHARM/NHARM
      COMMON/OUTP/NPRT
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      COMMON/RING2/GAM(198),GJ(198),
     1              YC(198), XC(198),E1(198),E2(198),PHI(200)
      COMMON/RMASS/RM(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/SHEARF/SHEAR(198)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/DTNR(198),DTMR(198),DTMRX(198)
      COMMON/FOSAVE/VSAVE(198),HSAVE(198),FMSAVE(198)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      INTEGER FLAGIT
      REAL IX,IY,IXY,IP
      FLAGIT = 0
C     WRITE OUT RING PROPERTIES FOR ALL SEGMENTS
      IF (NTOT.EQ.0) GO TO 200
      DO 10 I=1,NTOT
      VSAVE(I) = V(I)
      HSAVE(I) = HF(I)
10    FMSAVE(I) = FM(I)
      K = 0
      FLAGIT = 0
      DO 60 I=1,NSEG
      IF (NSTATN(I).EQ.0) GO TO 60
      WRITE (IFILE4,30)I
30    FORMAT(/,45X,' RING PROPERTIES FOR RINGS IN SEGMENT',I3)    
      WRITE (IFILE4,20)
C23456789012345678901234567890123456789012345678901234567890123456789012
20    FORMAT(/,'     STATION        ER         AREA        IY         ',
     1'  IX       IXY         E1         E2         GJ         RM     ',
     2'  RC',/)
      NS = NSTATN(I)
      IST = 0
      DO 50 J=1,NS
      ISTSVE = IST
      IST = IRING(I,J)
      IF (ISTSVE.LT.IST) GO TO 35
      WRITE(IFILE4,34)  K,IST,I
34    FORMAT(/,' RING NO. ',I2,', LOCATED AT MESH POINT NO. ',I2,
     1', SEGMENT NO. ',I2,' IS OUT OF ORDER.')
      WRITE(IFILE4,36)
36    FORMAT(' LOCATIONS OF RINGS MUST CORRESPOND TO MONOTONICALLY',
     1' INCREASING ARC LENGTHS WITHIN EACH SEGMENT.',/)
      FLAGIT = 1
35    K = K + 1
      WRITE (IFILE4,40)IST,ARC(K),ER(K),AREA(K),IY(K),IX(K),
     1IXY(K),E1(K),E2(K),GJ(K),RM(K),RC(K)
40    FORMAT(I5,11E11.4)
50    CONTINUE
60    CONTINUE
      DO 70 J=1,NTOT
      IF (RC(J).NE.0.0) GO TO 70
      RC(J) = 1.0
70    CONTINUE
C     WRITE OUT LOAD COMPONENTS FOR ALL SEGMENTS
C     WRITE OUT LINE LOADS FIRST
      IF (INDIC.NE.3) GO TO 80
      CALL OUTLL(4,3,ARC,NSEG,NTOT)
      GO TO 180
80    CONTINUE
C     WRITE OUT  SYMMETRICAL MECHANICAL AND THERMAL LINE LOADS
      WRITE (IFILE4,90)
90    FORMAT(/,30X,' MECHANICAL AND THERMAL LINE LOADS FOR SYMMETRIC',
     1' LOADING',/)
      WRITE (IFILE4,100)
100   FORMAT('         STATION           AXIAL LOAD          ',
     1'RADIAL LOAD',
     1'                MOMENT      THERMAL HOOP STRESS    THERMAL',
     1' MOMENT',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE (IFILE4,110)
110   FORMAT('           S(K)               V(K)                 H(K) ',   
     1'                    M(K)              TNR(K)              TMR(K)'
     1,/)
      DO 120 K=1,NTOT
120   WRITE (IFILE4,130)ARC(K),V(K),HF(K),FM(K),TNR(K),TMR(K)
130   FORMAT(6E20.8)                               
      WRITE (IFILE4,140)
140   FORMAT(/,45X,' SYMMETRIC LINE LOAD INCREMENTS',/)
      WRITE (IFILE4,150)
150   FORMAT('           S(K)              DV(K)                DH(K)',
     1'                   DM(K)             DTNR(K)             DTMR(K)'
     1,/)
      DO 160 K=1,NTOT
160   WRITE (IFILE4,130)ARC(K),STEP1(K),STEP2(K),STEP3(K),DTNR(K),
     1 DTMR(K)
      DO 170 K=1,NTOT
      V(K) = V(K) - STEP1(K)
      HF(K) = HF(K) - STEP2(K)
      FM(K) = FM(K) - STEP3(K)
170   CONTINUE
180   CONTINUE
      IF (INDIC.LT.3) GO TO 200
      DO 190 I=1,NTOT
      VSAVE(I) = V(I)
      HSAVE(I) = HF(I)
190   FMSAVE(I) = FM(I)
200   CONTINUE
      IF (INDIC.EQ.3) GO TO 220
      ITEST = NCOND*3 + (NSEG+1)*3 + 2*I2
C BEG MAR 2007
      IF (ITEST.LT.20001) GO TO 220
      WRITE (IFILE4,210)ITEST
210   FORMAT(/,' MAXIMUM DEGREES-OF-FREEDOM FOR PRESTRESS ANALYSIS',
     1' EXCEEDED.',/,' D.O.F. SHOULD BE LESS THAN 20000. ITEST=',I5,/)
      CALL ERREX
220   IF (INDIC.EQ.0) GO TO 240
      ITEST = NCOND*4 + (NSEG+1)*4 + 3*I2
      IF (ITEST.LT.30001) GO TO 240
      WRITE (IFILE4,230)ITEST
230   FORMAT(/,' MAXIMUM DEGREES-OF-FREEDOM FOR NONSYM. ANALYSIS',
     1' EXCEEDED.',/,' D.O.F. SHOULD BE LESS THAN 30000. ITEST=',I5,/)
C END MAR 2007
      CALL ERREX
240   IF (NTOT.LE.198) GO TO 260
      WRITE (IFILE4,250)NTOT
250   FORMAT(/,' TOTAL NUMBER OF DISCRETE RINGS EXCEEDS MAXIMUM(198)',
     1' ALLOWED. NTOT=',I3,/)
260   CONTINUE
      IF (NHARM.LT.99) GO TO 280
      WRITE (IFILE4,270)NHARM
270   FORMAT(/,' NUMBER OF STRESS HARMONICS EXCEEDS MAXIMUM ALLOWED',
     1' (99).',/,'  VALUE COMPUTED FROM NMIN,NMAX,INCR= ', I3,/)
      CALL ERREX
280   CONTINUE
      IF (FLAGIT.EQ.1) CALL ERREX
      RETURN
      END
C
C
C
C=DECK      OUTLL
      SUBROUTINE OUTLL(LK1,LK2,ARC,NSEG,NTOT )
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.
C     MECHANICAL AND THERMAL LINE LOADS PRINTED OUT.
C
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/SHEARF/SHEAR(198)
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/DTNR(198),DTMR(198),DTMRX(198)
      COMMON/WAVES/N0,N,MNIN,MMAX,INCR
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION ARC(198)
      WRITE (IFILE4,10)
10    FORMAT(/,10X,' MECHANICAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC',
     1' LOADING,  LOAD SYSTEM A')
      WRITE(IFILE4,40)
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE (IFILE4,20)
20    FORMAT('         STATION           AXIAL LOAD           SHEAR',
     1' LOAD         RADIAL LOAD            MOMENT')
      WRITE (IFILE4,30)
30    FORMAT('           S(K)               V(K)               ',
     1'SHEAR(K)              H(K)               M(K)'/)
40    FORMAT(' AXIAL DISTRIBUTION OF MECHANICAL LINE LOAD MULTIPLIERS',
     1/,' FOR ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM A',/)
      DO 50 K=1,NTOT
50    WRITE (IFILE4,60)ARC(K),V(K),SHEAR(K),HF(K),FM(K)
60    FORMAT(5E20.8) 
      WRITE (IFILE4,70)
70    FORMAT(/,20X,' THERMAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC',
     1' LOADING, LOAD SYSTEM A')
      WRITE(IFILE4,90)
      WRITE (IFILE4,80)
80    FORMAT('         STATION              TNR                   TMR',
     1'                     TMRX',/)
90    FORMAT(/,' AXIAL DISTRIBUTION OF THERMAL LINE LOAD MULTIPLIERS',
     1/,' FOR ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM A',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
      DO 100 K=1,NTOT
100   WRITE (IFILE4,105)ARC(K),TNR(K),TMR(K),TMRX(K)
105   FORMAT(4E20.8)
C
      WRITE(IFILE4,110)
  110 FORMAT(/,10X,' MECHANICAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC',
     1' LOADING, LOAD SYSTEM B')
      WRITE(IFILE4,140)
  140 FORMAT(' AXIAL DISTRIBUTION OF MECHANICAL LINE LOAD MULTIPLIERS',
     1/,' FOR ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM B'/)
      WRITE(IFILE4,20)
      WRITE(IFILE4,30)
      DO 150 K = 1,NTOT
  150 WRITE(IFILE4,60) ARC(K),VFIX(K), SHFIX(K),HFIX(K),FMFIX(K)
C
      WRITE(IFILE4,170)
  170 FORMAT(/,20X,' THERMAL LINE LOAD MULTIPLIERS FOR NONSYMMETRIC',
     1' LOADING, LOAD SYSTEM B')
      WRITE(IFILE4,190)
  190 FORMAT(/,' AXIAL DISTRIBUTION OF THERMAL LINE LOAD MULTIPLIERS',
     1/,' FOR ALL CIRCUMFERENTIAL WAVES, LOAD SYSTEM B'/)
      WRITE(IFILE4,80)
      DO 200 K = 1,NTOT
  200 WRITE(IFILE4,105) ARC(K),DTNR(K),DTMR(K),DTMRX(K)
C
      RETURN
      END
C
C
C
C=DECK      ZGLOBE
      SUBROUTINE ZGLOBE(Z,I5,NSEG,IFIX,NCOND,D2)
C BEG JUN 2009
      DIMENSION IFIX(598,6),Z(*),IBEGIN(295),ISEG(295),D2(50),I5(295)
C END JUN 2009
      COMMON/PLTSIG/IPLOT,JPLOT,KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      IF (NCOND.EQ.0) GO TO 100
      IBEGIN(1) = 1
      DO 10 I=2,NSEG
      I1 = I - 1
10    IBEGIN(I) = IBEGIN(I1) + I5(I1)
      DO 20 I=1,NSEG
20    ISEG(I) = 0
      ISEG(1) = 1
      K = 1
      ITHRU = 0
30    IF (K.GE.NSEG) GO TO 100
      ITHRU = ITHRU + 1
      IF (ITHRU.LT.1000) GO TO 34
      WRITE(IFILE4,32)
32    FORMAT(/,' SEGMENTS NOT ALL JOINED TOGETHER.',
     1' INSPECT JUNCTURE CONDITIONS CAREFULLY.')
C BEG JUN 2009
      WRITE(IFILE4,'(A,I6,/,A,I6)')
     1' Total number of constraint sites, NCOND=',NCOND,
     1' Total number of shell segments,    NSEG=',NSEG
      WRITE(IFILE4,'(A,I6)')
     1' Failed at shell segment number ',K
C END JUN 2009
      CALL ERREX
34    CONTINUE
      DO 90 I=1,NCOND
      IT1 = IFIX(I,1)/1000
      IT2 = IFIX(I,2)/1000
      IF (IT1.EQ.IT2) GO TO 90
      JSAVE1 = 0
      JSAVE2 = 0
      DO 50 J=1,NSEG
      IF (IT1.NE.ISEG(J)) GO TO 40
      JSAVE1 = J
40    IF (IT2.NE.ISEG(J)) GO TO 50
      JSAVE2 = J
50    CONTINUE
      IF (JSAVE1.NE.0.AND.JSAVE2.NE.0) GO TO 90
      IF (JSAVE1.EQ.0.AND.JSAVE2.EQ.0) GO TO 90
      IZ1 = IFIX(I,1) -IT1*1000
      IZ2 = IFIX(I,2) - IT2*1000
      I1 = IBEGIN(IT1)
      I2 = IBEGIN(IT2)
      D = D2(I)
      IF (IT1.GT.IT2) D = -D2(I)
      ISUM1 = I1 + IZ1 - 1
      ISUM2 = I2 + IZ2 - 1
      IF (JSAVE1.EQ.0) GO TO 70
      ZDIFF = Z(ISUM1) + D - Z(ISUM2)
      IEND = I2 + I5(IT2) - 1
      DO 60 II=I2,IEND
60    Z(II) = Z(II) + ZDIFF
      K = K + 1
      ISEG(K) = IT2
      GO TO 90
70    CONTINUE
      ZDIFF = - Z(ISUM1)- D + Z(ISUM2)
      IEND = I1 + I5(IT1) - 1
      DO 80 II=I1,IEND
80    Z(II) = Z(II) + ZDIFF
      K = K + 1
      ISEG(K) = IT1
90    CONTINUE
      GO TO 30
100   CONTINUE
      IF (JPLOT.EQ.0) GO TO 130
      II = 0
      K = 1
      DO 120 J=1,NSEG
      I5J = I5(J)
      DO 110 I=1,I5J
      II = II + 1
      ISTA = J*1000 + I
  105 CONTINUE
      IF (K.GT.JPLOT) GO TO 130
      IF (KPLOT(K).NE.ISTA) GO TO 110
      KPLOT(K) = II
      K = K + 1
      GO TO 105
110   CONTINUE
120   CONTINUE
130   CONTINUE
      RETURN
      END
C
C
C
C=DECK      SKILIN
      SUBROUTINE SKILIN(N,K,IC,IFIX,ILOC,     IBAND,IROW,IMAX,IBLK,
     1NGBK,NKF,NSEG,I5,NCOND,IFX,IROWC,IW,ITYPE,KMAX)
C BEG MAR 2007
      DIMENSION IFIX(598,6),IKF(30000),IRANK(295),NGBK(20),NKF(20),
     1          KMAX(20)
C END MAR 2007
      COMMON/OUTP/NPRT
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG MAR 2007
C BEG JUN 2009
      DIMENSION INDX(598),I5(295),ITYPE(598),ILOC(*)
      DIMENSION IW(*),IROWC(598),IEXP(598),IFX(598,6)
C END JUN 2009
C END MAR 2007
C     THIS SUBROUTINE CALCULATES SKYLINE AND BLOC CONFIGURATION OF PRE-
C     BUCKLING AND STABILITY STIFFNESS MATRICES.SKYLINE DEPENDS ON CON-
C     STRAINT CONDITION TYPE, WHICH CAN BE DETERMINED FROM THE ARRAY
C     IFIX(I,J). THE MESH POINT DESIGNATED BY IFIX(I,1) IS CONNECTED
C     TO THAT DESIGNATED BY IFIX(I,2), IN WHICH IFIX(I,2).GT.IFIX(I,1).
C     ELEMENTS OF THE VECTOR IFIX(I,2) ARE ARRANGED IN ASCENDING ORDER.
C     I5(J) CONTAINS THE NUMBER OF MESH POINTS AT WHICH ENERGY IS
C     EVALUATED IN THE JTH SEGMENT.
C
C     IFIX(I,3) THROUGH IFIX(I,6) CONTAIN EITHER ONE OR ZERO,
C     DEPENDING UPON WHETHER OR NOT CONSTRAINT CONDITIONS CORRES-
C     PONDING TO USTAR,VSTAR,WSTAR,AND BETA ARE TO BE ENFORCED.
C
C     CONSTRAINT CONDITION INDICATOR IFIX(I,J) MUST BE ORDERED PROPERLY
C     BEFORE MATRIX CONFIGURATION ESTABLISHED.
C
      IF (NCOND.GE.2) CALL SORT(IFIX,NCOND,2)
      I5TOT = 0
      IF (NCOND.EQ.0) GO TO 30
      DO 20 I=1,NCOND
      JSEG = IFIX(I,2)/1000
      IDIF = IFIX(I,2) - IFIX(I,1)
      IF (IDIF.EQ.1.OR.IDIF.EQ.2) WRITE(IFILE4,10 ) I
      IF (IDIF.EQ.1.OR.IDIF.EQ.2) CALL ERREX
C23456789012345678901234567890123456789012345678901234567890123456789012
10    FORMAT(/,' CONSTRAINT CONDITION NUMBER ',I3,' IS ILLEGAL.',
     1/,' THE FOLLOWING RULES FOR CONSTRAINT CONDITIONS EXIST...',
     1/,' 1. CONSTRAINTS TO GROUND MUST HAVE AT LEAST TWO INTERMED-',
     1/,'    IATE NODES THAT ARE NOT CONSTRAINED.',
     1/,' 2. IF SEVERAL SEGMENTS ARE JOINED AT ONE POINT, THE HIGHER-',
     1/,'    NUMBERED SEGMENTS SHOULD EACH BE ATTACHED TO THE LOWEST',
     1/,'    NUMBERED SEGMENT INVOLVED IN THE JUNCTION.',
     1/,' 3. IF THE END OF SEG.  J  IS CONNECTED TO ANY PREVIOUS POINT',
     1/,'    OR TO GROUND (B.C.), THEN THE BEGINNING OF SEGMENT  J + 1',
     1/,'    CANNOT BE CONNECTED TO THE END OF SEGMENT  J .',
     1/,' 4. IF A POINT  A  IS INVOLVED IN A JUNCTURE CONDITION WITH A',
     1/,'    PREVIOUS NON-ADJACENT POINT  B ,  THAT POINT  A  CANNOT',
     1/,'    ALSO BE CONSTRAINED TO GROUND.   NOTE THAT THE FIRST',
     1/,'    POINT IN SEG.  J+1  IS CONSIDERED TO BE ADJACENT TO THE',
     1/,'    LAST POINT IN SEG.  J .')
      IEXP(I) = 0
      ITYPE(I) = 0
20    IROWC(I) = 0
30    IROW = 0
      ITYPE(1) = 0
      IF (NCOND.EQ.0) IFIX(1,2) = 0
      IF (NCOND.EQ.0) IFX(1,1) = 0
      ITOT = 1
C BEG MAR 2007
      DO 40 I=1,30000
C END MAR 2007
40    IKF(I) = N-1
C     SKYLINE STORED IN ARRAY IKF(II)
      DO 310 J=1,NSEG
      DO 50 I=1,N
      IROWI = IROW + I
50    IKF(IROWI) = I - 1
C     FIRST GET NUMBER OF CONSTRAINT CONDITIONS WITHIN CURRENT SEGMENT.
      ITEST = J*1000 + I5(J)
      INDX(J) = 0
      IF (NCOND.EQ.0) GO TO 70
      DO 60 I=ITOT,NCOND
      IDIF = ITEST - IFIX(I,2)
      IF (IDIF.LT.0) GO TO 70
      INDX(J) = INDX(J) + 1
60    CONTINUE
70    CONTINUE
C     INDX(J) NOW EQUAL TO NO. OF CONSTRAINT CONDS. IN JTH SEGMENT.
      ITOTS = ITOT
      ITOT = ITOT + INDX(J)
C     ESTABLISH RANK OF EQUATION SYSTEM CORRESPONDING TO JTH SEGMENT.
      IRANK(J) = (N-K)*I5(J) + INDX(J)*IC + K
C     N = DIMENSION OF THE LOCAL ENERGY MATRIX.
C     K = OVERLAP DIMENSION OF THE LOCAL ENERGY MATRICES
C     IC= NUMBER OF CONSTRAINT CONDITIONS CORRESPONDING TO GIVEN IFIX(I,
C
      IF (INDX(J).EQ.0) GO TO 300
      ITOT1 = ITOT - 1
      DO 290 I=ITOTS,ITOT1
      IDIF = IFIX(I,2) - IFIX(I,1)
      IDIFB = ITEST - IFIX(I,2)
      IF (IDIF.NE.0) GO TO 80
C
C     IDIF=0 SIGNIFIES A SIMPLE 'ONE-SIDED' CONSTRAINT CONDITION RATHER
C     THAN A JUNCTURE CONDITION. DETERMINE NOW WHETHER CONDITION
C     CORRESPONDS TO SEGMENT END.
C
      ITYPE(I) = 1
      IF (IDIFB.EQ.0) ITYPE(I) = 2
C     ITYPE(I) = 1 SIGNIFIES SIMPLE CONSTRAINT CONDITION NOT AT END OF
C     SEGMENT.
C     ITYPE(I) = 2 SIGNIFIES BOUNDARY CONDITION AT END OF SEGMENT.
      GO TO 100
80    CONTINUE
      IF (IDIFB.EQ.0) ITYPE(I) = 3
C
C     ITYPE(I) = 3 SIGNIFIES SEGMENT END CONNECTED TO NON-ADJACENT
C     PREVIOUS POINT.
C
      IF (IDIFB.EQ.0) GO TO 100
      ITYPE(I) = 4
C     ITYPE(I) = 4 SIGNIFIES JUNCTURE COND. NOT AT END I5(J) OF JTH SEG.
C
      JMESH = IFIX(I,2) - J*1000
      IF (JMESH.EQ.1) GO TO 90
      GO TO 100
90    CONTINUE
C     JUNCTURE CONDITION AT BEGINNING OF JTH SEGMENT.
      L = IFIX(I,1)/1000
      LMESH = IFIX(I,1) - L*1000
      IF (LMESH.NE.I5(L)) GO TO 100
      IF ((J-L).EQ.1) ITYPE(I) = 5
C     ITYPE(I) = 5 SIGNIFIES END OF SEGMENT L JOINED TO BEGINNING
C     OF SEGMENT L+ 1.   (L+1 = J)
100   CONTINUE
C     NOW WE HAVE DETERMINED IRANK(J) AND ITYPE(I).
C     NOW DETERMINE THE SKYLINE ARRAY IKF(II) DEPENDING ON TYPE OF
C     CONSTRAINT CONDITION.
C
      IT = ITYPE(I)
      GO TO (130,110,130,130,260),IT
110   CONTINUE
C     BOUNDARY CONDITION AT END OF SEGMENT.....
C
      I1 = IROW + IRANK(J) - IC + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      DO 120 II=I1,I2
120   IKF(II) = II - I1 + N
      GO TO 290
130   CONTINUE
C     CONSTRAINT CONDITIONS CORRESPONDING TO ITYPE(I) = 1,3, AND 4....
C
C     FIRST CALCULATE ROW NUMBER OF ITYPE(I) = 1,3, AND 4 CONSTRAINTS..
C
      ICON = I - ITOTS
      JJMESH = 0
C     ICON = NO. OF CONSTRAINT PTS IN THE JTH SEG. PRECEDING THE CURRENT
C     CONSTRAINT POINT.
      JMESH = IFIX(I,2) - J*1000
      IF (JMESH.NE.1) GO TO 160
      IF (I.NE.ITOTS) GO TO 140
      I1 = I + 1
      JJMESH = IFIX(I1,2) - J*1000
      IF (JJMESH.EQ.1) ICON = 1
140   I1 = IROW + 1 + IC*ICON
      I2 = IROW + N + IC*ICON
      DO 150 II=I1,I2
150   IKF(II) = II - I1 + IC*ICON
160   CONTINUE
      I1 = IROW + IC*ICON + (N-K)*JMESH + K + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      IF (ITYPE(I).EQ.4.OR.ITYPE(I).EQ.1) IEXP(I) = I1
C     FOLLOWING TWO STATEMENTS APPLY IF ITYPE(I) = 1
      DO 170 II=I1,I2
170   IKF(II) = N + II - I1
      IF (ITYPE(I).EQ.1) GO TO 240
C     NOW GET BANDWIDTH OF ITYPE(I) = 3,4 BRANCH CONDITION EQUATIONS.
C     FIRST ESTABLISH HOW MANY CONSTRAINT CONDS. EXIST BETWEEN THE CUR-
C     RENT ONE , IFIX(I,2) AND THE CORRESPONDING IFIX(I,1).
C
      DO 180 II=1,NCOND
      IDIF = IFIX(I,1) - IFIX(II,2)
      IF (IDIF.LE.0) GO TO 190
180   CONTINUE
190   NUMB = I - II
      IIM = II - 1
      IF (JJMESH.EQ.1) NUMB = NUMB + 1
      IF (IIM.EQ.0) GO TO 200
      IF ((IFIX(I,1)-IFIX(IIM,2)).GT.2) GO TO 200
      IF (ITYPE(IIM).EQ.1.OR.ITYPE(IIM).EQ.4) NUMB = NUMB + 1
200   CONTINUE
C     NUMB IS THE NUMBER OF CONSTRAINT PTS SPANNED BY THE JUNCTURE COND.
C     NOT INCLUDING THE CURRENT CONSTRAINT COND.. NOW FIND THE NO. OF
C     ENERGY POINTS SPANNED BY THE JUNCTURE CONDITION.
C
      L = IFIX(I,1)/1000
      LMESH = IFIX(I,1) - L*1000
      JMESH = IFIX(I,2) - J*1000
      J1 = J - 1
      NPTS = JMESH - LMESH + 1
      IF (L.GT.J1) GO TO 220
      DO 210 II=L,J1
210   NPTS = NPTS + I5(II)
220   CONTINUE
C     NPTS IS NO. OF ENERGY PTS SPANNED BY JUNCTURE COND. CALCULATE
C     SEMI-BANDWIDTH OF JUNCTURE CONDITION.
      DO 230 II=I1,I2
      IKF(II) = (N-K)*NPTS + IC*NUMB + IC + K + (J-L)*K - 1 + II - I2
230   CONTINUE
      IF (ITYPE(I).EQ.3) GO TO 290
240   I1 = I2 + 1
      I2 = I1 + N - 2
      DO 250 II=I1,I2
250   IKF(II) = IBAND - 1
      GO TO 290
260   CONTINUE
C     ITYPE(I) = 5 JUNCTURE  (SEGMENTS IN SERIES).
C
      I1 = IROW + 1
      I2 = I1 + IC - 1
      IROWC(I) = I1
      DO 270 II=I1,I2
270   IKF(II) = II - I1 + N
      I1 = I2 + 1
      I2 = I1 + N - 1
      DO 280 II=I1,I2
280   IKF(II) = II - I1 + IC
290   CONTINUE
C     END OF LOOP ON I.
300   I5TOT = I5TOT + I5(J) + 2
      IROW = IROW + IRANK(J)
310   CONTINUE
C     END OF LOOP ON J  (LOOP OVER ALL SEGMENTS).
C
C     ALTER IRANK(J),INDX(J) CORRESPONDING TO CONSTRAINT CONDITIONS
C     OF THE TYPE ITYPE(I)=5
C
      IF (NCOND.EQ.0) GO TO 350
      DO 330 I=1,NCOND
      IF (ITYPE(I).EQ.5) GO TO 320
      GO TO 330
320   J = IFIX(I,2)/1000
      IF (J.EQ.1) WRITE (IFILE4,10)I
      IF (J.EQ.1) CALL ERREX
      IRANK(J) = IRANK(J) - IC
      IRANK(J-1) = IRANK(J-1) + IC
      INDX(J) = INDX(J) - 1
      INDX(J-1) = INDX(J-1) + 1
330   CONTINUE
C     SORT TO GET ARRAY IFX(50,2) WITH IFX(I,1) CONTAINING MONOTONICAL-
C     LY INCREASING IFIX(I,1) AND IFX(I,2) CONTAINING CORRESPONDING
C     VALUES OF IROWC(I), THE ROW NUMBERS OF THE CONSTRAINT EQUATIONS.
C
      DO 340 I=1,NCOND
      IFX(I,1) = IFIX(I,1)
      IFX(I,2) = IROWC(I)
      DO 340 J=3,6
340   IFX(I,J) = IFIX(I,J)
      IF (NCOND.GE.2) CALL SORT(IFX,NCOND,1)
350   CONTINUE
      CALL GETIW(NSEG,I5,IFIX,N,K,IC,IW,IRANK,INDX)
C
C
C     NOW GET BLOCKS FOR STORAGE ON DRUM.
C     IBLK = NUMBER OF BLOCKS
C     IROW = RANK OF EQUATION SYSTEM
C     IBAND = NOMINAL BANDWIDTH ( 8 FOR PREBUCKLING, 11 FOR STABILITY)
C     NGBK( ) = ROW NUMBER OF LAST EQUATION IN ()TH BLOCK
C     NKF( ) = LOWEST UNKNOWN NUMBER REFERENCED IN ()TH BLOCK
C     IMAX = MAXIMUM NUMBER OF ELEMENTS IN A BLOCK
C
      CALL GETBLK(IBLK,IROW,IMAX,IKF,NGBK,NKF,ILOC,IRANK,NSEG,KMAX)
C     WRITE OUT INPUT AND CALCULATED DATA FOR MATRIX CONFIGURATION.
C
      IF (NCOND.EQ.0) GO TO 400
      IF (N.EQ.5) WRITE (IFILE4,360)
360   FORMAT(/,' AXISYMMETRIC PRESTRESS INPUT CONSTRAINT CONDITIONS',
     1' FOLLOW',/)
      IF (N.EQ.7) WRITE (IFILE4,370)
370   FORMAT(/,' STABILITY,VIBRATION OR NON-SYMMETRIC STRESS INPUT',
     1' CONSTRAINT CONDITIONS FOLLOW',/)
      DO 390 I=1,NCOND
      ISEG1 = IFIX(I,1)/1000
      ISEG2 = IFIX(I,2)/1000
      IPT1 = IFIX(I,1) - ISEG1*1000
      IPT2 = IFIX(I,2) - ISEG2*1000
      WRITE (IFILE4,380)I,ISEG1,IPT1,ISEG2,IPT2,ITYPE(I)
      IF (IPT1.GT.I5(ISEG1)) WRITE (IFILE4,10)I
      IF (IPT2.GT.I5(ISEG2)) WRITE (IFILE4,10)I
      IF (IPT1.GT.I5(ISEG1).OR.IPT2.GT.I5(ISEG2)) CALL ERREX
380   FORMAT(' CONSTRAINT NO. ',I3,'  SEGMENT NO. ',I3,' POINT',I3,
     1' CONNECTED TO SEGMENT NO. ',I3,' POINT',I3,
     2' TYPE OF CONSTRAINT =',I2)
390   CONTINUE
400   WRITE (IFILE4,410)N,K,IC,IROW,IBLK
410   FORMAT(/,' LOCAL MATRIX DIMENSION=',I2,', OVERLAP=',  I2,
     1' NO. CONSTRAINT CONDS. PER CONSTRAINT POINT=',I2,
     2' SYSTEM RANK=',I5,' NUMBER OF BLOCKS=',I3,/)
      DO 430 I=1,NSEG
      WRITE (IFILE4,420)I,IRANK(I),INDX(I)
420   FORMAT(' NUMBER OF EQUATIONS ASSOCIATED WITH SEGMENT NO.',I3,
     1/,' EQUALS',I4,'; NO. OF CONSTRAINT PTS. EQUALS',I3)
430   CONTINUE
      DO 450 I=1,IBLK
      WRITE (IFILE4,440)I,NGBK(I),NKF(I),KMAX(I)
440   FORMAT(' BLOCK NUMBER=',I3,' LAST EQ. IN BLOCK=',I5,
     1' LOWEST UNK IN BLOCK=',I5,'. MAX. OFF-DIAGONAL WIDTH=',I5)
450   CONTINUE
      IF (NPRT.LT.3) GO TO 560
      WRITE (IFILE4,460)
460   FORMAT(/,' SKYLINE OF GLOBAL MATRIX FOLLOWS',/)
      DO 480 I=1,IROW
      WRITE (IFILE4,470)I,IKF(I),ILOC(I)
470   FORMAT(' EQUATION NUMBER',I5,' OFF DIAGONAL ELEMENTS=',I5,
     1' REL. POSITION OF M.D. IN BLOCK=',I5)
480   CONTINUE
      WRITE (IFILE4,490)
490   FORMAT(/,' EQUATION NUMBERS OF CONSTRAINT CONDITIONS FOLLOW',/)
      IF (NCOND.EQ.0) GO TO 520
      DO 510 I=1,NCOND
      WRITE (IFILE4,500)I,IC,IROWC(I),I,IEXP(I)
500   FORMAT(' CONSTRAINT NO. ',I3,' EQUA. NO. OF FIRST OF ',I3,
     1' CONSTRAINT EQUATIONS=',I5,' IEXP(',I5,')=',I6,
     2'.IF IEXP( ).NE.0, LOCAL MATRIX EXPLODED')
510   CONTINUE
520   WRITE (IFILE4,530)
530   FORMAT(/,' EQUATION NUMBERS CORRESPONDING TO W-POINTS FOLLOW',/)
      DO 550 I=1,I5TOT
      WRITE (IFILE4,540)I,IW(I)
540   FORMAT(' GLOBAL MESH POINT NO. ',I5,' CORRESPONDING EQUATION',
     1' NO.=',I5)
550   CONTINUE
560   CONTINUE
C     CHECK FOR LEGALITY OF CONSTRAINT CONDITIONS.
C
      IF (NCOND.LT.2) RETURN
      ISET = 0
      DO 570 I=2,NCOND
      JSEG = IFIX(I,2)/1000
      I1 = I - 1
      IDIF = IROWC(I) - IROWC(I1)
      IF (IABS(IDIF).GE.(IC+N)) GO TO 570
      ISET = 1
      WRITE(IFILE4,10 ) I
570   CONTINUE
      IF (ISET.EQ.1) CALL ERREX
      RETURN
      END
C
C
C
C=DECK      SORT
      SUBROUTINE SORT(IFIX,NCOND,M)
C     CALLED FROM SKILIN, WHICH IS CALLED FROM READIT
C     SORTS CONSTRAINT CONDITIONS AND ASSOCIATED DISCONTINUITIES D1,D2
C BEG MAR 2007
C BEG JUN 2009
      DIMENSION IFIX(598,6)
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
      COMMON/DFLAG/IDFLAG
      IF (M.EQ.1) GO TO 20
      DO 10 I=1,NCOND
      IF (IFIX(I,1).LE.IFIX(I,2)) GO TO 10
      ITEMP = IFIX(I,1)
      IFIX(I,1) = IFIX(I,2)
      IFIX(I,2) = ITEMP
10    CONTINUE
20    CONTINUE
      DO 50 L=2,NCOND
      K = NCOND + 2 - L
      DO 40 I=2,K
      I1 = I - 1
      IF (IFIX(I1,M).LE.IFIX(I,M)) GO TO 40
      DO 30 J=1,6
      ITEMP = IFIX(I1,J)
      IFIX(I1,J) = IFIX(I,J)
      IFIX(I,J) = ITEMP
30    CONTINUE
      IF (IDFLAG.EQ.1) GO TO 40
      DTEM = D1(I1)
      D1(I1) = D1(I)
      D1(I) = DTEM
      DTEM = D2(I1)
      D2(I1) = D2(I)
      D2(I) = DTEM
40    CONTINUE
50    CONTINUE
      RETURN
      END
C
C
C
C=DECK      GETIW
      SUBROUTINE GETIW(NSEG,I5,IFIX,N,K,IC,IW,IRANK,INDX)
C     CALLED FROM SKILIN, WHOSE TRACE IS READIT,MAIN.
C     STORES GLOBAL EQUATION NUMBERS CORRESPONDING TO W-COMPONENTS IN IW
C
C BEG MAR 2007
C BEG JUN 2009
      DIMENSION I5(295),IFIX(598,6),IW(*),IRANK(295),INDX(295)
C END JUN 2009
C END MAR 2007
      ICONDT = 0
      I5TOT = 0
      IROW = 0
      DO 30 ISEG=1,NSEG
      ICOND = ICONDT + 1
      ICONDT = ICONDT + INDX(ISEG)
      IW(I5TOT+1) = IROW + 1
      I5S = I5(ISEG)
      DO 20 I=1,I5S
      II = I5TOT + I + 1
      KIC = 0
      IF (ICOND.GT.ICONDT) GO TO 10
      JMESH = IFIX(ICOND,2) - ISEG*1000
      IF (I.EQ.(JMESH+2)) KIC = 1
      IF (I.EQ.(JMESH+2)) ICOND = ICOND + 1
10    IW(II) = IW(II-1) + N - K + KIC*IC
20    CONTINUE
      KIC = 0
      IF ((JMESH+1).EQ.I5S) KIC = 1
      IW(II+1) = IW(II) + N - K + KIC*IC
      I5TOT = I5TOT + I5S + 2
      IROW = IROW + IRANK(ISEG)
30    CONTINUE
      RETURN
      END
C
C
C
C=DECK      GETBLK
      SUBROUTINE GETBLK(IBLK,IROW,IMAX,IKF,NGBK,NKF,ILOC,IRANK,NSEG,KMAX
     1)
C
C     CALCULATES LAST ROW NO. OF EACH BLOCK,NGBK(J)
C                TOTAL NUMBER OF BLOCKS,IBLK
C                MINIMUM UNKNOWN NO. IN EACH BLOCK, NKF(J)
C                LOCATION ILOC(II) OF ALL MAIN DIAGONAL ELEMENTS
C
C
C     END OF BLOCK ALWAYS COINCIDES WITH END OF SEGMENT.
C
C BEG OCT 1999
      DIMENSION IKF(*),ILOC(*),NGBK(20),NKF(20),KMAX(20)
C END OCT 1999
      DIMENSION IRANK(295),ITOT(295),ILAST(295)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C
C     CALCULATE TOTAL NUMBER OF ELEMENTS IN EACH SEGMENT,ITOT(J),
C     AND THE EQUATION NUMBER OF THE LAST EQUATION IN EACH SEGMENT,
C     ILAST(J).
C
      II = 0
      DO 30 J=1,NSEG
      IRANKJ = IRANK(J)
      ITOT(J) = 0
      DO 10 I=1,IRANKJ
      II = II + 1
      ITOT(J) = ITOT(J) + IKF(II) + 1
10    CONTINUE
      IF (ITOT(J).GT.IMAX) WRITE (IFILE4,20)ITOT(J),J,IMAX
20    FORMAT(/,' BLOCK SIZE ',I5,' OF SEG. NO. ',I3,' EXCEEDS MAX.',
     1' ALLOWABLE ', I5,'. RUN ABORT.',/,
     1' REDUCE DEGREES OF FREEDOM OR RENUMBER SEGMENTS.',
     1/,' THIS MESSAGE USUALLY RESULTS FROM A JUNCTURE CONDITION',
     1/,' THAT SPANS MANY DEGREES OF FREEDOM ,OR FROM A GIVEN HIGH-',
     1/,' NUMBERED SEGMENT THAT IS CONNECTED AT SEVERAL DIFFERENT',
     1/,' POINTS ALONG ITS LENGTH TO LOWER NUMBERED SEGMENTS.',
     1/,' IN THE FORMER CASE RENUMBERING SEGMENTS HELPS. IN THE',
     1/,' LATTER CASE, DIVIDE UP THE OFFENDING SEGMENT INTO MORE',
     1/,' THAN ONE SEGMENT SUCH THAT THE SEVERAL JUNCTURE CONDI-',
     1/,' TIONS FALL INTO DIFFERENT HIGHER NUMBERED SEGMENTS.',/)
      IF (ITOT(J).GT.IMAX) CALL ERREX
      ILAST(J) = II
30    CONTINUE
C
C     GIVEN IMAX, CALCULATE TOTAL NUMBER OF BLOCKS, IBLK AND EQUATION
C     NUMBER OF LAST EQUATION IN BLOCKS, NGBK(J).
C
      ISUM = 0
      IBLK = 1
      J = 1
40    ISUM = ISUM + ITOT(J)
      IF (ISUM-IMAX) 60,60,50
50    J = J - 1
      ISUM = 0
      NGBK(IBLK) = ILAST(J)
      IBLK = IBLK + 1
60    J = J + 1
      IF (J.GT.NSEG) GO TO 70
      GO TO 40
70    CONTINUE
      NGBK(IBLK) = IROW
C
C     CALCULATE ILOC(II),NKF(J). .
C        ILOC(II) = LOCATION IN CURRENT BLOCK OF MAIN DIAGONAL
C        NKF(J) = MINIMUM UNKNOWN NUMBER IN JTH BLOCK
C
      II = 0
      ILASTJ = 0
      DO 90 J=1,IBLK
      NKF(J) = IROW
      ISUM = 0
      KMAX(J) = 0
      ILASTS = ILASTJ + 1
      ILASTJ = NGBK(J)
      DO 80 I=ILASTS,ILASTJ
      II = II + 1
      ISUM = ISUM + IKF(II) +1
      ILOC(II) = ISUM
      NKF(J) = MIN0(NKF(J),(II-IKF(II)))
      KMAX(J) = MAX0(KMAX(J),IKF(II))
80    CONTINUE
90    CONTINUE
      RETURN
      END
C
C
C
C=DECK      PRELIB
C
C  THIS IS THE PRE  LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      PRE
      SUBROUTINE PRE(BBB,B,TP,DI,PDIAG)
C
C     CALLED FROM MAIN, THIS SUBROUTINE BRINGS LINK 2 INTO CORE.
C     AXISYMMETRIC STRESSES AND DISPLACEMENTS ARE CALCULATED FROM A
C     THEORY IN WHICH GEOMETRIC (W-PRIME-SQUARED) NONLINEARITIES ARE
C     INCLUDED. THE ZEROTH ITERATION CORRESPONDS TO LINEAR THEORY AT
C     THE FIRST LOAD STEP ONLY. THE ENERGY METHOD IS USED FOR THE
C     CALCULATION. THE NEWTON-RAPHSON METHOD IS USED FOR SOLUTION OF THE
C     SIMULTANEOUS NONLINEAR ALGEBRAIC EQUATIONS WHICH RESULT FROM
C     MINIMIZATION OF THE ENERGY WITH RESPECT TO MESH POINT DISPLACEMENT
C     THE DEPENDENT VARIABLES ARE U AND W, DISPLACEMENTS TANGENTIAL
C     AND NORMAL TO THE UNDEFORMED SHELL MERIDIAN.
C
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DOUBLE PRECISION F,FTOT,B,TP,DI
C BEG OCT 2005
      DOUBLE PRECISION FTOTS
C BEG MAR 2007
      DIMENSION FTOTS(20000)
C END MAR 2007
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
C BEG MAR 2007
      DIMENSION BBB(*),F(20000),ILOC(20000),IW(10000)
      DIMENSION FTOT(20000),B(*),TP(*),PSMODE(10000,9)
C END MAR 2007
      COMMON/IFRHX/IFB,RHFIX(198),
     1             KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,IFIX
      COMMON/RGFCE/RHF(198)
      COMMON/ALLRNG/NSEG1,IPRE
      COMMON/INSTAB/INDIC
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/IDENT/IPRW(20)
      COMMON/LSEQ/ALODE(200)
      COMMON/BKSIZE/ IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/ERROR/ERR
      COMMON/OUTP/NPRT
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/ITERS/ITER
      COMMON/LSTEPS/ISTEP
C#if (_genopt_)
C BEG NOV 2010
      COMMON/CODWRX/CODWRD
      CHARACTER*20 CODWRD
C END NOV 2010
C#endif
C BEG OCT 2010
      COMMON/ITERS2/ITRSTP(200)
C#if (_genopt_)
      DOUBLE PRECISION FTOTX
      COMMON/FPREBX/FMAXST(200),FTOTX(20000)
      COMMON/IFPREB/IFTOTS
C#endif
C END OCT 2010
C BEG SEP 2005
      COMMON/ENDUVX/ENDUV,STRMAX,ARCLEN
      COMMON/PSTEPX/PSTEP(200),ENDUVS(200)
      COMMON/ISNAPX/ISNAP
      COMMON/WRDCLX/WRDCOL
      CHARACTER*45 WRDCOL
      CHARACTER*7 CNPRES
C END SEP 2005
      COMMON/DSPACE/IDS
      COMMON/STRATG/ISTRAT,IFACTR
C BEG MAR 2007
      DIMENSION PDIAG(*),DI(*),DS(10000)
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
C END MAR 2007
      COMMON/NCONDS/NCOND
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RESTRT/IREST
      COMMON/COLAPS/IDONE
10    FORMAT(/)                                                    
20    FORMAT(' P =',E15.6,', RHO(STEPM)=',E15.6,', MAXIMUM ALLOWABLE',
     1' VALUE OF RHO =',E15.6)
30    FORMAT(' RING NO. ',I3,', AXIAL LOAD/LENGTH =',E15.6,/,
     1' RADIAL LOAD/LENGTH =',E15.6,', MOMENT/LENGTH =',E15.6,/) 
40    FORMAT(/,' ****************************************',/)
50    FORMAT(/,' ****************************************',/)
60    FORMAT('  NUMBER OF NEWTON-RAPHSON ITERATIONS REQUIRED FOR',
     1'  CONVERGENCE = ITER =',I3)
70    FORMAT(I5,2E20.8)                                                
C BEG NOV 2005
      WRDCOL = '                                             '
      DIAMX0 = 10.E+28
C END NOV 2005
C BEG OCT 2005
      IFILEW = IFILE4
      IF (ITESTX.EQ.1) IFILEW = IFIL8X
C END OCT 2005
      IDONE = 0
      IF (NPRT.GT.1) WRITE(IFILE4,80)
80    FORMAT(/,' ENTERING SUBROUTINE PRE, AXISYMMETRIC PRESTRESS',
     1' CALCULATOR',/)
      IF (NPRT.GT.1) CALL SR100T(2)
      CALL GASP(ILOC,M2,3,ILOCP)
      II = I2 + 2*NSEG
      CALL GASP(IW,II,3,IIWP)
      CALL GASP(DS,I2,3,IDS)
      IF (INOTE.EQ.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      ISTEP = 1
      IF (INDIC.EQ.0) ISTEP = 0
90    CONTINUE
      M22 = M2*2
      IF (KNT.NE.0) GO TO 110
C
C     M2 IS THE RANK (DEGREES OF FREEDOM) OF THE SYSTEM.
C
      DO 100 I=1,M2
100   FTOT(I) = 0.0
C#if (_genopt_)
C BEG OCT 2010
      IF (IFTOTS.NE.0) THEN
         CALL MOVER(FTOTX,1,FTOT,1,M22)
      ENDIF
C END OCT 2010
C#endif
      IF (IREST.EQ.0) GO TO 120
C
C     PREVIOUS CONVERGED SOLUTION STORED ON DRUM.
C
110   IF (INDIC.NE.0.OR.IREST.NE.0) CALL GASP(FTOT,M22,3,IFTOT)
      IF (ISTRAT.EQ.0) GO TO 125
      IF (IFACTR.EQ.0) GO TO 125
      IF (INDIC .NE.0) GO TO 125
      IF (   KNT.EQ.0) GO TO 125
      FACT  = IFACTR
      IF (ITER.LT.3) CALL CHANGL(FACT ,NSEG1)
125   CONTINUE
120   ITER = 0
C
C     LOAD INCREMENTS APPLIED IN SUBROUTINE LOADS.
C
      CALL LOADS(P,RHO,NSEG1)
C     WHEN LOAD GREATER THAN MAXIMUM ALLOWABLE LOAD (SEE DEFINITION OF
C     INPUT PARAMETER PMAX), CALCULATIONS TERMINATE.
C
      IF (INDIC.EQ.0.AND.ABS(RHO).GT.ABS(RHOM)) GO TO 320
      IF (INDIC.EQ.-2.AND.ABS(RHO).GT.ABS(RHOM)) GO TO 320
C BEG SEP 2005
C     IF (ISTEP.EQ.25) GO TO 390
      IF (ISTEP.GT.199) THEN
         WRITE(IFILE4,'(/,A)')
     1 ' MAXIMUM NUMBER OF LOAD STEPS REACHED; TERMINATING.'
         IDONE = 1
         GO TO 390
      ENDIF
C END SEP 2005
      IF (INDIC.EQ.0) ISTEP = ISTEP + 1
C BEG SEP 2005
      PSTEP(ISTEP) = P
C END SEP 2005
      ALODE(ISTEP) = RHO
      IF (INDIC.EQ.-1) ALODE(ISTEP) = P
      WRITE(IFILE4,50)
      WRITE(IFILE4,380) P,TEMP,OMEGA
      IF (NSEG1.EQ.0) GO TO 130
      WRITE(IFILE4,30)(I,V(I),HF(I),FM(I),I=1,NSEG1)
      WRITE(IFILE4,40)
130   CONTINUE
C
C     PREBUCKLING EQUATIONS SET UP IN APREB. THE COEFFICIENT MATRIX IS
C     REAL AND SYMMETRIC. NOT POSITIVE DEFINITE, HOWEVER, BECAUSE OF
C     LAGRANGE MULTIPLIERS INTRODUCED FOR SATISFACTION OF CONSTRAINT
C     CONDITIONS. THIS IS THE BEGINNING OF THE ITERATION LOOP FOR THE
C     NONLINEAR SOLUTION.
C
      IF (NPRT.GT.1) WRITE(IFILE4,140)ITER
140   FORMAT(' START CALCULATION OF PRESTRESS STIFFNESS MATRIX FOR',
     1' NEWTON ITERATION NO.',I3)
      IF (NPRT.GT.1) CALL SR100T(2)
C     CALL OVERLAY(5HBOSOR,2,1)
C BEG OCT 2005
      NPRTSV = NPRT
C     IF (ITESTX.EQ.1) NPRT = 3
      CALL PRE1(BBB,IW,DS,ILOC,FTOT,F,B,IFILEW)
      IF (ITESTX.EQ.1) NPRT = NPRTSV
C     IF (NPRT.GT.1) WRITE(IFILE4,150)ITER
                     WRITE(IFILEW,150)ITER
C END OCT 2005
150   FORMAT(' PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION',
     1' NO. ',I3,'. START FACTORING AND SOLVING')
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (NPRT.LT.3) GO TO 170
      WRITE(IFILE4,160)ITER
160   FORMAT(/,' RIGHT-HAND-SIDE FOR ',I2,'TH ITERATION',/)          
      WRITE(IFILE4,200)(F(I),I=1,M2)
C
C     FACTR FACTORS THE COEFFICIENT MATRIX IN BLOCKS.
C
170   CONTINUE
C BEG OCT 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
C BEG NOV 2005
C     IF (ISTEP.EQ.13.AND.(STEPM/STEPMI).LT.0.2.AND.ITER.GT.1)
C    1  ITESTX = 1
C END NOV 2005
C     IF (ITESTX.EQ.1) WRITE(IFIL8X,'(A,I3)')
C    1' before FACTR: ITESTX=',ITESTX
C     IF (ITESTX.EQ.1) CALL EXIT
      CALL FACTR(TP,B,IPRW,DET,NEX,IBLKP,NGBKP,NKFP,ILOC,PDIAG,DI,KMAXP,
     1 IFILEW,ITESTX,IABORT,DIAMX0)
      WRITE(IFILEW,'(A,I4,A,I4)')' Factoring done for iteration',ITER,
     1'; Load step, ISTEP=',ISTEP
      IF (ITESTX.EQ.1) WRITE(IFIL8X,'(A,I3)')
     1' after FACTR: ITESTX=',ITESTX
C     IF (ITESTX.EQ.1) CALL EXIT
C BEG NOV 2005
C     IABORT = 0
      IF (ITER.EQ.0) THEN
         DIAMAX = 0.
         DO 175 I = 1,M2
            DIAMAX = MAX(DIAMAX,ABS(PDIAG(I)))
  175    CONTINUE
         IF (INDIC.NE.0.AND.ITER.EQ.0) DIAMX0 = DIAMAX
         IF ((STEPM/STEPMI).GT.0.1.AND.ITER.EQ.0) DIAMX0 = DIAMAX
      ENDIF
C
C     IF (DIAMAX.GT.DIAMX0*10.E+06) THEN
C        WRITE(IFILEW,'(/,A,/,A,1P,E12.4,/,A,1P,E12.4,/,A,/,A)')
C    1 ' ********** ALMOST SINGULAR STIFFNESS MATRIX **********',
C    1 ' Maximum diagonal of factored matrix at iteration 0=',DIAMX0,
C    1 ' Maximum diagonal of factored matrix, current iter.=',DIAMAX,
C    1 ' Newton iterations now aborting.',
C    1 ' ********** ALMOST SINGULAR STIFFNESS MATRIX **********'
C        IABORT = 1
C     ENDIF
C END NOV 2005
C END OCT 2005
C
C     S0LVE SOLVES THE SYSTEM IN BLOCKS.
C
      CALL SOLVE(B,F,IBLKP,IPRW,NGBKP,ILOC,PDIAG,M2,1)
C BEG OCT 2005
C     IF (NPRT.GT.1) WRITE(IFILE4,180)ITER
                     WRITE(IFILEW,180)ITER
C END OCT 2005
180   FORMAT(' FACTORING AND SOLVING COMPLETED FOR PRESTRESS',
     1' ITERATION NO.',I3)
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (NPRT.LT.3) GO TO 210
      WRITE(IFILE4,190)ITER
190   FORMAT(/,' RESIDUE FOR ITERATION NO.',I3,/)                  
      WRITE(IFILE4,200)(F(I),I=1,M2)
200   FORMAT(1P10E12.4)                                                
210   NFAIL = 0
      FMAX = 0.0
      DO 220 I=1,M2
220   FTOT(I) = FTOT(I) -F(I)
      I = 0
230   I = I + 1
      DO 240 J=1,NCOND
      IF (I.NE.IROWCP(J)) GO TO 240
      I = I + 3
240   CONTINUE
      IF (I.GT.M2) GO TO 260
C
C     CONVERGENCE TESTED.
C
250   FORMAT(2P10E11.3)
      FFTOT = FTOT(I)
      FMAX = AMAX1(ABS(FFTOT),FMAX)
      IF (ITER.EQ.0) GO TO 230
      IF (ABS(FFTOT)/FMAXS.LT.0.1) GO TO 230
      DELP = ABS(F(I)/FTOT(I))
C     CONVERGENCE CRITERION
      IF (DELP.GT.ERR) NFAIL = 1
      GO TO 230
260   CONTINUE
C BEG NOV 2006
      WRITE(IFILEW,'(A,I3,A,1P,E12.4)')
     1 ' ITERATION NO.',ITER,' MAXIMUM DISPLACEMENT=',FMAX
C END NOV 2006
      IF (ITER.EQ.0) NFAIL = 1
      FMAXS = FMAX
      IF (FMAXS.EQ.0.0) FMAXS = 1.0
      IF (NFAIL.EQ.0) GO TO 280
      ITER = ITER + 1
C BEG OCT 2010
C     IF (ITER.GT.10) GO TO 270
      IF (ITER.GT.20) GO TO 270
C END OCT 2010
C BEG OCT 2005
      IF (IABORT.EQ.1) GO TO 270
C END OCT 2005
      GO TO 130
270   CONTINUE
      IF (INDIC.GT.0) GO TO 360
      IF (INDIC.EQ.-1) GO TO 360
C
C     IF PREBUCKLING SOLUTION DOES NOT CONVERGE WITHIN TEN ITERATIONS,
C     GO BACK TO LAST LOAD LEVEL, REDUCE STEP SIZE BY A FACTOR OF TEN,
C     AND TRY AGAIN.
C
#if (_genopt_)
C BEG OCT 2010
C     CALL UNLOAD(V,HF,FM,NSEG1)
      IABORT = 0
C BEG NOV 2010
      CALL UNLOAD(V,HF,FM,NSEG1,IABORT,CODWRD)
C END NOV 2010
      IF (IABORT.EQ.2) GO TO 340
C END OCT 2010
#else
      CALL UNLOAD(V,HF,FM,NSEG1)
#endif
C BEG NOV 2005
C     IF (INDIC.EQ.0) ISTEP = ISTEP - 1
      IF (INDIC.EQ.0) ISTEP = ISTEP - 2
      CALL MOVER(FTOTS,1,FTOT,1,M22)
C END NOV 2005
C     WHEN LOAD INCREMENT IS TOO SMALL CALCULATIONS TERMINATE
C     ERR IS SET INTERNALLY AT 0.001, AND MAY BE TOO SMALL IF CALCULA-
C     TIONS ARE PERFORMED IN SINGLE PRECISION. USER BEWARE OF THIS.
C
C BEG OCT 2005
      WRITE(IFILE4,'(A,1P,3E12.4,I8)')
     1' STEPM, STEPMI, ERR, ISTEP=',STEPM, STEPMI, ERR, ISTEP
C     IF ((STEPM/STEPMI).LT.ERR) GO TO 340
      IF ((STEPM/STEPMI).LE.ERR) GO TO 340
      IF (IABORT.EQ.1) GO TO 340
C END OCT 2005
      IF (IFTOT.NE.0) GO TO 90
      KNT = 0
      GO TO 90
280   CONTINUE
C BEG NOV 2005
      IF (IFTOT.NE.0.AND.ISTEP.GE.2) CALL GASP(FTOTS,M22,3,IFTOT)
C END NOV 2005
      CALL GASP(FTOT,M22,1,IFTOT)
      WRITE(IFILE4,60)ITER
C BEG OCT 2010

      IF (INDIC.NE.1) THEN
         ITRSTP(ISTEP) = ITER
C#if (_genopt_)
         FMAXST(ISTEP) = FMAX
C#endif
      ENDIF

      IF (INDIC.EQ.1) THEN
         IF (IFIX.EQ.1) THEN
            ITRSTP(1) = ITER
C#if (_genopt_)
            FMAXST(1) = FMAX
C#endif
         ENDIF
         IF (IFIX.EQ.0) THEN
            ITRSTP(2) = ITER
C#if (_genopt_)
            FMAXST(2) = FMAX
C#endif
         ENDIF
      ENDIF
C END OCT 2010
      IF (INDIC.EQ.1.AND.ITER.GT.2) WRITE(IFILE4,50)
      IF (INDIC.EQ.1.AND.ITER.GT.2) WRITE(IFILE4,285)
      IF (INDIC.EQ.1.AND.ITER.GT.2) WRITE(IFILE4,40)
  285 FORMAT(' WARNING...WARNING...WARNING...WARNING...WARNING',/,
     1' PREBUCKLING BEHAVIOR IS RATHER NONLINEAR (NOTE NUMBER OF',/,
     1' NEWTON-RAPHSON ITERATIONS REQUIRED) AT THE CURRENT LOAD.',/,
     1' IF THE NONLINEAR BEHAVIOR ARISES FROM LOAD SYSTEM "A", AND',/,
     1' IF YOU WANT TO FIND BIFURCATION BUCKLING ESTIMATES APPRO',/,
     1' PRIATE TO LINEAR THEORY, REDUCE THE LOADS IN LOAD SYSTEM "A"',/,
     1' BY AN ORDER OF MAGNITUDE OR SO.  IF YOU WANT TO FIND',/,
     1' BIFURCATION BUCKLING LOADS INCLUDING NONLINEAR PREBUCKLING',/,
     1' EFFECTS IN A RIGOROUS MANNER, USE ANALYSIS TYPE INDIC = -2')
C23456789012345678901234567890123456789012345678901234567890123456789012
290   CONTINUE
      IF (NPRT.GT.1) WRITE(IFILE4,300)
300   FORMAT(' START CALCULATION OF PRESTRESS FROM DISPLACEMENT',
     1' SOLUTION VECTOR')
      IF (NPRT.GT.1) CALL SR100T(2)
C     CALL OVERLAY(5HBOSOR,2,2)
      CALL PRE2(BBB,IW,DS,FTOT,PSMODE)
      IF (NPRT.GT.1) WRITE(IFILE4,310)
310   FORMAT(' STRESSES OR STRESS RESULTANTS CALCULATED AND STORED',
     1' ON DISK')
      IF (NPRT.GT.1) CALL SR100T(2)
C
C BEG NOV 2005
      IF (P.NE.0.0.AND.ISTEP.GT.5) THEN
         DIFF1 = ABS(ENDUVS(2) - ENDUVS(1))/ABS(PSTEP(2) - PSTEP(1))
         DO 315 JSTEP = 3,ISTEP
            I1 = JSTEP - 1
            DELTAP = PSTEP(JSTEP) - PSTEP(I1)
            DIFF = ABS(ENDUVS(JSTEP) - ENDUVS(I1))/ABS(DELTAP)
            IF (DIFF.GT.20.0*DIFF1) THEN
               WRITE(IFILE4,'(A,I3,A,/,A,1P,E12.4,/,A,1P,E12.4,/,A)')
     1 ' **** NOTE: Probable snap-through at load step',JSTEP,' ****',
     1 ' End displacement before snap-through, ENDUVS =', ENDUVS(I1),
     1 ' End displacement after  snap-through, ENDUVS =', ENDUVS(JSTEP),
     1 ' This axisymmetric prebuckling run is terminating now.'
               ISNAP = I1 
               ISTEP = ISNAP
               IDONE = 1
               GO TO 390
            ENDIF
  315    CONTINUE
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END NOV 2005
C
      IF (INDIC.NE.0) GO TO 390
      IREST = 0
      REWIND IFILE9
c open/close statments added 6/91
C BEG SEP 1999
C     OPEN(UNIT=IFILE9, FORM='UNFORMATTED', STATUS='UNKNOWN')
      CALL STOCM1(IFILE9)
      CALL STOCM2(IFILE9)
C     CLOSE(IFILE9)
C END SEP 1999
c end 6/91 changes
C
      GO TO 90
320   WRITE(IFILE4,330)
330   FORMAT(/,' LOAD EXCEEDS MAXIMUM ALLOWABLE VALUE.',
     1' CASE TERMINATED.')
      IDONE = 1
      GO TO 390
C BEG SEP 2005
340   CONTINUE
C BEG NOV 2005
      CALL CONVRF(PSTEP(ISTEP),CNPRES)
#if (_genopt_)
C BEG OCT 2010
      IF (IABORT.NE.2) THEN
       WRDCOL= 'SHELL COLLAPSES AXISYMMETRICALLY AT P='//CNPRES
      ELSE
       WRDCOL= 'INITIAL LOADS TOO HIGH FOR THIS STRUCT'//CNPRES
      ENDIF
C END OCT 2010
#else
      WRDCOL = 'SHELL COLLAPSES AXISYMMETRICALLY AT P='//CNPRES
#endif
C END NOV 2005
      WRITE(IFILE4,350)
C END SEP 2005
350   FORMAT(/,20X,' SHELL COLLAPSES AXISYMMETRICALLY',/)
360   CONTINUE
C BEG NOV 2005
#if (_genopt_)
C BEG OCT 2010
      IF (IABORT.NE.2) THEN
       CALL CONVRF(PSTEP(ISTEP),CNPRES)
       WRDCOL= 'SHELL COLLAPSES AXISYMMETRICALLY AT P='//CNPRES
       WRITE(IFILE4,'(A)') WRDCOL
      ENDIF
C END OCT 2010
#else
      CALL CONVRF(PSTEP(ISTEP),CNPRES)
      WRDCOL = 'SHELL COLLAPSES AXISYMMETRICALLY AT P='//CNPRES
      WRITE(IFILE4,'(A)') WRDCOL
#endif
C END NOV 2005
      IDONE = 1
      WRITE(IFILE4,370)
#if (_genopt_)
C BEG NOV 2010
370   FORMAT(/,' NO CONVERGENCE IN PREBUCKLING ANALYSIS AFTER 20',
     1' NEWTON ITERATIONS. LOADS FOLLOW',/)
C END NOV 2010
#else
370   FORMAT(/,' NO CONVERGENCE IN PREBUCKLING ANALYSIS AFTER 10',
     1' NEWTON ITERATIONS. LOADS FOLLOW',/)
#endif
      WRITE(IFILE4,380)P,TEMP,OMEGA
380   FORMAT(/,' PRESSURE MULTIPLIER, P=',1PE15.6,
     1', TEMPERATURE MULTIPLIER,TEMP =',1PE15.6,/,
     1' ANGULAR VELOCITY, OMEGA=',1PE15.6,/)
      IF (NSEG1.NE.0) WRITE(IFILE4,30)(I,V(I),HF(I),FM(I),I=1,NSEG1)
390   CONTINUE
C BEG SEP 2005
      IF (IDONE.EQ.1.AND.P.NE.0.0) WRITE(IFILE4,'(A,/,(1P,5E12.4))')
     1' Pressure multiplier, P, for all load steps=',
     1 (PSTEP(I),I=1,ISTEP)
      IF (IDONE.EQ.1) WRITE(IFILE4,'(A,/,(1P,5E12.4))')
     1' End displacement, ENDUVS, for all load steps=',
     1 (ENDUVS(I),I=1,ISTEP)
C BEG DEC 2005
C  Write in a format suitable for plotting load-deflection curve
C  with PLOTPS...
      IF (IDONE.EQ.1.AND.P.NE.0.0) THEN
         WRITE(IFILE4,'(A,/,A,/,A)')
     1 ' The following data are written in a format suitable',
     1 ' for use as input data for the PLOTPS utility by Bill Bushnell',
     1 ' PLOTPS for LINUX is located in /home/progs/bin/plotps.linux'
C23456789012345678901234567890123456789012345678901234567890123456789012
         WRITE(IFILE4,'(A)')' End Displacement   Pressure'
         WRITE(IFILE4,'(A)')'    ENDUVS           PSTEP'
         DO 393 I = 1,ISTEP
            WRITE(IFILE4,'(1P,2E14.6)') ENDUVS(I),PSTEP(I)
393      CONTINUE
         WRITE(IFILE4,'(A)') ' End of input data for PLOTPS'
      ENDIF
C END DEC 2005
C BEG NOV 2005
C     IF (IDONE.EQ.1.AND.ISTEP.GT.2.AND.P.NE.0.0) THEN
C        DIFF1 = ABS(ENDUVS(2) - ENDUVS(1))/ABS(PSTEP(2) - PSTEP(1))
C        DO 400 I = 3,ISTEP
C           I1 = I - 1
C           DELTAP = PSTEP(I) - PSTEP(I1)
C           DIFF = ABS(ENDUVS(I) - ENDUVS(I1))/ABS(DELTAP)
C           IF (DIFF.GT.20.0*DIFF1) THEN
C              WRITE(IFILE4,'(A,I3,A,/,A,1P,E12.4,/,A,1P,E12.4)')
C    1    ' **** NOTE: Probable snap-through at load step',I,' ****',
C    1    ' End displacement before snap-through, ENDUVS =', ENDUVS(I1),
C    1    ' End displacement after  snap-through, ENDUVS =', ENDUVS(I)
C              ISNAP = I1
C              ISTEP = ISNAP
C              GO TO 410
C           ENDIF
C 400    CONTINUE
C 410    CONTINUE
C     ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END SEP 2005
      RETURN
      END
C
C
C
C=DECK      LOADS
      SUBROUTINE LOADS(P,RHO,NTOT)
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN
C     APPLIED LOADS FOR NONLINEAR AXISYMMETRIC ANALYSIS ESTABLISHED FOR
C     NEXT LOAD STEP.
C
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/INSTAB/INDIC
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/SPACE/HC(295)
      COMMON/ROTATN/OMEGA,DOMEGA
C
      P = P + STEP
      TEMP = TEMP + DTEMP
      OMEGA = OMEGA + DOMEGA
      IF (NTOT.EQ.0) GO TO 20
      DO 10 I=1,NTOT
      V(I) = V(I) + STEP1(I)
      HF(I) = HF(I) + STEP2(I)
      FM(I) = FM(I) + STEP3(I)
10    CONTINUE
20    RHO = RHO + STEPM
      RETURN
      END
C
C
C
C=DECK      UNLOAD
#if (_genopt_)
C BEG OCT 2010
C     SUBROUTINE UNLOAD(V,HF,FM,K)
C BEG NOV 2010
      SUBROUTINE UNLOAD(V,HF,FM,K,IABORT,CODWRD)
C END NOV 2010
C END OCT 2010
#else
      SUBROUTINE UNLOAD(V,HF,FM,K)
#endif
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN.
C     LOADS ARE RESET BECAUSE PREBUCKLING SOLUTION FAILED TO
C     CONVERGE AT LAST LOAD STEP.
C     THIS SUBROUTINE NEEDED IF FOR PREVIOUS LOAD+INCREMENT THE
C     PREBUCKLING SOLUTION FAILED TO CONVERGE WITHIN 10 ITERATIONS.
C#if (_genopt_)
C BEG NOV 2010
C "CODWRD" introduced to be able to provide a special strategy
C for the generic case, "BALLOON".
      CHARACTER*20 CODWRD
C END NOV 2010
C BEG OCT 2010
      COMMON/PSTEPX/PSTEP(200),ENDUVS(200)
      COMMON/WRDCLX/WRDCOL
      CHARACTER*45 WRDCOL
      CHARACTER*7 CNPRES
C END OCT 2010
C#endif
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      DIMENSION V(198),HF(198),FM(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/MAXSTP/STEPM,STEPMI,RHOM
      COMMON/INSTAB/INDIC
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/LSTEPS/ISTEP
      COMMON/ROTATN/OMEGA,DOMEGA
C#if (_genopt_)
C BEG NOV 2010
C  If the code word is "BALLOON" we do not want to unload,
C  and we want to set WRDCOL to "INITIAL..." and IABORT = 2
      ILET = INDEX(CODWRD,'BALLOON')
      IF (ILET.NE.0) THEN
         CALL CONVRF(PSTEP(ISTEP),CNPRES)
         WRDCOL = 'INITIAL LOADS TOO HIGH FOR THIS STRUCT'//CNPRES
         IABORT = 2
         RETURN
      ENDIF
C END NOV 2010
C#endif
      IF (INDIC.EQ.-2) GO TO 10
C BEG NOV 2005
C     IF (ISTEP.NE.1) GO TO 10
      IF (ISTEP.GE.3) GO TO 10
C END NOV 2005
      WRITE(IFILE4,7)
7     FORMAT(/,' INITIAL LOADS TOO HIGH FOR THIS STRUCTURE.',
     1' REDUCE THEM AND RERUN.',/)
#if (_genopt_)
C BEG OCT 2010
      CALL CONVRF(PSTEP(ISTEP),CNPRES)
C     WRDCOL = 'SHELL COLLAPSES AXISYMMETRICALLY AT P='//CNPRES
      WRDCOL = 'INITIAL LOADS TOO HIGH FOR THIS STRUCT'//CNPRES
      WRITE(IFILE4,'(A)') WRDCOL
      IABORT = 2
      RETURN
C     CALL ERREX
C END OCT 2010
#else
      CALL ERREX
#endif
C BEG NOV 2005 (subtract two load steps rather than one to be on firmer ground)
C10    P = P - STEP
C     TEMP = TEMP - DTEMP
C     OMEGA = OMEGA - DOMEGA
C     IF (K.EQ.0) GO TO 30
C     DO 20 I=1,K
C     V(I) = V(I) - STEP1(I)
C     HF(I) = HF(I) - STEP2(I)
C     FM(I) = FM(I) - STEP3(I)
C20    CONTINUE
C30    RHO = RHO - STEPM
   10 CONTINUE
      P = P - 2.*STEP
      TEMP = TEMP - 2.*DTEMP
      OMEGA = OMEGA - 2.*DOMEGA
      IF (K.EQ.0) GO TO 30
      DO 20 I=1,K
      V(I) = V(I) - 2.*STEP1(I)
      HF(I) = HF(I) - 2.*STEP2(I)
      FM(I) = FM(I) - 2.*STEP3(I)
20    CONTINUE
   30 CONTINUE
      RHO = RHO - 2.*STEPM
C END NOV 2005
      STEP = STEP/10.0
      DTEMP = DTEMP/10.0
      STEPM = STEPM/10.0
      IF (K.EQ.0) RETURN
      DO 40 I=1,K
      STEP1(I) = STEP1(I)/10.0
      STEP2(I) = STEP2(I)/10.0
40    STEP3(I) = STEP3(I)/10.0
      RETURN
      END
C
C
C
C=DECK      PRE1
C BEG OCT 2005
      SUBROUTINE PRE1(BBB,IW,DS,ILOC,FTOT,F,B,IFILE4)
C END OCT 2005
      DOUBLE PRECISION F,B,FTOT
      COMMON/IFRHX/IFB,RHFIX(198),
     1             KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,IFIX
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
C BEG DEC 1990
C BEG OCT 1999
      DIMENSION F(*),B(*),ILOC(*),IW(*),DS(*)
C END DEC 1990
      DIMENSION FTOT(*),BBB(*)
C END OCT 1999
C BEG OCT 2005
      CALL APREB(KNT,F,B,FTOT,ILOC,IW,DS,BBB,IFILE4)
C     IF (ITESTX.EQ.1) WRITE(IFIL8X,'(A,I3)')
C    1' After APREB: ITESTX=',ITESTX
C     IF (ITESTX.EQ.1) CALL EXIT
C END OCT 2005
      RETURN
      END
C
C
C
C=DECK      APREB
C BEG OCT 2005
      SUBROUTINE APREB(KNT,F,AS,FTOT,ILOC,IW,DS,BBB,IFILE4)
C END OCT 2005
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN
C     CALCULATES THE COEFFICIENT MATRIX OF PREBUCKLING EQUATIONS FOR
C     CURRENT ITERATION OF NONLINEAR AXISYMMETRIC PREBUCKLING THEORY.
C     ALSO FINDS RIGHT-HAND-SIDE VECTOR FOR CURRENT ITERATION.
C
      DOUBLE PRECISION F,FTOT,AS
C BEG DEC 1990
C BEG OCT 1999
      DIMENSION FTOT(*),ILOC(*),IW(*),AS(*),BBB(*),F(*)
C END OCT 1999
C END DEC 1990
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
C BEG OCT 2004
      COMMON/PRMOUT/IFILE3,IFIL4X,IFILE8,IFILE9,IFIL11   
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
C BEG JUN 2009 
      COMMON/JUNCT/IFIX(598,6),IFX(598,6),ITYPE(598)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009 
      COMMON/MISCEL/ICOND1,ICOND2,KK,N,KLAP,I5TOT,IC,III,IV
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
C BEG OCT 1999
      DIMENSION DS(*)
C END OCT 1999
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/CLST/CLAST
      ICOND1 = 1
      ICOND2 = 1
      KK = 1
      N = 5
      KLAP = 3
      I5TOT = 0
      IC = 3
      III = 1
      IV = 0
      DO 10 I=1,M2
10    F(I) = 0.0
      IMAX = IMAXP
      DO 20 I=1,IMAX
20    AS(I) = 0.0
      ITOT = 1
      ITOTL = 0
      IF (INOTE.GT.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 50 I=1,NSEG
C
C     PRESTS FINDS COEFFICIENT MATRIX AND RIGHT-HAND-SIDE FOR ITH SEGMNT
C
      I5I = I5(I)
30    IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      IF (IEND.LT.400000) GO TO 40
C END JUN 2009
C END FEB 2008
C END MAR 2007
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 30
40    CONTINUE
      CALL PRESTS(I,I5I,DS(ITOT),NSEG,BBB(8*I5I+IPOS),BBB(27*I5I+IPOS),
C BEG OCT 2005
     1  BBB(22*I5I+IPOS),F,FTOT,AS,IW,BBB(IPOS),ILOC,IFX,IFIX,IROWCP,
     1  ITYPE,IMAX,IFILE4)
C END OCT 2005
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
50    CONTINUE
      KNT = 1
      RETURN
      END
C
C
C
C=DECK      PRESTS
      SUBROUTINE PRESTS(JSEG,I5J,HS,NSEG,COEF,PR,BG,FNEW,F,BB,IW,THERM,
C BEG OCT 2005
     1ILOC,IFX,IFIX,IROWC,ITYPE,IMAX,IFILE4)
C END OCT 2005
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION B,UB,F,C,QB,TN1,TN2,TN3,TN4,R,RD,FK1,FK2,CURD,RDS
      DOUBLE PRECISION C11,C12,C13,C14,P1,P3,PPRIME,TNB,CB,QBCB,PSI,WB
      DOUBLE PRECISION BCB,ROT,EARC,EIRC,WC,DTNR,DTMR,FR1,FR2,FR3,FR4
      DOUBLE PRECISION USTAR,WSTAR,FC1,FC2,FC3,QD,D,FIFX1,FIFX3,FIFX4,BB
      DOUBLE PRECISION FNEW,QSAVE,H,FN,FR5,FR6,HPAST,HI,WBD
      DOUBLE PRECISION U,W,CHI,QBC1,F1,F2,F3,F4,DS,RI,FACT,UCD,WCD
      DIMENSION FNEW(*),QSAVE(198,3,5),IRSAVE(198),ISAVE(198,5)
      DIMENSION B(4,5),UB(5),F(*),IW(*),ROT(5),C(4,4),QB(4),TNB(5),WB(5)
      DIMENSION COEF(I5J,14),THERM(I5J,8),BG(I5J,5),PR(I5J,6)
      DIMENSION CB(4,5),QBCB(5),PSI(5),BCB(5,5),QD(3,5),D(3,5)
C BEG MAR 2007
C BEG JUN 2009
      DIMENSION IFX(598,6),IFIX(598,6),ILOC(*),ITYPE(598),IROWC(598)
C END JUN 2009
C END MAR 2007
C BEG DEC 1990
      DIMENSION BB(*),HS(*),WBD(5)
C END DEC 1990
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
      COMMON/PRMOUT/IFILE3,IFIL4X,IFILE8,IFILE9,IFIL11   
C END OCT 2005
      COMMON/NCONDS/NCOND
      COMMON/MISCEL/ICOND1,ICOND2,KK,N,KLAP,I5TOT,IC,III,IV
      COMMON/INTRG/ NSTATN(295),IRING(295,20)
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1             IY(198),IX(198),IXY(198),IP(198)
      REAL IX,IY,IXY,IP
      COMMON/FNDAT/FSTIF(295)
      COMMON/CMAXS/CMAX
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/RING2/GAM(198),GJ(198),
     1             YC(198),XC(198),E1(198),E2(198),PHI(200)
C BEG MAR 2007
C BEG JUN 2009
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
      COMMON/IDENT/IPRW(20)
      COMMON/ITERS/ITER
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/OUTP/NPRT
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RMASS/RM(198)
      DO 10 I=1,5
      UB(I) = 0.0
      WBD(I) = 0.0
10    WB(I) = 0.0
      UB(2) = 0.5
      UB(4) = 0.5
C
C     READ IN PROPERTIES OF JSEG TH SEGMENT-- THERM,COEF,BG,PR
C             THERM = THERMAL LOADS TN1,TN2,TN3,TN4
C             COEF = CONSTITUTIVE LAW CIJ
C             BG = GEOMETRY PARAMETERS R, RPRIME, 1/R1, 1/R2, (1/R1)'
C             PR = PRESSURE COMPONENTS P1, P2, P3
C
      FACT = 1.0
C BEG NOV 2006 (comment out the following line)
      IF (ITER.EQ.0) FACT = 0.0
C END NOV 2006
      IK = 1
C     IK = INDEX FOR LOCATION OF DISCRETE RING
C     BEGIN LOOP OVER ALL POINTS AT WHICH ENERGY IS EVALUATED.
      HI = HS(1)
      DO 450 IPOINT=1,I5J
      H = HS(IPOINT)
      HPAST = HI
      HI = 2.*H - HPAST
      II = I5TOT + IPOINT + 1
C     IW(II) CONTAINS GLOBAL ROW NUMBER OF EQ. CORRES. TO W(IPOINT)
      I2M = IW(II-1)
      I2P = IW(II+1)
      I0 = IW(II)
      I1M = I0 - 1
      I1P = I0 + 1
      I2PI0 = I2P - I0
      ICNKLA = IC + N - KLAP
      IF (I2PI0.EQ.ICNKLA) I1P = I0 + IC + 1
C     FILL LOCAL WALL PROPERTIES MATRIX CIJ
C BEG OCT 2005
C     IF (ITESTX.EQ.1.AND.IPOINT.EQ.1)
C    1 WRITE(IFILE4,'(/,A,/,(1P,5E12.4))')
C    1 ' Constitutive coefficients, COEF(i,j),j=1,14=',
C    1 (COEF(IPOINT,J),J=1,14)
C END OCT 2005
      CALL PGETC(IPOINT,I5J,COEF,C)
      SMPA = COEF(IPOINT,14)
C     CALCULATE VARIOUS QUANTITIES NEEDED IN THE FOLLOWING
      DS = H
      IF (IPOINT.EQ.1.OR.IPOINT.EQ.I5J) DS=H/2.
      TN1 = THERM(IPOINT,1)*TEMP + THERM(IPOINT,5)
      TN2 = THERM(IPOINT,2)*TEMP + THERM(IPOINT,6)
      TN3 = THERM(IPOINT,3)*TEMP + THERM(IPOINT,7)
      TN4 = THERM(IPOINT,4)*TEMP + THERM(IPOINT,8)
      R  = BG(IPOINT,1)
      RD = BG(IPOINT,2)
      FK1= BG(IPOINT,3)
      FK2= BG(IPOINT,4)
      CURD=BG(IPOINT,5)
      CURD = 0.
C BEG APR 2009
C      RFK2 = sine of the angle, phi, of the meridional slope
      RDS = R*DS
      RFK2 = R*FK2
      IF (IPRISM.EQ.1) THEN
C BEG JAN 2010
         FK2 = FK2/1000000.
         R = R*1000000.
C END JAN 2010
         IF (ABS(RD).GT.0.999999) THEN
            RFK2 = 0.0
         ELSE
C BEG JAN 2010
C           RFK2 = (FK2/ABS(FK2))*SQRT(1.-RD**2)
            RFK2 = (FK2/DABS(FK2))*DSQRT(1.-RD**2)
C END JAN 2010
         ENDIF
         RDS = DS 
      ENDIF
C END APR 2009
      ISIG = 0
      RI = R
      IF (R.NE.0.) GO TO 20
      R = H/100000.
      ISIG = 1
      RDS = H**2/8.
20    CONTINUE
C     DIFFERENCE EXPRESSIONS FOR W, W' FOR VARIABLE SPACING
C
      CALL GETWWP(H,HI,HPAST,WB,WBD)
      C11 = C(1,1)
      C12 = C(1,2)
      C13 = C(1,3)
      C14 = C(1,4)
      P1 = PR(IPOINT,1)*P + PR(IPOINT,4)
      P3 = PR(IPOINT,3)*P + PR(IPOINT,6)
      PPRIME = PR(IPOINT,2)*P
      ROT(1) = WBD(1)
      ROT(2) = -.5*FK1
      ROT(3) = WBD(3)
      ROT(4) = -.5*FK1
      ROT(5) = WBD(5)
C     GET LINEAR PART OF KINEMATIC RELATIONS
      CALL PGETB(B,ISIG,WB,WBD,HPAST,HI,ROT)
C     F CONTAINS STARTING VECTOR FOR CURRENT NEWTON-RAPHSON ITERATION.
      U = (F(I1P) + F(I1M))/2.
      W = WB(1)*F(I2M) + WB(3)*F(I0) + WB(5)*F(I2P)
C     CHI IS PREBUCKLING MERIDIONAL ROTATION
      CHI=ROT(1)*F(I2M) +ROT(2)*F(I1M) +ROT(3)*F(I0) +ROT(4)*F(I1P)
     1+ROT(5)*F(I2P)
      DO 30 K=1,4
C     LET Q REPRESENT LOCAL PART OF F, THE STARTING VECTOR
C     QB = Q*B(TRANSPOSE)
30    QB(K)=B(K,1)*F(I2M)+B(K,2)*F(I1M)+B(K,3)*F(I0)+B(K,4)*F(I1P)
     1+B(K,5)*F(I2P)
C     QBC1 = Q*B(TRANSPOSE)*C(J,1)
      QBC1=QB(1)*C11 +QB(2)*C12 +QB(3)*C13 +QB(4)*C14
      F1 = QBC1*CHI + CHI*CHI*CHI*C11/2. + TN1*CHI
      F2 = QBC1 + 3.*CHI*CHI*C11/2. + TN1*FACT
C     F1,F2 = TERMS TO BE MULTIPLIED BY D(CHI)/D(Q)
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        F3 = P1 + R*OMEGA**2*SMPA*RD
        F4 = P3 + R*OMEGA**2*SMPA*RFK2
      ELSE
        F3 = P1 
        F4 = P3
      ENDIF
C END APR 2009
C     F3,F4, = TERMS TO BE MULTIPLIED BY U,W. 'LIVE' PRESSURE EFFECT
C
C     BEGIN LOOP OVER LOCAL MATRIX FOR SHELL STRAIN ENERGY, WORK DONE
C     BY PRESSURE AND SURFACE TRACTION.  N=5 IN PREBUCKLING ANALYSIS.
C
      DO 60 I=1,N
C     TNB(I) = (THERMAL LOADS)*B(J,I)
      TNB(I) = TN1*B(1,I) +TN2*B(2,I) +TN3*B(3,I) +TN4*B(4,I)
      DO 40 K=1,4
40    CB(K,I)=C(K,1)*B(1,I)+C(K,2)*B(2,I)+C(K,3)*B(3,I)+C(K,4)*B(4,I)
C     CB(K,I)= (C)*(B),  QBCB = Q*B(TRANSPOSE)*C*B
      QBCB(I)=QB(1)*CB(1,I)+QB(2)*CB(2,I)+QB(3)*CB(3,I)+QB(4)*CB(4,I)
C
C BEG NOV 2006
C23456789012345678901234567890123456789012345678901234567890123456789012
C     IF (NPRT.GE.3.AND.JSEG.EQ.1.AND.IPOINT.LE.5.AND.ITER.EQ.0) THEN
C        WRITE(IFILE4,*)' JSEG,IPOINT,N,I=',JSEG,IPOINT,N,I
C        WRITE(IFILE4,*)' I2M,I1M,I0,I1P,I2P=',I2M,I1M,I0,I1P,I2P
C        WRITE(IFILE4,*)' F(I2M),F(I1M),F(I0),F(I1P),F(I2P)=',
C    1               F(I2M),F(I1M),F(I0),F(I1P),F(I2P)
C        WRITE(IFILE4,*)' DS,R,RD=',DS,R,RD
C        WRITE(IFILE4,*)' FK1,FK2,CURD=',FK1,FK2,CURD
C        WRITE(IFILE4,*)' H,HI,HPAST=',H,HI,HPAST
C        WRITE(IFILE4,*)' (ROT(I),I=I,5)=',(ROT(IXX),IXX=1,5)
C        WRITE(IFILE4,*)' (UB(I), I=1,5)=',(UB(IXX), IXX=1,5)
C        WRITE(IFILE4,*)' (WB(I), I=1,5)=',(WB(IXX), IXX=1,5)
C        WRITE(IFILE4,*)' (WBD(I),I=1,5)=',(WBD(IXX), IXX=1,5)
C        WRITE(IFILE4,*)' (C(1,I),I=1,4)=',(C(1,IXX),IXX=1,4)
C        WRITE(IFILE4,*)' (C(2,I),I=1,4)=',(C(2,IXX),IXX=1,4)
C        WRITE(IFILE4,*)' (C(3,I),I=1,4)=',(C(3,IXX),IXX=1,4)
C        WRITE(IFILE4,*)' (C(4,I),I=1,4)=',(C(4,IXX),IXX=1,4)
C        WRITE(IFILE4,*)' P1,P3,P(JSEG)=',P1,P3,P(JSEG)
C        WRITE(IFILE4,*)' PR(IPOINT,1),PR(IPOINT,3)=',
C    1               PR(IPOINT,1),PR(IPOINT,3)
C        WRITE(IFILE4,*)' TN1,TN2,TN3,TN4=',TN1,TN2,TN3,TN4
C        WRITE(IFILE4,*)' U,W,CHI=',U,W,CHI
C        WRITE(IFILE4,*)' PSI(I),F1,F2=',PSI(I),F1,F2
C        WRITE(IFILE4,*)' FSTIF(JSEG),QBC1=',FSTIF(JSEG),QBC1
C        WRITE(IFILE4,*)' FACT,TNB(I),QBCB(I)=',FACT,TNB(I),QBCB(I)
C        WRITE(IFILE4,*)' (CB(K,I),K=1,4)=',(CB(IXX,I),IXX=1,4)
C        WRITE(IFILE4,*)' ( B(K,I),K=1,4)=',( B(IXX,I),IXX=1,4)
C        WRITE(IFILE4,*)' (QB(K),K=1,4)=',(QB(IXX),IXX=1,4)
C     ENDIF
C
C     PSI(I) = NEW LOCAL RIGHT-HAND-SIDE VECTOR. CONTRIBUTION FROM
C     SHELL STRAIN ENERGY,    PRESSURE AND SURFACE TRACTIONS.
C     ALSO, ELASTIC FOUNDATION WITH STIFFNESS FSTIF(JSEG)
C
C  From BIGBOSOR4 pre  NOV 9, 2006:
C     PSI(I)=RDS*(QBCB(I) +TNB(I) +CHI*CHI*CB(1,I)/2. + ROT(I)*F1
C    1- F3*UB(I) - F4*WB(I) +FSTIF(JSEG)*W*WB(I))
C
C  from BIGBOSOR4 post NOV 9, 2006 (taken directly from BOSOR5):
      PSI(I)=RDS*(QBCB(I) +TNB(I) +CHI*CHI*CB(1,I)/2. + ROT(I)*F1
     1 - P1*UB(I) -.5*P3*(2.*WB(I) +W*(B(1,I)+B(2,I))
     1 + WB(I)*(QB(1)+QB(2)) - CHI*UB(I) - ROT(I)*U )
     1 + FSTIF(JSEG)*W*WB(I)   )
C
C     BCB(I,J) = LOCAL SHELL STRAIN ENERGY MATRIX,WITH 'LIVE' PRESSURE
C                AND ELASTIC FOUNDATION STIFFNESS, FSTIF(JSEG).
C
      DO 50 J=1,I
C
C  From BIGBOSOR4 pre  NOV 9, 2006:
C     BCB(I,J) = RDS*(B(1,J)*CB(1,I)+B(2,J)*CB(2,I)+B(3,J)*CB(3,I)
C    1+B(4,J)*CB(4,I) +F2*ROT(I)*ROT(J) +CHI*(ROT(J)*CB(1,I) +ROT(I)*
C    2CB(1,J)) +FSTIF(JSEG)*WB(I)*WB(J)              )
C
C  from BIGBOSOR4 post NOV 9, 2006 (taken directly from BOSOR5):
      BCB(I,J) = RDS*(B(1,J)*CB(1,I)+B(2,J)*CB(2,I)+B(3,J)*CB(3,I)
     1 +B(4,J)*CB(4,I) +F2*ROT(I)*ROT(J) +CHI*(ROT(J)*CB(1,I) +ROT(I)*
     2 CB(1,J)) -.5*P3*(WB(J)*(B(1,I)+B(2,I)) +WB(I)*(B(1,J)+B(2,J))
     3 -ROT(J)*UB(I) - ROT(I)*UB(J) ) + FSTIF(JSEG)*WB(I)*WB(J)  )
C END NOV 2006
50    CONTINUE
60    CONTINUE
C BEG NOV 2006
C23456789012345678901234567890123456789012345678901234567890123456789012
C     IF (NPRT.EQ.3) WRITE(6,72) JSEG,IPOINT,(PSI(I),I=1,N)
C  72 FORMAT(' SHELL PART, SEG.,POINT,PSI(I)=',I3,I4,1P5E12.4)
C END NOV 2006
C     END OF DOUBLE LOOP FOR SHELL STRAIN ENERGY LOCAL MATRIX.
C
C     ENERGY FOR IKTH RING IN JSEGTH SEGMENT
C     IRING(JSEG,IK) CONTAINS MESH PT. NO. OF IK TH RING IN JSEG TH SEG.
      IF (IPOINT.NE.IRING(JSEG,IK)) GO TO 90
C     DTNR,DTMR = RING THERMAL LOADS NRT,MXT.
      DTNR = TNR(KK)*TEMP + TNRFIX(KK)
      DTMR = TMR(KK)*TEMP + TMRFIX(KK)
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        EARC = ER(KK)*AREA(KK)/RC(KK)
        EIRC = ER(KK)*IX(KK)/RC(KK)
      ELSE
        EARC = 0.0 
        EIRC = 0.0 
      ENDIF
C     WC = RADIAL DISPLACEMENT OF CENTROID OF RING.
      WC = U*RD +W*RFK2 +E2(KK)*CHI -E1(KK)*CHI*CHI/2.
      IF (IPRISM.EQ.0) THEN
        FR1 = EARC*WC + DTNR - RC(KK)*(HF(KK) + HFIX(KK))
     1  - RC(KK)*RC(KK)*OMEGA**2*RM(KK)*AREA(KK)
        FR2 = RC(KK)*(V(KK) + VFIX(KK))
        FR3 = EIRC*CHI + DTMR - RC(KK)*(FM(KK) + FMFIX(KK) )
        FR4 = E2(KK) - E1(KK)*CHI
        FR5 = - E1(KK)*FR1 - E2(KK)*FR2 + EIRC
        FR6 = E1(KK) + E2(KK)*CHI
      ELSE
        FR1 = 0.0 
        FR2 = 0.0 
        FR3 = 0.0 
        FR4 = E2(KK) - E1(KK)*CHI
        FR5 = 0.0 
        FR6 = E1(KK) + E2(KK)*CHI
      ENDIF
C END APR 2009
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO LOCAL MATRIX OF RING
C     STRAIN ENERGY AND WORK DONE BY LINE LOADS V,HF, AND FM.
C
      DO 80 I=1,N
C
C     UCD AND WCD ARE FIRST DERIVATIVES OF CENTROIDAL DISPLACEMENTS
C     WITH RESPECT TO DEPENDENT VARIABLE Q(I).
C
C BEG APR 2009
      UCD = UB(I)*RFK2 - WB(I)*RD - FR6*ROT(I)
      WCD = UB(I)*RD + WB(I)*RFK2 + FR4*ROT(I)
C END APR 2009
      PSI(I) = PSI(I) + FR1*WCD + FR2*UCD + FR3*ROT(I)
      DO 70 J=1,I
C BEG APR 2009
      BCB(I,J) = BCB(I,J) + FR5*ROT(I)*ROT(J) +
     1EARC*WCD*(UB(J)*RD +WB(J)*RFK2 +FR4*ROT(J))
C END APR 2009
70    CONTINUE
80    CONTINUE
C
C     END OF DOUBLE LOOP FOR RING STRAIN ENERGY, WORK DONE BY V,HF,FM.
      IK = IK +1
      KK = KK +1
90    CONTINUE
C
C     CONSTRAINT CONDITIONS
C
C     IFX(ICOND1,1) CONTAINS LOCATIONS OF 'MINUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
      IF (ICOND1.GT.NCOND) GO TO 200
      IF (IPOINT.EQ.(IFX(ICOND1,1)-JSEG*1000)) GO TO 100
      GO TO 200
C     FILL THE 'MINUS' PART OF THE CONSTRAINT CONDITION
C
C     IR,IR1,IR2, CONTAIN GLOBAL MATRIX ROW NOS. CORRESPONDING TO THE
C     LAGRANGE MULTIPLIERS ASSOCIATED WITH CONSTRAINT CONDS IDENTIFIED
C     BY IFX(ICOND1,1)
100   IR = IFX(ICOND1,2)
      IR1 = IR + 1
      IR2 = IR + 2
      KKK = ICOND1
C     FIFX1, 3, AND 4 CONTAIN INTEGERS WHICH MAY OR MAY NOT RELEASE THE
C     CONSTRAINT CONDITIONS.
      IF ((ISTOP0(1)/1000).NE.JSEG) GO TO 110
      IF ((ISTOP0(1)-1000*JSEG).NE.IPOINT) GO TO 110
      IF(IFX(ICOND1,3).EQ.1) GO TO 110
      FIFX1 = ISTOP0(3)*CMAX
      FIFX3 = ISTOP0(5)*CMAX
      FIFX4 = ISTOP0(6)*CMAX
      GO TO 120
110   CONTINUE
      FIFX1 = IFX(ICOND1,3)*CMAX
      FIFX3 = IFX(ICOND1,5)*CMAX
      FIFX4 = IFX(ICOND1,6)*CMAX
C
C     CARDS ADDED FOR IMPOSED DISPLACEMENT IN PREBUCKLING ANALYSIS...
C
      IF (IFX(ICOND1,3).EQ.2) FIFX1 = CMAX
      IF (IFX(ICOND1,5).EQ.2) FIFX3 = CMAX
      IF (IFX(ICOND1,6).EQ.2) FIFX4 = CMAX
      USPEC = 0.
      WSPEC = 0.
      CHISPC = 0.
      IF (IFX(ICOND1,3).EQ.2) USPEC = V(KK-1) + VFIX(KK-1)
      IF (IFX(ICOND1,5).EQ.2) WSPEC = HF(KK-1) + HFIX(KK-1)
      IF (IFX(ICOND1,6).EQ.2) CHISPC = FM(KK-1) + FMFIX(KK-1)
C
120   IF (RI.NE.0.) GO TO 130
      FIFX1 = 0.
      FIFX3 = CMAX
      FIFX4 = CMAX
130   CONTINUE
C BEG APR 2009
      USTAR = RFK2*U - RD*W
      WSTAR = RD*U + RFK2*W
C END APR 2009
      IF (IFX(ICOND1,3).EQ.3) USTAR = U
      IF (IFX(ICOND1,5).EQ.3) WSTAR = W
C     D1(KKK) = KKKTH RADIAL DISCONTINUITY
C     D2(KKK) = KKKTH AXIAL  DISCONTINUITY
      FC1 = D2(KKK) - D1(KKK)*CHI
      FC3 = D1(KKK) + D2(KKK)*CHI
C     FNEW( ) = NEW RIGHT-HAND-SIDE VECTOR FOR THIS N-R ITERATION.
      FNEW(IR)=(-USTAR + D1(KKK)*CHI +D2(KKK)*CHI**2/2.+USPEC)*FIFX1
      FNEW(IR1)=(-WSTAR - D2(KKK)*CHI +D1(KKK)*CHI**2/2.+WSPEC)*FIFX3
      FNEW(IR2)= (-CHI + CHISPC)*FIFX4
      FC2 = F(IR)*D2(KKK)*FIFX1 + F(IR1)*D1(KKK)*FIFX3
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO ENERGY OF 'MINUS' PART OF
C     CONSTRAINT AND BOUNDARY CONDITIONS.
C
      DO 150 I=1,N
C BEG APR 2009
      USTAR = RFK2*UB(I) - RD*WB(I)
      WSTAR = RD*UB(I) + RFK2*WB(I)
C END APR 2009
      IF (IFX(ICOND1,3).EQ.3) USTAR = UB(I)
      IF (IFX(ICOND1,5).EQ.3) WSTAR = WB(I)
C     QD( ) = LOCAL MATRIX CONTAINING 'MINUS' PART OF CONSTRAINTS
      QD(1,I) =        FIFX1*(-USTAR + FC3*ROT(I))
      QD(2,I) =  FIFX3*(-WSTAR - FC1*ROT(I))
      QD(3,I) = - FIFX4*ROT(I)
      PSI(I) = PSI(I) + F(IR)*QD(1,I) +F(IR1)*QD(2,I) +F(IR2)*QD(3,I)
      DO 140 J=1,I
140   BCB(I,J) = BCB(I,J) + FC2*ROT(I)*ROT(J)
150   CONTINUE
C
C     END OF LOOP FOR 'MINUS' PART OF CONSTRAINT CONDITIONS.
C
      ICOND1 = ICOND1 + 1
C     FILL BB ARRAY WITH MINUS PART OF CONSTRAINT CONDITIONS.
C
      IF ((ILOC(IR)-ILOC(IR-1)).GT.(N+1)) GO TO 170
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 1,2,AND5.
C
      DO 160 I=1,N
      IB = ILOC(IR) -N -1 + I
      BB(IB) = QD(1,I)
      IB = ILOC(IR1)-N -2 + I
      BB(IB) = QD(2,I)
      IB = ILOC(IR2)-N -3 + I
160   BB(IB) = QD(3,I)
      GO TO 90
170   IF (NGBKP(III).LT.IR) GO TO 180
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE
C     3 AND 4 AS LONG AS CURRENT QD(I,J) IS STORED IN CURRENT BLOCK.
C
      CALL FILLBP(IC,N,I2M,I1M,I0,I1P,I2P,IR,ILOC,QD,BB)
      GO TO 90
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 3 AND 4
C     EXCEPT THAT QD(I,J) HAS TO BE SAVED BECAUSE IT CONTRIBUTES
C     ELEMENTS TO A FUTURE BLOCK.
C
180   IV = IV + 1
      IRSAVE(IV) = IR
      ISAVE(IV,1) = I2M
      ISAVE(IV,2) = I1M
      ISAVE(IV,3) = I0
      ISAVE(IV,4) = I1P
      ISAVE(IV,5) = I2P
      DO 190 I=1,IC
      DO 190 J=1,N
190   QSAVE(IV,I,J) = QD(I,J)
      GO TO 90
C     FILL THE 'PLUS' PART OF THE CONSTRAINT CONDITION
C     IFIX(ICOND2,2) CONTAINS LOCATIONS OF 'PLUS' SIDE OF JUNCTURE IN
C     MONOTONICALLY INCREASING ORDER.
200   IF (ICOND2.GT.NCOND) GO TO 300
      IF (IPOINT.EQ.(IFIX(ICOND2,2)-JSEG*1000)) GO TO 210
      GO TO 300
C     NO 'PLUS' SIDE IF CONDITION REPRESENTS BOUNDARY .
210   IF (IFIX(ICOND2,2).EQ.IFIX(ICOND2,1)) GO TO 290
      KKK = ICOND2
C BEG APR 2009
      USTAR = RFK2*U - RD*W
      WSTAR = RD*U + RFK2*W
C END APR 2009
C     IR,IR1,IR2 HAVE SAME MEANING AS ABOVE.
      IR = IROWC(ICOND2)
      IR1 = IR + 1
      IR2 = IR + 2
      FIFX1 = IFIX(ICOND2,3)*CMAX
      FIFX3 = IFIX(ICOND2,5)*CMAX
      FIFX4 = IFIX(ICOND2,6)*CMAX
C     'PLUS' SIDE CONTRIBUTIONS ADDED TO FNEW( ).
      FNEW(IR)= FNEW(IR ) + USTAR*FIFX1
      FNEW(IR1)=FNEW(IR1) + WSTAR*FIFX3
      FNEW(IR2)=FNEW(IR2) + CHI*FIFX4
C
C     LOOP FOR CONTRIBUTION OF 'PLUS' SIDE TO LOCAL MATRIX.
C
      DO 220 I=1,N
C BEG APR 2009
      USTAR = RFK2*UB(I) - RD*WB(I)
      WSTAR = RD*UB(I) + RFK2*WB(I)
C END APR 2009
      IF (IFIX(ICOND2,3).EQ.3) USTAR = UB(I)
      IF (IFIX(ICOND2,5).EQ.3) WSTAR = WB(I)
C     D( ) = LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINT CONDS.
      D(1,I) = USTAR*FIFX1
      D(2,I) = WSTAR*FIFX3
      D(3,I) =ROT(I)*FIFX4
C
      PSI(I) = PSI(I) + F(IR)*D(1,I) + F(IR1)*D(2,I) +F(IR2)*D(3,I)
220   CONTINUE
C
C
C     FILL BB( ) WITH LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINTS
C     ITYPE( ) = TYPE OF CONSTRAINT CONDITION. 5 MEANS SEGS. IN SERIES.
C
      IF (ITYPE(ICOND2).EQ.5) GO TO 270
C     THIS BRANCH FOR PLUS SIDES OF ALL TYPES OF CONSTRAINT CONDITIONS
C     EXCEPT ITYPE(ICOND2) = 5.
C
      DO 230 I=1,N
      IB = ILOC(IR) -N -1 + I
      BB(IB) = D(1,I)
      IB = ILOC(IR1)-N -2 + I
      BB(IB) = D(2,I)
      IB = ILOC(IR2)-N -3 + I
      BB(IB) = D(3,I)
230   CONTINUE
      IF (IV.EQ.0) GO TO 290
      DO 240 IIV=1,IV
      IF (IR.EQ.IRSAVE(IIV)) GO TO 250
240   CONTINUE
      GO TO 290
C     THIS BRANCH FOR INSERTION INTO GLOBAL STIFFNESS MATRIX OF
C     'MINUS' SIDE OF CONSTRAINT CONDITIONS REQUIRING VARIABLES FROM
C     PREVIOUS BLOCKS.
C
250   DO 260 I=1,IC
      DO 260 J=1,N
260   QD(I,J) = QSAVE(IIV,I,J)
      I2MS = ISAVE(IIV,1)
      I1MS = ISAVE(IIV,2)
      I0S  = ISAVE(IIV,3)
      I1PS = ISAVE(IIV,4)
      I2PS = ISAVE(IIV,5)
      CALL FILLBP(IC,N,I2MS,I1MS,I0S,I1PS,I2PS,IR,ILOC,QD,BB)
      GO TO 290
270   CONTINUE
C     THIS BRANCH FOR PLUS SIDE OF CONSTRAINT CONDITION TYPE 5.
C
      DO 280 I=1,N
      I1 = IR2 + I
      DO 280 J=1,IC
      IB = ILOC(I1) -IC + J - I
280   BB(IB) = D(J,I)
290   ICOND2 = ICOND2 + 1
      GO TO 200
300   CONTINUE
C
C     FILL NEW R-H-S VECTOR
      FNEW(I2M) = FNEW(I2M) + PSI(1)
      FNEW(I1M) = FNEW(I1M) + PSI(2)
      FNEW(I0 ) = FNEW(I0 ) + PSI(3)
      FNEW(I1P) = FNEW(I1P) + PSI(4)
      FNEW(I2P) = FNEW(I2P) + PSI(5)
C
C     FILL BB( ) WITH LOCAL MATRIX CORRESPONDING TO IPOINT.
C
      DO 440 I=1,N
      GO TO (310,320,330,340,350),I
310   J = I2M
      GO TO 360
320   J = I1M
      GO TO 360
330   J = I0
      GO TO 360
340   J = I1P
      GO TO 360
350   J = I2P
360   CONTINUE
      DO 430 K=1,I
      GO TO (370,380,390,400,410),K
370   INDX = I2M
      GO TO 420
380   INDX = I1M
      GO TO 420
390   INDX = I0
      GO TO 420
400   INDX = I1P
      GO TO 420
410   INDX = I2P
420   CONTINUE
      IB = ILOC(J) - J + INDX
      BB(IB) = BB(IB) + BCB(I,K)
430   CONTINUE
440   CONTINUE
450   CONTINUE
C
C     END OF LOOP OVER MESH POINTS IN CURRENT SEGMENT.
C
      I5TOT = I5TOT + I5J + 2
      IF (I2P.EQ.NGBKP(III)) GO TO 460
      IR2 = I2P + IC
      IF (IR2.EQ.NGBKP(III)) GO TO 460
      GO TO 490
460   NN = ILOC(I2P)*2
      IF (IR2.EQ.NGBKP(III)) NN = 2*ILOC(IR2)
C     STORE BLOCK NUMBER III ON DISK OR DRUM.
      IF (IBLKP.GT.1) CALL GASP(BB,NN,1,IPRW(III))
      IF (NPRT.LT.3.OR.ITER.GT.1) GO TO 465
      ZERO = 0.0
      WRITE(IFILE4,730) III,ITER
730   FORMAT(/,' PREFACTORED PREBUCKLING STIFFNESS MATRIX',
     1' FOR BLOCK NO.',I2,/,' FOLLOWS. ITERATION NO. ',I2,/)
      IF (III.EQ.1) NROWS = 0
      NROWS1 = NROWS + 1
      NROWS = NGBKP(III)
      DO 760 I = NROWS1,NROWS
      IF (I.NE.NROWS1) J1 = ILOC(I-1) + 1
      IF (I.EQ.NROWS1) J1 = 1
      J2 = ILOC(I)
      J3 = 7 - J2 + J1
      IF (J3.GT.0) WRITE(IFILE4,740)I,(ZERO,J=1,J3),(BB(J),J=J1,J2)
      IF (J3.LE.0) WRITE(IFILE4,750)I,(BB(J),J=J1,J2)
740   FORMAT(1X,I3,8E12.4)
750   FORMAT(1X,I3,(8E12.4))
760   CONTINUE
465   IF (IBLKP.EQ.1) GO TO 480
      DO 470 I=1,IMAX
470   BB(I) = 0.0
480   III = III + 1
490   CONTINUE
      RETURN
      END
C
C
C
C=DECK      PGETC
      SUBROUTINE PGETC(I,L5,COEF,C)
C
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     WALL STIFFNESS COEFFICIENTS CIJ TRANSFERRED TO LOCAL MATRIX C.
C
      DOUBLE PRECISION C
      DIMENSION COEF(L5,14),C(4,4)
      C(1,1) = COEF(I,1)
      C(1,2) = COEF(I,2)
      C(1,3) = COEF(I,3)
      C(1,4) = COEF(I,4)
      C(2,2) = COEF(I,5)
      C(2,3) = COEF(I,6)
      C(2,4) = COEF(I,7)
      C(3,3) = COEF(I,8)
      C(3,4) = COEF(I,9)
      C(4,4) = COEF(I,10)
      C(2,1) = C(1,2)
      C(3,1) = C(1,3)
      C(4,1) = C(1,4)
      C(3,2) = C(2,3)
      C(4,2) = C(2,4)
      C(4,3) = C(3,4)
      RETURN
      END
C
C
C
C=DECK      GETWWP
      SUBROUTINE GETWWP(DS,K,H,WB,WBD)
C     CALLED FROM PRESTRES, WHOSE TRACE IS APREB,PRE,MAIN
C     FINITE-DIFFERENCE EXPRESSIONS FOR VARIABLE SPACING MESH WITH
C     U,V HALF-WAY BETWEEN W. PREBUCKLING ANALYSIS
      DOUBLE PRECISION DS,K,H,WB,WBD,HMK,KPDS,HPDS
      DIMENSION WB(5),WBD(5)
      HMK = H - K
      KPDS = K + DS
      HPDS = H + DS
      WB(1) = HMK*KPDS/(16.*H*DS)
      WB(3) = KPDS*HPDS/(4.*H*K)
      WB(5) = -HMK*HPDS/(16.*K*DS)
      WBD(1) = -0.5/H
      WBD(5) = 0.5/K
      WBD(3) = -WBD(1) - WBD(5)
      RETURN
      END
C
C
C
C=DECK      PGETB
      SUBROUTINE PGETB(B,ISIG,WB,WBD,HPAST,HI,ROT)
C
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     THE MATRIX B RELATES STRAINS AND CHANGES IN CURVATURE TO LOCAL
C     MESH VARIABLES. VARIABLE SPACING USED. TANGENTIAL DISPLACEMENT
C     U OCCURS AT HALF-STATIONS BETWEEN THE NORMAL OUTWARD DISPLACEMENT
C     IN THIS SUBROUTINE ONLY THE LINEAR TERMS IN THE KINEMATIC RELATION
C     ARE INCLUDED.   THE W-PRIME-SQUARED TERM IS OMITTED HERE.
C
C     VARIABLE DEFINITIONS. . .
C              R = PARALLEL CIRCLE RADIUS AT ELEMENT CENTROID
C             RD = DERIVATIVE OF R WITH RESPECT TO ARC LENGTH S
C            FK1 = MERIDIONAL CURVATURE 1/R1 AT ELEMENT CENTROID
C            FK2 = NORMAL CIRCUMFERENTIAL CURVATURE, 1/R2
C           CURD = DERIVATIVE OF 1/R1
C              H = ELEMENT LENGTH, L  IN FIG. 3
C          HPAST = VARIABLE CALLED H IN FIG. 3
C             HI = VARIABLE CALLED K IN FIG. 3
C          WB(1) = VARIABLE CALLED C1 IN EQUATION (9)
C          WB(3) = VARIABLE CALLED C2 IN EQUATION (9)
C          WB(5) = VARIABLE CALLED C3 IN EQUATION (9)
C       ROT(I) = DERIVATIVE OF MERIDIONAL ROTATION WITH RESPECT TO
C                 GENERALIZED COORDINATES, Q. SEE EQUATION (17).
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION B,WB,WBD,HPAST,HI,ROT
      DIMENSION B(4,5),WB(5),WBD(5),ROT(5)
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      B(1,1) = FK1*WB(1)
      B(1,2) = -1./H
      B(1,3) = FK1*WB(3)
      B(1,4) = 1./H
      B(1,5) = FK1*WB(5)
      B(2,1) = FK2*WB(1)
      B(2,2) = 0.5*RD/R
      B(2,3) = FK2*WB(3)
      B(2,4) = 0.5*RD/R
      B(2,5) = FK2*WB(5)
      FMUL = 0.0
      B(3,1) = 1./(HPAST*H) -FMUL*B(1,1)*FK1
      B(3,2) = FK1/H        -FMUL*B(1,2)*FK1
      B(3,3) =-2./(HI*HPAST)-FMUL*B(1,3)*FK1
      B(3,4) = -FK1/H       -FMUL*B(1,4)*FK1
      B(3,5) = 1./(HI*H)    -FMUL*B(1,5)*FK1
C
      DO 10 I=1,5
10    B(4,I) = ROT(I)*RD/R  -FMUL*B(2,I)*FK2
      IF (ISIG.NE.1) RETURN
C     POLE CONDITION
      DO 20 I=1,5
      B(2,I) = B(1,I)
20    B(4,I) = B(3,I)
      RETURN
      END
C
C
C
C=DECK      FILLBP
      SUBROUTINE FILLBP(IC,N,I2M,I1M,I0,I1P,I2P,IR,ILOC,QD,BB)
C     CALLED FROM PRESTS, WHOSE TRACE IS APREB,PRE,MAIN.
C     PURPOSE IS TO ASSEMBLE 'MINUS' CONSTRAINT CONDITION MATRIX
C     QD(3X5) INTO GLOBAL MATRIX BB.
C     NONLINEAR AXISYMMETRIC STRESS PROBLEMS.
      DOUBLE PRECISION QD,BB
      DIMENSION ILOC(*),QD(3,5),BB(*)
      DO 80 I=1,IC
      J = IR - 1 + I
      DO 70 K=1,N
      GO TO (10,20,30,40,50),K
10    INDX = I2M
      GO TO 60
20    INDX = I1M
      GO TO 60
30    INDX = I0
      GO TO 60
40    INDX = I1P
      GO TO 60
50    INDX = I2P
60    CONTINUE
      IB = ILOC(J) - J + INDX
      BB(IB) = QD(I,K)
70    CONTINUE
80    CONTINUE
      RETURN
      END
C
C
C
C=DECK      PRE2
      SUBROUTINE PRE2(BBB,IW,DS,FTOT,PSMODE)
      DOUBLE PRECISION FTOT
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/IFRHX/IFB,RHFIX(198),
     1             KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,IFIX
      COMMON/LSTEPS/ISTEP
      COMMON/INSTAB/INDIC
      COMMON/RGFCE/RHF(198)
      COMMON/SFLAG/MONOQ
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
C BEG MAR 2007
      DIMENSION PMODE(10000,9)
      DIMENSION FTOT(*),IW(*),DS(*),PSMODE(10000,9),BBB(*)
C END MAR 2007
      CALL PREB(FTOT,RHF,INDIC,IW,IFIX,ISTEP,DS,PSMODE,BBB,RHFIX,PMODE)
      IF (INDIC.NE.0) RETURN
      IF (IOYES(1).EQ.0) RETURN
      WRITE(IFILE4,70) ISTEP
70    FORMAT(/,' OUTPUT FOR LOAD STEP NO.',I3)
      ISTRES = 0
      CALL OUTPRE(IPMODE(ISTEP),IARC,I2,I5,NSEG,PMODE,ISTRES)
      IF (MONOQ.NE.0) CALL OUTPRE(IPSMD(ISTEP),IARC,I2,I5,NSEG,PSMODE,
     1 MONOQ)
      RETURN
      END
C
C
C
C=DECK      PREB
      SUBROUTINE PREB(F,RHF,INDIC,IW,IFIX,ISTEP,DS,PSMODE,BBB,RHFIX,
     1  PMODE)
C
C     CALLED FROM PRE, WHICH IS CALLED FROM MAIN.
C     PRESTRESSES AND DISPLACEMENTS CALCULATED FROM INPUT VECTOR F.
C
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(295),IRECT(2,295),INTEXT(2,295),ISTSMR(2,295)
      COMMON/BUCCON/BUCMIN(295),BUCMNS(295),BUCMNR(295)
      COMMON/STRCON/STFMXS(295),STFMXR(295),SKNMAX(295)
      COMMON/LOCALX/BUCSKN,BUCSTF,STRSTF
C END SEP 2005
      DOUBLE PRECISION F
C BEG MAR 2007
      DIMENSION PMODE(10000,9),BBB(*),RHFIX(198)
      DIMENSION PSMODE(10000,9),RHF(198),F(*),IW(*)
C END MAR 2007
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ISTUFF/KK,I5TOT,IC,NUNK,KLAP
      COMMON/INTRG/NSTATN(295),IRING(295,20)
C BEG OCT 1999
      DIMENSION DS(*)
C END OCT 1999
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/STRHD/ NSHEAD
      COMMON/SFLAG/MONOQ
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      KK = 1
      I5TOT = 0
      IC = 3
      NUNK = 5
      KLAP = 3
      M = 1
      ITOT = 1
      ITOTL = 0
      IF (INOTE.GT.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 30 I=1,NSEG
C
C     PRESTRESS AND DISPLACEMENTS CALCULATED FOR ITH SEGMENT IN PLOCAL.
C
      I5I = I5(I)
10    IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      IF (IEND.LT.400000) GO TO 20
C END JUN 2009
C END FEB 2008
C END MAR 2007
      IF (INDIC.NE.0) CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 10
20    CONTINUE
      INDX = 33*I5I
      IF (IFIX.EQ.1) INDX = 36*I5I
      CALL PLOCAL(IW,I,DS(ITOT),I5I,F,BBB(8*I5I+IPOS),BBB(22*I5I+IPOS),
     1BBB(INDX+IPOS),PMODE,PSMODE,NSEG,RHF,BBB(IPOS),INDIC,
     2BBB(39*I5I+IPOS),IFIX,I2,ISTEP,RHFIX)
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
30    CONTINUE
C BEG SEP 2005
C  Find minimum buckling loads and maximum stresses for entire shell
C  assembly...
      BUCSKN = 10.E+16
      BUCSTF = 10.E+16
      STRSTF = 0.0
      DO 35 I = 1,NSEG
       IF (ISTSMR(1,I).NE.0.OR.ISTSMR(2,I).NE.0) THEN
         BUCSKN = MIN(BUCSKN,BUCMIN(I))
         BUCSTF = MIN(BUCSTF,BUCMNS(I))
         BUCSTF = MIN(BUCSTF,BUCMNR(I))
         STRSTF = MAX(STRSTF,STFMXS(I))
         STRSTF = MAX(STRSTF,STFMXR(I))
       ENDIF
   35 CONTINUE
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFILE4,'(/,A,1P,E12.4)')
     1' Minimum local skin buckling load factor      BUCSKN=',BUCSKN
      WRITE(IFILE4,'(A,1P,E12.4)')
     1' Minimum local stiffener buckling load factor BUCSTF=',BUCSTF
      WRITE(IFILE4,'(A,1P,E12.4)')
     1' Maximum local stiffener stress               STRSTF=',STRSTF
C END SEP 2005
      IF (INDIC.NE.0) CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      IF (INDIC.NE.0) GO TO 70
      IF (NTOT.EQ.0) GO TO 70
      IF (IOYES(1).GT.0) WRITE(IFILE4,40)ISTEP
40    FORMAT(/,' DISCRETE RING HOOP FORCES FOR LOAD STEP', I3,/)
      DO 50 I=1,NTOT
      IF (IOYES(1).GT.0) WRITE(IFILE4,60)I,RHF(I)
50    CONTINUE
60    FORMAT(' DISCRETE RING NO. ',I3,', HOOP FORCE =',1PE20.8)
70    CONTINUE
      RETURN
      END
C
C
C
C=DECK      PLOCAL
C./      ADD   NAME=PLOCAL
      SUBROUTINE PLOCAL(IW,IS,HC,I5,F,C,B,PSTS,PMODE,PSMODE,NSEG,RHF,
     1THERM,INDIC,TIO,IFIX,IALL,ISTEP,RHFIX)
C
C     CALLED FROM PREB, WHOSE TRACE IS PRE,MAIN.
C     PREBUCKLING STRESSES AND DISPLACEMENTS CALCULATED FROM INPUT
C     SOLUTION F.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION F
      DOUBLE PRECISION H,HPAST,HI,C1,C2,C3,W,U,R,RD,FK1,FK2,CURD
      DOUBLE PRECISION UD,WD,WDD,BETA,CFNLIN,UV,UH
C BEG APR 2009
      DOUBLE PRECISION RFK2
C END APR 2009
      DIMENSION F(*),C(I5,14),B(I5,5),PSTS(I5,3),T(100),RHFIX(198)
      DIMENSION PMODE(IALL,9),PSMODE(IALL,9),THERM(I5,8),RHF(198)
C BEG OCT 1999
      DIMENSION IW(*)
C END OCT 1999
C BEG SEP 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/ISOGRX/ISOGRD(295),IRECT(2,295),INTEXT(2,295),ISTSMR(2,295)
      COMMON/NUMSTX/NUMSTF(295)
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/CSKINX/CSKIN(6,6,100)
      COMMON/IDMSKN/INSKIN(2,295)
      COMMON/IDSTFP/ISTFPR(295)
      COMMON/STFPRX/STFPRP(4,2,100)
      COMMON/BUCCON/BUCMIN(295),BUCMNS(295),BUCMNR(295)
      COMMON/STRCON/STFMXS(295),STFMXR(295),SKNMAX(295)
      COMMON/IBIGX1/IBUCMN(295),IBUCMS(295),IBUCMR(295)
      COMMON/IBIGX2/ISTFMS(295),ISTFMR(295),ISKNMX(295)
      DIMENSION FNSKIN(2,100)
      DIMENSION STRSTR(100),STRRNG(100),STRSKN(100)
      DIMENSION BUCLOD(100),BUCSTR(100),BUCRNG(100)
      REAL N1SKIN, N2SKIN, NSCRIT, NSMAX, NUSTIF
C END SEP 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/ISTUFF/KK,I5TOT,IC,NUNK,KLAP
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/SFLAG/MONOQ
      COMMON/STRSEG/ISTRSS(295)
      COMMON/XTRSS/SIG1I,SIG1O,SIG2I,SIG2O,TAUI,TAUO,SIGEI,SIGEO
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/IDZREF/IZREF(295)
      COMMON/RING2/GAM(198),GJ(198), YC(198), 
     1            XC(198),E1(198),E2(198),PHI(200)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      REAL IX,IY,IXY,IP
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/OUTP/NPRT
c Renamed SIGNAL to SIGNAx, Feb 1996
      COMMON/PRERT/PREROT,SIGNAx,IPREBK
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/KCHNG/NWALL(295),CCH(295)
      DIMENSION Z(100),TIO(I5,4),HC(*)
      REAL N10,N20,M10,M20,K1,K2,K12
C BEG SEP 2005
C     IF (NWALL(IS).NE.4.AND.NWALL(IS).NE.9.AND.ISTRSS(IS).EQ.1)
C    1      CALL GASP(T,I5,3,ITHK(IS))
C     IF(ISTRSS(IS).EQ.1) CALL GASP(Z,I5,3,IZREF(IS))
C BEG JAN 2006
C     CALL GASP(T,I5,3,ITHK(IS))
      IF (NWALL(IS).NE.1.AND.NWALL(IS).NE.3.AND.NWALL(IS).NE.4
     1                  .AND.NWALL(IS).NE.6.AND.NWALL(IS).NE.8
     1                  .AND.NWALL(IS).NE.9)
     1 CALL GASP(T,I5,3,ITHK(IS))
C END JAN 2006
      CALL GASP(Z,I5,3,IZREF(IS))
C END SEP 2005
      J = 1
      KKS = KK
      IK = 1
      ITOT = I5TOT - 2*(IS-1)
      HI = HC(1)
      DO 120 I=1,I5
      H = HC(I)
      HPAST = HI
      HI = 2.*H-HPAST
      ITOT = ITOT + 1
      II = I5TOT + I + 1
      I2M = IW(II-1)
      I2P = IW(II+1)
      I0 = IW(II)
      I1M = I0 - 1
      I1P = I0 + 1
      IF ((I2P-I0).EQ.(IC+NUNK-KLAP))I1P = I0 + IC + 1
      C1 = (HPAST-HI)*(HI + H)/(16.*HPAST*H)
      C2 = (HI + H)*(HPAST + H)/(4.*HPAST*HI)
      C3 = - (HPAST-HI)*(HPAST + H)/(16.*HI*H)
      W = C1*F(I2M) + C2*F(I0) + C3*F(I2P)
      U = (F(I1M) + F(I1P))/2.
      R = B(I,1)
      RD = B(I,2)
      FK1 = B(I,3)
      FK2 = B(I,4)
      CURD = B(I,5)
      CURD = 0.
C BEG APR 2009
C      RFK2 = sine of the angle, phi, of the meridional slope
      RFK2 = R*FK2
      IF (IPRISM.EQ.1) THEN
C BEG JAN 2010
         FK2 = FK2/1000000.
         R = R*1000000.
C END JAN 2010
         IF (ABS(RD).GT.0.999999) THEN
            RFK2 = 0.0
         ELSE
C BEG JAN 2010
C           RFK2 = (FK2/ABS(FK2))*SQRT(1.-RD**2)
            RFK2 = (FK2/DABS(FK2))*DSQRT(1.-RD**2)
C END JAN 2010
         ENDIF
      ENDIF
C END APR 2009
      UD = (F(I1P) - F(I1M))/H
      C1 = -.5/HPAST
      C3 = .5/HI
      C2 = -C1 -C3
      WD = C1*F(I2M) + C2*F(I0) + C3*F(I2P)
      C1 = 1./(HPAST*H)
      C2 = -2./(HPAST*HI)
      C3 = 1./(HI*H)
      WDD = C1*F(I2M) + C2*F(I0) + C3*F(I2P)
      BETA = WD - U*FK1
      CFNLIN = 1.0
      EPS1 = UD + W*FK1 + CFNLIN*0.5*BETA**2
C
C BEG APR 2009
      UV = U*RFK2 - W*RD
C END APR 2009
      FMUL = 0.0
      K1 = WDD - FK1*UD - CURD*U -FMUL*EPS1*FK1
      EPS12 = 0.0
      K12 = 0.0
      IF (R.GT.0.0) GO TO 10
      EPS2 = EPS1
      K2 = K1
      GO TO 20
10    EPS2 = U*RD/R + W*FK2
      K2 = BETA*RD/R -FMUL*EPS2*FK2
20    CONTINUE
      UH = EPS2*R
C BEG APR 2009
      IF (IPRISM.EQ.1) UH = U*RD + W*RFK2
C END APR 2009
      N10 = C(I,1)*EPS1 + C(I,2)*EPS2 + C(I,3)*K1 + C(I,4)*K2
      N20 = C(I,2)*EPS1 + C(I,5)*EPS2 + C(I,6)*K1 + C(I,7)*K2
      M10 = C(I,3)*EPS1 + C(I,6)*EPS2 + C(I,8)*K1 + C(I,9)*K2
      M20 = C(I,4)*EPS1 + C(I,7)*EPS2 + C(I,9)*K1 + C(I,10)*K2
      N10 = N10 + THERM(I,1)*TEMP + THERM(I,5)
      N20 = N20 + THERM(I,2)*TEMP + THERM(I,6)
      M10 = M10 + THERM(I,3)*TEMP + THERM(I,7)
      M20 = M20 + THERM(I,4)*TEMP + THERM(I,8)
C
C BEG SEP 2005
C new stuff when there are smeared stiffeners...
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (I.EQ.1.AND.(ISTSMR(1,IS).NE.0.OR.ISTSMR(2,IS).NE.0)) THEN
         BUCMIN(IS) = 10.E+16
         BUCMNS(IS) = 10.E+16
         BUCMNR(IS) = 10.E+16
         STFMXS(IS) = 0.
         STFMXR(IS) = 0.
C BEG MAR 2008
         IF (NPRT.GT.1)
     1    WRITE(IFILE4,'(A,2I5)')' ISEG,ISOGRD(IS)=',IS,ISOGRD(IS)
C END MAR 2008
         CALL GASP(STFPRP,800,3,ISTFPR(IS))
         CALL GASP(CSKIN,3600,3,ICSKIN(IS))
      ENDIF
C   
      IF (I.EQ.1) CALL MOVER(0.,0,FNSKIN,1,200)
C
C  From SUBROUTINE PLOCAL in addbosor4.src (BIGBOSOR4):
C  Definitions:
C   IS = shell segment number
C   I  = nodal point number withing shell segment IS
C   ISTSMR(1,IS) = 0 if no smeared stringers/isogrid; 1 if yes, there are smeared members
C   ISTSMR(2,IS) = 0 if no smeared rings; 1 if yes, there are smeared rings
C   N1SKIN, N2SKIN = meridional, circumferential stress resultants in shell skin
C   CSKIN(i,j) = 6 x 6 matrix of shell wall stiffnesses
C   EPS1, K1 = meridional      reference surface membrane strain and curvature change
C   EPS2, K2 = circumferential reference surface membrane strain and curvature change
C
      IF (ISTSMR(1,IS).NE.0.OR.ISTSMR(2,IS).NE.0) THEN
C      N1SKIN, N2SKIN are meridional, hoop resultants in the skin...
         N1SKIN = CSKIN(1,1,I)*EPS1 + CSKIN(1,2,I)*EPS2 
     1           +CSKIN(1,4,I)*K1   + CSKIN(1,5,I)*K2
         N2SKIN = CSKIN(1,2,I)*EPS1 + CSKIN(2,2,I)*EPS2
     1           +CSKIN(2,4,I)*K1   + CSKIN(2,5,I)*K2
         FNSKIN(1,I) = N1SKIN
         FNSKIN(2,I) = N2SKIN
         IF (I.EQ.I5.AND.IFIX.EQ.0) CALL GASP(FNSKIN,200,1,INSKIN(1,IS))
         IF (I.EQ.I5.AND.IFIX.EQ.1) CALL GASP(FNSKIN,200,1,INSKIN(2,IS))
C
C  More definitions...
C   STRSTR(I) = maximum stress in smeared stringer/isogrid at nodal point I
C   STRRNG(I) = maximum stress in smeared ring at nodal point I
C   BUCLOD(I) = buckling load factor for local buckling of shell skin between
C               adjacent smeared stiffeners at nodal point I
C   BUCSTR(I) = buckling load factor for local buckling of smeared stringer/isogrid
C   BUCRNG(I) = buckling load factor for local buckling of smeared ring
C
C   NOTE: Local buckling and stress in smeared stiffeners are computed only
C         for smeared stiffeners with rectangular cross sections.
C
         STRSTR(I) = 0. 
         STRRNG(I) = 0. 
         BUCLOD(I) = 10.E+16
         BUCSTR(I) = 10.E+16
         BUCRNG(I) = 10.E+16
C
         IF (ISOGRD(IS).EQ.1.AND.(N1SKIN.LT.0.0.OR.N2SKIN.LT.0.0)) THEN
C
C      Get buckling load factor for flat equilateral triangular piece of skin:
C      Formula is from NACA TN-3781, July 1957 by Gerard & Becker: "Handbook of
C      Structural Stability, Part I - Buckling of Flat Plates". Formula is for
C      buckling of equilateral flat plate with N1SKIN = N2SKIN (compression).
C      NOTE: result is approximate here because in general N1SKIN is not equal
C      to N2SKIN, and in general the skin is not isotropic.
C
C  More definitions...
C   ISOGRD(IS) = 1 if smeared "stringers" are actually an isogrid
C                0 if smeared stringers run only along meridians.
C   SIDE = length of a side of the equilateral triangle formed by isogrid
C   STFPRP(j,1,I) = properties of smeared stringer/isogrd at nodal point I:
C                   STFPRP(1,1,I) = stiffener thickness
C                   STFPRP(2,1,I) = stiffener height from nearest shell skin surface
C                   STFPRP(3,1,I) = stiffener spacing
C                   STFPRP(4,1,I) = stiffener elastic modulus
C
C   STFPRP(j,2,I), j = 1,2,3,4 = same as above, for smeared rings.
C
C   NSCRIT = value of uniform stress resultant (stress x thickness) in the
C            equilateral triangular piece of shell skin that causes local
C            buckling of the simply-supported, flat triangular piece of skin.
C
C   BUCLOD(I) = buckling load factor of triangular piece of skin at nodal point I
C               of shell segment number IS
C
C   BUCMIN(IS)= minimum buckling load factor in shell segment IS
C
            FCOEF = 5.0
            SIDE = STFPRP(3,1,I)*2./SQRT(3.)
            PI = 3.1415927
C      The critical buckling resultant is NSCRIT. BUCLOD = buckling load factor:
            NSCRIT = FCOEF*PI**2*CSKIN(4,4,I)/SIDE**2
            NSMAX  = MIN(N1SKIN,N2SKIN)
            BUCLOD(I) = NSCRIT/ABS(NSMAX)
            BUCMIN(IS) = MIN(BUCMIN(IS),BUCLOD(I))
C23456789012345678901234567890123456789012345678901234567890123456789012
C           WRITE(IFILE4,'(A,2I5,A,1P,4E12.4)')
C    1    ' ISEG,IPOINT=',IS,I,'; N1SKIN,N2SKIN,BUCLOD(I),BUCMIN(IS)=',
C    1                            N1SKIN,N2SKIN,BUCLOD(I),BUCMIN(IS)
C BEG MAR 2008
            IF (NPRT.GT.1.AND.I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Minimum skin buckling load factor,BUCMIN(IS)=',BUCMIN(IS)
C END MAR 2008
         ENDIF
C
C  More definitions...
C    STRSTR = maximum stress in a (smeared) stringer or isogrid member..
C    BUCMNS = minimum buckling load factor in (smeared) stringer or isogrid member
C    IRECT(1,IS) = 1 if stringer/isogrid member has a rectangular cross section
C                = 0 if stringer/isogrid member does not have a rect. cross section
C    IRECT(2,IS) = same meaning but applied to smeared rings
C    INTEXT(1,IS)= 0 for stringer/isogrid attached to the leftmost shell skin surface
C                  (e.g. internal smeared stringer/isogrid)
C    INTEXT(1,IS)= 1 for stringer/isogrid attached to the rightmost shell skin surface
C    Z(I) = distance from the shell skin leftmost surface to the reference surface
C           at nodal point I. [The reference surface is where the membrane strain and
C           curvature changes (EPS1,K1,EPS2,K2) are measured].
C    T(I) = thickness of shell skin at nodal point I of shell segment IS
C    ZTIP = distance from shell reference surface to the tip of stringer/isogrid
C    STRTIP = stress at the tip of a smeared stringer/isogrid member.
C
         IF (ISTSMR(1,IS).EQ.1.AND.IRECT(1,IS).EQ.1) THEN
            IF (INTEXT(1,IS).EQ.0) ZTIP = -(STFPRP(2,1,I) + Z(I))
            IF (INTEXT(1,IS).EQ.1) ZTIP = STFPRP(2,1,I) + T(I) - Z(I)
            STRTIP = STFPRP(4,1,I)*(EPS1 - ZTIP*K1)
C
C           Critical buckling load of stiffener. Use formulas from ROARK:
C           FORMULAS FOR STRESS AND STRAIN, 3rd Edition, McGraw-Hill, 1954,
C           Table XVI, p. 312, Formulas 4 (s.s.,free) and 5 (clamped,free).
C           Roark gives: SIGCR = k*[ESTIFF/(1-NUSTIF**2)]*(TSTIFF/HEIGHT)**2
C           in which k is a coefficient that depends on the aspect ratio of the
C           plate (stiffener), For long, uniformly axially compressed plates:
C            a. k = 0.375 if the plate is s.s.( MDC G4295, 4.1.7)
C            b. k = 1.1   if the plate is clamped,free (Roark, Table XVI, Formula 5)
C
C  More definitions...
C   NUSTIF = Poisson ratio for stringer/isogrid member
C   SIGCR  = buckling stress for stringer/isogrid member
C   STRTIP = stress at the tip of stringer/isogrid member
C   STRROT = stress at the root of the stringer/isogrid member
C   BUCSTR(I) = buckling load factor for stringer/isogrid member at nodal point I
C   BUCMNS(IS)= minimum buckling load factor for stringer/isogrid in shell segment IS
C   STRSTR(I) = maximum stress in stringer/isogrid at nodal point I
C   STFMXS(IS)= maximum stress in stringer/isogrid in shell segment IS
C
            EDGSTF = 0.5
            NUSTIF = 0.3
C23456789012345678901234567890123456789012345678901234567890123456789012
            SIGCR = (0.375+0.7*EDGSTF)*(STFPRP(4,1,I)/(1.-NUSTIF**2))*
     1                                  (STFPRP(1,1,I)/STFPRP(2,1,I))**2
            IF (STRTIP.LT.0.0) THEN
               BUCSTR(I) = SIGCR/ABS(STRTIP)
               BUCMNS(IS) = MIN(BUCMNS(IS),BUCSTR(I))
            ENDIF
            IF (INTEXT(1,IS).EQ.0) ZROOT = -Z(I)
            IF (INTEXT(1,IS).EQ.1) ZROOT =  T(I) - Z(I)
            STRROT = STFPRP(4,1,I)*(EPS1 - ZROOT*K1)
            STRSTR(I) = MAX(ABS(STRTIP),ABS(STRROT))
            STFMXS(IS) = MAX(STFMXS(IS),STRSTR(I))
C           WRITE(IFILE4,'(A,1P,5E12.4)')
C    1    ' STRTIP,STRROT,STRSTR(I),STFMXS(IS),BUCMNS(IS)=',
C    1      STRTIP,STRROT,STRSTR(I),STFMXS(IS),BUCMNS(IS)
C BEG MAR 2008
            IF (NPRT.GT.1.AND.I.EQ.I5.AND.ISOGRD(IS).EQ.0)
     1       WRITE(IFILE4,'(A,I5,A,1P,E12.4)') ' Segment no.',IS,
     1     ' Minimum stringer buckling load factor, BUCMNS(IS)=',
     1       BUCMNS(IS)
            IF (NPRT.GT.1.AND.I.EQ.I5.AND.ISOGRD(IS).EQ.1)
     1       WRITE(IFILE4,'(A,I5,A,1P,E12.4)') ' Segment no.',IS,
     1     ' Minimum isogrid member buckling load factor, BUCMNS(IS)=',
     1       BUCMNS(IS)
            IF (NPRT.GT.1.AND.I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Maximum stringer (or isogrid member) stress, STFMXS(IS)=',
     1      STFMXS(IS)
C END MAR 2008
         ENDIF
C
C  More definitions...
C    STRRNG = maximum stress in a (smeared) ring...
C    BUCMNR = minimum buckling load factor in (smearee) ring
C    IRECT(2,IS) = 1 if smeared ring has a rectangular cross section
C                = 0 if smeared ring does not have a rect. cross section
C    INTEXT(2,IS)= 0 for smeared ring attached to the leftmost shell skin surface
C                  (e.g. internal smeared stringer/isogrid)
C    INTEXT(2,IS)= 1 for smeared ring attached to the rightmost shell skin surface
C    Z(I) = distance from the shell skin leftmost surface to the reference surface
C           at nodal point I. [The reference surface is where the membrane strain and
C           curvature changes (EPS1,K1,EPS2,K2) are measured].
C    T(I) = thickness of shell skin at nodal point I of shell segment IS
C    ZTIP = distance from shell reference surface to the tip of stringer/isogrid
C    STRTIP = stress at the tip of a smeared stringer/isogrid member.
C
         IF (ISTSMR(2,IS).EQ.1.AND.IRECT(2,IS).EQ.1) THEN
            IF (INTEXT(2,IS).EQ.0) ZTIP = -(STFPRP(2,2,I) + Z(I))
            IF (INTEXT(2,IS).EQ.1) ZTIP = STFPRP(2,2,I) + T(I) - Z(I)
            STRTIP = STFPRP(4,2,I)*(EPS2 - ZTIP*K2)
C
C           Critical buckling load of stiffener. Use formulas from ROARK:
C           FORMULAS FOR STRESS AND STRAIN, 3rd Edition, McGraw-Hill, 1954,
C           Table XVI, p. 312, Formulas 4 (s.s.,free) and 5 (clamped,free).
C           Roark gives: SIGCR = k*[ESTIFF/(1-NUSTIF**2)]*(TSTIFF/HEIGHT)**2
C           in which k is a coefficient that depends on the aspect ratio of the
C           plate (stiffener), For long, uniformly axially compressed plates:
C            a. k = 0.375 if the plate is s.s.( MDC G4295, 4.1.7)
C            b. k = 1.1   if the plate is clamped,free (Roark, Table XVI, Formula 5)
C
C  More definitions...
C   NUSTIF = Poisson ratio for smeared ring
C   SIGCR  = buckling stress for smeared ring
C   STRTIP = stress at the tip of smeared ring
C   STRROT = stress at the root of the smeared ring
C   BUCRNG(I) = buckling load factor for smeared ring at nodal point I
C   BUCMNR(IS)= minimum buckling load factor for smeared ring in shell segment IS
C   STRRNG(I) = maximum stress in smeared ring at nodal point I
C   STFMXR(IS)= maximum stress in smeared ring in shell segment IS
C
            EDGSTF = 0.5
            NUSTIF = 0.3
C23456789012345678901234567890123456789012345678901234567890123456789012
            SIGCR = (0.375+0.7*EDGSTF)*(STFPRP(4,2,I)/(1.-NUSTIF**2))*
     1                                  (STFPRP(1,2,I)/STFPRP(2,2,I))**2
            IF (STRTIP.LT.0.0) THEN
               BUCRNG(I) = SIGCR/ABS(STRTIP)
               BUCMNR(IS) = MIN(BUCMNR(IS),BUCRNG(I))
            ENDIF
            IF (INTEXT(2,IS).EQ.0) ZROOT = -Z(I)
            IF (INTEXT(2,IS).EQ.1) ZROOT =  T(I) - Z(I)
            STRROT = STFPRP(4,2,I)*(EPS2 - ZROOT*K2)
            STRRNG(I) = MAX(ABS(STRTIP),ABS(STRROT))
            STFMXR(IS) = MAX(STFMXR(IS),STRRNG(I))
C           WRITE(IFILE4,'(A,1P,5E12.4)')
C    1    ' STRTIP,STRROT,STRRNG(I),STFMXR(IS),BUCMNR(IS)=',
C    1      STRTIP,STRROT,STRRNG(I),STFMXR(IS),BUCMNR(IS)
C BEG MAR 2008
            IF (NPRT.GT.1.AND.I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Minimum ring buckling load factor, BUCMNR(IS)=', BUCMNR(IS)
            IF (NPRT.GT.1.AND.I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Maximum ring stress, STFMXR(IS)=', STFMXR(IS)
C END MAR 2008
         ENDIF
C BEG MAR 2008
         IF (NPRT.GT.1.AND.I.EQ.I5) THEN
C END MAR 2008
            IF (ISOGRD(IS).EQ.0) WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A)')
     1    ' ****** NOTE ******** NOTE ******** NOTE *********',
     1    ' The shell skin buckling load factor, BUCLOD, is not',
     1    ' computed in this section of BIGBOSOR4, but is given',
     1    ' later, near the end of the *.OUT file.',
     1    ' **** END NOTE **** END NOTE **** END NOTE *******'
            WRITE(IFILE4,'(/,A,/,A,/,A,I3,/,A,A,/,A,A,/,A,A,/)')
     1    ' SHELL SKIN PREBUCKLING MERIDIONAL AND HOOP RESULTANTS',
     1    ' N1 and N2, STIFFENER STRESS, SKIN BUCKLING LOAD FACTOR,',
     1    ' AND STIFFENER BUCKLING LOAD FACTORS FOR SEGMENT NO.',IS,
     1    ' Meridional  Circumfer  Stringer  Ring      Skin   Stringer',
     1    '    Ring',
     1    ' Resultant   Resultant   Stress  Stress   Buckling Buckling',
     1    '  Buckling',
     1    '   N1SKIN     N2SKIN    STRSTR   STRRNG    BUCLOD    BUCSTR',
     1    '    BUCRNG'
C
            DO 25 J=1,I5
               WRITE(IFILE4,'(1P,7E10.2)')
     1         FNSKIN(1,J),FNSKIN(2,J),STRSTR(J),STRRNG(J),BUCLOD(J),
     1         BUCSTR(J),BUCRNG(J)
   25       CONTINUE
         ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
      ENDIF
C     End of (ISTSMR(1,IS).NE.0.OR.ISTSMR(2,IS).NE.0) condition
C END SEP 2005
C
      IF (I.EQ.1.OR.I.EQ.I5) GO TO 30
      GO TO 70
30    IF (R.GT.0.0) GO TO 40
      GO TO 70
C
C     CORRECTION ADDENDS FOR TRUNCATION ERRORS AT SEGMENT ENDS.
C
40    F1 = 0.5*RD*H/R
      CN1 = - N20*F1 +H*.5*(FK1*N10*BETA + M10*CURD)
      CM1 = - M20*F1 - H*N10*BETA/2.
      IF (I.EQ.I5) GO TO 50
      GO TO 60
50    CN1 = - CN1
      CM1 = - CM1
60    N10 = N10 + CN1
      M10 = M10 + CM1
      N20 = N20 + C(I,2)*CN1/C(I,1)
      M20 = M20 + C(I,9)*CM1/C(I,8)
70    CONTINUE
C
C     RHF(KK) AND RHFIX(KK) CONTAIN RING HOOP FORCES WHICH APPEAR IN
C     STABILITY AND VIBRATION EQUATIONS.
C
      IF (I.NE.IRING(IS,IK)) GO TO 100
      IF (IFIX.EQ.1) GO TO 80
      RHF(KK) = ER(KK)*AREA(KK)*(UH + BETA*E2(KK))/RC(KK) +TNR(KK)*TEMP
     1  + TNRFIX(KK)
      GO TO 90
80    RHFIX(KK)=ER(KK)*AREA(KK)*(UH + BETA*E2(KK))/RC(KK) +TNR(KK)*TEMP
     1  + TNRFIX(KK)
90    CONTINUE
      IK = IK + 1
      KK = KK + 1
100   CONTINUE
      CURV1 = FK1
      CURV2 = FK2
C
C     STRESSES CALCULATED FROM STRESS RESULTANTS FOR MONOCOQUE
C     SHELL ONLY.
C
      IF (NWALL(IS).EQ.4.OR.NWALL(IS).EQ.9.OR.ISTRSS(IS).NE.1) GO TO 5
      TIN = TIO(I,1)*TEMP + TIO(I,3)
      TOUT = TIO(I,2)*TEMP + TIO(I,4)
      CALL STRESS(EPS1,EPS2,EPS12,K1,K2,K12,T(I),Z(I),
     1IS,I,TIN,TOUT,CURV1,CURV2)
    5 CONTINUE
C
C     PSTS(I,J) CONTAINS PRESTRESS QUANTITIES WHICH AFFECT THE STABILITY
C     AND VIBRATION EQUATIONS.
C
      PSTS(I,1) = N10
      PSTS(I,2) = N20
      PSTS(I,3) = BETA*(1.-PREROT)
      IF (INDIC.EQ.2) GO TO 110
      IF (IFIX.GT.0) GO TO 120
110   CONTINUE
      PMODE(ITOT,1) = W
      PMODE(ITOT,2) = U
      PMODE(ITOT,3) = BETA
C
C     PRESTRESS INFORMATION STORED IN PMODE AND PSMODE FOR LATER PLOTTIN
C
      PMODE(ITOT,4) = UV
      PMODE(ITOT,5) = N10
      PMODE(ITOT,6) = N20
      PMODE(ITOT,7) = M10
      PMODE(ITOT,8) = M20
C
      DO 113 IIJ = 1,8
  113 PSMODE(ITOT,IIJ) = 0.
      IF (MONOQ.EQ.0) GO TO 120
C
      IF (NWALL(IS).EQ.4.OR.NWALL(IS).EQ.9.OR.ISTRSS(IS).NE.1)
     1  GO TO 115
      PSMODE(ITOT,1) = W
      PSMODE(ITOT,2) = U
      PSMODE(ITOT,3) = SIG1I
      PSMODE(ITOT,4) = SIG1O
      PSMODE(ITOT,5) = SIG2I
      PSMODE(ITOT,6) = SIG2O
      PSMODE(ITOT,7) = SIGEI
      PSMODE(ITOT,8) = SIGEO
      GO TO 120
C
  115 CONTINUE
      PSMODE(ITOT,1) = W
      PSMODE(ITOT,2) = U
      PSMODE(ITOT,3) = EPS1
      PSMODE(ITOT,4) = EPS2
      PSMODE(ITOT,5) = K1
      PSMODE(ITOT,6) = K2
      PSMODE(ITOT,7) = 0.
      PSMODE(ITOT,8) = 0.
  120 CONTINUE
C BEG OCT 2005
C  End of loop, DO 120 I=1,I5
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      DO 125 I = 1,I5
       DIFF = 1.
       IF (STFMXS(IS).NE.0.) DIFF = ABS(STRSTR(I)-STFMXS(IS))/STFMXS(IS)
       IF (DIFF.LT.0.0001) ISTFMS(IS) = I
       DIFF = 1.
       IF (STFMXR(IS).NE.0.) DIFF = ABS(STRRNG(I)-STFMXR(IS))/STFMXR(IS)
       IF (DIFF.LT.0.0001) ISTFMR(IS) = I
       DIFF = 1.
       IF (BUCMNS(IS).NE.0.) DIFF = ABS(BUCSTR(I)-BUCMNS(IS))/BUCMNS(IS)
       IF (DIFF.LT.0.0001) IBUCMS(IS) = I
       DIFF = 1.
       IF (BUCMNR(IS).NE.0.) DIFF = ABS(BUCRNG(I)-BUCMNR(IS))/BUCMNR(IS)
       IF (DIFF.LT.0.0001) IBUCMR(IS) = I
       DIFF = 1.
       IF (BUCMIN(IS).NE.0.) DIFF = ABS(BUCLOD(I)-BUCMIN(IS))/BUCMIN(IS)
       IF (DIFF.LT.0.0001) IBUCMN(IS) = I
  125 CONTINUE
C
      I5TOT = I5TOT + I5 + 2
      IF (INDIC.EQ.2) GO TO 130
      IF (IFIX.GT.0) GO TO 140
130   CONTINUE
      N = 9*IALL
      IF (IS.EQ.NSEG) CALL GASP(PMODE,N,1,IPMODE(ISTEP))
      IF (IS.EQ.NSEG.AND.MONOQ.NE.0)CALL GASP(PSMODE,N,1,IPSMD(ISTEP))
      IF (INDIC.EQ.0) GO TO 240
140   N = 3*I5
C
C     PSTS(I,J) STORED WITH IDENTIFIER IPFXD IF LOADS ARE FIXED, WITH
C     IDENTIFIER IPSTS IF LOADS ARE EIGENVALUE PARAMETERS (VARIABLE).
C
      IF (INDIC.NE.1.AND.INDIC.NE.2) GO TO 240
      IF (IFIX.EQ.1) GO TO 160
      IF (IOYES(2).GT.0) WRITE(IFILE4,150)
150   FORMAT(/,' TOTAL PRESTRESS STATE. THESE QUANTITIES MINUS',/,
     1' CORRESPONDING FIXED QUANTITIES ARE MULTIPLIED BY EIGENVALUE.')
C23456789012345678901234567890123456789012345678901234567890123456789012
      GO TO 180
160   CONTINUE
      IF (IOYES(2).GT.0) WRITE(IFILE4,170)
170   FORMAT(/,' FIXED PART OF AXISYMMETRIC PRESTRESS STATE.',/,
     1' THESE QUANTITIES ARE NOT MULTIPLIED BY EIGENVALUE.')
180   CONTINUE
      IF (IOYES(2).GT.0) WRITE(IFILE4,190)IS
190   FORMAT(/,' PRESTRESS-- MERIDIONAL RESULTANT, N10',
     1'   CIRCUMFERENTIAL RESULTANT,N20  MERIDIONAL ROTATION, CHIO',
     1'   FOR SEGMENT ',I3,/)
      DO 210 I=1,I5
      IF (IOYES(2).GT.0)
     1 WRITE(IFILE4,200)I,PSTS(I,1),PSTS(I,2),PSTS(I,3)
200   FORMAT(I8,1P3E35.8)
210   CONTINUE
      KK1 = KK - 1
      IF (KK1.LT.KKS) GO TO 240
      DO 230 I=KKS,KK1
      IF (IFIX.EQ.1) GO TO 215
      IF (IOYES(2).GT.0) WRITE(IFILE4,220)I,RHF(I)
      GO TO 230
215   IF (IOYES(2).GT.0) WRITE(IFILE4,220) I,RHFIX(I)
220   FORMAT(/,' HOOP FORCE IN DISCRETE RING NO. ',I3,' =',1PE20.8)
230   CONTINUE
240   CONTINUE
      RETURN
      END
C
C
C
C=DECK      OUTPRE
      SUBROUTINE OUTPRE(IPMODE,IARC,I2,I5,NSEG,BMODE,ISTRES)
C     CALLED FROM OUT2, WHOSE TRACE IS READIT,MAIN
C     AXISYMMETRIC PRESTRESS STATE IS PRINTED OUT
C
C BEG SEP 2005
      COMMON/IBIGX2/ISTFMS(295),ISTFMR(295),ISKNMX(295)
      COMMON/STRCON/STFMXS(295),STFMXR(295),SKNMAX(295)
      DIMENSION SIGVON(100)
      COMMON/LSTEPS/ISTEP
      COMMON/PSTEPX/PSTEP(200),ENDUVS(200)
C END SEP 2005
C BEG AUG 1999
      COMMON/ENDUVX/ENDUV,STRMAX,ARCLEN
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C END AUG 1999
      COMMON/RGFCE/ RHF(198)
      COMMON/ALLRNG/ NTOT,IPRE
      COMMON/INSTAB/INDIC
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/STRSEG/ISTRSS(295)
      COMMON/KCHNG/NWALL(295),CCH(295)
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
C BEG MAR 2007
      DIMENSION IARC(295),I5(295),BMODE(I2,9),S(10000),IDUMMY(295)
C END MAR 2007
C BEG APR 1992
C  NEW VARIABLES FOR STRESS CONSTRAINTS FOR COMPOSITE MATERIAL...
      DIMENSION WORDB(99),IPOINC(1500),CONSTR(99)
      DIMENSION EMAX(5,20),EMARG(5,20)
      CHARACTER*80 WORDB
C END APR 1992
      NN = 9*I2
      CALL GASP(BMODE,NN,3,IPMODE)
      IALL = 0
      CALL GASP(S,I2 ,3,IARC(1))
      ISTTHK = 0
C
      DO 60 I=1,NSEG
      I5I = I5(I)
      IF (IOSEG(I).NE.0) GO TO 5
      IALL = IALL + I5I
      GO TO 60
    5 CONTINUE
      WRITE(IFILE4,10)I
C BEG DEC 2010
10    FORMAT(/,25X,'AXISYMMETRIC PRESTRESS DISTRIBUTION FOR SEGMENT', 
     1 I4)
C END DEC 2010
      IF (ISTRES.EQ.0) WRITE(IFILE4,20)
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.1
     1  .AND.NWALL(I).NE.4.AND.NWALL(I).NE.9) WRITE(IFILE4,30)
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.1
     1  .AND.(NWALL(I).EQ.4.OR.NWALL(I).EQ.9)) WRITE(IFILE4,35)
      IF (ISTRES.EQ.2) WRITE(IFILE4,35)
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.0) WRITE(IFILE4,35)
20    FORMAT(/,' POINT   STATION        W0         U0          BETA   ',
     1'     UV          N10         N20         M10         M20',/,
     2         '       (ARC LENGTH)   NORMAL   MERIDIONAL     MERID.  ',
     3'    AXIAL       MERID.     CIRCUMF.     MERID.     CIRCUMF.',/,
     4         '                      DISP.   DISPLACEMENT     ROT.   ',
     5'    DISP.     RESULTANT   RESULTANT    MOMENT      MOMENT',/)
C23456789012345678901234567890123456789012345678901234567890123456789012
30    FORMAT(/,' POINT    STATION       W0         U0        SIGMA1(IN)'
     1,' SIGMA1(OUT) SIGMA2(IN) SIGMA2(OUT) SIGMAE(IN) SIGMAE(OUT)',/,
     2         '       (ARC LENGTH)   NORMAL   MERIDIONAL     MERID.  ',
     3'  MERIDIONAL   CIRCUMF.   CIRCUMF.    VON MISES EQUIVALENT',/,
     4         '                       DISP.  DISPLACEMENT    STRESS  ',
     5'    STRESS      STRESS     STRESS  INNER FIBER  OUTER FIBER',/)
35    FORMAT(/,   ' POINT    STATION       W0         U0       EPSILON',
     1' 1  EPSILON 2   KAPPA 1      KAPPA 2 ',/,
     2            '       (ARC LENGTH)   NORMAL   MERIDIONAL    MERID.',
     3'     CIRCUMF.    MERID.      CIRCUMF.',/,
     4          '                       DISP.  DISPLACEMENT    STRAIN ',
     5'    STRAIN     CHANGES IN CURVATURE',/)
C
C BEG OCT 2005
      SKNMAX(I) = 0.
C END OCT 2005
      DO 50 J=1,I5I
      IALL = IALL + 1
      WRITE(IFILE4,40)J,S(IALL),(BMODE(IALL,JJ),JJ=1,8)
C BEG JAN 2011
C40    FORMAT(I5,1P9E12.3)
40    FORMAT(I5,1PE12.5,8E12.3)
C END JAN 2011
C BEG AUG 1999
      IF (I.EQ.1.AND.J.EQ.1) THEN
         STRMAX = 0.
         IF (ISTRES.EQ.0) THEN
            ENDUV = BMODE(IALL,4)
            WRITE(IFILE4,42) ENDUV
   42       FORMAT(/,' ***** Axial displacement, UV *******',/,
     1    ' ENDUV =',1P,E12.4,/,
     1    ' ************************************************')
C BEG SEP 2005
            IF (ISTEP.GT.0.AND.ISTEP.LE.200)
     1      ENDUVS(ISTEP) = ENDUV
C END SEP 2005
         ENDIF
      ENDIF
      IF (ISTRES.EQ.1.AND.ISTRSS(I).EQ.1.AND.NWALL(I).EQ.2) THEN
C BEG OCT 2005
         SIGVON(J) = MAX(BMODE(IALL,7),BMODE(IALL,8))
         STRMAX = MAX(STRMAX,SIGVON(J))
         SKNMAX(I) = MAX(SKNMAX(I),SIGVON(J))
      ENDIF
      IF (I.EQ.NSEG.AND.J.EQ.I5I) ARCLEN= S(IALL)
C END AUG 1999
50    CONTINUE
C BEG OCT 2005
      DO 55 J = 1,I5I
       DIFF = 1.
       IF (SKNMAX(I).NE.0.) DIFF = ABS(SIGVON(J)-SKNMAX(I))/SKNMAX(I)
       IF (DIFF.LT.0.0001) ISKNMX(I) = J
   55 CONTINUE
C END OCT 2005
      IF ((NWALL(I).EQ.4.OR.NWALL(I).EQ.9)
     1                 .AND.ISTRSS(I).EQ.1.AND.ISTRES.EQ.1) ISTTHK=1
60    CONTINUE
C BEG AUG 1999
      WRITE(IFILE4,62) STRMAX
   62 FORMAT(/,
     1' ****** MAXIMUM EFFECTIVE STRESS IN ISOTROPIC WALL ******',/,
     1' STRMAX=',1P,E12.4,/,
     1' ******************************************************')
C END AUG 1999
C
C  PRINT OUT STRESSES IN COMPOSITE LAMINATED WALL... (25 AUG., 1985)
C
      IF (ISTTHK.EQ.1) THEN
         ICOL1 = 3
         ICOL2 = 4
         ICOL3 = 7
         ICOL4 = 5
         ICOL5 = 6
         ICOL6 = 8
         DO 65 J = 1,NSEG
   65    IDUMMY(J) = 1
C BEG APR 1992
C        CALL STRTHK(BMODE,IALL,1,1,1.0,NSEG,I5,1,
C    1               IDUMMY,NWALL,0.,ICOL1,ICOL2,ICOL3,ICOL4,
C    1               ICOL5,ICOL6)
C 
C INCLUDE STRESS CONSTRAINTS FOR LAMINATED COMPOSITE MATERIAL...
         CALL STRTHX(BMODE,IALL,1,1,FSSTR,NSEG,I5,
     1                  1,IDUMMY,NWALL,0.,ICOL1,ICOL2,ICOL3,
     1                  ICOL4,ICOL5,ICOL6,WORDB,EMAX,EMARG,
     1                  IMOD,ITYPE,FMAX,INUMTT,IPOINC,ICONST,CONSTR,
     1                  INDIC)
C
C END APR 1992
      ENDIF
C
C  END OF 25 AUG., 1985 MODIFICATION.
C

      IF (NTOT.EQ.0) RETURN
      IF (INDIC.EQ.0) RETURN
      IF (IOYES(3).EQ.0) RETURN
      WRITE(IFILE4,70)
70    FORMAT(/,' HOOP FORCES IN DISCRETE RINGS')
      WRITE(IFILE4,80)
80    FORMAT(/,' RING NO.              HOOP FORCE',/)
      DO 90 I=1,NTOT
90    WRITE(IFILE4,100)I,RHF(I)
100   FORMAT(I7, 1PE20.8)                        
      RETURN
      END
C
C
C
C=DECK      ARRAYSLIB
C
C  THIS IS THE ARRAYS LIBRARY  (SOURCE FILE)
C
C
C=DECK      ARRAYS
C BEG SEP 2005
      SUBROUTINE ARRAYS(BBB,B,C,DI,DIAG,ISKIN)
C END SEP 2005
C
C     CALLED FROM MAIN.. FINDS STIFFNESS MATRIX FOR UNLOADED SHELL,
C     MATRIX OF ELEMENTS ARISING FROM PRESTRESS AND PRE-DEFORMATION,
C     AND MASS MATRIX, ALL FOR A GIVEN CIRCUMFERENTIAL WAVE NUMBER N.
C
      DOUBLE PRECISION B,FB,C,DI
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
      COMMON/IFRHX/IFB,RHFIX(198),
     1             KKKK,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/RGFCE/RHF(198)
C BEG MAR 2007
      DIMENSION B(*),IW(10000),ILOC(30000)
      DIMENSION DS(10000),BBB(*),FB(60000),C(*),DIAG(*),DI(*)
C END MAR 2007
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/BKSIZE/ IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/DETER/DET,NEX
      COMMON/IDEIG/IDMODE(500),NVECTL,EIGENW(500)
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/DSPACE/IDS
      COMMON/WAVES/ N0,N,NMIN,NMAX,INCR
      COMMON/INSTAB/INDIC
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/TOTPTS/M3
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/OUTP/NPRT
      COMMON/COUNTR/NKOUNT
      COMMON/TWORHS/ITWO,IDMOD2(200)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       IF (NPRT.GT.1) WRITE(IFILE4,10)N
10     FORMAT(/,' ENTER SUBROUTINE ARRAYS TO CALCULATE STIFFNESS',
     1' MATRIX,',/,' LOAD-GEOMETRIC MATRIX, L**2 MATRIX, OR MASS',
     1' MATRIX. ',I6,' CIRCUMFERENTIAL WAVES')
      ELSE
       IF (NPRT.GT.1) WRITE(IFILE4,11)N
11     FORMAT(/,' ENTER SUBROUTINE ARRAYS TO CALCULATE STIFFNESS',
     1' MATRIX,',/,' LOAD-GEOMETRIC MATRIX, L**2 MATRIX, OR MASS',
     1' MATRIX. ',I6,' AXIAL HALF WAVES')
      ENDIF
      IF (NPRT.GT.1) CALL SR100T(2)
C BEG NOV 2005
      DIAMX0 = 10.E+28
C END NOV 2005
      FITWO = ITWO
      ITOT = I2 + 2*NSEG
      CALL GASP(ILOC,M3,3,ILOCB)
      IF (INDIC.EQ.3.AND.NKOUNT.GT.1) GO TO 20
      CALL GASP(IW,ITOT,3,IIWB)
      CALL GASP(DS,I2,3,IDS)
20    IF (INOTE.EQ.1.AND.NKOUNT.GT.1) GO TO 30
      IF (INOTE.EQ.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
30    CONTINUE
C
C     BASIC STIFFNESS MATRIX CALCULATED (IBUCK=1)
C
      IF (NPRT.GT.1) WRITE(IFILE4,40)
40    FORMAT(/,'    BEGIN STIFFNESS MATRIX COMPUTATION. IBUCK = 1')
      IF (NPRT.GT.1) CALL SR100T(2)
C BEG SEP 2005
      CALL ASTAB(1,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
      IF (NPRT.GT.1) WRITE(IFILE4,50)
50    FORMAT('    STIFFNESS MATRIX COMPUTED, IBUCK = 1')
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (INDIC.EQ.3.OR.INDIC.EQ.-2) GO TO 110
      IF (INDIC.EQ.2) GO TO 90
60    CONTINUE
C
C     LOAD-GEOMETRIC MATRIX COMPUTATION
C
C BEG SEP 2005
      CALL ASTAB(2,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
      IF (NPRT.GT.1) WRITE(IFILE4,70)
70    FORMAT('    LOAD-GEOMETRIC MATRIX COMPUTED. IBUCK=2.')
      IF (NPRT.GT.1) CALL SR100T(2)
90    IF (INDIC.NE.2) GO TO 110
C
C     MASS MATRIX IS DERIVED FOR VIBRATION PROBLEMS (INDIC=2,IBUCK=3)
C
C BEG SEP 2005
      CALL ASTAB(3,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
      IF (NPRT.GT.1) WRITE(IFILE4,100)
100   FORMAT('    MASS MATRIX COMPUTED, IBUCK = 3')
      IF (NPRT.GT.1) CALL SR100T(2)
110   CONTINUE
      IF (INDIC.NE.3) GO TO 180
C     SOLUTION OF LINEAR STRESS PROBLEM FOR GIVEN VALUE OF WAVENUMBER, N
C BEG OCT 2005
      CALL FACTR(C,B,IDRW(1,1),DET,NEX,IBLK,NGBK,NFK,ILOC,DIAG,DI,KMAXB,
     1 IFILE4,ITESTX,IABORT,DIAMX0)
C END OCT 2005
      IF (NPRT.LT.3) GO TO 140
      IF (NKOUNT.EQ.1) WRITE(IFILE4,115) (PALL(J),J=1,100)
  115 FORMAT(/,' PALL(J), J=1,100 ='/(1P10E10.2))
      DO 135 J = 1,ITWO
      IF (J.EQ.1) WRITE(IFILE4,120)
      IF (J.EQ.2) WRITE(IFILE4,125)
120   FORMAT(/,' INDIC = 3, RIGHT-HAND-SIDE FOLLOWS, LOAD SYSTEM A') 
125   FORMAT(/,' INDIC = 3, RIGHT-HAND-SIDE FOLLOWS, LOAD SYSTEM B')
      IF (J.EQ.1) THEN
      WRITE(IFILE4,130)(FB(I),I=1,M3)
      ELSE
      IBEG = M3+1
      IEND = 2*M3
      WRITE(IFILE4,130)(FB(I),I=IBEG,IEND)
      ENDIF
130   FORMAT(1P10E10.2)       
135   CONTINUE
140   CALL SOLVE(B,FB,IBLK,IDRW(1,1),NGBK,ILOC,DIAG,M3,ITWO)
      MNUMB = MNUMB + 1
      IF (NPRT.LT.3) GO TO 160
      WRITE(IFILE4,150)MNUMB
150   FORMAT(/,' SOLUTION VECTOR FOLLOWS FOR LOAD SET A, MNUMB=',I3)
      WRITE(IFILE4,130)(FB(I),I=1,M3)
C BEG AUG 1999
      IF (ITWO.EQ.2) THEN
       WRITE(IFILE4,152)MNUMB
152    FORMAT(/,' SOLUTION VECTOR FOLLOWS FOR LOAD SET B, MNUMB=',I3)
       IBEG = M3+1
       IEND = 2*M3
       WRITE(IFILE4,130)(FB(I),I=IBEG,IEND)
      ENDIF
C     WRITE(IFILE4,'(A,2I5)')
C    1                  ' BEFORE GASP:IDMODE(MNUMB),IDMOD2(MNUMB)=',
C    1                                IDMODE(MNUMB),IDMOD2(MNUMB)
C END AUG 1999
160   M32 = 2*M3
      CALL GASP(FB,M32,1,IDMODE(MNUMB))
      IF (ITWO.EQ.2) CALL GASP(FB(M3+1),M32,1,IDMOD2(MNUMB))
C BEG AUG 1999
C     IF (NPRT.GE.3)
C    1WRITE(IFILE4,'(A,2I5)')
C    1                  ' AFTER GASP: IDMODE(MNUMB),IDMOD2(MNUMB)=',
C    1                                IDMODE(MNUMB),IDMOD2(MNUMB)
C END AUG 1999
  165 FORMAT(/,' M3,M32,MNUMB,IDMODE(MNUMB),(FB(I),I=1,M3)=',4I10,/,
     1 (1P10E12.3))
      IF (NPRT.LT.2) GO TO 180
      WRITE(IFILE4,170)
170   FORMAT(/,' LINEAR EQUILIBRIUM EQUATIONS SOLVED FOR CURRENT',
     1' VALUE OF CIRCUMFERENTIAL WAVENUMBER,N.',/)
180   CONTINUE
      RETURN
      END
C
C
C
C=DECK      ASTAB
C./      ADD   NAME=ASTAB
C BEG SEP 2005
      SUBROUTINE ASTAB(IBUCK,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
C
C     CALLED FROM ARRAYS, WHICH IS CALLED FROM MAIN. FINDS COEFFICIENT
C     MATRICES FOR ALL SHELL SEGMENTS FOR A GIVEN VALUE OF WAVENUMBER N.
C     WITH IBUCK = 1, STIFFNESS MATRIX OF SHELL LOADED BY FIXED LOADS
C                     IS DERIVED.
C     WITH IBUCK=2, THE LOAD-GEOMETRIC MATRIX IS CALCULATED (BUCKLING)
C     WITH IBUCK=3, THE MASS MATRIX IS CALCULATED (VIBRATION)
C     WITH IBUCK=4, THE LAMBDA-SQUARED MATRIX IS COMPUTED (BUCKLING)
C
      DOUBLE PRECISION B,FB
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(295),IRECT(2,295),INTEXT(2,295),ISTSMR(2,295)
      COMMON/NUMSTX/NUMSTF(295)
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/IDMSKN/INSKIN(2,295)
      DIMENSION FNSKNV(2,100),FNSKNF(2,100),CSKIN(6,6,100)
C END SEP 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      DIMENSION RHF(198),RHFIX(198),FB(1980),IW(*),ILOC(*)
C BEG MAR 2007
      DIMENSION B(*),BBB(*),DS(*),Z(10000)
C END MAR 2007
      COMMON/MISCEL/ICOND1,ICOND2,KK,NSUB,KLAP,I5TOT,IC,III,IV
C BEG JUN 2009 
      COMMON/JUNCT/IFIX(598,6),IFX(598,6),ITYPE(598)
      COMMON/JUNCTB/IFIXB(598,6),IFXB(598,6),ITYPEB(598)
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009 
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/TOTPTS/M3
      COMMON/RMASS/RM(198)
      COMMON/INSTAB/INDIC
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/TWORHS/ITWO,IDMOD2(200)
C  FOLLOWING 7 STATEMENTS FOR DYNAMIC REACTION (AUG. 17, 1985)
      COMMON/IZDTR/IZZ
      COMMON/COUNTR/NKOUNT
      IF (IBUCK.NE.1) GO TO 5
      IF (INDIC.NE.3) GO TO 5
      IF (NKOUNT.GT.1) GO TO 5
      CALL GASP(Z,I2,3,IZZ)
    5 CONTINUE
C
      ICOND1 = 1
      ICOND2 = 1
      KK = 1
      NSUB = 7
      KLAP = 4
      I5TOT = 0
      IC = 4
      III = 1
      IV = 0
      FITWO = ITWO
      IF (IBUCK.EQ.1) KROOTS = 0
      IF (INDIC.NE.3) GO TO 20
      M32 = ITWO*M3
      DO 10 I=1,M32
10    FB(I) = 0.0
20    CONTINUE
      IMAX = IMAXB
      DO 30 I=1,IMAX
30    B(I)  = 0.0
40    FORMAT(1P9E13.4)
      ITOT = 1
      ITOTL = 0
      IF (INOTE.GT.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 70 I=1,NSEG
C
C     CALCULATE MATRIX ELEMENTS FOR NEXT SHELL SEGMENT
C     ALSO RIGHT-HAND-SIDE CALCULATED FOR NONSYMMETRIC STRESS ANALYSIS
C     IF INDIC = 3.
C
      I5I = I5(I)
50    IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
C BEG FEB 2008
C     IF (INDIC.EQ.3) THEN
C        WRITE(IFILE4,'(A,5I7)')
C    1 ' I,I5I,IPOS,IEND,IADD=',I,I5I,IPOS,IEND,IADD
C     ENDIF
C END FEB 2008
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      IF (IEND.LT.400000) GO TO 60
C END JUN 2009
C END FEB 2008
C END MAR 2007
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 50
60    CONTINUE
C BEG SEP 2005
      IF (ISKIN.EQ.1) THEN
         CALL MOVER(0.,0,FNSKIN,1,200)
         CALL MOVER(0.,0,CSKIN,1,3600)
         IF (ISTSMR(1,I).EQ.1) THEN
            CALL GASP(CSKIN,3600,3,ICSKIN(I))
            CALL GASP(FNSKNV,200,3,INSKIN(1,I))
            CALL GASP(FNSKNF,200,3,INSKIN(2,I))
         ENDIF
      ENDIF
C END SEP 2005
      IF (INDIC.EQ.3) CALL STABIL(I,I5I,DS(ITOT),NSEG,IBUCK,
     1 BBB(8*I5I+IPOS),BBB(27*I5I+IPOS),BBB(22*I5I+IPOS),FB,B,IW,
     2 BBB(IPOS),ILOC,IFX,IFIX,IROWCB,ITYPE,IMAX,BBB(33*I5I+IPOS),
     3 BBB(36*I5I+IPOS),RHF,RHFIX,RM,IFXB(1,2),PALL,ILPOS(1,I),
C BEG SEP 2005
     4 Z(ITOT),ISKIN,NUMSTF(I),FNSKNV,FNSKNF,CSKIN)
C END SEP 2005
C
      IF (INDIC.NE.3)
     1CALL STABIL(I,I5I,DS(ITOT),NSEG,IBUCK,BBB(8*I5I+IPOS),
     1BBB(27*I5I +IPOS),BBB(22*I5I+IPOS),FB,B,IW,BBB(IPOS),ILOC,IFXB,
     2IFIXB,IROWCB,ITYPEB,IMAX,BBB(33*I5I+IPOS),BBB(36*I5I+IPOS),
C BEG SEP 2005
     3RHF,RHFIX,RM,IFXB(1,2),PALL,ILPOS(1,I),Z(ITOT),
     4ISKIN,NUMSTF(I),FNSKNV,FNSKNF,CSKIN)
C END SEP 2005
C
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
70    CONTINUE
      RETURN
      END
C
C
C
C=DECK      STABIL
      SUBROUTINE STABIL(ISEG,L5,HS,NSEG,IBUCK,COEF,PR,BG,FFF,AS,IW,THERM
     1,ILOC,IFX,IFIX,IROWC,ITYPE,IMAX,PSVAR,PSFIX,RHF,RHFIX,RM,IROWCN,
     1 PALL,IPOS,Z,
     1ISKIN,NUMSTF,FNSKNV,FNSKNF,CSKIN)
C
C     CALLED FROM ASTAB, WHICH IS CALLED FROM ARRAYS, WHICH IS CALLED
C     FROM MAIN.  SETS UP STABILITY OR VIBRATION OR NONSYMMETRIC
C     STRESS EQUATIONS FOR CURRENT SEGMENT (ISEG) AND CURRENT WAVE-
C     NUMBER N. SEE THE DESCRIPTION UNDER PRESTS FOR MORE DETAILS OF
C     METHOD. BASED ON MINIMIZATION OF ENERGY WITH RESPECT TO MESH
C     POINT DISPLACEMENTS.
C
C BEG OCT 2010
C BEG NOV 2010
      REAL N1FIX,N2FIX,N1VAR,N2VAR
      COMMON/N1N2FX/N1FIX(100,295),N2FIX(100,295)
      COMMON/N1N2VR/N1VAR(100,295),N2VAR(100,295)
C END NOV 2010
C END OCT 2010
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION  R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C,B1,D,  G,E,TR1,U,ROT,TR2,PRE,TR3,G1,QD,AS
      DOUBLE PRECISION DS,SMS,RHORC,RHORCA,CHIFIX,CHIVAR
      DOUBLE PRECISION FFF,VN1,VN2,WB,VB,UB,QSAVE
      DOUBLE PRECISION USTAR,VSTAR,WSTAR,HPAST,HI,WBD
C BEG MAR 2008
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
C END MAR 2008
C BEG AUG 1999
      DOUBLE PRECISION RNT
      DIMENSION RNT(6,7),PRE(6,6)
C END AUG 1999
C BEG SEP 2005
      DIMENSION FNSKNV(2,100),FNSKNF(2,100),CSKIN(6,6,100)
C END SEP 2005
      DIMENSION UB(7),VB(7),WB(7),HS(*),WBD(7),Z(*)
      DIMENSION COEF(L5,14),BG(L5,5),PR(L5,6),RHFIX(198),RHF(198)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/INERT/FIS(198),FIN(198),FISN(198)
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/INTRG/NSTATN(295),IRING(295,20)
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      REAL IX,IY,IXY,IP
      COMMON/FNDAT/FSTIF(295)
      COMMON/THEMAL/ITHERM(295)
      COMMON/INSTAB/INDIC
      DIMENSION G1(4,4),QD(4,7),RM(295),PSVAR(L5,3),PSFIX(L5,3)
C BEG MAR 2007
C BEG JUN 2009
      DIMENSION IFX(598,6),IFIX(598,6),ILOC(*),ITYPE(598),IROWC(598)
      DIMENSION IROWCN(598),PALL(*),IPOS(*)
C END JUN 2009
C END MAR 2007
C BEG DEC 1990
      DIMENSION QSAVE(70,4,7),IRSAVE(70),ISAVE(70,7),IW(*),AS(*)
C END DEC 1990
      DIMENSION FFF(*),THERM(L5,8)
      DIMENSION C(6,6),B1(6,7),D(4,7),G(4,4),E(4,4)
C BEG AUG 1999
C     DIMENSION TR1(4,4),U(7,7),ROT(3,7),TR2(3,3),PRE(3,3),TR3(4,4)
      DIMENSION TR1(4,4),U(7,7),ROT(3,7),TR2(3,3),         TR3(4,4)
C END AUG 1999
C BEG NOV 1999
      COMMON/FN2ADX/FN2ADD(2),NWAVAD,NWAVLC
C END NOV 1999
      COMMON/EIGENV/P,OMG2,RHO
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/MISCEL/ICOND1,ICOND2,IK,NSUB,KLAP,I5TOT,IC,III,IV
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
      COMMON/TWORHS/ITWO,IDMOD2(200)
      COMMON/TOTPTS/M3
      COMMON/SHEARF/SHEAR(198)
      COMMON/NOHARM/NHARM
      COMMON/COUNTR/NKOUNT
      COMMON/NCONDS/NCOND
      COMMON/OUTP/NPRT
      COMMON/CMAXS/CMAX
      COMMON/BCK/IDRW( 20,5)
      COMMON/BLK/IBLK,NGBK(20),NKF(20)
C BEG JUN 2009 
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
C END MAR 2007
c Renamed SIGNAL to SIGNAx, Feb 1996
      COMMON/PRERT/PREROT,SIGNAx,IPREBK
      COMMON/INDICS/I3M,I2M,I1M,I0,I1P,I2P,I3P
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/RHARM/RVAR(198),RFIX(198)
C BEG SEP 1997
      COMMON/NUMTNK/IFLSEG(295)
C END SEP 1997
50    KK = 1
C
C     SOME INITIALIZATIONS FOLLOW.
      DO 70 I=1,6
      DO 60 J=1,6
C BEG AUG 1999
      PRE(I,J) = 0.0
C END AUG 1999
60    C(I,J) = 0.0
      DO 70 J=1,7
C BEG AUG 1999
      RNT(I,J) = 0.0
C END AUG 1999
70    B1(I,J) = 0.0
      DO 90 I=1,4
      DO 80 J=1,7
      QD(I,J) = 0.0
80    D(I,J) = 0.0
      DO 90 J=1,4
      G(I,J) = 0.0
      E(I,J) = 0.0
90    TR1(I,J) = 0.0
      DO 110 I=1,3
      DO 100 J=1,7
100   ROT(I,J) = 0.0
      DO 110 J=1,3
      TR2(I,J) = 0.0
C BEG AUG 1999
110   CONTINUE
C END AUG 1999
      DO 120 I=1,7
      UB(I) = 0.0
      VB(I) = 0.0
      WBD(I) = 0.0
120   WB(I) = 0.0
      UB(2) = 0.5
      UB(5) = 0.5
      VB(3) = 0.5
      VB(6) = 0.5
      FN = FLOAT(N)
C BEG SEP 2005
      ISKINS = ISKIN
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         FNTRY = FLOAT(NUMSTF/2) + 0.1
         NTRY  = FNTRY
         IF (NTRY.NE.N) ISKINS = 0
      ENDIF
      IF (ISKINS.EQ.1.AND.IBUCK.EQ.1) THEN
        WRITE(IFILE4,'(/,A,A,I4,A,I4,A,I4)')
     1' ****** SKIN BUCKLING *******',
     1' Shell segment no.',ISEG,'; Number of stringers=',NUMSTF,
     1' No. of circ. waves=',N
        WRITE(IFILE4,'(A,1P,E12.4,/,A,1P,E12.4)')
     1' "Variable" meridional resultant, FNSKNV(1,5)=',FNSKNV(1,5),
     1' "Fixed"    meridional resultant, FNSKNF(1,5)=',FNSKNF(1,5) 
        WRITE(IFILE4,'(A,1P,E12.4,/,A,1P,E12.4)')
     1' "Variable" circumfer. resultant, FNSKNV(2,5)=',FNSKNV(2,5),
     1' "Fixed"    circumfer. resultant, FNSKNF(2,5)=',FNSKNF(2,5)
      ENDIF
C END SEP 2005
C BEG NOV 1999
      FN2MOR = 0.
C BEG JUL 2001 (comment out. this is from genopt/bosor4)
C     IF (NWAVLC.LE.N.AND.NWAVLC.GT.1.AND.INDIC.EQ.4) FN2MOR =FN2ADD(1)
C END JUL 2001
C END NOV 1999
C
C     LOOP BEGINS FOR COEFFICIENT MATRIX AND RIGHT-HAND-SIDE  VECTOR,
C     IF ANY.
      HI = HS(1)
      DO 710 I=1,L5
C BEG OCT 2010
C BEG NOV 2010
        IF (ISEG.LE.295) THEN
C END NOV 2010
          N1FIX(I,ISEG) = PSFIX(I,1)
          N2FIX(I,ISEG) = PSFIX(I,2)
          N1VAR(I,ISEG) = PSVAR(I,1)
          N2VAR(I,ISEG) = PSVAR(I,2)
        ENDIF
C END OCT 2010
      H = HS(I)
      HPAST = HI
      HI = 2.*H - HPAST
      IT = I5TOT + I + 1
C     GLOBAL EQUATION NO.S FOR FINITE-DIFFERENCE 'ELEMENT' MODULE ARE
C     I3M,I2M,I1M,I0,I1P,I2P,I3P.  THESE LOCATE THE LOCAL ELEMENT
C     MATRICES FOR ASSEMBLY INTO THE GLOBAL MATRICES
      I3M = IW(IT - 1)
      I0 = IW(IT)
      I3P = IW(IT + 1)
      I2M = I0 - 2
      I1M = I0 - 1
      I1P = I0 + 1
      I2P = I0 + 2
C     CERTAIN LOCAL MATRICES ARE 'EXPLODED' BECAUSE OF MINUS SIDES OF
C     CONSTRAINT CONDITIONS.
      I3PI0 = I3P - I0
      ICNSUB = IC + NSUB - KLAP
      IF(I3PI0.EQ.ICNSUB) I1P = I0 + IC + 1
      IF(I3PI0.EQ.ICNSUB) I2P = I0 + IC + 2
C     INITIALIZE LOCAL ENERGY MATRIX U.
      DO 130 II=1,7
      DO 130 JJ=1,7
130   U(II,JJ) = 0.0
      DS = H
      IF (I.EQ.1.OR.I.EQ.L5) DS = H/2.
C     SHELL GEOMETRY PARAMETERS . .
C        R = PARALLEL CIRCLE RADIUS
C        RD= DERIVATIVE OF PARALLEL CIRCLE RADIUS WITH RESPECT TO S
C       FK1= MERIDIONAL CURVATURE
C       FK2= NORMAL CIRCUMFERENTIAL CURVATURE
C      CURD =DERIVATIVE OF MERIDIONAL CURVATURE W.R.T. S
C BEG APR 2009
C      RFK2 = sine of the angle, phi, of the meridional slope
C     FNBAR = N/R for shell of revolution (N = no. of circ. waves)
C     FNBAR = N*pi/L for prismatic shell.(L = axial length,
C                                         N = no. halfwaves over L)
C END APR 2009
C
      R = BG(I,1)
      RD = BG(I,2)
      FK1 = BG(I,3)
      FK2 = BG(I,4)
      CURD = BG(I,5)
      RDS = R*DS
C BEG APR 2009
      RFK2 = R*FK2
      IF (IPRISM.EQ.1) THEN
C BEG JAN 2010
         FK2 = FK2/1000000.
         R = R*1000000.
C END JAN 2010
         IF (ABS(RD).GT.0.999999) THEN
            RFK2 = 0.0
         ELSE
C BEG JAN 2010
C           RFK2 = (FK2/ABS(FK2))*SQRT(1.-RD**2)
            RFK2 = (FK2/DABS(FK2))*DSQRT(1.-RD**2)
C END JAN 2010
         ENDIF
         RDS = DS 
      ENDIF
C BEG JUN 2009
      IF (R.NE.0.) FNBAR = FN/R
      IF (R.EQ.0.) FNBAR = FN/(H/100000.)
C END JUN 2009
      IF (IPRISM.EQ.1) FNBAR = FN*3.1415927/AXIALL
C     IF (NPRT.GE.3) WRITE(IFILE4,'(A,I3,1P,3E12.4)')
C    1' I,RDS,RFK2,FNBAR=',I,RDS,RFK2,FNBAR
C END APR 2009
C     POLE CONDITIONS
      ISIG = 0
      RI = R
      IF (R.NE.0.) GO TO 140
      R = H/100000.
      ISIG = 1
      RDS = H**2/8.
140   CONTINUE
C     DIFFERENCE EXPRESSIONS FOR W,W' FOR VARIABLE SPACING
C
      CALL GETWWD(H,HI,HPAST,WB,WBD)
C     CONSTITUTIVE EQUATION COEFFICIENTS
C BEG SEP 2005
C  Wall stiffeness for buckling of skin between "smeared" stringers...
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         C(1,1) = CSKIN(1,1,I)*RDS
         C(1,2) = CSKIN(1,2,I)*RDS
         C(1,4) = CSKIN(1,4,I)*RDS
         C(1,5) = CSKIN(1,5,I)*RDS
         C(2,2) = CSKIN(2,2,I)*RDS
         C(2,4) = CSKIN(2,4,I)*RDS
         C(2,5) = CSKIN(2,5,I)*RDS
         C(3,3) = CSKIN(3,3,I)*RDS
         C(3,6) = CSKIN(3,6,I)*RDS
         C(4,4) = CSKIN(4,4,I)*RDS
         C(4,5) = CSKIN(4,5,I)*RDS
         C(5,5) = CSKIN(5,5,I)*RDS
         C(6,6) = CSKIN(6,6,I)*RDS
         C(2,1) = C(1,2)
         C(4,1) = C(1,4)
         C(5,1) = C(1,5)
         C(4,2) = C(2,4)
         C(5,2) = C(2,5)
         C(6,3) = C(3,6)
         C(5,4) = C(4,5)
      ELSE
         CALL GETC(L5,I,COEF,C)
      ENDIF
C END SEP 2005
C BEG OCT 2010
C     IF (ISEG.EQ.9.AND.I.EQ.16) THEN
C       WRITE(IFILE4,'(A,/,2I4,1P,5E12.4)')
C    1' ISEG,I,PSVAR(I,1),PSFIX(I,1),PSVAR(I,2),PSFIX(I,2),PR(I,3)=',
C    1  ISEG,I,PSVAR(I,1),PSFIX(I,1),PSVAR(I,2),PSFIX(I,2),PR(I,3)
C       WRITE(IFILE4,'(A,1P,E12.4)') ' C(4,4)=',C(4,4)/RDS
C       WRITE(IFILE4,'(A,1P,E12.4)') ' PSFIX(I,3)=',PSFIX(I,3)
C     ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C END OCT 2010
C     KINEMATIC RELATIONS FOR UNDEFORMED SHELL
      CALL GETROT(ROT,I,L5,ISIG,WB,WBD)
      CHIFIX = PSFIX(I,3)
      IF (INDIC.GE.3) CHIFIX = 0.0
      IF (IBUCK.NE.1) CHIFIX = 0.0
C BEG AUG 1999
      IF (IBUCK.LT.3) THEN
         CALL GETB1(B1,CHIFIX,ROT,L5,ISIG,WB,WBD,HPAST,HI)
         CALL GETRNT(RNT,ROT,B1,ISIG)
      ENDIF
C END AUG 1999
      IF (IBUCK.NE.1) GO TO 160
      IF (INDIC.EQ.3) GO TO 150
C     'FIXED' PRESSURE-ROTATION EFFECT
      PSEC = 1.0
      PBEFOR = P - STEP
      IF (INDIC.EQ.2.OR.INDIC.EQ.-2) PBEFOR = P
      IF (INDIC.EQ.4) PBEFOR = 0.
      IF (INDIC.EQ.4) PSEC = PSFIX(I,3)
C BEG AUG 1999
      CALL GETPB5(PBEFOR,PR(I,3),PSEC,PR(I,6),UB,VB,WB,B1,ROT,U)
      PRE(1,1) = PSFIX(I,1)*RDS
      PRE(2,2) = PSFIX(I,2)*RDS
      PRE(3,3) = PRE(1,1)
      PRE(4,4) = PRE(2,2)
      PRE(5,5) = PRE(1,1)
      PRE(6,6) = PRE(2,2)
C     WORK DONE BY 'FIXED' PRESTRESSES DURING BUCKLING OR VIBRATION
      CALL MATMU4(PRE,RNT,U,6,7,1)
C     CALL GETP(PBEFOR,PR(I,3),PSEC,PR(I,6),WB,U)
C     PRE(1,1) = PSFIX(I,1)*RDS
C     PRE(2,2) = PSFIX(I,2)*RDS
C     PRE(3,3) = PRE(1,1) + PRE(2,2)
C     WORK DONE BY 'FIXED' PRESTRESSES DURING BUCKLING OR VIBRATION
C     CALL MATMU4(PRE,ROT,U,3,7,1)
C     SHELL WALL STRAIN ENERGY INDEPENDENT OF 'VARIABLE' LOADS
C END AUG 1999
150   CALL MATMU4(C,B1,U,6,7,1)
C
C     ADD ELASTIC FOUNDATION CONTRIBUTION...
C
      CALL FOUNDA(FSTIF(ISEG),WB,RDS,U)
C
C     CONTRIBUTIONS OF DISTRIBUTED THERMAL AND MECHANICAL LOADS TO RHS
C BEG SEP 1997
C     WRITE(IFILE4,'(A,2I4)')' ISEG,IFLSEG(ISEG)=', ISEG,IFLSEG(ISEG)
      IF (INDIC.EQ.3)CALL SRHS(I,L5,B1,THERM,PR,FFF,WB,ISEG,COEF(I,14),
     1  IPOS(7),PALL,1,IOMGAB,Z(I),IFLSEG(ISEG))
      IF (INDIC.EQ.3.AND.ITWO.EQ.2) CALL SRHS(I,L5,B1,THERM(1,5),
     1  PR(1,4),FFF(M3+1),WB,ISEG,COEF(I,14),IPOS(10),PALL,2,IOMGAB,
     1  Z(I),IFLSEG(ISEG))
C END SEP 1997
C BEG FEB 2008
C     IF (N.EQ.0.AND.INDIC.EQ.3.AND.ITWO.EQ.2
C    1          .AND.I.LE.1.AND.ISEG.EQ.1) THEN
C        WRITE(IFILE4,'(/,A,I2,A,/,(1P10E10.2))')
C    1 ' I=',I,'; RHS for Segment 1, load set B, N=0 circ. waves=',
C    1 (FFF(M3+IFFF),IFFF = 1,50)
C     ENDIF
C END FEB 2008
      IF (OMEGDR.GT.0.) CALL MASDRV(OMEGDR,COEF(I,14),RDS,WB,U)
      GO TO 220
160   IF (IBUCK.NE.2) GO TO 200
C     VN1 = MERIDONAL PRESTRESS RESULTANT
C     VN2 = CIRCUMFERENTIAL PRESTRESS RESULTANT
C BEG SEP 2005
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         IF (INDIC.NE.4) THEN
          VN1 = RDS*(FNSKNV(1,I)-     FNSKNF(1,I))
          VN2 = RDS*(FNSKNV(2,I)-     FNSKNF(2,I))
         ELSE
C BEG MAY 2012
C The October 2010 modification is incorrect.
C Go back to the way it was in August 2010...
C BEG OCT 2010
          VN1 = RDS*FNSKNV(1,I)
          VN2 = RDS*FNSKNV(2,I)
C         VN1 = RDS*(FNSKNV(1,I)-     FNSKNF(1,I))
C         VN2 = RDS*(FNSKNV(2,I)-     FNSKNF(2,I))
C END OCT 2010
C END MAY 2012
         ENDIF
      ELSE
C END SEP 2005
         IF (INDIC.NE.4) THEN
          VN1 = RDS*(PSVAR(I,1)-     PSFIX(I,1))
C BEG NOV 1999
          VN2 = RDS*(PSVAR(I,2)-     PSFIX(I,2)) + FN2MOR*RDS
C END NOV 1999
         ELSE
C BEG MAY 2012
C The October 2010 modification is incorrect.
C Go back to the way it was in August 2010...
C BEG OCT 2010
          VN1 = RDS*PSVAR(I,1)
          VN2 = RDS*PSVAR(I,2) + FN2MOR*RDS
C         VN1 = RDS*(PSVAR(I,1)-     PSFIX(I,1))
C         VN2 = RDS*(PSVAR(I,2)-     PSFIX(I,2)) + FN2MOR*RDS
C END OCT 2010
C END MAY 2012
C END NOV 1999
         ENDIF
C BEG SEP 2005
      ENDIF
C END SEP 2005
C     'VARIABLE' PRESSURE-ROTATION EFFECT
C BEG AUG 1999
      IF (INDIC.NE.4)
     1  CALL GETPB5(STEP,PR(I,3),0.,0.,UB,VB,WB,B1,ROT,U)
      IF (INDIC.EQ.4.AND.IPRE.EQ.1)
     1  CALL GETPB5(PSVAR(I,3),PR(I,3),0.,0.,UB,VB,WB,B1,ROT,U)
      PRE(1,1) = VN1
      PRE(2,2) = VN2
      PRE(3,3) = VN1
      PRE(4,4) = VN2
      PRE(5,5) = VN1
      PRE(6,6) = VN2
C END NOV 1999
C     WORK DONE BY 'VARIABLE' PRESTRESS DURING BUCKLING
      CALL MATMU4(PRE,RNT,U,6,7,1)
C     IF (INDIC.NE.4) CALL GETP(STEP,PR(I,3),0.,0.,WB,U)
C     IF (INDIC.EQ.4.AND.IPRE.EQ.1)
C    1  CALL GETP(PSVAR(I,3),PR(I,3),0.,0.,WB,U)
C     PRE(1,1) = VN1
C     PRE(2,2) = VN2
C     PRE(3,3) = VN1 + VN2
C     WORK DONE BY 'VARIABLE' PRESTRESS DURING BUCKLING
C     CALL MATMU4(PRE,ROT,U,3,7,1)
C END AUG 1999
      GO TO 220
200   IF (IBUCK.NE.4) GO TO 210
210   IF (IBUCK.NE.3) GO TO 220
C     LOCAL MASS MATRIX GENERATED
      SMS = COEF(I,14)
      U(2,2) = -0.25*SMS*RDS
      U(3,3) = U(2,2)
      U(1,1) =-WB(1)*WB(1)*RDS*SMS
      U(4,1) =-WB(4)*WB(1)*RDS*SMS
      U(7,1) =-WB(7)*WB(1)*RDS*SMS
      U(7,4) =-WB(7)*WB(4)*RDS*SMS
      U(4,4) =-WB(4)*WB(4)*RDS*SMS
      U(7,7) =-WB(7)*WB(7)*RDS*SMS
      U(5,2) = U(2,2)
      U(5,5) = U(2,2)
      U(6,3) = U(2,2)
      U(6,6) = U(2,2)
220   CONTINUE
C     RING ENERGY AND RIGHT-HAND-SIDE
C
      IF (I.NE.IRING(ISEG,KK)) GO TO 260
      IF (IBUCK.NE.1) GO TO 230
C     E-MATRIX RELATES DISCRETE RING CENTROIDAL VARIABLES TO AXIAL AND
C     RADIAL DISPLACEMENTS OF REFERENCE SURFACE OF SHELL AT RING ATTACH-
C     MENT POINT
      CALL GETE(IK,E)
C     D-MATRIX RELATES AXIAL AND RADIAL DISPLACEMENTS TO NORMAL AND
C     TANGENTIAL DISPLACEMENTS
      CALL GETD(I,D,ROT,UB,VB,WB)
C     G-MATRIX RELATES RING FORCES TO RING CENTROIDAL DISPLACEMENTS
C     FIXED PRELOAD EFFECTS INCLUDED
      HBEFOR = HF(IK) - STEP2(IK) + HFIX(IK)
      IF (INDIC.EQ.2.OR.INDIC.EQ.-2) HBEFOR = HF(IK) + HFIX(IK)
      IF (INDIC.EQ.4) HBEFOR = HFIX(IK)*RFIX(IK)
      IF (INDIC.EQ.3) HBEFOR = 0.
      CALL GETG(IK,FN,HBEFOR,RHFIX,G)
      CALL MATMU2(G,E,G1,4,4,0)
      CALL MATMU4(G1,D,U,4,7,1)
C BEG MAR 2008
C     WRITE(IFILE4,'(/,A,4I5)')
C    1' IK,NTYPAL(IK),NGROUN(IK),NSPRNG(IK)=',
C    1  IK,NTYPAL(IK),NGROUN(IK),NSPRNG(IK)
      IF (NTYPAL(IK).EQ.-1) THEN
         IF (NGROUN(IK).EQ.1) THEN
C  Compute contribution of springs to strain energy in SUB.SPRING
            NTHETS = NSPRNG(IK)
            DO 225 IANGLE = 1,NTHETS
               CALL SPRING(IFILE4,IK,IANGLE,D,U)
  225       CONTINUE
         ENDIF
         IF (NGROUN(IK).NE.1) THEN
            WRITE(IFILE4,'(/,A,/,A,/,A)')
     1 ' ************ RUN ABORT *************************',
     1 ' As of now all springs must be attached to ground.',
     1 ' ************************************************'
            CALL ERREX
         ENDIF
      ENDIF
C END MAR 2008
C     CONTRIBUTION TO RIGHT-HAND-SIDE VECTOR OF LINE LOADS IN RRHS
      IF (INDIC.EQ.3) CALL RRHS(I,E,D,FFF,IK,ISEG,IPOS,PALL,1,
     1                       V,SHEAR,HF,FM,TNR,TMR,TMRX,IOMGAB,Z(I))
      IF (INDIC.EQ.3.AND.ITWO.EQ.2) CALL RRHS(I,E,D,FFF(M3+1),IK,ISEG,
     1 IPOS(4),PALL,2,VFIX,SHFIX,HFIX,FMFIX,TNRFIX,TMRFIX,TMXFIX,
     1 IOMGAB,Z(I))
      IF (OMEGDR.GT.0.) CALL RMASDV(OMEGDR,RM(IK),RC(IK),AREA(IK),
     1 FIS(IK),FIN(IK),FISN(IK),E,D,ROT,TR1,TR2,TR3,U)
      GO TO 250
230   IF (IBUCK.NE.2) GO TO 240
C     WORK DONE BY 'VARIABLE' LOADS DURING BUCKLING DISPLACEMENTS OF
C     DISCRETE RING.
      CALL GETE(IK,E)
      CALL GETD(I,D,ROT,UB,VB,WB)
C
      DH = STEP2(IK)
      IF (INDIC.EQ.4.AND.IPRE.EQ.1) DH = HF(IK)*RVAR(IK)
      IF (INDIC.EQ.4.AND.IPRE.EQ.0) DH = 0.
C
      IF (INDIC.NE.4) THEN
      RHFIK = RHF(IK) - RHFIX(IK)
      ELSE
C BEG OCT 2010
C     RHFIK = RHF(IK)
      RHFIK = RHF(IK) - RHFIX(IK)
C END OCT 2010
      ENDIF
C
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
         G(1,1) = FN*FN*RHFIK  /RC(IK)
         G(2,2) = RHFIK  /RC(IK) - DH
         G(2,3) = -FN*RHFIK  /RC(IK)
         G(3,2) = G(2,3)
         G(3,3) = G(1,1) + DH
      ELSE
C BEG JAN 2010
C        G(1,1) = FN*FNBAR*RHFIK
C        G(2,2) = RHFIK  /RC(IK) - DH
C        G(2,3) = -FNBAR*RHFIK
C        G(3,2) = G(2,3)
C        G(3,3) = G(1,1) + DH
         G(1,1) = FNBAR**2*RHFIK
         G(2,2) = RHFIK/R**2 - DH/R
         G(2,3) = -FNBAR*RHFIK/R
         G(3,2) = G(2,3)
         G(3,3) = G(1,1) + DH/R
C END JAN 2010
      ENDIF
C END APR 2009
      CALL MATMU2(G,E,G1,4,4,0)
      CALL MATMU4(G1,D,U,4,7,1)
      GO TO 250
240   IF (IBUCK.NE.3) GO TO 250
C     CONTRIBUTION TO THE MASS MATRIX OF DISCRETE RING
      CALL GETE(IK,E)
      CALL GETD(I,D,ROT,UB,VB,WB)
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        RHORC = - RM(IK)*RC(IK)
      ELSE
        RHORC = - RM(IK)
      ENDIF
C END APR 2009
      RHORCA = RHORC*AREA(IK)
      TR1(1,1) = RHORCA
      TR1(2,2) = RHORCA
      TR1(3,3) = RHORCA
      TR1(4,4) = RHORC*(FIS(IK) + FIN(IK))
      TR2(2,2) = RHORC*FIS(IK)
      TR2(2,3) = - RHORC*FISN(IK)
      TR2(3,2) = TR2(2,3)
      TR2(3,3) = RHORC*FIN(IK)
      CALL MATMU2(TR1,E,TR3,4,4,0)
      CALL MATMU4(TR3,D,U,4,7,1)
      CALL MATMU4(TR2,ROT,U,3,7,1)
250   IK = IK + 1
      KK = KK + 1
260   CONTINUE
C
C     CONSTRAINT CONDITIONS
C
C     IFX(ICOND1,1) CONTAINS LOCATIONS OF 'MINUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
      IF (ICOND1.GT.NCOND) GO TO 410
      IF (I.EQ.(IFX(ICOND1,1)-ISEG*1000)) GO TO 270
      GO TO 410
C     FILL THE 'MINUS'PART OF THE CONSTRAINT CONDITION
C
C     IR,IR1,IR2,IR3 CONTAIN GLOBAL MATRIX ROW NOS. CORRESPONDING TO THE
C     LAGRANGE MULTIPLIERS ASSOCIATED WITH CONSTRAINT CONDITIONS
C     IDENTIFIED BY IFX(ICOND1,1)
270   IR = IROWCN(ICOND1)
      IR1 = IR + 1
      IR2 = IR + 2
      IR3 = IR + 3
      IF (IBUCK.EQ.1) GO TO 280
      ICOND1 = ICOND1 + 1
      GO TO 260
280   KKK = ICOND1
C
C     FIFX1, 2, 3, AND 4 CONTAIN INTEGERS WHICH MAY OR MAY NOT RELEASE
C     THE CONSTRAINT CONDITIONS.
      IF (IABS(N).GT.1) GO TO 300
      IF (IABS(N).GT.0) GO TO 290
      IF ((ISTOP0(1)/1000).NE.ISEG) GO TO 300
      IF ((ISTOP0(1)-1000*ISEG).NE.I) GO TO 300
      IF(IFX(ICOND1,3).EQ.1.AND.IFX(ICOND1,4).EQ.1) GO TO 300
C     RIGID BODY AXISYMMETRIC DISPLACEMENTS PREVENTED
      FIFX1 = ISTOP0(3)*CMAX
      FIFX2 = ISTOP0(4)*CMAX
      FIFX3 = ISTOP0(5)*CMAX
      FIFX4 = ISTOP0(6)*CMAX
      GO TO 310
290   IF ((ISTOP1(1)/1000).NE.ISEG) GO TO 300
      IF ((ISTOP1(1)-1000*ISEG).NE.I) GO TO 300
      IF(IFX(ICOND1,3).EQ.1.AND.IFX(ICOND1,4).EQ.1) GO TO 300
C     RIGID BODY DISPLACEMENTS CORRESPONDING TO N=1 CIRCUMFERENTIAL
C     WAVE ARE PREVENTED
      FIFX1 = ISTOP1(3)*CMAX
      FIFX2 = ISTOP1(4)*CMAX
      FIFX3 = ISTOP1(5)*CMAX
      FIFX4 = ISTOP1(6)*CMAX
      GO TO 310
300   CONTINUE
      FIFX1 = IFX(ICOND1,3)*CMAX
      FIFX2 = IFX(ICOND1,4)*CMAX
      FIFX3 = IFX(ICOND1,5)*CMAX
      FIFX4 = IFX(ICOND1,6)*CMAX
C BEG JUN 2009
C     IF (IBUCK.EQ.1.AND.NPRT.GE.3)
C    1   WRITE(IFILE4,'(A,I6,/,1P5E12.4)')
C    1 ' After 300: ICOND1,CMAX,FIFX1,FIFX2,FIFX3,FIFX4=',
C    1              ICOND1,CMAX,FIFX1,FIFX2,FIFX3,FIFX4
C END JUN 2009
C
      IF (INDIC.NE.3) GO TO 305
C
C     ADD STATEMENTS FOR ENFORCED NONSYMMETRIC LINE LOADS...
C
      IF (IFX(ICOND1,3).EQ.2) FIFX1 = CMAX
      IF (IFX(ICOND1,4).EQ.2) FIFX2 = CMAX
      IF (IFX(ICOND1,5).EQ.2) FIFX3 = CMAX
      IF (IFX(ICOND1,6).EQ.2) FIFX4 = CMAX
      USPEC = 0.
      VSPEC = 0.
      WSPEC = 0.
      CHISPC= 0.
      IF (IPOS(1).EQ.0.AND.IPOS(2).EQ.0) GO TO 303
      INDX1 = IPOS(1) + NKOUNT - 1
      INDX2 = IPOS(2) + NKOUNT - 1
      IF (IFX(ICOND1,3).EQ.2) USPEC = V(KK-1)*PALL(INDX1)
      IF (IFX(ICOND1,4).EQ.2) VSPEC = SHEAR(KK-1)*PALL(INDX2)
      IF (IFX(ICOND1,5).EQ.2) WSPEC = HF(KK-1)*PALL(INDX1)
      IF (IFX(ICOND1,6).EQ.2) CHISPC= FM(KK-1)*PALL(INDX1)
  303 CONTINUE
      USPECB = 0.
      VSPECB = 0.
      WSPECB = 0.
      CHISPB = 0.
      IF (ITWO.NE.2) GO TO 305
      IF (IPOS(4).EQ.0.AND.IPOS(5).EQ.0) GO TO 305
      INDX1 = IPOS(4) + NKOUNT - 1
      INDX2 = IPOS(5) + NKOUNT - 1
      IF (IFX(ICOND1,3).EQ.2) USPECB = VFIX(KK-1)*PALL(INDX1)
      IF (IFX(ICOND1,4).EQ.2) VSPECB = SHFIX(KK-1)*PALL(INDX2)
      IF (IFX(ICOND1,5).EQ.2) WSPECB = HFIX(KK-1)*PALL(INDX1)
      IF (IFX(ICOND1,6).EQ.2) CHISPB= FMFIX(KK-1)*PALL(INDX1)
305   CONTINUE
C
310   IF (RI.NE.0.) GO TO 320
C     POLE CONDITIONS
C
      FIFX1 = CMAX
      FIFX2 = CMAX
      FIFX3 = CMAX
      FIFX4 = CMAX
C BEG JUN 2009
C     IF (IBUCK.EQ.1.AND.NPRT.GE.3)
C    1   WRITE(IFILE4,'(A,I6,/,1P5E12.4)')
C    1 ' After 310: ICOND1,CMAX,FIFX1,FIFX2,FIFX3,FIFX4=',
C    1              ICOND1,CMAX,FIFX1,FIFX2,FIFX3,FIFX4
C END JUN 2009
      IF (N.EQ.0) FIFX1 = 0.
      IF (IABS(N).NE.1) GO TO 320
      FIFX2 = 0.
      FIFX3 = 0.
      FIFX4 = 0.
320   CONTINUE
      IF (INDIC.EQ.3) GO TO 330
C     KROOTS = NO. OF NEGATIVE EIGENVALUES DUE TO LAGRANGE MULTIPLIERS
C              WE KEEP TRACK OF THIS TO AVOID MISSING ROOTS IN
C              EBAND,EBAND2, AND EIGEN, THE THREE EQUATION-SOLVING
C              ROUTINES.
      IF (FIFX1.NE.0.) KROOTS = KROOTS+1
      IF (FIFX2.NE.0.) KROOTS = KROOTS+1
      IF (FIFX3.NE.0.) KROOTS = KROOTS+1
      IF (FIFX4.NE.0.) KROOTS = KROOTS+1
C BEG JUN 2009
C     IF (IBUCK.EQ.1.AND.NPRT.GE.3)
C    1 WRITE(IFILE4,'(A,2I6,/,1P,5E12.4)')
C    1 'After 320: KROOTS,ICOND1,CMAX,FIFX1,FIFX2,FIFX3,FIFX4=',
C    1             KROOTS,ICOND1,CMAX,FIFX1,FIFX2,FIFX3,FIFX4
C END JUN 2009
330   CONTINUE
C
C     D1(KKK) = KKKTH RADIAL DISCONTINUITY
C     D2(KKK) = KKKTH AXIAL  DISCONTINUITY
      IF (INDIC.NE.3) GO TO 335
C
C     R.H.S. VECTOR CONTRIBUTIONS FROM IMPOSED NONSYMMETRIC DISPLACE...
C
      FFF(IR) = FFF(IR) - USPEC*FIFX1
      FFF(IR1)= FFF(IR1)- VSPEC*FIFX2
      FFF(IR2)= FFF(IR2)- WSPEC*FIFX3
      FFF(IR3)= FFF(IR3)- CHISPC*FIFX4
      IF (ITWO.NE.2) GO TO 335
      FFF(M3+IR) = FFF(M3+IR) - USPECB*FIFX1
      FFF(M3+IR1)= FFF(M3+IR1)- VSPECB*FIFX2
      FFF(M3+IR2)= FFF(M3+IR2)- WSPECB*FIFX3
      FFF(M3+IR3)= FFF(M3+IR3)- CHISPB*FIFX4
335   CONTINUE
C
C     BEGINNING OF LOOP FOR CONTRIBUTION TO ENERGY OF 'MINUS' PART
C     OF CONSTRAINT AND BOUNDARY CONTITIONS.
C
      DO 340 II=1,NSUB
C BEG APR 2009
      USTAR = RFK2*UB(II) - RD*WB(II)
      VSTAR = VB(II)
      WSTAR = RD*UB(II) + RFK2*WB(II)
C END APR 2009
C BEG JUN 2009
C     IF (IBUCK.EQ.1.AND.NPRT.GE.3)
C    1 WRITE(IFILE4,'(A,2I6,/,1P,5E12.4)')
C    1 'After DO 340: NSUB,II,RFK2,RD,UB(II),WB(II),VB(II)=',
C    1                NSUB,II,RFK2,RD,UB(II),WB(II),VB(II)
C END JUN 2009
      IF (IFX(ICOND1,3).EQ.3) USTAR = UB(II)
      IF (IFX(ICOND1,5).EQ.3) WSTAR = WB(II)
C     QD( ) = LOCAL MATRIX CONTAINING 'MINUS' PART OF CONSTRAINTS
C
      QD(1,II) = FIFX1*(-USTAR + D1(KKK)*ROT(1,II))
      QD(2,II) = FIFX2*(-VSTAR +
C BEG APR 2009 
     1 D1(KKK)*(FNBAR*WSTAR-VSTAR/R) +D2(KKK)*FNBAR*USTAR)
C END APR 2009
      QD(3,II) = FIFX3*(-WSTAR - D2(KKK)*ROT(1,II))
      QD(4,II) = -FIFX4*ROT(1,II)
C BEG JUN 2009
C     IF (IBUCK.EQ.1.AND.NPRT.GE.3)
C    1 WRITE(IFILE4,'(A,2I6,/,1P,6E12.4)')
C    1 'After DO 340: ICOND1,II,FNBAR,R,QD(i,II),i = 1,4=',
C    1            ICOND1,II,FNBAR,R,QD(1,II),QD(2,II),QD(3,II),QD(4,II)
C23456789012345678901234567890123456789012345678901234567890123456789012
C END JUN 2009
340   CONTINUE
      IF (RI.NE.0.) GO TO 360
      IF (IABS(N).NE.1) GO TO 360
C     POLE CONDITION
      DO 350 II=1,NSUB
      QD(3,II) = QD(3,II) + QD(2,II)
350   QD(2,II) = 0.
360   CONTINUE
C
C     END OF LOOP FOR 'MINUS' PART OF CONSTRAINT CONDITIONS.
C
      ICOND1 = ICOND1 + 1
C     FILL AS ARRAY WITH MINUS PART OF CONSTRAINT CONDITIONS.
C
      IF ((ILOC(IR)-ILOC(IR-1)).GT.(NSUB+1)) GO TO 380
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 1,2,AND5
      DO 370 II=1,NSUB
      IB = ILOC(IR) - NSUB - 1 + II
      AS(IB) = QD(1,II)
      IB = ILOC(IR1) - NSUB - 2 + II
      AS(IB)= QD(2,II)
      IB = ILOC(IR2) - NSUB - 3 + II
      AS(IB)= QD(3,II)
      IB = ILOC(IR3) - NSUB - 4 + II
370   AS(IB)= QD(4,II)
      GO TO 260
380   IF (NGBK(III).LT.IR) GO TO 390
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE
C     3 AND 4 AS LONG AS CURRENT QD(I,J) IS STORED IN CURRENT BLOCK.
C
      CALL FILLB(IC,NSUB,I3M,I2M,I1M,I0,I1P,I2P,I3P,IR,ILOC,QD,AS)
      GO TO 260
C     THIS BRANCH CORRESPONDS TO CONSTRAINT CONDITIONS OF TYPE 3 AND 4
C     EXCEPT THAT QD(I,J) HAS TO BE SAVED BECAUSE IT CONTRIBUTES
C     ELEMENTS TO A FUTURE BLOCK.
C
390   IV = IV + 1
      IRSAVE(IV) = IR
      ISAVE(IV,1) = I3M
      ISAVE(IV,2) = I2M
      ISAVE(IV,3) = I1M
      ISAVE(IV,4) = I0
      ISAVE(IV,5) = I1P
      ISAVE(IV,6) = I2P
      ISAVE(IV,7) = I3P
      DO 400 II=1,IC
      DO 400 J=1,NSUB
400   QSAVE(IV,II,J) = QD(II,J)
      GO TO 260
C
C     FILL THE 'PLUS' PART OF THE CONSTRAINT CONDITION
C     IFIX(ICOND2,2) CONTAINS LOCATIONS OF 'PLUS' SIDE OF JUNCTURE
C     IN MONOTONICALLY INCREASING ORDER.
410   IF (ICOND2.GT.NCOND) GO TO 520
      IF (I.EQ.(IFIX(ICOND2,2)-ISEG*1000)) GO TO 420
      GO TO 520
C     NO 'PLUS' SIDE IF CONDITION REPRESENTS BOUNDARY.
420   IF (IFIX(ICOND2,2).EQ.IFIX(ICOND2,1)) GO TO 500
      KKK = ICOND2
C     IR,IR1,IR2,IR3 HAVE SAVE MEANING AS ABOVE
      IR = IROWC(ICOND2)
      IR1 = IR + 1
      IR2 = IR + 2
      IR3 = IR + 3
      IF (IBUCK.NE.1) GO TO 500
      FIFX1 = IFIX(ICOND2,3)*CMAX
      FIFX2 = IFIX(ICOND2,4)*CMAX
      FIFX3 = IFIX(ICOND2,5)*CMAX
      FIFX4 = IFIX(ICOND2,6)*CMAX
C
C     LOOP FOR CONTRIBUTION OF 'PLUS' SIDE TO LOCAL MATRIX
C
      DO 430 II=1,NSUB
C BEG APR 2009
      USTAR = RFK2*UB(II) - RD*WB(II)
      VSTAR = VB(II)
      WSTAR = RD*UB(II) + RFK2*WB(II)
C END APR 2009
      IF (IFIX(ICOND2,3).EQ.3) USTAR = UB(II)
      IF (IFIX(ICOND2,5).EQ.3) WSTAR = WB(II)
C     D( ) = LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINT CONDS.
      D(1,II) = USTAR*FIFX1
      D(2,II) = VSTAR*FIFX2
      D(3,II) = WSTAR*FIFX3
      D(4,II) = FIFX4*ROT(1,II)
430   CONTINUE
C
C
C     FILL AS( ) WITH LOCAL MATRIX CONTAINING 'PLUS' SIDE OF CONSTRAINTS
C     ITYPE( ) = TYPE OF CONSTRAINT CONDITION. 5 MEANS SEGS. IN SERIES.
C
      IF (ITYPE(ICOND2).EQ.5) GO TO 480
C     THIS BRANCH FOR PLUS SIDES OF ALL TYPES OF CONSTRAINT CONDITIONS
C     EXCEPT ITYPE(ICOND2) = 5.
C
      DO 440 II=1,NSUB
      IB = ILOC(IR ) - NSUB - 1 + II
      AS(IB) = D(1,II)
      IB = ILOC(IR1) - NSUB - 2 + II
      AS(IB) = D(2,II)
      IB = ILOC(IR2) - NSUB - 3 + II
      AS(IB) = D(3,II)
      IB = ILOC(IR3) - NSUB - 4 + II
440   AS(IB) = D(4,II)
      IF (IV.EQ.0) GO TO 500
      DO 450 IIV=1,IV
      IF (IR.EQ.IRSAVE(IIV)) GO TO 460
450   CONTINUE
      GO TO 500
C     THIS BRANCH FOR INSERTION INTO GLOBAL STIFFNESS MATRIX OF
C     'MINUS' SIDE OF CONSTRAINT CONDITIONS REQUIRING VARIABLES FROM
C     PREVIOUS BLOCKS.
C
460   DO 470 II=1,IC
      DO 470 J=1,NSUB
470   QD(II,J) = QSAVE(IIV,II,J)
      I3MS = ISAVE(IIV,1)
      I2MS = ISAVE(IIV,2)
      I1MS = ISAVE(IIV,3)
      I0S  = ISAVE(IIV,4)
      I1PS = ISAVE(IIV,5)
      I2PS = ISAVE(IIV,6)
      I3PS = ISAVE(IIV,7)
C BEG DEC 1990
      CALL FILLB(IC,NSUB,I3MS,I2MS,I1MS,I0S,I1PS,I2PS,I3PS,IR,ILOC,QD,
     1           AS)
C END DEC 1990
      GO TO 500
480   CONTINUE
C
C     THIS BRANCH FOR PLUS SIDE OF CONSTRAINT CONDITION TYPE 5
C
      DO 490 II=1,NSUB
      I1 = IR3 + II
      DO 490 J=1,IC
      IB = ILOC(I1) - IC + J - II
490   AS(IB) = D(J,II)
500   ICOND2 = ICOND2 + 1
      DO 510 II=1,NSUB
      DO 510 J=1,IC
510   D(J,II) = 0.0
      GO TO 410
520   CONTINUE
C
C     FILL AS( ) WITH LOCAL MATRIX CORRESPONDING TO MESH POINT I
C
      DO 700 II=1,NSUB
      GO TO (530,540,550,560,570,580,590),II
530   J = I3M
      GO TO 600
540   J = I2M
      GO TO 600
550   J = I1M
      GO TO 600
560   J = I0
      GO TO 600
570   J = I1P
      GO TO 600
580   J = I2P
      GO TO 600
590   J = I3P
600   CONTINUE
      DO 690 K=1,II
      GO TO (610,620,630,640,650,660,670),K
610   INDX = I3M
      GO TO 680
620   INDX = I2M
      GO TO 680
630   INDX = I1M
      GO TO 680
640   INDX = I0
      GO TO 680
650   INDX = I1P
      GO TO 680
660   INDX = I2P
      GO TO 680
670   INDX = I3P
680   CONTINUE
      IB = ILOC(J) - J + INDX
      AS(IB) = AS(IB) + U(II,K)
690   CONTINUE
700   CONTINUE
710   CONTINUE
C
C     END OF LOOP OVER MESH POINTS IN CURRENT SEGMENT
C
      I5TOT = I5TOT + L5  + 2
      IF (I3P.EQ.NGBK(III)) GO TO 720
      IR3 = I3P + IC
      IF (IR3.EQ.NGBK(III)) GO TO 720
      GO TO 800
720   NN = 2*ILOC(I3P)
      IF (IR3.EQ.NGBK(III)) NN = 2*ILOC(IR3)
C     STORE BLOCK NUMBER III ON DISK OR DRUM.
      IF(IBLK.NE.1.OR.INDIC.NE.3) CALL GASP(AS,NN,1,IDRW(III,IBUCK))
      IF (NPRT.LT.3) GO TO 770
      ZERO = 0.0
      WRITE(IFILE4,730)III,IBUCK
      IF (III.EQ.1) NROWS  = 0
730   FORMAT(/,' PREFACTORED BLOCK NO.',I3,' FOLLOWS. IBUCK=',I3,/)
      NROWS1 = NROWS + 1
      NROWS = NGBK(III)
      DO 760 I=NROWS1,NROWS
      IF (I.NE.NROWS1) J1 = ILOC(I-1) + 1
      IF (I.EQ.NROWS1) J1 = 1
      J2 = ILOC(I)
      J3 = 10- J2 + J1
      IF (J3.GT.0) WRITE(IFILE4,740)I,(ZERO,J=1,J3),(AS(J),J=J1,J2)
      IF (J3.LE.0) WRITE(IFILE4,750)I,(AS(J),J=J1,J2)
740   FORMAT(1X,I3,11E11.3)
750   FORMAT(1X,I3,(11E11.3))
760   CONTINUE
770   IF (IBLK.EQ.1.AND.INDIC.EQ.3) GO TO 790
C BEG DEC 1990
      DO 780 I=1,IMAX
C END DEC 1990
780   AS(I) = 0.0
790   III = III + 1
800   CONTINUE
      RETURN
      END
C
C
C
C BEG MAR 2008
C=DECK      SPRING
      SUBROUTINE SPRING(IFILE4,K,IANGLE,TBAR,U)
C
C  March 16, 2008
C  Purpose is to add strain energy of the IANGLEth spring
C  attached to ring no. K.
C
C  NOTE: This subroutine only works if the springs are
C        attached to ground.
C
C  For a complete description of the theory on which
C  BIGBOSOR4 is based, please see pp.485-508 of the paper:
C
C    Bushnell, D.,
C    "Computerized analysis of shells - governing
C    equations", Computers & Structures, Vol.18, No. 3,
C    pp.471-536 (1984)
C
C  Then you will understand better what goes on here.
C
C  Meanings of variables:
C
C IFILE4 = file for listed output (<casename>.OUT)
C K      = global ring number
C IANGLE = number of spring attached to the "fake" ring
C
C TBAR   = transformation from ustar,v,wstar,beta to nodal
C          unknowns, q . Same as "D" in the calling routine.
C          See Eqs.(155,156) on p.499 of the paper cited below.
C
C U      = strain energy matrix divided by pi. The strain energy
C          of the assemblage of springs connected at this
C          particular meridional nodal point contributes to
C          this 7 x 7 local "finite element" stiffness matrix.
C          See Fig. 24 on p.498 of the paper, Bushnell, D.,
C          "Computerized analysis of shells - governing
C          equations", Computers & Structures, Vol.18, No. 3,
C          pp.471-536 (1984), for a schematic of an assemblage
C          of these local 7x7 "finite element" stiffness
C          matrices into the total stiffness matrix of a very
C          simple structure shown in Fig.20(b) on p. 493 of
C          the paper just cited.
C
C The following are input quantities relating to springs
C attached to this ring:
C
C NTYPAL = index for type of ring (NTYPAL = -1 means
C          a "fake" ring with springs attached to it.)
C NGROUN = 1 if springs are attached to ground,
C          0 if springs are attached to a previous
C          ring. (NOTE: The coding has not been
C          written for the NGROUN = 0 option.)
C NSPRNG = number of springs attached to this ring
C SPRAXL = global axial coordinate of this ring
C SPRANG = circumferential angles of the NSPRNG
C          spring attachment points on this ring
C SPRKON = spring constant for each of the NSPRNG
C          springs attached to this ring
C SPREC1 = radial eccentricity e1 of the attachment
C          points of all the springs to this ring
C SPREC2 = axial  eccentricity e2 of the attachment
C          points of all the springs to this ring
C SPRAXG = global axial coordinate of the attachment
C          of all the springs associated with this
C          ring to ground
C SPRRAD = radius of spring ground attachment points
C SPRAGG = circumferential angles of NSPRNG spring
C          attachment points at ground for springs
C          associated with this ring.
C
C ******************* IMPORTANT NOTE **************************
C This model essentially smears out the springs. Only the n = 0
C (axisymmetric up-and-down displacement and/or uniform rolling 
C about the axis of revolution) and n = 1 (uniform lateral
C displacement and/or pitching displacement) are predicted accurately.
C In order to obtain the static response for higher circumferential
C wavenumbers, n, than n = 0 and/or n = 1, you must include as
C BIGBOSOR4 input the concentrated forces that the springs apply
C to the "fake" ring and therefore to the shell where they are
C attached. 
C ***************************************************************
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      DOUBLE PRECISION  R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION  TBAR,EBAR,XBAR,FKBAR,U,A,B,C,FKEFF
      DOUBLE PRECISION  THETRI,THETGI,CTHETR,STHETR,CTHETG,STHETG
      DOUBLE PRECISION  XRING,YRING,ZRING,XGROUN,YGROUN,ZGROUN
      DOUBLE PRECISION  FKX,FKXE
      DIMENSION TBAR(4,7),EBAR(3,4),XBAR(3,3),FKBAR(3,3),U(7,7)
      DIMENSION FKX(3,3),FKXE(4,4)
C
C     WRITE(IFILE4,'(A,2I5)')
C    1' Entering SUBROUTINE SPRING. K, IANGLE=',K, IANGLE
C
C  EBAR is the transformation matrix from axial, circumferential,
C       and radial displacements, 
C       ustar(attach pt.), v(attach pt.), wstar(attach pt.)
C       at the attachment point of the IANGLEth spring to the "fake"
C       ring to the axial displacement, circumferential displacement,
C       radial displacement, and meridional rotation at the shell
C       reference surface:
C       ustar(shell ref. surf), v(shell ref. surf.),
C       wstar(shell ref. surf), and beta(merid. rot.):
C       See Eqs.(152,153) on p.499 of the paper cited above
C       in connection with the 7 x 7 local stiffness matrix, U.
C
C                              3 x 4
C      |ustar(attach pt.)|   |        | |ustar(shell ref. surf.)  |
C      |    v(attach pt.)| = |  EBAR  |*|    v(shell ref. surf.)  |
C      |wstar(attach pt.)|   |        | |wstar(shell ref. surf.)  |
C                                       |beta(meridional rotation)|
C
C   FN is the number of circumferential waves
C    R is the radius of the parallel circle (at the ref. surface).
C BEG APR 2009
C   FNBAR = FN*pi/L, where L = axial length of prismatic shell
C END APR 2009
C
      EBAR(1,1) = 1.
      EBAR(1,2) = 0.
      EBAR(1,3) = 0.
      EBAR(1,4) = -SPREC1(K)
C BEG APR 2009
      EBAR(2,1) = -SPREC2(K)*FNBAR
      EBAR(2,2) = 1. + SPREC1(K)/R
      EBAR(2,3) = -SPREC1(K)*FNBAR
C END APR 2009
      EBAR(2,4) = 0.
      EBAR(3,1) = 0.
      EBAR(3,2) = 0.
      EBAR(3,3) = 1.
      EBAR(3,4) = SPREC2(K)
C
C     WRITE(IFILE4,'(/,A)')' EBAR(i,j)='
C     DO 10 I = 1,3
C       WRITE(IFILE4,'(1P4E12.4)') (EBAR(I,J),J=1,4)
C  10 CONTINUE
C
C  Next, find the length of each spring.
      PI = 3.1415927
      THETRI = SPRANG(IANGLE,K)*PI/180.
      CTHETR = DCOS(THETRI)
      STHETR = DSIN(THETRI)
      XRING  = (R + SPREC1(K))*CTHETR
      YRING  = SPRAXL(K)
      ZRING  = (R + SPREC1(K))*STHETR
      THETGI = SPRAGG(IANGLE,K)*PI/180.
      CTHETG = DCOS(THETGI)
      STHETG = DSIN(THETGI)
      XGROUN = SPRRAD(K)*CTHETG
      YGROUN = SPRAXG(K)
      ZGROUN = SPRRAD(K)*STHETG
      A = XRING - XGROUN
      B = YRING - YGROUN
      C = ZRING - ZGROUN
C
C     FLONG2 is the square of the undeformed length L of the IANGLEth
C     spring with spring constant SPRKON(IANGLE,K), where K = global
C     ring number. Each spring attached to a given ring may have a
C     different spring constant, SPRKON(IANGLE,K). Originally all the
C     spring constants at a given ring are the same. However, when we
C     take into account the softening effect of local shell deformation
C     on the "effective" stiffness of a spring, each spring may develop
C     a different "effective" spring constant. Usually the following
C     will happen: The "effective" stiffnesses of the springs at
C     circumferential coordinates 0 and 180 degrees will have one
C     "effective" spring constant and those at 90 and 270 degrees will
C     have a different "effective" spring constant.
C
      FLONG2 = A*A + B*B + C*C 
C
C     FKEFF is the "effective" stiffness divided by PI to be
C           consistent with the shell strain energy. It is also
C           divided by the square of the undeformed spring length,
C           L x L, because this quantity is common to all the
C           elements of the stiffness matrix. The 0.5 factor
C           comes from the strain energy being of the form,
C
C           U(spring) = 0.5*SPRKON(IANGLE,K)*(delta L)**2 .
C
C           in which "delta L" is the change in length of the
C           IANGLEth spring due to reference surface displacements
C           components, u,v,w, of the shell wall with which the
C           spring attachment points on the "fake" ring are
C           linked.
C
      FKEFF = 0.5*SPRKON(IANGLE,K)/(PI*FLONG2)
C
C     FKBAR is the spring stiffness matrix for the IANGLEth spring
C           attached to global ring number K. This stiffness matrix
C           is valid only if one end of each spring is connected to
C           ground. All springs from a given "fake" ring must be
C           connected at their other ends to ground at the same
C           global axial coordinate, SPRAXG(K), and at the same
C           radial coordinate, SPRRAD(K).
C
C     The quantity, (delta L) in the expression for the strain
C     energy, U(spring), above is given by:
C
C     (delta L) =    (A*dx + B*dy + C*dz)/L
C
C     in which A, B, and C are the x-direction, y-direction, and
C     z-direction distances from the ring end of the spring to the
C     ground end of the spring, and x, y, and z are global cartesian
C     coordinates, with y containing the axis of revolution of the
C     shell. The undeformed spring length, L, is the square root
C     of (A*A + B*B + C*C).
C
C     The strain energy of the spring, U(spring), can be expressed
C     in the form,
C
C     U(spring) =
C     [0.5*SPRKON(IANGLE,K)/(L*L)]*[dx, dy, dz]*| A*A  A*B  A*C | |dx|
C                                               | A*B  B*B  B*C |*|dy|
C                                               | A*C  B*C  C*C | |dz|
C
C     Accordingly, the 3 x 3 stiffness matrix, FKBAR, is given
C     as follows:
C
      FKBAR(1,1) = FKEFF*A*A
      FKBAR(1,2) = FKEFF*A*B
      FKBAR(1,3) = FKEFF*A*C
      FKBAR(2,1) = FKBAR(1,2)
      FKBAR(2,2) = FKEFF*B*B
      FKBAR(2,3) = FKEFF*B*C
      FKBAR(3,1) = FKBAR(1,3)
      FKBAR(3,2) = FKBAR(2,3)
      FKBAR(3,3) = FKEFF*C*C
C
C     WRITE(IFILE4,'(/,A)')' FKBAR(i,j)='
C     DO 20 I = 1,3
C       WRITE(IFILE4,'(1P3E12.4)') (FKBAR(I,J),J=1,3)
C  20 CONTINUE
C
C     XBAR is the transformation matrix from dx, dy, dz
C          to ustar(attach pt.), v(attach pt.), wstar(attach pt.),
C          as follows:
C
C  |dx|   | 0.0   -sin(THETRI)  cos(THETRI)|   |ustar(attach pt.)|
C  |dy| = | 1.0        0.0          0.0    | * |    v(attach pt.)|
C  |dz|   | 0.0    cos(THETRI)  sin(THETRI)|   |wstar(attach pt.)|
C
      XBAR(1,1) = 0.
      XBAR(1,2) = -STHETR
      XBAR(1,3) =  CTHETR
      XBAR(2,1) = 1.
      XBAR(2,2) = 0.
      XBAR(2,3) = 0.
      XBAR(3,1) = 0.
      XBAR(3,2) =  CTHETR
      XBAR(3,3) =  STHETR
C
C     WRITE(IFILE4,'(/,A)')' XBAR(i,j)='
C     DO 30 I = 1,3
C       WRITE(IFILE4,'(1P3E12.4)') (XBAR(I,J),J=1,3)
C  30 CONTINUE
C
C     We need one more transformation: from the
C     ustar(shell ref. surf.), v(shell ref. surf.)
C     wstar(shell ref. surf.), beta(meridional rotation)
C     to the nodal degrees of freedom, which are in this
C     analysis:
C
C      {q} = w(i-1), u(i-1), v(i-1), w(i), u(i), v(i), w(i+1)
C
C     That transformation is accomplished via the 4 x 7 matrix,
C     TBAR, defined near the beginning of this subroutine. TBAR
C     is the same as the D matrix used previously in SUBROUTINE
C     STABIL. TBAR is given in Eq.(156) on p.499 of the paper
C     cited above in connection with the 7 x 7 local stiffness
C     matrix, U .
C
C  Next we must obtain the strain energy, given now in the form:
C
C  U = q(transpose) x TBAR(transpose) x EBAR(transpose)
C       x XBAR(transpose) x FKBAR x XBAR x EBAR x TBAR x q
C
C  The next line gets FKX = XBAR(transpose) x FKBAR x XBAR
C
      CALL MATMU2(FKBAR,XBAR,FKX,3,3,0)
C
C     WRITE(IFILE4,'(/,A)')' FKX(i,j)='
C     DO 35 I = 1,3
C       WRITE(IFILE4,'(1P3E12.4)') (FKX(I,J),J=1,3)
C  35 CONTINUE
C
C  The next line gets FKXE = EBAR(transpose) x FKX x EBAR
C
      CALL MATMU2(  FKX,EBAR,FKXE,3,4,0)
C
C     WRITE(IFILE4,'(/,A)')' FKXE(i,j)='
C     DO 37 I = 1,4
C       WRITE(IFILE4,'(1P4E12.4)') (FKXE(I,J),J=1,4)
C  37 CONTINUE
C
C  The next line gets U = TBAR(transpose) x FKXE x TBAR
C
      CALL MATMU4(FKXE,TBAR,U,4,7,1)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C     WRITE(IFILE4,'(A,I5)')
C    1' In SUBROUTINE SPRING. strain energy computed for spring no.',
C    1  IANGLE
C     WRITE(IFILE4,'(/,A)')' U(i,j)='
C     DO 40 I = 1,7
C       WRITE(IFILE4,'(1P7E10.2)') (U(I,J),J=1,7)
C  40 CONTINUE
C
C   To obtain later the force in the spring, we have
C
C    (force in the spring) = SPRKON(IANGLE,K) * (delta L),
C
C   in which
C
C     (delta L) =    (A*dx + B*dy + C*dz)/L
C
C   and                                                     |w(i-1)|
C             3 x 3          3 x 4             4 x 7        |u(i-1)|
C  |dx|   |          |   |           |   |              |   |v(i-1)|
C  |dy|   |   XBAR   | * |   EBAR    | * |     TBAR     | * | w(i) |
C  |dx|   |          |   |           |   |              |   | u(i) |
C                                        |              |   | v(i) |
C                                                           |w(i+1)|
C   in which the w(i-1) etc. are the shell reference
C   surface nodal degrees of freedom associated with
C   the shell finite element to which the "fake" ring
C   that holds one spring end is attached. The force
C   in each spring is derived later in SUBROUTINES SPOSE
C   and SUPER and is given by:
C
C   F = SPRKON(IANGLE,K) x (delta L)
C
      RETURN
      END
C
C END MAR 2008
C
C
C
C=DECK      GETWWD
      SUBROUTINE GETWWD(DS,K,H,WB,WBD)
C     CALLED FROM STABIL
C     FINITE-DIFFERENCE EXPRESSIONS FOR VARIABLE MESH SPACING WITH
C     U,V HALF-WAY BETWEEN W.
C
      DOUBLE PRECISION DS,K,H,WB,WBD,HMK,KPDS,HPDS
      DIMENSION WB(7),WBD(7)
      HMK = H - K
      KPDS = K + DS
      HPDS = H + DS
      WB(1) = HMK*KPDS/(16.*H*DS)
      WB(4) = KPDS*HPDS/(4.*H*K)
      WB(7) = -HMK*HPDS/(16.*K*DS)
      WBD(1) = -0.5/H
      WBD(7) = 0.5/K
      WBD(4) = -WBD(1) - WBD(7)
      RETURN
      END
C
C
C
C=DECK      GETC
      SUBROUTINE GETC(L5,IGL,COEF,C)
C
C     CALLED FROM STABIL, WHOSE TRACE IS STABIL,ASTAB,ARRAYS,MAIN
C     THE WALL STIFFNESS MATRIX COEF IS TRANSFERRED TO ARRAY C, FOR
C     CURRENT MESH STATION IN CURRENT SEGMENT.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      DIMENSION C(6,6),COEF(L5,14)
      C(1,1) = COEF(IGL,1)
      C(1,2) = COEF(IGL,2)
      C(1,4) = COEF(IGL,3)
      C(1,5) = COEF(IGL,4)
      C(2,2) = COEF(IGL,5)
      C(2,4) = COEF(IGL,6)
      C(2,5) = COEF(IGL,7)
      C(3,3) = COEF(IGL,11)
      C(3,6) = COEF(IGL,12)
      C(4,4) = COEF(IGL,8)
      C(4,5) = COEF(IGL,9)
      C(5,5) = COEF(IGL,10)
      C(6,6) = COEF(IGL,13)
      C(2,1) = C(1,2)
      C(4,1) = C(1,4)
      C(5,1) = C(1,5)
      C(4,2) = C(2,4)
      C(5,2) = C(2,5)
      C(6,3) = C(3,6)
      C(5,4) = C(4,5)
      DO 10 I=1,6
      DO 10 J=1,6
10    C(I,J) = C(I,J) *RDS
      RETURN
      END
C
C
C
C BEG AUG 1999
C=DECK      GETPB5
      SUBROUTINE GETPB5(P,PCOEFA,P2,PCOEFB,UB,VB,WB,B1,ROT,U)
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN.
C     PRESSURE ROTATION EFFECT FOR BUCKLING PROBLEMS (LIKE BOSOR5 VERSION)
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION U,PR,PP,WB,PROD,PROD1,PROD2
      DOUBLE PRECISION B1,PR2,ROT,UB,VB
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      DIMENSION U(7,7),WB(7)
      DIMENSION B1(6,7),ROT(3,7),UB(7),VB(7)
      PR = (P*PCOEFA + P2*PCOEFB)*RDS
      PP = 0.0
      PROD = PR*(FK1+FK2)
      PROD1 = -.25*PR*FK1
      PROD2 = -.25*PR*FK2
      PR2 = PR/2.
C
C     ADD TERMS FOR EFFECT OF REF. SURF. BUCKLING STRAIN ON WORK DONE BY
C     PRESSURE...
C
      DO 20 J = 1,7
      DO 10 K = 1,J
   10 U(J,K) = U(J,K) - PR2*(WB(J)*(B1(1,K) +B1(2,K))  +
     1   (B1(1,J) +B1(2,J))*WB(K))
     2 +PR2*(UB(J)*ROT(1,K) + ROT(1,J)*UB(K)
     3      +VB(J)*ROT(2,K) + ROT(2,J)*VB(K))
   20 CONTINUE
C
      RETURN
      END
C
C
C
C=DECK      GETRNT
      SUBROUTINE GETRNT(RNT,ROT,B1,ISIG)
C
C     GET MATRIX FOR TRANSFORMATION FROM DISP. GRADIENTS TO NODAL UNKN.
C     THIS MATRIX IS USED IN THE DERIVATION OF WORK DONE BY MEMBRANE
C     STRESS RESULTANTS DURING BUCLING OR VIBRATION
C
      DOUBLE PRECISION RNT,ROT,B1,R,RD,FK1,FK2,CURD,RDS,FN,H
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      DIMENSION RNT(6,7),ROT(3,7),B1(6,7)
C
      DO 10 I = 1,7
      RNT(1,I) = ROT(1,I)
      RNT(2,I) = ROT(2,I)
      RNT(3,I) = B1(1,I)
      RNT(4,I) = B1(2,I)
   10 CONTINUE
C
      RNT(5,3) = -1./H
      RNT(5,6) = 1./H
C BEG APR 2009
      RNT(6,2) = .5*FNBAR
C END APR 2009
      RNT(6,3) = -.5*RD/R
      RNT(6,5) = RNT(6,2)
      RNT(6,6) = RNT(6,3)
C
      IF (ISIG.NE.1) RETURN
C
C     POLE CONDITIONS...
      DO 20 K = 1,7
   20 RNT(6,K) = RNT(5,K)
C
      RETURN
      END
C END AUG 1999
C
C
C
C=DECK      GETROT
C     OVERLAY(1,5)
      SUBROUTINE GETROT(ROT,I,L5,ISIG,WB,WBD)
C
C     CALLED FROM STABIL. MATRIX ROT(I,J) IS SET UP WHICH RELATES
C     ROTATION VECTOR WITH SHELL REFERENCE SURFACE DISPLACEMENT COMPONEN
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION ROT,WB,WBD
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/INSTAB/INDIC
      COMMON/FICTP/ IFICT
      DIMENSION ROT(3,7),WB(7),WBD(7)
      ROT(1,1) = WBD(1)
      ROT(1,2) = -0.5*FK1
      ROT(1,4) = WBD(4)
      ROT(1,5) = ROT(1,2)
      ROT(1,7) = WBD(7)
C BEG APR 2009
      ROT(2,1) = WB(1)*FNBAR
C END APR 2009
      ROT(2,2) = 0.0
      ROT(2,3) = -0.5*FK2
C BEG APR 2009
      ROT(2,4) = WB(4)*FNBAR
C END APR 2009
      ROT(2,5) = 0.0
      ROT(2,6) = ROT(2,3)
C BEG APR 2009
      ROT(2,7) = WB(7)*FNBAR
      ROT(3,2) = 0.25*FNBAR
C END APR 2009
      ROT(3,3) = 0.5/H - 0.25*RD/R
      ROT(3,5) = ROT(3,2)
      ROT(3,6) = -0.5/H - 0.25*RD/R
      IF (ISIG.NE.1) RETURN
      DO 10 K=1,7
10    ROT(2,K) = ROT(1,K)
      IF (FN.NE.0.) GO TO 30
      DO 20 K=1,7
20    ROT(3,K) = 0.0
      RETURN
30    ROT(3,2) = -.5*FN/H
      ROT(3,3) = 1./H
      ROT(3,5) = .5*FN/H
      ROT(3,6) = -1./H
      RETURN
      END
C
C
C
C=DECK      GETB1
C./      ADD   NAME=GETBLK
      SUBROUTINE GETB1(B1,CHIFIX,ROT,L5,ISIG,WB,WBD,HPAST,HI)
C
C     CALLED FROM STABIL, WHOSE TRACE IS STABIL,ASTAB,ARRAYS,MAIN
C     STRAIN-DISPLACEMENT AND CURVATURE DISPLACEMENT RELATIONS IN
C     FINITE-DIFFERENCE FORM. CORRESPONDS TO ITH MESH POINT IN SEGMENT
C     NUMBER ISEG.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C,B1,ROT,CHIFIX,WB,WBD,HPAST,HI
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/INSTAB/INDIC
      COMMON/FICTP/ IFICT
      DIMENSION B1(6,7),ROT(3,7),WB(7),WBD(7)
C
C     CENTRAL DIFFERENCES USED INSIDE DOMAIN. U AND V LOCATED AT
C     HALF-STATIONS.
      B1(1,1) = FK1*WB(1) + CHIFIX*ROT(1,1)
      B1(1,2) = -1./H + CHIFIX*ROT(1,2)
      B1(1,4) = FK1*WB(4) + CHIFIX*ROT(1,4)
      B1(1,5) = 1./H + CHIFIX*ROT(1,5)
      B1(1,7) = FK1*WB(7) + CHIFIX*ROT(1,7)
      B1(2,1) = FK2*WB(1)
      B1(2,2) = 0.5*RD/R
C BEG APR 2009
      B1(2,3) = - 0.5*FNBAR
C END APR 2009
      B1(2,4) = FK2*WB(4)
      B1(2,5) = B1(2,2)
      B1(2,6) = B1(2,3)
      B1(2,7) = FK2*WB(7)
      B1(3,1) = CHIFIX*ROT(2,1)
      B1(3,2) = - B1(2,6)
      B1(3,3) = -1./H -.5*RD/R + CHIFIX*ROT(2,3)
      B1(3,4) = CHIFIX*ROT(2,4)
      B1(3,5) = B1(3,2)
      B1(3,6) = 1./H - .5*RD/R + CHIFIX*ROT(2,6)
      B1(3,7) = CHIFIX*ROT(2,7)
      FMUL = 0.0
      B1(4,1) = 1./(HPAST*H)  -FMUL*B1(1,1)*FK1
      B1(4,2) = FK1/H         -FMUL*B1(1,2)*FK1
      B1(4,4) =-2./(HI*HPAST) -FMUL*B1(1,4)*FK1
      B1(4,5) = -FK1/H        -FMUL*B1(1,5)*FK1
      B1(4,7) = 1./(H*HI)     -FMUL*B1(1,7)*FK1
C
      DO 10 I=1,7
C BEG APR 2009
      B1(5,I) = -ROT(2,I)*FNBAR +ROT(1,I)*RD/R -FMUL*B1(2,I)*FK2
10    B1(6,I) = 2.*(-ROT(1,I)*FNBAR + ROT(2,I)*RD/R)
C END APR 2009
      B1(6,3) = B1(6,3) - 2.*FK2/H
      B1(6,6) = B1(6,6) + 2.*FK2/H
      IF (ISIG.NE.1) RETURN
      IF (FN.NE.0.) GO TO 30
      DO 20 J=1,7
      B1(2,J) = B1(1,J)
      B1(5,J) = B1(4,J)
      B1(3,J) = 0.0
20    B1(6,J) = 0.0
      RETURN
30    DO 40 K=1,3
      DO 40 J=1,7
40    B1(K,J) = 0.0
      B1(1,2) = -1./H
      B1(1,5) =  1./H
      B1(2,2) = -1./H
      B1(2,3) = FN/H
      B1(2,5) = 1./H
      B1(2,6) = -FN/H
      B1(3,2) = -FN/H
      B1(3,5) =  FN/H
      B1(5,1) = B1(4,1) - .5*(FN/H)**2
      B1(5,2) = 0.0
      C = FN*(FK1+FK2)
      B1(5,3) = -C/H
      B1(5,4) = B1(4,4) + (FN/H)**2
      B1(5,5) = 0.0
      B1(5,6) = C/H
      B1(5,7) = B1(4,7) - .5*(FN/H)**2
      DO 50 J=1,7
50    B1(6,J) = FN*B1(4,J)
      RETURN
      END
C
C
C
C=DECK      GETP
      SUBROUTINE GETP(P,PCOEFA,P2,PCOEFB,WB,U)
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN.
C     PRESSURE ROTATION EFFECT FOR BUCKLING PROBLEMS
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION U,PR,PP,WB,PROD,PROD1,PROD2
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      DIMENSION U(7,7),WB(7)
      PR = (P*PCOEFA + P2*PCOEFB)*RDS
      PP = 0.0
      PROD = PR*(FK1+FK2)
      PROD1 = -.25*PR*FK1
      PROD2 = -.25*PR*FK2
      U(1,1) = PROD*WB(1)*WB(1)
      U(2,1) = PP*WB(1)
      U(4,1) = PROD*WB(1)*WB(4)
      U(5,1) = PP*WB(1)
      U(7,1) = PROD*WB(1)*WB(7)
      U(2,2) = PROD1
      U(4,2) = PP*WB(4)
      U(5,2) = PROD1
      U(7,2) = PP*WB(7)
      U(3,3) = PROD2
      U(6,3) = PROD2
      U(4,4) = PROD*WB(4)*WB(4)
      U(5,4) = PP*WB(4)
      U(7,4) = PROD*WB(4)*WB(7)
      U(5,5) = PROD1
      U(7,5) = PP*WB(7)
      U(6,6) = PROD2
      U(7,7) = PROD*WB(7)*WB(7)
      RETURN
      END
C
C
C
C=DECK      SRHS
      SUBROUTINE SRHS(I,L5,B,THERM,PR,F,WB,ISEG,SMPA,IPOS,PALL,
C BEG SEP 1997
     1   ILODAB,IOMGAB,Z,IFLSEG)
C END SEP 1997
C
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN.
C     CALLED WHEN INDIC = 3 (LINEAR,NONSYMMETRIC STRESS ANALYSIS), THIS
C     SUBROUTINE CALCULATES THE RIGHT-HAND-SIDE VECTOR CORRESPONDING TO
C     DISTRIBUTED MECHANICAL AND THERMAL LOADS ON SHELL SURFACE FOR
C     SEGMENT NO. ISEG, MESH POINT NO. I.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION WB,B,F,FAXL,FLATL
      DIMENSION WB(7),IPOS(*),PALL(*)
      DIMENSION B(6,7),THERM(L5,4),PR(L5,3),F(*)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,M
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/INDICS/I3M,I2M,I1M,I0,I1P,I2P,I3P
      COMMON/NOHARM/NHARM
      COMMON/COUNTR/NKOUNT
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
C BEG SEP 1997
      COMMON/FLUTNK/GAMMAF,AXLONG,RBIG,ZBEGIN
      COMMON/ACCELR/GRAVTY,GLATRL,GAXIAL
C END SEP 1997
C     THERMAL LOADS
      INDX1 = IPOS(1) + NKOUNT - 1
      INDX2 = IPOS(2) + NKOUNT - 1
      INDX3 = IPOS(3) + NKOUNT - 1
      FACT = 1.0
      IF (DABS(FN).GT.0.1) FACT = 0.
      IF (ILODAB.NE.IOMGAB) FACT = 0.
      T1 = THERM(I,1)*PALL(INDX3)
      T2 = THERM(I,2)*PALL(INDX3)
      T4 = THERM(I,3)*PALL(INDX3)
      T5 = THERM(I,4)*PALL(INDX3)
C     MECHANICAL SURFACE TRACTIONS
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        PT = PR(I,1)*PALL(INDX1)
     1 + R*OMEGA**2*SMPA*RD*FACT
        PC = PR(I,2)*PALL(INDX2)
        PN = PR(I,3)*PALL(INDX1)
     1 + R*OMEGA**2*SMPA*R*FK2*FACT
      ELSE
        PT = PR(I,1)*PALL(INDX1)
        PC = PR(I,2)*PALL(INDX2)
        PN = PR(I,3)*PALL(INDX1)
      ENDIF
C END APR 2009
C BEG SEP 1997
      N = FN
C     WRITE(IFILE4,'(A,4I3,1P3E12.4)')
C    1' N,I,ILODAB,IFLSEG,R,GAMMAF,GLATRL=',
C    1                             N,I,ILODAB,IFLSEG,R,GAMMAF,GLATRL
      IF (ILODAB.EQ.1.AND.IFLSEG.NE.0) THEN
         N = FN
         FFLSEG = IFLSEG
         IF (N.EQ.0) THEN
            AGLAT = ABS(GLATRL)
            AGAXL = ABS(GAXIAL)
            IF (GAXIAL.EQ.0.) AGAXL = 1.
C BEG APR 2009
            IF (IPRISM.EQ.0) THEN
              PN = PN + FFLSEG*GAMMAF*(AGLAT*RBIG
     1            +GAXIAL*(0.5*(1.+GAXIAL/AGAXL)*AXLONG -(Z-ZBEGIN)))
            ELSE
              PN = PN + FFLSEG*GAMMAF*(AGLAT*0.0
     1            +GAXIAL*(0.5*(1.+GAXIAL/AGAXL)*AXLONG -(Z-ZBEGIN)))
            ENDIF
C END APR 2009
         ENDIF
         IF (N.EQ.1.OR.N.EQ.-1) THEN
C BEG APR 2009
            IF (IPRISM.EQ.0) THEN
              PN = PN - FFLSEG*GAMMAF*GLATRL*R
            ELSE
              PN = PN - FFLSEG*GAMMAF*GLATRL*0.0
            ENDIF
C END APR 2009
         ENDIF
      ENDIF
C END SEP 1997
C
C  ADDITIONS TO LOADS DUE TO DYNAMIC REACTION OF NON-SELF-EQUILIBRATING
C  LOADS. ADDED ON 17 AUGUST, 1985. OBTAINED FROM BOSBILTAPE (UNIVAC)
C
      IF (IDYN(ILODAB).EQ.0) GO TO 200
      N = FN
      IF (IABS(N).GT.1) GO TO 200
      ZP = Z - ZCM
      C3 = SMPA*(MY(ILODAB) - FX(ILODAB)*ZCM)/ICM
      C4 = SMPA*(MX(ILODAB) + FY(ILODAB)*ZCM)/ICM
      C1 = SMPA*FX(ILODAB)/M + ZP*C3
      C2 = SMPA*FY(ILODAB)/M - ZP*C4
      IF (N.NE.-1) GO TO 10
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        PTD = -C1*RD + C3*R*RFK2
        PCD = C1
        PND = -C1*RFK2 - C3*R*RD
      ELSE
        PTD = -C1*RD + C3*0.0*RFK2
        PCD = C1
        PND = -C1*RFK2 - C3*0.0*RD
      ENDIF
C END APR 2009
      GO TO 100
   10 IF (N.NE.0) GO TO 20
C BEG APR 2009
      PTD = -SMPA*RFK2*FZ(ILODAB)/M
      IF (IPRISM.EQ.0) THEN
        PCD =  SMPA*R*MZ(ILODAB)/IZ
      ELSE
        PCD =  SMPA*0.0*MZ(ILODAB)/IZ
      ENDIF
C END APR 2009
      PND =  SMPA*RD*FZ(ILODAB)/M
      GO TO 100
   20 IF (N.NE.1) GO TO 100
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        PTD = C2*RD + C4*R*RFK2
        PCD = C2
        PND = C2*RFK2 - C4*R*RD
      ELSE
        PTD = C2*RD + C4*0.0*RFK2
        PCD = C2
        PND = C2*RFK2 - C4*0.0*RD
      ENDIF
C END APR 2009
  100 CONTINUE
      PT = PT + PTD
      PC = PC + PCD
      PN = PN + PND
  200 CONTINUE
C     ADDITIONS TO RIGHT-HAND-SIDE VECTOR.
      F(I3M)=F(I3M)+RDS*(-T1*B(1,1)-T2*B(2,1)-T4*B(4,1)-T5*B(5,1)+PN*WB
     1(1) )
      F(I2M)=F(I2M)+RDS*(-T1*B(1,2)-T2*B(2,2)-T4*B(4,2)-T5*B(5,2)+PT/2.)
      F(I1M)=F(I1M)+RDS*(-T1*B(1,3)-T2*B(2,3)-T4*B(4,3)-T5*B(5,3)+PC/2.)
      F(I0 )=F(I0 )+RDS*(-T1*B(1,4)-T2*B(2,4)-T4*B(4,4)-T5*B(5,4)+PN*WB
     1(4) )
      F(I1P)=F(I1P)+RDS*(-T1*B(1,5)-T2*B(2,5)-T4*B(4,5)-T5*B(5,5)+PT/2.)
      F(I2P)=F(I2P)+RDS*(-T1*B(1,6)-T2*B(2,6)-T4*B(4,6)-T5*B(5,6)+PC/2.)
      F(I3P)=F(I3P)+RDS*(-T1*B(1,7)-T2*B(2,7)-T4*B(4,7)-T5*B(5,7)+PN*WB
     1(7) )
C
C BEG FEB 2008
C     IF (I.EQ.1.AND.N.EQ.0.AND.ISEG.EQ.1.AND.ILODAB.EQ.2) THEN
C        WRITE(IFILE4,'(/,A,/,1P8E10.2)')
C    1' T1, T2, T4, T5, PT, PC, PN, OMEGDR=',
C    1  T1, T2, T4, T5, PT, PC, PN, OMEGDR
C     ENDIF
C END FEB 2008
      IF (OMEGDR.EQ.0.) RETURN
      IF (ILODAB.NE.1) RETURN
      N = DABS(FN) + 0.1
      IF (N.GT.1) RETURN
      IF (N.EQ.1.AND.YLATRL.EQ.0.) RETURN
      IF (N.EQ.0.AND.YAXIAL.EQ.0.) RETURN
C
      RHORCA = OMEGDR*OMEGDR*RDS*SMPA
      FAXL = -YAXIAL*RHORCA
      FLATL= -YLATRL*RHORCA
      IF (N.EQ.1) GO TO 22
C
C    AXIAL BASE MOTION (N = 0 CIRC. WAVES)...
C
      F(I3M) = F(I3M) - FAXL*RD*WB(1)
C BEG APR 2009
      F(I2M) = F(I2M) + FAXL*.5*RFK2
      F(I0)  = F(I0)  - FAXL*RD*WB(4)
      F(I1P) = F(I1P) + FAXL*.5*RFK2
C END APR 2009
      F(I3P) = F(I3P) - FAXL*RD*WB(7)
C
      GO TO 30
C
   22 CONTINUE
C
C    LATERAL BASE MOTION (N = 1 CIRC. WAVE)...
C
      FACT = 1.0
      IF (FN.LT.0.1) FACT = -1.0
C BEG APR 2009
      F(I3M) = F(I3M) + FLATL*RFK2*WB(1)
      F(I2M) = F(I2M) + FLATL*.5*RD
      F(I1M) = F(I1M) + FLATL*.5*FACT
      F(I0)  = F(I0)  + FLATL*RFK2*WB(4)
      F(I1P) = F(I1P) + FLATL*.5*RD
      F(I2P) = F(I2P) + FLATL*.5*FACT
      F(I3P) = F(I3P) + FLATL*RFK2*WB(7)
C END APR 2009
C
   30 CONTINUE
C
      RETURN
      END
C
C
C
C=DECK      GETE
      SUBROUTINE GETE(K,E)
C
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN
C     CALCULATES TRANSFORMATION MATRIX WHICH RELATES DISPLACEMENTS OF
C     RING CENTROID TO DISPLACEMENTS OF SHELL REFERENCE SURFACE. ALL
C     DISPLACEMENTS IN THIS TRANSFORMATION ARE NORMAL AND TANGENTIAL
C     TO AXIS OF REVOLUTION.
C
C     E1(K) IS THE RADIAL DISTANCE OF THE KTH RING CENTROID FROM THE
C     SHELL REFERENCE SURFACE. E2(K) IS THE AXIAL DISTANCE.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION E
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/RING2/GAM(198),GJ(198), 
     1            YC(198), XC(198),E1(198),E2(198),PHI(200)
      DIMENSION E(4,4)
      E(1,1) = 1.
      E(1,4) = -E1(K)
C BEG APR 2009
      E(2,1) = -E2(K)*FNBAR
      E(2,2) = 1. + E1(K)/R
      E(2,3) = -E1(K)*FNBAR
C END APR 2009
      E(3,3) = 1.
      E(3,4) = E2(K)
      E(4,4) = 1.
      RETURN
      END
C
C
C
C=DECK      GETD
      SUBROUTINE GETD(K,D,ROT,UB,VB,WB)
C
C     CALLED FROM STABIL,WHOSE TRACE IS STABIL,ASTAB,ARRAYS,MAIN
C     CALCULATES MATRIX WHICH TRANSFORMS DISPLACEMENTS NORMAL AND
C     TANGENTIAL TO AXIS OF REVOLUTION TO DISPLACEMENTS NORMAL AND
C     TANGENTIAL TO SHELL REFERENCE SURFACE. CURRENT MESH POINT IN CUR-
C     RENT SEGMENT.
C
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
C BEG APR 2009
      DOUBLE PRECISION D,ROT,UB,VB,WB
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      DIMENSION D(4,7),ROT(3,7),UB(7),VB(7),WB(7)
C BEG APR 2009 following commented out
C     RFK2 = R*FK2
C END APR 2009
      DO 10 I=1,7
      D(1,I) = RFK2*UB(I) - RD*WB(I)
      D(2,I) = VB(I)
      D(3,I) = RD*UB(I) + RFK2*WB(I)
10    D(4,I) = ROT(1,I)
      RETURN
      END
C
C
C
C=DECK      GETG
      SUBROUTINE GETG(I,FN,HOOPF,RINGF,G)
C
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN
C     RING STIFFNESS MATRIX CALCULATED FOR N WAVES. FORMULAS FROM COHEN.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION HF,RHF,G,FN,FN2,R,R2,R4,E,AR,FIX,FIY,FIXY,FGJ
C BEG APR 2009
      DOUBLE PRECISION FNBAR
C END APR 2009
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      COMMON/RING2/GAM(198),GJ(198),
     1              YC(198), XC(198),E1(198),E2(198),PHI(200)
      COMMON/INSTAB/INDIC
      REAL IX,IY,IXY,IP
      DIMENSION G(4,4),RINGF(*)
      FN2 = FN*FN
C BEG APR 2009
      R = RC(I)
      IF (IPRISM.EQ.0) THEN
         R2 = R*R
         R4 = R2*R2
      ENDIF
C END APR 2009
      E = ER(I)
      AR= AREA(I)
      FIX = IX(I)
      FIY = IY(I)
      FIXY = IXY(I)
      FGJ = GJ(I)
      RHF = RINGF(I)
      HF = HOOPF
C     IF (INDIC.GE.3) HF = 0.0
C     IF (INDIC.GE.3)RHF = 0.0
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
         G(1,1) =  R*FN2*(FN2*E*FIX + FGJ)/R4 + FN2*RHF/R
         G(1,2) = -R*FN**3*E*FIXY/R4
         G(1,3) =  R*FN2*FN2*E*FIXY/R4
         G(1,4) =  R*FN2*(E*FIX + FGJ)/R**3
         G(2,2) =  R*FN2*(E*AR + E*FIY/R2)/R2 - HF + RHF/R
         G(2,3) = -R*FN*(E*AR + FN2*E*FIY/R2)/R2 - FN*RHF/R
         G(2,4) = -FN*E*FIXY/R2
         G(3,3) = (E*AR + FN2*FN2*E*FIY/R2)/R + HF + FN2*RHF/R
         G(3,4) =  FN2*E*FIXY/R2
         G(4,4) = (E*FIX + FN2*FGJ)/R
      ELSE
C BEG JAN 2010
         R = R*1000000.
C END JAN 2010
         FNBAR = FN*3.1415927/AXIALL
C BEG JAN 2010
C        G(1,1) =  FN*FNBAR**3*E*FIX + FNBAR**2*FGJ/R  + FN*FNBAR*RHF
C        G(1,2) = -FNBAR**3*E*FIXY
C        G(1,3) =  FN*FNBAR**3*E*FIXY
C        G(1,4) =  FNBAR**2*(E*FIX + FGJ)
C        G(2,2) =  FN*FNBAR*E*AR + FNBAR**2*E*FIY/R - HF + RHF/R
C        G(2,3) = -FNBAR*E*AR - FNBAR**3*E*FIY - FNBAR*RHF
C        G(2,4) = -FNBAR*E*FIXY/R
C        G(3,3) =  E*AR/R + FN*FNBAR**3*E*FIY + HF + FN*FNBAR*RHF
C        G(3,4) =  FNBAR**2*E*FIXY
C        G(4,4) =  E*FIX/R + FN*FNBAR*FGJ
         G(1,1) =  FNBAR**4*E*FIX + FNBAR**2*FGJ/R**2  + FNBAR**2*RHF
         G(1,2) = -FNBAR**3*E*FIXY/R
         G(1,3) =  FNBAR**4*E*FIXY
         G(1,4) =  FNBAR**2*(E*FIX + FGJ)/R
         G(2,2) =  FNBAR**2*E*AR + FNBAR**2*E*FIY/R**2 - HF/R + RHF/R**2
         G(2,3) = -FNBAR*E*AR/R - FNBAR**3*E*FIY/R - FNBAR*RHF/R
         G(2,4) = -FNBAR*E*FIXY/R**2
         G(3,3) =  E*AR/R**2 + FNBAR**4*E*FIY + HF/R + FNBAR**2*RHF
         G(3,4) =  FNBAR**2*E*FIXY/R
         G(4,4) =  E*FIX/R**2 + FNBAR**2*FGJ
C END JAN 2010
      ENDIF
C END APR 2009
      G(2,1) = G(1,2)
      G(3,1) = G(1,3)
      G(3,2) = G(2,3)
      G(4,1) = G(1,4)
      G(4,2) = G(2,4)
      G(4,3) = G(3,4)
      RETURN
      END
C
C
C
C=DECK      RRHS
C     OVERLAY(1,1)
      SUBROUTINE RRHS(I,E,D,F,K,ISEG,IPOS,PALL,ILODAB,V,SHEAR,HF,FM,
     1 TNR,TMR,TMRX,IOMGAB,Z)
C
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN.
C     RRHS IS NEEDED IF INDIC = 3 (LINEAR,NONSYMMETRIC STRESS ANALYSIS)
C     THE WORK DONE BY THE LINE LOADS APPLIED TO THE RING CENTROID IS
C     CALCULATED. ONLY KTH RING INVOLVED.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION F,E,D,ED
      DIMENSION F(*),E(4,4),D(4,7),ED(4,7)
      DIMENSION V(*),SHEAR(*),HF(*),FM(*),IPOS(*),PALL(*)
      DIMENSION TNR(*),TMR(*),TMRX(*)
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,M,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,M
C BEG APR 2009
      COMMON/GGG/R,RD,FK1,FK2,CURD,RDS,FN,H,FNBAR,RFK2
      DOUBLE PRECISION FNBAR,RFK2
C END APR 2009
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      REAL IX,IY,IXY,IP
      COMMON/INDICS/I3M,I2M,I1M,I0,I1P,I2P,I3P
      COMMON/NOHARM/NHARM
      COMMON/COUNTR/NKOUNT
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RMASS/RM(198)
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      CALL MATMU3(E,D,ED,4,7)
C     EFFECT OF RING THERMAL LOADS.
C     TNR = THERMAL HOOP FORCE
C     TMR = THERMAL MOMENT ABOUT X- AXIS (OUT-OF-PLANE)
C     TMRX = THERMAL MOMENT ABOUT Y-AXIS (IN-PLANE)
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
         T1R = -FN*FN*TMR(K)/RC(K)
         T2R = FN*(TNR(K) + TMRX(K)/RC(K))
         T3R = -TNR(K) - FN*FN*TMRX(K)/RC(K)
         T4R = - TMR(K)
      ELSE
         FNBAR = FN*3.1415927/AXIALL
         T1R = -FN*FNBAR*TMR(K)
         T2R = FN*TNR(K) + FNBAR*TMRX(K)
         T3R = -TNR(K) - FN*FNBAR*TMRX(K)
         T4R = - TMR(K)
      ENDIF
C END APR 2009
C     EFFECT OF MECHANICAL LINE LOADS
C     V = AXIAL LINE LOAD
C     SHEAR = SHEAR LINE LOAD
C     HF = RADIAL LINE LOAD
C     FM = MERIDIONAL MOMENT
C
      INDX1 = IPOS(1) + NKOUNT - 1
      INDX2 = IPOS(2) + NKOUNT - 1
      INDX3 = IPOS(3) + NKOUNT - 1
      FACT = 1.0
      IF (DABS(FN).GT.0.1) FACT = 0.
      IF (ILODAB.NE.IOMGAB) FACT = 0.
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        F1 = T1R*PALL(INDX3) - V(K)*PALL(INDX1)*RC(K)
        F2 = T2R*PALL(INDX3) + SHEAR(K)*PALL(INDX2)*RC(K)
        F3 = T3R*PALL(INDX3) + HF(K)*PALL(INDX1)*RC(K)
     1    + RC(K)*RC(K)*OMEGA**2*RM(K)*AREA(K)*FACT
        F4 = T4R*PALL(INDX3) + FM(K)*PALL(INDX1)*RC(K)
      ELSE
        F1 = T1R*PALL(INDX3) - V(K)*PALL(INDX1)*AXIALL
        F2 = T2R*PALL(INDX3) + SHEAR(K)*PALL(INDX2)*AXIALL
        F3 = T3R*PALL(INDX3) + HF(K)*PALL(INDX1)*AXIALL
        F4 = T4R*PALL(INDX3) + FM(K)*PALL(INDX1)*AXIALL
      ENDIF
C END APR 2009
C
C  ADDITION OF DYNAMIC REACTION TERMS ON AUGUST 17, 1985..
C
      IF (IDYN(ILODAB).EQ.0) GO TO 200
      N =FN
      IF (IABS(N).GT.1) GO TO 200
      ZP = Z - ZCM
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        C5 = RM(K)*AREA(K)*RC(K)
      ELSE
        C5 = RM(K)*AREA(K)*AXIALL
      ENDIF
C END APR 2009
      C3 = C5*(MY(ILODAB) - FX(ILODAB)*ZCM)/ICM
      C4 = C5*(MX(ILODAB) + FY(ILODAB)*ZCM)/ICM
      C1 = C5*FX(ILODAB)/M + ZP*C3
      C2 = C5*FY(ILODAB)/M - ZP*C4
      IF (N.NE.-1) GO TO 10
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        F1D = RC(K)*C3
      ELSE
        F1D = AXIALL*C3
      ENDIF
C END APR 2009
      F2D = C1
      F3D = -C1
      GO TO 100
   10 IF (N.NE.0) GO TO 20
      F1D = -C5*FZ(ILODAB)/M
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        F2D =  C5*RC(K)*MZ(ILODAB)/IZ
      ELSE
        F2D =  C5*AXIALL*MZ(ILODAB)/IZ
      ENDIF
C END APR 2009
      F3D = 0.
      GO TO 100
   20 IF (N.NE.1) GO TO 100
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        F1D = RC(K)*C4
      ELSE
        F1D = AXIALL*C4
      ENDIF
C END APR 2009
      F2D = C2
      F3D = C2
  100 CONTINUE
      F1 = F1 + F1D
      F2 = F2 + F2D
      F3 = F3 + F3D
  200 CONTINUE
C     MODIFICATIONS OF RIGHT-HAND-SIDE.
C     I3M,I2M,I1M,I0,I1P,I2P,I3P = GLOBAL EQUATION NUMBERS OF LOCAL
C                                  RIGHT-HAND-SIDE
      F(I3M) = F(I3M) + F1*ED(1,1) +F2*ED(2,1) +F3*ED(3,1) +F4*ED(4,1)
      F(I2M) = F(I2M) + F1*ED(1,2) +F2*ED(2,2) +F3*ED(3,2) +F4*ED(4,2)
      F(I1M) = F(I1M) + F1*ED(1,3) +F2*ED(2,3) +F3*ED(3,3) +F4*ED(4,3)
      F(I0 ) = F(I0 ) + F1*ED(1,4) +F2*ED(2,4) +F3*ED(3,4) +F4*ED(4,4)
      F(I1P) = F(I1P) + F1*ED(1,5) +F2*ED(2,5) +F3*ED(3,5) +F4*ED(4,5)
      F(I2P) = F(I2P) + F1*ED(1,6) +F2*ED(2,6) +F3*ED(3,6) +F4*ED(4,6)
      F(I3P) = F(I3P) + F1*ED(1,7) +F2*ED(2,7) +F3*ED(3,7) +F4*ED(4,7)
C
      IF (ILODAB.NE.1) RETURN
      IF (IPRISM.EQ.1) RETURN
      IF (OMEGDR.GT.0.)CALL RINGDR(FN,YLATRL,YAXIAL,K,ED,RC(K),AREA(K),
     1 RM(K),OMEGDR,F)
C
      RETURN
      END
C
C
C
C=DECK      FILLB
      SUBROUTINE FILLB(IC,N,I3M,I2M,I1M,I0,I1P,I2P,I3P,IR,ILOC,QD,BB)
C     CALLED FROM STABIL, WHOSE TRACE IS ASTAB,ARRAYS,MAIN
C     PURPOSE IS TO ASSEMBLE THE 'MINUS' CONSTRAINT CONDITION
C     MATRIX QD(4X7) INTO THE GLOBAL MATRIX BB.
C     BUCKLING,VIBRATION, AND NONSYMMETRIC STRESS PROBLEMS.
C
      DOUBLE PRECISION QD,BB
      DIMENSION ILOC(*),QD(4,7),BB(*)
      DO 100 I=1,IC
      J = IR - 1 + I
      DO 90 K=1,N
      GO TO (10,20,30,40,50,60,70),K
10    INDX = I3M
      GO TO 80
20    INDX = I2M
      GO TO 80
30    INDX = I1M
      GO TO 80
40    INDX = I0
      GO TO 80
50    INDX = I1P
      GO TO 80
60    INDX = I2P
      GO TO 80
70    INDX = I3P
80    CONTINUE
      IB = ILOC(J) - J + INDX
      BB(IB) = QD(I,K)
90    CONTINUE
100   CONTINUE
      RETURN
      END
C
C
C
C=DECK      MASDRV
      SUBROUTINE MASDRV(OMEGDR,COEF,RDS,WB,U)
C
C      ADD SHELL WALL INERTIAL TERMS TO LOCAL STIFFNESS MATRIX U.
C     SHELL IS DRIVEN HARMONICALLY AT AN ANGULAR FREQUENCY OF OMEGDR.
C
      DIMENSION WB(7),U(7,7)
      DOUBLE PRECISION RDS,SMS,WB,U,PROD
C
      SMS = COEF
      PROD = - SMS*RDS*OMEGDR*OMEGDR
C
      U(2,2) = U(2,2) + 0.25*PROD
      U(3,3) = U(3,3) + 0.25*PROD
      U(5,2) = U(5,2) + 0.25*PROD
      U(5,5) = U(5,5) + 0.25*PROD
      U(6,3) = U(6,3) + 0.25*PROD
      U(6,6) = U(6,6) + 0.25*PROD
C
      U(1,1) = U(1,1) + WB(1)*WB(1)*PROD
      U(4,1) = U(4,1) + WB(4)*WB(1)*PROD
      U(4,4) = U(4,4) + WB(4)*WB(4)*PROD
      U(7,1) = U(7,1) + WB(7)*WB(1)*PROD
      U(7,4) = U(7,4) + WB(7)*WB(4)*PROD
      U(7,7) = U(7,7) + WB(7)*WB(7)*PROD
C
      RETURN
      END
C
C
C
C=DECK      RMASDV
      SUBROUTINE RMASDV(OMEGDR,RM,RC,AREA,FIS,FIN,FISN,E,D,ROT,
     1 TR1,TR2,TR3,U)
C
C     PURPOSE IS TO ADD INERTIAL TERMS FOR DISCRETE RINGS TO
C    STIFFNESS MATRIX U CORRESPONDING TO STRUCTURE DRIVEN HARMONICALLY
C    AT A FREQUENCY OF OMEGDR.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DIMENSION E(4,4),D(4,7),ROT(3,7),U(7,7),TR1(4,4),TR2(3,3),TR3(4,4)
      DOUBLE PRECISION E,D,ROT,TR1,TR2,TR3,U,RHORC,RHORCA
C
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        RHORC = -OMEGDR*OMEGDR*RM*RC
      ELSE
        RHORC = 0.0 
      ENDIF
C END APR 2009
      RHORCA = RHORC*AREA
C
      TR1(1,1) = RHORCA
      TR1(2,2) = RHORCA
      TR1(3,3) = RHORCA
      TR1(4,4) = RHORC*(FIS + FIN)
C
      TR2(2,2) = RHORC*FIS
      TR2(2,3) = - RHORC*FISN
      TR2(3,2) = TR2(2,3)
      TR2(3,3) = RHORC*FIN
C
      CALL MATMU2(TR1,E,TR3,4,4,0)
      CALL MATMU4(TR3,D,U,4,7,1)
      CALL MATMU4(TR2,ROT,U,3,7,1)
C
      RETURN
      END
C
C
C
C=DECK      RINGDR
      SUBROUTINE RINGDR(FN,YLATRL,YAXIAL,K,ET,RC,AREA,RM,OMEGDR,F)
C
C    PURPOSE IS TO ADD TERMS ON R.H.S. DUE TO BASE MOTION OF DISCRETE
C    RING.
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DIMENSION ET(4,7),F(*),TR1(4,4),TR1ET(4,7)
      COMMON/INDICS/I3M,I2M,I1M,I0,I1P,I2P,I3P
      DOUBLE PRECISION ET,F,FN,TR1,RHORCA,TR1ET
C
      N = DABS(FN) + 0.1
      IF (N.GT.1) RETURN
      IF (N.EQ.1.AND.YLATRL.EQ.0.) RETURN
      IF (N.EQ.0.AND.YAXIAL.EQ.0.) RETURN
C
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
        RHORCA = OMEGDR*OMEGDR*RM*RC*AREA
      ELSE
        RHORCA = 0.0 
      ENDIF
C END APR 2009
      TR1(1,1) = RHORCA
      TR1(2,2) = RHORCA
      TR1(3,3) = RHORCA
      TR1(4,4) = 0.
C
      CALL MATMU3(TR1,ET,TR1ET,4,7,0)
      IF (N.EQ.1) GO TO 20
C
C    AXIAL BASE MOTION (N = 0 CIRC. WAVES)...
C
      F(I3M) = F(I3M)  -YAXIAL*TR1ET(1,1)
      F(I2M) = F(I2M)  -YAXIAL*TR1ET(1,2)
      F(I1M) = F(I1M)  -YAXIAL*TR1ET(1,3)
      F(I0)  = F(I0)   -YAXIAL*TR1ET(1,4)
      F(I1P) = F(I1P)  -YAXIAL*TR1ET(1,5)
      F(I2P) = F(I2P)  -YAXIAL*TR1ET(1,6)
      F(I3P) = F(I3P)  -YAXIAL*TR1ET(1,7)
      GO TO 30
C
   20 CONTINUE
C
C    LATERAL BASE MOTION (N = 1 CIRC. WAVE)
C
      FACT = 1.0
      IF (FN.LT.0.1) FACT = -1.0
      F(I3M) = F(I3M)  -YLATRL*(TR1ET(2,1)*FACT + TR1ET(3,1))
      F(I2M) = F(I2M)  -YLATRL*(TR1ET(2,2)*FACT + TR1ET(3,2))
      F(I1M) = F(I1M)  -YLATRL*(TR1ET(2,3)*FACT + TR1ET(3,3))
      F(I0)  = F(I0)   -YLATRL*(TR1ET(2,4)*FACT + TR1ET(3,4))
      F(I1P) = F(I1P)  -YLATRL*(TR1ET(2,5)*FACT + TR1ET(3,5))
      F(I2P) = F(I2P)  -YLATRL*(TR1ET(2,6)*FACT + TR1ET(3,6))
      F(I3P) = F(I3P)  -YLATRL*(TR1ET(2,7)*FACT + TR1ET(3,7))
C
   30 CONTINUE
      RETURN
      END
C
C
C
C=DECK      FOUNDA
      SUBROUTINE FOUNDA(FSTIFF,WB,RDS,U)
C
C     PURPOSE IS TO ADD CONTRIBUTION DUE TO ELASTIC FOUNDATION OF
C     STIFFNESS FSTIFF...
C
      DOUBLE PRECISION WB, RDS, U, PROD
      DIMENSION WB(7), U(7,7)
C
      PROD = RDS*FSTIFF
      U(1,1) = U(1,1) + WB(1)*WB(1)*PROD
      U(4,1) = U(4,1) + WB(4)*WB(1)*PROD
      U(7,1) = U(7,1) + WB(7)*WB(1)*PROD
      U(7,4) = U(7,4) + WB(7)*WB(4)*PROD
      U(4,4) = U(4,4) + WB(4)*WB(4)*PROD
      U(7,7) = U(7,7) + WB(7)*WB(7)*PROD
C
      RETURN
      END
C
C
C
C=DECK      BUCKLELIB
C
C  THIS IS THE BUCKLE LIBRARY (SOURCE FILE)
C
C
C=DECK      BUCKLE
      SUBROUTINE BUCKLE(B,C,DI,DIAG)
C     CALLED FROM MAIN. SOLVES THE EQUATIONS SET UP IN OVERLAY ARRAYS
C     FOR STRESS ,  BUCKLING ,  AND VIBRATION PROBLEMS.
C
      DOUBLE PRECISION B,C,DI
C BEG FEB 28, 2014
      COMMON/INSTAB/INDIC
      COMMON/NWVBUK/NWVCRT
C END FEB 28, 2014
C BEG APR 2014
      COMMON/NSHFTX/NSHIFT
      COMMON/IDETCTX/IDETCT
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB
      COMMON/ISKIPX/ISKIPR
C END APR 2014
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/TOTPTS/M3
      COMMON/BKSIZE/ IMAXP,IMAXB,KMAXP(20),KMAXB(20)
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/DETER/DET,NEX
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/OUTP/NPRT
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
C BEG MAR 2007
      DIMENSION B(*),C(*),ILOC(30000),DIAG(*),DI(*)
C END MAR 2007
C
C     SWITCHING LOOP FOR VARIOUS TYPES OF ANALYSES (K = INDIC + 3)
C
C BEG NOV 2005
      DIAMX0 = 10.E+28
C END NOV 2005
      GO TO (10,20,30,40,50,70,40),K
10    CONTINUE
C     DETERMINANT DETERMINATION
      CALL GASP(ILOC,M3,3,ILOCB)
      LGTH = 2*ILOC(M3)
      IF (IBLK.EQ.1) CALL GASP(C,LGTH,3,IDRW(1,1))
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       WRITE(IFILE4,15) N,N,N,N
   15  FORMAT(/,' NUMBER OF CIRCUMFERENTIAL WAVES =',4I7)
      ELSE
       WRITE(IFILE4,16) N,N,N,N
C BEG FEB 2014
   16  FORMAT(/,' NUMBER OF AXIAL HALF-WAVES =',4I7)
C END FEB 2014
      ENDIF
C END FEB 2010
C BEG OCT 2005
      CALL FACTR(B,C,IDRW(1,1),DET,NEX,IBLK,NGBK,NFK,ILOC,DIAG,DI,KMAXB,
     1 IFILE4,ITESTX,IABORT,DIAMX0)
C END OCT 2005
      GO TO 80
20    CONTINUE
C     BUCKLING WITH NONLINEAR PREBUCKLING
C BEG APR 2014
      ISKPSV = ISKIPR
C     WRITE(IFILE4,'(A,I5)')' ISKPSV =',ISKPSV
C END APR 2014
      CALL EBAND2(B,C,DI,DIAG,ILOC)
C BEG APR 2014
      IF (EGV(1).LT.0.0.AND.NSHIFT.GT.2) THEN
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A)')
     1 ' *** WARNING **** WARNING **** WARNING ***',
     1 ' NEGATIVE EIGENVALUE FROM NONLINEAR BUCKLING ANALYSIS.',
     1 ' IF THE CONTROL INDEX, IDETCT, IS EQUAL TO 1 THE',
     1 ' EIGENVALUE, EGV(1), IS NOW SET TO ITS ABSOLUTE VALUE.',
     1 ' *** END WARNING **** END WARNING **** END WARNING ***'
      ENDIF
      IF (IDETCT.EQ.1.AND.NSHIFT.GT.2) EGV(1) = ABS(EGV(1))
      IF (ISKIPR.GT.ISKPSV) THEN
         WRITE(IFILE4,'(A,I5)')' ISKIPR =',ISKIPR
         N = N0B
         GO TO 80
      ENDIF
C END APR 2014
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       WRITE(IFILE4,25) N,N,N,N,EGV(1)
   25  FORMAT(/,' NUMBER OF CIRCUMFERENTIAL WAVES =',4I7,
     1' EIGENVALUE=',1PE12.4)
      ELSE
       WRITE(IFILE4,26) N,N,N,N,EGV(1)
   26  FORMAT(/,' NUMBER OF AXIAL HALF WAVES =',4I7,
     1' EIGENVALUE=',1PE12.4)
      ENDIF
C END FEB 2010
C BEG FEB 28, 2014
      GO TO 80
30    CALL ERREX
40    CONTINUE
C     LINEAR BUCKLING
      NPRINT = 1
      CALL EBAND2(B,C,DI,DIAG,ILOC)
      GO TO 80
50    CONTINUE
C     VIBRATION
      NPRINT = 1
      CALL EBAND2(B,C,DI,DIAG,ILOC)
      DO 60 I=1,NVEC
C BEG AUG 1999
      IF (EGV(I).LT.0.) THEN
         WRITE(IFILE4,'(/,A,/,A,/,A)')
     1 ' *** WARNING **** WARNING **** WARNING ***',
     1 ' NEGATIVE EIGENVALUE FROM MODAL VIBRATION ANALYSIS.',
     1 ' *** END WARNING **** END WARNING **** END WARNING ***'
C        EGV(I) = 0.
      ENDIF
C END AUG 1999
      EGV(I) =  SQRT(ABS(EGV(I)))/(2.*3.1415927)
60    CONTINUE
      GO TO 80
70    CONTINUE
80    CONTINUE
C BEG FEB 28, 2014
      IF (INDIC.EQ.-1) NWVCRT = N
C END FEB 28, 2014
      RETURN
      END
C
C
C
C=DECK      VEC
      SUBROUTINE VEC(IZERO,A,X,Y,NBLK,IBLK,KEQ,LOC)
C     CALLED FROM EBAND,EBAND2, AND EIGEN IN THE BUCKLE OVERLAY
C     PERFORMS MULTIPLICATION OF A MATRIX TIMES A VECTOR FOR
C     MATRICES WHICH ARE STORED IN BLOCKS ON DISK
C     CALCULATIONS GIVE . .    Y = Y*IZERO  + A*X
      DOUBLE PRECISION A,X,Y
      DIMENSION X(*),Y(*),A(*),KEQ(*),LOC(*),IBLK(*)
      IF (IZERO.NE.0) GO TO 20
      N=KEQ(NBLK)
      DO 10 I=1,N
10    Y(I)=0.
20    I1 = 1
      DO 50 I=1,NBLK
      I2=KEQ(I)
      NW = LOC(I2)*2
      IF (NBLK.GT.1) CALL GASP(A,NW,3,IBLK(I))
      K1=1
      DO 40 J=I1,I2
      K2=LOC(J)
      KL=J-LOC(J)
      DO 30 K=K1,K2
      Y(K+KL) = Y(K+KL) + X(J)*A(K)
30    Y(J)=Y(J)+X(K+KL)*A(K)
      Y(J) = Y(J) - X(J)*A(K2)
40    K1=K2+1
50    I1=I2+1
      RETURN
      END
C
C
C
C=DECK      EBAND2
      SUBROUTINE EBAND2(B,C,DI,DIAG,ILOC)
C     CALLED FROM BUCKLE WHICH IS CALLED FROM MAIN.
C     THIS SUBROUTINE IS USED TO CALCULATE NVEC VIBRATION FREQUENCIES
C     OR BUCKLING LOADS
C     FOR A GIVEN CIRCUMFERENTIAL WAVENUMBER N.  THE EIGENVALUE
C     PROBLEM HAS THE FORM . .
C                               A*X  - OMEGA**2*M*X  = 0
C
C     SEE ADDITIONAL COMMENTS SPRINKLED THROUGHOUT EBAND
C
      DOUBLE PRECISION B,C,DI,Z,X,Y
      DOUBLE PRECISION SUM,SUM1,SUM2,SM,BIG
C BEG MAY 2014
      COMMON/BUCKN/ N0B,NMINB,NMAXB,INCRB
      COMMON/IDETCTX/IDETCT
      COMMON/NSTEPX/NSTEPY,IEBAND
      COMMON/FCEMIN/PMIN,TMPMIN,OMGMIN,VMIN(198),HFMIN(198),FMMIN(198)
      COMMON/FCEMAX/PMAX,TMPMAX,OMGMAX,VMAX(198),HFMAX(198),FMMAX(198)
C END MAY 2014
C BEG AP4 2014
      COMMON/NSHFTX/NSHIFT
C BEG MAR 2014
C     DOUBLE PRECISION CORIG
C     DIMENSION CORIG(400000)
      COMMON/ENERGX/ENERGY(50),ENERG(500)
      COMMON/ISKIPX/ISKIPR
      COMMON/WRDCLX/WRDCOL
      CHARACTER*45 WRDCOL
C END MAR 2014
C BEG MAR 2012
      COMMON/IFAILX/IFAILD(200),IFAIL
C END MAR 2012
C BEG FEB 2010
      COMMON/IPRSMX/IPRISM,AXIALL
C END FEB 2010
C BEG OCT 2005
      COMMON/IDVMOD/IFIL8X,ITESTX
C END OCT 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ALLRNG/NALL,IPRE
      COMMON/FORCES/V(198),HF(198),FM(198)
      COMMON/STEPS/STEP,STEP1(198),STEP2(198),STEP3(198)
      COMMON/TEMTUR/ TEMP,DTEMP
      COMMON/IHIGHX/ITOOHI
      COMMON/TOTPTS/NT
      COMMON/EIGNO/NVEC,ROOT(50),AXB
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
C BEG DEC 1990
      DIMENSION C(*),B(*),DI(*),DIAG(*),ILOC(*)
C END DEC 1990
C BEG MAR 2007
      DIMENSION Z(60000),X(30000),Y(30000)
C END MAR 2007
      DIMENSION SM(50),ISAVE1(50),ISAVE2(50)
C BEG MAY 2012
      DIMENSION IFLGKT(50)
C END MAY 2012
      COMMON/OUTP/NPRINT
      COMMON/GMAXX/GMI(50)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/AMPFC2/IMPHI(200)
      COMMON /EIG1/IDI,IMI,AX,ACX(3),DM(3,3),IMXP(3),IMDV(3)
      COMMON /EIG2/ ITP1(1),ITP2,ITP3,ITP4,ITP5
C     COMMON/EIG3/RHO,SD
      COMMON /EIG4/NEG(100)
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/BKSIZE/IMAXP,IMAXB,KMAXP(20),KMAXB(20)
      COMMON/WAVES/ N0,N,NMIN,NMAX,INCR
      COMMON/IDVEC/IBVC(50),IPV2(50)
      COMMON /IDEIG/ IVEC(500),NVECTL,EIGENW(500)
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/INSTAB/INDIC
      COMMON/EIGENV/P,OMG2,RHO
10    FORMAT(25X,'ROOT NUMBER ',I4,'  ITERATION',I4,'  AX=',E14.8,/,
     1' DET=',E14.8,'+',I6,', NUMBER OF NEGATIVE ROOTS=',I3)
20    FORMAT (' THERE ARE',I4,' EIGENVALUES IN THE RANGE ',E15.7,
     1' TO ',E15.7)
30    FORMAT (' THERE ARE ',I4,' EIGENVALUES BETWEEN ', E15.7,' AND ',
     1E15.7)
40    FORMAT (' THERE ARE', I4,' FREQUENCIES BETWEEN ',E15.7,' AND  ',
     1E15.7)
50    FORMAT (15X,' SUB ITERATION',I3,', ARQ=',E14.8,', DARQ=',E14.8,
     1', FREQ=',E14.8)
60    FORMAT (' ROOT NUMBER ',I3,'.',I7,' SPECTRAL SHIFTS.',/,
     1I7,' SUB ITERATIONS.',5X,' EIGENVALUE=',E14.8,', FREQUENCY=',
     1E14.8)
C BEG AUG 1999
      DATA IDB1,IMAX,MAX,EPS,EPS1,EPS2/1,3,18,.000005,.0002,.005/
      DATA C1,C2,C3,C4/.99,.95,.85,.7/
      DATA KA, KB,CC,SD/0,0,1.,.1591549/
      DATA ARQ,AXG,AX2,DARQ,DZ,ER/0.,0.,0.,0.,0.,0./
C     IDB1 = 1
C     IMAX = 3
C     MAX  = 18
C     EPS  = .000005
C     EPS1 = .0002
C     EPS2 = .005
C     C1   = .99
C     C2   = .95
C     C3   = .85
C     C4   = .70
C     KA   = 0
C     KB   = 0
C     CC   = 1.
C     SD   = .1591549
C     ARQ  = 0.
C     AXG  = 0.
C     AX2  = 0.
C     DARQ = 0.
C     DZ   = 0.
C     ER   = 0.
C END AUG 1999
70    FORMAT (' NO FURTHER EIGENVALUES CAN BE FOUND IN THE SPECIFIED',
     1' RANGE.')
80    FORMAT (' VECTOR',/,(6E15.6))
90    FORMAT (' GENERALIZED MASS= ',E15.8,/)
C BEG MAY 2012
      CALL MOVER(0,0,IFLGKT,1,50)
C END MAY 2012
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        IF (NPRINT.GT.1) WRITE(IFILE4,100)NVEC,N
100     FORMAT(/,' ENTER EBAND2 TO CALCULATE LOWEST ', I2,
     1' EIGENVALUES. WAVENUMBER,N=',I6,' CIRC. WAVES',/)
      ELSE
        IF (NPRINT.GT.1) WRITE(IFILE4,102)NVEC,N
102     FORMAT(/,' ENTER EBAND2 TO CALCULATE LOWEST ', I2,
     1' EIGENVALUES. WAVENUMBER,N=',I6,' AXIAL HALF WAVES',/)
      ENDIF
      IF (NPRINT.GT.1) CALL SR100T(2)
C BEG NOV 2005
      DIAMX0 = 10.E+28
C END NOV 2005
      IID = 2
      IF (INDIC.EQ.2) IID = 3
      ITHIS = 0
      NSHIFT = 0
      DECR = 0.95
      M3 = NT
      AXB = 0.0
      AX2 = 0.0
      ITOTL = 0
      NEXT = 1
      IEND = 0
      CALL GASP(ILOC,NT,3,ILOCB)
      IFLAG = 0
      NPRT = 0
      SUM2 = 0.
      NROW = NT
      N8=0
      ND=NROW
      ND2 = ND*2
      LGTH = 2*ILOC(NT)
      AX1=AXB
      N9=5
C BEG AUG 2013
C     IMAX=10
      IMAX=20
C END AUG 2013
C BEG MAR 2014
C     IF (INDIC.EQ.4) THEN
C        IF (IBLK.EQ.1) THEN
C           CALL GASP(B,LGTH,3,IDRW(1,1)) 
C           CALL FACTR(C,B,IDRW(1,1),DET,NEX,IBLK,NGBK,NFK,ILOC,
C    1                 DIAG,DI,KMAXB,IFILE4,ITESTX,IABORT,DIAMX0)
C           "C" is the factored stiffness matrix.
C           CALL MOVER(C,1,CORIG,1,LGTH)
C           CALL MOVER(B,1,CORIG,1,LGTH)
C        ENDIF
C     ENDIF
C END MAR 2014
      ITP1(1) = 0
      ITP2=0
C
      IF (INDIC.NE.-1) IFLGG = 0
      MAX=18
      AROOT=0.
      ASTEP=.5*(AX2-AX1)
      IF (AX1.GT.0.) GO TO 110
      ASTEP=2.*ASTEP
110   CONTINUE
      IF (AX2.GT.0.) GO TO 120
      ASTEP=1.E+20
      KB=100000
      AX2=1.E+20
      GO TO 150
C     FIND NR OF EIGENVALUES AT UPPER END OF RANGE
120   AXT=-AX2
      CALL ADD2(AXT,B,C,IDRW,ILOC,IID)
      IF (NPRINT.GT.1) WRITE(IFILE4,130)
130   FORMAT(' FORMAT130:FINISH FORMING B - AXT*C AND START FACTORING.')
      IF (NPRINT.GT.1) CALL SR100T(2)
      NEX=0
C BEG OCT 2005
      CALL FACTR(C,B,IDRW(1,5),DET,NEX,IBLK,NGBK,NFK,ILOC,DIAG,DI,KMAXB,
     1 IFILE4,ITESTX,IABORT,DIAMX0)
C END OCT 2005
      IF (NPRINT.GT.1) WRITE(IFILE4,140)KTM,AXT
140   FORMAT(/,I5,' NEGATIVE ROOTS FOR SHIFT. AXT =',1PE13.5,/)
C BEG APR 2014
      IF (NPRINT.GT.1) WRITE(IFILE4,'(A,I5)')' NSHIFT=',NSHIFT
C END APR 2014
      IF (NPRINT.GT.1) CALL SR100T(2)
      KB=KTM
150   CONTINUE
      IF (IBLK.EQ.1) CALL GASP(C,LGTH,3,IDRW(1,IID))
      IF(AX2.EQ.0) AX2=1.E+15
      N3=0
      N4=0
      N5=0
      N6=0
      N7=0
      IDF=0
      TOP=0.0
      NIT=0
      NITT=0
      IPOW=0
      NEIG=0
      IDIF=50
      NTOT=ND2
      IDF1=IDIF-1
      TOP1=TOP
      AXR2=.99*AX1
      GO TO 230
C
C     USE THE LAST EIGENVALUE'
C
160   AXR2=AXR+CC*ARQ
      IF (AXR2.GT.AX2) GO TO 210
      IF (AXR2.LT.AX1) GO TO 200
      IF (AXG.LT.AX1) GO TO 200
      IF (AXR2) 170,520,170
170   IF (ABS(ARQ/AXR2).LT.0.01) GO TO 180
      GO TO 190
180   CONTINUE
      N3 = N3 + 1
      IF (N3.GT.IMAX) GO TO 790
      IF (NIT.EQ.MAX) GO TO 765
      NIT = 1
      GO TO 520
190   CONTINUE
      AXM=AMAX1(ASTEP,C4*AROOT)
      CX=AXM/ABS(ARQ)
      CC=AMIN1(CC,CX)
      AXR2=AXR+CC*ARQ
      GO TO 240
200   CONTINUE
      IF (INDIC.NE.-1) GO TO 203
      IF (KTM.LE.KROOTS) GO TO 203
      IF (KTM.EQ.(KROOTS+1)) GO TO 240
203   AXR2 = AXR - 1.5*ARQ
      IF (KB.EQ.100000) GO TO 230
      IF (AXR2.GT.AX2) GO TO 220
      GO TO 230
210   IF (KB.EQ.100000) GO TO 810
      AXR2=AXR-C2*CC*ARQ
      IF (AXR2.GE.AX1) GO TO 230
220   AXR2=.5*(AX1+AX2)
230   CALL URVEC(ND,Y)
      CALL VEC(0,C,Y,X,IBLK,IDRW(1,IID),NGBK,ILOC)
240   N3 =N3+1
      NSHIFT = NSHIFT + 1
      AXR=AXR2
      IF (N3-IMAX) 250,250,790
250   CONTINUE
260   CONTINUE
      AXT=-AXR-AXB
      CALL ADD2(AXT,B,C,IDRW,ILOC,IID)
      NEX=0
      IF (NPRINT.GT.1) WRITE(IFILE4,130)
      IF (NPRINT.GT.1) CALL SR100T(2)
C BEG OCT 2005
      CALL FACTR(C,B,IDRW(1,5),DET,NEX,IBLK,NGBK,NFK,ILOC,DIAG,DI,KMAXB,
     1 IFILE4,ITESTX,IABORT,DIAMX0)
C END OCT 2005
      IF (IBLK.EQ.1) CALL GASP(C,LGTH,3,IDRW(1,IID))
      IF (NPRINT.GT.1) WRITE(IFILE4,140)KTM,AXT
C BEG APR 2014
      IF (NPRINT.GT.1) WRITE(IFILE4,'(A,I5)')' NSHIFT=',NSHIFT
C END APR 2014
      IF (NPRINT.GT.1) CALL SR100T(2)
      IF (INDIC.NE.-1) GO TO 171
C BEG MAY 2014
      IF (IDETCT.EQ.1.AND.ISKIPR.GE.5) THEN
        IF (ISKIPR.EQ.5) THEN
         PMIN = 10.E+20
         TMPMIN = 10.E+20
         OMGMIN = 10.E+20
         PMAX = 0.
         TMPMAX = 0.
         OMGMAX = 0.
        ENDIF
        PMIN = AMIN1(PMIN,ABS(P))
        TMPMIN = AMIN1(TMPMIN,ABS(TEMP))
        OMGMIN = AMIN1(OMGMIN,ABS(OMEGA))
        PMAX = AMAX1(PMAX,ABS(P))
        TMPMAX = AMAX1(TMPMAX,ABS(TEMP))
        OMGMAX = AMAX1(OMGMAX,ABS(OMEGA))
        WRITE(IFILE4,'(A,1P,2E12.4,I3)')
     1 ' min.max pressure,ISKIPR=PMIN,PMAX,ISKIPR=',PMIN,PMAX,ISKIPR
C23456789012345678901234567890123456789012345678901234567890123456789012
        IF (NALL.EQ.0) GO TO 124
        DO 123 J=1,NALL
        IF (ISKIPR.EQ.5) THEN
          VMIN(J) = 10.E+20
         HFMIN(J) = 10.E+20
         FMMIN(J) = 10.E+20
          VMAX(J) = 0.
         HFMAX(J) = 0.
         FMMAX(J) = 0.
        ENDIF
        VMIN(J) = AMIN1(VMIN(J),ABS(V(J)))
        HFMIN(J)= AMIN1(HFMIN(J),ABS(HF(J)))
        FMMIN(J)= AMIN1(FMMIN(J),ABS(FM(J)))
        VMAX(J) = AMAX1(VMAX(J),ABS(V(J)))
        HFMAX(J)= AMAX1(HFMAX(J),ABS(HF(J)))
        FMMAX(J)= AMAX1(FMMAX(J),ABS(FM(J)))
123     CONTINUE
124     CONTINUE
      ENDIF
C End of "IDETCT.EQ.1.AND.ISKIPR.GE.5" condition
C END MAY 2014
      IF (KTM.LE.(KROOTS+1)) GO TO 171
51    IF (NSHIFT.NE.1) GO TO 161
61    ISIG = IFLGG + 1
      GO TO (71,81,91,101,111),ISIG
71    FACT = 0.7 
      GO TO 121
81    FACT = 0.9
      GO TO 121
91    FACT = 0.95
      GO TO 121
101   FACT = 0.99
      GO TO 121
111   FACT = 0.999
121   CONTINUE
      ITOOHI = ITOOHI + 1
C BEG FEB 2014
C     IF (NPRINT.GT.1) WRITE(IFILE4,131)ITOOHI,FACT
      WRITE(IFILE4,'(/,A,3I10)')
     1' ISKIPR, KTM,KROOTS=',ISKIPR,KTM,KROOTS
      WRITE(IFILE4,131)ITOOHI,FACT
      ISKIPR = ISKIPR + 1
      IF (ISKIPR.GT.12) THEN
       WRITE(IFILE4,'(/,A,I3,A,I6,A,/,A,/,A)')
     1 ' In EBAND2: ISKIPR =',ISKIPR,'; N=',N,' circ.waves.',
     1 ' The load has been reduced too many times because of',
     1 ' skipped roots. Run will now abort.'
C BEG MAY 2014
       STEP = SIGN(1.0,P)*(PMAX - PMIN)/50.
       DTEMP= SIGN(1.0,TEMP)*(TMPMAX-TMPMIN)/50.
       DOMEGA=SIGN(1.0,OMEGA)*(OMGMAX-OMGMIN)/50.
       IF (NALL.EQ.0) GO TO 127 
       DO 126 J=1,NALL
       STEP1(J) = SIGN(1.0,V(J))*(VMAX(J) - VMIN(J))/50.
       STEP2(J) = SIGN(1.0,HF(J))*(HFMAX(J)-HFMIN(J))/50.
       STEP3(J) = SIGN(1.0,FM(J))*(FMMAX(J)-FMMIN(J))/50.
126    CONTINUE
127    CONTINUE
       WRITE(IFILE4,'(A,1P,3E12.4)')
     1 ' min.max pressure,step=PMIN,PMAX,STEP=',PMIN,PMAX,STEP
       IDETCT = 0
       NSTEPY = 50
       IF (IEBAND.EQ.1) CALL ERREX
       IEBAND = 1
       P = PMIN
       TEMP = TMPMIN
       OMEGA = OMGMIN
       IF (NALL.EQ.0) GO TO 129
       DO 128 J=1,NALL
       V(J) = VMIN(J)
       HF(J)= HFMIN(J)
       FM(J)= FMMIN(J)
128    CONTINUE
129    CONTINUE
       N0B = N
       NMINB = N
       NMAXB = N
       INCRB = 1
C      CALL ERREX
       GO TO 830
C END MAY 2014
      ENDIF
C END FEB 2014
131   FORMAT(/,' LOAD MUST BE DECREASED BECAUSE ROOTS HAVE BEEN',
     1' SKIPPED.',/,I3,'TH SUCH DECREASE BY FACTOR OF',1PE12.4,/)
      IF (STEP.NE.0.) P = FACT*(P-STEP)
      IF (DTEMP.NE.0.) TEMP = FACT*(TEMP-DTEMP)
      IF (DOMEGA.NE.0.) OMEGA = FACT*(OMEGA-DOMEGA)
      IF (NALL.EQ.0) GO TO 151
      DO 141 J=1,NALL
      IF (STEP1(J).NE.0.) V(J) = FACT*(V(J) - STEP1(J))
      IF (STEP2(J).NE.0.) HF(J)= FACT*(HF(J) - STEP2(J))
141   IF (STEP3(J).NE.0.) FM(J)= FACT*(FM(J) - STEP3(J))
151   CALL CHANGL(FACT,NALL)
      GO TO 830
161   AXR = DECR*AXR
      ITHIS = ITHIS + 1
      IF (ITHIS.GT.10) DECR = 0.5
C BEG FEB 28, 2014
C     IF (ITHIS.GT.20) CALL ERREX
C BEG MAY 2014
C     IF (ITHIS.GT.20) THEN
      IF (ITHIS.GT.40) THEN
         WRITE(IFILE4,'(/,A,/,A,/,A,I3,A,I6,A,/,A,/,A,/,A)')
     1 ' **************** NOTE OF ABORT *****************',
     1 ' In EBAND2. ITHIS.GT.40 Therefore abort the run.',
     1 ' ITHIS=',ITHIS,'; N =',N,' circ.waves.',
     1 ' Aborting because roots have been skipped too often.',
     1 ' Is EBAND2 in trouble because of a negative root?',
     1 ' WRDCOL= TOO MANY LOAD REDUCTIONS. Abort in EBAND2'
         WRDCOL='TOO MANY LOAD REDUCTIONS. Abort in EBAND2'
         CALL ERREX
      ENDIF
C END MAY 2014
C END FEB 28, 2014
      GO TO 260
171   CONTINUE
      ITOOHI = 0
      IF (NPRT.NE.0) WRITE(IFILE4,10)N4,N3,AXR,DET,NEX,KTM
      IF (N5.EQ.0) GO TO 290
      KT=KTM-KA
      IF (INDIC.EQ.2) GO TO 270
      IF (INDIC.NE.1.AND.INDIC.NE.4) GO TO 280
      IF (NPRINT.GT.1) WRITE(IFILE4,30)KT,AX1,AXR2
      GO TO 280
270   F1=SQRT(AX1)*SD
      IF (AXR.LT.0.) GO TO 280
      F2=SQRT(AXR)*SD
      IF (NPRINT.GT.1) WRITE(IFILE4,40)KT,F1,F2
280   CONTINUE
C BEG MAY 2012
      IF (INDIC.EQ.4.AND.KT.LT.0) THEN
        IFLGKT(N7) = KT
        GO TO 350
      ENDIF
C END MAY 2012
      IF (N7.GE.NVEC) GO TO 820
      GO TO 300
290   N5=1
      KA=KTM
      IF (KB.EQ.100000) GO TO 350
      KT=KB-KA
      IF (NPRINT.GT.1) WRITE(IFILE4,20)KT,AX1,AX2
      IF (KT.LE.0) GO TO 820
      GO TO 350
300   KN=KTM-KA
      IF (KN.LE.N7) GO TO 350
      NSKIPT = KN - N7
      IF (NSKIPT.LT.2) IFLAG = IFLAG + 1
      IF (NSKIPT.GT.0.OR.IFLAG.GT.3) THEN
         N3 = N3 - 1
C BEG MAY 2014
C     I'm not sure about the first new line, "AXR2 = -AXT"
         IF (NSKIPT.EQ.1) AXR2 = -AXT
C        IF (NPRINT.GT.1) WRITE(IFILE4,315) N7, NSKIPT
         IF (NPRINT.GT.1) WRITE(IFILE4,315) N7, NSKIPT,IFLAG,AXR2,AX1
C23456789012345678901234567890123456789012345678901234567890123456789012
315      FORMAT(/,' ********** WARNING  WARNING  WARNING **********',/,
     1' IT IS POSSIBLE FOR THIS WAVENUMBER THAT EIGENVALUES',/,
     1' MAY BE CALCULATED OUT OF ORDER OR THAT EIGENVALUES MAY BE',/,
     1' SKIPPED.',/,
     1'  Number of eigenvalues accepted so far                =',I5,/,
     1'  Number of eigenvalues skipped                        =',I5,/,
     1'  IFLAG,AXR2,AX1                         =',I5,1P2E12.4,/,
     1'  Shifting downward to try to capture lo,wer eigenvalues.',/,
     1'  If, after this warning message, the following lines appear',/,
     1'  everything is okay:',/,
     1'   FINISH FORMING B - AXT*C AND START FACTORING.',/,
     1' M  NEGATIVE ROOTS FOR SHIFT, AXT =   -YYYYYYY',/,
     1' THERE ARE    0  EIGENVALUES BETWEEN 0.0000 AND YYYYYYY',/,
     1'  The thing to look for is that "0  EIGENVALUES BETWEEN..."',/,
     1' ******** END WARNING    END WARNING    END WARNING *******',/)
C END MAY 2014
      ENDIF
C
C     IF (N7.GT.0.OR.IFLAG.GT.3) GO TO 350
C
      GO TO (320,330,340),IFLAG
320   AXR2 = 0.7*AXR2 + 0.3*AX1
      GO TO 230
330   AXR2 =0.83*AXR2 + 0.3*AX1
      GO TO 230
340   AXR2 =0.93*AXR2 + 0.3*AX1
      GO TO 230
C     ***********************
C     INVERSE POWER SECTION'
C     ***********************
350   MW = 1
      NITT=NITT+NIT
      NIT= 0
      N41 = N4 + 1
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       IF (NPRINT.GT.1) WRITE(IFILE4,360)N41,N
360    FORMAT(/,' BEGIN INVERSE POWER ITERATIONS FOR EIGENVALUE NO',
     1 I3,',',I6,' CIRCUMFERENTIAL WAVES.',/)
      ELSE
       IF (NPRINT.GT.1) WRITE(IFILE4,361)N41,N
361    FORMAT(/,' BEGIN INVERSE POWER ITERATIONS FOR EIGENVALUE NO',
     1 I3,',',I6,' AXIAL HALF WAVES.',/)
      ENDIF
C END FEB 2010
370   CALL SOLVE(B,X,IBLK,IDRW(1,5),NGBK,ILOC,DIAG,M3,1)
C
      BIG = 0.0
      SUM = 0.0
      SUM1= SUM2
      SUM2= 0.0
      IF (IDB1.GT.IDF.OR.IPOW.EQ.2) GO TO 430
      BR=2.*ABS(ARQ)
      IHIGH = N4*2*NT
      ILOW = IHIGH - IEND + 1
      ISUB = NEXT
      IF (NEXT.GT.1) CALL GASP(Z,J22,3,IPV2(N4))
      I = IDF + 1
380   I = I - 1
      IF (I.LT.IDB1) GO TO 420
      IF (NIT*N8.EQ.0) GO TO 390
      BRA=ABS(ROOT(I)-AXR)
      IF (BRA.GT.BR) GO TO 420
390   CONTINUE
      ISTART = (I-1)*2*NT + 1
400   IF (ISTART.GE.ILOW.AND.ISTART.LE.IHIGH) GO TO 410
      ISUB = ISUB - 1
      LEGTH = 2*ISAVE1(ISUB)
      CALL GASP(Z,LEGTH,3,IBVC(ISUB))
      IHIGH = ISAVE2(ISUB)*2*NT
      ILOW = IHIGH - ISAVE1(ISUB) + 1
      GO TO 400
410   CONTINUE
      ILESS = 0
      ISUB1 = ISUB - 1
      IF (ISUB1) 417,417,414
414   DO 416 K=1,ISUB1
416   ILESS = ILESS + ISAVE1(K)
417   IARG = ISTART - ILESS
      CALL ORTHO2(X,Z(IARG),Z(IARG+NT),I,ND,SM)
      GO TO 380
420   CONTINUE
430   DO 440 I=1,ND
      BIG = DMAX1(BIG,DABS(X(I)))
      SUM=SUM+X(I)*Y(I)
      SUM2= SUM2+X(I)**2
440   CONTINUE
      DO 450 I=1,ND
      Y(I)=X(I)/BIG
450   CONTINUE
      CALL VEC(0,C,Y,X,IBLK,IDRW(1,IID),NGBK,ILOC)
      SUM2=SUM2/BIG**2
      ARQ2=ARQ
      IF (SUM.NE.0.0) ARQ = SUM1/SUM
      ARQ=-ARQ
      AXG=AXR+ARQ
      DZ1= DZ
      DZ = ARQ-ARQ2
      DARQ2=DARQ
      DZZ = DZ - DZ1
      DARQ = ARQ
      IF (DZZ.NE.0.0) DARQ = ARQ - DZ**2/DZZ
      G = ABS(AXR + AXB + ARQ)
      FREQ = SQRT(G)*SD
      IF (NPRT.GT.0) WRITE(IFILE4,50)NIT,ARQ,DARQ,FREQ
      ER2=ER
460   CONTINUE
      ER = 0.0
      ERR = 0.0
      ARX = ARQ + AXR
      FREQ = SQRT(ABS(ARX))/(2.*3.1415927)
      IF (NPRINT.GT.1.AND.INDIC.EQ.2) WRITE(IFILE4,530)N,NIT,FREQ
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
        IF (NPRINT.GT.1.AND.INDIC.NE.2) WRITE(IFILE4,531)N,NIT,ARX
531     FORMAT(' CIRC. WAVES,N=',I6,',  ITERATION NO.=', I3,/,
     1' EIGENVALUE (FACTOR TO BE MULT. BY LOAD STEP)=',1PE13.5)
      ELSE
        IF (NPRINT.GT.1.AND.INDIC.NE.2) WRITE(IFILE4,532)N,NIT,ARX
532     FORMAT(' AXIAL HALF WAVES,N=',I6,',  ITERATION NO.=', I3,/,
     1' EIGENVALUE (FACTOR TO BE MULT. BY LOAD STEP)=',1PE13.5)
      ENDIF
C END FEB 2010
      IF (NPRINT.GT.1) CALL SR100T(2)
      IF (ARX.NE.0.0) ER = ABS((ARQ-ARQ2)/ARX)
      IF (ARX.NE.0.0) ERR= ABS((DARQ-DARQ2)/ARX)
      ER =AMAX1(ER,ERR)
      IF (NIT.LE.1) GO TO 520
      IF (NIT.GE.N9.AND.INDIC.EQ.-1.AND.ARX.GT.0..AND.KTM.GE.(KROOTS+1))
     1GO TO 51
      IF (ER.GT.EPS2) GO TO 520
      IF (NIT.GT.N9) GO TO 470
      IF (ER.LT.EPS) GO TO 570
470   IF (ER.LT.EPS1) GO TO 480
      IF (NIT.LT.13) GO TO 520
      IF (ER.LT.0.001) GO TO 540
      IF (ER2.GT.2.*EPS2) GO TO 520
      CC=C3
      GO TO 160
480   IF (NIT.LT.N9) GO TO 520
      IF (IPOW.GT.0) GO TO 500
      IF (NIT.LT.10) GO TO 490
      GO TO 540
490   CC=C1
      N8 = N8+1
      IPOW= 1
      GO TO 160
500   CONTINUE
510   IF (ER.LT.EPS) GO TO 570
520   NIT=NIT+1
530   FORMAT(' CIRC. WAVES,N=',I6,',  ITERATION NO.=',I3,/,
     1' EIGENVALUE (FREQUENCY IN CYCLES PER SECOND)=',1PE13.5)
      IF (NIT.LT.MAX) GO TO 370
      IF (ER.GT.EPS1) GO TO 550
540   CC=C2
      N8=N8+1
      GO TO 160
550   IF (ER.GT.EPS2) GO TO 560
      CC=C3
      N8=N8+1
      GO TO 160
560   CC=C4
      GO TO 160
570   CONTINUE
      IF (INDIC.EQ.-1.AND.ARX.GT.0..AND.KTM.GE.(KROOTS+1)) GO TO 51
C
C     **************************
C     THE ROOT HAS BEEN ACCEPTED
C     **************************
      AROOT=AXR+ARQ
      IF (N4.LE.0) GO TO 575
      RDIFF = ABS(ROOT(1)) - ABS(AXR)
      IF (N4.EQ.1) GO TO 574
      DO 572 I=2,N4
      R1DIFF = ABS(ROOT(I)) - ABS(AXR)
      RDIFF = AMIN1(RDIFF,R1DIFF)
572   CONTINUE
574   RRATIO = ABS(ARQ/RDIFF)
      IF (RRATIO.LT.1000.) GO TO 575
      IF (NPRINT.GT.1) WRITE(IFILE4,593)
      IF (NPRINT.GT.1) WRITE(IFILE4,593)
      IF (NPRINT.GT.1) WRITE(IFILE4,593)
      IF (NPRINT.GT.1) WRITE(IFILE4,573)RRATIO
573   FORMAT(' NEED TO CHECK ROOT BY ADDITIONAL SHIFTS SINCE',/,
     1' (AROOT-SHIFT)/MIN(ROOT(I)-SHIFT).GT.1000. IT=',1PE14.1)
      IF (NPRINT.GT.1) WRITE(IFILE4,593)
      IF (NPRINT.GT.1) WRITE(IFILE4,593)
      IF (NPRINT.GT.1) WRITE(IFILE4,593)
      CC = 0.95
      GO TO 160
575   TOP = AMAX1(TOP,AROOT)
      ADL=AROOT-TOP
      IF (N4.LE.0) GO TO 580
      IF (ABS(TOP-TOP1)-EPS1) 590,590,580
580   TOP1=TOP
590   N4  = N4+1
C BEG MAR 2014
C     ENERGY(N4) = 0.0
C END MAR 2014
      GMI(N4) = 0.0
      FREQ = SQRT(ABS(AROOT))/(2.*3.1415927)
593   FORMAT(' ******************************')
598   CONTINUE
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN
       IF (INDIC.EQ.2.AND.NPRINT.GT.1) WRITE(IFILE4,600)N4,FREQ,N
       IF (INDIC.NE.2.AND.NPRINT.GT.1) WRITE(IFILE4,601)N4,AROOT,N
  600  FORMAT(/,' ITERATIONS HAVE CONVERGED FOR EIGENVALUE NO.',I3,/,
     1' FREQUENCY (CPS) =',1PE13.5,',  ',
     1  I6,' CIRCUMFERENTIAL WAVES')
  601  FORMAT(/,' ITERATIONS HAVE CONVERGED FOR EIGENVALUE NO.',I3,/,
     1'      EIGENVALUE =',1PE13.5,',  ',
     1  I6,' CIRCUMFERENTIAL WAVES')
      ELSE
       IF (INDIC.EQ.2.AND.NPRINT.GT.1) WRITE(IFILE4,602)N4,FREQ,N
       IF (INDIC.NE.2.AND.NPRINT.GT.1) WRITE(IFILE4,603)N4,AROOT,N
  602  FORMAT(/,' ITERATIONS HAVE CONVERGED FOR EIGENVALUE NO.',I3,/,
     1' FREQUENCY (CPS) =',1PE13.5,',  ',
     1  I6,' AXIAL HALF WAVES')
  603  FORMAT(/,' ITERATIONS HAVE CONVERGED FOR EIGENVALUE NO.',I3,/,
     1'      EIGENVALUE =',1PE13.5,',  ',
     1  I6,' AXIAL HALF WAVES')
      ENDIF
C END FEB 2010
      IF (NPRINT.GT.1) CALL SR100T(2)
      ITP3=N4
      NITT=NITT+NIT
      IF (NPRT.EQ.0) GO TO 610
      IF (NPRINT.GT.1) WRITE(IFILE4,60)N4,N3,NITT,AROOT,FREQ
610   CONTINUE
      NIT=0
      NITT=0
      ROOT(N4)=AROOT
      IPOW=0
      NEIG=0
      N6  =0
      IDF=MIN0( N4, IDIF)
      IF (N4.LE.IDIF) GO TO 630
      DO 620 I=1,IDF1
      SM(I)=SM(I+1)
620   CONTINUE
630   CONTINUE
      SUMM= 0.0
      DO 640 J=1,ND
      SUMM=SUMM+X(J)*Y(J)
640   CONTINUE
      N8=0
      SM(IDF)=SUMM
      IF (ADL) 650,670,670
650   IF (INDIC.EQ.-1) GO TO 670
      N6 = 1
      NI=N4-IDIF
      IF (NI.LT.1) GO TO 670
      ARR=ABS(ROOT(N4))
      DO 660 I=1,NI
      ER2 = 0.0
      ARX2 = ARR + ABS(ROOT(I))
      IF (ARX2.NE.0.0) ER2 = ABS(ROOT(I)-ROOT(N4))/ARX2
      IF (ER2.LT.0.005) GO TO 730
660   CONTINUE
670   N3=0
      J22 = 2*J2
      IF (NEXT.GT.1) CALL GASP(Z,J22,3,IPV2(N4-1))
680   IPOS = ITOTL + 1
      IENDS = IEND
      IEND = IPOS + 2*NT - 1
C BEG MAR 2007
      IF (IEND.LT.60000) GO TO 690
C END MAR 2007
      IENDS2 = 2*IENDS
      CALL GASP(Z,IENDS2,1,IBVC(NEXT))
      ITOTL = 0
      ISAVE1(NEXT) = IENDS
      ISAVE2(NEXT) = N4-1
      NEXT = NEXT + 1
      GO TO 680
690   CONTINUE
      DO 700 I=1,NT
      J1 = IPOS + I - 1
      J2 = IPOS + NT + I - 1
      Z(J1) = Y(I)
700   Z(J2) = X(I)
      J2 = IPOS + 2*NT - 1
708   CONTINUE
      CALL GASP(Y,NTOT,1,IVEC(NVECTL+N4))
      ITOTL = ITOTL + 2*NT
      J22 = 2*J2
      IF (NEXT.GT.1) CALL GASP(Z,J22,1,IPV2(N4))
C BEG MAR 2014
C  Get the strain energy, ENERGY:
C     IF (INDIC.EQ.4) THEN
C      IF (IBLK.EQ.1) THEN
C        CALL VEC(0,CORIG,X,Y,1,IDRW(1,1),NGBK,ILOC)
C        DO 709 I = 1,ND
C         ENERGY(N4) = ENERGY(N4) + X(I)*Y(I)
C709     CONTINUE
C      ENDIF
C     ENDIF
C END MAR 2014
      IF (INDIC.NE.2) GO TO 711
      DO 710 I=1,ND
710   GMI(N4) = GMI(N4) + X(I)*Y(I)
C
      CALL GASP(X,NTOT,1,IMPHI(NVECTL+N4))
C
711   CONTINUE
      N3=0
      IF (AROOT.GT.AX2) GO TO 210
      IF (AROOT.GE.AX1.OR.INDIC.EQ.-1) GO TO 720
      AXR2=AX1-1.5*AROOT
      GO TO 230
720   CONTINUE
      IF (INDIC.EQ.-1) GO TO 740
      IF (AROOT) 750,740,740
C     THIS IS A PREVIOUSLY COMPUTED ROOT.  REJECT IT.
730   N4  =N4-1
      NEIG=0
      GO TO 780
740   N7=N7+1
      N3=0
      MW=2
      ART=AROOT+AXB
      GO TO (460,760),MW
750   N6=1
760   IF (N7.LT.NVEC) GO TO 770
      IF (ARQ.LT.0.) GO TO 820
      IF (KB.NE.100000) GO TO 820
765   CONTINUE
      AXR2=1.0003*AROOT
      AXR=AXR2
      GO TO 260
770   CONTINUE
      NEIG=0
      CALL URVEC(ND,Y)
      CALL VEC(0,C,Y,X,IBLK,IDRW(1,IID),NGBK,ILOC)
      GO TO 350
780   AXR= TOP-ADL*0.85
      GO TO 240
790   N5=N7+1
      WRITE(IFILE4,800)N5,ER,AXR
800   FORMAT(/,' THE ITERATION FOR ROOT',I4,' HAS FAILED.',/,
     1' FINAL VALUE OF ER =',E15.8,', FINAL VALUE OF AXR=',E15.8,/)
C BEG MAR 2012
      IFAIL = 1
C END MAR 2012
      GO TO 830
810   IF (AX2.EQ.0.0) GO TO 820
      IF (NPRINT.GT.1) WRITE(IFILE4,70)
820   CONTINUE
      NVEC = N4
C BEG MAY 2012
      IF (INDIC.EQ.4) THEN
         IF (KT.LT.0) IFAIL = 1
         DO 825 I = 1,NVEC
           IF (IFLGKT(I).LT.0) ROOT(I) = -ROOT(I)
  825    CONTINUE
      ENDIF
C END MAY 2012
830   IF (NPRINT.GT.1) WRITE(IFILE4,840)
840   FORMAT(/,' LEAVING SUBROUTINE EBAND2.')
      RETURN
      END
C
C
C
C=DECK      ADD2
      SUBROUTINE ADD2(AXT,B,C,IDRW,ILOC,IID)
C     CALLED FROM EBAND2 (VIBRATION PROBLEMS). TRACE IS BUCKLE,MAIN
C
      DOUBLE PRECISION AXD,B,C
      COMMON/BLK/ IBLK,NGBK(20),NKF(20)
C BEG DEC 1990
C BEG OCT 1999
      DIMENSION B(*),C(*),IDRW(20,5),ILOC(*)
C END OCT 1999
C END DEC 1990
C     THE MATRIX B - AXT*C IS FORMED AND STORED IN IDRW(I,5),I=1,IBLK
C
      AXD = AXT
      DO 20 I=1,IBLK
      NLAST = NGBK(I)
      LENGTH = 2*ILOC(NLAST)
      CALL GASP(B,LENGTH,3,IDRW(I,1))
      CALL GASP(C,LENGTH,3,IDRW(I,IID))
      L2 = LENGTH/2
      DO 10 J=1,L2
10    B(J) = B(J) - AXD*C(J)
      IF (IBLK.GT.1) CALL GASP(B,LENGTH,1,IDRW(I,5))
20    CONTINUE
      RETURN
      END
C
C
C
C=DECK      ORTHO2
      SUBROUTINE ORTHO2(X,Y,Z,I,ND,SM)
C
C     CALLED FROM EBAND2, WHOSE TRACE IS BUCKLE, MAIN
C     PERFORMS ORTHOGONALIZATION CORRESPONDING TO THE EIGENVALUE
C     PROBLEM    A*X  - OMEGA**2*B*X  = 0
C
      DOUBLE PRECISION X,Y,Z,SM,SUM,SUM2,SF
C BEG OCT 1999
      DIMENSION Z(*),SM(50)
C END OCT 1999
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/ORTA/IFLGG,KTM,KROOTS
      COMMON/OUTP/NPRINT
C BEG OCT 1999
      DIMENSION Y(*),X(*)
C END OCT 1999
10    FORMAT (' I= ',I3,', Y*Z=',E16.7,', X*Z=',E16.7,', X*X=',E16.7)
      SUM2=0.
      SUM=0.
      DO 20 J=1,ND
      IF(IFLGG.GT.0) SUM2=SUM2+X(J)*X(J)
20    SUM = SUM +X(J)*Z(J)
      SF=SUM/SM(I)
      DO 30 J=1,ND
30    X(J)=X(J)-SF*Y(J)
      IF(IFLGG.EQ.0) RETURN
      S0=SM(I)
      S1=SUM
      S2=SUM2
      IF (NPRINT.GT.1) WRITE(IFILE4,10)I,S0,S1,S2
      RETURN
      END
C
C
C
C=DECK      STOGETLIB
C
C  THIS IS THE STOGET LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      STOCM1
      SUBROUTINE STOCM1(IFILE)
C
C    STORE LABELLED COMMON BLOCKS ON A FILE..
C
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
C END MAR 2008
      COMMON/GLOBAL/IDZ(1),IZRING(198),ISAVE(20),INOTE    
      COMMON/STRHD/NSHEAD     
      COMMON/COUNTR/NKOUNT    
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/TWORHS/ITWO(1),IDMOD2(200)
      COMMON/NLINS/NSTART(1),NFIN
C BEG MAR 2007
      COMMON/DSPACE/IDS 
C END MAR 2007
      COMMON/ENDOF/NLAST(1),NFIRST,NEDPLT    
      COMMON/IIFIFE/IIIF
      COMMON/RGFCE/RHF(198)    
      COMMON/PSTSS/IPSTS(295)  
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)     
      COMMON/LRANGE/FSTART(1),FMAX,DF  
      COMMON/DETER/DET(1),NEX    
      COMMON/TESTIT/NTEST     
      COMMON/ITERAT/IMODE     
      COMMON/TOTPTS/M3  
      COMMON/WAVES/N0(1),N,NMIN,NMAX,INCR    
      COMMON/FORCES/V(198),HF(198),FM(198)   
      COMMON/EIGENV/P(1),OMG2,RHO
      COMMON/SEGS/NSEG(1),M2,I5(295),I2,I2G   
      COMMON/IDENT/IPRW(20)   
      COMMON/HYDRO/PRAD(1),RV    
      COMMON/BLKP/IBLKP(1),NGBKP(20),NKFP(20)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)    
      COMMON/STEPS/STEP(1),STEP1(198),STEP2(198),STEP3(198) 
      COMMON/INSTAB/INDIC     
      COMMON/MAXSTP/STEPM(1),STEPMI,RHOM     
      COMMON/ERROR/ERR  
      COMMON/NFAC/NFACT(1),NDIC  
      COMMON/ITERS/ITER 
      COMMON/ALFAT/ALPHAT     
      COMMON/POSDEF/ IDIAG    
      COMMON/EIGNO/NVEC,EGV(50),AXB 
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
      COMMON/SIG/NFLAGI 
      COMMON/OUTP/ NPRT 
      COMMON/BLK/IBLK(1),NGBK(20),NFK(20)    
      COMMON/BCK/IDRW(100)   
      COMMON/SFLAG/ MONOQ     
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)   
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/IDZREF/IZREF(295) 
C BEG SEP 2005
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/IDSTFP/ISTFPR(295)
      COMMON/IDMSKN/INSKIN(590)
      COMMON/BUCIDX/IDBUCK(100)
C END SEP 2005
C BEG DEC 2005
      COMMON/IPHIHI/IPHIOL(1180)
C END DEC 2005
      COMMON/ALLRNG/NTOT(1),IPRE 
      COMMON/TEMTUR/TEMP(1),DTEMP(1)
      COMMON/SIGNALL/ISIG
      COMMON/ORTA/IFLGG(1),KTM,KROOTS  
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA     
      COMMON/XID/IDX    
      COMMON/BUCKN/ N0B(1),NMINB,NMAXB,INCRB 
C BEG JUN 2009
      COMMON/LOCATN/ILOCP(1),ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/NCONDS/NCOND     
      COMMON/IHIGHX/ITOOHI     
      COMMON/LSTEPS/ISTEP    
C BEG JULY 1989 
      COMMON/PRERT/PREROT(1),SIGNLL,IPREBK   
C END JULY 1989
      COMMON/NOHARM/NHARM     
      COMMON/IFRHX/IFB,RHFIX(198),
     1             K(1),MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX   
      COMMON/PLTSIG/IPLOT(2),KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      COMMON/VCTRSB/NVECRL(50)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RESTRT/IREST
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/STRSEG/ISTRSS(295)
      COMMON/NVVIB/NVIB
      COMMON/NLAMIN/LAMINA(295)
C BEG SEP 1997
      COMMON/FLUTNK/GAMMAF,AXLONG,RBIG,ZBEGIN
      COMMON/ACCELR/GRAVTY,GLATRL,GAXIAL
      COMMON/NUMTNK/IFLSEG(295)
C END SEP 1997
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C
      WRITE(IFILE)(IDZ(I),I=1,220)
      WRITE(IFILE)NSHEAD
      WRITE(IFILE)NKOUNT
C BEG MAR 2007
      WRITE(IFILE)(NLPOS(I),I=1,4425)
      WRITE(IFILE)(PALL(I),I=1,40000)
C END MAR 2007
      WRITE(IFILE) IOMGAB
      WRITE(IFILE)(VFIX(I),I=1,792)
      WRITE(IFILE)(TNRFIX(I),I=1,594)
      WRITE(IFILE)(ITWO(I),I=1,201)
      WRITE(IFILE)(NSTART(I),I=1,2)
      WRITE(IFILE)IDS
      WRITE(IFILE)(NLAST(I),I=1,3)
      WRITE(IFILE)IIIF
      WRITE(IFILE)(RHF(I),I=1,198)
      WRITE(IFILE)(IPSTS(I),I=1,295)
      WRITE(IFILE)(IMOAD(I),I=1,690)
      WRITE(IFILE)(FSTART(I),I=1,3)
      WRITE(IFILE)(DET(I),I=1,2)
      WRITE(IFILE)NTEST
      WRITE(IFILE)IMODE
      WRITE(IFILE)M3
      WRITE(IFILE)(N0(I),I = 1,5)
      WRITE(IFILE)(V(I),I=1,594)
      WRITE(IFILE)(P(I),I=1,3)
      WRITE(IFILE)(NSEG(I),I=1,299)
      WRITE(IFILE)(IPRW(I),I=1,20)
      WRITE(IFILE)(PRAD(I),I=1,2)
      WRITE(IFILE)(IBLKP(I),I=1,41)
      WRITE(IFILE)(TNR(I),I=1,594)
      WRITE(IFILE)(STEP(I),I=1,595)
      WRITE(IFILE)INDIC
      WRITE(IFILE)(STEPM(I),I=1,3)
      WRITE(IFILE)ERR
      WRITE(IFILE)(NFACT(I),I=1,2)
      WRITE(IFILE)ITER
      WRITE(IFILE)ALPHAT
      WRITE(IFILE)IDIAG
      WRITE(IFILE)NVEC
      WRITE(IFILE)(EGV(I),I=1,51)
      WRITE(IFILE)(IPV1(I),I=1,100)
      WRITE(IFILE)(IDMODE(I),I=1,501)
      WRITE(IFILE)(EIGENW(I),I=1,500)
      WRITE(IFILE)NFLAGI
      WRITE(IFILE)NPRT
      WRITE(IFILE)(IBLK(I),I=1,41)
      WRITE(IFILE)(IDRW(I),I=1,100)
      WRITE(IFILE)MONOQ
      WRITE(IFILE)(ISHL(I),I=1,1475)
      WRITE(IFILE)(NSTATN(I),I=1,6195)
      WRITE(IFILE)(IZREF(I),I=1,295)
C BEG SEP 2005
      WRITE(IFILE)(ICSKIN(I),I=1,295)
      WRITE(IFILE)(ISTFPR(I),I=1,295)
      WRITE(IFILE)(INSKIN(I),I=1,590)
      WRITE(IFILE)(IDBUCK(I),I=1,100)
C END SEP 2005
C BEG DEC 2005
      WRITE(IFILE)(IPHIOL(I),I=1,1180)
C END DEC 2005
      WRITE(IFILE)(NTOT(I),I=1,2)
      WRITE(IFILE)(TEMP(I),I=1,2)
      WRITE(IFILE)ISIG
      WRITE(IFILE)(IFLGG(I),I=1,3)
      WRITE(IFILE)(INTVAL(I),I=1,299)
      WRITE(IFILE)IDX
      WRITE(IFILE)(N0B(I),I=1,4)
C BEG MAR 2007
      WRITE(IFILE)(ILOCP(I),I=1,600)
C END MAR 2007
      WRITE(IFILE)NCOND
      WRITE(IFILE)ITOOHI
      WRITE(IFILE)ISTEP
      WRITE(IFILE)(PREROT(I),I=1,2)
      WRITE(IFILE)IPREBK
      WRITE(IFILE)NHARM
      WRITE(IFILE)IFB
      WRITE(IFILE)(RHFIX(I),I=1,198)
      WRITE(IFILE)(K(I),I=1,7)
      WRITE(IFILE)(IPLOT(I),I=1,43)
      WRITE(IFILE)(RN(I),I=1,40)
      WRITE(IFILE) (NVECRL(I),I=1,50)
      WRITE(IFILE) OMEGA,DOMEGA
      WRITE(IFILE) IREST
      WRITE(IFILE) (IOYES(I),I=1,345)
      WRITE(IFILE) (ISTRSS(I),I=1,295)
      WRITE(IFILE) NVIB
      WRITE(IFILE) (LAMINA(I),I=1,295)
C BEG SEP 1997
      WRITE(IFILE) GAMMAF,AXLONG,RBIG,ZBEGIN,GRAVTY,GLATRL,GAXIAL
      WRITE(IFILE) (IFLSEG(I),I=1,295)
C END SEP 1997
C BEG MAR 2008
      WRITE(IFILE) (SPRAXL(I),I=1,12276)
      WRITE(IFILE) (SPREC1(I),I=1,6534)
      WRITE(IFILE) (NSPRNG(I),I=1,792)
      WRITE(IFILE) (NGROUN(I),I=1,198)
C END MAR 2008
C BEG APR 2009
      WRITE(IFILE) IPRISM,AXIALL
C END APR 2009
C
      RETURN
      END
C
C
C
C=DECK      STOCM2
      SUBROUTINE STOCM2(IFILE)
C
C     STORE LABELLED COMMON BLOCKS CONTAINED IN MAIN1...
C
      COMMON/STRATG/ISTRAT(1),IFACTR   
      COMMON/CMAXS/CMAX 
      COMMON/INERT/ FIS(198),FIN(198),FISN(198)    
      COMMON/CLST/CLAST 
      COMMON/SPACE/HC(295)     
C BEG JUN 2009 
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
      COMMON/RING2/GAM(198),GJ(198),
     1             YC(198),XC(198),E1(198),E2(198),PHI(200)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1             IY(198),IX(198),IXY(198),IP(198)
      COMMON/APEX/INDX  
      REAL IX,IY,IXY,IP 
      COMMON/RMASS/RM(198)     
      COMMON/HED/TITLE(18)    
      COMMON/WALLTP/ NWALL(295)
      COMMON/SEGPLT/NUMSG1(1),NUMSG2   
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/KCHNG/NNWALL(295),CCH(295)     
C BEG MAR 2007
C BEG JUN 2009
      COMMON/JUNCT/IFIX(3588),IFX(3588),ITYPE(598)     
      COMMON/JUNCTB/IFIXB(3588),IFXB(3588),ITYPEB(598) 
C BEG JUN 2009
C END MAR 2007
      COMMON/GMASS/GM(500)     
C BEG MAR 2014
      COMMON/ENERGX/ENERGY(50),ENERG(500)
C END MAR 2014
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)    
      COMMON/WALPRP/EA(295),EB(295),GAB(295),UAB(295),
     1              ALPH1(295),ALPH2(295)
      COMMON/MISCEL/ICOND1(1),ICOND2,IK,NSUB,KLAP,I5TOT,IC,III,IV    
      COMMON/FICTP/IFICT
      COMMON/XTRSS/SIG1I(1),SIG1O,SIG2I,SIG2O,TAUI,TAUO,SIGEI,SIGEO  
      COMMON/SHEARF/SHEAR(198) 
      COMMON/LSEQ/ ALODE(200)  
      COMMON/BKSIZE/IMAXP(1),IMAXB,KMAXP(20),KMAXB(20)   
      COMMON/SLENGT/ADR 
      COMMON/FOSAVE/VSAVE(198),HSAVE(198),FMSAVE(198)    
      COMMON/ALOFIT/INDSIG(14),DSTOT(2),IPOS(6)
      COMMON  /GASPDT/ FIRST,TABSIZ,TABLE(1500)    
      COMMON/GASPD2/NINDEX
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/AMPFC2/IMPHI(200)
      COMMON/IDHIGH/IDMAX
      COMMON/FNDAT/FSTIF(295)
      COMMON/RESPON/GRAVTY(81)
      COMMON/RESPO2/ANALY(41)
C  FOLLOWING 17 AUG 85 (DYNAMIC REACTION)
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,MAS,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,MAS
       COMMON/IZDTR/IZZ
C BEG JUN 2009
      COMMON/LAYER/MATL(90),LTYPE(5500),T(90),ANGLE(90),NLAYER(295)
C END JUN 2009
      COMMON/MATER1/EE1(20),EE2(20),G(20),FNU(20),DENS(20)
      COMMON/MATERT/ALPHA1(20),ALPHA2(20),CURETP(20),EALLOW(5,20)
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
C  END 17 AUG 85
C BEG APR 1992
      COMMON/ILVARS/ILVAR(4130)
C END APR 1992
      LOGICAL FIRST
      INTEGER TABSIZ,TABLE
C
      WRITE(IFILE)(ISTRAT(I),I=1,2)
      WRITE(IFILE)CMAX
      WRITE(IFILE)(FIS(I),I=1,594)
      WRITE(IFILE)CLAST
      WRITE(IFILE)(HC(I),I=1,295)
C BEG MAR 2007
C BEG JUN 2009
      WRITE(IFILE)(D1(I),I=1,1196)
C END JUN 2009
C END MAR 2007
      WRITE(IFILE)(GAM(I),I=1,1388)
      WRITE(IFILE)(RC(I),I=1,1386)
      WRITE(IFILE)INDX
      WRITE(IFILE)(RM(I),I=1,198)
      WRITE(IFILE)(TITLE(I),I=1,12)
      WRITE(IFILE)(NWALL(I),I=1,295)
      WRITE(IFILE)(NUMSG1(I),I=1,2)
      WRITE(IFILE)(ITHETA(I),I=1,50)
      WRITE(IFILE)( THETA(I),I=1,52)
      WRITE(IFILE)(NNWALL(I),I=1,295)
      WRITE(IFILE)(   CCH(I),I=1,295)
C BEG MAR 2007
C BEG JUN 2009
      WRITE(IFILE)(IFIX(I),I=1,7774)
      WRITE(IFILE)(IFIXB(I),I=1,7774)
C END JUN 2009
C END MAR 2007
      WRITE(IFILE)(GM(I),I=1,500)
C BEG MAR 2014
C     WRITE(IFILE)(ENERG(I),I=1,500)
C END MAR 2014
      WRITE(IFILE)(ISTOP0(I),I=1,12)
      WRITE(IFILE)(EA(I),I=1,1770)
      WRITE(IFILE)(ICOND1(I),I=1,9)
      WRITE(IFILE)IFICT
      WRITE(IFILE)(SIG1I(I),I=1,8)
      WRITE(IFILE)(SHEAR(I),I=1,198)
      WRITE(IFILE)(ALODE(I),I=1,295)
      WRITE(IFILE)(IMAXP(I),I=1,42)
      WRITE(IFILE)ADR
      WRITE(IFILE)(VSAVE(I),I=1,594)
      WRITE(IFILE)(INDSIG(I),I=1,14)
      WRITE(IFILE)(DSTOT(I),I=1,2)
      WRITE(IFILE)(IPOS(I),I=1,6)
      WRITE(IFILE) TABSIZ
      WRITE(IFILE)(TABLE(I),I=1,1500)
      WRITE(IFILE)FIRST
      WRITE(IFILE)NINDEX
      WRITE(IFILE)OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD
      WRITE(IFILE)(GAMP(I),I=1,200)
      WRITE(IFILE)(IMPHI(I),I=1,200)
      WRITE(IFILE)IDMAX
      WRITE(IFILE) (FSTIF(I),I=1,295)
      WRITE(IFILE) (GRAVTY(I),I=1,81)
      WRITE(IFILE) (ANALY(I),I=1,41)
C 17 AUG 85 STATEMENTS (DYN. REACTION)...
      WRITE(IFILE) (FX(I), I=1,16)
      WRITE(IFILE) (IDYN(I),I=1,2)
      WRITE(IFILE) IZZ
C BEG APR 1992
      WRITE(IFILE) (MATL(I),I=1,6065)
C END APR 1992
      WRITE(IFILE) (EE1(I),I=1,100)
      WRITE(IFILE) (ALPHA1(I),I=1,160)
      WRITE(IFILE) (NODES(I),I=1,591)
C END 17 AUG 1985
C BEG APR 1992
      WRITE(IFILE) (ILVAR(I),I=1,4130)
C END APR 1992
C
      RETURN
      END
C
C
C
C=DECK      GETCM1
      SUBROUTINE GETCM1(IFILE)
C
C    READ LABELLED COMMON BLOCKS FROM A FILE..
C
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
C END MAR 2008
      COMMON/GLOBAL/IDZ(1),IZRING(198),ISAVE(20),INOTE    
      COMMON/STRHD/NSHEAD     
      COMMON/COUNTR/NKOUNT    
      COMMON/FORFIX/IOMGAB,VFIX(198),SHFIX(198),HFIX(198),FMFIX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
      COMMON/TWORHS/ITWO(1),IDMOD2(200)
      COMMON/NLINS/NSTART(1),NFIN
C BEG MAR 2007
      COMMON/DSPACE/IDS
C END MAR 2007
      COMMON/ENDOF/NLAST(1),NFIRST,NEDPLT    
      COMMON/IIFIFE/IIIF
      COMMON/RGFCE/RHF(198)    
      COMMON/PSTSS/IPSTS(295)  
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)     
      COMMON/LRANGE/FSTART(1),FMAX,DF  
      COMMON/DETER/DET(1),NEX    
      COMMON/TESTIT/NTEST     
      COMMON/ITERAT/IMODE     
      COMMON/TOTPTS/M3  
      COMMON/WAVES/N0(1),N,NMIN,NMAX,INCR    
      COMMON/FORCES/V(198),HF(198),FM(198)   
      COMMON/EIGENV/P(1),OMG2,RHO
      COMMON/SEGS/NSEG(1),M2,I5(295),I2,I2G   
      COMMON/IDENT/IPRW(20)   
      COMMON/HYDRO/PRAD(1),RV    
      COMMON/BLKP/IBLKP(1),NGBKP(20),NKFP(20)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)    
      COMMON/STEPS/STEP(1),STEP1(198),STEP2(198),STEP3(198) 
      COMMON/INSTAB/INDIC     
      COMMON/MAXSTP/STEPM(1),STEPMI,RHOM     
      COMMON/ERROR/ERR  
      COMMON/NFAC/NFACT(1),NDIC  
      COMMON/ITERS/ITER 
      COMMON/ALFAT/ALPHAT     
      COMMON/POSDEF/ IDIAG    
      COMMON/EIGNO/NVEC,EGV(50),AXB 
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
      COMMON/SIG/NFLAGI 
      COMMON/OUTP/ NPRT 
      COMMON/BLK/IBLK(1),NGBK(20),NFK(20)    
      COMMON/BCK/IDRW(100)   
      COMMON/SFLAG/ MONOQ     
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)   
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/IDZREF/IZREF(295) 
C BEG SEP 2005
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/IDSTFP/ISTFPR(295)
      COMMON/IDMSKN/INSKIN(590)
      COMMON/BUCIDX/IDBUCK(100)
C END SEP 2005
C BEG DEC 2005
      COMMON/IPHIHI/IPHIOL(1180)
C END DEC 2005
      COMMON/ALLRNG/NTOT(1),IPRE 
      COMMON/TEMTUR/TEMP(1),DTEMP(1)
      COMMON/SIGNALL/ISIG
      COMMON/ORTA/IFLGG(1),KTM,KROOTS  
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA     
      COMMON/XID/IDX    
      COMMON/BUCKN/ N0B(1),NMINB,NMAXB,INCRB 
C BEG JUN 2009
      COMMON/LOCATN/ILOCP(1),ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/NCONDS/NCOND     
      COMMON/IHIGHX/ITOOHI     
      COMMON/LSTEPS/ISTEP     
C BEG JULY 1989
      COMMON/PRERT/PREROT(1),SIGNLL,IPREBK   
C END JULY 1989
      COMMON/NOHARM/NHARM     
      COMMON/IFRHX/IFB,RHFIX(198),
     1             K(1),MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX   
      COMMON/PLTSIG/IPLOT(2),KPLOT(20),LPLOT(20),MPLOT,RN(20),ZN(20) 
      COMMON/VCTRSB/NVECRL(50)
      COMMON/ROTATN/OMEGA,DOMEGA
      COMMON/RESTRT/IREST
      COMMON/IOCHOZ/IOYES(50),IOSEG(295)
      COMMON/STRSEG/ISTRSS(295)
      COMMON/NVVIB/NVIB
      COMMON/NLAMIN/LAMINA(295)
C BEG SEP 1997
      COMMON/FLUTNK/GAMMAF,AXLONG,RBIG,ZBEGIN
      COMMON/ACCELR/GRAVTY,GLATRL,GAXIAL
      COMMON/NUMTNK/IFLSEG(295)
C END SEP 1997
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C
      READ(IFILE)(IDZ(I),I=1,220)
      READ(IFILE)NSHEAD
      READ(IFILE)NKOUNT
C BEG MAR 2007
      READ(IFILE)(NLPOS(I),I=1,4425)
      READ(IFILE)(PALL(I),I=1,40000)
C END MAR 2007
      READ(IFILE) IOMGAB
      READ(IFILE)(VFIX(I),I=1,792)
      READ(IFILE)(TNRFIX(I),I=1,594)
      READ(IFILE)(ITWO(I),I=1,201)
      READ(IFILE)(NSTART(I),I=1,2)
      READ(IFILE)IDS
      READ(IFILE)(NLAST(I),I=1,3)
      READ(IFILE)IIIF
      READ(IFILE)(RHF(I),I=1,198)
      READ(IFILE)(IPSTS(I),I=1,295)
      READ(IFILE)(IMOAD(I),I=1,690)
      READ(IFILE)(FSTART(I),I=1,3)
      READ(IFILE)(DET(I),I=1,2)
      READ(IFILE)NTEST
      READ(IFILE)IMODE
      READ(IFILE)M3
      READ(IFILE)(N0(I),I = 1,5)
      READ(IFILE)(V(I),I=1,594)
      READ(IFILE)(P(I),I=1,3)
      READ(IFILE)(NSEG(I),I=1,299)
      READ(IFILE)(IPRW(I),I=1,20)
      READ(IFILE)(PRAD(I),I=1,2)
      READ(IFILE)(IBLKP(I),I=1,41)
      READ(IFILE)(TNR(I),I=1,594)
      READ(IFILE)(STEP(I),I=1,595)
      READ(IFILE)INDIC
      READ(IFILE)(STEPM(I),I=1,3)
      READ(IFILE)ERR
      READ(IFILE)(NFACT(I),I=1,2)
      READ(IFILE)ITER
      READ(IFILE)ALPHAT
      READ(IFILE)IDIAG
      READ(IFILE)NVEC
      READ(IFILE)(EGV(I),I=1,51)
      READ(IFILE)(IPV1(I),I=1,100)
      READ(IFILE)(IDMODE(I),I=1,501)
      READ(IFILE)(EIGENW(I),I=1,500)
      READ(IFILE)NFLAGI
      READ(IFILE)NPRT
      READ(IFILE)(IBLK(I),I=1,41)
      READ(IFILE)(IDRW(I),I=1,100)
      READ(IFILE)MONOQ
      READ(IFILE)(ISHL(I),I=1,1475)
      READ(IFILE)(NSTATN(I),I=1,6195)
      READ(IFILE)(IZREF(I),I=1,295)
C BEG SEP 2005
      READ(IFILE)(ICSKIN(I),I=1,295)
      READ(IFILE)(ISTFPR(I),I=1,295)
      READ(IFILE)(INSKIN(I),I=1,590)
      READ(IFILE)(IDBUCK(I),I=1,100)
C END SEP 2005
C BEG DEC 2005
      READ(IFILE)(IPHIOL(I),I=1,1180)
C END DEC 2005
      READ(IFILE)(NTOT(I),I=1,2)
      READ(IFILE)(TEMP(I),I=1,2)
      READ(IFILE)ISIG
      READ(IFILE)(IFLGG(I),I=1,3)
      READ(IFILE)(INTVAL(I),I=1,299)
      READ(IFILE)IDX
      READ(IFILE)(N0B(I),I=1,4)
C BEG MAR 2007
      READ(IFILE)(ILOCP(I),I=1,600)
C END MAR 2007
      READ(IFILE)NCOND
      READ(IFILE)ITOOHI
      READ(IFILE)ISTEP
      READ(IFILE)(PREROT(I),I=1,2)
      READ(IFILE)IPREBK
      READ(IFILE)NHARM
      READ(IFILE)IFB
      READ(IFILE)(RHFIX(I),I=1,198)
      READ(IFILE)(K(I),I=1,7)
      READ(IFILE)(IPLOT(I),I=1,43)
      READ(IFILE)(RN(I),I=1,40)
      READ(IFILE) (NVECRL(I),I=1,50)
      READ(IFILE) OMEGA,DOMEGA
      READ(IFILE) IREST
      READ(IFILE) (IOYES(I),I=1,345)
      READ(IFILE) (ISTRSS(I),I=1,295)
      READ(IFILE) NVIB
      READ(IFILE) (LAMINA(I),I=1,295)
C BEG SEP 1997
      READ(IFILE) GAMMAF,AXLONG,RBIG,ZBEGIN,GRAVTY,GLATRL,GAXIAL
      READ(IFILE) (IFLSEG(I),I=1,295)
C END SEP 1997
C BEG MAR 2008
      READ(IFILE) (SPRAXL(I),I=1,12276)
      READ(IFILE) (SPREC1(I),I=1,6534)
      READ(IFILE) (NSPRNG(I),I=1,792)
      READ(IFILE) (NGROUN(I),I=1,198)
C END MAR 2008
C BEG APR 2009
      READ(IFILE) IPRISM,AXIALL
C END APR 2009
C
      RETURN
      END
C
C
C
C=DECK      GETCM2
      SUBROUTINE GETCM2(IFILE)
C
C     READ LABELLED COMMON BLOCKS CONTAINED IN MAIN1...
C
      COMMON/STRATG/ISTRAT(1),IFACTR   
      COMMON/CMAXS/CMAX 
      COMMON/INERT/ FIS(198),FIN(198),FISN(198)    
      COMMON/CLST/CLAST 
      COMMON/SPACE/HC(295)     
C BEG JUN 2009
      COMMON/RING3/D1(598),D2(598)
C END JUN 2009
      COMMON/RING2/GAM(198),GJ(198),
     1             YC(198),XC(198),E1(198),E2(198),PHI(200)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1             IY(198),IX(198),IXY(198),IP(198)
      COMMON/APEX/INDX  
      REAL IX,IY,IXY,IP 
      COMMON/RMASS/RM(198)     
      COMMON/HED/TITLE(18)    
      COMMON/WALLTP/ NWALL(295)
      COMMON/SEGPLT/NUMSG1(1),NUMSG2   
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/KCHNG/NNWALL(295),CCH(295)     
C BEG MAR 2007
C BEG JUN 2009
      COMMON/JUNCT/IFIX(3588),IFX(3588),ITYPE(598)     
      COMMON/JUNCTB/IFIXB(3588),IFXB(3588),ITYPEB(598) 
C END JUN 2009
C END MAR 2007
      COMMON/GMASS/GM(500)     
C BEG MAR 2014
      COMMON/ENERGX/ENERGY(50),ENERG(500)
C END MAR 2014
      COMMON/RBODY/ISTOP0(6),ISTOP1(6)    
      COMMON/WALPRP/EA(295),EB(295),GAB(295),UAB(295),
     1              ALPH1(295),ALPH2(295)
      COMMON/MISCEL/ICOND1(1),ICOND2,IK,NSUB,KLAP,I5TOT,IC,III,IV    
      COMMON/FICTP/IFICT
      COMMON/XTRSS/SIG1I(1),SIG1O,SIG2I,SIG2O,TAUI,TAUO,SIGEI,SIGEO  
      COMMON/SHEARF/SHEAR(198) 
      COMMON/LSEQ/ ALODE(200)  
      COMMON/BKSIZE/IMAXP(1),IMAXB,KMAXP(20),KMAXB(20)   
      COMMON/SLENGT/ADR 
      COMMON/FOSAVE/VSAVE(198),HSAVE(198),FMSAVE(198)    
      COMMON/ALOFIT/INDSIG(14),DSTOT(2),IPOS(6)
      COMMON  /GASPDT/ FIRST,TABSIZ,TABLE(1500)    
      COMMON/GASPD2/NINDEX
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/AMPFC2/IMPHI(200)
      COMMON/IDHIGH/IDMAX
      COMMON/FNDAT/FSTIF(295)
      COMMON/RESPON/GRAVTY(81)
      COMMON/RESPO2/ANALY(41)
C  FOLLOWING 17 AUG 85 (DYNAMIC REACTION)
       COMMON/DYNAM/FX(2),FY(2),FZ(2),MX(2),MY(2),MZ(2),
     1              ICM,IZ,MAS,ZCM,IDYN(2)
       REAL MX,MY,MZ,ICM,IZ,MAS
       COMMON/IZDTR/IZZ
C BEG JUN 2009
      COMMON/LAYER/MATL(90),LTYPE(5500),T(90),ANGLE(90),NLAYER(295)
C END JUN 2009
      COMMON/MATER1/EE1(20),EE2(20),G(20),FNU(20),DENS(20)
      COMMON/MATERT/ALPHA1(20),ALPHA2(20),CURETP(20),EALLOW(5,20)
      COMMON/COMNOD/NODES(295),NODALL(295),NODTOT
C  END 17 AUG 85
C BEG APR 1992
      COMMON/ILVARS/ILVAR(4130)
C END APR 1992
      LOGICAL FIRST
      INTEGER TABSIZ,TABLE
C
      READ(IFILE)(ISTRAT(I),I=1,2)
      READ(IFILE)CMAX
      READ(IFILE)(FIS(I),I=1,594)
      READ(IFILE)CLAST
      READ(IFILE)(HC(I),I=1,295)
C BEG MAR 2007
C BEG JUN 2009
      READ(IFILE)(D1(I),I=1,1196)
C END JUN 2009
C END MAR 2007
      READ(IFILE)(GAM(I),I=1,1388)
      READ(IFILE)(RC(I),I=1,1386)
      READ(IFILE)INDX
      READ(IFILE)(RM(I),I=1,198)
      READ(IFILE)(TITLE(I),I=1,12)
      READ(IFILE)(NWALL(I),I=1,295)
      READ(IFILE)(NUMSG1(I),I=1,2)
      READ(IFILE)(ITHETA(I),I=1,50)
      READ(IFILE)( THETA(I),I=1,52)
      READ(IFILE)(NNWALL(I),I=1,295)
      READ(IFILE)(   CCH(I),I=1,295)
C BEG MAR 2007
C BEG JUN 2009
      READ(IFILE)(IFIX(I),I=1,7774)
      READ(IFILE)(IFIXB(I),I=1,7774)
C END JUN 2009
C END MAR 2007
      READ(IFILE)(GM(I),I=1,500)
C BEG MAR 2014
C     READ(IFILE)(ENERG(I),I=1,500)
C END MAR 2014
      READ(IFILE)(ISTOP0(I),I=1,12)
      READ(IFILE)(EA(I),I=1,1770)
      READ(IFILE)(ICOND1(I),I=1,9)
      READ(IFILE)IFICT
      READ(IFILE)(SIG1I(I),I=1,8)
      READ(IFILE)(SHEAR(I),I=1,198)
      READ(IFILE)(ALODE(I),I=1,295)
      READ(IFILE)(IMAXP(I),I=1,42)
      READ(IFILE)ADR
      READ(IFILE)(VSAVE(I),I=1,594)
      READ(IFILE)(INDSIG(I),I=1,14)
      READ(IFILE)(DSTOT(I),I=1,2)
      READ(IFILE)(IPOS(I),I=1,6)
      READ(IFILE) TABSIZ
      READ(IFILE)(TABLE(I),I=1,1500)
      READ(IFILE)FIRST
      READ(IFILE)NINDEX
      READ(IFILE)OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD
      READ(IFILE)(GAMP(I),I=1,200)
      READ(IFILE)(IMPHI(I),I=1,200)
      READ(IFILE) IDMAX
C
      READ(IFILE) (FSTIF(I), I=1,295)
      READ(IFILE) (GRAVTY(I),I=1,81)
      READ(IFILE) (ANALY(I),I=1,41)
C 17 AUG 85 STATEMENTS (DYN. REACTION)...
      READ(IFILE) (FX(I), I=1,16)
      READ(IFILE) (IDYN(I),I=1,2)
      READ(IFILE) IZZ
C BEG APR 1992
      READ(IFILE) (MATL(I),I=1,6065)
C END APR 1992
      READ(IFILE) (EE1(I),I=1,100)
      READ(IFILE) (ALPHA1(I),I=1,160)
      READ(IFILE) (NODES(I),I=1,591)
C END 17 AUG 1985
C BEG APR 1992
      READ(IFILE) (ILVAR(I),I=1,4130)
C END APR 1992
      RETURN
      END
C
C
C
C=DECK      MODELIB
C
C
C  THIS IS THE MODE LIBRARY  (SOURCE FILE)
C
C
C
C=DECK      MODE1
      SUBROUTINE MODE1(ILOOP,BBB,BMODE,TMODE,SMODE)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/TOTPTS/M3
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/EIGNO/NVEC,EGV(50),AXB
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/RGFCE/RHF(198)
      COMMON/RHARM/RVAR(198),RFIX(198)
      COMMON/INSTAB/INDIC
      COMMON/NOHARM/NHARM
      COMMON/RESTRT/IREST
C BEG MAR 2007
      DIMENSION SMODE(*),TMODE(*),BMODE(10000,9)
C END MAR 2007
      DIMENSION BBB(*)
      IF (IREST.NE.2) MNUMB = NHARM
C     WRITE(IFILE4,*)' IN MODE1...INDIC,MNUMB,NVEC=',INDIC,MNUMB,NVEC
      IF (INDIC.EQ.3) GO TO 10
      MNUMB = NVEC
10    CONTINUE
      CALL MODE(M3,MNUMB,I2,SMODE,TMODE,BMODE,RHF,RHFIX,
     1 RVAR,RFIX,ILOOP,BBB)
      RETURN
      END
C
C
C
C=DECK      MODE
      SUBROUTINE MODE(M3,NVEC,IALL,SMODE,TMODE,BMODE,RHF,RHFIX,
     1 RVAR,RFIX,ILOOP,BBB)
C
C     CALLED FROM MAIN.
C     MODE SHAPE OR DISPLACEMENTS AND STRESSES CALCULATED FOR BUCKLING
C     AND VIBRATION OR LINEAR STRESS ANALYSIS.. INPUT EIGENVECTOR IS F,
C     OUTPUT IS U,V,W, AND STRESS RESULTANTS. THESE ARE NORMALIZED IN
C     BUCKLING AND VIBRATION PROBLEMS (EIGENVECTORS) AND DIMENSIONAL
C     IN LINEAR NONSYMMETRIC STRESS PROBLEMS.
C     DISPLACEMENTS AND STRESS RESULTANTS OBTAINED FOR NVEC EIGENVALUES
C
      DOUBLE PRECISION F
      DOUBLE PRECISION XX
C BEG MAR 2008
      COMMON/RING8/UVW(10,30,3)
C END MAR 2008
C BEG MAR 2007
      DIMENSION XX(30000),FF(62500),XSINGL(30000)
      DIMENSION F(30000),BMODE(IALL,9),BBB(*),DS(10000),IW(10000)
      DIMENSION SMODE(*),TMODE(*),X(10000),IDIST(10000)
C END MAR 2007
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/RESTRT/IREST
      COMMON/AMPFC2/IMPHI(200)
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/ALLRNG/ NTOT,IPRE
      COMMON/NLINS/NSTART,NFIN
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/DSPACE/IDS
      COMMON/STRHD/NSHEAD
      COMMON/OUTP/NPRT
      COMMON/INSTAB/INDIC
      COMMON/NOHARM/NHARM
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/NCONDS/NCOND
      COMMON/WAVES/N0,N,NMIN,NMAX,INCR
      COMMON/IDEIG/IDMODE(500),NVECTL,EIGENW(500)
      COMMON/TWORHS/ITWO,IDMOD2(200)
C BEG MAR 2007
      COMMON/LOADHM/NLPOS(295),LAB(295),IDAB(295),
     1              ILPOS(12,295),PALL(40000)
C END MAR 2007
C BEG MAR 2008
C     COMMON/ISTUFB/KK,I5TOT,IC,NUNK,KLAP,ICALL
      COMMON/ISTUFB/KK,I5TOT,IC,NUNK,KLAP,ICALL,IGROUN
C END MAR 2008
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/GMASS/GM(500)
C BEG MAR 2014
      COMMON/ENERGX/ENERGY(50),ENERG(500)
C END MAR 2014
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      DIMENSION RHF(*),RHFIX(*),RVAR(*),RFIX(*)
      COMMON/RESPO2/ANALY,WSPEC(40)
      COMMON/NVVIB/NVIB
      CHARACTER*20 WORD1(3)
      CHARACTER*36 WORD2(3)
      DATA WORD1(1),WORD1(2),WORD1(3)/
     1 'HARMONIC EXCITATION ',
     1 'RANDOM EXCITATION   ',
     1 'SHOCK               '/
C
      DATA WORD2(1),WORD2(2),WORD2(3)/
     1 'N*g/(OMEGA**2 * BETA)               ',
     1 'SQRT[OMEGA*SPECD/(2*BETA)]g/OMEGA**2',
     1 '2*N*g/OMEGA**2                      '/
C
10    FORMAT(1P9E13.4)                                      
      II = I2 + 2*NSEG
      M32 = M3*2
C     RECOVER GLOBAL EQUATION NO.S CORRESPONDING TO W.
      CALL GASP(IW,II,3,IIWB)
C     RECOVER ELEMENTAL ARC LENGTHS DS.
      CALL GASP(DS,I2,3,IDS)
      IF (INOTE.EQ.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IF (INDIC.NE.3) GO TO 82
C     FIND ARRAY X CORRESPONDING TO MERIDIONAL DISTRIBUTION. STRESSES
C     OR STRESS RESULTANTS ARE PRINTED OUT FOR THESE MERIDIONAL STATIONS
20    CALL IFIND(IDIST,X)
40    CONTINUE
      K = NTHETA*NCIRC*9
C BEG MAR 2007
      IF (K.LE.90000) GO TO 50
      NTHETA = 2*NTHETA/3
      GO TO 40
   50 CONTINUE
      IF (NDIST.EQ.0) GO TO 65
      DO 60 I = 1,90000
C END MAR 2007
60    SMODE(I) = 0.
   65 CONTINUE
      IF (K.EQ.0) GO TO 75
      DO 70 I=1,K
70    TMODE(I) = 0.
C BEG MAR 2008
      CALL MOVER(0.,0,UVW,1,900)
C END MAR 2008
   75 CONTINUE
C     BEGIN LOOP OVER NO. OF EIGENVALUES FOR EACH HARMONIC N IN
C     STABILITY OR VIBRATION ANALYSIS.
C     BEGIN LOOP OVER NUMBER OF HARMONICS IN NONSYMMETRIC STRESS ANALY
C     SIS
   80 CONTINUE
      IF (IREST.NE.2) GO TO 82
      IANALY = ANALY
      WRITE(IFILE4,81) WORD1(IANALY), WORD2(IANALY)
   81 FORMAT(/,' DYNAMIC RESPONSE ANALYSIS...',/,
     1'     N = LOAD FACTOR (NUMBER OF GRAVITIES)',/,
     1'     g = ACCELERATION OF GRAVITY',/,
     1' OMEGA = NATURAL FREQUENCY IN RADIANS/SEC',/,
     1'  BETA = DAMPING COEFFICIENT',/,
     1' PARTICIPATION FACTOR:',/,
     1'   P/2 = integral(mass*mode*(base motion)/[2*(generalized mass)]'
     1,/,
     1/,' RESPONSE TO  ',A20,/,
     1 ' FORMULA FOR MULTIPLIER,m(i) =  ',A36)
C23456789012345678901234567890123456789012345678901234567890123456789012
      WRITE(IFILE4,76)
   76 FORMAT(/,'   FREQUENCY    PARTICIPATION    LOAD FACTOR',
     1'     DAMPING     SPECTRAL    MULTIPLIER     AMPLITUDE',/,
     1'    (HERTZ)      FACTOR, P/2         (N)       COEFFICIENT',
     1'   DENSITY        (m)      FACTOR=m*P/2',/)
C
   82 CONTINUE
      DO 250 II=1,NVEC
      AMPLTD = 0.
      IF (IREST.NE.2.OR.INDIC.NE.3) GO TO 85
      FREQU = EIGENW(NVECTL+II)
      CALL RESFAC(FREQU,FMULT,FNGVAL,DAMPNG,SPECD)
      AMPLTD = GAMP(NVECTL+II)*FMULT
      WRITE(IFILE4,83) 
     1 FREQU, GAMP(NVECTL+II), FNGVAL, DAMPNG, SPECD, FMULT,
     1            AMPLTD
   83 FORMAT(1PE12.4,1PE16.4,1PE16.4,1PE14.4,1PE13.4,1PE13.4,1PE14.4)
   85 CONTINUE
      IF (INDIC.EQ.3) GO TO 90
      FN = FLOAT(N)
      GO TO 100
90    FN = FLOAT(NSTART + (II-1)*INCR)
C     RECOVER THE SOLUTION VECTOR F
100   CONTINUE
C BEG JAN 1993
      DO 102 I = 1,M3
  102 F(I) = 0.0
      NVECX = NVECTL+II
      IF (ILOOP.EQ.1.AND.IDMODE(NVECX).NE.0) 
     1             CALL GASP(F,M32,3,IDMODE(NVECX))
      IF (ILOOP.EQ.2.AND.IDMOD2(NVECX).NE.0)
     1             CALL GASP(F,M32,3,IDMOD2(NVECX))
C BEG AUG 1999
C     IF (NPRT.GE.3.AND.ILOOP.EQ.2) THEN
C        NWAVE = FN
C        WRITE(IFILE4,'(/,A,5I6)')
C    1 ' IN MODE: NWAVE,NVECX,IDMOD2(NVECX),NVECTL,II=',
C    1            NWAVE,NVECX,IDMOD2(NVECX),NVECTL,II
C        WRITE(IFILE4,104) NWAVE,(F(I),I=1,M3)
C 104    FORMAT(/,
C    1 ' SOLUTION VECTOR FOR LOAD SET B FOLLOWS (NWAVE=',I3,')',/,
C    1   (1P,10E12.4))
C     ENDIF
C END AUG 1999
C END JAN 1993
  105 FORMAT(/,' NVEC,II,M3,M32,IDMODE(II),F(IM3),IM3=1,M3)=' 5I7,/,
     1 (1P10E12.3))
C
      IF (INDIC.EQ.2) CALL GASP(XX,M32,3,IMPHI(NVECTL+II))
C
      IF (INDIC.NE.3) GO TO 110
110   WMAX = 0.0
      KK =1
      I5TOT = 0
      IC = 4
      NUNK = 7
      KLAP = 4
      ICALL = 1
      IF (INDIC.EQ.3) GO TO 210
C
C     NORMALIZE EIGENVECTOR (BUCKLING AND VIBRATION PROBLEMS ONLY,
C     INDIC.NE.3.)
      J = 1
      I = 0
120   I = I + 1
      IF (J.GT.NCOND) GO TO 140
      IF (I.EQ.IROWCB(J)) GO TO 130
      GO TO 140
130   I = I + IC
      IF (I.GT.M3) GO TO 150
      J = J + 1
140   FI = F(I)
      WMAX = AMAX1(ABS(FI),WMAX)
      IF (I.GE.M3) GO TO 150
      GO TO 120
  150 CONTINUE
      IF (WMAX.EQ.0.) WMAX = 1.
      DO 160 I=1,M3
160   F(I) = F(I)/WMAX
      DO 170 I=1,M3
      FI = F(I)
      IF (ABS(FI).EQ.1.0) GO TO 180
170   CONTINUE
      GO TO 200
180   IF (FI.GT.0.) GO TO 200
      DO 190 I=1,M3
190   F(I) = - F(I)
200   CONTINUE
      FMULPY = 1.0
      IF (N.EQ.0) FMULPY = 2.0
C BEG MAR 2014
C     IF (INDIC.EQ.4) ENERG(NVECTL+II) =
C    1 FMULPY*3.1415927*ABS(ENERG(NVECTL+II)/WMAX**2)
C END MAR 2014
      IF (INDIC.NE.2) GO TO 210
      GM(NVECTL+II) = FMULPY*3.1415927*ABS(GM(NVECTL+II)/WMAX**2)
C
      DO 205 I = 1,M3
      XSINGL(I) = SNGL(XX(I))*FMULPY*3.1415927/WMAX
  205 CONTINUE
210   IPOINT = 1
      ITOT = 1
      ITOTL = 0
      IF (INOTE.GT.1) CALL GASP(BBB,ISAVE(1),3,ISHL(1))
      IADD = 2
      DO 240 I=1,NSEG
C
C     MODAL DISPLACEMENTS AND STRESSES FOR EACH SEGMENT FOUND IN LOCAL.
C
      I5I = I5(I)
220   IPOS = 43*ITOTL + 1
      IEND = IPOS + 43*I5I - 1
C BEG MAR 2007
C BEG FEB 2008
C BEG JUN 2009
      IF (IEND.LT.400000) GO TO 230
C END JUN 2009
C END FEB 2008
C END MAR 2007
      IF (INDIC.NE.4) CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      CALL GASP(BBB,ISAVE(IADD),3,ISHL(IADD))
      ITOTL = 0
      IADD = IADD + 1
      GO TO 220
230   CONTINUE
      CALL LOCAL(IW,I,DS(ITOT),I5I,FN,F,BBB(8*I5I+IPOS),BBB(22*I5I+IPOS)
     1,BBB(33*I5I+IPOS),BMODE,NSEG,BBB(IPOS),BBB(36*I5I+IPOS),INDIC,
     2BBB(39*I5I+IPOS),IALL,II,SMODE,TMODE,IPOINT,IDIST,IANALY,
     3 ILOOP,ILPOS(1,I),PALL,FF,RHF,RHFIX,RVAR,RFIX,XSINGL)
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
240   CONTINUE
C
      IF (INDIC.EQ.2) GAMP(NVECTL+II)=ABS(AMPLTD)/(2.*GM(NVECTL+II))
C
      IF (INDIC.NE.4.AND.INOTE.GT.1)
     1CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      IF (INDIC.EQ.3.AND.II.LT.NVEC) GO TO 250
C
      IF (INDIC.NE.4.AND.INOTE.EQ.1)
     1CALL GASP(BBB,ISAVE(IADD-1),1,ISHL(IADD-1))
      NN = IALL*3
C     STORE MODE SHAPES
      IF (INDIC.NE.3) CALL GASP(BMODE,NN,1,IMOAD(II+NVIB))
      IF (INDIC.NE.3) GO TO 250
      NN = IOUT*9*NDIST
      IF (IREST.NE.2) GO TO 247
      IF (IANALY.EQ.1) GO TO 247
      IF (NN.EQ.0) GO TO 244
      INBEG = IOUT*NDIST*3 + 1
C     WRITE(IFILE4,*)' IANALY,IOUT,INBEG,NDIST,NN=',
C    1            IANALY,IOUT,INBEG,NDIST,NN
      DO 243 I = INBEG,NN
C     WRITE(IFILE4,*)' I,SMODE(I)=',I,SMODE(I)
C     IF (MOD(I,IOUT).EQ.0) WRITE(IFILE4,*)' NEW COLUMN...'
  243 SMODE(I) = SQRT(SMODE(I))
  244 NK = NTHETA*NCIRC*9
      IF (NK.EQ.0) GO TO 247
      INBEG = NTHETA*NCIRC*3 + 1
      DO 245 I = INBEG,NK
  245 TMODE(I) = SQRT(TMODE(I))
  247 CONTINUE
C     STORE MERIDIONAL STRESS OR STRESS RESULTANT DISTRIBUTIONS.
C     STORE CIRCUMFERENTIAL DISTRIBUTIONS
C     STORE RING LOADS
      NN1 = IOUT*NDIST*9
      NN2 = NTHETA*NCIRC*9
      NN3 = NTOT*NHARM*4
C
      IF (ILOOP.EQ.1) THEN
      IMOAD(100) = 0
      IF (NN1.NE.0) CALL GASP(SMODE,NN1,1,IMOAD(100))
      IMOAD(99)  = 0
      IF (NN2.NE.0) CALL GASP(TMODE,NN2,1,IMOAD( 99))
      IMOAD(96)  = 0
      IF (NN3.NE.0) CALL GASP(FF,   NN3,1,IMOAD( 96))
      ELSE
      IMOAD(98)  = 0
      IF (NN1.NE.0) CALL GASP(SMODE,NN1,1,IMOAD( 98))
      IMOAD(97)  = 0
      IF (NN2.NE.0) CALL GASP(TMODE,NN2,1,IMOAD( 97))
      IMOAD(95)  = 0
      IF (NN3.NE.0) CALL GASP(FF,   NN3,1,IMOAD( 95))
      ENDIF
C
250   CONTINUE
      RETURN
      END
C
C
C
C=DECK      IFIND
      SUBROUTINE IFIND(IDIST,X)
C     CALLED FROM MODE, WHICH IS CALLED FROM MAIN.
C     CALCULATES GLOBAL MERIDIONAL STATIONS FOR WHICH THERE WILL BE
C     OUTPUT. THESE ARE STORED IN X.  OUTPUT IS PROVIDED FOR EVERY
C     INTVAL(ISEG) TH  MESH POINT.
C
C BEG MAR 2007
      DIMENSION IDIST(*),X(*),S(10000)
C END MAR 2007
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/INTRVL/ INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/SEGS/NSEG,M2,I5(295),I2,I2G
      COMMON/XID/IDX
      CALL GASP(S,I2,3,IARC(1))
21    CONTINUE
      IS = 1
      ITOT = 0
      DO 20 ISEG=1,NSEG
      I5I = I5(ISEG)
      INEXT = ITOT+1
      IEND = ITOT + I5I
      DO 10 I=1,I5I
      ITOT = ITOT + 1
      IF (ITOT.NE.INEXT) GO TO 10
      X(IS) = S(ITOT)
      IDIST(IS) = ITOT
      IS = IS + 1
      INEXT = ITOT + INTVAL(ISEG)
      IF (INEXT.GT.IEND) INEXT = IEND
10    CONTINUE
20    CONTINUE
      IOUT = IS - 1
      J = IOUT*NDIST*9
C BEG MAR 2007
      IF (J.LE.90000) GO TO 25
C END MAR 2007
      DO 22 I = 1,NSEG
22    INTVAL(I) = INTVAL(I) + 1
      GO TO 21
25    CONTINUE
      CALL GASP(X,IOUT,1,IDX)
      RETURN
      END
C
C
C
C=DECK      LOCAL
      SUBROUTINE LOCAL(IW,IS,HC,I5,FN,F,C,B,PSTS,BMODE,NSEG,THERM,
     1PFXD,INDIC,TIO,IALL,IVEC,SMODE,TMODE,IPOINT,IDIST,IANALY,
     1 ILOOP,IPOS,PALL,FF,RHF,RHFIX,RVAR,RFIX,XSINGL)
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
      DOUBLE PRECISION H,HPAST,HI,C1,C2,C3,W,U,V,R,RD,FK1,FK2,CURD
      DOUBLE PRECISION UD,VD,WD,WDD,CHI,PS
      DOUBLE PRECISION F
C
C     CALLED FROM MODE, WHICH IS CALLED FROM MAIN.
C     CALCULATES MODE SHAPE FOR BUCKLING AND VIBRATION MODES.
C     ALSO CALCULATES STRESS RESULTANTS OR STRESSES FOR NONSYMMETRIC
C     LINEAR STRESS ANALYSIS (INDIC=3).  LOCAL DOES THIS FOR CURRENT
C     SHELL SEGMENT AND FOR CURRENT HARMONIC.
C     IN LINEAR STRESS ANALYSIS DISPLACEMENTS, STRESS RESULTANTS,
C     AND STRESSES ARE SUPERPOSED. FORCES AND MOMENTS IN DISCRETE
C     RINGS ARE ALSO CALCULATED, ALTHOUGH THESE ARE NOT SUPERPOSED
C     UNTIL LATER.
C
C     MODE SHAPE IN EACH SHELL SEGMENT CALCULATED ALONG WITH MODAL STRES
      DIMENSION F(*),C(I5,14),B(I5,5),PSTS(I5,3),BMODE(IALL,9)
C BEG OCT 1999
      DIMENSION SMODE(*),TMODE(*),IDIST(*),XSINGL(*)
      DIMENSION THERM(I5,8),TIO(I5,4),Z(100),T(100)
      DIMENSION PFXD(I5,3),IW(*),HC(*),FF(*),IPOS(*),PALL(*)
      DIMENSION RHF(*),RHFIX(*),RVAR(*),RFIX(*)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/NOHARM/NHARM
      COMMON/ALLRNG/NTOT,IPRE
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/INTRVL/INTVAL(295),IOUT,NDIST,NCIRC,NTHETA
      COMMON/XTRSS/SIG1I,SIG1O,SIG2I,SIG2O,TAUI,TAUO,SIGEI,SIGEO
      COMMON/IDZREF/IZREF(295)
      COMMON/FICTP/ IFICT
      COMMON/SFLAG/ MONOQ
      COMMON/STRSEG/ISTRSS(295)
      REAL N10,N20
C BEG MAR 2008
C     COMMON/ISTUFB/KK,I5TOT,IC,NUNK,KLAP,ICALL
      COMMON/ISTUFB/KK,I5TOT,IC,NUNK,KLAP,ICALL,IGROUN
C END MAR 2008
      REAL N1,N2,N12,M1,M2,MT,K1,K2,K12
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/RESTRT/IREST
      COMMON/RGTEMP/TNR(198),TMR(198),TMRX(198)
      COMMON/DRGTEM/TNRFIX(198),TMRFIX(198),TMXFIX(198)
      COMMON/KCHNG/NWALL(295),CCH(295)
C END OCT 1999
C
      N = FN
      IK = 1
      N10 = 0.0
      N20 = 0.0
      CHI0 = 0.0
      IF (NWALL(IS).NE.4.AND.NWALL(IS).NE.9.AND.ISTRSS(IS).EQ.1)
     1      CALL GASP(T,I5,3,ITHK(IS))
C     RETRIEVE REFERENCE SURFACE LOCATION
      IF (ISTRSS(IS).EQ.1) CALL GASP(Z,I5,3,IZREF(IS))
      ITOT = I5TOT - 2*(IS-1)
      LINDX = IPOS(3)
      IF (ILOOP.EQ.2) LINDX = IPOS(6)
      LINDX3 = LINDX + IVEC - 1
C
      INDX = IPOS(9)
      IF (ILOOP.EQ.2) INDX = IPOS(12)
      INDX3 = INDX + IVEC - 1
C
      TIN = 0.
      TOUT= 0.
      HI = HC(1)
C     START LOOP OVER CURRENT SEGMENT MESH POINTS.
      DO 110 I=1,I5
      IF (NWALL(IS).EQ.4.OR.NWALL(IS).EQ.9.OR.ISTRSS(IS).NE.1) GO TO 5
      IF (INDX.EQ.0) GO TO 5
      TIN = TIO(I,1)*PALL(INDX3)
      TOUT = TIO(I,2)*PALL(INDX3)
      IF (ILOOP.NE.1) THEN
          TIN = TIO(I,3)*PALL(INDX3)
          TOUT= TIO(I,4)*PALL(INDX3)
      ENDIF
C
    5 CONTINUE
      H = HC(I)
      HPAST = HI
      HI = 2.*H-HPAST
      ITOT = ITOT + 1
      II = I5TOT + I + 1
      I3M = IW(II - 1)
      I0 = IW(II)
      I3P = IW(II + 1)
      I2M = I0-2
      I1M = I0-1
      I1P = I0+1
      I2P = I0+2
      IF ((I3P-I0).EQ.(IC+NUNK-KLAP)) I1P = I0 + IC + 1
      IF ((I3P-I0).EQ.(IC+NUNK-KLAP)) I2P = I0 + IC + 2
C     DISPLACEMENTS AND DERIVATIVES FOR VARIABLE SPACING MESH
C
      C1 = (HPAST-HI)*(HI + H)/(16.*HPAST*H)
      C2 = (HI + H)*(HPAST + H)/(4.*HPAST*HI)
      C3 = - (HPAST-HI)*(HPAST + H)/(16.*HI*H)
      W = C1*F(I3M) + C2*F(I0) + C3*F(I3P)
      U = (F(I2M) + F(I1P))/2.
      V = (F(I1M) + F(I2P))/2.
      IF (IREST.EQ.2) V = - V
      R = B(I,1)
      RD = B(I,2)
      FK1 = B(I,3)
      FK2 = B(I,4)
      CURD = B(I,5)
      CURD = 0.0
C BEG APR 2009
      RFK2 = R*FK2
      IF (IPRISM.EQ.1) THEN
C BEG JAN 2010
         FK2 = FK2/1000000.
         R = R*1000000.
C END JAN 2010
         IF (ABS(RD).GT.0.999999) THEN
            RFK2 = 0.0
         ELSE
C BEG JAN 2010
C           RFK2 = (FK2/ABS(FK2))*SQRT(1.-RD**2)
            RFK2 = (FK2/DABS(FK2))*DSQRT(1.-RD**2)
C END JAN 2010
         ENDIF
      ENDIF
      FNBAR = FN/R
      IF (IPRISM.EQ.1) FNBAR = FN*3.1415927/AXIALL
C END APR 2009
      RS = R
      RDS = RD
      CURV1 = FK1
      CURV2 = FK2
C
C     AMPLITUDE FACTOR FOR HARMONIC DRIVING AT THE RESONANT FREQQUENCY.
C
C     FIND INTEGRAL OF Y*M*PHI.  M*PHI IS STORED IN TMODE.
C
      IF (INDIC.NE.2) GO TO 7
      IF (IABS(N).GT.1) GO TO 7
      IF (N.EQ.0) GO TO 6
C BEG AUG 1991
      FACMLT = 1.0
      IF (N.LT.0) FACMLT = -1.0
C     WRITE(IFILE4,*) ' N,FACMLT,AMPLTD,XSINGL(I1M),XSINGL(I0)=',
C    1             N,FACMLT,AMPLTD,XSINGL(I1M),XSINGL(I0)
C BEG APR 2009
      AMPLTD = AMPLTD +XSINGL(I1M)*1. +XSINGL(I0)*RFK2*FACMLT
     1                +XSINGL(I1P)*RD
      IF (I.EQ.1) AMPLTD=AMPLTD +XSINGL(I3M)*RFK2*FACMLT
     1                          +XSINGL(I2M)*RD
      IF (I.EQ.I5)AMPLTD=AMPLTD +XSINGL(I3P)*RFK2*FACMLT
     1                          +XSINGL(I2P)*1.
C END APR 2009
C END AUG 1991
C
C     NOTE...THE ABOVE FORMULA IS FOR LATERAL FORCED MOTIONS ONLY...
C
      GO TO 7
    6 CONTINUE
C
C BEG APR 2009
      AMPLTD = AMPLTD +XSINGL(I1M)*1. -XSINGL(I0)*RD +XSINGL(I1P)*RFK2
      IF (I.EQ.1) AMPLTD=AMPLTD -XSINGL(I3M)*RD +XSINGL(I2M)*RFK2
C END APR 2009
      IF (I.EQ.I5)AMPLTD=AMPLTD -XSINGL(I3P)*RD *XSINGL(I2P)*1.
C
C     NOTE...THE ABOVE FORMULA IS FOR AXIAL FORCED VIBRATIONS ONLY.
C
    7 CONTINUE
C
      US = U
      VS = V
      WS = W
      UD = (F(I1P) - F(I2M))/H
      VD = (F(I2P) - F(I1M))/H
      IF (IREST.EQ.2) VD = -VD
      C1 = -.5/HPAST
      C3 = .5/HI
      C2 = -C1 -C3
      WD = C1*F(I3M) + C2*F(I0) + C3*F(I3P)
      C1 = 1./(HPAST*H)
      C2 = -2./(HPAST*HI)
      C3 = 1./(HI*H)
      WDD = C1*F(I3M) + C2*F(I0) + C3*F(I3P)
      CHIO = 0.
      N10 = 0.
      N20 = 0.
      CHI = WD - FK1*U
      CHIS = CHI
C     STRAINS AND CHANGES IN CURVATURE
      E1 = UD + W   *FK1 + CHI0*CHI
      FMUL = 0.0
      K1=WDD-FK1*UD-CURD*U-FMUL*E1*FK1
      IF (R.GT.0.0) GO TO 10
      PS = - CHI
      E2 = E1
      E12 = 0.0
      K2 = K1
      K12 = 0.0
      GO TO 20
C BEG APR 2009
10    PS = W*FNBAR - FK2*V
      E2 = - V*FNBAR + U*RD/R + W*FK2
      E12 = VD - V*RD/R + U*FNBAR + CHI0*PS
      K2=-PS*FNBAR+CHI*RD/R-FMUL*E2*FK2
      K12 = - CHI*FNBAR + PS*RD/R + VD*FK2
C END APR 2009
   20 CONTINUE
      IF (INDIC.NE.3) GO TO 70
C
C     STRESS AND MOMENT RESULTANTS.
      N1    = C(I,1)*E1 + C(I,2)*E2 + C(I,3)*K1 + C(I,4)*K2
      N2    = C(I,2)*E1 + C(I,5)*E2 + C(I,6)*K1 + C(I,7)*K2
      M1    = C(I,3)*E1 + C(I,6)*E2 + C(I,8)*K1 + C(I,9)*K2
      M2    = C(I,4)*E1 + C(I,7)*E2 + C(I,9)*K1 + C(I,10)*K2
      N12 = C(I,11)*E12 + C(I,12)*K12*2.
      MT = C(I,12)*E12 + C(I,13)*K12*2.
C
      IF (ILOOP.EQ.1) THEN
      N1 = N1 + THERM(I,1)*PALL(INDX3)
      N2 = N2 + THERM(I,2)*PALL(INDX3)
      M1 = M1 + THERM(I,3)*PALL(INDX3)
      M2 = M2 + THERM(I,4)*PALL(INDX3)
      ELSE
      N1 = N1 + THERM(I,5)*PALL(INDX3)
      N2 = N2 + THERM(I,6)*PALL(INDX3)
      M1 = M1 + THERM(I,7)*PALL(INDX3)
      M2 = M2 + THERM(I,8)*PALL(INDX3)
      ENDIF
      IF (I.EQ.1.OR.I.EQ.I5) GO TO 30
      GO TO 70
30    IF (R.GT.0.0) GO TO 40
      GO TO 70
C
C     CORRECTION ADDENDS FOR EDGE STRESS RESULTANTS CALCULATED.
C
40    F1 = 0.5*RD*H/R
C BEG APR 2009
      F2 = 0.5*FNBAR*H
C END APR 2009
      CN1 = - N2*F1 - N12*F2 + 0.5*N10*CHI*H*FK1
      CN12 = N12*F1 + N2*F2 + 0.5*N20*PS*H*FK2
      CM1 = -M2*2.*F1 + MT*2.*F2 - N1*CHI0*H - N10*CHI*H
      IF (I.EQ.I5) GO TO 50
      GO TO 60
50    CN1 = - CN1
      CN12 = - CN12
      CM1 = - CM1
60    N1 = N1 + CN1
      N12 = N12 + CN12
      M1 = M1 + CM1
      N2 = N2 + C(I,2)*CN1/C(I,1)
      M2 = M2 + C(I,9)*CM1/C(I,8)
70    CONTINUE
      IF (ISTRSS(IS).EQ.1) GO TO 80
      IF (ISTRSS(IS).EQ.2) GO TO 85
      IF (MONOQ.EQ.1.AND.ISTRSS(IS).EQ.0) GO TO 85
C     BMODE CONTAINS GLOBAL QUANTITIES
      BMODE(ITOT,1) = U
      BMODE(ITOT,2) = V
      BMODE(ITOT,3) = W
      IF (INDIC.NE.3) GO TO 110
      BMODE(ITOT,4) = N1
      BMODE(ITOT,5) = N2
      BMODE(ITOT,6) = N12
      BMODE(ITOT,7) = M1
      BMODE(ITOT,8) = M2
      BMODE(ITOT,9) = MT
      GO TO 90
C     STRESS  CALCULATES INNER AND OUTER FIBER STRESSES OF MONOCOQUE
C     AND SEMI-SANDWICH CORRUGATED SHELLS.
   80 CONTINUE
      IF (NWALL(IS).EQ.4.OR.NWALL(IS).EQ.9) GO TO 85
      IF (ISTRSS(IS).EQ.1) THEN
          CALL STRESS(E1,E2,E12,K1,K2,K12,T(I),Z(I),IS,I,TIN,TOUT,
     1              CURV1,CURV2)
         BMODE(ITOT,1) = U
         BMODE(ITOT,2) = V
         BMODE(ITOT,3) = W
         BMODE(ITOT,4) = SIG1I
         BMODE(ITOT,5) = SIG1O
         BMODE(ITOT,6) = TAUI
         BMODE(ITOT,7) = SIG2I
         BMODE(ITOT,8) = SIG2O
         BMODE(ITOT,9) = TAUO
         GO TO 90
      ENDIF
   85 CONTINUE
      BMODE(ITOT,1) = U
      BMODE(ITOT,2) = V
      BMODE(ITOT,3) = W
      BMODE(ITOT,4) = E1
      BMODE(ITOT,5) = E2
      BMODE(ITOT,6) = E12
      BMODE(ITOT,7) = K1
      BMODE(ITOT,8) = K2
      BMODE(ITOT,9) = K12
C
90    CONTINUE
      IF (I.NE.IRING(IS,IK)) GO TO 100
C     CALCULATE HOOP FORCE, IN-PLANE MOMENT, OUT-OF-PLANE MOMENT
C     AND TORQUE IN DISCRETE RING.
      IF (ILOOP.EQ.1)
     1CALL RINGF(IK,KK,RS,RDS,CURV1,CURV2,FN,US,VS,WS,CHIS,FF,
     1 PALL(LINDX3),NTOT,NHARM,IVEC,RHF,TNR,TMR,TMRX,IPOS(1),PALL,RVAR)
      IF (ILOOP.EQ.2)
     1CALL RINGF(IK,KK,RS,RDS,CURV1,CURV2,FN,US,VS,WS,CHIS,FF,
     1 PALL(LINDX3),NTOT,NHARM,IVEC,RHFIX,TNRFIX,TMRFIX,TMXFIX,
     1 IPOS(4),PALL,RFIX)
C BEG MAR 2008
C     Two statements, IK = IK + 1 and KK = KK + 1 moved down.
C END MAR 2008
100   CONTINUE
C     PERFORM SUPEROSITION FOR THIS PARTICULAR AXIAL STATION
C
      INEXT = IDIST(IPOINT)
      NNDIST = NDIST
      IF (NDIST.EQ.0) NNDIST = 1
      NNCIRC = NCIRC
      IF (NCIRC.EQ.0) NNCIRC = 1
C     WRITE(IFILE4,'(A,6I6)')' in LOCAL: IS,I,ILOOP,IK,KK,ITOT=',
C    1                                   IS,I,ILOOP,IK,KK,ITOT
      IF (ILOOP.EQ.1)
     1CALL SPOSE(IK,KK,ICALL,I,ITOT,IALL,FN,BMODE,PSTS,CHIS,
     1SMODE,TMODE,I5,NTHETA,IPOINT,INEXT,IOUT,NDIST,NCIRC,IS,IANALY,
     1 IVEC,N1,N2,IPOS(7),PALL,NNDIST,NNCIRC)
      IF (ILOOP.EQ.2)
     1CALL SPOSE(IK,KK,ICALL,I,ITOT,IALL,FN,BMODE,PFXD,CHIS,
     1SMODE,TMODE,I5,NTHETA,IPOINT,INEXT,IOUT,NDIST,NCIRC,IS,IANALY,
     1 IVEC,N1,N2,IPOS(10),PALL,NNDIST,NNCIRC)
C
C BEG MAR 2008
      IF (I.NE.IRING(IS,IK)) GO TO 105
         IK = IK + 1
         KK = KK + 1
  105 CONTINUE
C END MAR 2008
C
      IF (ITOT.EQ.INEXT) IPOINT = IPOINT + 1
110   CONTINUE
      I5TOT = I5TOT + I5 + 2
C     STORE PRESTRESS QUANTITIES FOR BUCKLING ANALYSIS (INDIC=4)
      RETURN
      END
C
C
C
C=DECK      RINGF
      SUBROUTINE RINGF(IK,KK,R,RD,FK1,FK2,FN,U,V,W,CHI,F,TLIN,NTOT,NHARM
     1,IVEC,RHF,TNR,TMR,TMRX,IPOS,PALL,RHARM)
C     CALLED FROM LOCAL WHOSE TRACE IS MODE,MAIN
C     DISCRETE RING HOOP FORCE,IN-PLANE MOMENT, OUT-OF-PLANE MOMENT
C     AND TORQUE ARE COMPUTED FOR KKTH DISCRETE RING AND FOR HARMONIC
C     FN = FLOAT(N).
C
C BEG APR 2009
      COMMON/IPRSMX/IPRISM,AXIALL
C END APR 2009
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/ISTUFB/KKXX,I5TOTX,ICCCX,NUNKX,KLAPX,ICALLX,IGROUN
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
      COMMON/RING9/AAAX(10,30),BBBX(10,30),CCCX(10,30)
      COMMON/RING10/RADRNG(198)
      COMMON/RING11/DXGLOB(10,30),DYGLOB(10,30),DZGLOB(10,30)
      DIMENSION ED(4,4),XBAR(4,4)
      DOUBLE PRECISION ED,XBAR,CNTHET,SNTHET,ARG
      DOUBLE PRECISION  THETRI,THETGI,CTHETR,STHETR,CTHETG,STHETG
      DOUBLE PRECISION  XRING,YRING,ZRING,XGROUN,YGROUN,ZGROUN
C END MAR 2008
      DOUBLE PRECISION D,E,G,B,C,UC,VC,WC
      DIMENSION RHF(*),TNR(*),TMR(*),TMRX(*),PALL(*),RHARM(*)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/RING2/GAM(198),GJ(198),
     1             YC(198),XC(198),E1(198),E2(198),PHI(200)
      COMMON/RNGGEO/RC(198),AREA(198),ER(198),
     1              IY(198),IX(198),IXY(198),IP(198)
      REAL IY,IX,IXY,IP
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/RESTRT/IREST
      DIMENSION F(NTOT,NHARM,4)
      DIMENSION D(4,4),E(4,4),B(4,4),C(4,4),G(4,4)
C BEG APR 2009
      RFK2 = R*FK2
      IF (IPRISM.EQ.1) THEN
         IF (ABS(RD).GT.0.999999) THEN
            RFK2 = 0.0
         ELSE
            RFK2 = (FK2/ABS(FK2))*SQRT(1.-RD**2)
         ENDIF
      ENDIF
      FNBAR = FN/R
      IF (IPRISM.EQ.1) FNBAR = FN*3.1415927/AXIALL
C END APR 2009
      DO 10 I=1,4
      DO 10 J=1,4
      D(I,J) = 0.0
      E(I,J) = 0.0
      G(I,J) = 0.0
10    B(I,J) = 0.0
C     TRANSFORMATION FROM AXIAL AND RADIAL TO NORMAL AND TANGENTIAL
C     DISPLACEMENT COMPONENTS  QSTAR = D(I,J)*Q
C BEG APR 2009
      D(1,1) = RFK2
C END APR 2009
      D(1,3) = -RD
      D(2,2) = 1.
      D(3,1) = RD
C BEG APR 2009
      D(3,3) = RFK2
C END APR 2009
      D(4,4) = 1.
C     TRANSFORMATION FROM SHELL REFERENCE SURFACE TO RING CENTROIDAL
C     DISPLACEMENTS    QC = E(I,J)*QSTAR
      E(1,1) = 1.
      E(1,4) = -E1(KK)
C BEG APR 2009
      E(2,1) = -E2(KK)*FNBAR
      E(2,2) = 1. + E1(KK)/R
      E(2,3) = -E1(KK)*FNBAR
C END APR 2009
      E(3,3) = 1.
      E(3,4) = E2(KK)
      E(4,4) = 1.
C BEG MAR 2008
      RADRNG(KK) = R
      IF (KK.EQ.1) IGROUN = 0
      IF (NTYPAL(KK).EQ.-1.AND.NGROUN(KK).EQ.1) THEN
       IGROUN = IGROUN + 1
       IF (IGROUN.GT.10) THEN
          WRITE(IFILE4,'(/,A,/,A,/,A,I6,A,/,A)')
     1  ' ****************** RUN ABORT ****************',
     1  ' Too many different "fake" rings at which springs',
     1  ' are connected to ground; IGROUN=',IGROUN,' Max.=10',
     1  ' *********************************************'
          CALL ERREX
       ENDIF
C
       DO 15 I=1,4
       DO 15 J=1,4
       ED(I,J)= 0.0
       XBAR(I,J) = 0.0
   15  CONTINUE
C
       E(1,4) = -SPREC1(KK)
C BEG APR 2009
       E(2,1) = -SPREC2(KK)*FNBAR
       E(2,2) = 1. + SPREC1(KK)/R
       E(2,3) = -SPREC1(KK)*FNBAR
C END APR 2009
       E(3,4) = SPREC2(KK)
C      MATRIX MULTIPLICATION: ED = E x D
       CALL MATMU3(E,D,ED,4,4)
C
       PI = 3.1415927
       IUP = NSPRNG(KK)
C
       DO 20 IANGLE = 1,IUP
         THETRI = SPRANG(IANGLE,KK)*PI/180.
         CTHETR = DCOS(THETRI)
         STHETR = DSIN(THETRI)
         XRING  = (R + SPREC1(KK))*CTHETR
         YRING  = SPRAXL(KK)
         ZRING  = (R + SPREC1(KK))*STHETR
         THETGI = SPRAGG(IANGLE,KK)*PI/180.
         CTHETG = DCOS(THETGI)
         STHETG = DSIN(THETGI)
         XGROUN = SPRRAD(KK)*CTHETG
         YGROUN = SPRAXG(KK)
         ZGROUN = SPRRAD(KK)*STHETG
         AAAX(IGROUN,IANGLE) = XRING - XGROUN
         BBBX(IGROUN,IANGLE) = YRING - YGROUN
         CCCX(IGROUN,IANGLE) = ZRING - ZGROUN
C23456789012345678901234567890123456789012345678901234567890123456789012
C        WRITE(IFILE4,'(/,A,/,A,I3,A,/,1P5E12.4)')
C    1 ' ***********************************************************',
C    1 ' RINGF:SPRANG,SPRAXL,SPRAGG,SPRRAD,SPRAXG for ring no.',KK,' =',
C    1   SPRANG(IANGLE,KK),SPRAXL(KK),SPRAGG(IANGLE,KK),
C    1   SPRRAD(KK),SPRAXG(KK)
C        WRITE(IFILE4,'(A,1P2E12.4)')
C    1   ' SPREC1(KK),SPREC2(KK)=',SPREC1(KK),SPREC2(KK)
C        WRITE(IFILE4,'(A,2I5,1P3E14.6)')
C    1 ' IGROUN,IANGLE,AAAX,BBBX,CCCX=',
C    1   IGROUN,IANGLE,AAAX(IGROUN,IANGLE),
C    1   BBBX(IGROUN,IANGLE),CCCX(IGROUN,IANGLE)
C
         XBAR(1,1) = 0.
         XBAR(1,2) = -STHETR
         XBAR(1,3) =  CTHETR
         XBAR(2,1) = 1.
         XBAR(2,2) = 0.
         XBAR(2,3) = 0.
         XBAR(3,1) = 0.
         XBAR(3,2) =  CTHETR
         XBAR(3,3) =  STHETR
C        CALL MATMU3(XBAR,ED,XBARED,4,4)
C
         UC = ED(1,1)*U + ED(1,2)*V + ED(1,3)*W +ED(1,4)*CHI
         VC = ED(2,1)*U + ED(2,2)*V + ED(2,3)*W +ED(2,4)*CHI
         WC = ED(3,1)*U + ED(3,2)*V + ED(3,3)*W +ED(3,4)*CHI
C
C   in which U, V, W, CHI are the meridional, circumferential,
C   and normal shell reference surface displacement components
C   at the nodal point where the "fake" ring with the springs
C   attached to it is fastened to the shell reference surface.
C   CHI is the meridional rotation of the shell reference
C   surface at the same nodal point. UC, VC, WC are the axial,
C   circumferential, and radial displacement components of the
C   circumferential line in the "fake" ring to which the springs
C   are attached. ED is the matrix which transforms U, V, W, CHI
C   into UC, VC, WC.
C
         ARG = ABS(FN*THETRI)
         SNTHET = DSIN(ARG)
         CNTHET = DCOS(ARG)
C
C   FN is the number of circumferential waves in the deformation
C   pattern and THETRI is the value of the circumferential
C   coordinate of the attachement point of a spring to the "fake"
C   ring.
C
C   DXGLOB, DYGLOB, DZGLOB are the global cartesian coordinate
C   components of the displacement at the ring-end of the
C   spring. FN = number of circ. waves in the current harmonic.
C
         IF (FN.GT.0.0) THEN
            DXGLOB(IGROUN,IANGLE) = DXGLOB(IGROUN,IANGLE)
     1     +XBAR(1,1)*UC*SNTHET +XBAR(1,2)*VC*CNTHET
     1     +XBAR(1,3)*WC*SNTHET
C
            DYGLOB(IGROUN,IANGLE) = DYGLOB(IGROUN,IANGLE)
     1     +XBAR(2,1)*UC*SNTHET +XBAR(2,2)*VC*CNTHET
     1     +XBAR(2,3)*WC*SNTHET
C
            DZGLOB(IGROUN,IANGLE) = DZGLOB(IGROUN,IANGLE)
     1     +XBAR(3,1)*UC*SNTHET +XBAR(3,2)*VC*CNTHET
     1     +XBAR(3,3)*WC*SNTHET
         ENDIF
C
         IF (FN.LT.0.0) THEN
            DXGLOB(IGROUN,IANGLE) = DXGLOB(IGROUN,IANGLE)
     1     +XBAR(1,1)*UC*CNTHET +XBAR(1,2)*VC*SNTHET
     1     +XBAR(1,3)*WC*CNTHET
C
            DYGLOB(IGROUN,IANGLE) = DYGLOB(IGROUN,IANGLE)
     1     +XBAR(2,1)*UC*CNTHET +XBAR(2,2)*VC*SNTHET
     1     +XBAR(2,3)*WC*CNTHET
C
            DZGLOB(IGROUN,IANGLE) = DZGLOB(IGROUN,IANGLE)
     1     +XBAR(3,1)*UC*CNTHET +XBAR(3,2)*VC*SNTHET
     1     +XBAR(3,3)*WC*CNTHET
         ENDIF
C
         IF (FN.EQ.0.0) THEN
            DXGLOB(IGROUN,IANGLE) = DXGLOB(IGROUN,IANGLE)
     1     +XBAR(1,1)*UC +XBAR(1,2)*VC
     1     +XBAR(1,3)*WC
C
            DYGLOB(IGROUN,IANGLE) = DYGLOB(IGROUN,IANGLE)
     1     +XBAR(2,1)*UC +XBAR(2,2)*VC
     1     +XBAR(2,3)*WC
C
            DZGLOB(IGROUN,IANGLE) = DZGLOB(IGROUN,IANGLE)
     1     +XBAR(3,1)*UC +XBAR(3,2)*VC
     1     +XBAR(3,3)*WC
         ENDIF
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C        WRITE(IFILE4,'(/,A,2I2,1PE12.4,/,A,1P4E12.4)')
C    1 ' in RINGF: IGROUN,IANGLE,FN,U,V,W,CHI=',IGROUN,IANGLE,FN,
C    1 '              ',U,V,W,CHI
C        WRITE(IFILE4,'(A,/,A,1P3E12.4)')
C    1 '                         UC,VC,WC=',
C    1 '              ',UC,VC,WC
C        WRITE(IFILE4,'(/,A)')' ED(i,j)='
C        DO 162 I = 1,3
C          WRITE(IFILE4,'(1P4E12.4)') (ED(I,J),J=1,4)
C 162    CONTINUE
C
C        WRITE(IFILE4,'(/,A)')' XBAR(i,j)='
C        DO 163 I = 1,3
C          WRITE(IFILE4,'(1P3E12.4)') (XBAR(I,J),J=1,3)
C 163    CONTINUE
C
C        WRITE(IFILE4,'(/,A,1P3E12.4)')
C    1 ' DXGLOB,DYGLOB,DZGLOB=',DXGLOB(IGROUN,IANGLE),
C    1   DYGLOB(IGROUN,IANGLE),DZGLOB(IGROUN,IANGLE)
C
   20  CONTINUE
C
      ENDIF
C END MAR 2008
C
C     DISCRETE RING CONSTITUTIVE LAW   S = G(I,J)*EPSILON
      G(1,1) = ER(KK)*AREA(KK)
      G(2,2) = ER(KK)*IX(KK)
      G(2,3) = -ER(KK)*IXY(KK)
      G(3,2) = G(2,3)
      G(3,3) = ER(KK)*IY(KK)
      G(4,4) = GJ(KK)
C     DISCRETE RING KINEMATIC RELATIONS    EPSILON = B(I,J)*QC
C BEG APR 2009
      IF (IPRISM.EQ.0) THEN
         B(1,2) = -FN/RC(KK)
         B(1,3) = 1./RC(KK)
         B(2,1) = FN*FN/RC(KK)**2
         B(2,4) = 1./RC(KK)
         B(3,2) = FN/RC(KK)**2
         B(3,3) = -FN*FN/RC(KK)**2
         B(4,1) = FN/RC(KK)**2
         B(4,4) = FN/RC(KK)
      ELSE
         FNBARC = FN*3.1415927/AXIALL
         B(1,2) = -FNBARC
         B(1,3) = 1./RC(KK)
         B(2,1) = FNBARC**2
         B(2,4) = 1./RC(KK)
         B(3,2) = FNBARC/RC(KK)
         B(3,3) = -FNBARC**2
         B(4,1) = FNBARC/RC(KK)
         B(4,4) = FNBARC
      ENDIF
C END APR 2009
C     MATRIX MULTIPLICATIONS
      CALL MATMU3(E,D,C,4,4)
      CALL MATMU3(B,C,D,4,4)
      CALL MATMU3(G,D,C,4,4)
      F(KK,IVEC,1)
     1= C(1,1)*U + C(1,2)*V + C(1,3)*W + C(1,4)*CHI + TNR(KK)*TLIN
C
      FNANGL = ABS(FN*THETAS)
      SI = SIN(FNANGL)
      CO = COS(FNANGL)
      IF (FN.GT.0.) GO TO 22
      SI = CO
   22 CONTINUE
      IVEC1 = IVEC - 1
      IF (IVEC.EQ.1) RHF(KK) = 0.
      IF (IVEC.EQ.1) RHARM(KK) = 0.
      IF (IREST.NE.2) RHF(KK) = RHF(KK) + F(KK,IVEC,1)*SI
      IF (IREST.NE.2.AND.IPOS.NE.0)
     1                RHARM(KK) = RHARM(KK) + PALL(IPOS+IVEC1)*SI
      IF (IREST.EQ.2) RHF(KK) = RHF(KK) -ABS(AMPLTD*F(KK,IVEC,1))
C
C     F(KK,IVEC,1) = HOOP FORCE,NR CORRESPONDING TO IVEC TH HARMONIC
C     F(KK,IVEC,2)=OUT-OF-PLANE MOMENT FOR IVECTH HARMONIC
C     F(KK,IVEC,3) = IN-PLANE MOMENT FOR IVECTH HARMONIC
C     F(KK,IVEC,4) = TORQUE FOR IVECTH HARMONIC
C
      F(KK,IVEC,2)
     1= C(2,1)*U + C(2,2)*V + C(2,3)*W + C(2,4)*CHI + TMR(KK)*TLIN
      IF ((KK*IVEC*3).GT.6250) RETURN
      F(KK,IVEC,3)
     1= C(3,1)*U + C(3,2)*V + C(3,3)*W + C(3,4)*CHI -TMRX(KK)*TLIN
      IF ((KK*IVEC*4).GT.6250) RETURN
      F(KK,IVEC,4) = C(4,1)*U +C(4,2)*V +C(4,3)*W + C(4,4)*CHI
      RETURN
      END
C
C
C
C=DECK      SPOSE
      SUBROUTINE SPOSE(IK,KK,ICALL,I,ITOT,IALL,FN,BMODE,PSTS,
     1CHI,SMODE,TMODE,I5,NTHETA,IS,INEXT,IOUT,NS,NCIRC,ISEG,IANALY,
     1 IVEC,N1,N2,IPOS,PALL,NNDIST,NNCIRC)
C     CALLED FROM LOCAL, WHOSE TRACE IS MODE,MAIN
C     PURPOSE IS TO PERFORM SUPERPOSITION FOR MERIDIONAL AND CIRCUM-
C     FERENTIAL DISTRIBUTIONS IN LINEAR NONSYMMETRIC STRESS ANALYSIS
C
C BEG MAR 2008
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/INTRG/NSTATN(295),IRING(295,20)
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
      COMMON/RING8/UVW(10,30,3)
C END MAR 2008
      DIMENSION SMODE(IOUT,NNDIST,9),TMODE(NTHETA,NNCIRC,9)
      DIMENSION BMODE(IALL,9)
      DIMENSION PSTS(I5,3),PALL(*)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/WAVNUM/ITHETA(50),THETA(50),THETAS,THETAM
      COMMON/AMPFAC/OMEGDR,YLATRL,YAXIAL,BDAMP,AMPLTD,GAMP(200)
      COMMON/RESTRT/IREST
      COMMON/NLINS/NSTART,NFIN
      REAL N1,N2
C
C
      IF (ITOT.NE.INEXT) GO TO 40
C     SUPERPOSE MERIDIONAL DISTRIBUTIONS AT NS CIRCUMFERENTIAL STATIONS
      IF (NS.EQ.0) GO TO 40
      DO 30 J=1,NS
      THET = THETA(J)
      FNTHET = ABS(FN*THET)
      SI = SIN(FNTHET)
      CO = COS(FNTHET)
      IF (FN.GT.0.) GO TO 10
      SI = CO
      CO = SIN(FNTHET)
10    CONTINUE
C     WRITE(IFILE4,*)' IREST,IANALY,ITOT,J=',IREST,IANALY,ITOT,J
C     WRITE(IFILE4,*)' AMPLTD,FACT,THET=',AMPLTD,FACT,THET
      DO 20 K=1,9
      FACT = SI
      ISHR = 0
      IF (K.EQ.2.OR.K.EQ.6.OR.K.EQ.9) ISHR = 1
      IF (ISHR.EQ.1.AND.FN.NE.0.) FACT = CO
      IF (IREST.NE.2)
     1 SMODE(IS,J,K) = SMODE(IS,J,K) + BMODE(ITOT,K)*FACT
      IF (IREST.EQ.2.AND.IANALY.NE.1.AND.K.GT.3)
     1 SMODE(IS,J,K) =SMODE(IS,J,K) +(AMPLTD*BMODE(ITOT,K)*FACT)**2
      IF (IREST.EQ.2.AND.(IANALY.EQ.1.OR.K.LE.3))
     1 SMODE(IS,J,K) =SMODE(IS,J,K) + AMPLTD*BMODE(ITOT,K)*FACT
C     WRITE(IFILE4,*)' IS,J,K,SMODE(IS,J,K)=',IS,J,K,SMODE(IS,J,K)
   20 CONTINUE
30    CONTINUE
   40 CONTINUE
C     GET MERIDIONAL PRESTRESS RESULTANT N10 (PSTS(I,1)), CIRCUMFER-
C     ENTIAL PRESTRESS RESULTANT N20 (PSTS(I,2)), AND SUM OF
C     CIRCUMFERENTIAL HARMONICS (PSTS(I,3)) AT CIRC. STATION THETAS.
      FNTHET = ABS(FN*THETAS)
      SI = SIN(FNTHET)
      CO = COS(FNTHET)
      IF (FN.GT.0.) GO TO 50
      SI = CO
      CO = SIN(FNTHET)
50    FACT = SI
      IVEC1 = IVEC - 1
      IF (IVEC.GT.1) GO TO 52
      PSTS(I,1) = 0.
      PSTS(I,2) = 0.
      PSTS(I,3) = 0.
   52 CONTINUE
      IF (IREST.EQ.2) GO TO 55
      PSTS(I,1) = PSTS(I,1) + N1*FACT
      PSTS(I,2) = PSTS(I,2) + N2*FACT
      IF (IPOS.NE.0) PSTS(I,3) = PSTS(I,3) + PALL(IPOS+IVEC1)*FACT
      GO TO 60
   55 CONTINUE
      PSTS(I,1) = PSTS(I,1)  -ABS(AMPLTD*N1)
      PSTS(I,2) = PSTS(I,2)  -ABS(AMPLTD*N2)
      PSTS(I,3) = PSTS(I,3)  +AMPLTD*0.*FACT
60    CONTINUE
C BEG MAR 2008
C     IF (ICALL.GT.NCIRC) RETURN
C     IF ((ISEG*1000 + I).NE.ITHETA(ICALL)) RETURN
      IF (ICALL.GT.NCIRC) GO TO 100 
      IF ((ISEG*1000 + I).NE.ITHETA(ICALL)) GO TO 100 
C END MAR 2008
      DTHETA = 0.0
      IF (NTHETA.EQ.1) GO TO 1091
      CFACT = 1.0
      CDIF  = (ABS(THETAM) - 3.1415)/3.1415
      IF (ABS(CDIF).LT.0.1) THEN
         IF (NSTART.NE.0.AND.NFIN.NE.0) THEN
            IF ((NSTART*NFIN).LT.0) THEN
               CFACT = 2.0
            ENDIF
         ENDIF
      ENDIF
      DTHETA = CFACT*THETAM/FLOAT(NTHETA-1)
1091  CONTINUE
      ANGLE = - DTHETA
C     SUPERPOSE CIRCUMFERENTIAL DISTRIBUTIONS AT ICALL TH  MERIDIONAL
C     MESH POINT TAG.
      DO 90 J=1,NTHETA
      ANGLE = ANGLE + DTHETA
      FNANGL = ABS(FN*ANGLE)
      SI = SIN(FNANGL)
      CO = COS(FNANGL)
      IF (FN.GT.0.0) GO TO 70
      SI = CO
      CO = SIN(FNANGL)
70    DO 80 K=1,9
      FACT = SI
      ISHR = 0
      IF (K.EQ.2.OR.K.EQ.6.OR.K.EQ.9) ISHR = 1
      IF (ISHR.EQ.1.AND.FN.NE.0.) FACT = CO
      IF (IREST.NE.2)
     1 TMODE(J,ICALL,K) = TMODE(J,ICALL,K) +BMODE(ITOT,K)*FACT
      IF (IREST.EQ.2.AND.IANALY.NE.1.AND.K.GT.3)
     1 TMODE(J,ICALL,K)=TMODE(J,ICALL,K)+(AMPLTD*BMODE(ITOT,K)*FACT)**2
      IF (IREST.EQ.2.AND.(IANALY.EQ.1.OR.K.LE.3))
     1 TMODE(J,ICALL,K)=TMODE(J,ICALL,K)+ AMPLTD*BMODE(ITOT,K)*FACT
   80 CONTINUE
90    CONTINUE
      ICALL = ICALL + 1
C BEG MAR 2008
  100 CONTINUE
C
C  Find the superposed shell reference surface displacement components,
C  U, V, W, (stored in UVW) at the end of each spring connected to
C  a "fake" ring. The other ends of these springs are connected to
C  ground.
C 
      IF (ISEG.EQ.1.AND.I.EQ.1) IGROUN = 0
C23456789012345678901234567890123456789012345678901234567890123456789012
C     WRITE(IFILE4,'(A,/,7I5)')
C    1' in SPOSE:ISEG,I,IK,KK,IRING(ISEG,IK),NTYPAL(KK),NGROUN(KK)=',
C    1           ISEG,I,IK,KK,IRING(ISEG,IK),NTYPAL(KK),NGROUN(KK)
      IF (I.NE.IRING(ISEG,IK)) GO TO 200
      IF (NTYPAL(KK).EQ.-1.AND.NGROUN(KK).EQ.1) THEN
         IGROUN = IGROUN + 1
         PI = 3.1415927
         JJUP = NSPRNG(KK)
         DO 190 JJ = 1,JJUP
           ANGLE  = SPRANG(JJ,KK)*PI/180.
           FNANGL = ABS(FN*ANGLE)
           SI = SIN(FNANGL)
           CO = COS(FNANGL)
           IF (FN.LE.0.0) THEN 
              SI = CO
              CO = SIN(FNANGL)
           ENDIF
           DO 180 K=1,3
             FACT = SI
             ISHR = 0
             IF (K.EQ.2) ISHR = 1
             IF (ISHR.EQ.1.AND.FN.NE.0.) FACT = CO
             IF (IREST.NE.2)
     1       UVW(IGROUN,JJ,K) = UVW(IGROUN,JJ,K) + BMODE(ITOT,K)*FACT
             IF (IREST.EQ.2.AND.IANALY.EQ.1)
     1       UVW(IGROUN,JJ,K) = UVW(IGROUN,JJ,K)
     1                                 + AMPLTD*BMODE(ITOT,K)*FACT
C            WRITE(IFILE4,'(A,4I6,1P2E12.4)')
C    1     ' in SPOSE:ITOT,IGROUN,IANGLE,K,UVW,BMODE=',
C    1                ITOT,IGROUN,JJ,K,UVW(IGROUN,JJ,K),BMODE(ITOT,K)
C23456789012345678901234567890123456789012345678901234567890123456789012
  180      CONTINUE
  190    CONTINUE
      ENDIF
  200 CONTINUE
  210 CONTINUE
C END MAR 2008
      RETURN
      END
C
C
C
C=DECK      RESFAC
      SUBROUTINE RESFAC(FREQ,FACT,FNGVAL,DAMPNG,SPECTL)
C
C     CALLED FROM MODE IF IREST = 2
C     PURPOSE IS TO FIND DYNAMIC RESPONSE MULTIPLIER FOR THE VARIOUS
C     ANALYSIS TYPES: SINUSOIDAL EXCITATION, RANDOM EXCITATION, OR
C     SHOCK.
C
C     INPUT DATA...
C
C     FREQ = FREQUENCY IN HERTZ
C
C     OUTPUT DATA...
C
C     FACT = MULTIPLIER
C
      COMMON/RESPON/GRAVTY,FNGEES(20),FREQN(20),BFACT(20),FREQB(20)
      COMMON/RESPO2/ANALY,WSPEC(20),FREQW(20)
C
      PI = 3.1415927
      IANALY = ANALY
C
      IF (IANALY.NE.2) CALL INTERP(20,FREQN,FREQ,FNGEES,FNGVAL,0)
      IF (IANALY.LT.3) CALL INTERP(20,FREQB,FREQ,BFACT,DAMPNG,0)
      IF (IANALY.EQ.2) CALL INTERP(20,FREQW,FREQ,WSPEC,SPECTL,1)
C
      OMEGA = 2.*PI*FREQ
      OMEGA2 = OMEGA**2
C
      GO TO (10,20,30),IANALY
C
   10 CONTINUE
C
C     BRANCH FOR SINUSOIDAL EXCITATION...
C
      FACT = FNGVAL*GRAVTY/(OMEGA2*DAMPNG)
      RETURN
C
   20 CONTINUE
C
C     BRANCH FOR RANDOM VIBRATIONS...
C
      FACT = SQRT(OMEGA*SPECTL/2.)*GRAVTY/(OMEGA2*SQRT(DAMPNG) )
      RETURN
C
   30 CONTINUE
C
C     BRANCH FOR SHOCK...
C
      FACT = 2.*FNGVAL*GRAVTY/OMEGA2
C
      RETURN
      END
C
C
C
C=DECK      IDGASP
      SUBROUTINE IDGASP(IFILE) 
C  Purpose is to print out the GASP identifiers (id)
C
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE
      COMMON/DSPACE/IDS
      COMMON/SMOAD/IMOAD(100),IPMODE(295),IPSMD(295)
      COMMON/IDENT/IPRW(20)
      COMMON/BLKP/IBLKP,NGBKP(20),NKFP(20)
      COMMON/IDVEC/IPV1(50),IPV2(50)
      COMMON/IDEIG/ IDMODE(500),NVECTL,EIGENW(500)
      COMMON/TWORHS/ITWO,IDMOD2(200)
      COMMON/AMPFC2/IMPHI(200)
      COMMON/IZDTR/IZZ
      COMMON/BLK/IBLK,NGBK(20),NFK(20)
      COMMON/BCK/IDRW(20,5)
      COMMON/SHEL/ISHL(295),IWAL(295),ITHK(295),IARC(295),ILOAD(295)
      COMMON/IFRHX/IFB,RHFIX(198),K,MNUMB,ISWTCH,KNT,IFTOT,INDSIG,LFIX
      COMMON/IDZREF/IZREF(295)
      COMMON/IDCSKN/ICSKIN(295)
      COMMON/IDSTFP/ISTFPR(295)
      COMMON/IDMSKN/INSKIN(2,295)
      COMMON/BUCIDX/IDBUCK(100)
      COMMON/XID/IDX
C BEG JUN 2009
      COMMON/LOCATN/ILOCP,ILOCB,IROWCP(598),IROWCB(598),IIWP,IIWB
C END JUN 2009
      COMMON/IDHIGH/IDMAX
      COMMON/ILVARS/ILVAR(11,295),ITREF(295),NLVAR(295),ITIO(295)
C
      WRITE(IFILE,'(/,A,/,10I7)')
     1' IDMAX,IDZ,IDS,IDX,IFTOT,ILOCP,ILOCB,IIWP,IIWB,IZZ=',
     1  IDMAX,IDZ,IDS,IDX,IFTOT,ILOCP,ILOCB,IIWP,IIWB,IZZ
      WRITE(IFILE,'(A,/,10I7)')
     1' (IPRW(i),i=1,10)=',(IPRW(I),I=1,10)
      DO 30 J=1,5
         WRITE(IFILE,'(A,/,10I7)')
     1 ' (IDRW(i,j),i=1,10)=',(IDRW(I,J),I=1,10)
   30 CONTINUE
      WRITE(IFILE,'(A,/,10I7)')
     1' (IPV1(i),i=1,10)=',(IPV1(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IPV2(i),i=1,10)=',(IPV2(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IDBUCK(i),i=1,10)=',(IDBUCK(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IMOAD(i),i=1,10)=',(IMOAD(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IDMODE(i),i=1,10)=',(IDMODE(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IMPHI(i),i=1,10)=',(IMPHI(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IDMOD2(i),i=1,10)=',(IDMOD2(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (ISHL(i),i=1,10)=',(ISHL(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (ITHK(i),i=1,10)=',(ITHK(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IARC(i),i=1,10)=',(IARC(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IPMODE(i),i=1,10)=',(IPMODE(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IPSMD(i),i=1,10)=',(IPSMD(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (IZREF(i),i=1,10)=',(IZREF(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (ICSKIN(i),i=1,10)=',(ICSKIN(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (ISTFPR(i),i=1,10)=',(ISTFPR(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (INSKIN(1,i),i=1,10)=',(INSKIN(1,I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (INSKIN(2,i),i=1,10)=',(INSKIN(2,I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (ITREF(i),i=1,10)=',(ITREF(I),I=1,10)
      WRITE(IFILE,'(A,/,10I7)')
     1' (ITIO(i),i=1,10)=',(ITIO(I),I=1,10)
C
      RETURN
      END
C
