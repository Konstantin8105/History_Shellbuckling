
August, 2009, updated May 19, 2011, updated July 4, 2011, updated July 28, 2011,
updated May 16, 2013

This file is called: span.runstream

RUNSTREAM USED TO PRODUCE THE OPTIMUM DESIGN
OF THE "CORRUGATED" PLATE UNDER AXIAL COMPRESSION

[In this case the GENOPT user (the writer) selected
 "span9" for the GENERIC case name and the end user
 (again, the writer in this instance) chose "fold94" for
 the SPECIFIC case name. The case is run in the
 directory, ../home/progs/genoptcase, in which
 "/home/progs" is the PARENT directory of GENOPT,
 BIGBOSOR4, PANDA2, etc. At your facility, replace
 the string, /home/progs with whatever directory is
 the PARENT directory of GENOPT, BIGBOSOR4, etc. where
 you are using GENOPT. NOTE: you MUST run cases in
 a directory that is called "genoptcase". The directory,
 genoptcase, must be immediately below what is the
 equivalent of "/home/progs" at your facility.]

The files generated from the following run stream for
the specific case called "fold94" are as follows:

-rw-r--r--   1 bush bush  4680 May 17 13:40 fold94.BEG
-rw-r--r--   1 bush bush  4098 May 17 14:11 fold94.superopt1.chg
-rw-r--r--   1 bush bush   299 May 19 09:36 fold94.CPL
-rw-r--r--   1 bush bush  7654 May 17 13:40 fold94.DEC
-rw-r--r--   1 bush bush   989 May 17 13:40 fold94.OPT
-rw-r--r--   1 bush bush  1277 May 17 15:17 fold94.bin
-rw-r--r--   1 bush bush 19668 May 17 14:42 fold94.optimized.antisymgenbuck.png
-rw-r--r--   1 bush bush 65655 May 17 15:11 fold94.optimized.genbuck.stags.png
-rw-r--r--   1 bush bush 19994 May 17 14:27 fold94.optimized.localbuck.png
-rw-r--r--   1 bush bush 18488 May 17 16:22 fold94.optimized.stagsmodel.png
-rw-r--r--   1 bush bush 19733 May 17 14:42 fold94.optimized.symgenbuck.png
-rw-r--r--   1 bush bush 14424 May 17 13:43 fold94.startingdesign.png
-rw-r--r--   1 bush bush 35043 May 17 13:48 fold94.superopt1.objective.png
-rw-r--r--   1 bush bush 16561 May 17 14:11 fold94.superopt1.opm

--------------------------------------------------------------------
BEGIN THE RUN STREAM

First, go to the directory, /home/progs/genoptcase :

cd /home/progs/genoptcase

genoptlog	(activate the GENOPT set of commands)

(The command, "genoptlog", produces the following screen:
--------------------------------------------------------------
GENOPT commands have been activated.

  gentext       GENOPT user generates a prompt file.
  genprograms   GENOPT user generates (makes) executables:
                begin, decide, mainsetup, optimize,
                change, chooseplot, and diplot.
  begin         End user provides starting data.
  decide        End user chooses decision variables, bounds,
                linked variables, and inequality constraints.
  mainsetup     End user sets up strategy parameters.
  optimize      End user performs optimization.
  change        End user changes some parameters.
  autochange    New values for decision variables randomly
  superopt      End user find global optimum (autochange/optimize)...
  superduperopt End user executes superopt/chooseplot x times...
  chooseplot    End user chooses which variable to plot vs.
                iterations.
  diplot        End user plots variables vs. iterations.
  insert        GENOPT user adds parameters to the problem.
  cleangen      GENOPT user cleans up GENeric case files.
  cleanspec     End user cleans up SPECific case files.
----------------------------------------------------------------

gentext		[provide generic case name ("span9"),
		 variable names, roles, one-line definitions,
		 "help" paragraphs, etc. The input data from
                 the long GENTEXT interactive session are saved
                 in the file, "span9.INP". Also,
                 see the files produced by GENTEXT called "span9.DEF"
                 and "span9.PRO". Tables 4 & 5 in the file, span9.DEF
		 describe the various files generated by GENTEXT.
		 Table 2 of the span9.DEF file is a glossary of the
		 variables established by the GENOPT user. Table 3
		 in the span9.DEF file lists the seven possible
		 roles that the GENOPT-user-named variables play.]


************* BEGIN THE 1ST DIGRESSION FROM THE RUN STREAM ***************

 After execution of GENTEXT the following "span9" files
 exist in the directory where GENTEXT was executed, that is,
 in the directory, /home/progs/genoptcase :]
------------------------------------------------------------------
-rw-rw-r-- 1 bush bush   2963 May 16 03:29 span9.CHA
-rw-rw-r-- 1 bush bush   1186 May 16 03:29 span9.COM (common blocks)
-rw-rw-r-- 1 bush bush   7444 May 16 03:29 span9.CON
-rw-rw-r-- 1 bush bush 107811 May 16 03:29 span9.DAT
-rw-rw-r-- 1 bush bush  35003 May 16 03:29 span9.DEF (documentation)
-rw-r--r-- 1 bush bush 107998 May 16 03:06 span9.INP (input for GENTEXT)
-rw-rw-r-- 1 bush bush  24644 May 16 03:29 span9.NEW
-rw-rw-r-- 1 bush bush  49678 May 16 03:29 span9.PRO (prompting file for end user)
-rw-rw-r-- 1 bush bush   1499 May 16 03:29 span9.REA
-rw-rw-r-- 1 bush bush    743 May 16 03:29 span9.SET
-rw-rw-r-- 1 bush bush  12188 May 16 03:29 span9.SUB
-rw-rw-r-- 1 bush bush   1499 May 16 03:29 span9.WRI
----------------------------------------------------------------

 The contents of these files is described in Table 5 of the span9.DEF
 file. 

 Next, create software that computes the design constraints
 and the objective. In this example create bosdec.span9,
 which generates valid input files for the BIGBOSOR4 preprocessor,
 B4READ, and "flesh out" the skeletal behavior.new file and the
 struct.new file that are automatically created by GENOPT. That is,
 create behavior.span9 from behavior.new and
 struct.span9 from struct.new. The "fleshing out" of struct.new
 is very simple in this "span9" application: only THREE lines
 are added to the version of struct.new created automatically
 by GENOPT. These three added lines are indicated below:

 The following is part of the "fleshed out" version of the struct.new file:
----------------------------------------------------------------------
C  USER: YOU MAY WANT TO INSERT SUBROUTINE CALLS FROM SOFTWARE DEVELOPED
C        ELSEWHERE FOR ANY CALCULATIONS PERTAINING TO THIS LOAD SET.
C
C
      CALL OPNGEN  <--added by the GENOPT user (the writer)
      CALL RWDGEN  <--added by the GENOPT user (the writer)
C
----------------------------------------------------------------------

 and

 The following is part of the struct.new file:
----------------------------------------------------------------------
C  NEXT, EVALUATE THE OBJECTIVE, OBJGEN:
      IF (ILOADX.EQ.1) THEN
         PHRASE ='weight/area of the truss-core sandwich wall'
         CALL BLANKX(PHRASE,IENDP4)
         CALL OBJECT(IFILE8,NPRINX,IMODX,OBJGEN,
     1    'weight/area of the truss-core sandwich wall')
      ENDIF
      NCONSX = ICONSX
C
      CALL CLSGEN  <--added by the GENOPT user (the writer)
C
      RETURN
      END
---------------------------------------------------------------------

 The three added statements, CALL OPNGEN, CALL RWDGEN, and CALL CLSGEN,
 open, rewind, and close various files used by BIGBOSOR4. If you
 plan to optimize some other shell using GENOPT/BIGBOSOR4 you can
 "flesh out" struct.new in exactly the same way. To find the places
 in the "skeletal" version of struct.new that is automatically
 produced by GENTEXT, search for the string, "YOU MAY WANT" in order
 to find where you should insert the two lines, CALL OPNGEN and
 CALL RWDGEN. Search for the string, "NCONSX", in order to find
 where you should insert the line, CALL CLSGEN. Sometimes, in
 your other applications of GENOPT, you may want to add more coding
 to the "skeletal" version of struct.new, as was done in [2] and [3],
 especially in [3], where all of the computations are done in struct.new
 and the "skeletal" version of behavior.new produced automatically
 by GENOPT remains unchanged in [3].

 Most of the work in this project was the creation by the GENOPT user
 (the writer of this report) of the files, behavior.span9 and bosdec.span9.
 The "fleshed out" version of behavior.new is called "behavior.span9"
 There are five "behavior" subroutines: BEHX1, BEHX2,
 BEHX3, BEHX4, BEHX5, corresponding to the five behavioral constraints
 established by the GENOPT user during the long GENTEXT interactive
 session. The GENOPT user must also "flesh out" the subroutine
 that computes the objective, SUBROUTINE OBJECT.

 The "BEHXi", i = 1,2,3,4,5, subroutines compute the following:

 SUBROUTINE BEHX1 computes the LOCAL buckling load factor. Buckling is
                  assumed to be SYMMETRIC at the symmetry plane at
                  x = WIDTH/2.

 SUBROUTINE BEHX2 computes the GENERAL buckling load factor for which
                  the buckling mode is SYMMETRIC about the symmetry
                  plane at x = WIDTH/2.

 SUBROUTINE BEHX3 computes the GENERAL buckling load factor for which
                  the buckling mode is ANTISYMMETRIC about the symmetry
                  plane at x = WIDTH/2.

 SUBROUTINE BEHX4 computes "classical" buckling load factors for the
                  NSEG major corrugation segments over the half-width,
                  WIDTH/2. Each of these "classical" buckling load factors
                  includes an appropriate knockdown factor computed from
                  a curve given in the 1975 book by Brush and Almroth. The
                  radius of the ith major segment is either RPLATE(i) or
                  RSUBSEG(i), whichever is relevant. If the ith "corrugation"
                  segment has no subsegments, then RPLATE(i) is the radius.
                  If the ith corrugation has subsegments, then RSUBSEG(i)
                  is the radius.

 SUBROUTINE BEHX5 computes the axial stress (stress in the z-direction).

 SUBROUTINE OBJECT computes the objective, which in this case
                   is the weight of the "corrugated" panel of
                   width, WIDTH, and length, LENGTH.


 ******** NOTE **********
 If you plan to use GENOPT in combination with BIGBOSOR4 for
 optimizing other shells of revolution which have buckling
 behavior, you can use the list of SUBROUTINE BEHX2 or of
 SUBROUTINE BEHX3 here as a guide. This is what the writer did
 in the present "span9" case. The writer simply took the
 coding he had added to the "skeletal" versions of SUBROUTINE BEHXi,
 i = 1 and 2, listed in Table 10 of [4] (the "weldland" case) and
 inserted that coding where it says "INSERT SUBROUTINE STATEMENTS HERE"
 in the "skeletal" BEHX2 and BEHX3 subroutines in the "span9" case.
 Then he edited that "weldland" coding in order to make it applicable
 to the buckling behavior in the "span9" case. NOTE: SUBROUTINE BEHX1
 contains a section with similar coding to that in SUBROUTINES BEHX2
 and BEHX3. This section in BEHX1 was created in a manner analogous to
 the analogous parts of SUBROUTINES BEHX2 and BEHX3. SUBROUTINE BEHX1
 also contains a long section similar to that in the beginning of
 SUBROUTINE BOSDEC (see /home/progs/bosdec/sources/bosdec.span9.)
 ******** END NOTE *******]

 NOTE: make it a habit to develop the "behavior", "struct", and
 "bosdec" files using different suffices than ".new" or ".src".
 By this practice you will not lose work should you execute
 GENTEXT again after you have already added FORTRAN coding to behavior.new
 and to struct.new, which are over-written by GENTEXT. In this
 "span9" case the writer initially copied behavior.new
 and struct.new (the "skeletal" versions created automatically by
 GENOPT after completion of the GENTEXT interactive session) to
 behavior.span9 and struct.span9, then he "fleshed out"
 the behavior.span9 and struct.span9 files. Also, the
 writer developed his version of "bosdec" in a file called
 "bosdec.span9". Then, just before execution of "genprograms",
 the writer did the following:
-----------------------------------------------------------------------------------
 cp behavior.span9 behavior.new  (behavior.span9 and struct.span9 are
 cp struct.span9 struct.new       developed in the directory: /home/progs/genoptcase)
 cd /home/progs/bosdec/sources   (NOTE: "bosdec" is stored in a different directory)
 cp bosdec.span9 bosdec.src
 cd /home/progs/genoptcase       (return to the "genoptcase" directory before
                                  executing "genprograms")
----------------------------------------------------------------------------------

************* END OF THE 1ST DIGRESSION FROM THE RUN STREAM **********


genprograms	(compiles the software created by GENOPT and
		 "fleshed out" and added by the GENOPT user)


*********** BEGIN THE 2ND DIGRESSION FROM THE RUN STREAM *************

 If compilation is successful, the following is listed on
 your computer screen:
--------------------------------------------------------------
Congratulations!  Your code compiled successfully.  You should
now check to make sure that you get correct results from a
simple test case with a known answer before attempting a more
complicated case.

Here is a list of all your newly created executables:
-rwxr-xr-x  1 bush bush 82322 May 16 14:59 autochange.$(MACHINE)
-rwxr-xr-x  1 bush bush 173890 May 16 14:59 begin.$(MACHINE)
-rwxr-xr-x  1 bush bush 128669 May 16 14:59 change.$(MACHINE)
-rwxr-xr-x  1 bush bush 155276 May 16 14:59 chooseplot.$(MACHINE)
-rwxr-xr-x  1 bush bush 159904 May 16 14:59 decide.$(MACHINE)
-rwxr-xr-x  1 bush bush 101422 May 16 14:59 mainsetup.$(MACHINE)
-rwxr-xr-x  1 bush bush 1625609 May 16 14:59 optimize.$(MACHINE)
-rwxr-xr-x  1 bush bush 119355 May 16 14:59 store.$(MACHINE)

where $(MACHINE) = linux  (for 32-bit machines)
                 = x86_64 (for 64-bit machines)

Next, type the command BEGIN to input data for a new case.
--------------------------------------------------------------


 NOTE: You may see the lines above even when you still have errors
       in your newly "fleshed out" and created FORTRAN coding. You
       will doubtless discover additional errors when you first execute
       "OPTIMIZE". Make your corrections to the behavior.span9,
       struct.span9, and bosdec.span9 files, then again copy
       them to behavior.new, struct.new, and bosdec.src as specified
       above, and then give the command, "genprograms" again. Keep
       doing this until you are satisfied that there are no more
       errors in your FORTRAN coding. Go through this "error-
       elimination loop" before you try to do any optimization.
       That is, specify ITYPE = 2 and NPRINT = 2 in the *.OPT
       file (input for MAINSETUP, listed below) while you are in this
       error-elimination phase of your work. Only when you are satisfied
       that behavior.span9, struct.span9, and bosdec.span9
       are correct should you attempt to do any optimization (ITYPE = 1
       and NPRINT = 0 in the *.OPT file).

 
 Concerning the use of the GENOPT processor called "INSERT":

 It may well happen that, after you have already developed
 behavior.span9, struct.span9, and bosdec.span9 as just
 described, you may want to add one or more variables to your generic
 case. You can use "INSERT" to do this. However, note that if you add
 (or take away) any variables, the labelled common blocks produced
 automatically by GENTEXT will change. These new common blocks will be
 present in the new "skeletal" versions of behavior.new and struct.new
 generated automatically by your re-run of GENTEXT. Also, if you add
 one or more "behaviors", GENTEXT creates additional FORTRAN coding in
 the behavior.new and struct.new libraries.


 Concerning "behavior" and "struct" after you have used "INSERT":

 With regard to the "behavior" and the "struct" libraries, You now have
 a choice between the following Choice 1 or Choice 2:

 Choice 1. You can add your "fleshed out" FORTRAN coding now contained only in
 behavior.span9, struct.span9, to the latest "skeletal" versions,
 behavior.new and struct.new, then type the commands:

 cp behavior.new behavior.span9  (Be careful! you may be destroying
 cp struct.new struct.span9       your previous work if you have not
                                  updated behavior.new and/or
                                  struct.new correctly.)

 This is almost always the best choice, as explained below in the section
 entitled "Why Choice 1 is a better procedure than Choice 2".

 Choice 2. You can replace the old, GENTEXT-created, common blocks with the
 new common blocks located in the file, *.COM (e.g. "*" = "span9")
 in your behavior.span9 and struct.span9 files. This is not
 generally the best choice because you may have used "INSERT" to add new
 "behaviors" and/or to change the names and one-line definitions of one
 or more of the problem variables.


 Why Choice 1 is a better procedure than Choice 2:

 Sometimes it is not just the common blocks that change but also
 the GENTEXT-created FORTRAN coding in behavior.new and struct.new.
 That is what happens if you use "INSERT" to add new behaviors.
 Also, you may have changed the wording in one or more of the one-line
 definitions of the variables. These changes in wording of the one-line
 definitions of the variables exist only in the new "skeletal" behavior.new
 and struct.new files. Therefore, it is best (safest procedure) to port your
 "fleshed out" FORTRAN coding from your behavior.span9 and struct.span9
 files to the new "skeletal" behavior.new and struct.new files produced
 automatically by GENTEXT, then (only after you are certain that you
 have done everything correctly!) copy the "fleshed out" behavior.new into
 behavior.span9 and the "fleshed out" struct.new into struct.span9.
 Always save copies of your behavior.span9 and struct.span9 in case you
 make a mistake with your new updates.

 Here is how the writer updates struct.new and behavior.new after using
 "INSERT" or otherwise modifying the span9.INP file (span9.INP is the input
 for GENTEXT):

 1. Updating struct.new: Find the three added lines, CALL OPNGEN,
 CALL RWDGEN, and CALL CLSGEN, in the struct.span9 file and add these
 same three lines at the appropriate places in the struct.new file.

 2. Updating behavior.new: Do the following steps:

  a. Copy behavior.span9 into temp.new (or some such name):
     cp behavior.span9 temp.new

  b. Edit temp.new by removing everything in temp.new except the
     statements that are bracketed by the following lines in
     SUBROUTINE BEHX1:
    
  C  INSERT SUBROUTINE STATEMENTS HERE.
  C

     RETURN
     END

  c. Edit behavior.new by inserting the version of temp.new as edited
     in item b after the following lines in behavior.new:

  C  INSERT SUBROUTINE STATEMENTS HERE.
  C

  d. Save the new version of behavior.new .

  e. Repeat Steps a. - d. in connection with SUBROUTINE BEHX2 .

  f. Repeat Steps a. - d. in connection with SUBROUTINE BEHX3 .

  g. Repeat Steps a. - d. in connection with SUBROUTINE BEHX4 .

  h. Repeat Steps a. - d. in connection with SUBROUTINE BEHX5 .

  i. Repeat Steps a. - d. in connection with SUBROUTINE OBJECT .

 
 Concerning SUBROUTINE BOSDEC (located in the directory
 /home/progs/bosdec/sources) after using "INSERT" or otherwise
 changing span9.INP: 

 In the case of the file, /home/progs/bosdec/sources/bosdec.span9,
 you have to copy the new GENTEXT-created common blocks, located in
 /home/progs/genoptcase/span9.COM, into the proper place in the
 bosdec.span9 file and then remove the old GENTEXT-created common blocks
 from bosdec.span9. Since bosdec.span9 contains only FORTRAN code produced
 by you, you don't have to worry about any new GENTEXT-created FORTRAN code
 there (other than the previously mentioned labelled common blocks) because
 there isn't any. You simply have to update the GENTEXT-created labelled
 common blocks that appear at the beginning of SUBROUTINE BOSDEC.


 Concerning modification of only the "help" paragraphs in the file *.INP
 (span9.INP):

 After you run BEGIN you will probably come to the conclusion that the
 end user will need more "help" information than you have provided. You
 can do this by editing the *.INP (span9.INP) file. Just be sure to
 follow the pattern that exists in the *.INP file. For example, for each
 new line of a "help" paragraph there exists a following line:

        y         $ Are there more lines in the "help" paragraph?

 As you add new "help" lines make sure in your editing that you follow
 each new "help" line with the line printed above. The last line in
 the "help" input is always followed by the line:

        n         $ Are there more lines in the "help" paragraph?

 You can, in the same way, add a new "help" paragraph where there was
 none previously. You would change the line:

        n         $ Do you want to include a "help" paragraph?

 to

        y         $ Do you want to include a "help" paragraph?

 and then proceed as is done elsewhere in the *.INP file for variables
 that have "help" paragraphs.

*********** END OF THE 2ND DIGRESSION FROM THE RUN STREAM ****************


Next, execute "BEGIN":
 
begin		[provide starting design, material, loading,
		 allowables and factors of safety for the
                 following "behaviors":
		  1. local   buckling (computed in SUBROUTINE BEHX1)
		  2. general symmetric buckling (computed in SUBROUTINE BEHX2)
                  3. general antisymmetric buckling (computed in SUBROUTINE BEHX3)
                  4. "classical" buckling, which automatically includes suitable
                     knockdown factors that are computed in SUBROUTINE BEHX4)
		  5. maximum axial stress (stress in the z-direction of the
                     corrugated plate = circumferential stress in the "huge
                     corrugated annulus" model of the corrugated plate)
                     (computed in SUBROUTINE BEHX5) 
		 BEGIN saves your interactive input in the file, fold94.BEG,
                 in which "fold94" is your SPECIFIC name for the case.
                 In this example we use "fold94" for the SPECIFIC case name.]

(The command, BEGIN, starts an interactive session, the beginning
 of which presents the following to your computer screen:)
------------------------------------------------------------------
 THE NAME OF THE PROMPT FILE ASKED FOR NEXT
 IS THE NAME OF THE CLASS OF PROBLEMS THAT THE GENOPT-USER
 HAS CHOSEN, NOT THE NAME OF THE PARTICULAR CASE BEING
 STUDIED HERE. IT IS THE "NAME" PART OF "NAME".PRO.

  ENTER THE GENERIC CASE NAME: span9 

 FROM HERE ON, WHENEVER THE CASE NAME IS REQUESTED,
 YOU PROVIDE THE NAME OF THE PARTICULAR INSTANCE IN THE CLASS
 OF PROBLEMS THAT YOU ARE NOW STUDYING.  THIS NAME MUST BE
 DIFFERENT FROM THE NAME YOU HAVE JUST PROVIDED ABOVE.

  ENTER THE SPECIFIC CASE NAME: fold94 


 ****************   BEGIN   ******************

 Purpose of BEGIN is to permit you to provide a starting design
 in an interactive mode. You give starting dimensions, material
 properties, allowables. The interactive session is stored on
 a file called fold94.BEG, in which fold94 is a name that you
 have chosen for the specific case. (The name, fold94, must
 remain the same as you use BEGIN, DECIDE, MAINSETUP, OPTIMIZE,
 and CHANGE.)  In future runs of the same or a
 slightly modified case, you will find it convenient to use the
 file fold94.BEG as input.  Rather than answer all the questions
 interactively, you can use fold94.BEG or an edited version of
 fold94.BEG as input to BEGIN.  BEGIN also generates an output
 file called fold94.OPB. OPB lists a summary of the case, and if
 you choose the tutorial option, the questions, helps, and your
 answers for each input datum.

 *************************************************
------------------------------------------------------------------

(When you have completed BEGIN you will have the file, fold94.BEG,
 which can be used in any future execution of BEGIN for the same
 SPECIFIC case.)

decide		(provide decision variables, bounds, equality
		 constraints (linking expressions), and inequality
		 constraints. DECIDE saves your interactive input
		 in the file, fold94.DEC).

mainsetup	(provide strategy, analysis type, etc.. MAINSETUP
		 saves your interactive input in the file, fold94.OPT).

superopt        (obtain a "global" optimum design. Use
                 5 "OPTIMIZEs" per AUTOCHANGE. This computer
                 run takes about 5 hours on my LINUX machine.)

(Inspect the fold94.OPP file)

chooseplot      (choose what to plot vs design iterations. The
                 interactive CHOOSEPLOT session is saved in the
                 file, fold94.CPL, which is as follows:)
---------------------------------------------------------------------------
      n         $ Do you want a tutorial session and tutorial output?
      n         $ Any design variables to be plotted v. iterations (Y or N)?
      n         $ Any design margins to be plotted v. iterations (Y or N)?
      n         $ Do you want to get more plots before your next "SUPEROPT"?
---------------------------------------------------------------------------

[Note that following a complete SUPEROPT run (about 470 design iterations)
 we make no attempt to plot design variables or margins vs design iterations.
 The plots would be too messy because there are so many design iterations.
 We therefore obtain only a plot of the objective vs design iterations.]

diplot          [obtain the postscript file, fold94.5.ps (design
                 objective vs design iterations)]

gv fold94.5.ps  [view the plot of the objective vs. design iterations
		 on your screen vi the utility, "ghost view" (gv)]

(Take a "snapshot" of the plot and save as: fold94.superopt1.objective.png)


(Edit the fold94.OPT file in order to obtain the analysis of a fixed
 design, that is, change ITYPE from 1 to 2 and change NPRINT from 1 to 2)

mainsetup       (set up a run for the fixed, previously optimized, design.
                 see the top part of the file, fold94.superopt1.opm)

optimize        (Start the "batch" run that computes results for the
                 fixed design.  These results are listed in
                 the file, fold94.superopt1.opm. "OPTIMIZE", when executed in the
                 ITYPE = 2 mode, produces three files that contain valid
                 input for BIGBOSOR4:

                 fold94.BEHX1 = BIGBOSOR4 input file for LOCAL   buckling
                 fold94.BEHX2 = BIGBOSOR4 input file for symmetric GENERAL buckling.
                 fold94.BEHX3 = BIGBOSOR4 input file for antisymmetric GENERAL buckling.

                 Just below in this runstream fold94.BEHX1, fold94.BEHX2, and fold94.BEHX3
                 are used, as you will see next.)

change          (Use the processor, CHANGE, to save the optimum design.
                 The interactive CHANGE session is saved in the file,
                 fold94.CHG)


(Next, we want to execute BIGBOSOR4 to obtain plots corresponding to
 local buckling and general buckling. First, copy the three files,
 fold94.BEHX1, fold94.BEHX2, and fold94.BEHX3, into a directory from which you want to
 execute BIGBOSOR4:)

cp fold94.BEHX1 /home/progs/bigbosor4/workspace/.    (LOCAL   buckling input)
cp fold94.BEHX2 /home/progs/bigbosor4/workspace/.    (GENERAL symmetric buckling input)
cp fold94.BEHX3 /home/progs/bigbosor4/workspace/.    (GENERAL antisymmetric buckling input)

(Go to the directory where you want to run BIGBOSOR4.)

cd /home/progs/bigbosor4/workspace

bigbosor4log	(activate BIGBOSOR4 commands)

(The command, "bigbosor4log", presents the following to
 your screen:)
---------------------------------------------------------
The BIGBOSOR4 commands, in the general order in which
you would probably use them (except in GENOPT applications), are:

help4           (get information on BOSOR4.)
input           (you provide segment-by-seg. input)
assemble        (concatenates segment data files)
bigbosorall     (batch run of pre, main, post proc.)
bosorplot       (batch run for generating plot files)
resetup         (input for restart run, same model)
bigrestart      (batch run of main & postprocessors)
cleanup         (delete all except for .DOC file)
getsegs         (generate segment files from .DOC)
modify          (modify a segment file)
-----------------------------------------------------------


(Copy the BIGBOSOR4 input file for LOCAL buckling, fold94.BEHX1,
 into fold94.ALL because BIGBOSOR4 input files must always have
 the three-letter suffix, ".ALL":)

cp fold94.BEHX1 fold94.ALL

bigbosorall	(Start "batch" run for LOCAL buckling. The output
		 file that you want to inspect is called fold94.OUT.
		 This will be a long file, so search specifically
		 for the string, "EIGENVALUE(", typed with the
		 "(" at the end of the string. You will find the
		 following output there:
-----------------------------------------------------------------
 **** CRITICAL EIGENVALUE AND WAVENUMBER ****
 EIGCRT=  2.0201E+00; NO. OF AXIAL HALF WAVES, NWVCRT=    1
 ****************************************************

 ***** EIGENVALUES AND MODE SHAPES *****
  EIGENVALUE(AXIAL HALF WAVES)
 =======================================
    2.0201E+00(     1) <--critical local buckling
    2.2216E+00(     2)
    2.3144E+00(     3)
    2.3893E+00(     4)
    2.3758E+00(     5)
    2.4123E+00(     6)
    2.4069E+00(     7)
    2.4179E+00(     8)
    2.4322E+00(     9)
    2.4394E+00(    10)
    2.4442E+00(    11)
    2.4502E+00(    12)
    2.4574E+00(    13)
    2.4650E+00(    14)
    2.4725E+00(    15)
    2.4797E+00(    16)
    2.4866E+00(    17)
    2.4937E+00(    18)
    2.5010E+00(    19)
    2.5080E+00(    20)
    2.5150E+00(    21)
    2.5219E+00(    22)
    2.5285E+00(    23)
    2.5345E+00(    24)
    2.5387E+00(    25)
    2.5409E+00(    26)
    2.5424E+00(    27)
    2.5438E+00(    28)
    2.5450E+00(    29)
    2.5460E+00(    30)
 =======================================
------------------------------------------------------------------

[The critical buckling mode has 1 axial half-wave over the
 "effective" length = FACLEN x LENGTH = 0.3 x 100 inches, in
 which LENGTH is the actual length of the corrugated plate.
 The end user must supply a value for FACLEN during
 the "BEGIN" interactive session. See the fold94.BEG file,
 in particular, the line:
 0.30  $ fraction of LENGTH for local buckling model: FACLEN

(The critical LOCAL buckling load factor is 2.0201)


bosorplot	(obtain a plot of the critical LOCAL buckling mode.
		 The postscript file is called "metafile.ps".)

(execution of bosorplot presents the following to your computer
 screen:)
----------------------------------------------------------------
Please enter the BIGBOSOR4 case name: fold94 

Do you want to use Xgraph or create a PostScript file? (Choose X or P) p

One, maybe Two moments please...

Text file(s) have been created containing plot data.  The names of the
files explain to a greater or lesser extent what the data represent.
Some plot files contain data for more than one plot.
1)      fold94..R,Z_EIGENMODE_1--N_1
2)      fold94..R,Z_EIGENMODE_1--N_10
3)      fold94..R,Z_EIGENMODE_1--N_11
4)      fold94..R,Z_EIGENMODE_1--N_12
5)      fold94..R,Z_EIGENMODE_1--N_13
6)      fold94..R,Z_EIGENMODE_1--N_14
7)      fold94..R,Z_EIGENMODE_1--N_15
8)      fold94..R,Z_EIGENMODE_1--N_16
9)      fold94..R,Z_EIGENMODE_1--N_17
10)     fold94..R,Z_EIGENMODE_1--N_18
11)     fold94..R,Z_EIGENMODE_1--N_19
12)     fold94..R,Z_EIGENMODE_1--N_2
13)     fold94..R,Z_EIGENMODE_1--N_20
14)     fold94..R,Z_EIGENMODE_1--N_21
15)     fold94..R,Z_EIGENMODE_1--N_22
16)     fold94..R,Z_EIGENMODE_1--N_23
17)     fold94..R,Z_EIGENMODE_1--N_24
18)     fold94..R,Z_EIGENMODE_1--N_25
19)     fold94..R,Z_EIGENMODE_1--N_26
20)     fold94..R,Z_EIGENMODE_1--N_27
21)     fold94..R,Z_EIGENMODE_1--N_28
22)     fold94..R,Z_EIGENMODE_1--N_29
23)     fold94..R,Z_EIGENMODE_1--N_3
24)     fold94..R,Z_EIGENMODE_1--N_30
25)     fold94..R,Z_EIGENMODE_1--N_4
26)     fold94..R,Z_EIGENMODE_1--N_5
27)     fold94..R,Z_EIGENMODE_1--N_6
28)     fold94..R,Z_EIGENMODE_1--N_7
29)     fold94..R,Z_EIGENMODE_1--N_8
30)     fold94..R,Z_EIGENMODE_1--N_9
31)     fold94..R,Z_RingLocation
CR)     to QUIT
Please choose the number of the file you wish to plot: 1
Plotting: Undeformed & Deformed Axial Station as a function of Radius

The PostScript file, metafile.ps, has been created.
Please choose one of the three options below:

   1) Rename the PostScript file.  This is useful if
      you don't have access to a PostScript printer on your
      machine, but you wish to save to a file so you can later
      transfer it to a different machine for printing.

         Example:  mv metafile.ps plot1.ps

   2) Enter an "lpr" command.  This is useful if your default
      printer is not PostScript, but there is a PostScript
      printer available on your system.

         Example:  lpr -PApplelaser metafile.ps

   3) Press the return key.  This executes the command:

                   lpr metafile.ps

      This assumes that your default printer is a PostScript
      printer.

Enter your command> <CR>
Printing PostScript plot on the default printer...

Text file(s) have been created containing plot data.  The names of the
files explain to a greater or lesser extent what the data represent.
Some plot files contain data for more than one plot.
1)      fold94..R,Z_EIGENMODE_1--N_1
2)      fold94..R,Z_EIGENMODE_1--N_10
3)      fold94..R,Z_EIGENMODE_1--N_11
4)      fold94..R,Z_EIGENMODE_1--N_12
5)      fold94..R,Z_EIGENMODE_1--N_13
6)      fold94..R,Z_EIGENMODE_1--N_14
7)      fold94..R,Z_EIGENMODE_1--N_15
8)      fold94..R,Z_EIGENMODE_1--N_16
9)      fold94..R,Z_EIGENMODE_1--N_17
10)     fold94..R,Z_EIGENMODE_1--N_18
11)     fold94..R,Z_EIGENMODE_1--N_19
12)     fold94..R,Z_EIGENMODE_1--N_2
13)     fold94..R,Z_EIGENMODE_1--N_20
14)     fold94..R,Z_EIGENMODE_1--N_21
15)     fold94..R,Z_EIGENMODE_1--N_22
16)     fold94..R,Z_EIGENMODE_1--N_23
17)     fold94..R,Z_EIGENMODE_1--N_24
18)     fold94..R,Z_EIGENMODE_1--N_25
19)     fold94..R,Z_EIGENMODE_1--N_26
20)     fold94..R,Z_EIGENMODE_1--N_27
21)     fold94..R,Z_EIGENMODE_1--N_28
22)     fold94..R,Z_EIGENMODE_1--N_29
23)     fold94..R,Z_EIGENMODE_1--N_3
24)     fold94..R,Z_EIGENMODE_1--N_30
25)     fold94..R,Z_EIGENMODE_1--N_4
26)     fold94..R,Z_EIGENMODE_1--N_5
27)     fold94..R,Z_EIGENMODE_1--N_6
28)     fold94..R,Z_EIGENMODE_1--N_7
29)     fold94..R,Z_EIGENMODE_1--N_8
30)     fold94..R,Z_EIGENMODE_1--N_9
31)     fold94..R,Z_RingLocation
CR)     to QUIT
Please choose the number of the file you wish to plot: <CR>
---------------------------------------------------------------------

(In order to view the plot of the local buckling mode, type
 the command:)

gv metafile.ps

("gv" stands for "ghost view" a LINUX utility which presents
 the postscript file, metafile.ps, as a plot on your screen.
 If you do not have "ghost view", just send the postscript
 file to your printer with whatever command is appropriate at
 your facility for obtaining plots from postscript files.
 The plot of the local buckling mode is displayed in the
 file, fold94.optimized.locbuck.png))

[If you want to plot more local buckling modes, give the
 command, "bosorplot", again and choose another mode, such
 as that corresponding to 7 axial half-waves (option no.28 above,]


(Next, "clean up" the BIGBOSOR4 files:)

cleanup		(deletes unneeded BIGBOSOR4 files and
		 generates a properly annotated fold94.ALL
		 file and a properly annotated fold94.DOC file.)


(Next, we wish to obtain a plot of the critical symmetric GENERAL
 buckling mode from execution of BIGBOSOR4 and BOSORPLOT:)

(Copy the BIGBOSOR4 input file for symmetric GENERAL buckling, fold94.BEHX2,
 into fold94.ALL because BIGBOSOR4 input files must always have
 the three-letter suffix, ".ALL":)

cp fold94.BEHX2 fold94.ALL

bigbosorall     (Start "batch" run for GENERAL buckling. The output
                 file that you want to inspect is called fold94.OUT.
                 This will be a very long file, so search specifically
                 for the string, "EIGENVALUE(", typed with the
                 "(" at the end of the string. You will find the
                 following output there:
-----------------------------------------------------------------
 **** CRITICAL EIGENVALUE AND WAVENUMBER ****
 EIGCRT=  1.4386E+00; NO. OF AXIAL HALF WAVES, NWVCRT=    1
 ****************************************************

 ***** EIGENVALUES AND MODE SHAPES *****
  EIGENVALUE(AXIAL HALF WAVES)
 =======================================
    1.4386E+00(     1) <--critical general buckling with
    1.6075E+00(     2)    symmetry at x = WIDTH/2.
    2.0827E+00(     3)
    2.0424E+00(     4)
    2.2540E+00(     5)
 =======================================
-----------------------------------------------------------------

(The critical buckling mode has 1 axial half-wave over the
 length, LENGTH = 100 inches. The critical general buckling
 load factor corresponding to symmetry at the symmetry plane
 at x = WIDTH/2 is 1.4386)


bosorplot       (obtain a plot of the critical GENERAL buckling mode.)

(execution of bosorplot presents the following to your computer
 screen:)
----------------------------------------------------------------
Please enter the BIGBOSOR4 case name: fold94 

Do you want to use Xgraph or create a PostScript file? (Choose X or P) p

One, maybe Two moments please...

Text file(s) have been created containing plot data.  The names of the
files explain to a greater or lesser extent what the data represent.
Some plot files contain data for more than one plot.
1)      fold94..R,Z_EIGENMODE_1--N_1
2)      fold94..R,Z_EIGENMODE_1--N_2
3)      fold94..R,Z_EIGENMODE_1--N_3
4)      fold94..R,Z_EIGENMODE_1--N_4
5)      fold94..R,Z_EIGENMODE_1--N_5
6)      fold94..R,Z_RingLocation
CR)     to QUIT
Please choose the number of the file you wish to plot: 1
Plotting: Undeformed & Deformed Axial Station as a function of Radius

etc. etc. (as above in the local buckling example).

The symmetric general buckling mode is displayed in the file,
fold94.optimized.symgenbuck.png

-----------------------------------------------------------------------

(Next, "clean up" the BIGBOSOR4 files:)

cleanup         (deletes unneeded BIGBOSOR4 files and
                 generates  properly annotated fold94.ALL
                 and fold94.DOC files.)


(Next, we wish to obtain a plot of the critical anti-symmetric GENERAL
 buckling mode from execution of BIGBOSOR4 and BOSORPLOT:)

(Copy the BIGBOSOR4 input file for anti-symmetric GENERAL buckling, fold94.BEHX3,
 into fold94.ALL because BIGBOSOR4 input files must always have
 the three-letter suffix, ".ALL":)

cp fold94.BEHX3 fold94.ALL

bigbosorall     (Start "batch" run for anti-symmetric GENERAL buckling. The
                 output file that you want to inspect is called fold94.OUT.
                 This will be a very, very long file, so search specifically
                 for the string, "EIGENVALUE(", typed with the
                 "(" at the end of the string. You will find the
                 following output there:
-----------------------------------------------------------------
 **** CRITICAL EIGENVALUE AND WAVENUMBER ****
 EIGCRT=  1.4440E+00; NO. OF AXIAL HALF WAVES, NWVCRT=    1
 ****************************************************

 ***** EIGENVALUES AND MODE SHAPES *****
  EIGENVALUE(AXIAL HALF WAVES)
 =======================================
    1.4440E+00(     1) <---critical general buckling
    1.6280E+00(     2)     anti-symmetric at WIDTH/2
    2.1245E+00(     3)
    2.0505E+00(     4)
    2.2540E+00(     5)
 =======================================
-----------------------------------------------------------------

(The critical buckling mode has 1 axial half-wave over the
 length, LENGTH = 100 inches. The critical general buckling
 load factor corresponding to anti-symmetry at the symmetry plane
 at x = WIDTH/2 is 1.4440)


bosorplot       (obtain a plot of the critical GENERAL buckling mode.
                 The postscript file is called "metafile.ps"(Fig. 6).)

(execution of bosorplot presents the following to your computer
 screen:)
----------------------------------------------------------------
Please enter the BIGBOSOR4 case name: fold94 

Do you want to use Xgraph or create a PostScript file? (Choose X or P) p

One, maybe Two moments please...

Text file(s) have been created containing plot data.  The names of the
files explain to a greater or lesser extent what the data represent.
Some plot files contain data for more than one plot.
1)      fold94..R,Z_EIGENMODE_1--N_1
2)      fold94..R,Z_EIGENMODE_1--N_2
3)      fold94..R,Z_EIGENMODE_1--N_3
4)      fold94..R,Z_EIGENMODE_1--N_4
5)      fold94..R,Z_EIGENMODE_1--N_5
6)      fold94..R,Z_RingLocation
CR)     to QUIT
Please choose the number of the file you wish to plot: 1
Plotting: Undeformed & Deformed Axial Station as a function of Radius

etc. etc. (as above in the local buckling example).

The anti-symmetric general buckling mode is displayed in the file,
fold94.optimized.antisymgenbuck.png
-----------------------------------------------------------------------

(Next, "clean up" the BIGBOSOR4 files:)

cleanup         (deletes unneeded BIGBOSOR4 files and
                 generates  properly annotated fold.ALL
                 and fold94.DOC files)
-----------------------------------------------------------------------

Next, runs STAGS.

The span9 software generates STAGS input files, fold94.inp and fold94.inp2.
The file, fold94.inp2 is the preferred file, since it models the entire width,
WIDTH of the optimized "corrugated" panel.

STAGS requires two input files, *.inp and *.bin. We have the fold94.bin file
for linear buckling stored with the other "fold94" files. In order to run
STAGS for the optimized fold94 configuration and loading, we must copy the
fold94.inp2 and fold94.bin files to a working directory from which we want
to execute STAGS:

cp /home/progs/genoptcase/fold94.bin (working directory for running STAGS)/fold94.bin
cp /home/progs/genoptcase/fold94.inp2 (working directory for running STAGS)/fold94.inp
cd (working directory for running STAGS)
source (the STAGS program command set)
stags -b fold94		(execute STAGS; input files: fold94.bin and fold94.inp)
(When the STAGS linear buckling execution has finished, we obtain a plot
of the linear buckling mode via the following command:)

stapl fold94

(A file called "fold94.pdf" is generated.)
(The general buckling mode is plotted in the file,
 fold94.optimized.genbuck.stags.png)
--------------------------------------------------------------------------------

We are finished running the case, fold94. Clean up the "fold94" files:

cleanspec	(clean up the "fold94" files)
-------------------------------------------------------------------------------

The run stream is analogous for the specific case called "fold94S", which
means "fold94 with the addition of sub-segments. The file,
fold94S.startingdesign.png, shows the starting design. The files,
fold94S.optimized.stagsmodel.png and fold94S.optimized.stagsmodel.zoom.png
show the STAGS model of the optimized configuration. The "fold94S" files
generated from the run stream that is analogous to that for the specific
case called "fold94" are as follows:

-rw-r--r--   1 bush bush  6016 May 17 16:10 fold94S.BEG
-rw-r--r--   1 bush bush  4245 May 18 10:35 fold94S.superopt1.chg
-rw-r--r--   1 bush bush   299 May 19 09:37 fold94S.CPL
-rw-r--r--   1 bush bush  8853 May 17 16:10 fold94S.DEC
-rw-r--r--   1 bush bush   990 May 17 16:10 fold94S.OPT
-rw-r--r--   1 bush bush 19671 May 18 10:20 fold94S.optimized.antisymgenbuck.png
-rw-r--r--   1 bush bush 68075 May 18 10:10 fold94S.optimized.genbuck.stags.png
-rw-r--r--   1 bush bush 18613 May 18 10:01 fold94S.optimized.localbuck.png
-rw-r--r--   1 bush bush 16586 May 18 10:06 fold94S.optimized.stagsmodel.png
-rw-r--r--   1 bush bush 43076 May 18 10:12 fold94S.optimized.stagsmodel.zoom.png
-rw-r--r--   1 bush bush 19464 May 18 10:17 fold94S.optimized.symgenbuck.png
-rw-r--r--   1 bush bush 14874 May 17 15:33 fold94S.startingdesign.png
-rw-r--r--   1 bush bush 35664 May 18 09:45 fold94S.superopt1.objective.png
-rw-r--r--   1 bush bush 18788 May 18 10:33 fold94S.superopt1.opm

These files are analogous to the files with the same name without the "S" in
the specific case name, that is, the files that start with the string, "fold94.".

Unlike the specific case, "fold94", the "global" optimizer, SUPEROPT, was
executed a second time for the specific case, "fold94S. A plot of the objective
versus design iterations for this second execution of SUPEROPT is given in the
file:

-rw-r--r--   1 bush bush 35790 May 19 09:26 fold94S.superopt2.objective.png

The optimum design at the end of the second execution of SUPEROPT is the same
as that at the end of the first execution of SUPEROPT.

Ideally, the minimum weight design for the specific case, fold94s, should not
be higher than the minimum weight design for the specific case, fold94. This
is so because the sub-segment geometry could be such that each sub-segment
traces exactly the shapes of the major segments in the optimum design for
the specific case, fold94. That this does not happen in this case demonstrates
the difficulty of finding a "global" optimum design in this particular case.

I think that the difficulty of finding a "global" optimum design is related
to the high sensitivity of certain of the design margins to changes in the
decision variables.

GENOPT was next used to do "design sensitivity" analysis of the optimum design
listed in the file, fold94S.superopt1.opm . Design sensitivity plots were
generated with respect to 12 of the decision variables. These plots are
represented by the following 12 files:

-rw-r--r--  1 bush bush 35511 May 19 10:42 fold94S.itype3.phiseg1.png
-rw-r--r--  1 bush bush 88816 May 19 10:46 fold94S.itype3.phiseg2.png
-rw-r--r--  1 bush bush 38128 May 19 10:57 fold94S.itype3.phiseg3.png
-rw-r--r--  1 bush bush 38056 May 19 11:02 fold94S.itype3.phiseg4.png
-rw-r--r--  1 bush bush 35898 May 19 10:31 fold94S.itype3.phisub1.png
-rw-r--r--  1 bush bush 32981 May 19 10:10 fold94S.itype3.phisub2.png
-rw-r--r--  1 bush bush 34156 May 19 09:42 fold94S.itype3.phisub3.png
-rw-r--r--  1 bush bush 33803 May 19 09:52 fold94S.itype3.phisub4.png
-rw-r--r--  1 bush bush 29695 May 19 11:10 fold94S.itype3.yplate2.png
-rw-r--r--  1 bush bush 33660 May 19 11:15 fold94S.itype3.yplate3.png
-rw-r--r--  1 bush bush 39456 May 19 11:20 fold94S.itype3.yplate4.png
-rw-r--r--  1 bush bush 37251 May 19 11:25 fold94S.itype3.yplate5.png

The "design sensitivity" branch of the "OPTIMIZE" processor of GENOPT is
involked by the use of ITYPE = 3 in the *.OPT file, in which in this
particular case "*" = "fold94S". A typical fold94S.OPT file for
a design sensitivity analysis follows:
-------------------------------------------------------------------
      n         $ Do you want a tutorial session and tutorial output?
         0      $ Choose an analysis you DON'T want (1, 2,..), IBEHAV
         0      $ NPRINT= output index (0=GOOD, 1=ok, 2=debug, 3=too much)
         3      $ Choose type of analysis (1=opt., 2=fixed, 3=sensit.) ITYPE
        21      $ Choose a design variable (1, 2, 3, ...), IBVAR
   10.00000     $ Starting value of the design parameter, VARBEG
   35.00000     $ Ending value of the design parameter, VAREND
      y         $ Do you want to use the default for the number of steps?
--------------------------------------------------------------------
The fold94S.OPT file just listed corresponds to the plot represented by the file:
-rw-r--r--  1 bush bush 37251 May 19 11:25 fold94S.itype3.yplate5.png

The run stream to produce that file is:

mainsetup	(execute the GENOPT processor MAINSETUP; input=fold94S.OPT)
optimize	(execute the GENOPT processor OPTIMIZE)
chooseplot	(excecute the GENOPT processor CHOOSEPLOT; input=fold94S.CPL)
[The fold94S.CPL file is as follows:]
----------------------------------------------------------------------------
      n         $ Do you want a tutorial session and tutorial output?
      y         $ Any design margins to be plotted v. iterations (Y or N)?
         1      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         2      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         3      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         4      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         5      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         6      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         7      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         8      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
         9      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      y         $ Any more margins to be plotted (Y or N) ?
        10      $ Choose a margin to be plotted v. iterations (1,2,3,..)
      n         $ Any more margins to be plotted (Y or N) ?
         2      $ Give maximum value (positive) to be included in plot frame.
--------------------------------------------------------------------------------

diplot		(execute the GENOPT processor DIPLOT; no input data required)
[DIPLOT produces the file, fold94S.3.ps. Use "ghost view" (gv) to obtain the
 plot on your screen:]

gv fold94S.3.ps

[Take a "snapshot" of your computer screen to generate the file,
fold94S.itype3.yplate5.png]

[The same input file for CHOOSEPLOT, fold94S.CPL, as listed above was used
 for generation of all of the 12 "design sensitivity" plots.The input data
 for MAINSETUP (the fold94S.OPT file) changed for each "design sensitivity"
 execution of OPTIMIZE.]
-----------------------------------------------------------------------------


GENOPT was next used to find an optimum design of the same configuration
as fold94S except that the sub-segments are convex downward instead of
convex upward. (Compare the files, fold94S.BEG and fold94S2.BEG).

The new specific name for the case is "fold94S2". The
files saved during the optimization and analysis are as follows:

-rw-r--r--  1 bush bush  6016 May 20 09:58 fold94S2.BEG
-rw-r--r--  1 bush bush  4245 May 20 10:35 fold94S2.superopt1.chg
-rw-r--r--  1 bush bush  8853 May 20 09:59 fold94S2.DEC
-rw-r--r--  1 bush bush   990 May 20 09:59 fold94S2.OPT
-rw-r--r--  1 bush bush 20558 May 20 10:17 fold94S2.optimized.antisymgenbuck.png
-rw-r--r--  1 bush bush 48224 May 20 10:20 fold94S2.optimized.genbuck.stags.png
-rw-r--r--  1 bush bush 17929 May 20 10:07 fold94S2.optimized.localbuck.png
-rw-r--r--  1 bush bush 18800 May 20 10:35 fold94S2.optimized.opm
-rw-r--r--  1 bush bush 17437 May 20 10:24 fold94S2.optimized.stagsmodel.png
-rw-r--r--  1 bush bush 64804 May 20 10:25 fold94S2.optimized.stagsmodel.zoom.png
-rw-r--r--  1 bush bush 20311 May 20 10:14 fold94S2.optimized.symgenbuck.png
-rw-r--r--  1 bush bush 15404 May 19 11:50 fold94S2.startingdesign.png
-rw-r--r--  1 bush bush 35389 May 20 10:00 fold94S2.superopt1.objective.png

The starting design is displayed in the file, fold94S2.startingdesign.png
A STAGS model of the optimized design is shown in the two files:
fold94S2.optimized.stagsmodel.png and fold94S2.optimized.stagsmodel.zoom.png
Compare these files with the analogous files that begin with the specific
case name, "fold94S".

The run stream is analogous to that for the specific case, "fold94".
The optimized weight after the first execution of SUPEROPT is very close to
the optimized weight of the case, "fold94S". Is this a coincidence? I don't know.
I would like the result better if the optimized weight were about 90 lb or less
rather than 102.4 lb.
-------------------------------------------------------------------------------

Optimized designs were determined corresponding to 2 additional executions of
SUPEROPT, each execution of SUPEROPT followed by executions of CHOOSEPLOT to
obtain the files, fold94S2.superopt2.objective.png and fold94S2.superopt3.objective.png
and three executions of BIGBOSOR4 in order to obtain plots of local buckling,
symmetric general buckling, and antisymmetric general buckling modes. The
files generated by the additional computations associated with the second
execution of SUPEROPT are as follows:

-rw-r--r--  1 bush bush 20817 May 21 09:18 fold94S2.superopt2.antisymgenbuck.png
-rw-r--r--  1 bush bush  4245 May 21 09:28 fold94S2.superopt2.chg
-rw-r--r--  1 bush bush 19890 May 21 09:13 fold94S2.superopt2.localbuck.png
-rw-r--r--  1 bush bush 90007 May 21 09:07 fold94S2.superopt2.objective.png
-rw-r--r--  1 bush bush 18800 May 21 09:28 fold94S2.superopt2.opm
-rw-r--r--  1 bush bush 20214 May 21 09:16 fold94S2.superopt2.symgenbuck.png

The files generated by the additional computations associated with the third 
execution of SUPEROPT are as follows:

-rw-r--r--  1 bush bush 20477 May 22 08:30 fold94S2.superopt3.antisymgenbuck.png
-rw-r--r--  1 bush bush  4245 May 22 08:42 fold94S2.superopt3.chg
-rw-r--r--  1 bush bush 19663 May 22 08:22 fold94S2.superopt3.localbuck.png
-rw-r--r--  1 bush bush 37328 May 22 08:16 fold94S2.superopt3.objective.png
-rw-r--r--  1 bush bush 18800 May 22 08:41 fold94S2.superopt3.opm
-rw-r--r--  1 bush bush 20146 May 22 08:25 fold94S2.superopt3.symgenbuck.png

The file generated by the 4h execution of SUPEROPT is as follows:

-rw-r--r--  1 bush bush 37086 May 23 08:43 fold94S2.superopt4.objective.png

The optimized "corrugated" panel after the 4th execution of SUPEROPT is the
same as the optimized "corrugated" panel after the 3rd execution of SUPEROPT.

NOTE: After completion of each execution of SUPEROPT you MUST execute CHOOSEPLOT
in order that the total number of design iterations be reset to zero before the
next execution of SUPEROPT.

---------------------------------------------------------------------------------

GENOPT/BIGBOSOR4 was next used to several design sensitivity analyses for the
specific case, fold94S2. The design sensitivity analyses are based of the
optimum design stored in the file, fold94S2.superopt3.opm. The method is the
same as that used for the design sensitivity analyses performed on the
optimized configuration, fold94S. The relevant "fold94S2" files are as follows:

-rw-r--r--  1 bush bush 26004 May 26 15:43 fold94S2.itype3.phiseg1.png
-rw-r--r--  1 bush bush 26678 May 26 15:43 fold94S2.itype3.phiseg2.png
-rw-r--r--  1 bush bush 27063 May 26 15:43 fold94S2.itype3.phiseg3.png
-rw-r--r--  1 bush bush 28497 May 26 15:42 fold94S2.itype3.phiseg4.png
-rw-r--r--  1 bush bush 26428 May 26 15:41 fold94S2.itype3.phisub1.png
-rw-r--r--  1 bush bush 26717 May 26 15:41 fold94S2.itype3.phisub2.png
-rw-r--r--  1 bush bush 26262 May 26 15:41 fold94S2.itype3.phisub3.png
-rw-r--r--  1 bush bush 25051 May 26 15:41 fold94S2.itype3.phisub4.png
-rw-r--r--  1 bush bush 30678 May 26 15:42 fold94S2.itype3.subwid1.png
-rw-r--r--  1 bush bush 30399 May 26 15:42 fold94S2.itype3.subwid2.png
-rw-r--r--  1 bush bush 29703 May 26 15:42 fold94S2.itype3.subwid3.png
-rw-r--r--  1 bush bush 29996 May 26 15:42 fold94S2.itype3.subwid4.png
-rw-r--r--  1 bush bush 27107 May 26 15:40 fold94S2.itype3.yplate2.png
-rw-r--r--  1 bush bush 28558 May 26 15:40 fold94S2.itype3.yplate3.png
-rw-r--r--  1 bush bush 29747 May 26 15:40 fold94S2.itype3.yplate4.png
-rw-r--r--  1 bush bush 30871 May 26 13:11 fold94S2.itype3.yplate5.png
------------------------------------------------------------------------------

GENOPT/BIGBOSOR4 was next used to several design sensitivity analyses for the
specific case, fold94. The design sensitivity analyses are based of the
optimum design stored in the file, fold94.superopt1.opm. The method is the
same as that used for the design sensitivity analyses performed on the
optimized configuration, fold94S. The relevant "fold94" files are as follows:

-rw-rw-r--   1 bush bush 28280 May 27 11:01 fold94.itype3.phiseg1.png
-rw-rw-r--   1 bush bush 25017 May 27 10:58 fold94.itype3.phiseg2.png
-rw-rw-r--   1 bush bush 24818 May 27 10:55 fold94.itype3.phiseg3.png
-rw-rw-r--   1 bush bush 25701 May 27 10:52 fold94.itype3.phiseg4.png
-rw-rw-r--   1 bush bush 26624 May 27 11:14 fold94.itype3.subwid1.png
-rw-rw-r--   1 bush bush 28954 May 27 11:11 fold94.itype3.subwid2.png
-rw-rw-r--   1 bush bush 30056 May 27 11:08 fold94.itype3.subwid3.png
-rw-rw-r--   1 bush bush 31026 May 27 11:05 fold94.itype3.subwid4.png
-rw-rw-r--   1 bush bush 27451 May 27 11:27 fold94.itype3.thick1.png
-rw-rw-r--   1 bush bush 27772 May 27 11:24 fold94.itype3.thick2.png
-rw-rw-r--   1 bush bush 28556 May 27 11:22 fold94.itype3.thick3.png
-rw-rw-r--   1 bush bush 28584 May 27 11:19 fold94.itype3.thick4.png
-rw-rw-r--   1 bush bush 34178 May 27 10:47 fold94.itype3.yplate2.png
-rw-rw-r--   1 bush bush 35685 May 27 10:42 fold94.itype3.yplate3.png
-rw-rw-r--   1 bush bush 34550 May 27 10:25 fold94.itype3.yplate4.png
-rw-rw-r--   1 bush bush 30041 May 27 10:21 fold94.itype3.yplate5.png

------------------------------------------------------------------------------

For the purpose of comparison of the minimum weight of the wall, a hat-stiffened
curved panel was optimized by PANDA2. The radius of the curved, hat-stiffened
panel is 100 inches. This cylindical panel spans 100 inches and is 100 inches in
length (the same as the overall dimensions of the "corrugated" wall). The file
generated from the "hat" study are as follows:

-rw-r--r--  1 bush bush  4206 May 23 11:06 hat100.BEG
-rw-r--r--  1 bush bush   360 May 26 12:23 hat100.CPL
-rw-r--r--  1 bush bush  4058 May 23 11:07 hat100.DEC
-rw-r--r--  1 bush bush  3884 May 23 11:07 hat100.OPT
-rw-r--r--  1 bush bush   494 May 23 11:41 hat100.genbuck.pan
-rw-r--r--  1 bush bush   494 May 23 11:27 hat100.localbuck.pan
-rw-r--r--  1 bush bush 23296 May 23 11:38 hat100.optimized.bigbosor4.genbuck.png
-rw-r--r--  1 bush bush 18917 May 23 11:16 hat100.optimized.bigbosor4.localbuck.png
-rw-r--r--  1 bush bush 12611 May 23 11:32 hat100.optimized.bigbosor4.model.png
-rw-r--r--  1 bush bush  8236 May 23 11:06 hat100.optimized.radius100.opm
-rw-r--r--  1 bush bush 49836 May 23 12:23 hat100.optimized.stags.genbuck.png
-rw-r--r--  1 bush bush  3149 May 23 11:59 hat100.optimized.stg
-rw-r--r--  1 bush bush 29244 May 23 10:50 hat100.superopt1.objective.png
-rw-r--r--  1 bush bush  1502 May 23 11:07 hat100.superopt2.chg
-rw-r--r--  1 bush bush 31659 May 23 10:57 hat100.superopt2.objective.png

The PANDA2 results for the optimized hat-stiffened curved, aimply supported
panel are stored in the file, hat100.optimized.opm. Local and general
buckling modes obtained by BIGBOSOR4 (via the PANDA2 processor called "PANEL")
are stored in the files, hat100.optimized.bigbosor4.localbuck.png and
hat100.optimized.bigbosor4.genbuck.png. The weight of the optimized hat-stiffened
panel, 86.57 lb, is not much less than the optimized weight of the optimized
"corrugated" panel, 91.46 lb. The corrugated panel has no stiffeners that
must be welded to a skin. Also, the hat-stiffened panel was optimized with
the factors of safety (F.S.) for local and general buckling equal to unity.

The file, hat100.optimized.stg, can be used to generate a STAGS model of the
optimized panel via the PANDA2 processor, STAGSMODEL. However, STAGSMODEL
produces a model in which rotation is prevented along the two curved ends. In
contrast, the panel optimized by PANDA2 is simply supported along these two
ends. The plot of the general buckling mode from STAGS appears in the file,
hat100.optimized.stags.genbuck.png. This STAGS model spans only half the width of
the curved "hat" panel, which permits two circumferential half-waves. Since the
critical general buckling mode from PANDA2 and from BIGBOSOR4 has four
circumferential waves over the full-width model (see the file,
hat100.optimized.bigbosor4.genbuck.png, for example), the half-width STAGS
model should be valid. However, because of the different boundary conditions
along the two curved edges (more restrictive in the STAGS model), the
STAGS prediction of general buckling is to high and therefore should not be
compared with the general buckling predictions from PANDA2 and BIGBOSOR4
for the optimized hat-stiffened panel

Optimum designs were derived for two other cylindrical hat-stiffened panels,
one with a radius equal to 55 inches and the other with a radius equal to
70 inches. The optimized panel with a radius of 55 inches has an optimized
weight of 84.7 lb. The optimized panel with a radius of 70 inches has an
optimized weight of 83.07 lb. It is this 70-inch-radius hat stiffened panel
that should be compared with the optimized "corrugated" panel.

The files pertaining to the 55-inch-radius panel are as follows:

-rw-r--r--  1 bush bush  4206 May 26 11:18 hat55.BEG
-rw-r--r--  1 bush bush   360 May 26 12:23 hat55.CPL
-rw-r--r--  1 bush bush  4058 May 26 11:18 hat55.DEC
-rw-r--r--  1 bush bush  3884 May 26 11:18 hat55.OPT
-rw-r--r--  1 bush bush   494 May 26 11:37 hat55.genbuck.pan
-rw-r--r--  1 bush bush   494 May 26 11:38 hat55.localbuck.pan
-rw-r--r--  1 bush bush 25234 May 26 11:35 hat55.optimized.bigbosor4.genbuck.png
-rw-r--r--  1 bush bush 18211 May 26 11:43 hat55.optimized.bigbosor4.localbuck.png
-rw-r--r--  1 bush bush  8211 May 26 11:23 hat55.optimized.opm
-rw-r--r--  1 bush bush 29975 May 26 11:16 hat55.superopt1.objective.png
-rw-r--r--  1 bush bush 32390 May 26 11:22 hat55.superopt2.objective.png


The files pertaining to the 70-inch-radius panel are as follows:

-rw-r--r--  1 bush bush  4206 May 26 11:51 hat70.BEG
-rw-r--r--  1 bush bush   360 May 26 12:23 hat70.CPL
-rw-r--r--  1 bush bush  4058 May 26 11:51 hat70.DEC
-rw-r--r--  1 bush bush  3884 May 26 11:52 hat70.OPT
-rw-r--r--  1 bush bush   556 May 26 12:13 hat70.genbuck.pan
-rw-r--r--  1 bush bush   494 May 26 12:20 hat70.localbuck.pan
-rw-r--r--  1 bush bush 25227 May 26 12:13 hat70.optimized.bigbosor4.genbuck.png
-rw-r--r--  1 bush bush 18441 May 26 12:20 hat70.optimized.bigbosor4.localbuck.png
-rw-r--r--  1 bush bush  8292 May 26 12:07 hat70.optimized.opm
-rw-r--r--  1 bush bush 29461 May 26 11:57 hat70.superopt1.objective.png
-rw-r--r--  1 bush bush 32027 May 26 12:04 hat70.superopt2.objective.png

The PANDA2 case, hat70, was optimized two additional times:

1. The PANDA2 "conservativeness" index, ICONSV, was changed from -1 to 1
and the hat70 case was re-optimized. The results appear in the three
files:

-rw-rw-r--   1 bush bush 25193 May 27 15:59 hat70.optimized.iconsv1.bigbosor4.genbuck.png
-rw-rw-r--   1 bush bush 18609 May 27 16:08 hat70.optimized.iconsv1.bigbosor4.locbuck.png
-rw-r--r--   1 bush bush  8325 May 27 16:10 hat70.optimized.iconsv1.opm

2. The PANDA2 "conservativeness" index, ICONSV remained at 1 and the
factor of safety for general buckling was increased from 0.9999 to 1.5.
The factor of safety for local buckling remained at 0.9999. The results
appear in the three files:

-rw-rw-r--   1 bush bush 24020 May 27 16:28 hat70.optimized.iconsv1.fs1.5.genbuck.png
-rw-rw-r--   1 bush bush 19636 May 27 16:24 hat70.optimized.iconsv1.fs1.5.locbuck.png
-rw-r--r--   1 bush bush  8641 May 27 16:29 hat70.optimized.iconsv1.fs1.5.opm

--------------------------------------------------------------------------

A typical PANDA2 run stream follows for optimization of a "hat70" panel and then
checking the optimized design via one or more BIGBOSOR4 executions. The
PANDA2/BIGBOSOR4 case is called "hat70".


COMMAND                 MEANING OF THE COMMAND

cd /home/progs/panda2work	(go where you want to run PANDA2)
panda2log	(activate the PANDA2 set of commands)
(The following appears on your screen:)

PANDA2 commands have been activated.

PANDA2 commands are:
begin      - you provide a starting design, material properties, boundary conditions
choosetemp - choose temparature dependence
setup      - PANDA2 generates BOSOR4-type matrix skylines for use by PANDA2
decide     - you choose decision variables, lower and upper bounds, linking relationships
mainsetup  - you provide loading, imperfection amplitudes, fact.of safety, analysis type, strategy
pandaopt   - launch run of mainprocessor for a single set of design iterations
superopt   - launch run for multiple sets of design iterations (obtain a global optimum design)
change     - assign new values to parameters (or save an optimum design)
autochange - assign new vector of decision variables randomly (used in the superopt process)
chooseplot - choose which variables/margins to plot
diplot     - generate & print PostScript file containing plots
panel      - generate BOSOR4 input for a skin-stringer multi-module model
panel2     - generate BOSOR4 input for a skin-ring multi-module model
panel3     - generate BOSOR4 input for a skin-stringer + weld land multi-module model
stagsmodel - generate STAGS input for panel (element unit, no rings)
stagsunit  - generate STAGS input for panel (shell units, both rings and stringers permitted)
cleanpan   - delete temporary case-specific files

(etc.)

COMMAND                 MEANING OF THE COMMAND

begin		(execute the PANDA2 processor, BEGIN; input=hat70.BEG)
setup		(execute the PANDA2 processor, SETUP; no input required)
decide		(execute the PANDA2 processor, DECIDE; input=hat70.DEC)
[edit the hat70.OPT file: Set NPRINT = 0, ITYPE = 1 (optimization)]
mainsetup	(execute the PANDA2 processor, MAINSETUP; input=hat70.OPT
superopt	(execute the PANDA2 processor, SUPEROPT; input=hat70.OPT)
(Inspect the output file, hat70.OPP. Optimum designs are listed at the bottom)
chooseplot	(execute the PANDA2 processor, CHOOSEPLOT; input=hat70.CPL)
diplot		(execute the PANDA2 processor, DIPLOT; no input required)
(plot the file, hat70.5.ps = hat70.superopt1.objective.png)
(Execute SUPEROPT again)
superopt        (execute the PANDA2 processor, SUPEROPT; input=hat70.OPT)
(Inspect the output file, hat70.OPP. Optimum designs are listed at the bottom)
chooseplot      (execute the PANDA2 processor, CHOOSEPLOT; input=hat70.CPL)
diplot          (execute the PANDA2 processor, DIPLOT; no input required)
(plot the file, hat70.5.ps = hat70.superopt2.objective.png)
[edit the hat70.OPT  Set NPRINT = 2, ITYPE = 2 (analysis of fixed, optimized design)]
mainsetup       (execute the PANDA2 processor, MAINSETUP; input=hat70.OPT
pandaopt	(execute the PANDA2 processor, PANDAOPT; output=hat70.OPM)
(Inspect the hat70.OPM = hat70.optimized.opm) 
(Next, obtain a BIGBOSOR4 plot of the general buckling mode of the design
 just optimized by PANDA2. First generate input data for BIGBOSOR4.)
cp hat70.genbuck.pan hat70.PAN		(get input file for "PANEL")
panel		(execute the PANDA2 processor, PANEL; input=hat70.PAN
						      output=hat70.ALL)
(The file, hat70.ALL, is a valid input file for BIGBOSOR4. First, go
 to a directory where you want to execute BIGBOSOR4. then execute BIGBOSOR4.)
cd /home/progs/bigbosor4work

COMMAND                 MEANING OF THE COMMAND

bigbosor4log	(activate the BIGBOSOR4 set of commands)
(You see the following on your computer screen:)

BIGBOSOR4 COMMANDS HAVE BEEN ACTIVATED.

The BIGBOSOR4 commands, in the general order in which
you would probably use them, are:

help4           (get information on BOSOR4.)
input           (you provide segment-by-seg. input)
assemble        (concatenates segment data files)
bigbosorall     (batch run of pre, main, post proc.)
bosorplot       (batch run for generating plot files)
resetup         (input for restart run, same model)
bigrestart              (batch run of main & postprocessors)
cleanup         (delete all except for .DOC file)
getsegs         (generate segment files from .DOC)
modify          (modify a segment file)

Please consult the following sources for more
information about BOSOR4:

1.  help4 file  (type help4)
2.  bosor4.story        (good idea to print this file)
3.  bosor4.news (news of BOSOR4 updates)
4.  Documents listed under HELP4 OVERVIEW DOC


COMMAND                 MEANING OF THE COMMAND

cp /home/progs/panda2work/hat70.ALL /home/progs/bigbosor4work/hat70.ALL
bigbosorall	(execute the BIGBOSOR4 processor, BIGBOSORALL; input=hat70.ALL)
(Inspect the file, hat70.OUT. Search for the string, "EIGENVALUE(", including
 the trailing parenthesis. Find the buckling eigenvalue and wave number.)
cleanup		(execute the BIGBOSOR4 processor, CLEANUP.
[CLEANUP produces a properly annotated BIGBOSOR4 input file, hat70.ALL.
 Search hat70.ALL for the string, "N0B" (that's N - zero - B). Change
 the input lines for N0B, NMINB, NMAXB, INCRB, NVEC as appropriate in a
 search for the minimum buckling eigenvalue, and then execute BIGBOSOR4 again.)
bigbosorall     (execute the BIGBOSOR4 processor, BIGBOSORALL; input=hat70.ALL)
(Inspect the file, hat70.OUT. Search for the string, "EIGENVALUE(", including
 the trailing parenthesis. Find the buckling eigenvalues and wave numbers
 over the range, NMINB to NMAXB in increments of INCRB.)
(Next, obtain a plot or plots of the buckling mode or modes.)
bosorplot	(execute the BIGBOSOR4 processor, BOSORPLOT; input is interactive)
(See the plot, "metafile.ps" = hat70.optimized.bigbosor4.genbuck.png)
cleanup		(execute the BIGBOSOR4 processor, CLEANUP)

(Next, generate a BIGBOSOR4 model for local buckling and get a plot from
 BIGBOSOR4 of the local buckling mode:)
cd /home/progs/panda2work	(go back to the "PANDA2" working directory)
cp hat70.localbuck.pan hat70.PAN    (provide the proper input file for "PANEL")
panel           (execute the PANDA2 processor, PANEL; input=hat70.PAN
                                                      output=hat70.ALL)
(The file, hat70.ALL, is a valid input file for BIGBOSOR4. First, go
 to a directory where you want to execute BIGBOSOR4. then execute BIGBOSOR4.)
cd /home/progs/bigbosor4work	(go to the BIGBOSOR4 working directory.)

COMMAND                 MEANING OF THE COMMAND

bigbosor4log    (activate the BIGBOSOR4 set of commands)
cp /home/progs/panda2work/hat70.ALL /home/progs/bigbosor4work/hat70.ALL
bigbosorall     (execute the BIGBOSOR4 processor, BIGBOSORALL; input=hat70.ALL)
(Inspect the file, hat70.OUT. Search for the string, "EIGENVALUE(", including
 the trailing parenthesis. Find the buckling eigenvalue and wave number.)
cleanup         (execute the BIGBOSOR4 processor, CLEANUP.
[CLEANUP produces a properly annotated BIGBOSOR4 input file, hat70.ALL.
 Search hat70.ALL for the string, "N0B" (that's N - zero - B). Change
 the input lines for N0B, NMINB, NMAXB, INCRB, NVEC as appropriate in a
 search for the minimum buckling eigenvalue, and then execute BIGBOSOR4 again.)
bigbosorall     (execute the BIGBOSOR4 processor, BIGBOSORALL; input=hat70.ALL)
(Inspect the file, hat70.OUT. Search for the string, "EIGENVALUE(", including
 the trailing parenthesis. Find the buckling eigenvalues and wave numbers
 over the range, NMINB to NMAXB in increments of INCRB.)
(Next, obtain a plot or plots of the buckling mode or modes.)
bosorplot       (execute the BIGBOSOR4 processor, BOSORPLOT; input is interactive)
(See the plot, "metafile.ps" = hat70.optimized.bigbosor4.localbuck.png)
cleanup         (execute the BIGBOSOR4 processor, CLEANUP)

---------------------------------------------------------------------------


Next, we want to optimize a "corrugated" panel very similar to the case
called "fold94", except that this time we want the same thickness to be
used for the entire panel, not different thicknesses for each cylindrical
corrugation. The results from this study are located in the files that
contain the string, "onethick". These files are as follows:

-rw-r--r--  1 bush bush  8329 May 24 08:25 fold94.onethickness.dec
-rw-r--r--  1 bush bush 19302 May 24 08:52 fold94.optimized.antisymgenbuck.onethick.png
-rw-r--r--  1 bush bush 62587 May 24 09:02 fold94.optimized.genbuck.stags.onethick.png
-rw-r--r--  1 bush bush 19702 May 24 08:45 fold94.optimized.localbuck.onethick.png
-rw-r--r--  1 bush bush  4245 May 24 08:41 fold94.optimized.onethick.chg
-rw-r--r--  1 bush bush 16561 May 24 08:41 fold94.optimized.onethick.opm
-rw-r--r--  1 bush bush 19279 May 24 08:49 fold94.optimized.symgenbuck.onethick.png
-rw-r--r--  1 bush bush 40880 May 24 08:25 fold94.superopt1.objective.onethick.png
-rw-r--r--  1 bush bush 39716 May 24 08:31 fold94.superopt2.objective.onethick.png


The file, fold94.onethickness.dec, demonstrates how the thicknesses of the second,
third, and fourth corrugation, T(2), T(3), and T(4), respectively, are linked to
the thickness, T(1), of the first corrugation.

The files, fold94.BEG and fold94.OPT, are valid for this "constant thickness" case.

Two executions of SUPEROPT/CHOOSEPLOT were used to obtain the optimum design. Plots
of the objective (weight of the "corrugated" panel) versus design iteration
corresponding to each execution of SUPEROPT are in the two files:

-rw-r--r--  1 bush bush 40880 May 24 08:25 fold94.superopt1.objective.onethick.png
-rw-r--r--  1 bush bush 39716 May 24 08:31 fold94.superopt2.objective.onethick.png

The optimum design at the end of the second execution of SUPEROPT is the same as
the optimum design at the end of the first execution of SUPEROPT.

The optimized configuration is listed in the file, fold94.optimized.onethick.opm .
General and local buckling mode shapes from BIGBOSOR4 are in the three files:

-rw-r--r--  1 bush bush 19302 May 24 08:52 fold94.optimized.antisymgenbuck.onethick.png
-rw-r--r--  1 bush bush 62587 May 24 09:02 fold94.optimized.genbuck.stags.onethick.png
-rw-r--r--  1 bush bush 19702 May 24 08:45 fold94.optimized.localbuck.onethick.png

The critical general buckling mode of the optimized panel from the STAGS model is
in the file, fold94.optimized.genbuck.stags.onethick.png.

The optimized panel is archived in the file, fold94.optimized.onethick.chg .
=================================================================================

Next, we want to study a specific case, fold91S, for which it is easy to see why
the design sensitivity is so high with respect to certain of the decision variables
in the neighborhood of the optimum design. The files related to this study are as
follows:

-rw-r--r--   1 bush bush  3043 May 30 09:32 fold91S.BEG
-rw-r--r--   1 bush bush  1620 May 30 09:32 fold91S.CHG
-rw-r--r--   1 bush bush  1167 May 30 09:33 fold91S.DEC
-rw-r--r--   1 bush bush 12893 May 30 11:29 fold91S.OPM
-rw-rw-r--   1 bush bush 29172 May 30 10:16 fold91S.antisymgenbuck.phisub44.png
-rw-rw-r--   1 bush bush 28063 May 30 10:50 fold91S.antisymgenbuck.phisub45.png
-rw-rw-r--   1 bush bush 19213 May 30 09:16 fold91S.antisymmetric genlbuck.png
-rw-rw-r--   1 bush bush 32901 May 30 09:26 fold91S.itype3.phisub1.png
-rw-rw-r--   1 bush bush 27017 May 30 09:59 fold91S.localbuck.phisub44.png
-rw-rw-r--   1 bush bush 27179 May 30 10:53 fold91S.localbuck.phisub45.png
-rw-rw-r--   1 bush bush 27310 May 30 11:39 fold91S.localbuck.phisub46.797.png
-rw-rw-r--   1 bush bush 50072 May 30 11:49 fold91S.localbuck.phisub46.797.stags.png
-rw-rw-r--   1 bush bush 27121 May 30 11:09 fold91S.localbuck.phisub48.png
-rw-rw-r--   1 bush bush 27012 May 30 11:17 fold91S.localbuck.phisub50.png
-rw-rw-r--   1 bush bush 26873 May 30 11:28 fold91S.localbuck.phisub55.png
-rw-rw-r--   1 bush bush 18680 May 30 09:10 fold91S.localbuck.png
-rw-r--r--   1 bush bush   990 May 30 09:32 fold91S.opt2
-rw-r--r--   1 bush bush   559 May 30 09:33 fold91S.opt3
-rw-rw-r--   1 bush bush 27947 May 30 10:07 fold91S.symgenbuck.phisub44.png
-rw-rw-r--   1 bush bush 28409 May 30 11:00 fold91S.symgenbuck.phisub45.png
-rw-rw-r--   1 bush bush 19375 May 30 09:14 fold91S.symmetric genlbuck.png

The "fold91S" configuration has only one "convex up" major segment over half the width,
WIDTH, of the "corrugated" panel (the "1" in the specific name, fold91S), and only two
"convex up" sub-segments (the "S" in fold91S) in that one "convex up" major segment.
The optimum design is listed in the file, fold91S.OPM. The optimized value of the
decision variable, PHISUB(1) = 46.797 degrees.

Local buckling of this PANDA2-optimized design from a STAGS model is displayed in
the file, fold91S.localbuck.phisub46.797.stags.png.  Design sensitivity with respect
to the decsion variable, PHISUB(1), which is the angle in degrees that subtends half
the cylindrical sector spanned by one of the two identical sub-segments, is displayed
in the file, fold91S.itype3.phisub1.png. Local buckling modes in "fold91S" configurations
at and close to the optimized design are displayed in the files,

-rw-rw-r--   1 bush bush 27017 May 30 09:59 fold91S.localbuck.phisub44.png
-rw-rw-r--   1 bush bush 27179 May 30 10:53 fold91S.localbuck.phisub45.png
-rw-rw-r--   1 bush bush 27310 May 30 11:39 fold91S.localbuck.phisub46.797.png
-rw-rw-r--   1 bush bush 27121 May 30 11:09 fold91S.localbuck.phisub48.png
-rw-rw-r--   1 bush bush 27012 May 30 11:17 fold91S.localbuck.phisub50.png
-rw-rw-r--   1 bush bush 26873 May 30 11:28 fold91S.localbuck.phisub55.png

The high design sensitivity with respect to the decision variable, PHISUB(1),
results from the presence of a prismatic "flat" or "shallow valley" region
in the neighborhood of where the two sub-segments meet. The local buckling
load factor is very sensitive to the amplitude of this prismatic "imperfection".

--------------------------------------------------------------------------------------

Next, we want to study a design similar to "fold94" with uniform thickness
across the entire width of the panel (the fold94 file names that include the
string, "onethick"). Configurations like "fold94 (onethick)" would be
impossible to fabricate because the cylindrical sectors are joined along
generators for which the cylindrical surfaces are almost parallel to eachother.
One must have a small-radius, "convex down" cylindrical sector between each
pair of "convex up" major segments depicted, for example, in the files,
 fold94.optimized.genbuck.stags.onethick.png
 fold94.optimized.localbuck.onethick.png
This is done in the model called "fold94ud". The string, "ud", in the
file name, fold94ud, means "up,down", for alternating "convex up" and
"convex down" cylindrical sectors. The "convex down" cylindrical sectors
have a small radius compared to the radius of the "convex up" cylindrical
sectors. The following files pertain to the specific case called "fold94ud":

-rw-r--r--   1 bush bush  7258 Jun  3 09:45 fold94ud.BEG
-rw-r--r--   1 bush bush 15346 Jun  4 10:49 fold94ud.DEC
-rw-r--r--   1 bush bush   989 Jun  3 09:46 fold94ud.OPT
-rw-rw-r--   1 bush bush 16088 Jun  1 13:08 fold94ud.startingdesign.png
-rw-rw-r--   1 bush bush 18258 Jun  2 22:17 fold94ud.superopt1.antisymgenbuck.png
-rw-rw-r--   1 bush bush 18171 Jun  2 22:13 fold94ud.superopt1.locbuck.png
-rw-rw-r--   1 bush bush 32929 Jun  2 22:06 fold94ud.superopt1.objective.png
-rw-r--r--   1 bush bush 23172 Jun  2 22:09 fold94ud.superopt1.opm
-rw-rw-r--   1 bush bush 18018 Jun  2 22:15 fold94ud.superopt1.symgenbuck.png
-rw-rw-r--   1 bush bush 18331 Jun  3 09:39 fold94ud.superopt2.antysymgenbuck.png
-rw-rw-r--   1 bush bush 17977 Jun  3 09:34 fold94ud.superopt2.locbuck.png
-rw-rw-r--   1 bush bush 36836 Jun  3 09:28 fold94ud.superopt2.objective.png
-rw-r--r--   1 bush bush 23172 Jun  3 09:30 fold94ud.superopt2.opm
-rw-rw-r--   1 bush bush 18182 Jun  3 09:36 fold94ud.superopt2.symgenbuck.png
-rw-rw-r--   1 bush bush 20408 Jun  4 11:04 fold94ud.superopt3.feasible.antisymgenbuck.png
-rw-r--r--   1 bush bush  6170 Jun  4 10:50 fold94ud.superopt3.feasible.chg
-rw-rw-r--   1 bush bush 20223 Jun  4 10:56 fold94ud.superopt3.feasible.locbuck.png
-rw-rw-r--   1 bush bush 67562 Jun  4 11:18 fold94ud.superopt3.feasible.stags.png
-rw-rw-r--   1 bush bush 66833 Jun  4 11:24 fold94ud.superopt3.feasible.stagsmodel.zoom.png
-rw-rw-r--   1 bush bush 20162 Jun  4 11:00 fold94ud.superopt3.feasible.symgenbuck.png
-rw-r--r--   1 bush bush 23172 Jun  4 10:50 fold94ud.superopt3.objective.feasible.opm
-rw-rw-r--   1 bush bush 35703 Jun  4 10:30 fold94ud.superopt3.objective.png

In particular, for an idea of what the "fold94ud" configuration looks like, see
the following figures;

-rw-rw-r--   1 bush bush 66833 Jun  4 11:24 fold94ud.superopt3.feasible.stagsmodel.zoom.png
-rw-rw-r--   1 bush bush 20162 Jun  4 11:00 fold94ud.superopt3.feasible.symgenbuck.png
-rw-rw-r--   1 bush bush 20223 Jun  4 10:56 fold94ud.superopt3.feasible.locbuck.png
-rw-rw-r--   1 bush bush 20408 Jun  4 11:04 fold94ud.superopt3.feasible.antisymgenbuck.png

The optimized weight of the "fold94ud" case is somewhat greater (95.48 lb) than that
of the "fold94(onethick)" case (91.98 lb), but "fold94ud" can actually be fabricated
whereas "fold94(onethick)" cannot.

----------------------------------------------------------------------------------------

GENOPT/BIGBOSOR4 was next used to optimize a uniformly
end-shortened cylindrical shell with a truss-core sandwich wall.
The generic case name is "trusscomp" and the specific case
name is "isotrussfold".

Details of how GENOPT/BIGBOSOR4 is used to optimize shells
of this type are given in the AIAA paper, AIAA-2011-1811,
presented at the 52nd AIAA Structures Meeting, Denver,
Colorado, April 2011:
"Use of GENOPT and BIGBOSOR4 to obtain optimum designs of an
axially compressed cylindrical shell with a composite truss-core
sandwich wall" by David Bushnell and Charles Rankin.
 
The case, "isotrussfold" is a uniformly axially compressed
elastic cylindrical shell with a truss-core sandwich wall
made of aluminum. The cylindrical shell is 100 inches long
and has a radius of 70 inches. The total axial compression
is 789739 lb, which corresponds to an axial resultant,
Nx = -1795.584 lb/in. The axial resultant, Nx = -1795.584,
corresponds to a total axially compressive load, 200000 lb,
over a sector of the cylindrical shell that spans a chord
of 100 inches. This is the same load condition experienced
by the "corrugated" panels that are 100 inches long and that
span a width, WIDTH = 100 inches.Therefore, the optimized
weight/area of the truss-core sandwich cylindrical sector
can be compared with that of the best optimized "corrugated"
panel and with that of the optimized weight of the hat-stiffened
panel.

The axially compressed cylindrical shell is first optimized
with GENOPT/BIGBOSOR4 via one execution of the "global"
optimizer, SUPEROPT. The factor of safety for local buckling
is 1.0, and the factor of safety for general buckling is 1.5.

The relevant files are as follows:

-rw-r--r--   1 bush bush   9035 Jun  6 11:05 isotrussfold.BEG
-rw-r--r--   1 bush bush   1270 Jun  6 11:05 isotrussfold.CHG
-rw-r--r--   1 bush bush   2504 Jun  6 11:05 isotrussfold.DEC
-rw-r--r--   1 bush bush  27151 Jun  6 11:06 isotrussfold.OPM
-rw-r--r--   1 bush bush    916 Jun  6 11:05 isotrussfold.OPT
-rw-rw-r--   1 bush bush  29000 Jun  6 11:50 isotrussfold.genbuckmodel.stags.png
-rw-rw-r--   1 bush bush  22142 Jun  6 11:16 isotrussfold.optimized.genbuck.n1.png
-rw-rw-r--   1 bush bush  23309 Jun  6 11:18 isotrussfold.optimized.genbuck.n4.png
-rw-rw-r--   1 bush bush  57764 Jun  6 12:02 isotrussfold.optimized.genbuck.stags.png
-rw-rw-r--   1 bush bush  21266 Jun  6 11:12 isotrussfold.optimized.locbuck.png
-rw-rw-r--   1 bush bush  75040 Jun  6 11:20 isotrussfold.optimized.locbuck.stags.png
-rw-r--r--   1 bush bush   1091 Jun  6 12:00 isotrussfold.readme
-rw-rw-r--   1 bush bush  39764 Jun  6 11:07 isotrussfold.superopt.objective.png
-----------------------------------------------------------------------------------

A rather long study was conducted for "corrugated" panels with various
numbers of major "convex up" segments, no sub-segments. The thickness of
the entire panel is uniform, that is, the thicknesses of major segments
2, 3, 4, ... are linked to the thickness of major segment 1.

The following files are relevant:

1. Three major "convex up" segments over half the width (total WIDTH = 100 inches)

-rw-r--r--  1 bush bush  4060 Jun 11 12:24 fold93.BEG
-rw-r--r--  1 bush bush  2670 Jun 11 12:24 fold93.CHG
-rw-r--r--  1 bush bush  6481 Jun 11 12:24 fold93.DEC
-rw-r--r--  1 bush bush   989 Jun 11 12:24 fold93.OPT
-rw-rw-r--  1 bush bush 18766 Jun 11 12:23 fold93.optimized.antisymgenbuck.png
-rw-rw-r--  1 bush bush 72952 Jun 11 12:32 fold93.optimized.genbuck.stags.png
-rw-rw-r--  1 bush bush 18805 Jun 11 12:18 fold93.optimized.localbuck.png
-rw-r--r--  1 bush bush 14959 Jun 11 12:15 fold93.optimized.opm
-rw-rw-r--  1 bush bush 18314 Jun 11 12:21 fold93.optimized.symgenbuck.png
-rw-rw-r--  1 bush bush 16109 Jun 10 09:32 fold93.startingdesgn.png
-rw-rw-r--  1 bush bush 32997 Jun 10 15:47 fold93.superopt1.objective.png
-rw-rw-r--  1 bush bush 30546 Jun 11 12:07 fold93.superopt2.objective.png
-rw-rw-r--  1 bush bush 32575 Jun 16 10:43 fold93.superopt5.itype3.yplate7.png


2. Five major "convex up" segments over half the width (total WIDTH = 100 inches)

-rw-r--r--  1 bush bush  5365 Jun 11 12:57 fold95.BEG
-rw-r--r--  1 bush bush 10261 Jun 11 12:57 fold95.DEC
-rw-r--r--  1 bush bush   989 Jun 11 12:57 fold95.OPT
-rw-rw-r--  1 bush bush 15503 Jun 11 12:55 fold95.startingdesign.png
-rw-rw-r--  1 bush bush 20029 Jun 12 10:21 fold95.superopt1.localbuck.png
-rw-rw-r--  1 bush bush 34874 Jun 12 10:15 fold95.superopt1.objective.png
-rw-rw-r--  1 bush bush 20337 Jun 12 18:32 fold95.superopt2.antisymgenbuck.png
-rw-r--r--  1 bush bush  4070 Jun 12 18:44 fold95.superopt2.chg
-rw-rw-r--  1 bush bush 20743 Jun 12 18:24 fold95.superopt2.localbuck.png
-rw-rw-r--  1 bush bush 33864 Jun 12 18:15 fold95.superopt2.objective.png
-rw-r--r--  1 bush bush 18257 Jun 12 18:43 fold95.superopt2.opm
-rw-rw-r--  1 bush bush 61810 Jun 12 19:01 fold95.superopt2.stags.png
-rw-rw-r--  1 bush bush 20111 Jun 12 18:29 fold95.superopt2.symgenbuck.png


3. Six major "convex up" segments over half the width (total WIDTH = 100 inches)

-rw-r--r--  1 bush bush  5996 Jun 13 09:27 fold96.BEG
-rw-r--r--  1 bush bush 12151 Jun 13 09:27 fold96.DEC
-rw-r--r--  1 bush bush   989 Jun 13 09:27 fold96.OPT
-rw-r--r--  1 bush bush  1553 Jun 16 10:41 fold96.itype3.cpl
-rw-r--r--  1 bush bush   559 Jun 16 10:46 fold96.opt3
-rw-r--r--  1 bush bush   318 Jun 16 10:38 fold96.readme
-rw-rw-r--  1 bush bush 16639 Jun 12 19:19 fold96.startingdesign.png
-rw-rw-r--  1 bush bush 19989 Jun 13 09:26 fold96.superopt1.localbuck.png
-rw-rw-r--  1 bush bush 36837 Jun 13 09:21 fold96.superopt1.objective.png
-rw-rw-r--  1 bush bush 20434 Jun 14 10:22 fold96.superopt2.localbuck.png
-rw-rw-r--  1 bush bush 37925 Jun 14 10:16 fold96.superopt2.objective.png
-rw-rw-r--  1 bush bush 20479 Jun 14 22:51 fold96.superopt3.localbuck.png
-rw-rw-r--  1 bush bush 35477 Jun 14 22:46 fold96.superopt3.objective.png
-rw-r--r--  1 bush bush 19886 Jun 14 22:52 fold96.superopt3.opm
-rw-r--r--  1 bush bush  3810 Jun 15 10:29 fold96.superopt4.FEASIBLE.design
-rw-r--r--  1 bush bush  3813 Jun 15 10:31 fold96.superopt4.MILDLYUNFEASIBLE.design
-rw-rw-r--  1 bush bush 20412 Jun 15 10:42 fold96.superopt4.antisymgenbuck.png
-rw-rw-r--  1 bush bush 20623 Jun 15 10:23 fold96.superopt4.localbuckling.n1.png
-rw-rw-r--  1 bush bush 20172 Jun 15 10:25 fold96.superopt4.localbuckling.n18.png
-rw-rw-r--  1 bush bush 38829 Jun 15 10:17 fold96.superopt4.objective.png
-rw-r--r--  1 bush bush 19886 Jun 15 10:27 fold96.superopt4.opm
-rw-rw-r--  1 bush bush 20111 Jun 15 10:39 fold96.superopt4.symgenbuck.png
-rw-rw-r--  1 bush bush 20609 Jun 16 09:57 fold96.superopt5.antisymgenbuck.png
-rw-r--r--  1 bush bush  4770 Jun 16 09:52 fold96.superopt5.chg
-rw-rw-r--  1 bush bush 29615 Jun 16 10:24 fold96.superopt5.itype3.phiseg3.png
-rw-rw-r--  1 bush bush 29043 Jun 16 10:20 fold96.superopt5.itype3.phiseg4.png
-rw-rw-r--  1 bush bush 31728 Jun 16 10:09 fold96.superopt5.itype3.phiseg5.png
-rw-rw-r--  1 bush bush 31282 Jun 16 10:14 fold96.superopt5.itype3.phiseg6.png
-rw-rw-r--  1 bush bush 32365 Jun 16 10:36 fold96.superopt5.itype3.yplate4.png
-rw-rw-r--  1 bush bush 32951 Jun 16 10:40 fold96.superopt5.itype3.yplate5.png
-rw-rw-r--  1 bush bush 34936 Jun 16 10:29 fold96.superopt5.itype3.yplate6.png
-rw-rw-r--  1 bush bush 32575 Jun 16 10:43 fold96.superopt5.itype3.yplate7.png
-rw-rw-r--  1 bush bush 20183 Jun 16 09:51 fold96.superopt5.localbuck.png
-rw-rw-r--  1 bush bush 37536 Jun 16 09:35 fold96.superopt5.objective.png
-rw-r--r--  1 bush bush 19886 Jun 16 09:47 fold96.superopt5.opm
-rw-rw-r--  1 bush bush 20268 Jun 16 09:55 fold96.superopt5.symgenbuck.png


4. Seven major "convex up" segments over half the width (total WIDTH = 100 inches)

-rw-r--r--  1 bush bush  6627 Jun 16 21:37 fold97.BEG
-rw-r--r--  1 bush bush 14041 Jun 16 21:37 fold97.DEC
-rw-r--r--  1 bush bush   989 Jun 16 21:37 fold97.OPT
-rw-r--r--  1 bush bush   318 Jun 18 09:24 fold97.readme
-rw-rw-r--  1 bush bush 16811 Jun 16 11:09 fold97.startingdesign.png
-rw-rw-r--  1 bush bush 19867 Jun 16 21:36 fold97.superopt1.localbuck.png
-rw-rw-r--  1 bush bush 37204 Jun 16 21:32 fold97.superopt1.objective.png
-rw-rw-r--  1 bush bush 20544 Jun 17 10:06 fold97.superopt2.localbuck.png
-rw-rw-r--  1 bush bush 40502 Jun 17 10:02 fold97.superopt2.objective.png
-rw-rw-r--  1 bush bush 21183 Jun 17 21:27 fold97.superopt3.localbuck.png
-rw-rw-r--  1 bush bush 40591 Jun 17 21:23 fold97.superopt3.objective.png
-rw-r--r--  1 bush bush  4236 Jun 18 09:15 fold97.superopt4.FEASIBLE.design
-rw-rw-r--  1 bush bush 20227 Jun 18 09:22 fold97.superopt4.antisymgenbuck.png
-rw-rw-r--  1 bush bush 20134 Jun 18 09:09 fold97.superopt4.localbuck.n1.png
-rw-rw-r--  1 bush bush 19732 Jun 18 09:13 fold97.superopt4.localbuck.n17.png
-rw-rw-r--  1 bush bush 38850 Jun 18 09:04 fold97.superopt4.objective.png
-rw-r--r--  1 bush bush 21514 Jun 18 09:10 fold97.superopt4.opm
-rw-rw-r--  1 bush bush 19991 Jun 18 09:18 fold97.superopt4.symgenbuck.png
-rw-r--r--  1 bush bush 21514 Jun 19 09:39 fold97.superopt5.FEASIBLE.design.opm
-rw-rw-r--  1 bush bush 20292 Jun 19 09:52 fold97.superopt5.antisymgenbuck.png
-rw-rw-r--  1 bush bush 65607 Jun 19 10:10 fold97.superopt5.antisymgenbuck.stags.png
-rw-r--r--  1 bush bush  5470 Jun 19 09:39 fold97.superopt5.chg
-rw-rw-r--  1 bush bush 20420 Jun 19 09:44 fold97.superopt5.localbuck.n1.png
-rw-rw-r--  1 bush bush 20458 Jun 19 09:56 fold97.superopt5.localbuck.n3.png
-rw-rw-r--  1 bush bush 37961 Jun 19 09:26 fold97.superopt5.objective.png
-rw-rw-r--  1 bush bush 20693 Jun 19 09:49 fold97.superopt5.symgenbuck.png
-rw-rw-r--  1 bush bush 62460 Jun 19 10:14 fold97.superopt5.symgenbuck.stags.png


5. Eight major "convex up" segments over half the width (total WIDTH = 100 inches)

-rw-r--r--  1 bush bush  7258 Jun 19 10:32 fold98.BEG
-rw-r--r--  1 bush bush 15931 Jun 19 10:32 fold98.DEC
-rw-r--r--  1 bush bush   989 Jun 19 10:32 fold98.OPT
-rw-rw-r--  1 bush bush  1877 Jun 21 09:59 fold98.detailofoptimized.png
-rw-rw-r--  1 bush bush  1591 Jun 21 09:54 fold98.discretization.png
-rw-rw-r--  1 bush bush 65673 Jul  2 11:30 fold98.optimized.stags.eig1.png
-rw-rw-r--  1 bush bush 62213 Jul  2 11:32 fold98.optimized.stags.eig2.png
-rw-rw-r--  1 bush bush 67294 Jul  2 11:35 fold98.optimized.stags.eig3.png
-rw-rw-r--  1 bush bush 62320 Jul  2 11:37 fold98.optimized.stags.eig4.png
-rw-rw-r--  1 bush bush 64915 Jul  2 11:39 fold98.optimized.stags.eig5.png
-rw-rw-r--  1 bush bush 64407 Jul  2 11:41 fold98.optimized.stags.eig6.png
-rw-r--r--  1 bush bush  3912 Jul  2 11:44 fold98.readme
-rw-r--r--  1 bush bush   733 Jun 23 10:17 fold98.stags
-rw-rw-r--  1 bush bush 17109 Jun 19 10:31 fold98.startingdesign.png
-rw-rw-r--  1 bush bush 23154 Jun 22 09:29 fold98.superopt1.imove5.iautof2.localbuck.png
-rw-rw-r--  1 bush bush 20326 Jun 19 20:18 fold98.superopt1.localbuck.png
-rw-rw-r--  1 bush bush 38606 Jun 22 09:23 fold98.superopt1.objective.imove5,iautof2.png
-rw-rw-r--  1 bush bush 38172 Jun 19 20:13 fold98.superopt1.objective.png
-rw-rw-r--  1 bush bush 21591 Jun 22 23:27 fold98.superopt2.imove5.iautof2.localbuck.png
-rw-rw-r--  1 bush bush 20114 Jun 20 12:34 fold98.superopt2.localbuck.png
-rw-rw-r--  1 bush bush 40424 Jun 22 23:22 fold98.superopt2.objective.imove5.iautof2.png
-rw-rw-r--  1 bush bush 21002 Jun 23 10:08 fold98.superopt3.imove5.iautof2.antisymgenbuck.n1.png
-rw-rw-r--  1 bush bush 21283 Jun 23 09:54 fold98.superopt3.imove5.iautof2.antisymgenbuck.n2.png
-rw-rw-r--  1 bush bush 21235 Jun 23 10:11 fold98.superopt3.imove5.iautof2.antisymgenbuck.n3.png
-rw-r--r--  1 bush bush  6170 Jun 23 10:37 fold98.superopt3.imove5.iautof2.chg
-rw-rw-r--  1 bush bush 20887 Jun 23 09:38 fold98.superopt3.imove5.iautof2.localbuck.n1.png
-rw-rw-r--  1 bush bush 20107 Jun 23 09:43 fold98.superopt3.imove5.iautof2.localbuck.n6.png
-rw-r--r--  1 bush bush 23142 Jun 23 10:36 fold98.superopt3.imove5.iautof2.opm
-rw-rw-r--  1 bush bush 21029 Jun 23 10:02 fold98.superopt3.imove5.iautof2.symgenbuck.n1.png
-rw-rw-r--  1 bush bush 21209 Jun 23 09:48 fold98.superopt3.imove5.iautof2.symgenbuck.n2.png
-rw-rw-r--  1 bush bush 20141 Jun 20 21:56 fold98.superopt3.localbuck.png
-rw-rw-r--  1 bush bush 40202 Jun 23 09:28 fold98.superopt3.objective.imove5.iautof2.png
-rw-rw-r--  1 bush bush 40615 Jun 20 21:51 fold98.superopt3.objective.png
-rw-r--r--  1 bush bush  6170 Jun 21 09:29 fold98.superopt4.FEASIBLE.chg
-rw-r--r--  1 bush bush 23142 Jun 21 09:29 fold98.superopt4.FEASIBLE.opm
-rw-rw-r--  1 bush bush 24344 Jun 21 09:49 fold98.superopt4.antisymgenbuck.png
-rw-rw-r--  1 bush bush 23345 Jun 21 09:37 fold98.superopt4.localbuck.n2.png
-rw-rw-r--  1 bush bush 23556 Jun 21 09:40 fold98.superopt4.localbuck.n20.png
-rw-rw-r--  1 bush bush 41237 Jun 24 08:50 fold98.superopt4.objective.imove5.iautof2.png
-rw-rw-r--  1 bush bush 38358 Jun 21 09:09 fold98.superopt4.objective.png
-rw-rw-r--  1 bush bush 23704 Jun 21 09:45 fold98.superopt4.symgenbuck.png


6. Eight major "convex up" segments over half the width (total WIDTH = 200 inches)

-rw-r--r--  1 bush bush  7258 Jun 30 09:40 wide98.BEG
-rw-r--r--  1 bush bush 15931 Jun 30 09:40 wide98.DEC
-rw-r--r--  1 bush bush   989 Jun 30 09:40 wide98.OPT
-rw-rw-r--  1 bush bush 43172 Jul  2 11:53 wide98.optimized.stags.eig1.png
-rw-rw-r--  1 bush bush 44375 Jul  2 11:56 wide98.optimized.stags.eig2.png
-rw-rw-r--  1 bush bush 46444 Jul  2 11:58 wide98.optimized.stags.eig3.png
-rw-rw-r--  1 bush bush 47128 Jul  2 12:00 wide98.optimized.stags.eig4.png
-rw-rw-r--  1 bush bush 44565 Jul  2 12:02 wide98.optimized.stags.eig5.png
-rw-rw-r--  1 bush bush 43514 Jul  2 12:04 wide98.optimized.stags.eig6.png
-rw-r--r--  1 bush bush  3140 Jul 28 12:24 wide98.readme
-rw-r--r--  1 bush bush   612 Jul  2 11:51 wide98.stags
-rw-rw-r--  1 bush bush 17306 Jun 30 09:39 wide98.startingdesign.png
-rw-rw-r--  1 bush bush 34166 Jul 22 14:42 wide98.superduperopt1.superopt1.objective.png
-rw-rw-r--  1 bush bush 33119 Jul 22 14:44 wide98.superduperopt1.superopt2.objective.png
-rw-rw-r--  1 bush bush 35854 Jul 23 15:03 wide98.superduperopt2.superopt1.objective.png
-rw-rw-r--  1 bush bush 35868 Jul 23 15:06 wide98.superduperopt2.superopt2.objective.png
-rw-rw-r--  1 bush bush 19767 Jun 30 22:04 wide98.superopt1.localbuck.png
-rw-rw-r--  1 bush bush 20871 Jul  1 10:02 wide98.superopt2.localbuck.png
-rw-rw-r--  1 bush bush 19635 Jul  1 22:28 wide98.superopt3.localbuck.png
-rw-rw-r--  1 bush bush 42658 Jul  1 22:22 wide98.superopt3.objective.png
-rw-r--r--  1 bush bush  6170 Jul  2 10:54 wide98.superopt4.chg
-rw-rw-r--  1 bush bush 20972 Jul  2 10:58 wide98.superopt4.localbuck.n1.png
-rw-rw-r--  1 bush bush 19522 Jul  2 11:00 wide98.superopt4.localbuck.n2.png
-rw-rw-r--  1 bush bush 41579 Jul  2 10:40 wide98.superopt4.objective.png
-rw-r--r--  1 bush bush 23142 Jul  2 10:54 wide98.superopt4.opm
-rw-rw-r--  1 bush bush 20685 Jul  2 11:04 wide98.superopt4.symgenbuck.n1.png
-rw-rw-r--  1 bush bush 20686 Jul  2 11:06 wide98.superopt4.symgenbuck.n2.png
-rw-rw-r--  1 bush bush 42122 Jul  4 08:40 wide98.superopt5.objective.png

=================================================================================
