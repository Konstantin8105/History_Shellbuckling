      subroutine GASP (a, nw, ic, id)
C+---------------------------------------------------------------------+
C|    General Auxiliary Storage Program  (Mass Storage)                |
C|                                                                     |
C|            a(-)  =   Array Involved in Transfer                     |
C|                                                                     |
C|            nw    =   Size of array A                                |
C|                                                                     |
C|            ic    =   0,  Open Existing   file for activity          |
C|                  =  -1,  Open/Initialize file for activity          |
C|                  =  -2,  Close/Release   file from activity         |
C|                  =  -3,  Print statistics of current open file      |
C|                                                                     |
C|                  =   1,  Write A to mass storage                    |
C|                  =   2,  Null operation (error return)              |
C|                  =   3,  Read A from mass storage                   |
C|                                                                     |
C|            id    =   Data block (sector) reference number           |
C|                                                                     |
C|                      (If ID=0 on calls for WRITE, data will         |
C|                       be written at the end of the file)            |
C|                                                                     |
C|                      (The starting (id) is returned as an           |
C|                       arguement for (ic=1) write operations)        |
C+---------------------------------------------------------------------+
C---------------------------------------------------------------------+
C|                   A R G U M E N T S                                 |
C+---------------------------------------------------------------------+
      integer        a(*),     nw,       ic,       id
C+---------------------------------------------------------------------+
C|                   C O M M O N    &    G L O B A L S                 |
C+---------------------------------------------------------------------+
      COMMON/UNITNO/ iu
C+---------------------------------------------------------------------+
C|                   P A R A M E T E R S                               |
C+---------------------------------------------------------------------+
#if (_genopt_)
      COMMON/IDVMOD/ ifil8x, itestx
      COMMON/IDHIGH/ istor
#else
      integer        istor
      save           istor
#endif
C+---------------------------------------------------------------------+
C|    PRU  = number of words that MUST match the no. of bytes  PRULIM  |
C|           specified in the block i/o routine BIO.                   |
C+---------------------------------------------------------------------+
C|    NCPW = number of characters per word (parameter within BIO)      |
C+---------------------------------------------------------------------+
C|    CRAY:    PRU  =  512 words  =  4096 bytes  (NCPW = 8)            |
C|    INT64:   PRU  =  256 words  =  2048 bytes  (NCPW = 8)            |
C|    SYS5:    PRU  =  256 words  =  1024 bytes  (NCPW = 4)            |
C|    Other:   PRU  =  128 words  =   512 bytes  (NCPW = 4)            |
C+---------------------------------------------------------------------+
C|    SGI -32  PRU  =  256 words  =  1024 bytes  (NCPW = 4)            |
C|    SGI -64  PRU  =  128 words  =  1024 bytes  (NCPW = 8)            |
C+---------------------------------------------------------------------+
      integer        PRU
      save           PRU

      integer        BUFSIZ
#if (_mac_)
      parameter     (BUFSIZ = 1024)
#else
      parameter     (BUFSIZ = 4096)
#endif
C+---------------------------------------------------------------------+
C|                   T Y P E    &    D I M E N S I O N                 |
C+---------------------------------------------------------------------+
      character      sfn*128,  opt*2

#if (_mac_)
      integer*2      blkopn,   blkclo,   blkwtr,   blkrdr
      integer*2      fd
#else
      integer        fd
#endif
      save           fd

      logical        debug
      integer        iblk,     size,     iopen,    next
      save           iblk,     size,     iopen,    next

      integer        idi,      idmx,     ierr,     j,        last
      integer        nblk,     nwds,     nwtogo

      integer        fdu(2),   nextu(2)
      save           fdu,      nextu

      integer        b(BUFSIZ)
C+---------------------------------------------------------------------+
C|                   D A T A                                           |
C+---------------------------------------------------------------------+
      data           debug  / .FALSE. /
      data           iopen  / -1 /
C+---------------------------------------------------------------------+
C|                   L O G I C                                         |
C+---------------------------------------------------------------------+
      not = 0

      if (iu .eq. 10) then
        lu  = 2
        sfn = 'fort.10'
        lfn = 7
      else
        lu  = 1
        iu  = 11
        sfn = 'fort.11'
        lfn = 7
      endif

#if (_genopt_)
      ifile = ifil8x
      if (itestx .eq. 1) then

         write(ifile,'(A,I6,A,I6,A,I6)')
     $          ' in GASP: array size,nw= ', nw,
     $          '; function,ic= ', ic,
     $          '; address id= ', id
      endif

#endif
      if (ic .eq.  0)                  go to 1000
      if (ic .eq. -1)                  go to 1000

      if (iopen .le. 0)                then
        write (not,8000) ic, id
        call     EXIT (1)
      end if

      if (ic .eq. -2)                  go to 4000
      if (ic .eq. -3)                  go to 5000
      if (ic .eq.  1)                  go to 2000
      if (ic .eq.  3)                  go to 3000

      write (not,8001) ic, id
      call     EXIT (1)
C+---------------------------------------------------------------------+
C|                                                                     |
C|                   O P E N        O p e r a t i o n                  |
C|                                                                     |
C+---------------------------------------------------------------------+
 1000 continue
      nwa     =  1

#if (_mac_)
      if (ic .eq. 0)                   then
        opt     =  'bo'
      else
        opt     =  'bn'
      endif
c     PRU     =  128
      PRU     =  256

      ierr    =  blkopn (sfn(1:lfn), opt, fd, size)
#else
      if (ic .eq. 0)                   then
        opt     =  ' o'
      else
        opt     =  '  '
      endif

      call       BLKOPN (sfn(1:lfn), opt, fd, PRU, size, ierr)
#endif

      if ((PRU .le.      0) .or.
     $    (PRU .gt. BUFSIZ)     )      then
        write (not,8002) sfn(1:lfn), PRU, BUFSIZ
        call     EXIT (3)
      endif

      npru    =  PRU
*     istor   =  size

      last    =  (size + PRU-1) / PRU
      next    =  last + 1

      fdu(lu)   = fd
      nextu(lu) = next

      if (ierr .ne. 0)                 then
        write (not,8003) sfn(1:lfn), fd, PRU, last, ierr
        call     EXIT (4)
      endif

      iopen   =  1

      if (debug)                       then
        write (not,7000) sfn(1:lfn), opt, fd, PRU, size, last, ierr
      endif

#if (_genopt_)
      if (itestx .eq. 1) then
         write(ifile,'(a,i8,a,i1,a,i4)')
     $         'GASP OPEN: size=', size,
     $         ' nextu[', lu, '] = ', nextu(lu)
      endif

#endif
      return
C+---------------------------------------------------------------------+
C|                                                                     |
C|                   W R I T E      O p e r a t i o n                  |
C|                                                                     |
C+---------------------------------------------------------------------+
 2000 continue
      fd   = fdu(lu)
      next = nextu(lu)
C+---------------------------------------------------------------------+
C|    iblk  =    number of blocks to write out                         |
C+---------------------------------------------------------------------+
      idi   =     id
      iblk  =    (nw-1)/PRU + 1

#if (_genopt_)
      if (itestx .eq. 1) then
c        write(ifile,'(a,/,9i8)')
c    $         ' nw,ic,id,lu,fd,next,idi,iblk,istor=',
c    $           nw,ic,id,lu,fd,next,idi,iblk,istor
         write(ifile,'(a,i8,a,i4,a,i3,a,i3,a,i3,a,i8,a,i6,a,i6,a,i9)')
     $         ' GASP WRITE: nw=', nw, '  ic= ', ic,
     $         '  id=', id, '  lu= ', lu, '  fd= ', fd,
     $         '  next= ', next, '  idi= ', idi,
     $         '  iblk=', iblk, 'istor=', istor
      endif

#endif
      if (id .gt. 0)                   go to 2500
C+---------------------------------------------------------------------+
C|    id = 0,  append A(-) to the end of the existing file             |
C+---------------------------------------------------------------------+
C+---------------------------------------------------------------------+
C|    idi     =  current block (sector) reference number               |
C|    next    =  block number for next append-write (last + 1)         |
C|    istor   =  current total number of words stored                  |
C|    nwds    =  number of words (even multiple of PRU's)              |
C+---------------------------------------------------------------------+
      idi    =   next
      istor  =   istor + nw

      id     =   idi
C+---------------------------------------------------------------------+
C|    id > 0,  Write out A(-) at block number ( id )                   |
C+---------------------------------------------------------------------+
 2500 if (idi .gt. next)               then
        write (not,8004) fd, ic, id, nw, idi, next
        call     EXIT (5)
      endif
C+---------------------------------------------------------------------+
C|    Write out directly from output array  a(-)  the next 'n/PRU'     |
C|    complete blocks of desired data.                                 |
C+---------------------------------------------------------------------+
      nwtogo =   nw
      nblk   =   nwtogo / PRU
      nwds   =   nblk   * PRU

      if (nwds .eq. 0)                 go to 2600

#if (_mac_)
      ierr   =   blkwtr (fd, nwds, idi, a(1))
#else
      call       BLKWTR (fd, a(1), nwds, idi, ierr)
#endif

      if (ierr .ne. 0)                 then
        write (not,8005) fd, ic, id, nw, idi, nblk, nwds,  next,
     $                                              istor, ierr
        call     EXIT (6)
      endif

      idi    =   idi + nblk
C+---------------------------------------------------------------------+
C|      nwds = total number of words transfered in last write          |
C|       idi = starting block number for any aditional writes          |
C|    nwtogo = number of words left to write out from a(-)             |
C+---------------------------------------------------------------------+
      nwtogo =   nwtogo - nwds

 2600 if (nwtogo .le. 0)               go to 2800
C+---------------------------------------------------------------------+
C|    Last portion of desired record not on alignment boundary, hence  |
C|    transfer that portion of output array  a(-)  to this buffer and  |
C|    zero fill remainder of buffer, and write it out.                 |
C+---------------------------------------------------------------------+
      do 2700  j = 1,nwtogo
        b(j) =    a(nwds+j)
 2700 continue

      do 2750  j = nwtogo+1,PRU
        b(j) =  0
 2750 continue

#if (_mac_)
      ierr   =   blkwtr (fd, npru, idi, b(1))
#else
      call       BLKWTR (fd, b(1), PRU, idi, ierr)
#endif

      if (ierr .ne. 0)                 then
        write (not,8005) fd, ic, id, nw, idi, nblk, PRU,   next,
     $                                              istor, ierr
        call     EXIT (7)
      endif

      idi    =   idi + 1

 2800 continue

      if (debug)                       then
        write  (not,9000) fd, nw, a(nw), ic
      endif

      next      = MAX (next, idi)
      nextu(lu) = next

#if (_genopt_)
      if (itestx .eq. 1) then
        write(ifile,'(a,i6,a,i8,a,i1,a,i4)')
     $         'GASP WRITE: nw=', nw,
     $         '; id=', id,
     $         '; nextu[',lu,']=', nextu(lu)
      endif

#endif
      return
C+---------------------------------------------------------------------+
C|                                                                     |
C|                   R E A D        O p e r a t i o n                  |
C|                                                                     |
C+---------------------------------------------------------------------+
 3000 continue
      fd   = fdu(lu)
      next = nextu(lu)
C+---------------------------------------------------------------------+
C|    iblk    =  number of blocks to read in                           |
C+---------------------------------------------------------------------+
      idi   =    id
      iblk  =   (nw-1)/PRU + 1

      if (id .gt. 0)                   go to 3200
C+---------------------------------------------------------------------+
C|    id = 0,  ERROR for Read operation                                |
C+---------------------------------------------------------------------+
      write (not,8006) nw, ic, id

      call     EXIT (8)
C+---------------------------------------------------------------------+
C|    ID > 0,  Check for Reading past the EOF                          |
C+---------------------------------------------------------------------+
 3200 continue
      idmx  =   (idi - 1) + iblk
      if (idmx .lt. next)              go to 3500

      write (not,8007) nw, id, ic, iblk, idmx, next, PRU

      call     EXIT (9)
C+---------------------------------------------------------------------+
C|    ID > 0,  Read in A(-) from block number ( id )                   |
C+---------------------------------------------------------------------+
 3500 continue
C+---------------------------------------------------------------------+
C|    Read into output array  a(-)  the next 'n/64' complete blocks    |
C|    of desired data.  No intermediate transfers are required here.   |
C+---------------------------------------------------------------------+
      nwtogo  =  nw
      nblk    =  nwtogo / PRU
      nwds    =  nblk   * PRU

      if (nwds .eq. 0)                 go to 3600

#if (_mac_)
      ierr    =  blkrdr (fd, nwds, idi, a(1))
#else
      call       BLKRDR (fd, a(1), nwds, idi, ierr)
#endif

      if (ierr .ne. 0)                 then
        write (not,8005) fd, ic, id, nw, idi, nblk, nwds,  next,
     $                                              istor, ierr
        call     EXIT (10)
      endif

      idi    =   idi + nblk
C+---------------------------------------------------------------------+
C|      nwds = last word read into array a(-)                          |
C|       idi = next starting block number for any aditional reads      |
C|    nwtogo = number of words left to read in array a(-)              |
C+---------------------------------------------------------------------+
      nwtogo =   nwtogo - nwds

 3600 if (nwtogo .le. 0)               go to 3800
C+---------------------------------------------------------------------+
C|    Last portion of desired record not on alignment boundary, hence  |
C|    read into buffer  b(-)  and transfer residual portion to the     |
C|    output array  a(-)  which will end the transfer of desired data. |
C+---------------------------------------------------------------------+

#if (_mac_)
      ierr   =   blkrdr (fd, npru, idi, b(1))
#else
      call       BLKRDR (fd, b(1), PRU, idi, ierr)
#endif

      if (ierr .ne. 0)                 then
        write (not,8005) fd, ic, id, nw, idi, nblk, PRU,   next,
     $                                              istor, ierr
        call     EXIT (11)
      endif

      idi    =   idi + 1

      do 3700 j = 1,nwtogo
        a(nwds+j) =  b(j)
 3700 continue

 3800 continue

      if (debug)                       then
        write  (not,9000) id, nw, a(nw), ic
      endif

#if (_genopt_)
      if (itestx .eq. 1) then
        write(ifile,'(a,i6,a,i8,a,i1,a,i4)')
     $        'GASP READ: nw=', nw,
     $        '; id=', id,
     $        '; nextu[',lu,'] = ', nextu(lu)
      endif
#endif

      return
C+---------------------------------------------------------------------+
C|                                                                     |
C|                   C L O S E      O p e r a t i o n                  |
C|                                                                     |
C+---------------------------------------------------------------------+
 4000 continue
      fd   = fdu(lu)

#if (_mac_)
      opt    =   '  '

      ierr   =   blkclo (sfn(1:lfn), opt, fd, size)
#else
      opt    =   '  '

      call       BLKCLO (fd, opt, size, ierr)
#endif

      if (ierr .ne. 0)                 then
        write (not,8008) fd, nw, ic, id, ierr
        call     EXIT (12)
      endif

      iopen   = -1

#if (_genopt_)
      if (itestx .eq. 1) then
        write(ifile,'(a,i8,a,i1,a,i4)') 
     $        'GASP CLOSE: size=', size,
     $        '  nextu[',lu,'] = ',nextu(lu)
      endif

#endif
      return
C+---------------------------------------------------------------------+
C|                                                                     |
C|                   S T A T U S      O p e r a t i o n                |
C|                                                                     |
C+---------------------------------------------------------------------+
 5000 continue

#if (_mac_)
C     ierr   =   blksta (fd)
      ierr   =   0
#else
      call       BLKSTA (fd, ierr)
#endif

      if (ierr .ne. 0)                 then
        write (not,8009) fd, nw, ic, id, ierr
        call     EXIT (13)
      endif

      return
C+---------------------------------------------------------------------+
C|                   Fortran Statements                                |
C+---------------------------------------------------------------------+
 7000 format (/,' debug from GASP:   sfn  = ',a,
     $       //,19x,'opt  = ',a,
     $        /,19x,'fd   = ',i8,
     $        /,19x,'PRU  = ',i8,
     $        /,19x,'size = ',i8,
     $        /,19x,'last = ',i8,
     $        /,19x,'ierr = ',i8,/)

 8000 format (/' Error in GASP:   Illegal Op-Code   ic = ',I6,
     $           '  id = ',I6,
     $        /'                  must OPEN "scratch" file before ',
     $                            'trying to use it',/)
 8001 format (/' Error in GASP:   Illegal Op-Code   ic = ',I6,
     $           '  id = ',I6/)
 8002 format (/' Error in GASP:   BAD returned buffer size (PRU)',
     $         ' from BLKOPN(---)',
     $        /'                  sfn = ',a,
     $        /'                  PRU = ',I6,'  BUFSIZ = ',I8,/)
 8003 format (/' Error in GASP:   Opening file  sfn = ',a,
     $         '  fd = ',I4,'  PRU = ',I6,'  last = ',I8,
     $         '  ierr = ',Z16/)

 8004 format (//' Error in GASP:   Attempting to WRITE beyond the',
     $          ' End-Of-File:',
     $        //8X,'     fd   ic     id      nw    idi    next',
     $         /8X,I7,I5,2(I7,I8))
 8005 format (//' Error in GASP:   Data Transfer Error Return with:',
     $        //8X,'     fd   ic     id      nw    idi    nblk',
     $          '    nwds   next     istor             ierr',
     $         /8X,I7,I5,2(I7,I8),I8,I7,I10,1X,Z16,2X,'(hex)')
 8006 format (/' Error in GASP:   Illegal Block No. for READ Op',
     $         '   nw = ',I6,'  ic = ',I6,'  id = ',I8/)
 8007 format (/' Error in GASP:   Illegal Record Size for READ Op',
     $        /'    nw = ',I8,'     id = ',I8,'    ic = ',I8,
     $        /'  iblk = ',I8,'   idmx = ',I8,'  next = ',I8,
     $        /'   PRU = ',I8/)
 8008 format (/' ERROR in GASP Block I/O,   fd = ',I6,'   nw = ',I8,
     $         '  ic = ',I8,'  id = ',I8,'  ierr = ',I6/)
 8009 format (/' ERROR in GASP I/O Status,   fd = ',I6,'   nw = ',I8,
     $         '  ic = ',I8,'  id = ',I8,'  ierr = ',I6/)

*8010 format (/' Error in GASP:   Disc Limit = ',I10,'  Exceeded.'/)

 9000 format (' GASP:   id = ',I8,'  nw = ',I6,'  a(nw) = ',Z16,
     $        '  ic = ',I3)
      end
