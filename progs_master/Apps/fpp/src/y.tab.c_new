#define YYQWE     257
#define YYCOLON   258
#define YYOR      259
#define YYAND     260
#define YYNOT     261
#define YYEQV     262
#define YYNEQV    263
#define YYBITOR   264
#define YYBITAND  265
#define YYBITXOR  266
#define YYBITNOT  267
#define YYEQ      268
#define YYNE      269
#define YYLT      270
#define YYGT      271
#define YYLE      272
#define YYGE      273
#define YYLS      274
#define YYRS      275
#define YYADD     276
#define YYSUB     277
#define YYMUL     278
#define YYDIV     279
#define YYREM     280
#define YYDEG     281
#define YYLPAR    282
#define YYRPAR    283
#define YYNUM     284
#define YYCOMMA   285
#define YYSTOP    286
#define YYBADLEX  287

#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <malloc.h>
#include <memory.h>
#endif

#include <values.h>

#ifdef __cplusplus

#ifndef yyerror
  void yyerror(const char *);
#endif

#ifndef yylex
#ifdef __EXTERN_C__
  extern "C" { int yylex(void); }
#else
  int yylex(void);
#endif
#endif
  int yyparse(void);

#endif

#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0

extern int yychar;
extern int yyerrflag;

#ifndef YYSTYPE
#define YYSTYPE int
#endif
YYSTYPE yylval;
YYSTYPE yyval;
typedef int yytabelem;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
#if YYMAXDEPTH > 0
int yy_yys[YYMAXDEPTH], *yys = yy_yys;
YYSTYPE yy_yyv[YYMAXDEPTH], *yyv = yy_yyv;
#else        /* user does initial allocation */
int *yys;
YYSTYPE *yyv;
#endif
static int yymaxdepth = YYMAXDEPTH;
#define YYERRCODE 256

# line 79 "eval.y"

#include "fpp.h"
#include "symtab.h"
#include "rgram.h"
#include "service.h"
#include "sb.h"

void
yyerror( const char *s ) {
  fppmess(ERR_IF,s);
}

int
yylex() {
  int        lmode;
  int        n;
  char       c, *s;
  SymPtr     sym;
  Token     *tokp;

  lmode = (mmode & ~(MOD_SPACE | MOD_CONT)) | MOD_IF;
  tokp  = skipbl(lmode);

  switch (tokp->token[0]) {

  case '(':
    return YYLPAR;

  case ')':
    return YYRPAR;

  case ',':
    return YYCOMMA;

  case '%':
    return YYREM;

  case '/':
    return YYDIV;

  case '*':
    if (tokp->token[1] == '*')
      return YYDEG;
    else
      return YYMUL;

  case '-':
    return YYSUB;

  case '+':
    return YYADD;

  case '~':
    return YYBITNOT;

  case '^':
    return YYBITXOR;

  case '?':
    return YYQWE;

  case ':':
    return YYCOLON;

  case '|':        
    if (tokp->token[1] == '|')
      return YYOR;
    else
      return YYBITOR;

  case '&':
    if (tokp->token[1] == '&')
      return YYAND;
    else
      return YYBITAND;

  case '!':
    if (tokp->token[1] == '=')
      return YYNE;
    else
      return YYNOT;

  case '=':
    if (tokp->token[1] == '=')
      return YYEQ;
    else
      return YYSTOP;

  case '<':
    if (tokp->token[1] == '=')
      return YYLE;
    else if (tokp->token[1] == '<') 
      return YYLS;
    else 
      return YYLT;

  case '>':
    if (tokp->token[1] == '=')
      return YYGE;
    else if (tokp->token[1] == '>') 
      return YYRS;
    else
      return YYGT;

  case '\n':
      return YYSTOP;

  case '.':
    skipbl(lmode);
    sym = symget(tokp->token,CL_FOP);

    if (sym == NULL)
      return YYBADLEX;

    n = symvali(sym);

    switch (n) {

    case FTN_TRUE:
      n = YYNUM; yylval = 1;
      break;

    case FTN_FALSE:
      n = YYNUM; yylval = 0;
      break;

    case FTN_EQ:
      n = YYEQ;
      break;

    case FTN_NE:
      n = YYNE;
      break;

    case FTN_LT:
      n = YYLT;
      break;

    case FTN_LE:
      n = YYLE;
      break;

    case FTN_GT:
      n = YYGT;
      break;

    case FTN_GE:
      n = YYGE;
      break;

    case FTN_AND:
      n = YYAND;
      break;

    case FTN_OR:
      n = YYOR;
      break;

    case FTN_NEQV:
    case FTN_XOR:        /* these two are the same */
      n = YYNEQV;
      break;

    case FTN_EQV:
      n = YYEQV;
      break;

    case FTN_NOT:
      n = YYNOT;
      break;

    default:
      return YYBADLEX;

    }

    skipbl(lmode);
    if (tokp->token[0] != '.') 
      return YYBADLEX;
    else
      return n;

  default:
 
    if (tokp->val == TK_NAME) {
      if (!strcmp(tokp->token,"defined")) {
        int save;

        save = dosubstfl;
        dosubstfl = 0;
        tokp = skipbl(lmode);
        if (tokp->val == TK_NAME) {
          dosubstfl = save;
          if (symget(tokp->token,CL_NM))
            yylval = 1;
          else
            yylval = 0;
          return YYNUM;
        }        
        else if (tokp->token[0] != '(') {
          dosubstfl = save;
          return YYBADLEX;
        }
        tokp = skipbl(lmode);
        dosubstfl = save;
        if (tokp->val == TK_NAME && symget(tokp->token,CL_NM))
          yylval = 1;
        else
          yylval = 0;
        tokp = skipbl(lmode);
        if (tokp->token[0] != ')') 
          return YYBADLEX;
        return YYNUM;
      }
      else {
        if (sbfl) {
          sb_mref(tokp->token, 0, 0);
          sb_mref_end();
        }
        yylval = 0;
        return YYNUM;
      }
    }

    else if (tokp->val == TK_NUM) {
      s = tokp->token;
      while (c=*s++) {
        if (!is_num(c))
          return YYBADLEX;
      }
#if USE_C_HEX_CONST
      if (tokp->token[0] == '0') {
        /* C octal constant is allowed 
         * in #if expression */
        strtoi(tokp->token,&yylval,8);
      }
      else
#endif /* USE_C_HEX_CONST */
        strtoi(tokp->token,&yylval,10);
      return YYNUM;
    }

    else if (tokp->val == TK_BOZ) {
      int        err;

      switch (lowcase(tokp->token[0])) {

      case 'b':
        tokp = skipbl(lmode);
        CHECK(tokp->token[0] == '\'' || tokp->token[0] == '"');

        /* Erase the trailing quote */
        tokp->token[--tokp->length] = 0;
        err = strtoi(tokp->token+1, &yylval, 2);
        if (err) 
          return YYBADLEX;
        else        return YYNUM;
        break;

      case 'o':
        tokp = skipbl(lmode);
        CHECK(tokp->token[0] == '\'' || tokp->token[0] == '"');
        tokp->token[--tokp->length] = 0;
        err = strtoi(tokp->token+1, &yylval, 8);
        if (err) 
          return YYBADLEX;
        else        return YYNUM;
        break;

      case 'x':
      case 'z':
        tokp = skipbl(lmode);
        CHECK(tokp->token[0] == '\'' || tokp->token[0] == '"');
        tokp->token[--tokp->length] = 0;
        err = strtoi(tokp->token+1, &yylval, 16);
        if (err) 
          return YYBADLEX;
        else        return YYNUM;
        break;

      case '\'':
      case '"':
        c = tokp->token[tokp->length - 1];
        if (lowcase(c) == 'o') {
          tokp->length -= 2;
          tokp->token[tokp->length] = 0;
          err = strtoi(tokp->token+1, &yylval, 8);
        }
        else if (lowcase(c) == 'x') {
          tokp->length -= 2;
          tokp->token[tokp->length] = 0;
          err = strtoi(tokp->token+1, &yylval, 16);
        }
        else return YYBADLEX;
        if (err) 
          return YYBADLEX;
        else        return YYNUM;
#if USE_C_HEX_CONST
      case '0':
        CHECK(lowcase(tokp->token[1]) == 'x');
        err = strtoi(tokp->token+2, &yylval, 16);
        if (err) 
          return YYBADLEX;
        else        return YYNUM;
        break;

#endif /* USE_C_HEX_CONST */
      default:
        CHECK(0);
        return YYBADLEX;
      }

    }
    else
      return YYBADLEX;
  }
/* return YYBADLEX; */
}


yytabelem yyexca[] ={
   -1,  1,
    0, -1,
   -2,  0,
   -1, 45,
  270,  0,
  271,  0,
  272,  0,
  273,  0,
   -2, 10,
   -1, 46,
  270,  0,
  271,  0,
  272,  0,
  273,  0,
   -2, 11,
   -1, 47,
  270,  0,
  271,  0,
  272,  0,
  273,  0,
   -2, 12,
   -1, 48,
  270,  0,
  271,  0,
  272,  0,
  273,  0,
   -2, 13,
   -1, 49,
  268,  0,
  269,  0,
   -2, 14,
   -1, 50,
  268,  0,
  269,  0,
   -2, 15,
  };

#define YYNPROD 31
#define YYLAST 286

yytabelem yyact[]={
    31,     1,    28,    27,     0,    30,    29,    26,    24,    25,
     0,    22,    23,    18,    20,    19,    21,    16,    17,    14,
    15,    11,    12,    13,    10,     0,     0,     0,    32,     9,
    31,    61,    28,    27,     0,    30,    29,    26,    24,    25,
     0,    22,    23,    18,    20,    19,    21,    16,    17,    14,
    15,    11,    12,    13,    10,     0,     0,    31,    32,    28,
    27,     0,    30,    29,    26,    24,    25,     0,    22,    23,
    18,    20,    19,    21,    16,    17,    14,    15,    11,    12,
    13,    10,     0,    60,    31,    32,    28,    27,     0,    30,
    29,    26,    24,    25,     0,    22,    23,    18,    20,    19,
    21,    16,    17,    14,    15,    11,    12,    13,    10,     0,
     0,     0,    32,    30,    29,    26,    24,    25,     0,    22,
    23,    18,    20,    19,    21,    16,    17,    14,    15,    11,
    12,    13,    10,    26,    24,    25,    32,    22,    23,    18,
    20,    19,    21,    16,    17,    14,    15,    11,    12,    13,
    10,     0,     0,     0,    32,    22,    23,    18,    20,    19,
    21,    16,    17,    14,    15,    11,    12,    13,    10,     0,
     0,     0,    32,    18,    20,    19,    21,    16,    17,    14,
    15,    11,    12,    13,    10,     0,     0,     0,    32,    16,
    17,    14,    15,    11,    12,    13,    10,     0,     0,     0,
    32,    14,    15,    11,    12,    13,    10,     0,     0,     5,
    32,    11,    12,    13,    10,     6,    10,     0,    32,     0,
    32,     3,     0,     2,     0,     4,    33,    34,    35,     0,
     7,    36,     8,     0,    37,    38,    39,    40,    41,    42,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    58,    59,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    62 };

yytabelem yypact[]={
   -52,-10000000,  -257,-10000000,   -52,   -52,   -52,   -52,-10000000,-10000000,
   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,
   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,   -52,
   -52,   -52,   -52,-10000000,-10000000,-10000000,  -200,   -65,   -65,   -65,
   -65,   -67,   -67,   -75,   -75,   -85,   -85,   -85,   -85,   -97,
   -97,  -113,  -113,  -113,  -149,  -149,  -131,  -131,  -227,-10000000,
-10000000,   -52,  -173 };

yytabelem yypgo[]={
     0,     1,   223,   221 };

yytabelem yyr1[]={
     0,     1,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     3,     3,     3,     3,
     3 };

yytabelem yyr2[]={
     0,     5,     7,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     7,    11,     7,     3,     5,     5,     5,     7,
     3 };

yytabelem yychk[]={
-10000000,    -1,    -2,    -3,   277,   261,   267,   282,   284,   286,
   281,   278,   279,   280,   276,   277,   274,   275,   270,   272,
   271,   273,   268,   269,   265,   266,   264,   260,   259,   263,
   262,   257,   285,    -3,    -3,    -3,    -2,    -2,    -2,    -2,
    -2,    -2,    -2,    -2,    -2,    -2,    -2,    -2,    -2,    -2,
    -2,    -2,    -2,    -2,    -2,    -2,    -2,    -2,    -2,    -2,
   283,   258,    -2 };

yytabelem yydef[]={
     0,    -2,     0,    25,     0,     0,     0,     0,    30,     1,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    26,    27,    28,     0,     2,     3,     4,
     5,     6,     7,     8,     9,    -2,    -2,    -2,    -2,    -2,
    -2,    16,    17,    18,    19,    20,    21,    22,     0,    24,
    29,     0,    23 };

typedef struct
#ifdef __cplusplus
  yytoktype
#endif
{ char *t_name; int t_val; } yytoktype;
#ifndef YYDEBUG
#define YYDEBUG  0  /* don't allow debugging */
#endif

#if YYDEBUG

yytoktype yytoks[] =
{
  "YYQWE",       257,
  "YYCOLON",     258,
  "YYOR",        259,
  "YYAND",       260,
  "YYNOT",       261,
  "YYEQV",       262,
  "YYNEQV",      263,
  "YYBITOR",     264,
  "YYBITAND",    265,
  "YYBITXOR",    266,
  "YYBITNOT",    267,
  "YYEQ",        268,
  "YYNE",        269,
  "YYLT",        270,
  "YYGT",        271,
  "YYLE",        272,
  "YYGE",        273,
  "YYLS",        274,
  "YYRS",        275,
  "YYADD",       276,
  "YYSUB",       277,
  "YYMUL",       278,
  "YYDIV",       279,
  "YYREM",       280,
  "YYDEG",       281,
  "YYLPAR",      282,
  "YYRPAR",      283,
  "YYNUM",       284,
  "YYCOMMA",     285,
  "YYSTOP",      286,
  "YYBADLEX",    287,
  "-unknown-",    -1        /* ends search */
};

char * yyreds[] =
{
  "-no such reduction-",
  "S : exp YYSTOP",
  "exp : exp YYDEG exp",
  "exp : exp YYMUL exp",
  "exp : exp YYDIV exp",
  "exp : exp YYREM exp",
  "exp : exp YYADD exp",
  "exp : exp YYSUB exp",
  "exp : exp YYLS exp",
  "exp : exp YYRS exp",
  "exp : exp YYLT exp",
  "exp : exp YYLE exp",
  "exp : exp YYGT exp",
  "exp : exp YYGE exp",
  "exp : exp YYEQ exp",
  "exp : exp YYNE exp",
  "exp : exp YYBITAND exp",
  "exp : exp YYBITXOR exp",
  "exp : exp YYBITOR exp",
  "exp : exp YYAND exp",
  "exp : exp YYOR exp",
  "exp : exp YYNEQV exp",
  "exp : exp YYEQV exp",
  "exp : exp YYQWE exp YYCOLON exp",
  "exp : exp YYCOMMA exp",
  "exp : term",
  "term : YYSUB term",
  "term : YYNOT term",
  "term : YYBITNOT term",
  "term : YYLPAR exp YYRPAR",
  "term : YYNUM",
};
#endif /* YYDEBUG */

# line        1 "/usr/ccs/bin/yaccpar"

/*
 * Copyright (c) 1993 by Sun Microsystems, Inc.
 */

#pragma ident        "@(#)yaccpar        6.12        93/06/07 SMI"

/*
** Skeleton parser driver for yacc output
*/

/*
** yacc user known macros and defines
*/

#define YYERROR         goto yyerrlab
#define YYACCEPT        return(0)
#define YYABORT         return(1)
#define YYBACKUP( newtoken, newvalue )\
{\
  if ( yychar >= 0 || ( yyr2[ yytmp ] >> 1 ) != 1 )\
  {\
    yyerror( "syntax error - cannot backup" );\
    goto yyerrlab;\
  }\
  yychar = newtoken;\
  yystate = *yyps;\
  yylval = newvalue;\
  goto yynewstate;\
}
#define YYRECOVERING()        (!!yyerrflag)
#define YYNEW(type)        malloc(sizeof(type) * yynewmax)
#define YYCOPY(to, from, type) \
  (type *) memcpy(to, (char *) from, yynewmax * sizeof(type))
#define YYENLARGE( from, type) \
  (type *) realloc((char *) from, yynewmax * sizeof(type))
#ifndef YYDEBUG
#        define YYDEBUG        1        /* make debugging available */
#endif

/*
** user known globals
*/

int yydebug;                        /* set to 1 to get debugging */

/*
** driver internal defines
*/

#define YYFLAG                (-10000000)

/*
** global variables used by the parser
*/

YYSTYPE *yypv;                        /* top of value stack */
int     *yyps;                        /* top of state stack */

int      yystate;                     /* current state */
int      yytmp;                       /* extra var (lasts between blocks) */

int      yynerrs;                     /* number of errors */
int      yyerrflag;                   /* error recovery flag */
int      yychar;                      /* current input token number */



#ifdef YYNMBCHARS
#define YYLEX()      yycvtok(yylex())
/*
** yycvtok - return a token if i is a wchar_t value that exceeds 255.
**        If i<255, i itself is the token.  If i>255 but the neither 
**        of the 30th or 31st bit is on, i is already a token.
*/
#if defined(__STDC__) || defined(__cplusplus)
int yycvtok(int i)
#else
int yycvtok(i) int i;
#endif
{
  int     first = 0;
  int     last  = YYNMBCHARS - 1;
  int     mid;
  wchar_t j;

  if(i&0x60000000){                       /* Must convert to a token. */
    if( yymbchars[last].character < i ){
      return i;/*Giving up*/
    }
    while ((last>=first)&&(first>=0)) {   /* Binary search loop */
      mid = (first+last)/2;
      j = yymbchars[mid].character;
      if( j==i ){/*Found*/ 
        return yymbchars[mid].tvalue;
      }else if( j<i ){
        first = mid + 1;
      }else{
        last = mid -1;
      }
    }

    /*No entry in the table.*/

    return i;  /* Giving up.*/

  }
  else{        /* i is already a token. */
    return i;
  }
}

#else/*!YYNMBCHARS*/
#define YYLEX()         yylex()
#endif/*!YYNMBCHARS*/

/*
** yyparse - return 0 if worked, 1 if syntax error not recovered from
*/

#if defined(__STDC__) || defined(__cplusplus)
int yyparse(void)
#else
int yyparse()
#endif
{
  register YYSTYPE *yypvt;        /* top of value stack for $vars */

#if defined(__cplusplus) || defined(lint)
/*
  hacks to please C++ and lint - goto's inside switch should never be
  executed; yypvt is set to 0 to avoid "used before set" warning.
*/
  static int __yaccpar_lint_hack__ = 0;
  switch (__yaccpar_lint_hack__)
  {
    case 1: goto yyerrlab;
    case 2: goto yynewstate;
  }
  yypvt = 0;
#endif

  /*
  ** Initialize externals - yyparse may be called more than once
  */
  yypv = &yyv[-1];
  yyps = &yys[-1];
  yystate = 0;
  yytmp = 0;
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;

#if YYMAXDEPTH <= 0
  if (yymaxdepth <= 0)
  {
    if ((yymaxdepth = YYEXPAND(0)) <= 0)
    {
      yyerror("yacc initialization error");
      YYABORT;
    }
  }
#endif

  {
    register YYSTYPE *yy_pv;        /* top of value stack */
    register int *yy_ps;                /* top of state stack */
    register int yy_state;                /* current state */
    register int  yy_n;                /* internal state number info */
  goto yystack;        /* moved from 6 lines above to here to please C++ */

    /*
    ** get globals into registers.
    ** branch to here only if YYBACKUP was called.
    */
  yynewstate:
    yy_pv = yypv;
    yy_ps = yyps;
    yy_state = yystate;
    goto yy_newstate;

    /*
    ** get globals into registers.
    ** either we just started, or we just finished a reduction
    */
  yystack:
    yy_pv = yypv;
    yy_ps = yyps;
    yy_state = yystate;

    /*
    ** top of for (;;) loop while no reductions done
    */
  yy_stack:
    /*
    ** put a state and value onto the stacks
    */
#if YYDEBUG
    /*
    ** if debugging, look up token value in list of value vs.
    ** name pairs.  0 and negative (-1) are special values.
    ** Note: linear search is used since time is not a real
    ** consideration while debugging.
    */
    if ( yydebug )
    {
      register int yy_i;

      printf( "State %d, token ", yy_state );
      if ( yychar == 0 )
        printf( "end-of-file\n" );
      else if ( yychar < 0 )
        printf( "-none-\n" );
      else
      {
        for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
          yy_i++ )
        {
          if ( yytoks[yy_i].t_val == yychar )
            break;
        }
        printf( "%s\n", yytoks[yy_i].t_name );
      }
    }
#endif /* YYDEBUG */
    if ( ++yy_ps >= &yys[ yymaxdepth ] )        /* room on stack? */
    {
      /*
      ** reallocate and recover.  Note that pointers
      ** have to be reset, or bad things will happen
      */
      int yyps_index = (yy_ps - yys);
      int yypv_index = (yy_pv - yyv);
      int yypvt_index = (yypvt - yyv);
      int yynewmax;
#ifdef YYEXPAND
      yynewmax = YYEXPAND(yymaxdepth);
#else
      yynewmax = 2 * yymaxdepth;        /* double table size */
      if (yymaxdepth == YYMAXDEPTH)        /* first time growth */
      {
        char *newyys = (char *)YYNEW(int);
        char *newyyv = (char *)YYNEW(YYSTYPE);
        if (newyys != 0 && newyyv != 0)
        {
          yys = YYCOPY(newyys, yys, int);
          yyv = YYCOPY(newyyv, yyv, YYSTYPE);
        }
        else
          yynewmax = 0;        /* failed */
      }
      else                                /* not first time */
      {
        yys = YYENLARGE(yys, int);
        yyv = YYENLARGE(yyv, YYSTYPE);
        if (yys == 0 || yyv == 0)
          yynewmax = 0;        /* failed */
      }
#endif
      if (yynewmax <= yymaxdepth)        /* tables not expanded */
      {
        yyerror( "yacc stack overflow" );
        YYABORT;
      }
      yymaxdepth = yynewmax;

      yy_ps = yys + yyps_index;
      yy_pv = yyv + yypv_index;
      yypvt = yyv + yypvt_index;
    }
    *yy_ps = yy_state;
    *++yy_pv = yyval;

    /*
    ** we have a new state - find out what to do
    */
  yy_newstate:
    if ( ( yy_n = yypact[ yy_state ] ) <= YYFLAG )
      goto yydefault;                /* simple state */
#if YYDEBUG
    /*
    ** if debugging, need to mark whether new token grabbed
    */
    yytmp = yychar < 0;
#endif
    if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
      yychar = 0;                /* reached EOF */
#if YYDEBUG
    if ( yydebug && yytmp )
    {
      register int yy_i;

      printf( "Received token " );
      if ( yychar == 0 )
        printf( "end-of-file\n" );
      else if ( yychar < 0 )
        printf( "-none-\n" );
      else
      {
        for ( yy_i = 0; yytoks[yy_i].t_val >= 0;
          yy_i++ )
        {
          if ( yytoks[yy_i].t_val == yychar )
            break;
        }
        printf( "%s\n", yytoks[yy_i].t_name );
      }
    }
#endif /* YYDEBUG */
    if ( ( ( yy_n += yychar ) < 0 ) || ( yy_n >= YYLAST ) )
      goto yydefault;
    if ( yychk[ yy_n = yyact[ yy_n ] ] == yychar )        /*valid shift*/
    {
      yychar = -1;
      yyval = yylval;
      yy_state = yy_n;
      if ( yyerrflag > 0 )
        yyerrflag--;
      goto yy_stack;
    }

  yydefault:
    if ( ( yy_n = yydef[ yy_state ] ) == -2 )
    {
#if YYDEBUG
      yytmp = yychar < 0;
#endif
      if ( ( yychar < 0 ) && ( ( yychar = YYLEX() ) < 0 ) )
        yychar = 0;                /* reached EOF */
#if YYDEBUG
      if ( yydebug && yytmp )
      {
        register int yy_i;

        printf( "Received token " );
        if ( yychar == 0 )
          printf( "end-of-file\n" );
        else if ( yychar < 0 )
          printf( "-none-\n" );
        else
        {
          for ( yy_i = 0;
            yytoks[yy_i].t_val >= 0;
            yy_i++ )
          {
            if ( yytoks[yy_i].t_val
              == yychar )
            {
              break;
            }
          }
          printf( "%s\n", yytoks[yy_i].t_name );
        }
      }
#endif /* YYDEBUG */
      /*
      ** look through exception table
      */
      {
        register int *yyxi = yyexca;

        while ( ( *yyxi != -1 ) ||
          ( yyxi[1] != yy_state ) )
        {
          yyxi += 2;
        }
        while ( ( *(yyxi += 2) >= 0 ) &&
          ( *yyxi != yychar ) )
          ;
        if ( ( yy_n = yyxi[1] ) < 0 )
          YYACCEPT;
      }
    }

    /*
    ** check for syntax error
    */
    if ( yy_n == 0 )        /* have an error */
    {
      /* no worry about speed here! */
      switch ( yyerrflag )
      {
      case 0:                /* new error */
        yyerror( "syntax error" );
        goto skip_init;
      yyerrlab:
        /*
        ** get globals into registers.
        ** we have a user generated syntax type error
        */
        yy_pv = yypv;
        yy_ps = yyps;
        yy_state = yystate;
      skip_init:
        yynerrs++;
        /* FALLTHRU */
      case 1:
      case 2:                /* incompletely recovered error */
          /* try again... */
        yyerrflag = 3;
        /*
        ** find state where "error" is a legal
        ** shift action
        */
        while ( yy_ps >= yys )
        {
          yy_n = yypact[ *yy_ps ] + YYERRCODE;
          if ( yy_n >= 0 && yy_n < YYLAST &&
            yychk[yyact[yy_n]] == YYERRCODE)                                        {
            /*
            ** simulate shift of "error"
            */
            yy_state = yyact[ yy_n ];
            goto yy_stack;
          }
          /*
          ** current state has no shift on
          ** "error", pop stack
          */
#if YYDEBUG
#        define _POP_ "Error recovery pops state %d, uncovers state %d\n"
          if ( yydebug )
            printf( _POP_, *yy_ps,
              yy_ps[-1] );
#        undef _POP_
#endif
          yy_ps--;
          yy_pv--;
        }
        /*
        ** there is no state on stack with "error" as
        ** a valid shift.  give up.
        */
        YYABORT;
      case 3:                /* no shift yet; eat a token */
#if YYDEBUG
        /*
        ** if debugging, look up token in list of
        ** pairs.  0 and negative shouldn't occur,
        ** but since timing doesn't matter when
        ** debugging, it doesn't hurt to leave the
        ** tests here.
        */
        if ( yydebug )
        {
          register int yy_i;

          printf( "Error recovery discards " );
          if ( yychar == 0 )
            printf( "token end-of-file\n" );
          else if ( yychar < 0 )
            printf( "token -none-\n" );
          else
          {
            for ( yy_i = 0;
              yytoks[yy_i].t_val >= 0;
              yy_i++ )
            {
              if ( yytoks[yy_i].t_val
                == yychar )
              {
                break;
              }
            }
            printf( "token %s\n",
              yytoks[yy_i].t_name );
          }
        }
#endif /* YYDEBUG */
        if ( yychar == 0 )        /* reached EOF. quit */
          YYABORT;
        yychar = -1;
        goto yy_newstate;
      }
    }/* end if ( yy_n == 0 ) */
    /*
    ** reduction by production yy_n
    ** put stack tops, etc. so things right after switch
    */
#if YYDEBUG
    /*
    ** if debugging, print the string that is the user's
    ** specification of the reduction which is just about
    ** to be done.
    */
    if ( yydebug )
      printf( "Reduce by (%d) \"%s\"\n",
        yy_n, yyreds[ yy_n ] );
#endif
    yytmp = yy_n;                        /* value to switch over */
    yypvt = yy_pv;                        /* $vars top of value stack */
    /*
    ** Look in goto table for next state
    ** Sorry about using yy_state here as temporary
    ** register variable, but why not, if it works...
    ** If yyr2[ yy_n ] doesn't have the low order bit
    ** set, then there is no action to be done for
    ** this reduction.  So, no saving & unsaving of
    ** registers done.  The only difference between the
    ** code just after the if and the body of the if is
    ** the goto yy_stack in the body.  This way the test
    ** can be made before the choice of what to do is needed.
    */
    {
      /* length of production doubled with extra bit */
      register int yy_len = yyr2[ yy_n ];

      if ( !( yy_len & 01 ) )
      {
        yy_len >>= 1;
        yyval = ( yy_pv -= yy_len )[1];        /* $$ = $1 */
        yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
          *( yy_ps -= yy_len ) + 1;
        if ( yy_state >= YYLAST ||
          yychk[ yy_state =
          yyact[ yy_state ] ] != -yy_n )
        {
          yy_state = yyact[ yypgo[ yy_n ] ];
        }
        goto yy_stack;
      }
      yy_len >>= 1;
      yyval = ( yy_pv -= yy_len )[1];        /* $$ = $1 */
      yy_state = yypgo[ yy_n = yyr1[ yy_n ] ] +
        *( yy_ps -= yy_len ) + 1;
      if ( yy_state >= YYLAST ||
        yychk[ yy_state = yyact[ yy_state ] ] != -yy_n )
      {
        yy_state = yyact[ yypgo[ yy_n ] ];
      }
    }
          /* save until reenter driver code */
    yystate = yy_state;
    yyps = yy_ps;
    yypv = yy_pv;
  }
  /*
  ** code supplied by user is placed in this switch
  */
  switch( yytmp ) {

case 1:
# line 34 "eval.y"
 {return yypvt[-1];} break;

case 2:
# line 36 "eval.y"
 { 
    int i, res = 1;
    if (yypvt[-0] < 0) res = 0;
    else {
      for (i=0; i < yypvt[-0]; i++) 
        res *= yypvt[-2];
    }
    yyval = res; } break;

case 3:
# line 44 "eval.y"
 { yyval = yypvt[-2] * yypvt[-0]; } break;

case 4:
# line 45 "eval.y"
 { 
    if (yypvt[-0] == 0) {
      fppmess(WARN_FPP_EXPR);
      yyval = 0;
    }
    else
      yyval = yypvt[-2] / yypvt[-0]; } break;

case 5:
# line 52 "eval.y"
 { yyval = yypvt[-2] % yypvt[-0]; } break;

case 6:
# line 53 "eval.y"
 { yyval = yypvt[-2] + yypvt[-0]; } break;

case 7:
# line 54 "eval.y"
 { yyval = yypvt[-2] - yypvt[-0]; } break;

case 8:
# line 55 "eval.y"
 { yyval = yypvt[-2] << yypvt[-0]; } break;

case 9:
# line 56 "eval.y"
 { yyval = yypvt[-2] >> yypvt[-0]; } break;

case 10:
# line 57 "eval.y"
 { yyval = yypvt[-2] < yypvt[-0]; } break;

case 11:
# line 58 "eval.y"
 { yyval = yypvt[-2] <= yypvt[-0]; } break;

case 12:
# line 59 "eval.y"
 { yyval = yypvt[-2] > yypvt[-0]; } break;

case 13:
# line 60 "eval.y"
 { yyval = yypvt[-2] >= yypvt[-0]; } break;

case 14:
# line 61 "eval.y"
 { yyval = yypvt[-2] == yypvt[-0]; } break;

case 15:
# line 62 "eval.y"
 { yyval = yypvt[-2] != yypvt[-0]; } break;

case 16:
# line 63 "eval.y"
 { yyval = yypvt[-2] & yypvt[-0]; } break;

case 17:
# line 64 "eval.y"
 { yyval = yypvt[-2] ^ yypvt[-0]; } break;

case 18:
# line 65 "eval.y"
 { yyval = yypvt[-2] | yypvt[-0]; } break;

case 19:
# line 66 "eval.y"
 { yyval = yypvt[-2] && yypvt[-0]; } break;

case 20:
# line 67 "eval.y"
 { yyval = yypvt[-2] || yypvt[-0]; } break;

case 21:
# line 68 "eval.y"
 { yyval = !yypvt[-2] && yypvt[-0] || yypvt[-2] && !yypvt[-0]; } break;

case 22:
# line 69 "eval.y"
 { yyval = !yypvt[-2] && !yypvt[-0] || yypvt[-2] && yypvt[-0]; } break;

case 23:
# line 70 "eval.y"
 { yyval = yypvt[-4] ? yypvt[-2] : yypvt[-0]; } break;

case 24:
# line 71 "eval.y"
 { yyval = yypvt[-0]; } break;

case 25:
# line 72 "eval.y"
 { yyval = yypvt[-0]; } break;

case 26:
# line 74 "eval.y"
 { yyval = -yypvt[-0]; } break;

case 27:
# line 75 "eval.y"
 { yyval = !yypvt[-0]; } break;

case 28:
# line 76 "eval.y"
 { yyval = ~yypvt[-0]; } break;

case 29:
# line 77 "eval.y"
 { yyval = yypvt[-1]; } break;

case 30:
# line 78 "eval.y"
 { yyval = yypvt[-0]; } break;

# line 532 "/usr/ccs/bin/yaccpar"
  }
  goto yystack;                /* reset registers in driver code */
}

