 HOW TO RUN BOSOR4 ON THE VAX AND OTHER USEFUL INFORMATION
 
*****************************************************************

                      TABLE OF CONTENTS

I    SUMMARY...
     I(a) Scope of BOSOR4
     I(b) Operation of BOSOR4
     I(c) Help file for BOSOR4

II(a) SAMPLE RUNSTREAM...

II(b) FILES GENERATED BY EXECUTION OF BOSOR4 PROCESSORS...

III  IN CASE OF ERROR TERMINATION...
   III(a) Recovery from errors during segment-by-segment interactive
          sessions
   III(b) Tracking down causes of error termination of batch runs

IV   PLOTTING...

V    NEW BOSOR4 CAPABILITIES...

VI(a) MODIFYING CASES AND RESTARTING...

VI(b) EDITING AND CHECKING SEGMENT AND GLOBAL DATA

VI(c) GENERATING BLOCKS OF INPUT DATA WITH THE UTILITY "MODIFY"
      AND AUTOMATIC EDITING AND CHECKING OF NAME.SEGn FILES

VI(d) SAMPLE RUNSTREAM INCLUDING MODIFICATION OF MODEL

VII  BOSOR4 LIBRARIES AND ROUTINES...

VIII VARIOUS BOSOR4 PROCESSORS AND PROCEDURES...

IX   LINKING THE BOSOR4 PROCESSORS...

X    LIST OF SAMPLE CASES...

XI   CONVERTING BOSOR4 FOR OPERATION ON MACHINES OTHER THAN VAX

XII  EXAMPLE OF PART OF AN INTERACTIVE SESSION...

XIII RECOMPILING, REGENERATING LIBRARIES, RE-LINKING
************************************************************

I    SUMMARY...

     I(a) Scope of BOSOR4

In BOSOR4 a complex, branched, stiffened shell of revolution is
treated as an assemblage of shell segments or branches, each with its
own geometry (flat, cylindrical, spherical, etc), loading, wall
construction, and material properties.  In this version of BOSOR4 you
provide the input data in a "conversationally" interactive mode on a
segment-by-segment basis.

Before beginning an interactive session you should already have
decided how to divide the structure that you are analyzing into
segments and branches, and you should have available to you all
dimensions and material properties and loading.  You should also
have decided what kind of analysis to perform. The type of analysis
is controlled by a parameter called INDIC, as follows:

INDIC =
       0= nonlinear axisymmetric stress (and collapse) analysis,
      -2= stability determinant calculated for increasing load,
      -1= bifurcation buckling with nonlinear prebuckling analysis,
       1= bifurcation buckling with "linear"  prebuckling analysis;
          (Actually the prebuckling analysis is the same as for
           INDIC = -1.  However, the applied load is never changed
           during a case.  Linear behavior is exhibited as long as
           the user applies a load that is very small compared to
           the design load.)

       2= modal vibration with axisymmetric nonlinear prestress.
       3= linear nonsymmetric stress analysis;
       4= bifurcation buckling with linear nonsymmetric prebuckling.

BOSOR4 will also do response to harmonic loads and response of a
structure at resonance to harmonic or random excitation of a base to
which the structure is attached. Buckling under harmonic or random
base excitation can also be calculated.

BOSOR4 will also calculate body forces corresponding to rigid body
dynamics of free-free complex shell structures subjected to non-self-
equilibrating loads. These body forces are automatically included in
Load Sets A and B if the user indicates that rigid body motions are
possible under the boundary conditions supplied.

     I(b) Operation of BOSOR4

First, you must run bin/initialize

     source bin/initialize

Then, you must give the command

       bosor4log

in order to activate certain commands that are used during execution
of BOSOR4. modules.

Once you have decided on the items discussed in Section I(a),
you start providing input data by giving the command

 INPUT

which initiates a procedure that, among other things, asks you to
name the case.  In the following discussion we use 'NAME' to stand
for this case name. (You don't use the apostrophes, however.)
(NOTE:  YOU CAN OMIT THE @ IN THE COMMAND @INPUT AND IN ALL OF THE
COMMANDS DESCRIBED HERE AND IN THE BOSOR4 INTERACTIVE HELP UTILITY.)

 INPUT also initiates the interactive session for the first segment.
In this session you are first asked to provide a few items that
pertain to the entire structure, such as type of analysis (INDIC).
Then you are asked to provide data for the first of the segments into
which you have chosen to divide the complete structure. Upon
completion of the interactive session for the first segment, you 
can either terminate the interactive session or go on to the next
segment.  If you choose to terminate, you can start again later by
again giving the command

 INPUT

in order to initiate the interactive session for the second segment.
You continue in this manner until you have provided input data for all
the segments into which you have divided the entire structure.

After data for all segments have been provided by you, you must provide
additional data pertaining to the entire structure, such as data that
specify how the various structural segments are connected to eachother
and to ground.

At this point you have provided data corresponding to NSEG executions
of a processor called SEGMENT and 1 execution of a processor called
BOUNDARY, where NSEG is the number of structural segments. Corresponding
to these commands and the interactive sessions following them, you
have generated NSEG + 1 files called 'NAME'.SEG1, 'NAME'.SEG2, . . .
'NAME'.SEGNSEG, 'NAME'.SEG(NSEG+1).  ('NAME' is a name that you 
provide when you execute  INPUT.) You may edit any of these files you
wish.  After you are satisfied with these 'NAME'.SEG files,
you issue the command " ASSEMBLE", which concatenates them into a
BOSOR4 input "deck" called 'NAME'.ALL.  You then give the command
" BOSORALL", which initiates a batch run of three BOSOR4 processors,
a preprocessor, a main processor, and a post processor. No more input
data are required from you unless you wish to do a restart (see below).
After you have determined that the three BOSOR4 processors all ran
successfully, you issue the command  BOSORPLOT to generate files that
can be converted to hard copies of plots with use of a command, such as
PLOT, that is used at your facility for this purpose.

       I(c) HELP file for BOSOR4

By typing 

           HELP4    'TOPIC'     'SUBTOPIC'

where 'TOPIC' stands for either COMMAND or DEBUG or FILES or OVERVIEW
or PROGRAMS; and 'SUBTOPIC' stands for any subtopic (such as INPUT or
ASSEMBLE, etc., which occur as subtopics under COMMAND), you can obtain
information on the scope and operation of BOSOR4. The HELP file is
contained in BOSOR4.HLP.  The software that causes the HELP file to be
searched was written by Dr. Carlos Felippa.

**********************************************************************

II(a) SAMPLE RUNSTREAM...

The following is a sample runstream for setting up a BOSOR4 "deck" and
executing it.

 INPUT

(This command first assigns prompting files and asks you to provide a
name for the case.  You are then asked to provide preliminary global
input followed by input for Segment no. 1.

Input is in an interactive mode.  If you do not understand a datum,
type HELP or H for more information about it.  The prompting
information contains references to page numbers and figures and
tables that are contained in:

"BOSOR4--Program for stress, buckling, and vibration of complex shells
of revolution", STRUCTURAL MECHANICS SOFTWARE SERIES, Vol. I, edited by
N. Perrone and W. Pilkey, University Press of Virginia,Charlottesville,
pp. 11-143 (1977).
This is the user's manual for earlier versions of BOSOR4.

An image of the interactive session is stored on a file called
'NAME'.SEG1.  Following the interactive session or following a
"CONTROL Y", this file may be edited and/or used for recovery from
error as described in the paragraph before  ASSEMBLE and in Section
III(a).)

 INPUT

(Provide input for segment no. 2, if any.  The image of this
interactive session is stored in a file called 'NAME'.SEG2)

 INPUT

(Provide input for segment no. 3, if any.  The image of this
interactive session is stored in a file called 'NAME'.SEG3)

 INPUT

(Provide input for segment no. 4, if any.  Keep running INPUT
until input for all shell segments has been provided by you.  Images
of each interactive session are stored on files called 'NAME'.SEGn  .
Note that you can do as many segments as you want with a single  INPUT
command.)

 INPUT

(Provide input for certain global control variables and for
boundary and junction conditions. This will be the last time that
you execute INPUT.  The image of this interactive session is 
stored in a file called 'NAME'.SEGN, where N = NSEG + 1 and NSEG
is the total number of structural segments in your model.)

In case of error during any input session...If you type something wrong
and you want to quit the interactive session, you can at any time do
a "CONTROL Y", edit the file 'NAME'.SEGn  , and  INPUT again 
for the appropriate segment. Upon your telling the system that this
new interactive session is for correcting an existing file, the system
will use the good part of the 'NAME'.SEGn file as input, sparing
you the necessity of answering many questions over again, and revert
to the keyboard when further interactive input data are needed from
you.

 ASSEMBLE

This procedure assembles a BOSOR4 input file called 'NAME'.ALL
from the files 'NAME'.SEG1, 'NAME'.SEG2, 'NAME'.SEG3, ..'NAME'.SEGN
that were generated by the NSEG + 1 executions of INPUT indicated 
above. Please be sure that there are no stray 'NAME'.SEG files in the
subdirectory that you do not want assembled into 'NAME'.ALL before
you give the command  ASSEMBLE.

Note that you can edit any of the 'NAME'.SEGN decks before giving
the command  ASSEMBLE.  If a shell structure has many similar segments,
it may be more efficient for you to generate 'NAME'.SEGN files by
copying them from previously obtained files and editing rather than by
generating them interactively.  If you do this, it is a good idea to
check the file by giving the command INPUT, identifying the segment
number, and indicating that you are checking an existing file. If
INPUT finishes successfully, a properly annotated file for the
segment will be located in 'NAME'.DAT.  Simply rename this file
'NAME'.SEGn, in which n is the appropriate segment number.

After you have given the command " ASSEMBLE" you will have a new file
called 'NAME'.ALL.  The procedure ASSEMBLE asks you if you wish to
retain the 'NAME'.SEGn files.  It is a good idea to retain these files
for possible future modifications and reassembly.

 BOSORALL

This command causes three BOSOR4 processors to be executed in
a batch mode.  The input file is 'NAME'.ALL and the final results are
stored in 'NAME'.OUT;3.  If the highest version number k of 'NAME'.OUT;k
is less than 3, the run bombed.  See Sections II(b) and III(b) for
directions on what to do.  If the run succeeds thru the preprocessor,
a file 'NAME'.DOC is produced.  This is a fully updated and completely
annotated copy of the 'NAME'.ALL file.  It is an important file because
it represents documentation for the case and because it is the starting
point for automated modification of the model via the utilities GETSEGS
and MODIFY (See HELP4 COMMAND GETSEGS and HELP4 COMMAND MODIFY).

 BOSORPLOT

This command generates plot files *.PLV;*.  After execution, you
can obtain hard copies of
plots by issuing an appropriate command used at your facility for this
purpose.  At Lockheed's building 255 VAX the command is PLOT.


*********************************************************************

II(b) FILES GENERATED BY EXECUTION OF BOSOR4 PROCESSORS...

    FILES GENERATED BY EXECUTION OF BOSOR4 PROCEDURES
                    AND PROCESSORS
===================================================================
 FILE NAME     TYPE           CONTENTS OF THE FILE
-------------------------------------------------------------------

FILES GENERATED BY THE COMMAND:   INPUT.....

 NAME.SEG1    SYMBOLIC     Input data for shell segment 1
                           plus some global data.

 NAME.SEG2    SYMBOLIC     Input data for shell segment 2.
     .           .                      .
     .           .                      .
 NAME.SEGn    SYMBOLIC     Input data for shell segment n.

 NAME.SEGn+1  SYMBOLIC     Global input data plus junction
                           and boundary conditions for the
                           case 'NAME'.  (It is assumed in
                           this example that the structure
                           consists of n segments.)
-----------------------------------------------------------------

FILE GENERATED BY EXECUTION OF THE COMMAND    ASSEMBLE.....

 NAME.ALL;    SYMBOLIC     Input "deck" for the BOSOR4 batch run.
                           This file is a concatenation of the
                           NAME.SEGi files, (i=1,2,...n+1).
-------------------------------------------------------------------

FILES GENERATED BY EXECUTION OF THE COMMAND    BOSORALL.....

 NAME.DOC;    SYMBOLIC     Re-annotated "copy" of NAME.ALL  . If the
                           case ran successfully, this file is good
                           for documenting the input. You should
                           list it if an error occurs during the
                           preprocessing phase (BOSORREAD) of the
                           batch run. The last entry in this file is
                           a clue as to where things went wrong.
                           NAME.DOC is also important because it is the
                           starting point for automated modification
                           via the utilities GETSEGS and MODIFY.

 NAME.BLK;    BINARY       Labelled common blocks are stored here.
                           You must retain this file for any RESTARTS.

 NAME.RAN;    BINARY       Direct access mass storage file, generated
                           via the I/O subroutine GASP.  You must retain
                           this file for any RESTARTS.

 NAME.OUT;    SYMBOLIC     List output. The version number will be 3
                           if the case ran successfully; it will be
                           1 or 2 if not (1 if the case bombed in the
                           mainprocessor, 2 if the case bombed in the
                           postprocessor).

 NAME.ERR;    SYMBOLIC     List output. This file will not be present
                           if the case ran successfully. If the case
                           bombed, it will contain whatever output
                           was generated in the processor (pre-, main-
                           or post-) that happened to be executing at
                           the time the case bombed out.  List this
                           file for tracking down the difficulty.

 NAME.LAB;    SYMBOLIC     Plot labels. This file must exist before
                           the command  BOSORPLOT is given.

 NAME.PLT;    BINARY       Vectors to be plotted.  This file must
                           exist before the command  BOSORPLOT is
                           given.

 New in February, 1990 ...(NAME.PLT2)
 NAME.PLT2;   SYMBOLIC     Text formatted file suitable for use with
                           any plotting software or hardware. This
                           file contains explanations and data. The
                           explanations tell what the data are. This
                           file is produced via BOSORALL or RESTART.
                           It is produced by the BOSOR4 postprocessor
                           BOSORPOST. The data are listed in columns
                           separated by tabs. The format is especially
                           suited for use with CRICKETGRAPH.  Data
                           listed depends on the case. Typically, data
                           include undeformed and deformed geometries,
                           prebuckling displacements, stress resultants,
                           stresses, strains, changes in curvature, and
                           bifurcation buckling or vibration modal
                           displacements (eigenvectors). The convention
                           used for naming subsections of NAME.PLT2
                           is given in the chapter on plotting.
----------------------------------------------------------------------

FILES GENERATED BY EXECUTION OF THE COMMAND  BOSORPLOT.....

 PARM.PLV;    BINARY       Plot file.
 VECTOR.PLV;  BINARY       Plot file.
----------------------------------------------------------------------

FILES GENERATED BY EXECUTION OF THE COMMAND:   RESETUP....

 NAME.000;    SYMBOLIC     Part of input for batch restart run
                           (initiated via the command  RESTART).

 NAME.RES;    SYMBOLIC     The remainder of the input for batch
                           restart run.
------------------------------------------------------------------

FILES GENERATED BY EXECUTION OF THE COMMAND    RESTART.....

 NAME.OUT;    SYMBOLIC     List output. If the command  BOSORALL
                           immediately preceeded the command
                           RESETUP, the version number will be 4,
                           provided the restart ran successfully to
                           completion.  Each successive restart adds
                           a new version.  Older versions are retained.

 NAME.LAB;    SYMBOLIC     Plot labels.
 NAME.PLT;    BINARY       Plot vectors.

 New in February, 1990 ...(NAME.PLT2)
 NAME.PLT2;   SYMBOLIC     Text formatted file suitable for use with
                           any plotting software or hardware. This
                           file contains explanations and data. The
                           explanations tell what the data are. This
                           file is produced via BOSORALL or RESTART.
                           It is produced by the BOSOR4 postprocessor
                           BOSORPOST. The data are listed in columns
                           separated by tabs. The format is especially
                           suited for use with CRICKETGRAPH.  Data
                           listed depends on the case. Typically, data
                           include undeformed and deformed geometries,
                           prebuckling displacements, stress resultants,
                           stresses, strains, changes in curvature, and
                           bifurcation buckling or vibration modal
                           displacements (eigenvectors).

 NAME.ERR;    SYMBOLIC     List output up to point of bomb. This file
                           will not be present if the case runs
                           successfully to completion.
-------------------------------------------------------------------

FILES GENERATED BY EXECUTION OF THE COMMAND  MODIFY....

 MODIFY is a procedure for automatic editing of NAME.SEG files. Within
 each structural segment there are several categories of data, such as
 nodal point distribution (MESH), meridional geometry (GEOM), discrete
 rings (RINGS), wall construction (WALL), etc. Corresponding to each
 of these categories, which is assigned an index, MODIFY generates a
 file with a name such as MESH.QUE, GEOM.QUE, RINGS.QUE, WALL.QUE, etc.
 The table below gives a complete list:

      Generate proper input data for the following categories by
      responding with the appropriate index:
      ===========================================================
      Index     Type of BOSOR input data            File generated
      -----------------------------------------------------------
        1      nodal point distribution in segment       MESH.QUE
        2      shape of meridian of segment              GEOM.QUE
        3      location of reference surface in wall  REFSURF.QUE
        4      initial imperfection shape in segment   IMPERF.QUE
        5      discrete rings in segment                RINGS.QUE
        6      line loads in segment                LINELOADS.QUE
        7      distributed (surface) loads in seg.  DISTLOADS.QUE
        8      wall construction of segment              WALL.QUE
        9      smeared stiffeners in segment          SMEARED.QUE
       10      direct input of prestress            PRESTRESS.QUE
       11      constraint conditions of segment     CONSTRAIN.QUE
       12      rigid body motion prevention         RIGIDBODY.QUE
       13      global parameters at beginning         GLOBAL1.QUE
       14      global parameters after segment data   GLOBAL2.QUE
       15      output indicators                      GLOBAL3.QUE
      =============================================================

=====================================================================
*******************************************************************

III  IN CASE OF ERROR TERMINATION....

III(a) RECOVERY FROM ERRORS DURING SEGMENT-BY-SEGMENT INTERACTIVE
       SESSIONS....

It often happens that as you are answering the many questions you
inadvertently hit a wrong key which causes a bomb or you hit a wrong
key followed by return. The procedure for recovering from these types
of errors is as follows:

  1. Do a CONTROL Y to get out of the interactive session and back in
     the VAX command mode.

  2. Edit the 'NAME'.SEGn file with which you were currently working
     in order to remove any wrong entries at its end.

  3. Give the command  INPUT

  4. An early question asks "Are you correcting an existing file?"
     Answer this question YES or Y  and follow the directions given.

In this procedure, the portion of the 'NAME'.SEGn file up to where you
were when you bombed or erred is used as input rather than your
terminal keyboard. Therefore, you do not have to answer interactively
all the questions preceeding your error.  When the system reaches the
end of the 'NAME'.SEGn file, it gives control back to you. You then
complete the interactive session as if nothing bad had happened.

III(b) TRACKING DOWN CAUSES OF ERROR TERMINATION OF BATCH RUNS

In this section it is assumed that the input file 'NAME'.ALL has been
successfully assembled. For directions concerning errors committed
while generating input for a given segment, see Section III(a).

(1) The BOSORALL.LOG file is stored in the main directory.  This file
contains the system's error messages.

(2) Diagnostic messages are written to files called

           'NAME'.ERR      and          'NAME'.OUT

'NAME'.ERR will appear in the subdirectory from which the batch
run was made only if an error termination occurred.

(3) If the error occurred in the preprocessor (BOSORREAD), it will be
useful to list the file 'NAME'.DOC, which contains a sort of copy of
the input deck up to the point at which the error was encountered.
Knowing what the last line of this file is provides a very important
clue as to the source of the error.

**********************************************************************

IV   PLOTTING...

Data for plotting are stored in the file 'NAME'.PLT.  Actual plotting
can be accomplished through use of the command   BOSORPLOT.  This
command corresponds to a batch run in which plotting is done on
the VERSATEC.  After completion of the batch run, the subdirectory
from which the run was executed will contain files *.PLV;* which can
be plotted with use of whatever local plot command is customary at
your facility.  (At Lockheed Palo Alto Research Lab, Dept. 52-33,
Bldg. 255, the command is $ PLOTA or $ PLOTB).  After completion of
the actual plotting, you should delete the *.PLV;* and 'NAME'.PLT
files, as these may occupy lots of space.


**** IMPORTANT NOTICE!!! ******************
**** BEGIN FEBRUARY, 1990 MODIFICATION ****
A new file, 'NAME'.PLT2, is now generated that contains data for plotting.
This file is in text format (formatted file), and full explanations are
given of the data listed there. If you want to generate plots using plot
software other than DISSPLA, then it is best to start with the 'NAME'.PLT2
file as the source of the data to be plotted. 

The file NAME.PLT2 has a number of subsections. The nature of the data
to be plotted depends on the analysis type INDIC.  NAME.PLT2 is now
structured in such a way as to be particularly useful with CRICKETGRAPH.
The data listed in each subsection of NAME.PLT2 are arranged in columns
separated by tabs (See the FORTRAN source library PLOT.NEW). The two
lines of text immediately preceeding the data are:
   1. the name of the subset (see the table below)
   2. column headings.

The following table describes what the various subsets of the NAME.PLT2
file contain.

        NAMES AND CONTENTS OF THE SUBSETS OF THE NAME.PLT2 FILE
 ======================================================================
 ANALYSIS     NAME OF SUBSET           WHAT THE DATA REPRESENT
   TYPE       OF THE *.PLT2
  INDIC           FILE
 ======================================================================
 -2,-1,0     (R,Z)_LOADSTEP i    Prebuckling axisymmetric undeformed and
                                 deformed geometry for load step no. i

 -2,-1,0    AXISYM_LOADSTEP i    Prebuckling axisymmetric displacements
                                 W0, U0; meridional rotation BETA, and
                                 stress and moment resultants N10, N20,
                                 M10 for load step no. i

 -2,-1,0    STRESS_LOADSTEP i    Prebuckling axisymmetric stress
                                 components and von Mises stress for
                                 load step no. i

 -2,-1,0    STRAIN_LOADSTEP i    Prebuckling axisymmetric reference
                                 surface strains, changes in curvature,
                                 and twist for load step no. i

 -2,-1,  (R,Z)_EIGENMODE i;N= n   Bifurcation buckling or modal vibration
  1,2,4                          undeformed and deformed meridians for
                                 Eigenvalue no. i, N=n circumferential
                                 waves.

 -2,-1,    EIGENMODE i;N= n      Bifurcation buckling or modal vibration
  1,2,4                          eigenvector (displacement components
                                 (u,v,w) for Eigenvalue no. i, N=n
                                 circumferential waves.

  3, 4    (R,Z)_MERIDIAN j       Undeformed and deformed meridian no. j
                                 from linear nonsymmetric stress
                                 analysis.

  3, 4     DISP_MERIDIAN j       Displacement components (u,v,w) along
                                 meridian no. j from linear nonsymmetric
                                 stress analysis.

  3, 4    RESULTS_MERIDIAN k     stresss resultants or stresses or
                                 reference surface strains, changes
                                 in curvature, and twist along
                                 circumference no. k from linear
                                 nonsymmetric stress analysis.

  3, 4     DISP_CIRCUMF k        Displacement components (u,v,w) along
                                 circumference no. k from linear
                                 nonsymmetric stress analysis.

  3, 4    RESULTS_CIRCUMF k      stresss resultants or stresses or
                                 reference surface strains, changes
                                 in curvature, and twist along
                                 circumference no. k from linear
                                 nonsymmetric stress analysis.
 =========================================================================
                                 
Do not bother reading the rest of this chapter if you plan to use the
file NAME.PLT2 as a source for your plots.
****  END  FEBRUARY, 1990 MODIFICATION ******
*********************************************



 Read the following portion of this chapter on plotting only if you are
 not interested in the NAME.PLT2 text file described briefly above.

     Notes on Using BPLOTC and BPLOTD to Generate BOSOR Plots on VAX Systems
     -----------------------------------------------------------------------

           Both BOSOR4 and BOSOR5 produce a file 'NAME'.PLT which contains
      plot commands and data.  The BOSOR distribution tape contains five
      files for producing plots from the 'NAME'.PLT files:

            i) BPLOTC.NEW - FORTRAN code for Calcomp-compatible version
           ii) BPLOTC.OLB - relocatables for Calcomp-compatible version
          iii) BPLOTD.NEW - FORTRAN code for DI-3000 version
           iv) BPLOTD.OLB - relocatables for DI-3000 version
            v) BOSORPLOT.EXE - executable image of BPLOTD
           vi) BPLOTD.UNIX - FORTRAN code for operation with UNIX
          vii) PLOT.UNIX   - FORTRAN code for operation with UNIX

      Whether you use BPLOTC or BPLOTD to generate plots is determined
      by the graphics subroutine package(s) available on your computer.
      Additional information on linking and running BPLOTC and BPLOTD
      follows.


     BPLOTC
     ------

           This version of the BOSOR plot program is designed to
      use Calcomp-compatible pen plotter graphics subroutines.
      In addition to the Calcomp Host Computer Basic Software
      subroutine package, other manufacturers of pen and electro-
      static plotters provide Calcomp-compatible subroutine
      packages to drive their devices.  One example of such a
      package is the VERSAPLOT-07 software marketed by Versatec,
      Inc. of Santa Clara, CA for their line of electrostatic
      printer/plotters.

      Linking BPLOTC
      --------------

           The source code for BPLOTC is written in FORTRAN 77, and
      includes two character string manipulation functions, BLSHFT
      and LENGTH.  One FORTRAN 77 intrinsic function, INDEX, is used by 
      BPLOTC for character string matching.  After BPLOTC is compiled,
      it must be linked with a Calcomp-compatible graphics subroutine
      package.  Only six graphics subroutines are used by BPLOTC -
      PLOTS, PLOT, AXIS, FACTOR, NUMBER and SYMBOL.  A typical com-
      mand file to link BPLOTC on the Lockheed VAX system is:

                $SET DEF DRC0:[BUSHNELL.BOSOR4]
                $LINK/EXE=BOSORPLOT BPLOTC/INCLUDE=BPLOTC,BPLOTC/LIB,-
                                    SYS$LIBRARY:NEWP1/LIB

      where DRC0:[BUSHNELL.BOSOR4] is the directory containing the
      compiled BPLOTC code (BPLOTC.OLB), and SYS$LIBRARY:
      NEWP1/LIB is the Calcomp-compatible VERSAPLOT-07 graphics sub-
      routine object library.  The SYS$LIBRARY:NEWP1/LIB name should
      be replaced with the complete file name of the Calcomp-compatible
      graphics subroutine package on your computer.  Note that the
      name of the executable image produced by this command will
      be BOSORPLOT.EXE; this is done so that the command files for
      plotting in batch mode will not need to be changed.  On some
      computer systems, an additional ASSIGN statement may be needed
      to connect the plotting device to the batch or interactive
      job which is running the executable image of BPLOTC.





      Executing BPLOTC
      ----------------

           Once an executable image of BPLOTC has been created by the
      linking process described above, it may be run in either inter-
      active or batch mode. To run the program interactively, first set
      the default directory to the directory containing the 'NAME'.PLT
      file to be plotted (or make a logical name assignment to that
      effect), then type:

                $RUN BOSOR4:BOSORPLOT

      where BOSOR4 is the logical name of the directory containing the
      executable image of BPLOTC as BOSORPLOT.EXE (see Section IX of
      the BOSOR documentation for making this logical name assignment).
      When the program executes interactively, it will type a prompt to
      the user for the number of plots to be skipped in the 'NAME'.PLT
      file before the remainder of the plots in the 'NAME'.PLT file are
      plotted. After the user enters the number of plots to be skipped,
      BPLOTC begins plotting, and displays a ***DONE*** message on the
      user's terminal upon successful completion.  When BPLOTC is to be
      run in batch mode, the BOSORPLOT.COM command procedure (described
      in Section VIII of the BOSOR documentation) is invoked.  Remember
      that the executable image of the BPLOTC program must be named
      BOSORPLOT.EXE in order for these command procedures to work.
      Also, it will be necessary to delete one data line in the
      BOSORPLOT.BAT file; in this file, there are two lines following
      the  $ RUN BOSOR4:BOSORPLOT  command which contain data for the
      executable image.  The first of these lines (which has a  2  on
      it in the BOSOR documentation example), is not needed by the
      executable image of BPLOTC, and MUST be deleted.  The second
      line contains the number of images to be skipped, and can be
      modified if desired.



     BPLOTD
     ------

           This version of the BOSOR plot program is designed to
      use the DI-3000 graphics subroutine package, which is copy-
      righted software developed by:

                Precision Visuals, Inc.
                250 Arapahoe
                Boulder, Colorado  80302
                USA                      Telephone: (303) 449-0806

      in accordance with the methodology and specifications of the
      1979 Graphics Core System defined by the Graphics Standards
      Planning Committee (GSPC) of  ACM/SIGGRAPH.  The specifications
      are defined in the following ACM periodicals:

           Computer Graphics, Vol. 11, No. 3, Fall 1977
           Computer Graphics, Vol. 13, No. 3, August 1979








      Linking BPLOTD
      --------------

           The source code for BPLOTD is written in FORTRAN 77, and
      includes two character string manipulation functions, BLSHFT
      and LENGTH, and six graphics interface subroutines - BPLOTS,
      BPLOT, BAXIS, BFACTR, BNUMBR and BSYMBL. One FORTRAN 77 intrinsic function,
      INDEX, is used by BPLOTD for character string matching.  After
      compiling BPLOTD, it must be linked to the DI-3000 graphics sub-
      routines and device drivers.  A typical command file to link
      BPLOTD on the LPARL VAX system is:

                $SET DEF DRC0:[BUSHNELL.BOSOR4]
                $LINK/EXE=BOSORPLOT BPLOTD/INCLUDE=BPLOTD,BPLOTD/LIB,-
                                    SYS$PLOT:DILIB/LIB,VT100DDR,-
                                             VERSFDDR,T4027DDR,-
                                             T4014DDR,DUMLIB/LIB,-
                                    SYS$LIBRARY:NEWP1/LIB

      where DRC0:[BUSHNELL.BOSOR4] is the directory containing the
      compiled BPLOTD code (BPLOTD.OLB), SYS$PLOT:DILIB/LIB
      is the DI-3000 subroutine library (only Level-A is required),
      SYS$PLOT:VT100DDR,VERSFDDR,T4027DDR,T4014DDR,DUMLIB/LIB are the
      DI-3000 device drivers for the VT100 Retrographics terminal,
      the Versatec electrostatic plotter, the Tektronix 4025/4027
      terminal and the Tektronix 401x terminal family, and the
      SYS$LIBRARY:NEWP1/LIB is the VERSAPLOT-07 graphics subroutine
      library, which is used by the DI-3000 VERSFDDR device driver to
      produce output on the Versatec electrostatic plotter.  Note that
      the name of the executable image produced by this command will
      be BOSORPLOT.EXE; this is done so that the command files for
      doing plotting in batch mode will not need to be changed.

      Executing BPLOTD
      ----------------

           Once an executable image of BPLOTD has been created by the
      linking process described above, it may be run in either inter-
      active or batch mode. To run the program interactively, first set
      the default directory to the directory containing the 'NAME'.PLT
      file to be plotted (or make a logical name assignment to that
      effect), then type:

                $RUN BOSOR4:BOSORPLOT

      where BOSOR4 is the logical name of the directory containing the
      executable image of BPLOTD as BOSORPLOT.EXE (see Section IX of
      the BOSOR documentation for making this logical name assignment).
      NOTE: see the documentation in the BPLOTD source code for the
      proper terminal characteristics for each graphics device.
      When the program executes interactively, it will type a prompt to
      the user for graphics device on which the plots are to be output.










      After the user enters the number of the graphics device, the program
      will type a prompt for the number of plots to be skipped in the
      'NAME'.PLT file before the remainder of the plots in the 'NAME'.PLT
      file are plotted. After the user enters the number of plots to be
      skipped, BPLOTD begins plotting and displays a ***DONE*** message
      on the user's terminal upon successful completion. When BPLOTD is
      to be run in batch mode, the BOSORPLOT.COM command procedure (de-
      scribed in Section VIII of the BOSOR documentation) is invoked.
      Remember that the name of the executable image of BPLOTD must be
      BOSORPLOT.EXE in order for these command procedures to work.  In
      the BOSORPLOT.BAT file, there are two lines following the  $ RUN
      BOSOR4:BOSORPLOT  command which contain data for the executable
      image.  The first of these lines is the number of the graphics
      device on which the plots are to be output (for batch runs, this
      will almost always be device 2, the Versatec plotter), and the
      second line (which has a  0  on it in the BOSOR documentation
      example) contains the number of plots to be skipped, and can
      be modified to any desired value.

      Use of BPLOTD with Versatec plotters
      ------------------------------------

           The executable image of BPLOTD provided on the BOSOR distribution
      tape was created on a VAX 11/780 running Version 2.4 of the VMS
      operating system, and incorporates the VERSAPLOT-07 subroutines.
      The VERSAPLOT-07 graphics subroutine package to which BPLOTD has been
      linked uses the VERSAPLOT mapped-vector algorithm, with a disk file
      I/O buffer size of 512 bytes (one disk block), and a Versatec 1100
      100 dots/inch plotter as the output device.  When BPLOTD is executed,
      and the user requests the Versatec as the output device, two inter-
      mediate plot files, PARM.PLV and VECTR1.PLV, are created by the
      VERSAPLOT-07 software.  In order to plot these files on a Versatec
      1100 plotter, the VERSAPLOT-07 mapped-vector vector-raster conversion
      program (usually referred to as RASM in the VERSAPLOT-07 documentation)
      must be run.  A copy of RASM is not provided on the BOSOR tapes; the
      user must have their own VERSAPLOT-07 license, which includes the
      RASM program.  If the user's computer does not have a 100 dot/inch
      Versatec plotter, or if the RASM program available on the user's
      system does not use a 512 byte I/O buffer when accessing the PLV
      disk files, then BPLOTD must be re-linked with both DI-3000 and
      the user's VERSAPLOT-07 libraries.  Should the user not have DI-3000
      available, then BPLOTC may be linked to the user's VERSAPLOT-07
      library (see the notes above on BPLOTC).


      A NEW BPLOTD (CONTAINED IN THE BPLOTL.NEW LIBRARY) WRITTEN BY
      T. E. ABRAHAMSON FOR USE WITH DISSPLA 10.5.
      ----------------------------------------------------------------

      The source file is in the BPLOTL library. The executable element
      is called BOSORPLOTQMS.EXE.  The linking statement is contained
      in the file LINKPLOT2.COM, a list of which follows:

         $for bplotl
         $! THIS IS THE LINKPLOT2.COM FILE...
         $!
         $ LINK/EXE=BOSORPLOT BPLOTL,dsk2:[bushnell.bosor4]UTIL/LIB,-
             SYS$disspla10_5:intlib15/l,dislib/l,intlib15/l,dislib/l
         $ EXIT
         $!
**********************************************************************

V    NEW BOSOR4 CAPABILITIES....

(1)  Up to 195 segments, 198 discrete rings, 10000 d.o.f. in the pre-
buckling problem and 15000 d.o.f. in the bifurcation buckling, vibration
and nonsymmetric stress problems can now be handled. Formerly the
maximum values were 95 segments, 50 discrete rings, 2000 d.o.f. and
6000 d.o.f., respectively.

(2)  Two load sets, called "LOAD SET A" and "LOAD SET B", are now
handled in buckling problems.  LOAD SET A is considered to be
multiplied by the eigenvalue whereas LOAD SET B is considered to be
constant.  Both load sets "A" and "B" can have different variations in
the meridional and circumferential coordinate directions.

(3)  BOSOR4 cases can be restarted.  There are two modes of restart:

   (a) A given type of analysis (given INDIC) can be continued in a
       series of runs.

   (b) The restart capability is used to determine response of
       structures to base excitation. 

More on the restart capability is given in Section VI.

(4) Up to 90 circumferential harmonics can now be handled in a
nonsymmetric stress analysis (INDIC = 3).  Actually the maximum number
of circumferential harmonics is

    NHARM MAX. = MIN [ 90, 1250/NSEG ]

where NSEG is the number of structural segments in the BOSOR4 model.

(5) BOSOR4 now includes the capability to handle
    (a) constant rotation OMEGA about the axis of revolution(any INDIC)

    (b) steady-state response to harmonic excitation at an angular
        frequency OMEGDR. The harmonic excitation may be applied as
        any combination of loads acting on a stationary structure or
        as support motion.  If the user specifies support excitation,
        he is asked to provide the number of g's lateral and axial
        components applied to the support(s). (INDIC = 3 or 4)

    (c) response to base excitation as follows:

         (i) harmonic excitation at a series of natural frequencies
        (ii) random excitation
       (iii) shock  excitation

       Depending on which analysis type i, ii, or iii the user is
       asked to provide load factors, damping factors, and spectral
       densities as functions of the frequency. The analysis here is
       different from that of (b) in that (b) is not valid for
       response at resonance, whereas (c) estimates the response
       based on behavior at the resonances only.

========== more information of transient response to base excitation =======
BOSOR4 will do transient response to base excitation. The explanation is
provided in certain "help" paragraphs in the PROMPT3.DAT file...

            Section of the file ../bosor4/execute/PROMPT3.DAT
            That deals with response to base excitation...
=========================================================================
750.1 Do you want response at resonance to base excitation?
750.2  
      You can type Y only if you have just run an INDIC = 2
      (modal vibration case) with n = 0 only or n = 1 only. (n is
      the number of circumferential waves.)  This program estimates
      the response by RSS (square root of the sum of the squares).
      The sum is over the number of modes calculated in the previous
      (INDIC = 2) run.  This program will handle
      response to harmonic excitation, response to random excitation,
      and response to shock. You will be asked to provide input data
      such as load factor (number of g's acceleration), damping
      factor, and/or spectral density.

770.0  
      To use this branch you must just have run a modal vibration
      analysis for a single number of circumferential waves: either
      n = 0 or n = 1. The purpose here is to find the response of the
      structure to either:

      1. sinusoidal excitation    or

      2. random excitation        or

      3. shock

780.1 Want more information?
790.0  

      There are four kinds of information that must be supplied
      in order to perform all of the three types of analysis just
      listed:

      a.  gravity in the units of this case (e.g. 386.4 in/sec**2)

      b.  a table of load factors or shock levels (g's) vs.
          frequency in hertz:                               [N = N(f)]

      c.  a table of damping factor vs. frequency in hertz: [B = B(f)]

      d. a table of spectral density vs. frequency in hertz:[W = W(f)],
         in which W is in units of g's-squared-per-hertz (N**2/hertz).

      For harmonic excitation you must supply a., b., and c.
      For random   vibration  you must supply a., c., and d.
      For shock    response   you must supply a. and b.

800.1 Want more information?
810.0
      Suppose you calculated the first five vibration frequencies
      and modes for n = 1 circumferential wave in your previous run,
      call it run no. 1.  Suppose you now want to calculate the
      response to random excitation.  In the present run, call it
      run no. 2, the state of the shell from random lateral or
      axial excitation [no rotational excitation (pitching)
      allowed!] is estimated by superposition of quantities
      calculated for each resonance:

       w(response) = SQRT{ sum from 1 to 5 of [m(i)*P(i)*phi(i)]**2 }

      in which m(i) is a frequency-dependent multiplier,
      P(i) is a modal participation factor, and phi(i) is the ith
      vibration mode, including modal stresses derived from
      appropriate differentiations of the modal displacements.
      For response to harmonic excitation, each mode is treated
      separately; the responses from the various modes are not
      superposed.

812.1 Want more information?
813.0  
      For all of the three types of analysis listed above an
      amplitude factor is derived which is a product of the
      modal participation factor, P(i), and the multiplier, m(i).
      The frequency-dependent multiplier, m(i), is given for each
      of the three analysis types by:

      For harmonic excitation (analysis type 1):

        m(i) = N(i)*g/[OMEGA**2*BETA(i)]

      For random excitation   (analysis type 2):

        m(i) = SQRT[OMEGA*SPECD/(2*BETA)]*g/OMEGA**2

      For shock response      (analysis type 3):

        m(i) = 2*N(i)*g/OMEGA**2

      [ N(i)=load factor, g = acceleration of gravity,
        OMEGA=freq.(rad/sec), BETA=damping, SPECD=spectral density]

815.1 Type of response analysis (1 or 2  or 3)
815.2  
      1 means response to sinusoidal excitation
      2 means response to random excitation
      3 means response to shock

820.1 Value of acceleration of gravity in the units of this case
830.0  
      Next, provide number of g's (N) vs. frequency (f) in hertz.
      If N varies with f, make sure that the data span the range of
      frequencies for which you calculated vibration modes in your
      previous INDIC = 2 run.

      NOTE: MAXIMUM OF 20  (N,f)  PAIRS IS ALLOWED.

840.1 Does N (no. of g's) vary with f (frequency)?
850.1 Number of g's, N
860.1 Frequency, f, corresponding to N
870.1 Want more entries in the N = N(f) table?
880.0  
      Next, provide damping factor (B) vs. frequency (f) in hertz.
      NOTE: MAXIMUM OF 20  (B,f)  PAIRS IS ALLOWED.

890.1 Does B (damping factor) vary with f (frequency)?
900.1 Damping factor, B
910.1 Frequency, f, corresponding to B
920.1 Want more entries in the B = B(f) table?
930.0  
      Next, provide spectral density (W) vs. frequency (f) in hertz.
      NOTE: MAXIMUM OF 20  (W,f)  PAIRS IS ALLOWED.

940.1 Does W (spectral density) vary with f (frequency)?
950.1 Spectral density (N**2/hertz), W
960.1 Frequency, f, corresponding to W
970.1 Want more entries in the W = W(f) table?
980.1 Do you want to find buckling load factors?
982.0  
      For horizontal (lateral) base motion, maximum compressive
      stress resultants are either at circumferential coordinate
      THETA = 0 degrees or THETA = 180 degrees. Print out meridional
      distributions of prebuckling membrane resultants along both the
      meridian at THETA = 0 deg. and at THETA = 180 deg; then decide
      which meridian to choose for the buckling analysis.  It may be
      a good idea to do buckling analyses corresponding to the stress
      states at both THETA = 0 and THETA = 180 deg.

===== end of information about transient response to base excitation ========
===== that is contained in the ...bosor4/execute/PROMPT3.DAT file  =========

(6)  The user can now call for listing and plotting of the strains
and changes in curvature.  This is especially useful if one wishes 
to obtain a comparison with tests or an indication of material
failure for layered shell walls.  Expanded plots of local areas
are included if the user wants them.

(7)  BOSOR4 will now handle cases in which the shell is supported on
an elastic foundation with uniform stiffness (Winkler type) within
each shell segment.

(8)  BOSOR4 will now handle imposed symmetric or nonsymmetric
displacements. One uses the load input.  The program knows that the
input provided in response to questions about loads is actually
displacement input because the user provides 2's instead of 1's in
the boundary condition part of the input.

(9) BOSOR4 will now calculate d'Alembert loads for free-free shells
subjected to non-self-equilibrating loads. This new capability,
installed 17-21 August, 1985, works as follows:

      If the loads in either Load Set A or Load Set B or both are
      not self-equilibrating, such as is true for a free-free shell
      subjected to a blast load from the side, you may want BOSOR4
      to compute the inertial reactions from the applied loads.
      This BOSOR does in the following way:

       1. BOSOR calculates the total mass, c.g. location, and
          mass moments of inertia of the entire structure.

       2. BOSOR calculates the total forces Fx, Fy, Fz applied at
          the origin of the global X,Y,Z cartesian coordinate
          system, and total moments Mx, My, Mz about these axes.
          The origin of the global X,Y,Z frame is on the axis of
          revolution at Z = 0. Note that in order for the mass
          properties (M, z(c.g.), I(c.g.), Iz) and forces Fx,Fy,Fz
          and moments Mx,My,Mz to be properly calculated you must have
          already provided the geometry of each segment of the
          structure in terms of the global Z coordinate.

       3. Given the six equations for rigid-body dynamics, accelerations
          of the c.g. and angular accelerations about the c.g. are
          calculated.

       4. The components of linear acceleration in the normal,
          meridional, and circumferential directions everywhere in the
          structure are then calculated. These accelerations
          yield inertial loads (F=ma!) that contribute to the line
          loads (from discrete ring inertia) and distributed loads
          corresponding to n = +1, n = 0, and n = -1 circumferential
          waves. The applied line loads, pressures, and surface
          tractions plus the inertial reactions in the n = +1, 0,
          and -1 circumferential harmonics form a self-equilibrating
          load system. (All applied load harmonics with circum-
          ferential waves greater than or equal to 2 are self-
          equilibrating, and therefore do not generate rigid body
          motions.)

       The above steps 2., 3., and 4. are performed for either or both
       Load Set A and/or Load Set B, if you indicate that rigid body
       motion is possible and that you wish dynamic reactions
       (d'alembert forces) to be included for Load Set A and/or for
       Load Set B.

       Please note that the calculations just described are performed
       only for INDIC = 3 or 4.

       Also note: You must of course supply masses for all the
       structural parts, even though you regard this as a statics
       problem.  No mass, no inertial reaction! Remember, the axial
       coordinate input for each segment must be global for this to
       work properly.

(10) As of 21 August, 1985, there is a new wall property routine,
CFB4,  for providing input for laminated, composite shell walls.
The thicknesses in these walls must be constant. The winding angles
of each lamina must also be constant. BOSOR4 will calculate stress
components in each lamina in the material coordinates, which are
oriented along the fibers and perpendicular to the fibers of each
lamina. These lamina stress components are compared to the following
allowables: maximum tension along fibers, maximum compression along
fibers, maximum tension normal to fibers, maximum compression normal
to fibers, and maximum in-plane shear. In the listed output of the
stresses any failures relative to these five allowables are indicated.

Please note that stresses in any layered shell wall with properties
constant along the meridian can be obtained whether or not the wall
is of composite material if you use NWALL = 4 for that segment.
*********************************************************************

VI(a)  MODIFYING CASES AND RESTARTING...

In this section it is assumed that the modifications to not involve
modifying data for individual segments or constraint condition data.
A discussion of these sorts of modifications occurs in Section VI(c).

Here there are two kinds of restarts:

    (a) continuing analyses for the same analysis type (same INDIC).
        This option is especially useful for the following purposes:

        (1) choosing various locations at which to print or plot output
        in the INDIC = 3 (linear nonsymmetric stress analysis) option
        without having to rerun the entire case.  

        (2) choosing various meridians for doing a buckling analysis in
        the INDIC = 4 (buckling with linear nonsymmetric stress)
        option without having to rerun the entire case.

        (3) choosing new circumferential wave numbers in buckling or
        vibration analyses without having to rerun the entire case.

        (4) obtaining many eigenvalues for buckling or vibration
            without generating a large output file that contains
            eigenvectors. In restarts, listing of the eigenvectors
            can be suppressed.  These modes can be plotted instead.

    (b) calculating response to base excitation, as described below.


CAUTION!!....

To use the restart capabilities you must retain the files

       'NAME'.BLK and 'NAME'.RAN 

from the previous run.

You may do as many sequential  RESTART's as you
wish.

        HOW TO USE BOSOR4 TO DO RESPONSE TO BASE EXCITATION
                   AT RESONANT FREQUENCIES

1. Run an INDIC = 2 (modal vibration) analysis for a single value
   of circumferential wave number, n (either n = 0 or n = 1, not both
   n = 0 and n = 1 in the same run).

2. Print out 'NAME'.OUT;3, so you don't lose it after your restart.

3. Do any plots of modes that you may want ( BOSORPLOT)

4. Give the command  RESETUP and answer the questions interactively.
   Make sure you answer the first question Y or YES

5. Give the command  RESTART

6. Print out 'NAME'.OUT  (or if the job didn't finish print out
   'NAME'.OUT  and  'NAME'.ERR)

7. Do any plots that you may want ( BOSORPLOT)

*********************************************************************

VI(b) EDITING AND CHECKING SEGMENT AND GLOBAL DATA...

Often it is easier to provide segment data by copying an existing
segment file into a new version and modifying the new version by
use of the VAX editor. Or you may wish to modify existing segment
files directly, especially when you become an expert in using BOSOR.
You often want to avoid the tedium of answering many questions
interactively, so you find ways to set up segment files via VAX
copying and editing features.  In so modifying your files, you
generally don't want to take the time to provide comments identifying
each datum.  After manipulating files, deleting entries, and adding
entries, you end up with a 'NAME'.SEGn file that is incompletely
annotated and may not in fact be correct. You will want to check such
a file and generate complete annotations by using the command

          INPUT

If the file is indeed good, a properly annotated version of it will
appear in 'NAME'.DAT, which you can then rename 'NAME'.SEGn, where
n is the segment number you are concerned with.

See Section VI(c) for discussion of a utility, MODIFY, which is very
useful for generating blocks of input data pertaining to nodal point
distribution, meridional geometry, imperfections, discrete rings, line
loads, distributed loads, wall construction, constraint conditions,
and global input; automatically editing the appropriate NAME.SEGn
file; and automatically checking this file via the CHECKFILE utility.

RECOMMENDATION...------------------------------------------

It is recommended that updated 'NAME'.SEGn files be maintained rather
than the 'NAME'.ALL file for the following reasons:

1. Editing the much smaller 'NAME'.SEG files proceeds more quickly
because of their smaller length.

2. It is very easy to generate another 'NAME'.ALL file from the
'NAME'.SEGn files: one merely gives the command  ASSEMBLE.

3. You are more flexible in the way you can modify a case if you start
with 'NAME'.SEGn files rather than with the large 'NAME'.ALL file.
For example, you may in future runs want to reorder the segments,
add or remove segments from the model, add discrete rings to a segment,
change the wall construction of a segment, etc.

4. The utility MODIFY (described in Section VI(c)) works in
conjunction with 'NAME'.SEG files, not in conjunction with the
'NAME'.ALL file.
-------------------------------------------------------------

If, upon using the command  INPUT, the procedure
bombs, go back to the 'NAME'.SEGn file and do more editing.  It may
be a good idea to use the MODIFY utility described in Sect. VI(c).
Be sure that when you are ready to  ASSEMBLE you check to see that all
your 'NAME'.SEGn files are in the correct order and that there are no
extraneous 'NAME'.SEGn files in the subdirectory from which you are
assembling your model.

*********************************************************************

VI(c) GENERATING BLOCKS OF INPUT DATA PERTAINING TO SEVERAL CATEGORIES
      AND AUTOMATICALLY MODIFYING  NAME.SEG  FILES.

It frequently occurs that you have a large case set up and you want to
make modifications that involve data for one or more of the segments
or one or more of the boundary and junction conditions.  You do not
want to have to set up a new case from scratch in the interactive mode.
A utility called MODIFY is available to permit you to modify certain
data while leaving the rest alone.  MODIFY generates blocks of input
data pertaining to nodal point distribution, meridional geometry,
imperfections, discrete rings, line loads, distributed loads, wall
construction, constraint conditions, and global data. You execute
MODIFY by typing:

        MODIFY

and answering interactively the questions that follow this command.
When an interactive session is finished, a file with a name such as
MESH.QUE, GEOM.QUE, IMPERF.QUE, RINGS.QUE, LINELOADS.QUE, etc will
exist in your subdirectory.  This file is then used by MODIFY to modify
the NAME.SEGn file that you indicate needs modification.  The
following table lists the options that exist for generating blocks
of input data in this manner:

   BLOCKS OF INPUT DATA GENERATED BY USE OF THE UTILITY "MODIFY"
      Generate proper input data for the following categories by
      responding with the appropriate index:
      ===========================================================
      Index     Type of BOSOR input data            File generated
      -----------------------------------------------------------
        1      nodal point distribution in segment       MESH.QUE
        2      shape of meridian of segment              GEOM.QUE
        3      location of reference surface in wall  REFSURF.QUE
        4      initial imperfection shape in segment   IMPERF.QUE
        5      discrete rings in segment                RINGS.QUE
        6      line loads in segment                LINELOADS.QUE
        7      distributed (surface) loads in seg.  DISTLOADS.QUE
        8      wall construction of segment              WALL.QUE
        9      smeared stiffeners in segment          SMEARED.QUE
       10      direct input of prestress            PRESTRESS.QUE
       11      constraint conditions of segment     CONSTRAIN.QUE
       12      rigid body motion prevention         RIGIDBODY.QUE
       13      global parameters at beginning         GLOBAL1.QUE
       14      global parameters after segment data   GLOBAL2.QUE
       15      output indicators                      GLOBAL3.QUE
      =============================================================


MODIFY works because of certain key phrases embedded in the 'NAME'.SEG
files.  These key phrases tell MODIFY where the new data should
be inserted.  Because of this, MODIFY should only be used with NAME.SEG
files that have been generated from a good NAME.DOC file via the
utility GETSEGS. (GETSEGS disassembles the NAME.DOC file into NAME.SEG
files.) MODIFY may not work when you apply it to NAME.SEG files that
have been generated in some shortcut manner, such as by means copying
from other segments or otherwise using the VAX editor to generate
NAME.SEG files.

VI(d)  SAMPLE RUNSTREAM INCLUDING MODIFICATION OF MODEL..

The runstream listed below illustrates the recommended way of modifying
a case and re-running.  Notice that new NAME.SEG files are obtained
from the NAME.DOC file that was generated during the first successful
pass through the preprocessor BOSORREAD.

    SAMPLE RUNSTREAM  (Set up case, run, restart, modify, run again)
       INPUT             You supply data interactively for segments
       ASSEMBLE          You cause segment data & b.c.'s to be concat.
       BOSORALL          You launch a batch run of the case
       BOSORPLOT         You launch a batch run for plots
       RESETUP           You decide to do more analysis, same model
                         (Interactive input is required from you now.)
       RESTART           You launch a batch run for more analysis on
                         the same model. (example: additional circum-
                         ferential wave numbers for bifurcation buckling)
       BOSORPLOT         You launch batch run for plots

       CLEANUP           Get rid of all NAME.* files except .DOC & .ALL
       GETSEGS           NAME.DOC file broken down into segments
       MODIFY            One of the segments modified in some way
       MODIFY            Another segment modified (e.g. ring added)
       MODIFY            Same segment modified again (e.g. more nodes)
       MODIFY            Same segment modified again (e.g. new loading)
       ASSEMBLE          Segment data reassembled
       BOSORALL          You launch another batch run for modified model
       BOSORPLOT         You launch a batch run for plots

Note that you do not have to use MODIFY in order to change a case.
However, it is the safest way.  In certain cases, for example, when
you just want to change a dimension, it will doubtless be easier just
to quickly change the NAME.ALL file and then rerun.  However, if you
are at all in doubt, use the CLEANUP - GETSEGS - MODIFY - ASSEMBLE
route.

*********************************************************************

VII   BOSOR4 LIBRARIES AND ROUTINES...

For ease in handling recompilations, BOSOR4 has been divided into
a number of libraries.  These are listed below:

=======================================================================
  LIBRARY NAME      PURPOSES OF LIBRARY        SUBROUTINES IN LIBRARY
-----------------------------------------------------------------------

    ARRAYS          Set up stiffness, load-    ARRAYS, ASTAB, FILLB,
                    geometric, and mass ma-    GETB1, GETC, GETD, GETE,
                    trices for buckling,       GETG, GETP, GETROT,
                    vibration, linear non-     GETWWD, MASDRV, RINGDR,
                    symmetric stress analy-    RMASDV, RRHS, SRHS,
                    sis. Set up r.h.s. for     STABIL,FOUNDA
                    linear nonsymmetric
                    stress analysis.

    ASSEMBLE        concatenate NAME.SEGn      ASSMBL, FOPENA
                    files into a NAME.ALL
                    file.

    BLIOMF.MAR      VAX VMS assembly lang.
                    routine for operation
                    with GASP. See GASPOLD.

    B4MAIN          Drive the mainprocessor    B4MAIN, B4OUTM,
                                               OUT2, OUTFIN, OUTLOD
                                               NONOUT, VARFIX

    BPLOTD          Perform plotting           BPLOTD, BAXIS, BFACTR,
                    via DI3000 package.
                                               BLSHFT, BNUMBR, BPLOT,
                                               BPLOTS, BSYMBL, LENGTH

    BPLOTC          Perform plotting           BLSHFT, BPLOTC, LENGTH
                    via CALCOMP.

    B4POST          Drive the postprocessor    B4OUT, B4POST,
                                               OUT2, OUTBUC, OUTFIN,
                                               OUTLOD, OUTNON, OUTPEE,
                                               SUPER

    B4READ          Drive the preprocessor     B4READ, CONSTR,
                                               MESH, OUTAX, OUTIN1,
                                               READIT, RFIRST, RFIRST1,
                                               WRCON,BLOWUP

    BUCKLE          Perform buckling or        ADD2, BUCKLE, EBAND2,
                    vibration eigenvalue       ORTHO2, VEC
                    analysis.

    FELIPPA         Search HELP files          CMATCH, GETLIN, GETTOK,
                                               HELPER, HMATCH, HPRINT,
                                               LENETB, PUTLIN

    GASP            transfer data to           GASP,ABORT,IB,F77BIO,
                    and from RAM.              IOMRDA, IOMWDA
                    This version is in
                    FORTRAN and produces
                    alot of IO counts. It
                    is portable, however.

    GASPOLD         transfer data to and from  GASP, ABORT, IB, BLIOMF
                    RAM. Runs fast, but only
                    on VAX VMS. Current EXE's
                    BOSORREAD, BOSORMAIN, and
                    BOSORPOST were generated
                    with this version of GASP.


    GEOM            Find geometry of           ANGLE, ARCDRW, CURV,
                    structural segment.        GEOM, GEOM1, GEOM2,
                                               GEOM3, GEOM4, GEOM5,
                                               GEOMTR, GEOMTY, GMFIND,
                                               IMPERF, SHELL, SPLICO,
                                               SPLINE

    GETSEGS         Split NAME.DOC file        GETSEG, FOPEN
                    into NAME.SEG files.

    HELP4           interactive, command-      HELP4$MAIN
                    driven help utility

    INPUT           allow user to set up       INPUT, BOUNDY, SEGMT
                    a case interactively.      NFILE, NFILEB, RENEW

    MODE            From solution vector       IFIND, LOCAL, MODE,
                    find u,v,w, stress         MODE1, RINGF, SPOSE,
                    resultants, stresses;      RESFAC
                    Superpose same for
                    INDIC = 3 analysis.

    MODIFY          Allow user to modify       MODIFY, EDSEG, CNAMES,
                    'NAME'.SEGn files.         BLANKX

    PLOT            Set up plot file           ARROW, AXIS, CSEG,
                    called 'NAME'.PLT.         CSEG10, DECML, ENDPLT,
                                               FRAMEV, GEOPLT, NUMBER,
                                               PLOT, PLOT11, PLOTI,
                                               PLOTIT, PLOTOP, PLOTS,
                                               SCALEH, SYMBOL, EXPAND

    PRE             Perform the nonlinear      APREB, FILLBP, GETWWP,
                    prebuckling analysis.      LOADS, OUTPRE, PGETB,
                                               PGETC, PLOCAL, PRE,
                                               PRE1, PRE2, PREB,
                                               PRESTS, UNLOAD

    PROMPTER        Perform the prompting      ANSWER, CONVRT, DATUM,
                    and set up a file          I2C, IBLNK, PHOUT,
                    ('NAME'.DOC;n) suit-       PROMPT, ABORT2, ANSL1,
                    able for BOSOR4 input.     NXITEM, READFF, ABORT2
                                               ANSL1, ERREX, REREAD

    QUESTIONS       Permit generation of       QUEST, MESH,
                    blocks of input data       GEOM, REFSUR, STA,
                    that can be used to        IMPERF, RINGS, LINLOD,
                    modify 'NAME'.SEG files    DISLOD, LOADRD, FOUR
                    without starting a case    LODMCH, GETPST, SMEAR,
                    from scratch.              WALL, POLES, BOUND,
                                               JUNCT, RIGID, GLOB1,
                                               GLOB2, GLOB3, INPROP,
                                               NODOUT

    RESETUP         Allow user to continue     RESET, MODTAB, BLOWUP,
                    a case with new para-      KKPLOT
                    meters.

    RFIVE           Perform miscellaneous      GETBLK, GETIW, OUTIN2,
                    data handling functions    OUTLL, RFIVE, SKILIN,
                    after all preprocessor     SORT, ZGLOBE
                    data has been read in.

    RZLG            Read in data for discrete  DIST, FCOEF, FOUR,
                    rings and for loading.     GETFS, GETPST, GETY,
                                               LINELD, LOADRD, LOADRE,
                                               LODMCH, LODPOS, LODSTO,
                                               OUTCC, OUTHM, RGDATA,
                                               RSTIFF, RZLG, ZEROIT,
                                               FDYNAM, PDYNAM

    STOGET          Store and retrieve         GETCM1, GETCM2, STOCM1,
                    data in labelled common    STOCM2
                    blocks.

    UTIL            Contains utility routines  
                    used in various proces-    CHANGE, DUMMY,
                    sors:                      FACTOR, FACTR, FINDZ,
                    equation solving           GETZ, INTERP,
                    (FACTOR, FACTR, SOLVE),    INTER, ISHIFT, MAIN1,
                    matrix multiplying         MATMU1, MATMU2, MATMU3,
                    (MATMU1, etc), interpola-  MATMU4, ERREX, STRTHK,
                    ting (FINDZ, GETZ, INTER), PINIT, SOLVE, MAXSTR,
                    timing (TIMRB), finding    SR100T, STA, STRESS,
                    stress (STRESS, STRTHK,    TIMRB, URNDM, NODOUT,
                    MAXSTR, ROTATE).           ROTATE

    WALL            Read input for wall con-   CFB1, CFB2, CFB3, CFB4,
                    struction and calculate    CFB5, CFB6, CFB7, CFB8,
                    the integrated constitu-   FINDTH, FUNCT, INGRAT,
                    tive matrix C(i,j).        STIFF, WALLCF, WALLS,
                                               CFBL, CONTRA, CSHIFT,
                                               INPROP,MOVER,NEUTAX,
                                               RTRSF


=======================================================================

In addition to the libraries an object deck
of URNDM must be maintained, generated by compilation as follows:

    FOR URNDM/CHECK=NOOVERFLOW

In addition, an object deck of the MACRO called BLIOMF must be
maintained, generated as follows:

    MACRO BLIOMF.MAR

In recompilation of a library, you will find it convenient to use
the procedure GETLIB, which is listed below:

$! This procedure establishes a compressed library from a
$! file of object decks and deletes the object file.
$!
$!
$     INQUIRE  P1  "GIVE NAME OF LIBRARY FILE"
$     LIB/CREATE  'P1'.OLB  'P1'.OBJ
$     LIB/COM     'P1'.OLB
$     COPY        'P1'.OLB  *.*
$     PURGE       'P1'.OLB
$     DELETE      'P1'.OBJ;*

The ARRAYS library, for example, would be recompiled and the library
updated as follows:

 $ FOR ARRAYS.NEW
 $ GETLIB
  GIVE NAME OF LIBRARY FILE:  ARRAYS


VIII VARIOUS BOSOR4 PROCESSORS AND PROCEDURES...

There are several BOSOR4 processors, as listed below:

======================================================================
PROCESSOR NAME               PURPOSE OF PROCESSOR
----------------------------------------------------------------------
ASSEMBLE         Concatenates 'NAME'.SEGn files, n = 1,NSEG+1,
                 into 'NAME'.ALL file.

INPUT            Create BOSOR4 data file NAME.SEGn corresponding to
                 the nth structural segment. Data accumulated in this
                 file interactively.

INPUT            Create BOSOR4 data file NAME.SEG(NSEG+1), where NSEG
                 is the number of structural segments, corresponding to
                 global data and constraint conditions. Data are
                 accumulated in this file interactively.

BOSORREAD        The input data from 'NAME'.ALL, which is a concatena-
                 tion of the files 'NAME'.SEGn, are read in, and a new
                 annotated file 'NAME'.DOC is generated.  This new
                 file can edited and used for future BOSOR4 batch runs
                 of the same case or user-made modifications of it. The
                 input data are massaged as needed for the BOSOR4 main
                 processor.

BOSORMAIN        The main part of the calculations for the case are
                 performed.

BOSORPOST        The solution vectors are processed as determined by
                 the various analysis types (INDIC). Output is written
                 to the files 'NAME'.PLT and 'NAME.PLT2' (for plotting)
                 and 'NAME'.OUT (for list output).

BOSORPLOT        The input plot file, 'NAME'.PLT, is used to generate
                 output files, *.plv;*, suitable for plotting on a
                 variety of devices.  This processor is based on the
                 DI-3000 proprietary software package. Also produces
                 a file suitable for use with the DISSPLA proprietary
                 software package.

RESETUP          User can restart a case with modified parameters.

MODIFY           User generates blocks of input data stored in
                 annotated files that are subsequently used to
                 edit 'NAME'.SEG files, thereby permitting extensive
                 modifications of a case without setting the whole
                 thing up interactively.

HELP4            Processor for printing user-chosen portions of HELP
                 file.  The HELP information is stored in BOSOR4.HLP.
======================================================================

There are several BOSOR4 procedures, as listed below:

=======================================================================
PROCEDURE NAME                   PURPOSE OF PROCEDURE
-----------------------------------------------------------------------

INPUT.COM              Data are called for interactively. Files
                       NAME.SEGn are generated for later concatenation
                       via  ASSEMBLE.

ASSEMBLE.COM           Concatenates 'NAME'.SEGn files, n = 1,NSEG+1,
                       into 'NAME'.ALL file.

BOSORALL.COM           Initiates batch run of BOSOR4 preprocessor,
                       mainprocessor, and postprocessor.

BOSORPLOT.COM          Initiates batch run of BOSOR4 plot file
                       generator.

RESTART.COM            Initiates batch run of BOSOR4 mainprocessor and
                       postprocessor for continuation of case started
                       in a previous run.

GETSEGS.COM           A procedure for splitting the 'NAME'.DOC file
                      into 'NAME'.SEGN files, N = 1, 2, 3,...(NSEG+1).
                      the command to give is  GETSEGS.  Make sure you
                      have a good 'NAME'.DOC file before you do this.
                      GETSEGS is especially useful if you want to add or
                      re-order the segments or do some editing on the
                      segment level.

MODIFY.COM            Modifies NAME.SEGn file in accordance with
                      interactive input from user.  After interactive
                      session, user can have the new NAME.SEG file
                      checked via the utility INPUT.

CLEANUP.COM            In the process of running a case, you may want
                       to start over. You can clear out old files with
                       the name 'NAME'.*;* and re-establish a new
                       'NAME'.ALL file. The 'NAME'.DOC file is used to
                       to do this, so make sure you have a good
                       'NAME'.DOC file before you give this command.

GETLIB.COM             Assembles object files into a compact library.

=====================================================================
*********************************************************************

IX   LINKING THE BOSOR4 PROCESSORS.....

In order to create absolute elements (EXE) of the processors just
listed, it is necessary to give linking commands.  The correspondence
between the processors and the linking commands are listed below:

=====================================================================
PROCESSOR NAME                      LINKING COMMAND
---------------------------------------------------------------------
ASSEMBLE                             @LINKASSEMBLE
MODIFY                               @LINKMODIFY
INPUT                                @LINKINPUT
GETSEGS                              @LINKGETSEGS
RESETUP                              @LINKRESETUP
BOSORREAD                            @LINKBREAD,   @LINKBREADVAX
BOSORMAIN                            @LINKBMAIN,   @LINKBMAINVAX
BOSORPOST                            @LINKBPOST,   @LINKBPOSTVAX
BOSORPLOT                            @LINKPLOT
HELP4                                @LINKHELP
=======================================================================

NOTE: For operation on VAX/VMS, use @LINKBREADVAX, @LINKBMAINVAX, and
      @LINKBPOSTVAX. For operation on other computers, use @LINKBREAD,
      @LINKBMAIN, and @LINKBPOST. 

**********************************************************************

X   LIST OF SAMPLE CASES....

There are cases enough to test each type of analysis (INDIC). The file
names and definitions are listed below:

=======================================================================
FILE NAME    INPUT/OUTPUT     INDIC         TYPE OF ANALYSIS
-----------------------------------------------------------------------

 CASE.1        input            1      linear bifurcation buckling
 CASE1.OUT     output                  with axisymmetric prebuckling
                                       analysis.  One restart is
                                       included. "Live" load effect is
                                       important for 2 circumferential
                                       waves. A ring-type structure is
                                       modelled as three shell segments
                                       with external pressure acting
                                       on the outer cylindrical seg.

 CASE.2        input            1      Same physical structure as Case
 CASE2.OUT     output                  1, except this time the two
                                       cylindrical segments (inner and
                                       outer flanges) are modelled as
                                       discrete rings and only the web
                                       is modelled as a shell. The
                                       external pressure is replaced by
                                       an inward acting radial line
                                       load, its value equal to the
                                       external pressure times the
                                       axial length (.453) of the outer
                                       flange. For n = 2 circ. waves
                                       live load effects are important.
                                       Eigenvalues agree with those of
                                       Case 1, as they should.

 CASE.3        input            0      nonlinear axisymmetric stress.
 CASE3.OUT     output           0      
 
 CASE.3A       input            0      nonlinear axisymmetric stress.
 CASE3A.OUT    output           0      Same as CASE.2, except that the
                                       identical flat plate is modelled
                                       as if it were composed of two
                                       layers of composite material.
                                       Stresses are calculated thru
                                       the thickness at all nodes.

 CASE.4        input            3      linear nonsymmetric stress.
 CASE4.OUT     output           3     

 CASE.5        input            2      modal vibration.
 CASE5.OUT     output           2  

 CASE.6        input            4      linear bifurcation buckling with
 CASE6.OUT     output           4      nonsymmetric linear prebuckling
                                       stress analysis.
                                       Nonsymmetric thermal loading
                                       Nodal points concentrated near
                                       segment ends.

 CASE.7        input           -2      bifurcation buckling with 
 CASE7.OUT     output          -2      nonlinear prebuckling, in which
                                       the load is increased in steps
                                       until an eigenvalue is detected.

 CASE.8        input            3      Response of long cylinder to
 CASE8.OUT     output           3      lateral harmonic excitation at
                                       its base. The harmonic excita-
                                       tion is at a very low frequency
                                       in order to check that deflec-
                                       tion is correct for a static
                                       lateral inertial load of 2 g's.

 CASE.9        input            2      Response of long cylinder to
 CASE9.OUT     output           2      lateral excitation at resonance.
                                       An initial modal vibration run
                                       and two RESTARTS are demonstrated.

 CASE.9A       input            2      In the first RESTART the
 CASE9A.OUT    output           2      response to random excitation
                                       including buckling are calculated.

 CASE.9B       input            2      In the second RESTART the
 CASE9B.OUT    output           2      response to harmonic excitation
                                       including buckling are calculated.
                                       CASE.9A and CASE.9B represent some
                                       of the new BOSOR4 capability.

 CASE.10       input            3      Flat plate; linear; "torus" model
 CASE10.OUT    output           3      Demonstrates input/output for
                                       "torus" model.
=======================================================================

In order to run any of the cases listed above, go to the subdirectory
where you want to launch the run from. Copy one of the input "decks"
CASE.n to a file called NAME.ALL, in which NAME is any name you want,
and give the commands BOSOR4LOG and BOSORALL.



**********************************************************************

XI   CONVERTING BOSOR4 FOR OPERATION ON OTHER THAN VAX MACHINES....

Late in August, 1985, and in March, 1986, 
several changes were made to BOSOR4 which should
make it rather easy to convert to computers other than VAX. Many of the
VAX procedures were greatly simplified and/or replaced by short FORTRAN
programs; a FORTRAN version of SUBROUTINE GASP was written to permit
replacement of the VAX version, which is partially written in VAX 
assembly language; the library called PROMPTER.NEW was updated to get
rid of some old nonstandard FORTRAN; replacement routines for
plotting were written for use on machines other than VAX; The file
name structure (formerly of the type NAME.SEG;n) was changed (now of
the type NAME.SEGn) to render BOSOR4 easy to convert to UNIX operating
systems.  Much, but not all, of these changes were tested by conversion
of BOSOR4 to a microcomputer, the SUN workstation.  BOSOR4 runs on the
SUN in every respect except for the plotting. 

Directions for
conversion from VAX/VMS to a UNIX-based system are given in the file
B4UNIX.DOC.  Please consult that file for conversion of BOSOR4 to any
other computer or any other operating system than VAX/VMS.

The procedures required to run the various BOSOR4 processors on the SUN
are listed in the file B4UNIX.COM  (*.COM, *.BAT, and MAKEFILE decks are
listed there.)

Please let me (David Bushnell, (415) 424-3237) know what difficulties
you had with conversion. It is likely that I will thereby be able
further to modify BOSOR4 to make future conversions easier.

************************************************************************

XII  EXAMPLE OF PART OF AN INTERACTIVE SESSION....

The following several pages demonstrate the interactive input
for part of CASE 4.  Several instances of the use of the HELP
mode are shown.  The interactive program would be a lot less
"chatty", of course, if the user were familiar with BOSOR4 and
therefore did not have to respond to calls for input data with 
"H(ELP)".

SAMPLE OF INTERACTIVE INPUT FOR BEGINNING OF CASE 4

$Are you correcting an existing file?=NO
$Have any data already been provided by you for this case?=NO


 START READING DATA FOR THIS CASE
 BOSOR4 INPUT DATA, INTERACTIVE MODE                              
                                                                  
                                                                  
 Initial prompts are short, and may contain data names a new      
 user is not familiar with.  Please type HELP or H instead of     
 any datum called for, and you will get more information on that  
 datum.                                                           
                                                                  
 Page numbers contained in some of the prompts refer to the       
 article: "BOSOR4--Program for stress, buckling, and vibration    
 of complex shells of revolution," STRUCTURAL MECHANICS           
 SOFTWARE SERIES--VOL. I, (N. Perrone & W. Pilkey, eds.),         
 University Press of Virginia, 1977, pp. 11-143.  This is a       
 user's manual that contains additional discussion and figures.   
                                                                  


 Please provide a title (42 characters or less)...

 CYLINDER WITH THREE POINT LOADS

$INDIC = analysis type indicator=HELP
                                                                  
  0= nonlinear axisymmetric stress (and collapse) analysis,       
 -2= stability determinant calculated for increasing load,        
 -1= bifurcation buckling with nonlinear prebuckling analysis,    
  1= bifurcation buckling with "linear"  prebuckling analysis;    
     (Actually the prebuckling analysis is the same as for        
      INDIC = -1.  However, the applied load is never changed     
      during a case.  Linear behavior is exhibited as long as     
      the user applies a load that is very small compared to      
      the design load.)                                           
                                                                  
  2= modal vibration with axisymmetric nonlinear prestress.       
  3= linear nonsymmetric stress analysis;                         
     (Note that the maximum number of circumferential harmonics   
      has been increased from 20 to the following:                
                                                                  
        NHARM MAX.  = MIN [90, 1250/NSEG]                          
                                                                  
      in which NSEG is the number of shell segments.)             
                                                                  
  4= bifurcation buckling with linear nonsymmetric prebuckling.   
                                                                  
$INDIC = analysis type indicator=3
$NPRT = output options (1=minimum, 2=medium, 3=maximum)=1
$ISTRES= output control ( 0 = resultants,  1 = stresses)=1
$NSEG  = number of shell segments (less than 195)=1
$NSTART= starting number of circ. waves (lin. stress analysis)=HELP
                                                                  
 BOSOR4 is valid for both positive and negative values of the     
 circumferential wave number, n.  For positive n the normal       
 displacement w varies around the circumference as sin(n*theta),  
 whereas for negative n,  w varies as cos(n*theta).  The table    
 below shows how other variables and loads vary with + or - n:    
 =============================================================    
 VARIABLES   DEFINITION OF VARIABLES  CIRCUMFERENTIAL VARIATION   
                                        zero or      zero or      
                                        pos. n       neg. n       
 --------------------------------------------------------------   
    u      meridional displacement   sin(n*theta)  cos(n*theta)   
    v      circumferential disp.     cos(n*theta)  sin(n*theta)   
    w      normal outward disp.      sin(n*theta)  cos(n*theta)   
    V      axial line load           sin(n*theta)  cos(n*theta)   
    S      shear line load           cos(n*theta)  sin(n*theta)   
    H      radial line load          sin(n*theta)  cos(n*theta)   
    M      meridional moment         sin(n*theta)  cos(n*theta)   
  TNR,TMX,TMY  thermal line loads    sin(n*theta)  cos(n*theta)   
   PT      meridional traction       sin(n*theta)  cos(n*theta)   
   PC      circumfer. traction       cos(n*theta)  sin(n*theta)   
   PN      normal pressure           sin(n*theta)  cos(n*theta)   
    T      temperature               sin(n*theta)  cos(n*theta)   
  ==============================================================  
$NSTART= starting number of circ. waves (lin. stress analysis)=0
$NFIN  = ending number of circ. waves (linear stress analysis)=HELP
                                                                  
 NOTE...The number of circumferential harmonics, NHARM, is        
 given by   NHARM = IABS(NSTART-NFIN)/IABS(INCR) + 1  . The       
 maximum permitted is:                                            
   NHARM MAX. = MIN [90, 1250/NSEG]                                
 INCR is the increment or decrement in the number of circ. waves.
                                                                  
$NFIN  = ending number of circ. waves (linear stress analysis)=-57
$INCR  = step in number of circ. waves (linear stress)=-3
$THETAM= range of circumferential Fourier expansion & output=H
                                                                  
 circumferential distributions printed and plotted for            
 0 < THETA < THETAM.                                              
                                                                  
 Loads expanded in Fourier series over -THETAM<THETA<+THETAM      
                                                                  
 THETAM is usually equal to 180 deg. Must be .LE. 180 deg.        
                                                                  
$THETAM= range of circumferential Fourier expansion & output=60
$Have the data for all of the segments been provided by you?=NO
$What segment number is this? (provide in increasing order)=1


 PLEASE PROVIDE DATA FOR SEGMENT NO.  1

                                                                  
 The following input must be provided by you for each             
 shell segment.  See p. 61 for a list of the types of             
 input data required.                                             
                                                                  
$NMESH = number of node points (5 = min.; 98 = max.)( 1)=HELP
                                                                  
 See p. 62-64 for additional information on the
 number and on the distribution of nodal points.
 The max. total number of nodal points in the BOSOR4
 model is 5000.
 Note that the maximum number of degrees of freedom (d.o.f.) for
 the entire structure is limited to 10000 for the axisymmetric
 nonlinear analysis, in which only u and w are present as
 unknowns, and 15000 for buckling, vibration, or linear
 nonsymmetric stress analysis, in which u, v, and w are
 present as unknowns.  Formulas for the number of d.o.f.
 appear on page 62 and are repeated here as follows:
 For axisymmetric analysis the total number of d.o.f. are:        
                                                                  
 d.o.f.= 3*NSEG + 3*NCOND + SUM OVER NSEG [ (NMESH(ISEG)+2)*2 ]   
                                                                  
 For nonaxisymmetric analysis:                                    
                                                                  
 d.o.f.= 4*NSEG + 4*NCOND + SUM OVER NSEG [ (NMESH(ISEG)+2)*3 ]   
                                                                  
 in which NSEG = number of segments; NCOND = number of boundary   
 plus junction points; NMESH(ISEG) = number of nodes in Seg. ISEG 
                                                                  
$NMESH = number of node points (5 = min.; 98 = max.)( 1)=52
$NTYPEH= control integer (1 or 2 or 3) for nodal point spacing=H
                                                                  
  NTYPEH = 1 or 2 means variable spacing (use 1 rather than 2);   
  NTYPEH = 3 means constant spacing.                              
 EXAMPLE....                                                      
 Suppose you have a segment with NMESH = 50, and you wish         
 to concentrate nodal points at the beginning of the segment.     
 The following input data could be used...                        
 =================================================                
   DATUM          NAME OF DATUM          MEANING                  
 -------------------------------------------------                
   50                NMESH       number of nodes                  
    1                NTYPEH     (variable spacing)                
    4                NHVALU      number of callouts               
    1                IHVALU(1)    callout node no.                
   20                IHVALU(2)    callout node no.                
   21                IHVALU(3)    callout node no.                
   49                IHVALU(4)    callout node no.                
  0.1                HVALU(1)     callout spacing                 
  0.1                HVALU(2)     callout spacing                 
  1.0                HVALU(3)     callout spacing                 
  1.0                HVALU(4)     callout spacing                 
 ==================================================               
$NTYPEH= control integer (1 or 2 or 3) for nodal point spacing=H
                                                                  
 In the above example IHVALU(i) are the nodal point callouts      
 for nodal point spacing and HVALU(i) are the spacings between    
 the callout and the next node.  Absolute values of the           
 spacings are not required; only relative values are needed,      
 such round numbers as 0.1, 1.0, or 0.2.  In BOSOR4 it is best    
 to keep the spacing constant over many nodes and then change     
 it abruptly, as is done in the above example, rather than to     
 vary the spacing gradually over many nodes.                      
                                                                  
$NTYPEH= control integer (1 or 2 or 3) for nodal point spacing=1
$NHVALU= number of callouts for nodal point spacing=H
                                                                  
 Minimum value of NHVALU is 2; maximum value is 50.               
 You must include the first node as a callout point and           
 the second-to-last node as a callout point.                      
 See p. 64 for an example with variable spacing.                  
                                                                  
$NHVALU= number of callouts for nodal point spacing=4
$IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 1)=H
                                                                  
 IHVALU(1) must be 1 and IHVALU(NHVALU) must be NMESH-1.          
 Spacing will vary linearly between the callouts you provide.     
                                                                  
$IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 1)=1
$IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 2)=10
$IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 3)=11
$IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 4)=51
$HVALU=meridional arc length between nodal points,HVALU( 1)=H
                                                                  
 This is the arc length between the nodal point corres-           
 ponding to the callout and the next nodal point.                 
 Absolute values are not required; only relative values           
 are needed, such round numbers as 1.0, 0.5, and the like.        
 BOSOR4 will automatically expand or contract the total           
 arc length to match that generated in the geometry               
 routines later.                                                  
                                                                  
$HVALU=meridional arc length between nodal points,HVALU( 1)=1
$HVALU=meridional arc length between nodal points,HVALU( 2)=1
$HVALU=meridional arc length between nodal points,HVALU( 3)=.5
$HVALU=meridional arc length between nodal points,HVALU( 4)=.5
                                                                  
Geometry of the current segment...
$NSHAPE= indicator (1,2 or 4) for geometry of meridian=H
                                                                  
 See p.66 for illustrations...                                    
 NSHAPE = 1 means cylinder, cone, or plate                        
 NSHAPE = 2 means spherical, toroidal, or ogival                  
 NSHAPE = 3 not used                                              
 NSHAPE = 4 means ellipsoidal or general shape (use with          
            caution. If possible build up a complex shape         
            with use of NSHAPE = 1 and NSHAPE = 2 segments.       
                                                                  
$NSHAPE= indicator (1,2 or 4) for geometry of meridian=1
$R1     = radius at beginning of segment (see p. 66)=100.5
$Z1     = axial coordinate at beginning of segment=0
$R2     = radius at end of segment=100.5
$Z2     = axial coordinate at end of segment=240
                                                                  
 Imperfection geometry....                                        
$IMP   = indicator for imperfection (0=none, 1=some)=0
$NTYPEZ= control (1 or 3) for reference surface location=H
                                                                  
 NTYPEZ = 1 means that the distance from the shell wall           
 leftmost surface to the reference surface varies along           
 the meridian.  By "leftmost" we mean as we face in the           
 direction of increasing meridional arc length, s.  See           
 the figure at the bottom of p. 66.                               
                                                                  
 NTYPEZ = 3 means that the distance from  the  leftmost           
 surface of the wall to the reference surface is const-           
 ant as we proceed along the meridian, s.                         
                                                                  
$NTYPEZ= control (1 or 3) for reference surface location=3
$ZVAL  = distance from leftmost surf. to reference surf.=H
                                                                  
 See the figures at the bottom of p. 66 and the top of            
 p. 68.                                                           
                                                                  
$ZVAL  = distance from leftmost surf. to reference surf.=.5
$Do you want to print out r(s), r'(s), etc. for this segment?=Y
$NRINGS= number (max=20) of discrete rings in this segment=H
                                                                  
 Up to 20 rings are permitted in one segment; up to 198            
 rings in the entire structure.  If line loads are                
 applied at some station, the user must supply a fake             
 ring, even if no ring is actually present in the struct-         
 ure at that point.  This is because all line loads are           
 considered to act at discrete ring centroids.                    
                                                                  
$NRINGS= number (max=20) of discrete rings in this segment=1
$NTYPE = control for identification of ring location (2=z, 3=r)=H
                                                                  
 NTYPE = 2 means that locations of discrete rings will be         
 identified by axial coordinates, z(i), i= 1, NRINGS;             
                                                                  
 NTYPE = 3 means that locations of discrete rings will be         
 identified by radial coordinates, r(i), i=1, NRINGS.             
                                                                  
$NTYPE = control for identification of ring location (2=z, 3=r)=2
$Z(I)  = axial coordinate of Ith ring, z( 1)=240
$NTYPER= type (0 or 1 or 2 or 4 or 5) of discrete ring no.( 1)=H
                                                                  
 0 means fake ring, needed as a place to "hang" a line load       
 1 means read in E, A, Iy, Ix, Ixy, E1, E2, GJ, RM (see p.70)     
 2 means read in E, A, Is, In, Isn, ZC, SC, GJ, RM (see fig.)     
 3 do not use                                                     
 4 means read L(1), L(2), L(3),  T(1), T(2), T(3)                 
              E, NU, X1P, Y(1), Y(2), Y(3), and RM (see p.72)     
 5 means read same quantities, but in the (s,n) rather than       
   in the (x,y) axis system (see bottom of p. 70 for the two      
   axis systems.)                                                 
                                                                  
$NTYPER= type (0 or 1 or 2 or 4 or 5) of discrete ring no.( 1)=1
$E     = Young's modulus of ring( 1)=5400000.
$A     = cross section area of ring( 1)=3
$Iy    = moment of inertia about y-axis (see fig. on p.70)( 1)=2.25
$Ix    = moment of inertia about x-axis( 1)=.25
$Ixy   = product of inertia( 1)=0
$E1    = radial component of ring eccentricity (see p. 70)( 1)=2
$E2    = axial  component of ring eccentricity( 1)=0
$GJ    = torsional rigidity( 1)=1639000.
$RM    = ring material density (e.g. aluminum=.0002535)( 1)=H
  There is no more help. Do your best.
$RM    = ring material density (e.g. aluminum=.0002535)( 1)=0
$K=elastic foundation modulus (e.g. lb/in**3)in this seg.=0
                                                                  
 The following input is related to loading of this                
 segment.  Please see pp. 73-77 for discussion and                
 definitions. Also, you may wish to review pp. 58-60.             
 There is more discussion in the "pitfalls" section               
 on pp. 120-123.                                                  
                                                                  
 There are four classes of loads:                                 
 a. mechanical line loads, applied at centroids of rings;         
 b. thermal line loads at discrete rings;                         
 c. pressure and tractions distributed over the surface;          
 d. temperature distribution through thickness and over           
    surface.                                                      
                                                                  
 In connection with mechanical line loads and/or imposed          
 displacement components, the word "load" is used to mean         
 either an imposed load or an imposed displacement.               
                                                                  
$LINAB= indicator (0, 1, 2 or 3) for load set A and B=1
                                                                  
 Next, provide input for line loads in load set A.                
 (loads that are to be multiplied by the eigenvalue)...           
                                                                  
$LINTYP= indicator (0, 1, 2 or 3) for type of line loads=H
                                                                  
 0 means none                                                     
 1 means mechanical line loads only;                              
 2 means thermal line loads only;                                 
 3 means both mechanical and thermal line loads.                  
                                                                  
 Note that if LINTYP is greater than 0 there must be              
 discrete rings on which to "hang" the line loads.                
                                                                  
 Line loads are assumed to act at the centroids of discrete       
 rings.  They are positive as shown on page 74, bottom.  With     
 n = 0 or n = +1 or n = -1 circumferential waves, the user        
 must make sure either that these harmonics of the loads are      
 in static equilibrium or that the constraint conditions          
 prevent rigid body displacements.  The user need not provide     
 input for line load reactions, which do no work during           
 deformations.                                                    
                                                                  
$LINTYP= indicator (0, 1, 2 or 3) for type of line loads=1
$NLTYPE= control integer (0, 1, 2, 3) for type of loading=

       etc.



ANNOTATED FILE THAT RESULTED FROM THE ABOVE INTERACTIVE SESSION...

The following list contains the input data and documentation for it
that resulted from the interactive session listed in the previous
several pages.  This represents the file 'NAME'.SEG1 that has been
generated so far.  The data listed below become part of the BOSOR4
input "deck", 'NAME'.ALL, that is generated after all interactive work
has been completed and the command " ASSEMBLE" has been given.

ANNOTATED FILE, 'NAME'.SEG1, GENERATED BY THE INTERACTIVE RUN ABOVE

 CYLINDER WITH THREE POINT LOADS                                        
         3      $ INDIC = analysis type indicator
         1      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         1      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
         1      $ NSEG  = number of shell segments (less than 195)
         0      $ NSTART= starting number of circ. waves (lin. stress analysis)
       -57      $ NFIN  = ending number of circ. waves (linear stress analysis)
        -3      $ INCR  = step in number of circ. waves (linear stress)
        60      $ THETAM= range of circumferential Fourier expansion & output
      H         $
      H         $ SEGMENT NUMBER    1    1    1    1    1    1    1    1
        52      $ NMESH = number of node points (5 = min.; 98 = max.)( 1)
         1      $ NTYPEH= control integer (1 or 2 or 3) for nodal point spacing
         4      $ NHVALU= number of callouts for nodal point spacing
         1      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 1)
        10      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 2)
        11      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 3)
        51      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 4)
         1      $ HVALU=meridional arc length between nodal points,HVALU( 1)
         1      $ HVALU=meridional arc length between nodal points,HVALU( 2)
  0.5000000     $ HVALU=meridional arc length between nodal points,HVALU( 3)
  0.5000000     $ HVALU=meridional arc length between nodal points,HVALU( 4)
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   100.5000     $ R1     = radius at beginning of segment (see p. 66)
         0      $ Z1     = axial coordinate at beginning of segment
   100.5000     $ R2     = radius at end of segment
       240      $ Z2     = axial coordinate at end of segment
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
         1      $ NRINGS= number (max=20) of discrete rings in this segment
         2      $ NTYPE = control for identification of ring location (2=z, 3=r)
       240      $ Z(I)  = axial coordinate of Ith ring, z( 1)
         1      $ NTYPER= type (0 or 1 or 2 or 4 or 5) of discrete ring no.( 1)
   5400000.     $ E     = Young's modulus of ring( 1)
         3      $ A     = cross section area of ring( 1)
   2.250000     $ Iy    = moment of inertia about y-axis (see fig. on p.70)( 1)
  0.2500000     $ Ix    = moment of inertia about x-axis( 1)
         0      $ Ixy   = product of inertia( 1)
         2      $ E1    = radial component of ring eccentricity (see p. 70)( 1)
         0      $ E2    = axial  component of ring eccentricity( 1)
   1639000.     $ GJ    = torsional rigidity( 1)
         0      $ RM    = ring material density (e.g. aluminum=.0002535)( 1)
  0.0000000E+00 $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
         1      $ LINAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads

             etc.

**********************************************************************

XIII RECOMPILING, REGENERATING LIBRARIES, RE-LINKING

 HOW TO RECOMPILE AND RELINK BOSOR4 ELEMENTS

 RECOMPILE:

 BOSOR4 is divided into a number of source code libraries, as follows:

  ARRAYS.NEW;2    
  ASSEMBLE.NEW;4  
  B4MAIN.NEW;1
  B4POST.NEW;1 
  B4READ.NEW;6
  BPLOTC.NEW;1
  BPLOTD.NEW;1
  BPLOTT.NEW;1    
  BUCKLE.NEW;6  
  FELIPPA.NEW;1   
  GASPOLD.NEW;1   
  GEOM.NEW;2    
  GETSEGS.NEW;2    
  HELP4.NEW;1    
  INPUT.NEW;5  
  MODE.NEW;4   
  MODIFY.NEW;4  
  PLOT.NEW;1    
  PRE.NEW;1     
  PROMPTER.NEW;8    
  QUESTIONS.NEW;6 
  READFF.NEW;1     
  RESETUP.NEW;3   
  RFIVE.NEW;1  
  RZLG.NEW;6   
  STOGET.NEW;2  
  UTIL.NEW;14
  WALL.NEW;7  

 If you receive notice of a bug, or if you wish to modify the
 BOSOR4 source code for any reason, then you do the following:

 1. Edit the appropriate source code library, using standard
    editing procedures.

 2. Compile the library: $FOR NAME.NEW  in which NAME is one of
    the library names listed above.

 3. After successful compilation, give the command: @GETLIB
    The GETLIB procedure is as follows:
      $! This procedure establishes a compressed library from a
      $! file of object decks and deletes the object file.
      $!
      $     INQUIRE  P1  "GIVE NAME OF LIBRARY FILE"
      $     LIB/CREATE  'P1'.OLB  'P1'.OBJ
      $     LIB/COM     'P1'.OLB
      $     COPY        'P1'.OLB  *.*
      $     PURGE       'P1'.OLB
      $     DELETE      'P1'.OBJ;*

    When GETLIB asks for the name of the library file, type the
    appropriate name from the list given above (e.g. STRUCT).

 4. When the NAME.OLB file has been successfully generated, and
    after you have done all your recompilations, give the appropriate
    linking command or commands. The various linking procedures in the
    BOSOR4 system are as follows:

      LINKASSEMBLE.COM;1     
      LINKBMAIN.COM;3        
      LINKBMAINVAX.COM;3   
      LINKBPOST.COM;2     
      LINKBPOSTVAX.COM;2    
      LINKBREAD.COM;2     
      LINKBREADVAX.COM;2     
      LINKGETSEGS.COM;1   
      LINKHELP.COM;1      
      LINKINPUT.COM;1   
      LINKMODIFY.COM;1    
      LINKPLOT.COM;3          
      LINKRESETUP.COM;1   

  EXAMPLE:

    $FOR ARRAYS.NEW
    $@GETLIB
     GIVE NAME OF LIBRARY FILE:  ARRAYS
    $@LINKBMAINVAX
    $PURGE *.EXE

 **********************************************************************
