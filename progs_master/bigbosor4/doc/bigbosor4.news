              NEW BOSOR4 CAPABILITIES....

1983-1984 ENHANCEMENTS:

(1)  Up to 95 segments, 98 discrete rings, 2000 d.o.f. in the pre-
buckling problem and 3000 d.o.f. in the bifurcation buckling, vibration
and nonsymmetric stress problems can now be handled. Formerly the
maximum values were 25 segments, 50 discrete rings, 1000 d.o.f. and
2000 d.o.f., respectively.

(2)  Two load sets, called "LOAD SET A" and "LOAD SET B", are now
handled in buckling problems.  LOAD SET A is considered to be
multiplied by the eigenvalue whereas LOAD SET B is considered to be
constant.  Both load sets "A" and "B" can have different variations in
the meridional and circumferential coordinate directions.

(3)  BOSOR4 cases can be restarted.  There are two modes of restart:

   (a) A given type of analysis (given INDIC) can be continued in a
       series of runs.

   (b) The restart capability is used to determine response of
       structures to base excitation. 

(4) Up to 90 circumferential harmonics can now be handled in a
nonsymmetric stress analysis (INDIC = 3).  Actually the maximum number
of circumferential harmonics is

    NHARM MAX. = MIN [ 90, 1250/NSEG ]

where NSEG is the number of structural segments in the BOSOR4 model.

(5) BOSOR4 now includes the capability to handle
    (a) constant rotation OMEGA about the axis of revolution(any INDIC)

    (b) steady-state response to harmonic excitation at an angular
        frequency OMEGDR. The harmonic excitation may be applied as
        any combination of loads acting on a stationary structure or
        as support motion.  If the user specifies support excitation,
        he is asked to provide the number of g's lateral and axial
        components applied to the support(s). (INDIC = 3 or 4)

    (c) response to base excitation as follows:

         (i) harmonic excitation at a series of natural frequencies
        (ii) random excitation
       (iii) shock  excitation

       Depending on which analysis type i, ii, or iii the user is
       asked to provide load factors, damping factors, and spectral
       densities as functions of the frequency. The analysis here is
       different from that of (b) in that (b) is not valid for
       response at resonance, whereas (c) estimates the response
       based on behavior at the resonances only.

       For more information on response to base excitation, go to
       the file PROMPT3.DAT and search for "750". Read the "help"
       paragraphs in PROMPT3.DAT from 750 to 820. (This material is
       repeated here for your convenience. Also, it appears in the
       file bosor4.story.

========== more information of transient response to base excitation =======
BOSOR4 will do transient response to base excitation. The explanation is
provided in certain "help" paragraphs in the PROMPT3.DAT file...

            Section of the file ../bosor4/execute/PROMPT3.DAT
            That deals with response to base excitation...
=========================================================================
750.1 Do you want response at resonance to base excitation?
750.2  
      You can type Y only if you have just run an INDIC = 2
      (modal vibration case) with n = 0 only or n = 1 only. (n is
      the number of circumferential waves.)  This program estimates
      the response by RSS (square root of the sum of the squares).
      The sum is over the number of modes calculated in the previous
      (INDIC = 2) run.  This program will handle
      response to harmonic excitation, response to random excitation,
      and response to shock. You will be asked to provide input data
      such as load factor (number of g's acceleration), damping
      factor, and/or spectral density.

770.0  
      To use this branch you must just have run a modal vibration
      analysis for a single number of circumferential waves: either
      n = 0 or n = 1. The purpose here is to find the response of the
      structure to either:

      1. sinusoidal excitation    or

      2. random excitation        or

      3. shock

780.1 Want more information?
790.0  

      There are four kinds of information that must be supplied
      in order to perform all of the three types of analysis just
      listed:

      a.  gravity in the units of this case (e.g. 386.4 in/sec**2)

      b.  a table of load factors or shock levels (g's) vs.
          frequency in hertz:                               [N = N(f)]

      c.  a table of damping factor vs. frequency in hertz: [B = B(f)]

      d. a table of spectral density vs. frequency in hertz:[W = W(f)],
         in which W is in units of g's-squared-per-hertz (N**2/hertz).

      For harmonic excitation you must supply a., b., and c.
      For random   vibration  you must supply a., c., and d.
      For shock    response   you must supply a. and b.

800.1 Want more information?
810.0
      Suppose you calculated the first five vibration frequencies
      and modes for n = 1 circumferential wave in your previous run,
      call it run no. 1.  Suppose you now want to calculate the
      response to random excitation.  In the present run, call it
      run no. 2, the state of the shell from random lateral or
      axial excitation [no rotational excitation (pitching)
      allowed!] is estimated by superposition of quantities
      calculated for each resonance:

       w(response) = SQRT{ sum from 1 to 5 of [m(i)*P(i)*phi(i)]**2 }

      in which m(i) is a frequency-dependent multiplier,
      P(i) is a modal participation factor, and phi(i) is the ith
      vibration mode, including modal stresses derived from
      appropriate differentiations of the modal displacements.
      For response to harmonic excitation, each mode is treated
      separately; the responses from the various modes are not
      superposed.

812.1 Want more information?
813.0  
      For all of the three types of analysis listed above an
      amplitude factor is derived which is a product of the
      modal participation factor, P(i), and the multiplier, m(i).
      The frequency-dependent multiplier, m(i), is given for each
      of the three analysis types by:

      For harmonic excitation (analysis type 1):

        m(i) = N(i)*g/[OMEGA**2*BETA(i)]

      For random excitation   (analysis type 2):

        m(i) = SQRT[OMEGA*SPECD/(2*BETA)]*g/OMEGA**2

      For shock response      (analysis type 3):

        m(i) = 2*N(i)*g/OMEGA**2

      [ N(i)=load factor, g = acceleration of gravity,
        OMEGA=freq.(rad/sec), BETA=damping, SPECD=spectral density]

815.1 Type of response analysis (1 or 2  or 3)
815.2  
      1 means response to sinusoidal excitation
      2 means response to random excitation
      3 means response to shock

820.1 Value of acceleration of gravity in the units of this case
830.0  
      Next, provide number of g's (N) vs. frequency (f) in hertz.
      If N varies with f, make sure that the data span the range of
      frequencies for which you calculated vibration modes in your
      previous INDIC = 2 run.

      NOTE: MAXIMUM OF 20  (N,f)  PAIRS IS ALLOWED.

840.1 Does N (no. of g's) vary with f (frequency)?
850.1 Number of g's, N
860.1 Frequency, f, corresponding to N
870.1 Want more entries in the N = N(f) table?
880.0  
      Next, provide damping factor (B) vs. frequency (f) in hertz.
      NOTE: MAXIMUM OF 20  (B,f)  PAIRS IS ALLOWED.

890.1 Does B (damping factor) vary with f (frequency)?
900.1 Damping factor, B
910.1 Frequency, f, corresponding to B
920.1 Want more entries in the B = B(f) table?
930.0  
      Next, provide spectral density (W) vs. frequency (f) in hertz.
      NOTE: MAXIMUM OF 20  (W,f)  PAIRS IS ALLOWED.

940.1 Does W (spectral density) vary with f (frequency)?
950.1 Spectral density (N**2/hertz), W
960.1 Frequency, f, corresponding to W
970.1 Want more entries in the W = W(f) table?
980.1 Do you want to find buckling load factors?
982.0  
      For horizontal (lateral) base motion, maximum compressive
      stress resultants are either at circumferential coordinate
      THETA = 0 degrees or THETA = 180 degrees. Print out meridional
      distributions of prebuckling membrane resultants along both the
      meridian at THETA = 0 deg. and at THETA = 180 deg; then decide
      which meridian to choose for the buckling analysis.  It may be
      a good idea to do buckling analyses corresponding to the stress
      states at both THETA = 0 and THETA = 180 deg.

===== end of information about transient response to base excitation ========
===== that is contained in the ...bosor4/execute/PROMPT3.DAT file  =========


(6)  The user can now call for listing and plotting of the strains
and changes in curvature.  This is especially useful if one wishes 
to obtain a comparison with tests or an indication of material
failure for layered shell walls.  Expanded plots of local areas
are included if the user wants them.

(7)  BOSOR4 will now handle cases in which the shell is supported on
an elastic foundation with uniform stiffness (Winkler type) within
each shell segment.

(8)  BOSOR4 will now handle imposed symmetric or nonsymmetric
displacements. One uses the load input.  The program knows that the
input provided in response to questions about loads is actually
displacement input because the user provides 2's instead of 1's in
the boundary condition part of the input.

(9)  A system for automatic editing of BOSOR4 cases has been created.
This system, called MODIFY, is described next:

  GENERATING BLOCKS OF INPUT DATA PERTAINING TO SEVERAL CATEGORIES
      AND AUTOMATICALLY MODIFYING  NAME.SEG  FILES.

It frequently occurs that you have a large case set up and you want to
make modifications that involve data for one or more of the segments
or one or more of the boundary and junction conditions.  You do not
want to have to set up a new case from scratch in the interactive mode.
A utility called MODIFY is now available to permit you to modify certain
data while leaving the rest alone.  MODIFY generates blocks of input
data pertaining to nodal point distribution, meridional geometry,
imperfections, discrete rings, line loads, distributed loads, wall
construction, constraint conditions, and global data. You execute
MODIFY by typing:

        MODIFY

and answering interactively the questions that follow this command.
When an interactive session is finished, a file with a name such as
MESH.QUE, GEOM.QUE, IMPERF.QUE, RINGS.QUE, LINELOADS.QUE, etc will
exist in your subdirectory.  This file is then used by MODIFY to modify
the NAME.SEGn file that you indicate needs modification.  The
following table lists the options that exist for generating blocks
of input data in this manner:

   BLOCKS OF INPUT DATA GENERATED BY USE OF THE UTILITY "MODIFY"
      Generate proper input data for the following categories by
      responding with the appropriate index:
      ===========================================================
      Index     Type of BOSOR input data            File generated
      -----------------------------------------------------------
        1      nodal point distribution in segment       MESH.QUE
        2      shape of meridian of segment              GEOM.QUE
        3      location of reference surface in wall  REFSURF.QUE
        4      initial imperfection shape in segment   IMPERF.QUE
        5      discrete rings in segment                RINGS.QUE
        6      line loads in segment                LINELOADS.QUE
        7      distributed (surface) loads in seg.  DISTLOADS.QUE
        8      wall construction of segment              WALL.QUE
        9      smeared stiffeners in segment          SMEARED.QUE
       10      direct input of prestress            PRESTRESS.QUE
       11      constraint conditions of segment     CONSTRAIN.QUE
       12      rigid body motion prevention         RIGIDBODY.QUE
       13      global parameters at beginning         GLOBAL1.QUE
       14      global parameters after segment data   GLOBAL2.QUE
       15      output indicators                      GLOBAL3.QUE
      =============================================================


MODIFY works because of certain key phrases embedded in the 'NAME'.SEG
files.  These key phrases tell MODIFY where the new data should
be inserted.  Because of this, MODIFY should only be used with NAME.SEG
files that have been generated from a good NAME.DOC file via the
utility GETSEGS. (GETSEGS disassembles the NAME.DOC file into NAME.SEG
files.) MODIFY may not work when you apply it to NAME.SEG files that
have been generated in some shortcut manner, such as by means copying
from other segments or otherwise using the VAX editor to generate
NAME.SEG files.

     SAMPLE RUNSTREAM INCLUDING RESTART AND MODIFICATION OF MODEL..

The runstream listed below illustrates the recommended way of modifying
a case and re-running.  Notice that new NAME.SEG files are obtained
from the NAME.DOC file that was generated during the first successful
pass through the preprocessor BOSORREAD.

    SAMPLE RUNSTREAM  (Set up case, run, restart, modify, run again)
       INPUT             You supply data interactively for segments
       ASSEMBLE          You cause segment data & b.c.'s to be concat.
       BOSORALL          You launch a batch run of the case
       BOSORPLOT         You launch a batch run for plots
       RESETUP           You decide to do more analysis, same model
                         (Interactive input is required from you now.)
       RESTART           You launch a batch run for more analysis on
                         the same model. (example: additional circum-
                         ferential wave numbers for bifurcation buckling)
       BOSORPLOT         You launch batch run for plots

       CLEANUP           Get rid of all NAME.* files except .DOC & .ALL
       GETSEGS           NAME.DOC file is broken down into segment files
       MODIFY            One of the segments is modified in some way
       MODIFY            Another segment is modified (e.g. ring added)
       MODIFY            Same segment is modified again (e.g. more nodes)
       MODIFY            Same segment is modified again (e.g. new loading)
       ASSEMBLE          Segment data are reassembled
       BOSORALL          You launch another batch run for modified model
       BOSORPLOT         You launch a batch run for plots

Note that you do not have to use MODIFY in order to change a case.
However, it is the safest way.  In certain cases, for example, when
you just want to change a dimension, it will doubtless be easier just
to quickly change the NAME.ALL file and then rerun.  However, if you
are at all in doubt, use the CLEANUP - GETSEGS - MODIFY - ASSEMBLE
route.

************************************************************************

1985 ENHANCEMENTS:

(1) BOSOR4 will now calculate d'Alembert loads for free-free shells
subjected to non-self-equilibrating loads. This new capability,
installed 17-21 August, 1985, works as follows:

      If the loads in either Load Set A or Load Set B or both are
      not self-equilibrating, such as is true for a free-free shell
      subjected to a blast load from the side, you may want BOSOR4
      to compute the inertial reactions from the applied loads.
      This BOSOR does in the following way:

       1. BOSOR calculates the total mass, c.g. location, and
          mass moments of inertia of the entire structure.

       2. BOSOR calculates the total forces Fx, Fy, Fz applied at
          the origin of the global X,Y,Z cartesian coordinate
          system, and total moments Mx, My, Mz about these axes.
          The origin of the global X,Y,Z frame is on the axis of
          revolution at Z = 0. Note that in order for the mass
          properties (M, z(c.g.), I(c.g.), Iz) and forces Fx,Fy,Fz
          and moments Mx,My,Mz to be properly calculated you must have
          already provided the geometry of each segment of the
          structure in terms of the global Z coordinate.

       3. Given the six equations for rigid-body dynamics, accelerations
          of the c.g. and angular accelerations about the c.g. are
          calculated.

       4. The components of linear acceleration in the normal,
          meridional, and circumferential directions everywhere in the
          structure are then calculated. These accelerations
          yield inertial loads (F=ma!) that contribute to the line
          loads (from discrete ring inertia) and distributed loads
          corresponding to n = +1, n = 0, and n = -1 circumferential
          waves. The applied line loads, pressures, and surface
          tractions plus the inertial reactions in the n = +1, 0,
          and -1 circumferential harmonics form a self-equilibrating
          load system. (All applied load harmonics with circum-
          ferential waves greater than or equal to 2 are self-
          equilibrating, and therefore do not generate rigid body
          motions.)

       The above steps 2., 3., and 4. are performed for either or both
       Load Set A and/or Load Set B, if you indicate that rigid body
       motion is possible and that you wish dynamic reactions
       (d'alembert forces) to be included for Load Set A and/or for
       Load Set B.

       Please note that the calculations just described are performed
       only for INDIC = 3 or 4.

       Also note: You must of course supply masses for all the
       structural parts, even though you regard this as a statics
       problem.  No mass, no inertial reaction! Remember, the axial
       coordinate input for each segment must be global for this to
       work properly.

(2) As of 21 August, 1985, there is a new wall property routine,
CFB4,  for providing input for laminated, composite shell walls.
The thicknesses in these walls must be constant. The winding angles
of each lamina must also be constant. BOSOR4 will calculate stress
components in each lamina in the material coordinates, which are
oriented along the fibers and perpendicular to the fibers of each
lamina. These lamina stress components are compared to the following
allowables: maximum tension along fibers, maximum compression along
fibers, maximum tension normal to fibers, maximum compression normal
to fibers, and maximum in-plane shear. In the listed output of the
stresses any failures relative to these five allowables are indicated.

Please note that stresses in any layered shell wall with properties
constant along the meridian can be obtained whether or not the wall
is of composite material if you use NWALL = 4 for that segment.

(3) Several of the subroutines in BOSOR4 have been modified to make
it much easier to convert BOSOR4 for operation on a UNIX-based
workstation. In particular, a FORTRAN version of SUBROUTINE GASP is
now included among the source decks. It is called GASP.NEW. The version
of SUBROUTINE GASP used with the VAX VMS version of BOSOR4 is called
GASPOLD.OLD. (GASP transfers data to and from direct access storage.
Parts of GASPOLD are written in VAX assembly language and do block IO.
GASP.NEW is written in FORTRAN. With large cases BOSOR4 runs much
more slowly with GASP.NEW than it does with GASPOLD.OLD.

The PROMPTER.NEW library has been updated to make conversion to
UNIX-based workstations easier.

There is now a source library called PLOT.UNIX which should be used
to get plotting working on UNIX-based systems.
*********************************************************************

1989-1992 BOSOR4 NOW WORKS ON MOST UNIX-BASED WORKSTATIONS AND ON
THE CRAY:

During the past few years the BOSOR4 program has been installed on
several computers, including DEC workstations, Sun workstations, MAC II,
Silicongraphics, Convex, and Cray. Except for MACBOSOR these are all
UNIX versions.  The installations were performed by Bill Bushnell.

**********************************************************************

APRIL - MAY, 1992 BOSOR4 MODIFICATIONS: BOSOR4 was modified to improve
the composite material capability:

  1.  Thermal loading from other than curing was introduced. Now you
      can run cases involving temperature distributions over the
      surface of the structure. 

  2.  A new wall type (NWALL = 9) was introduced. In this branch you
      provide input for laminated composite walls in which one or more
      of the layers can have thickness that varies in the meridional
      direction. (Variation must be axisymmetric, however!) The input
      with NWALL = 9 is similar to that for NWALL = 4.

  3.  BOSOR4 now computes margins corresponding to stresses calculated
      in segments with NWALL = 4 or NWALL = 9. (Composite layups).
***********************************************************************


JANUARY, 1993:  A bug in QUESTIONS.NEW was eliminated.  This bug affected
the way MODIFY worked. Previously, the REREAD feature of a partially
completed *.QUE file sometimes did not work.  The user had to be very
careful not to make a mistake while interactively answering the prompts
during a MODIFY session because the usual BOSOR4 method of correcting
a file did not work in many of the MODIFY branches.  This has been
corrected by changing SUBROUTINE QUEST in the QUESTIONS.NEW file.

JANUARY, 1993: A bug was found in PLOT.NEW. A wrong index was being
used to generate arrays of circumferential variation of von Mises stress
in nonsymmetric (INDIC=3,4) cases.

JANUARY, 1993: A bug was found in MODE.NEW. Occasionally the EBAND2
routine of BOSOR4 fails to converge to an eigenvalue. If this happens,
then no mode is stored.  If the BOSOR4 postprocessor tries to read a
nonexistent mode from the disk, it bombs in GASP because the storage
location identifier (IDMODE or IDMOD2) is zero. SUBROUTINE MODE was
modified to avoid this difficulty.

NOVEMBER, 1995: A BOSOR4 user discovered that he could not easily
provide input for a tori-ellipsoidal tank, that is a toroidal tank with
ellipsoidal end domes. It turns out that the coding for GEOM4, NST = 4
was incomplete. A new input datum was required if NST = 4 and ALPHAT is
greater than XMAX (see p 66 BOSOR4 user's manual). The new input datum
prompt and "help" paragraph explains this BOSOR4 update:
------------------------------------------------------------------
582.1 Do you have a complete tori-ellipsoidal dome?
582.2
      If you answer "Y", BOSOR4 reflects the right-hand portion,
      input for which is depicted on p.66 of the BOSOR4 user's manual,
      over to the left side of the centerline of the dome, and the
      total arc length of the segment becomes double that of the
      segment you just provided geometry input data for. Note that
      you are permitted to answer "Y" only if the dome is closed at
      its apex.

      NOTE: INPUT FOR BOUNDARY AND/OR JUNCTION CONDITIONS MAY BE
            VERY TRICKY DUE TO POSSIBLE AUTOMATED MODIFICATION OF THE
            NUMBER OF NODAL POINTS IN THE "DOUBLED" TORI-ELLIPSOIDAL
            SEGMENT. IT IS BEST IF YOU ALWAYS USE:
                     NMESH  between 51 and 97 (preferably 97)
            FOR THE NUMBER OF NODES IN THIS SEGMENT. THEN THE END OF
            THE NEW "DOUBLED" SEGMENT WILL AUTOMATICALLY HAVE THE
            SAME NODAL POINT NUMBER, NMESH, THAT YOU JUST SPECIFIED
            IN YOUR INPUT SESSION.  IF YOU ALWAYS USE NMESH = 97,
            THERE WILL PROBABLY ALWAYS BE ENOUGH NODES IN THE "DOUBLED"
            SEGMENT TO AVOID ELEMENT LOCKING.
      NOTE2:WHEN USING CALLOUTS, ALWAYS USE r (NOT z) AND FOR A CLOSED
            TOROID FOLLOW THE INPUT SCHEME LISTED IN THE EXAMPLE IN
            THE FILE ...bosor5/doc/bosor5.news, ITEM 2, DATED NOV 1995.
            YOU MUST USE THE END POINT "r" VALUES APPROPRIATE FOR THE
            "DOUBLED" SEGMENTS (SEE EXAMPLE BELOW).

------------------------------------------------------------------------
The following libraries were modified: GEOM, QUESTIONS . The following
"link" commands were used to update the absolute elements: LINKBREADVAX,
LINKMODIFY, LINKINPUT .  The prompt file, PROMPT3.DAT, was updated by
addition of the material listed above between the dashed lines.
***********************************************************************
NOTE: THE ABOVE ITEM IS MADE OBSOLETE BY THE NEXT ITEM
************************************************************************


6. July, 1996
This represents a correction to News Item November, 1995. It turned out
that the method of "reflection" described above did not work
because of element "locking" in segments with crowns or valleys and with
meridional curvature that varies within a segment. Now the user must use
additional segments, (two segments per dome, one going up, the other coming
down). The new input datum called for in the PROMPT3.DAT file is as follows:
---------------------------------------------------------------------------
584.1 Is this segment an INNER part of the toroid?
584.2 
      By "INNER" is meant the part of the toroid with negative
      Gaussian curvature, the portion of the toroid with radius
      less than the radius, ALPHAT, to the center of the toroid.

      The OUTER part of the toroid is the part with positive
      Gaussian curvature, the portion of the toroid with radius
      greater than the radius, ALPHAT, to the center of the toroid.
----------------------------------------------------------------------------
This new input datum replaces that with the prompting index 582 listed in
the previous News item. The libraries GEOM and QUESTIONS were modified.


7. Multisegment shells with initial axisymmetric sinusoidal imperfections

14 August, 1996

Dear Customer:

This is in reply to your email message, a copy of which follows.

---------------------------- Customer's  email --------------------------
I am editing an existing BOSOR5 input deck (.ALL deck enclosed) to include
shell imperfections in segments 3 and 4.  The added input lines appear to be
processed OK but the subsequent shell reference input keep on echoing "$ R(I) 
= radial coordinate of Ith callout, r( 1)" and "$ R(I)  = radial coordinate of
Ith callout, r( 2)" in the .DOC file (enclosed).

Would you please examine the two enclosed decks (mcdon.ALL and mcdon.DOC)
and tell me what's wrong?
------------------------------------------------------------------------------

--------------------- Dave Bushnell's Reply ----------------------------------
BOSOR4/BOSOR5 present difficulties in the case of multisegment shells with
imperfections. The difficulty arises from the fact that in the coding of
SUBROUTINE IMPERF (copy below), BOSOR4/BOSOR5 assume that the sinusoidal
imperfection is a function of arc length S along the meridian, with the
origin of the arc length S being at the beginning of the first segment and
running thru the end of the last segment. 

You wanted a sinusoidal imperfection only in segments 3 and 4. At the
beginning of segment 3 the arc length (called S in BOSOR4/5) has some
value. Therefore, the sinusoidal imperfection has some non-zero value in
general. I should have asked the user if he/she wanted the origin of the
imperfection to start at the beginning of the segment rather than just
assume that it starts at the beginning of Seg. 1, but I did not and I
don't want to add another question at this time. (Even if the origin of
arc length S for the purpose of computation of the imperfection started at
the beginning of some interior segment rather than at the beginning of
Seg. 1, you would still have a problem with the imperfection having in
general a non-zero value at the end of that segment). 

The fact that the imperfection has, in general, some non-zero values at
the beginning and at the end of the segment in which it occurs give rise
to problems in BOSOR4/BOSOR5 of identifying just where the segment ends
are in (R,Z) space for the purpose of the user's providing appropriate R
or Z callouts for thickness, temperature, pressure, etc. BOSOR4/BOSOR5
bombs with messages printed to the *.ERR file if the user provides R or Z
values for end point callouts that are not close enough to where
BOSOR4/BOSOR5 thinks these end points are in (R,Z) space, and the
BOSOR4/BOSOR5 "opinion" unfortunately includes the effect of any initial
imperfection. Without some kind of independent computation on the side,
(which might be very difficult), the user does not know in advance where
the (R,Z) end points are of an interior segment with an initial
axisymmetric sinusoidal imperfection. 

What I did with your input data is the following:

1. I tried to run your *.ALL file. (I ran BOSORREAD). It bombed, just the
way it did when you ran it. When it bombed it left a file called *.ERR,
where * stands for the name I gave the case. (I called the case "mcdon"). 

2. I searched the mcdon.ERR file for the first occurrence of an error
message concerning improper user identification of the end points of the
first segment with a nonzero imperfection. You can do this by searching
for the string "W0" (that's a w-zero, not w-oh) in the mcdon.ERR file.
BOSOR4/5 prints out the following error message in the mcdon.ERR file: 

------------------ fragment of mcdon.ERR file -------------------------------
 Imperfection geometry....                                                      
                                                                                
$IMP   = indicator for imperfection (0=none, 1=some)=
  There is no more help. Do your best.
$IMP   = indicator for imperfection (0=none, 1=some)=
                                                  1
$ITYPE = indicator (1 or 2 or 3) for type of imperfection=
                                                  2
$W0    = amplitude of pure sinusoidal imperfection=
                                           0.2000000    
$WLNGTH= half-wavelength of pure sinusoidal imperfection=
                                            6.250000    
$NTYPEZ= control (1 or 3) for reference surface location=
                                                                                
 NTYPEZ = 1 means that the distance from the shell wall                         
 leftmost surface to the reference surface varies along                         
 the meridian.  By "leftmost" we mean as we face in the                         
 direction of increasing meridional arc length, s.  See                         
 the figure (a) on p. P13.                                                      
                                                                                
 NTYPEZ = 3 means that the distance from  the  leftmost                         
 surface of the wall to the reference surface is const-                         
 ant as we proceed along the meridian, s.                                       
                                                                                
$NTYPEZ= control (1 or 3) for reference surface location=
                                                  1
$NZVALU= number of meridional callouts for ref. surf.=
                                                  2
$NTYPE = control for meaning of callout (2=z, 3=r)=
                                                  3
$R(I)  = radial coordinate of Ith callout, r( 1)=
                                            13.77950    
$R(I)  = radial coordinate of Ith callout, r( 2)=
                                            24.90310    


 INPUT DATA ERROR...
   CALLOUT =      1.3780E+01
   IT SHOULD BE BETWEEN      1.3825E+01 AND     2.4929E+01
   OR EQUAL TO ONE OF THEM.


$R(I)  = radial coordinate of Ith callout, r( 1)=
                                           0.0000000E+00
$R(I)  = radial coordinate of Ith callout, r( 2)=
                                           0.0000000E+00
             .
             .
             .
    (it just keeps going and going and going....)
------------------------------------------------------------------------------

3. I updated the mcdon.ALL file by changing the beginning R-callout in
Seg. 3 from 13.780 to 13.825 and the end R-callout in Seg. 3 from 24.9031
to 24.929. NOTE: DO NOT CHANGE THE GEOMETRY INPUT, ONLY THE CALLOUTS. 

4. I ran the updated mcdon.ALL file (BOSORREAD) again. Of course, it
bombed again because there are other callouts in both Segments 3 and 4
that have not yet been updated to account for the effect of the initial
imperfection. The first occurrence of the callout error message this time
was as follows: 

------------------ fragment of mcdon.ERR file, 2nd try ---------------------
                                                                                
$NPSTAT = number of meridional callouts for pressure=
                                                  2
                                                                                
 Next provide meridional callout points for pressure...                         
                                                                                
$NTYPE = control for meaning of loading callout (2=z, 3=r)=
                                                  2
$Z(I)  = axial coordinate of Ith loading callout, z( 1)=
                                           -44.12790    
$Z(I)  = axial coordinate of Ith loading callout, z( 2)=
                                           -40.72710    


 INPUT DATA ERROR...
   CALLOUT =     -4.0727E+01
   IT SHOULD BE BETWEEN     -4.4277E+01 AND    -4.0811E+01
   OR EQUAL TO ONE OF THEM.


$Z(I)  = axial coordinate of Ith loading callout, z( 1)=
                                            1.000000    
$Z(I)  = axial coordinate of Ith loading callout, z( 2)=
                                            1.000000    
                     .
                     .
                     .
    (It just keeps going and going and going...)
----------------------------------------------------------------------------

5. Again I edited the mcdon.ALL file, this time changing all the beginning
Z callouts to -44.277 and the ending Z callouts to -40.811 in Segment 3.

6. Again I ran BOSORREAD. This time it bombed in Segment 4, and I had to
change all beginning Z callouts to 3.5599 and ending Z callouts to 8.7720.

7. The final run I tried bombed in Segment 8 because I apparently no
longer allow specification of "1" for a callout type in my version of
BOSOR5, which you provided for temperature callouts in Segment 8. (You
probably have an old version of BOSOR5). 

8. The final version of input for the two segments with the initial
imperfections, Segments 3 and 4, after all corrections in Segments
3 and 4 follows (not included here to save space).


NOTE: When you change the mcdon.ALL file as listed above, you get
discontinuities in the shell meridian between the end of Segment 2 and the
beginning of Segment 3 and between the end of Segment 4 and the beginning
of Segment 5. This is because the amplitude of the initial imperfection is
nonzero at the ends of segments 3 and 4. Please inspect the fragment of
the mcdon.OUT file at the end of this message to see what I mean. These
meridional discontinuities might give rise to significant phony stress
concentrations because of the resulting discontinuities in meridional
moment. 

The relevant portion of SUBROUTINE IMPERF, where the new (imperfect) 
geometry of each shell segment is computed, follows. You are free to change
the logic any way you wish to in order to make BOSOR5 easier to use at
mcdon for imperfect multisegment shells. However, keep careful notes/files
of what you do so that should you ever get a new BOSOR4/BOSOR5 you can
again update my (unchanged) versions of IMPERF to resurrect whatever
modifications you might have made.

-------------------- part of the GEOM source library ----------------------
C=DECK      IMPERF
      SUBROUTINE IMPERF(NFLAG,I5,R,RD,C1,C2,C1D,S,SEND,ISEG,DS,Z)
C     CALLED FROM GEOM, WHOSE TRACE IS GEOMTY, READIT, MAIN.
C     CALCULATES GEOMETRICAL PARAMETERS R, RD, C1, C2, C1D ( SEE GEOM
C     FOR DEFINITIONS) FOR IMPERFECT SHELL
      DOUBLE PRECISION W,PHI,FL
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT
      CHARACTER*4 CHARAC
      LOGICAL ANSL1
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),WTOT(100)
      DIMENSION W(20),PHI(20),FL(20)
      DIMENSION DS(*) ,Z(*)
C BEG DEC 1992
      DIMENSION WTRIG(20),FLTRIG(20)
C END DEC 1992
C     ITYPE = TYPE OF IMPERFECTION
      CALL DATUM(IFILE2,134,1,2,ITYPE,REALL,CHARAC,IOUT,0,1)
C BEG DEC 1992
      IF (ITYPE.NE.1.AND.ITYPE.NE.2.AND.ITYPE.NE.3) THEN
       WRITE(6,*)' ITYPE MUST BE EITHER 1 OR 2 OR 3'
C END DEC 1992
       CALL ERREX
      ENDIF
C
   10 FORMAT(10I6)
   20 FORMAT(6E12.8)
      PI = 3.1415927
C BEG DEC 1992
      GO TO (30,130,170,179),ITYPE
C END DEC 1992
   30 CONTINUE
C
C     RANDOM SERIES OF SINUSOIDAL IMPERFECTIONS
C
      IF (NFLAG.EQ.1) GO TO 60
      CALL DATUM(IFILE2,135,1,1,INT,FM   ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,136,1,1,INT,C    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,137,1,1,INT,FLMIN,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,138,1,1,INT,FLMAX,CHARAC,IOUT,0,1)
      M = FM
      CALL URNDM(0,M,W)
      CALL URNDM(0,M,PHI)
      CALL URNDM(0,M,FL)
      WSUM = 0.0
      DO 40 I=1,M
      WSUM = WSUM + W(I)
      PHI(I) = PHI(I)*2.*PI
      FL(I) = FL(I)*(FLMAX-FLMIN) + FLMIN
   40 CONTINUE
      DO 50 I=1,M
   50 W(I) = W(I)*C/WSUM
   60 CONTINUE
      WRITE (IFILE4,70)ISEG
   70 FORMAT(// 47H COMPONENTS OF RANDOM IMPERFECTION FOR SEGMENT  I3//)
      WRITE (IFILE4,80)
   80 FORMAT(//67H    COMPONENT     AMPLITUDE      HALF-WAVELENGTH    PH
     1ASE(RADIANS)               //)
      DO 90 I=1,M
   90 WRITE (IFILE4,100)I,W(I),FL(I),PHI(I)
  100 FORMAT(I9,1P3E18.8)
      DO 120 I=1,I5
      WTOT(I) = 0.0
      ARC = SEND + S(I)
      WD = 0.0
      WDD = 0.0
      WDDD = 0.0
      DO 110 J=1,M
      ARG = PI/FL(J)
      SI = SIN(ARG*ARC + PHI(J))
      CO = COS(ARG*ARC + PHI(J))
      WTOT(I) = WTOT(I) + W(J)*SI
      WD = WD + W(J)*ARG*CO
      WDD = WDD - W(J)*ARG**2*SI
      WDDD = WDDD - W(J)*ARG**3*CO
  110 CONTINUE
      FACT = 1./SQRT(1.+ WD**2)
      SPHI = R(I)*C2(I)
      CPHI = RD(I)
      FK1 = C1(I)
      R(I) = R(I) + WTOT(I)*SPHI
      RD(I) = FACT*(CPHI + WD*SPHI)
      C1(I) = FK1-WDD
      C1D(I) = C1D(I)-WDDD
      IF (R(I).GT.0.) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)
  120 CONTINUE
      NFLAG = 0
      GO TO 220
C
C     IMPERFECTION IS SIMPLE SINE WAVE
C
  130 CONTINUE
      SEND0 = 0.
      IF (NFLAG.EQ.1) GO TO 140
      CALL DATUM(IFILE2,139,1,1,INT,W0    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,140,1,2,INT,WLNGTH,CHARAC,IOUT,0,1)
C     SEND0 = WLNGTH/2.
      SEND0 = 0.
  140 ARG = PI/WLNGTH
      WRITE (IFILE4,150)ISEG,W0,WLNGTH
  150 FORMAT(//34H SINUSOIDAL IMPERFECTION, SEGMENT  I3,13H AMPLITUDE =
     1 1PE12.4,19H HALF-WAVELENGTH =  1PE12.4    //)
      DO 160 I=1,I5
      ARC = S(I) + SEND - SEND0
C BEG JAN 1991
C  FOR ORIGIN OF ARC LENGTH AT THE BEGINNING OF THE CURRENT SEGMENT...
C     ARC = S(I) - S(1)
C END JAN 1991
      SI = SIN(ARG*ARC)
      CO = COS(ARG*ARC)
      WTOT(I) = W0*SI
      WD = W0*ARG*CO
      WDD = - W0*ARG**2*SI
      WDDD = -W0*ARG**3*CO
      FACT = 1./SQRT(1.+ WD**2)
      SPHI = R(I)*C2(I)
      CPHI = RD(I)
      FK1 = C1(I)
      R(I) = R(I) + WTOT(I)*SPHI
      Z(I) = Z(I) - WTOT(I)*CPHI
      RD(I) = FACT*(CPHI + WD*SPHI)
      C1(I) = FK1 - WDD*FACT**3
      C1D(I) = C1D(I) - WDDD*FACT**2 + 3.*WD*WDD*WDD/FACT**2
      IF (R(I).GT.0.) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)
      DS(I) = DS(I)/FACT
  160 CONTINUE
      NFLAG = 0
      GO TO 220
  170 CONTINUE
C BEG DEC 1992
C     DETERMINISTIC SUM OF SINUSOIDAL TERMS (1 DEC 1992)
------------------------------------------------------------------------------


NOTE: I must caution you that there is a chance that BOSOR4/BOSOR5 may
"lock up" for imperfect shells with rather large amplitude or short
wavelength imperfections. BOSOR4/BOSOR5 doesn't work properly if there are
very significant changes in meridional curvature within a given segment.

(See the BOSOR4/BOSOR5 handout entitled "BOSOR4 (or 5) PACKET - BOSOR4
BOSOR5 WARNING")

Of course, I tested BOSOR4/BOSOR5 for axisymmetrically imperfect
cylindrical shells under axial compression, and everything seemed to work
okay as long as the imperfection amplitude was less than a wall thickness
and the meridional wavelength of the imperfection was at least as long as
that of the axisymmetric buckling mode of the perfect shell. You should
take BOSOR4/BOSOR5 imperfection stuff with a grain of salt, I think, both
for the "element locking" reason and because an axisymmetric sinusoidal
initial imperfection is rather strange and unlikely to occur in practice. 

If you have any questions, please send email.

-------------------- fragment of mcdon.OUT file resulting from --------------
-------------------- "corrected" mcdon.ALL file. -------------------------

         (omitted to save space).




8. September, 1997
A customer called and wanted an analysis of a tank completely filled with
liquid. The tank was subjected to uniform external pressure plus
nonuniform pressure distributions caused by quasi-static g-forces
(accelerations) in both the axial and lateral directions. Until now the
surface loading generated by this combination of pressures was not
included in the BOSOR4-type of loading, in which it is assumed that for
nonsymmetric pressure loading the spatial distribution of pressure can
be expressed as the product, p(s,theta) = f(s)*g(theta).  BOSOR4 was
modified to handle the new type of loading.

It was necessary to introduce new entries into one of the prompting
files, the one called PROMPT.DAT. The following new entries were introduced
into PROMPT.DAT:
-------------------------------------------------------------------------
134.1 Is there a tank filled with fluid?
134.2 
      This section is entered only if there exists at least one
      non-zero component of acceleration of gravity (axial, lateral,
      or both), such as would be experienced by a payload in a
      launch vehicle.

      If you answer "Y" (you are allowed only one fluid-filled tank
      per case!), you will next be asked to supply the following
      information:

       1. The WEIGHT density (e.g. lb/in**3) of the fluid, GAMMA
       2. The axial length of the tank, AXLONG
       3. The radius of the largest parallel circle in the tank, RBIG
       4. The axial coordinate of the bottom of the tank, ZBEGIN
       5. The segment numbers that comprise the tank, ISTANK(j),j=1,2,..
       6. Whether the inside of the tank is on the left or right side
          of the wall as you travel along the meridian.

      NOTE: The tank is assumed to be completely full of the fluid.
      BOSOR4 uses the above information plus the meridional geometry
      of the tank and the axial and lateral g's, GAXIAL and GLATRL,
      to which the tank is subjected to compute the pressure of the
      fluid acting on the tank wall:

      p(fluid) =
        k*GAMMA{abs(GLATRL)*[RBIG -(GLATRL/abs(GLATRL))*r*cos(theta)]
              +GAXIAL*[0.5*AXLONG*(1+GAXIAL/abs(GAXIAL)) -(z-ZBEGIN)]}

      in which r is the radius of the parallel circle at z, z is the
      axial coordinate of an arbitrary point on the tank meridian, and
      theta is the circumferential coordinate. The factor k is +1.0 if
      the inside of the tank is on the left side of the wall as you
      travel along the meridian in the direction of increasing arc
      length, s; k= -1.0 otherwise. (See p 66, bottom, of "BOSOR4:
      Program for stress, buckling, and vibration of complex shells of
      revolution", in STRUCTURAL MECHANICS SOFTWARE SERIES, Vol. 1,
      N. Perrone and W. Pilkey, editors, Univ. Press of Virginia,
      pp 11-141 (1974)).

136.1 WEIGHT density (e.g. lb/in**3) of the fluid, GAMMA
138.1 Axial length of the tank, AXLONG
140.1 Radius of largest parallel circle in the tank, RBIG
142.1 Axial coordinate of the bottom of the tank, ZBEGIN
144.0 
      Next, please provide the numbers of the segments of the tank wall
      that "see" the normal pressure applied by the fluid.
 
      NOTE: INCLUDE ONLY THOSE SEGMENTS THAT EXPERIENCE A DELTA-p
            from the fluid across the wall!

146.1 How many BOSOR4 segments in the tank "see" delta-p(fluid)?
146.2 
      NOTE: Include only those segments upon which a net fluid pressure
            acts on the wall of the tank!

148.1 Segment number, ISTANK
149.1 Is the inside of the tank to the left of increasing arc, s?
149.2 
      The pressure of the fluid acting on the tank wall is given by:

      p(fluid) =
        k*GAMMA{abs(GLATRL)*[RBIG -(GLATRL/abs(GLATRL))*r*cos(theta)]
              +GAXIAL*[0.5*AXLONG*(1+GAXIAL/abs(GAXIAL)) -(z-ZBEGIN)]}

      in which r is the radius of the parallel circle at z, z is the
      axial coordinate of an arbitrary point on the tank meridian, and
      theta is the circumferential coordinate. The factor k is +1.0 if
      the inside of the tank is on the left side of the wall as you
      travel along the meridian in the direction of increasing arc
      length, s; k= -1.0 otherwise. (See p 66, bottom, of "BOSOR4:
      Program for stress, buckling, and vibration of complex shells of
      revolution", in STRUCTURAL MECHANICS SOFTWARE SERIES, Vol. 1,
      N. Perrone and W. Pilkey, editors, Univ. Press of Virginia,
      pp 11-141 (1974)).
      
150.0 
------------------------------------------------------------------------------

The new entries in PROMPT.DAT explain the loading and give the formula for
the normal pressure distribution on the tank wall generated by the axial
and lateral quasi-static accelerations, GAXIAL and GLATRL. In order to
implement the new capability in BOSOR4, I had to modify the following
libraries: ARRAYS, B4READ, QUESTIONS, and STOGET. Note that there are
new data entries, so that in the case when you have base motion your old
BOSOR4 data decks will not work: at least one additional input datum will
be required, the one called for by the following prompting question:

             Is there a tank filled with fluid?

The implementation was checked by modifying the case called "8.ALL" in
the directory ...bosor4/case. The following new entries would appear in a
modified "8.ALL" file directly following the two entries,
    2      $ GLATRL = no. of g's lateral forcing (base excitation only)
    0      $ GAXIAL = no. of g's axial forcing (base excitation only)
New entries:
---------------------------------------------------------------------------
 Y         $ Is there a tank filled with fluid?
 0.0193    $ WEIGHT density (e.g. lb/in**3) of the fluid, GAMMA
  100      $ Axial length of the tank, AXLONG
    1      $ Radius of largest parallel circle in the tank, RBIG
    0      $ Axial coordinate of the bottom of the tank, ZBEGIN
    1      $ How many BOSOR4 segments in the tank "see" delta-p(fluid)?
    1      $ Segment number, ISTANK( 1)
 Y         $ Is the inside of the tank to the left of increasing arc, s?
---------------------------------------------------------------------------
The next (old) entry is:
 H         $ CONSTRAINT CONDITIONS FOLLOW....



9. September, 2000: BOSOR plotting capability on
   SGI IRIX 6.** work station.
The following letter was written on this subject:

12 September, 2000

Dear......

While my son, Bill, was at Lockheed several years ago one
of the things he did just before he left for greener
pastures was to start working on the capability to get
BOSOR4 plots working on an SGI with IRIX operating system with the
64 bit architecture (IRIX 6.5, for example). This task
was never completed. However, there are two programs in existence
that might be helpful:

    gawk.sgi8
  plotps.sgi8

I have just "ftp'd" these programs to ....

Unfortunately, there is no xgraph.sgi8 file. However, I
don't think the customer needs it as long as he always choose the "P"
option in BOSORPLOT. The "gawk" and "plotps" programs are
called from the script, bosorplot.bat, which is reproduced at
the end of this message.

NOTE TO BOSOR CUSTOMER:
In order to try again to get bosor4 plots, replace the
gawk.sgi and plotps.sgi files that you now have with the 
gawk.sgi8 and plotps.sgi8 files
(with the "sgi8" changed to "sgi"). I'm not sure this will
work. 

If it does not, then you will have to try something
else: The BOSOR4 plot data are contained in the file, *.PLT2.
You will have to write some software that uses the *.PLT2
file as input and produces plots. This goes for BOSOR5 also.

Sorry for the inconvenience. The IRIX 6.** operating system
was working at Lockheed only just before my son, Bill
Bushnell, left. He did not have a chance to finish his effort 
getting the bosor programs completely working for this
particular SGI workstation architecture (bosor plotting).
Unfortunately, my knowledge of unix is insufficient to do
this myself.

Sincerely, 
Dave Bushnell 



------------- email from disgruntled BOSOR customer -------
The programmes
*	gawk.sgi
*	xgraph.sgi
are not running properly.

The error message reads:

"cannot execute binary file"

Can you provide us with a working versions of mentioned programs?

We run IRIX 6.5

------------------- end of email to me ------



------ username/bosor4/bin/bosorplot.bat script --------------

#
# bosorplot.bat
# bosorplot.bat takes the name of a file containing a set of plot data.  The
  (more bosorplot.bat omitted in order to save space here)
-------- end of bosorplot.bat ------------



10.July 2001
During 1999 - 2000 a UNIX-based capability to incorporate
BOSOR4 in an optimization context was generated. The results
of this effort are reported in the following:

David Bushnell, AUTOMATED OPTIMUM DESIGN OF SHELLS OF
REVOLUTION WITH APPLICATION TO RING-STIFFENED CYLINDRICAL
SHELLS WITH WAVY WALLS, Lockheed Martin Missiles and Space
Report LMMS-P525674, November 1999

David Bushnell, (same title, condensed version of report),
Proceedings 41st AIAA Structures, Structural Dynamics and
Materials meeting, AIAA Paper 2000-1663, April 2000

As part of this project, the BOSOR4 capability was expanded
to permit more shell segments, more discrete rings, and
more degrees of freedom in both the prebuckling and buckling
parts of the model (as well as in the nonsymmetric stress
and modal vibration branches-now up to 15000 d.o.f.).
However, in this project the
BOSOR4 coding was introduced as a bundle of subroutines. A
"stand-alone" version of the expanded BOSOR4 capability was
not generated. 

Now a "stand-alone" version of the expanded BOSOR4 has been
created. It is called "BIGBOSOR4".

Some of the original BOSOR4 commands have been changed,
as follows:

The old command:         has been changed to:
   BOSOR4LOG                BIGBOSOR4LOG
   BOSORALL                 BIGBOSORALL
   RESTART                  BIGRESTART

The other BOSOR4 commands remain unchanged.

To get started, the user types the following two commands:

   source ~bush/bigbosor4/bin/initialize

and

   bigbosor4log

In the new BOSOR4 the three executable elements, BOSORREAD,
BOSORMAIN, and BOSORPOST, have been combined into one
large executable element, MAINB4. Rather than being main
programs, the three elements, B4READ, B4MAIN, and B4POST are
now subroutines called by MAINB4. 

Dr. Frank Weiler created a new subroutine INTER. The old
version of INTER (an interpolating routine) did not work
properly on LINIX-based workstations.

Dr. Weiler also provided a version of GAWK that runs on
modern SGI workstations. Therefore, the modern SGI version
of BOSOR4 will produce plots.

In December, 2003 bigbosor4 was generated and checked for
running on LINUX .



11. 26 October, 2004
The bigbosor4 mainprocessors, bigbosorall and bigrestart, could not
handle cases with long names. Some of the libraries had not been updated
with respect to the number of characters permitted in the name "case" or
"CASE". The following libraries were updated: mainb4, addbosor4, opngen,
and restart. The character variable "case" (or "CASE") was increased in
length to 28 characters and the updated code was tested.

12. 26 October, 2004
A decision was made to change the script, .../bin/cleanup.com, because
it was written in such a way as to destroy files that the user wanted
to keep, especially when BOSOR4 is run in connection with cases generated
by PANDA2. The new "cleanup" script follows:
--------------------------------------------------------------------
# THIS IS THE CLEANUP COM FILE...

# THIS PROCEDURE IS FOR CLEARING OUT OLD FILES DURING TESTING. DO NOT
# USE IT UNLESS YOUR 'NAME'.DOC FILE IS GOOD!!!
 
   echo  "   "
   echo  "This procedure clears out old files and replaces"
   echo  "the 'NAME'.ALL file with the most recent 'NAME'.DOC"
   echo  "file."
   echo  "     "
   echo  "WARNING:  DO NOT USE THIS PROCEDURE UNLESS YOU ARE"
   echo  "          SURE THAT YOU HAVE A COMPLETE, GOOD "
   echo  "          'NAME'.DOC FILE."
   echo  "    "
   echo -n  "Enter case name: "
   set case = $<
/bin/rm -f ${case}.BLK >& /dev/null
/bin/rm -f ${case}.LAB >& /dev/null
/bin/rm -f ${case}.OUT >& /dev/null
/bin/rm -f ${case}.PLT2 >& /dev/null
/bin/rm -f ${case}.RAN >& /dev/null
/bin/rm -f ${case}.WAV >& /dev/null
/bin/rm -f ${case}.m.ERR >& /dev/null
   'rm'  $case FOR0* fort.* BIGBOSOR4 >& /dev/null
   'cp'  ${case}.DOC  ${case}.ALL
   echo  "    "
   echo  "You now have the following files with the name"
   echo  "${case}.* :"
   'ls' -al  ${case}.*
   echo  "If you want to get ${case}.SEG files, please type"
   echo  ""
   echo  "          getsegs"
-----------------------------------------------------------------

A sample of one of the new lines in "cleanup" is:

/bin/rm -f ${case}.BLK >& /dev/null

"cleanup" used to delete all the files generated in a BOSOR4 run.



12. 28 October, 2004

HOW TO GO FROM AN INDIC = 1 ANALYSIS (BUCKLING) TO AN INDIC=0 ANALYSIS (STRESS)

The editing to go from the INDIC = 1 to the INDIC = 0 analyses is as follows:

1. The beginning of the *.ALL file as generated automatically by BOSPN2 for
a buckling analysis (INDIC=1) (via the PANEL2 command) has the following
data, for example:

 BOSOR4 INPUT FOR A RING-STIFF CYL. SHELL
         1      $ INDIC = analysis type indicator
         2      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         0      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
       112      $ NSEG  = number of shell segments (less than 195)

For the INDIC=0 (stress) analysis rather than the INDIC=1 (buckling) analysis,
it is necessary to change INDIC and ISTRES, so that the new file fragment
reads:

 BOSOR4 INPUT FOR A RING-STIFF CYL. SHELL
         0      $ INDIC = analysis type indicator
         2      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         1      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
       112      $ NSEG  = number of shell segments (less than 195)

2. For INDIC=0, the axial loading V has to be changed in each segment if the 
user wants stresses at only one load step with that step having the proper
applied axial load V. The appropriate fragment from the *.ALL file
automatically produced by BOSPN2 (the PANEL2 command) for the INDIC=1
(buckling) analysis reads:

         1      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
         1      $ NLOAD(1)=indicator for axial load or disp.(0=none,1=some)
         0      $ NLOAD(2)=indicator for shear load or disp.(0=none,1=some)
         0      $ NLOAD(3)=indicator for radial load or disp.(0 or 1)
         0      $ NLOAD(4)=indicator for line moment or rotation (0 or 1)
   0.000000     $ V(i)=fixed or initial axial load or displacement, V( 1)
         1      $ NLOAD(1)=indicator for axial load or disp. increment(0 or 1)
         0      $ NLOAD(2)= should be zero
         0      $ NLOAD(3)=indicator for radial load or disp. increment(0 or 1)
         0      $ NLOAD(4)=indicator for moment or rot. increment (0 or 1)
   256.0000     $ DV(i)=axial load or displacement increment, DV( 1)

It is necessary to change V(i), so that for INDIC=0 the new file fragment reads:

         1      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
         1      $ NLOAD(1)=indicator for axial load or disp.(0=none,1=some)
         0      $ NLOAD(2)=indicator for shear load or disp.(0=none,1=some)
         0      $ NLOAD(3)=indicator for radial load or disp.(0 or 1)
         0      $ NLOAD(4)=indicator for line moment or rotation (0 or 1)
   256.0000     $ V(i)=fixed or initial axial load or displacement, V( 1)
         1      $ NLOAD(1)=indicator for axial load or disp. increment(0 or 1)
         0      $ NLOAD(2)= should be zero
         0      $ NLOAD(3)=indicator for radial load or disp. increment(0 or 1)
         0      $ NLOAD(4)=indicator for moment or rot. increment (0 or 1)
   256.0000     $ DV(i)=axial load or displacement increment, DV( 1)

3 The data after the line, "GLOBAL DATA BEGINS...", as produced automatically
by BOSPN2 (the PANEL2 command) for the buckling (INDIC=1) analysis now reads:

      H         $ GLOBAL DATA BEGINS...
         0      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
         2      $ N0B   = starting number of circ. waves (buckling analysis)
         2      $ NMINB = minimum number of circ. waves  (buckling analysis)
         2      $ NMAXB = maximum number of circ. waves  (buckling analysis)
         1      $ INCRB = increment in number of circ. waves (buckling)
         1      $ NVEC  = number of eigenvalues for each wave number
   0.000000     $ P      = pressure or surface traction multiplier
   1.000000     $ DP     = pressure or surface traction multiplier increment
   0.000000     $ TEMP   = temperature rise multiplier
   0.000000     $ DTEMP  = temperature rise multiplier increment
   0.000000     $ OMEGA  = angular vel. about axis of revolution (rad/sec)
   0.000000     $ DOMEGA = angular velocity increment (rad/sec)
      H         $ CONSTRAINT CONDITIONS FOLLOW....
       112      $ How many segments in the structure?
      H         $

The appropriate corresponding file fragment for the INDIC = 0 (sress) analysis reads
as follows:

      H         $ GLOBAL DATA BEGINS...
         1      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
   1.000000     $ P      = pressure or surface traction multiplier
   1.000000     $ DP     = pressure or surface traction multiplier increment
   0.000000     $ TEMP   = temperature rise multiplier
   0.000000     $ DTEMP  = temperature rise multiplier increment
         1      $ number of load steps
   0.000000     $ OMEGA  = angular vel. about axis of revolution (rad/sec)
   0.000000     $ DOMEGA = angular velocity increment (rad/sec)
      H         $ CONSTRAINT CONDITIONS FOLLOW....
       112      $ How many segments in the structure?
      H         $
------------------------------------------------------------------------------------





13. 1 November, 2004
A rather serious bug was found in BOSOR4 that has to do with
computations involving laminated composite walls with lamina
laid up at various angles. In particular, SUBROUTINEs CFB4 and
CFB9 had to be modified. CFB4 was modified as follows:
---------------------------------------------------------------
      SUBROUTINE CFB4(ISEG,IPOINT,RAD,NWALL,Z,I5,S,C,RADD,THERM,
     1 T1,T2,T3,TIO)
C
C  OBTAIN CONSTITUTIVE LAW FOR COMPOSITE WALL WITH LAMINAE AT
C  VARIOUS ANGLES WITH RESPECT TO THE MERIDIONAL COORDINATE.
C
C BEG OCT 2004
      COMMON/ZGRAD/NTSGD
C END OCT 2004
      COMMON/LAYER/MATL(90),LTYPE(1500),T(90),ANGLE(90),NLAYER(95)

   (many lines skipped to save space)

  100 CONTINUE
      Z1 = -Z
      Z2 = Z1 + TD
C BEG OCT 2004
      NTSGD = 0
C END OCT 2004
      TIO(IPOINT,1) = FUNCT(T1,T2,T3,Z1)
      TIO(IPOINT,2) = FUNCT(T1,T2,T3,Z2)
--------------------------------------------------------------------

SUBROUTINE CFB9 was modified as follows:
--------------------------------------------------------------------
  110 CONTINUE
      Z1 = -Z
      Z2 = Z1 + TD
C BEG OCT 2004
      NTSGD = 0
C END OCT 2004
      TIO(IPOINT,1) = FUNCT(T1,T2,T3,Z1)
      TIO(IPOINT,2) = FUNCT(T1,T2,T3,Z2)
---------------------------------------------------------------------
The effect of the bug was to cause thermal loading to be wildly
erroneous in multisegment shells if SUBROUTINE CFB2 or SUBROUTINE CFB5
were called in a segment preceeding a segment with laminated composite
construction. The thermal loads were erroneous becase the index NTSGD
was not reset from segment to segment in such cases.





14. December 9, 2004
The array called "PALL" (in the labelled common block "LOADHM" was dimensioned
6000. This length is too small for BIGBOSOR4. Therefore, it was increased to
20000 . The addbosor4.src and b4util.src libraries were affected. b4util had
to be changed in one place; addbosor4 had to be changed in about 25 places:
everywhere the string "6000" appeared. The changes were not dated.


15. March 23, 2005
There have been times when it would have been nice to have BIGBOSOR4
compute the stresses at the tips of stiffeners that were smeared out
in the model. Finally I decided to bit the bullet and change BIGBOSOR4
so that this would happen automatically, provided that the smeared
stiffeners have the following properties:

1. Their cross sections are rectangular

2. Their cross sections do not change as we progess along the shell
segment meridian.

The following modifications were made:

Modifications to addbosor4.src (SUBROUTINE CFB1 modified):
------------------------------------------------------------------------------
C     ALSO CALLED FROM CFB2,CFB4,CFB5,CFB6,CFB7, AND CFB8.
C
C BEG MAR 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/ALOFIT/INDSIG(4),ISEGMT,IBOUND(9),DSTOT(2),IPOS(6)
      COMMON/RECSTF/PK1(195),PE1(195),PH1(195),
     1              PK2(195),PE2(195),PH2(195)
C END MAR 2005
      COMMON/ABXXX/C11,C12,C13,C14,C15,C16,C22,C23,C24,C25,C26,C33,C34

(many lines skipped to save space)

50    FORMAT (/,' ANALYSIS IS FOR AN ABRITRARY SHELL.')
C BEG MAR 2005
      IF (ISEGMT.EQ.1) CALL MOVER(0.,0,PK1,1,1170)
C END MAR 2005
      IF (NWALL.NE.1) GO TO 70

(many lines skipped to save space)

   85 CONTINUE
C
C   RECTANGULAR CROSS SECTION IS CONSTANT ALONG THE MERIDIAN...
C
      CALL DATUM(IFILE2,521,1,1,INT,T1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,522,1,1,INT,H1,CHARAC,IOUT,0,1)
C BEG MAR 2005
      PK1(ISEGMT) = K1
      PE1(ISEGMT) = E1
      PH1(ISEGMT) = H1
C END MAR 2005
      GO TO 130
C
C
   90 CONTINUE

 (many lines skipped to save space)

  140 CONTINUE
C
C   RECTANGULAR CROSS SECTION IS CONSTANT ALONG THE MERIDIAN...
C
      CALL DATUM(IFILE2,549,1,1,INT,D2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,550,1,1,INT,T2,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,551,1,1,INT,H2,CHARAC,IOUT,0,1)
C BEG MAR 2005
      PK2(ISEGMT) = K2
      PE2(ISEGMT) = E2
      PH2(ISEGMT) = H2
C END MAR 2005
      GO TO 190
C
  150 CONTINUE
----------------------------------------------------------------------------------


Modifications to b4util.src (SUBROUTINE STRESS modified):
----------------------------------------------------------------------------------
      E1IN = EPS1 - Z1*K1 - ATIN1
      E2IN = EPS2 - Z1*K2 - ATIN2
      E1OUT= EPS1 - Z2*K1 - ATOUT1
      E2OUT= EPS2 - Z2*K2 - ATOUT2
C
      SIG1I = E11*E1IN + E12*E2IN
      SIG1O = E11*E1OUT+ E12*E2OUT
      SIG2I = E12*E1IN + E22*E2IN
      SIG2O = E12*E1OUT+ E22*E2OUT
      TAUI  = GAB(IS)*(EPS12 + 2.*Z1*K12)
      TAUO  = GAB(IS)*(EPS12 + 2.*Z2*K12)
C
      SIGEI = SQRT(SIG1I**2 + SIG2I**2 - SIG1I*SIG2I +3.*TAUI**2)
      SIGEO = SQRT(SIG1O**2 + SIG2O**2 - SIG1O*SIG2O +3.*TAUO**2)
C BEG MAR 2005
C  Deal with smeared stringers and/or rings, if any...
C  This section works only if the smeared stiffeners are of
C  rectangular cross section that is constant in the segment.
C  The thermal stuff is questionable because there is no temperature
C  input for smeared stiffeners in BOSOR.
C
      IF (PH1(IS).GT.0.0) THEN
C  We have rectangular stringers with cross section constant in segment...
         IF (PK1(IS).LT.0.9) THEN
C  We have "leftmost" rectangular stringers...
            Z1 = -Z - PH1(IS)
            E1IN = EPS1 - Z1*K1 -ATIN1
            SIG1 = PE1(IS)*E1IN
            IF (ABS(SIG1).GT.ABS(SIG1I)) SIG1I = SIG1
            IF (ABS(SIG1).GT.SIGEI) SIGEI = ABS(SIG1)
         ELSE
C  We have "rightmost" rectangular stringers...
            Z2 = -Z + T + PH1(IS)
            E1OUT = EPS1 - Z2*K1 -ATOUT1
            SIG1 = PE1(IS)*E1OUT
            IF (ABS(SIG1).GT.ABS(SIG1O)) SIG1O = SIG1
            IF (ABS(SIG1).GT.SIGEO) SIGEO = ABS(SIG1)
         ENDIF
      ENDIF
C
      IF (PH2(IS).GT.0.0) THEN
C  We have rectangular rings with cross section constant in segment...
         IF (PK2(IS).LT.0.9) THEN
C  We have "leftmost" rectangular rings...
            Z1 = -Z - PH2(IS)
            E2IN = EPS2 - Z1*K2 -ATIN2
            SIG2 = PE2(IS)*E2IN
            IF (ABS(SIG2).GT.ABS(SIG2I)) SIG2I = SIG2
            IF (ABS(SIG2).GT.SIGEI) SIGEI = ABS(SIG2)
         ELSE
C  We have "rightmost" rectangular rings...
            Z2 = -Z + T + PH2(IS)
            E2OUT = EPS2 - Z2*K2 -ATOUT2
            SIG2 = PE2(IS)*E2OUT
            IF (ABS(SIG2).GT.ABS(SIG2O)) SIG2O = SIG2
            IF (ABS(SIG2).GT.SIGEO) SIGEO = ABS(SIG2)
         ENDIF
      ENDIF
C END MAR 2005
      RETURN
      END
------------------------------------------------------------------------------




16. August, 2005
Cases were run that demonstrate that BOSOR4 should not be used for the
analysis of ellipsoidal pressure vessel heads. Torispherical heads are ok,
but ellispoidal heads demonstrate enough finite element "lockup" to render
BOSOR5 predictions unacceptably unconservative. A certain degree of finite
element "lockup" always occurs in any shell segment for which the meridional
curvature varies within the segment. For example, "lockup" may occur in the
case of an axisymmetrically imperfect shell (IMP = 1 in the input data for
any shell segment) because the imperfection waviness causes the meridional
curvature to vary within the segment. Ellipsoidal heads and torispherical
heads behave in a similar fashion. Therefore, whenever you can, substitute
a torispherical head even when an ellipsoidal head is called for.





17. August, 2005
The libraries, geom.src and questions.src were modified, as well as
the prompting file, PROMPT2.DAT.

SUBROUTINE IMPERF was modified to permit input of nodal-point-by-
nodal-point imperfection shapes with amplitude factors. The PROMPT2.DAT
file was appended to as follows:

---------------------------------------------------------------------
705.0 
      Please supply the next imperfection mode.

      For each mode you will be asked to provide a nodal-point-by-
      nodal-point input for an imperfection shape, WSHAPE.
      The actual imperfection mode is the product AMPIMP*WSHAPE,
      where AMPIMP is a multiplier (amplitude) and WSHAPE is
      an imperfection shape. You must provide several values
      of WSHAPE, corresponding to a range of nodes in the
      shell segment. You will be able to supply up to 20
      imperfection modes.

      You will be asked to provide the following:
      1. Amplitude of the imperfection, AMPIMP(IMODE)
      2. Starting nodal point number, ISTART(IMODE), for WSHAPE
      3. Number, NUMB(IMODE), of values of WSHAPE you will provide
      4. Normalized imperfection normal displacement, WSHAPE(inode,IMODE)
         at NUMB(IMODE) contiguous nodal points in the segment

710.1 Imperfection multiplier, AMPIMP(IMODE)
710.2 
      For each imperfection mode,
      the imperfection is the product, AMPIMP*(imperfection shape),
      where "imperfection shape" is to be provided by the user for
      a range of nodal points in the Segment. "imperfection shape" is
      called WSHAPE. The total imperfection in the segment is the
      sum of the imperfection modes.

714.1 Starting nodal point number, ISTART(IMODE)
714.2 
      The normalized imperfection normal displacement, WSHAPE, must
      be provided by the user for a range of nodal points in the
      segment. ISTART (minimum = 1, maximum = number of nodal points
      in the segment minus 5) is the nodal point number in the
      segment where the axisymmetric imperfection begins.

716.1 Number of values of WSHAPE to be read, NUMB(IMODE)
716.2 
      NUMB(IMODE) must be less than or equal to:
      (number of nodal points in the segment - ISTART + 1
      If WSHAPE is to be read for part of the segment, then a value
      must be read for every nodal point in that part of the segment.
      NUMB should almost certainly be greater than 5. NUMB might be
      a rather large number, such as 75 or 90, making this input
      somewhat tedious, especially if you want to supply several
      imperfection modes.

720.1 Imperfection normal displacement (normalized), WSHAPE
720.2 
      The actual imperfection at the ith nodal point in the segment
      is given by the product: AMPIMP*WSHAPE.

722.1 Do you want to provide any more imperfection modes?
722.2 
      You are allowed to provide up to 20 modes. Please decide
      ahead of time the proper sign for each value of the amplitude,
      AMPIMP(IMODE) of the mode shape, WSHAPE.

760.1 DUMMY ENTRY
--------------------------------------------------------------------



The GEOM.SRC library was modified as follows:
---------------------------------------------------------------------
C=DECK      IMPERF
C BEG AUG 2005
      SUBROUTINE IMPERF(NFLAG,I5,R,RD,C1,C2,C1D,S,SEND,ISEG,Z)
C END AUG 2005
C     CALLED FROM GEOM, WHOSE TRACE IS GEOMTY, READIT, MAIN.
C     CALCULATES GEOMETRICAL PARAMETERS R, RD, C1, C2, C1D ( SEE GEOM   
C     FOR DEFINITIONS) FOR IMPERFECT SHELL
      DOUBLE PRECISION W,PHI,FL     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/INDAT/INFILE
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C BEG AUG 2005
      DIMENSION AMPIMP(20),ISTART(20),NUMB(20),WSHAPE(100,20)
      DIMENSION Z(*)
C END AUG 2005
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),WTOT(100)
      DIMENSION W(20),PHI(20),FL(20)
      DIMENSION WTRIG(20),FLTRIG(20)
C     ITYPE = TYPE OF IMPERFECTION  
      CALL DATUM(IFILE2,134,1,2,ITYPE,REALL,CHARAC,IOUT,0,1)
C BEG AUG 2005
      IF (ITYPE.NE.1.AND.ITYPE.NE.2.AND.ITYPE.NE.3
     1                             .AND.ITYPE.NE.4) THEN
       WRITE(6,*)' ITYPE MUST BE EITHER 1 OR 2 OR 3 OR 4'
C END AUG 2005
        CALL ERREX
      ENDIF
10    FORMAT(10I6)                                                            
20    FORMAT(6E12.8)                                                          
      PI = 3.1415927    
C BEG AUG 2005
      GO TO (30,130,170,179),ITYPE
C END AUG 2005
30    CONTINUE    

   (many lines skipped to save space)

177   CONTINUE    
      NFLAG = 0   
C BEG AUG 2005
      GO TO 220
179   CONTINUE
C     READ NORMAL DEFLECTION MODES W AND OBTAIN NEW VALUES FOR R,RD,C1,C2
C
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (NFLAG.EQ.1) GO TO 183
      IMODE = 1
1792  CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,705,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,710,1,2,INT,AMPIMP(IMODE),CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,714,1,2,ISTART(IMODE),REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,716,1,2,NUMB(IMODE),REALL,CHARAC,IOUT,0,1)
      WRITE(IFILE4,'(/,A,I3,/,A,I3,/,A,1P,E12.4,/,A,I4,/,A,I4,/,A,I4)')
     1' Imperfection is provided node-by-node in segment      ',ISEG,
     1' Imperfection mode number,                       IMODE=',IMODE,
     1' Amplitude of this imperfection mode,           AMPIMP=',
     1 AMPIMP(IMODE),
     1' Starting nodal point for this imperfection,    ISTART=',
     1 ISTART(IMODE),
     1' Number of nodal points at which WSHAPE is input, NUMB=',
     1 NUMB(IMODE),
     1' Number of nodal points in this shell segment,      I5=',I5
      I = 0
181   CONTINUE
      I = I + 1
      REWIND IFILE2
      IF (I.GT.NUMB(IMODE)) GO TO 1815
      CALL DATUM(IFILE2,720,1,2,INT,WSHAPE(I,IMODE),CHARAC,IOUT,0,1)
      WRITE(IFILE4,'(A,I3,A,1P,E12.4)')
     1' Mode no.',IMODE,
     1' Normalized normal displacement of imperfection, WSHAPE=',
     1  WSHAPE(I,IMODE)
      GO TO 181
1815  CONTINUE
      CALL DATUM(IFILE2,722,1,2,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 183 
      IMODE = IMODE + 1
      GO TO 1792
183   CONTINUE
      REWIND IFILE2
      DO 184 I=1,I5
184   WTOT(I) = 0.0
      DO 186 JMODE = 1,IMODE
      NUMBMD = NUMB(JMODE)
      DO 185 I = 1,NUMBMD
      IWTOT = I + ISTART(JMODE) -1
      WTOT(IWTOT) = WTOT(IWTOT) + AMPIMP(JMODE)*WSHAPE(I,JMODE)
185   CONTINUE
186   CONTINUE
C
      DO 210 I=1,I5
      SPHI = R(I)*C2(I)
      CPHI = RD(I)
      FK1 = C1(I)
      WW= WTOT(I)
      IF (I.GT.1) GO TO 180
      WD = (WTOT(2) -WW)/(S(2) - S(1))
      WDD = ((WTOT(3)-WTOT(2))/(S(3)-S(2)) -WD)/(0.5*(S(3)-S(1)))
      GO TO 200
  180 IF (I.LT.I5) GO TO 190
      WD = (WW-WTOT(I-1))/(S(I) - S(I-1))
      WDD=(WD-(WTOT(I-1)-WTOT(I-2))/(S(I-1)-S(I-2)))/(.5*(S(I)-S(I-2)))
      GO TO 200
  190 IP = I+1
      IM = I-1
      WD = (WTOT(IP) -WTOT(IM))/(S(IP)-S(IM))
      WDD=((WTOT(IP)-WW)/(S(IP)-S(I)) -(WW-WTOT(IM))/(S(I)-S(IM)))/
     1  (0.5*(S(IP)-S(IM)))
  200 R(I) = R(I) +WW*SPHI
      Z(I) = Z(I) - WTOT(I)*CPHI
      FACT = 1./SQRT(1. + WD*WD)
      RD(I) = FACT*(CPHI + WD*SPHI)
      C1(I) = FK1 - WDD
      IF (R(I).NE.0.0) C2(I) = FACT*(SPHI - CPHI*WD)/R(I)
  210 CONTINUE
  220 CONTINUE
      WRITE (IFILE4,230)ISEG
  230 FORMAT(//52H NORMAL (POSITIVE OUTWARD) IMPERFECTION FOR SEGMENT
     1  I3//)
      WRITE (IFILE4,240)(WTOT(I),I=1,I5)
  240 FORMAT(1P10E12.4)
C END AUG 2005
      RETURN
      END
-----------------------------------------------------------------------

The QUESTIONS.SRC library was modified as follows:
-----------------------------------------------------------------------
C=DECK      IMPERQ
      SUBROUTINE IMPERQ
C
C  PURPOSE IS TO ASK QUESTIONS RELATIVE TO AXISYMMETRIC IMPERFECTION
C
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4
      COMMON/INDAT/INFILE
C BEG AUG 2005
      CHARACTER*4 ANSOUT,CHARAC
      LOGICAL ANSL1
C END AUG 2005
C
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ IMPERFECTION SHAPE FOLLOWS...')
      REWIND IFILE2
      CALL DATUM(IFILE2,132,0,0,INT,REALL,CHARAC,IOUT,0,1)
    7 CONTINUE
      CALL DATUM(IFILE2,133,1,1,IMP,REALL,CHARAC,IOUT,0,1)
      IF (IMP.NE.0.AND.IMP.NE.1) THEN
       WRITE(6,*)' IMP  MUST BE EITHER  0  or  1'
       BACKSPACE(IOUT)
       REWIND IFILE2
       GO TO 7
      ENDIF
C
C
      IF (IMP.EQ.0) GO TO 200  
C
    9 CONTINUE
      CALL DATUM(IFILE2,134,1,2,ITYPE,REALL,CHARAC,IOUT,0,1)
C BEG AUG 2005
      IF (ITYPE.NE.1.AND.ITYPE.NE.2.AND.ITYPE.NE.3
     1                             .AND.ITYPE.NE.4) THEN
       WRITE(6,*)' ITYPE MUST BE EITHER 1 OR 2 OR 3 OR 4'
C END AUG 2005
       BACKSPACE(IOUT)
       REWIND IFILE2
       GO TO 9
      ENDIF
C
C BEG AUG 2005
C     GO TO (30,130,170),ITYPE
      GO TO (30,130,170,179),ITYPE
C END AUG 2005
30    CONTINUE    
C     RANDOM SERIES OF SINUSOIDAL IMPERFECTIONS 
C     
      CALL DATUM(IFILE2,135,1,1,INT,FM   ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,136,1,1,INT,C    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,137,1,1,INT,FLMIN,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,138,1,1,INT,FLMAX,CHARAC,IOUT,0,1)
      GO TO 180   
  130 CONTINUE
C     
C     IMPERFECTION IS SIMPLE SINE WAVE    
C     
      CALL DATUM(IFILE2,139,1,1,INT,W0    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,140,1,2,INT,WLNGTH,CHARAC,IOUT,0,1)
      GO TO 180   
170   CONTINUE    
C     DUMMY POSITION ,  TO BE FILLED IN BY USER.
C  IMPERFECTION IS DETERMINISTIC SUM OF SINUSOIDS.
      CALL DATUM(IFILE2,135,1,1,INT,FM   ,CHARAC,IOUT,0,1)
      M = FM
      I = 0
171   CONTINUE
      I = I + 1
      REWIND IFILE2
      IF (I.GT.M) GO TO 173
      CALL DATUM(IFILE2,139,1,1,INT,W0    ,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,140,1,2,INT,WLNGTH,CHARAC,IOUT,0,1)
      GO TO 171
173   CONTINUE
C BEG AUG 2005
      GO TO 180
C
179   CONTINUE
C     READ NORMAL DEFLECTION W AT SOME NODAL POINTS 
C
C23456789012345678901234567890123456789012345678901234567890123456789012
1792  CONTINUE
      REWIND IFILE2
      CALL DATUM(IFILE2,705,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,710,1,2,INT,AMPIMP,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,714,1,2,ISTART,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,716,1,2,NUMB,REALL,CHARAC,IOUT,0,1)
      I = 0
181   CONTINUE
      I = I + 1
      REWIND IFILE2
      IF (I.GT.NUMB) GO TO 1815
      CALL DATUM(IFILE2,720,1,2,INT,WSHAPE,CHARAC,IOUT,0,1)
      GO TO 181
1815  CONTINUE
      CALL DATUM(IFILE2,722,1,2,INT,REALL,ANSOUT,IOUT,0,1)
      IF (ANSL1('N',ANSOUT,INFILE)) GO TO 183
      GO TO 1792
183   CONTINUE
      REWIND IFILE2
C END AUG 2005
180   CONTINUE    
200   CONTINUE
      RETURN
      END   
---------------------------------------------------------------------




18. September 2005
A capability to analyze shell segments with isogrid stiffening was
added to bigbosor4. The isogrid option is limited as follows:

a. Isogrid may only be added to monocoque isotropic segments (NWALL = 2)
b. The isogrid members must be of rectangular cross section. (No I's T's etc.)

SUBROUTINE CFB1 (in which stiffening is added) was modified as follows:
-------------------------------------------------------------------------
C=DECK      CFB1
      SUBROUTINE CFB1(I,RAD,NWALL,Z,TD,I5,S,C,RADD)
C     CALLED FROM WALLCF, WHICH IS CALLED FROM READIT, WHICH IS CALLED
C     FROM MAIN. CAUSES CIJ TO BE READ IN DIRECTLY OR MODIFIES SHELL
C     WALL STIFFNESS COEFFICIENTS CIJ TO ACCOUNT FOR MERIDIONAL AND/OR
C     CIRCUMFERENTIAL STIFFENERS WHICH ARE SMEARED OUT ACCORDING TO
C     THE BARUCH-SINGER THEORY.
C
C     ALSO CALLED FROM CFB2,CFB4,CFB5,CFB6,CFB7, AND CFB8.
C
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(195)
C END SEP 2005

    (many lines skipped to save space)

      CALL DATUM(IFILE2,501,1,1,INT,REALL,ANSWER,IOUT,0,1)
      IF (ANSL1('N',ANSWER,INFILE)) GO TO 130
C
C BEG SEP 2005
      N1 = 1
      IF (ISOGRD(ISEGMT).EQ.0)
     1CALL DATUM(IFILE2,502,1,1,N1,REALL,CHARAC,IOUT,0,1)
C END SEP 2005
      CALL DATUM(IFILE2,503,1,2,K1,REALL,CHARAC,IOUT,0,1)
      IF (K1.NE.0.AND.K1.NE.1) THEN
       WRITE(IFILE4,*)' K1 NOT IN PERMISSIBLE RANGE 0 TO 1'
       CALL ERREX
      ENDIF
      CALL DATUM(IFILE2,504,1,1,INT,E1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,505,1,1,INT,U1,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,506,1,1,INT,STIFMD,CHARAC,IOUT,0,1)
C BEG SEP 2005
      IF (ISOGRD(ISEGMT).EQ.1)
     1CALL DATUM(IFILE2,507,1,2,INT,SPACNG,CHARAC,IOUT,0,1)
C END SEP 2005
      CALL DATUM(IFILE2,509,1,1,INT,REALL,ANSCON,IOUT,0,1)
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 80
C
C    STRINGER CROSS SECTION VARIES IN THE MERIDIONAL DIRECTION..
C
      IVAR1 = 1
      CALL DATUM(IFILE2,510,1,2,NSTATN,REALL,CHARAC,IOUT,0,1)
      IF (NSTATN.LT.2.OR.NSTATN.GT.20) THEN
       WRITE(IFILE4,*)' NSTATN NOT IN PERMISSIBLE RANGE 2 TO 20'
       CALL ERREX
      ENDIF
      IPRM(2) = 511
      CALL STA(ISTATN,ZAXIAL,RAD,RADD,S,NSTATN,I5)
   80 CONTINUE
C BEG SEP 2005
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         CALL DATUM(IFILE2,514,1,1,INT,REALL,ANSREC,IOUT,0,1)
         IF (ANSL1('N',ANSREC,INFILE)) GO TO 90
      ENDIF
C END SEP 2005
C
C   STRINGER CROSS SECTIONS ARE RECTANGULAR...
C
      IF (ANSL1('Y',ANSCON,INFILE)) GO TO 85

  (many lines skipped to save space)

590   CONTINUE
      AN1 = N1
      IF (AN1.EQ.0.0) AN1 = 1.0
      IF (D2.EQ.0.0) D2 = 1.0
C BEG SEP 2005
600   CONTINUE
      IF (ISOGRD(ISEGMT).EQ.0) D1 = 2.*3.1415927*RAD(I)/AN1
      IF (ISOGRD(ISEGMT).EQ.1) D1 = SPACNG
C END SEP 2005
      IF (IRECT1.EQ.0) GO TO 640
      IF (IVAR1.EQ.0) GO TO 610

  (many lines skipped to save space)

740   CONTINUE
      IF (D1.EQ.0.0) D1 = 1.0
C BEG SEP 2005
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         C11=C11+E1*A1/D1
         C14=C14+(X1*E1*A1/D1)
         C22=C22+E2*A2/D2
         C25=C25+(X2*E2*A2/D2)
         C44=C44+(E1*XI1/D1+X1**2*E1*A1/D1)
         C55=C55+(E2*XI2/D2+X2**2*E2*A2/D2)
         C66=C66+0.25*(E1*XJ1/(2.*(1.+U1)*D1)+E2*XJ2/(2.*(1.+U2)*D2))
         SMPA = SMPA + STIFMD*A1/D1 + RGMD*A2/D2
      ELSE
         EEFF = E1*T1/D1
         FNUEFF = 0.3
         FNUDEN = 1. - FNUEFF**2
         C11ISO = EEFF*H1/FNUDEN
         C12ISO = FNUEFF*C11ISO
         C22ISO = C11ISO
         C33ISO = EEFF*H1/(2.*(1.+FNUEFF))
         C44ISO = EEFF*H1**3/(12.*FNUDEN)
         C55ISO = C44ISO
         C45ISO = FNUEFF*C44ISO
         C66ISO = C33ISO*H1**2/12.
         SMPA = SMPA + 3.0*STIFMD*A1/D1 + RGMD*A2/D2
         IF (K1.EQ.1) DSHIFT = -(H1/2. + TD - Z)
         IF (K1.EQ.0) DSHIFT = H1/2. + Z
C        IF (I.EQ.1) WRITE (IFILE4,'(A,I4,1P3E12.4)')
C    1 ' in CFB1: K1, TD, Z, DSHIFT=',K1, TD, Z, DSHIFT
         C11 = C11 + C11ISO
         C22 = C22 + C22ISO
         C12 = C12 + C12ISO
         C33 = C33 + C33ISO
         C14 = C14 + DSHIFT*C11ISO
         C15 = C15 + DSHIFT*C12ISO
         C24 = C24 + DSHIFT*C12ISO
         C25 = C25 + DSHIFT*C22ISO
         C36 = C36 - DSHIFT*C33ISO
         C44 = C44 + C44ISO + DSHIFT*DSHIFT*C11ISO
         C45 = C45 + C45ISO + DSHIFT*DSHIFT*C12ISO
         C55 = C55 + C55ISO + DSHIFT*DSHIFT*C22ISO
         C66 = C66 + C66ISO + DSHIFT*DSHIFT*C33ISO
       ENDIF
C END SEP 2005
      RETURN
      END
----------------------------------------------------------------------


In order to provide isogrid stiffening, the bigbosor4 user is given
an additional choice for the input index, NWALL (wall type). Previously,
NwALL could be a value up to 9. Now, NWALL = 10 is allowed. SUBROUTINE 
WALLS was modified as follows:
----------------------------------------------------------------------
C=DECK      WALLS
      SUBROUTINE WALLS(BBB,Z,S,DS,ZAX)
      COMMON/ALOFIT/INDSIG,II,ITOT,J,I,IBOUND,IPT,IRIGID,ISEG,I5I,KRING,
     1NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,LINTYP
      COMMON/NONEA/KRINGS,NPSTAT,NTSTAT,ARC(198),TT(600)
      COMMON/LOADHM/NLPOS(195),LAB(195),IDAB(195),
     1              ILPOS(12,195),PALL(20000)
      COMMON/SFLAG/ISTRES
      COMMON/STRSEG/ISTRSS(195)
      COMMON/TEMTUR/TEMP,DTEMP
      COMMON/SEGS/NSEG,M2,I5(195),I2,I2G
      COMMON/KCHNG/NNWALL(195),CCH(195)
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(195)
C END SEP 2005
      COMMON/ILVARS/ILVAR(11,195),ITREF(195),NLVAR(195),ITIO(195)
      CHARACTER*4 CHARAC
      DIMENSION BBB(*), Z(*),S(*),ZAX(*),DS(*)
C     CALCULATION OF WALL STIFFNESS COEFFICIENTS AND THERMAL LOADS,ITH S
10    FORMAT(10I6)
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ SHELL WALL CONSTRUCTION FOLLOWS...')
   20 CONTINUE
      CALL DATUM(IFILE2,340,0,0,INT,REALL,CHARAC,IOUT,0,1)
      CALL DATUM(IFILE2,341,1,2,NWALL,REALL,CHARAC,IOUT,0,1)
C BEG SEP 2005
      IF (NWALL.LT.1.OR.NWALL.GT.10) THEN
       WRITE(IFILE4,*)' NWALL NOT IN PERMISSIBLE RANGE 1 TO 10'
C END SEP 2005
       CALL ERREX
      ENDIF
C BEG SEP 2005
      ISOGRD(I) = 0
      IF (NWALL.EQ.10) THEN
C      rectangular isogrid members are added to monocoque isotropic wall:
         ISOGRD(I) = 1
      ENDIF
      IF (ISOGRD(I).EQ.1) NWALL = 2
C END SEP 2005
C
      NNWALL(I) = NWALL
-----------------------------------------------------------------------------

The .../execute/PROMPT2.DAT file was modified as follows:
-----------------------------------------------------------------------------
340.0 
      Wall construction input follows...

341.1 NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
341.2  
      NWALL = 1 means general C(i,j)  (see p.90)
      NWALL = 2 means monocoque isotropic
      NWALL = 4 means layered, composite layup, constant thickness
      NWALL = 5 means layered orthotropic, variable thickness
      NWALL = 6 means corrugated (corrugations run axially)
      NWALL = 7 means semi-sandwich axially corrugated, that is
                a smooth sheet is fastened to a corrugated sheet
      NWALL = 8 means layered orthotropic with temperature-
                dependent material properties, variable thickness
      NWALL = 9 means layered, composite layup with some layers
                with thickness that varies along the meridian.
      NWALL =10 means monocoque isotropic with added isogrid

      Smeared stiffeners may be added to any of these types.
      The smeared stiffeners may be either or both rings and
      stringers, or, if NWALL = 10, isogrid with members of
      rectangular cross section only..

350.0
      Input for arbitrary C(i,j) follows (see pp.90-91)...

 (many lines skipped in PROMPT2.DAT to save space)

447.1 A1(k)=coef. merid. thermal exp.,Ith layer,kth temp.,A1
448.1 A2(k)=coef. circ. thermal exp.,Ith layer,kth temp.,A2
500.0  
      Smeared stringer and ring properties are to be provided
      next by you. NOTE: You are allowed to add an isogrid
      stiffening scheme to a monocoque isotropic wall. The
      isogrid takes the place of "stringers" (meridional
      stiffeners). Isogrid members may be of rectangular
      cross section only. The rectangular cross section may
      vary along the meridian of the segment. If you have
      an isogrid stiffening scheme, please regard the word
      "stringers" in the following questions as a synonym
      for "isogrid" or "isogrid member".

501.1 Are there stringers or isogrid (please answer Y or N)?
502.1 N1    = number of stringers in 360 degrees
503.1 K1 =control (0 or 1) for internal or external stringers
503.2  
      K1 = 0 means stringers attached to leftmost surface;
      K1 = 1 means stringers attached to rightmost surface.

504.1 E1    = stringer modulus
505.1 U1    = stringer Poisson ratio
506.1 STIFMD= stringer mass density
507.1 SPACNG= spacing of the isogrid members
507.2
      SPACNG is the altitude of the isogrid equilateral
      triangle, NOT the length of one side of that triangle.

509.1 Is the stringer cross section constant in this segment?
510.1 NSTATN=number of merid. callouts for cross section props.
510.2  
      Range of NSTATN is 2 to 20
---------------------------------------------------------------

Changes were made to questions.src consistent with the above.

The new version of bigbosor4 was checked by comparing results
for an axially compressed and externally pressurized cylindrical
shell with isogrid stiffening with results from PANDA2 for general
buckling. (NOTE: BIGBOSOR4 cannot find local buckling of the triangular
piece of skin between adjacent isogrid members, nor can it determine
local buckling of an isogrid member.)

ANOTHER NOTE: You cannot use the processor, "modify", to modify the
input for isogrid stiffening.




19. September 2005
BIGBOSOR4 was modified to permit computation of buckling of the shell
skin between adjacent stringers. This is done by choosing the number of
circumferential waves in a segment with stringers equal to one half the
number of stringers in that segment. (The number of full circumferential
waves equals twice the number of circumferential halfwaves, and there is
one half wave between adjacent stringers.) The prebuckling meridional
and circumferential stress resultants are those in the shell skin and
the constitutive coefficients, C(i,j), i=1,6,j=1,6, are those for the
shell skin.

NOTE: bigBOSOR4 does this ONLY FOR AXISYMMETRICALLY LOADED SHELLS:
      (Analysis types, INDIC = -2, -1, 0, 1, 2)

New output in the *.OUT file is as follows:

 ****** SKIN BUCKLING ******* Shell segment no.   1; Number of stringers=  20 No. of circ. waves=  10
 "Variable" meridional resultant, FNSKNV(1,5)= -7.6222E-01
 "Fixed"    meridional resultant, FNSKNF(1,5)=  0.0000E+00
 "Variable" circumfer. resultant, FNSKNV(2,5)=  9.5066E-03
 "Fixed"    circumfer. resultant, FNSKNF(2,5)=  0.0000E+00

 ****** SKIN BUCKLING ******* Shell segment no.   2; Number of stringers=  40 No. of circ. waves=  20
 "Variable" meridional resultant, FNSKNV(1,5)= -4.8047E-01
 "Fixed"    meridional resultant, FNSKNF(1,5)=  0.0000E+00
 "Variable" circumfer. resultant, FNSKNV(2,5)= -1.3550E-02
 "Fixed"    circumfer. resultant, FNSKNF(2,5)=  0.0000E+00


 ****** SKIN BUCKLING EIGENVALUES FOLLOW *********
 Eigenvalues for skin buckling:
  3.1723E+04  3.2191E+04
 *************************************************

This new output is in addition to the usual output for the shell with
smeared stringers. The skin buckling option works only for the INDIC = 1
analysis branch.

The following coding was added to SUBROUTINE B4MAIN:
-----------------------------------------------------------------------------
      WRITE(IFILE4,'(/,A,/,A,/,A)')
     1' ***** EIGENVALUES AND MODE SHAPES *****',
     1'  EIGENVALUE(CIRC. WAVES)',
     1' ======================================='
      DO 326 I = 1,IWAVEB
        WRITE(IFILE4,'(A,1P,E12.4,A,I4,A)')
     1 '  ',EIGCOM(I),'(',NWVCOM(I),')'
  326 CONTINUE
      WRITE(IFILE4,'(A)')
     1' ======================================='
C BEG SEP 2005
      IBEG = 1
      KOUNT = 1
  327 CONTINUE
      IISKIN = 0
      DO 328 I = IBEG,NSEG
         IF (NUMSTF(I).GE.2) THEN
            N = NUMSTF(I)/2 + 0.1
            NSAVE(KOUNT) = N
            IF (KOUNT.GT.1) THEN
               KOUNT1 = KOUNT - 1
               DO 3272 J = 1,KOUNT1
                  IF (N.EQ.NSAVE(J)) GO TO 328
 3272          CONTINUE
            ENDIF
            IISKIN = 1
            IBEG = I + 1
            KOUNT = KOUNT + 1
            GO TO 329
         ENDIF
  328 CONTINUE
  329 CONTINUE
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1) THEN
         NVEC = NVECS
         CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,1)
         CALL BUCKLE(BMAT,CMAT,DI,DIAG)
C        CALL B4OUTM(BBB)
         IWAVEB = IWAVEB + 1
         NVECRL(IWAVEB) = NVEC
         NVECTL = NVECTL + NVECRL(IWAVEB)
         WRITE(IFILE4,'(/,/,A,/,A,/,(1P,5E12.4))')
     1 ' ****** SKIN BUCKLING EIGENVALUES FOLLOW *********',
     1 ' Eigenvalues for skin buckling:',(EGV(I),I=1,NVEC)
         WRITE(IFILE4,'(A,/,/)')
     1 ' *************************************************'
      ENDIF
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1.AND.
     1                   IBEG.GT.1.AND.IBEG.LE.NSEG) GO TO 327
C END SEP 2004
      GO TO 400   
330   CONTINUE    
C     VIBRATION OF PRESTRESSED SHELLS     
-----------------------------------------------------------------------------

There is a new argument in the argument list for SUBROUTINE ARRAYS, a variable
called "ISKIN" in SUBROUTINE ARRAYS. ISKIN is zero for the usual (smeared
stringer) model and unity for the model for buckling of the shell skin
between stringers. In the code fragment listed above the call to SUBROUTINE
ARRAYS is as follows:

         CALL ARRAYS(BBB,BMAT,CMAT,DI,DIAG,1)

The new argument is the "one", which is the last argument. SUBROUTINE ARRAYS
was modified as follows:
----------------------------------------------------------------------------
C=DECK      ARRAYS
C BEG SEP 2005
      SUBROUTINE ARRAYS(BBB,B,C,DI,DIAG,ISKIN)
C END SEP 2005
C
C     CALLED FROM MAIN.. FINDS STIFFNESS MATRIX FOR UNLOADED SHELL,
C     MATRIX OF ELEMENTS ARISING FROM PRESTRESS AND PRE-DEFORMATION,
C     AND MASS MATRIX, ALL FOR A GIVEN CIRCUMFERENTIAL WAVE NUMBER N.
C
    (many lines skipped to save space)
C
C     BASIC STIFFNESS MATRIX CALCULATED (IBUCK=1)
C
      IF (NPRT.GT.1) WRITE(IFILE4,40)
40    FORMAT(/,'    BEGIN STIFFNESS MATRIX COMPUTATION. IBUCK = 1')
      IF (NPRT.GT.1) CALL SR100T(2)
C BEG SEP 2005
      CALL ASTAB(1,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
      IF (NPRT.GT.1) WRITE(IFILE4,50)
50    FORMAT('    STIFFNESS MATRIX COMPUTED, IBUCK = 1')
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (INDIC.EQ.3.OR.INDIC.EQ.-2) GO TO 110
      IF (INDIC.EQ.2) GO TO 90
60    CONTINUE
C
C     LOAD-GEOMETRIC MATRIX COMPUTATION
C
C BEG SEP 2005
      CALL ASTAB(2,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
      IF (NPRT.GT.1) WRITE(IFILE4,70)
70    FORMAT('    LOAD-GEOMETRIC MATRIX COMPUTED. IBUCK=2.')
      IF (NPRT.GT.1) CALL SR100T(2)
90    IF (INDIC.NE.2) GO TO 110
C
C     MASS MATRIX IS DERIVED FOR VIBRATION PROBLEMS (INDIC=2,IBUCK=3)
C
C BEG SEP 2005
      CALL ASTAB(3,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
      IF (NPRT.GT.1) WRITE(IFILE4,100)
100   FORMAT('    MASS MATRIX COMPUTED, IBUCK = 3')
--------------------------------------------------------------------


SUBROUTINES ASTAB and STABIL were modified as follows:
-------------------------------------------------------------------
C=DECK      ASTAB
C./      ADD   NAME=ASTAB
C BEG SEP 2005
      SUBROUTINE ASTAB(IBUCK,B,IFB,RHF,RHFIX,IW,ILOC,DS,BBB,FB,ISKIN)
C END SEP 2005
C
C     CALLED FROM ARRAYS, WHICH IS CALLED FROM MAIN. FINDS COEFFICIENT
C     MATRICES FOR ALL SHELL SEGMENTS FOR A GIVEN VALUE OF WAVENUMBER N.
C     WITH IBUCK = 1, STIFFNESS MATRIX OF SHELL LOADED BY FIXED LOADS
C                     IS DERIVED.
C     WITH IBUCK=2, THE LOAD-GEOMETRIC MATRIX IS CALCULATED (BUCKLING)
C     WITH IBUCK=3, THE MASS MATRIX IS CALCULATED (VIBRATION)
C     WITH IBUCK=4, THE LAMBDA-SQUARED MATRIX IS COMPUTED (BUCKLING)
C
      DOUBLE PRECISION B,FB
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(195),IRECT(2,195),INTEXT(2,195),ISTSMR(2,195)
      COMMON/NUMSTX/NUMSTF(195)
      COMMON/IDCSKN/ICSKIN(195)
      COMMON/IDMSKN/INSKIN(2,195)
      DIMENSION FNSKNV(2,100),FNSKNF(2,100),CSKIN(6,6,100)
C END SEP 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/GLOBAL/IDZ,IZRING(198),ISAVE(20),INOTE

  (many lines skipped to save space)

      GO TO 50
60    CONTINUE
C BEG SEP 2005
      IF (ISKIN.EQ.1) THEN
         CALL MOVER(0.,0,FNSKIN,1,200)
         CALL MOVER(0.,0,CSKIN,1,3600)
         IF (ISTSMR(1,I).EQ.1) THEN
            CALL GASP(CSKIN,3600,3,ICSKIN(I))
            CALL GASP(FNSKNV,200,3,INSKIN(1,I))
            CALL GASP(FNSKNF,200,3,INSKIN(2,I))
         ENDIF
      ENDIF
C END SEP 2005
      IF (INDIC.EQ.3) CALL STABIL(I,I5I,DS(ITOT),NSEG,IBUCK,
     1 BBB(8*I5I+IPOS),BBB(27*I5I+IPOS),BBB(22*I5I+IPOS),FB,B,IW,
     2 BBB(IPOS),ILOC,IFX,IFIX,IROWCB,ITYPE,IMAX,BBB(33*I5I+IPOS),
     3 BBB(36*I5I+IPOS),RHF,RHFIX,RM,IFXB(1,2),PALL,ILPOS(1,I),
C BEG SEP 2005
     4 Z(ITOT),ISKIN,NUMSTF(I),FNSKNV,FNSKNF,CSKIN)
C END SEP 2005
C
      IF (INDIC.NE.3)
     1CALL STABIL(I,I5I,DS(ITOT),NSEG,IBUCK,BBB(8*I5I+IPOS),
     1BBB(27*I5I +IPOS),BBB(22*I5I+IPOS),FB,B,IW,BBB(IPOS),ILOC,IFXB,
     2IFIXB,IROWCB,ITYPEB,IMAX,BBB(33*I5I+IPOS),BBB(36*I5I+IPOS),
C BEG SEP 2005
     3RHF,RHFIX,RM,IFXB(1,2),PALL,ILPOS(1,I),Z(ITOT),
     4ISKIN,NUMSTF(I),FNSKNV,FNSKNF,CSKIN)
C END SEP 2005
C
      ITOT = ITOT + I5I
      ITOTL = ITOTL + I5I
70    CONTINUE
      RETURN
      END
C
C
C
C=DECK      STABIL
      SUBROUTINE STABIL(ISEG,L5,HS,NSEG,IBUCK,COEF,PR,BG,FFF,AS,IW,THERM
     1,ILOC,IFX,IFIX,IROWC,ITYPE,IMAX,PSVAR,PSFIX,RHF,RHFIX,RM,IROWCN,
C BEG SEP 2005
     1 PALL,IPOS,Z,
     1ISKIN,NUMSTF,FNSKNV,FNSKNF,CSKIN)
C END SEP 2005
C
C     CALLED FROM ASTAB, WHICH IS CALLED FROM ARRAYS, WHICH IS CALLED
C     FROM MAIN.  SETS UP STABILITY OR VIBRATION OR NONSYMMETRIC
C     STRESS EQUATIONS FOR CURRENT SEGMENT (ISEG) AND CURRENT WAVE-
C     NUMBER N. SEE THE DESCRIPTION UNDER PRESTS FOR MORE DETAILS OF
C     METHOD. BASED ON MINIMIZATION OF ENERGY WITH RESPECT TO MESH
C     POINT DISPLACEMENTS.
C
      DOUBLE PRECISION  R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION C,B1,D,  G,E,TR1,U,ROT,TR2,PRE,TR3,G1,QD,AS
      DOUBLE PRECISION DS,SMS,RHORC,RHORCA,CHIFIX,CHIVAR
      DOUBLE PRECISION FFF,VN1,VN2,WB,VB,UB,QSAVE
      DOUBLE PRECISION USTAR,VSTAR,WSTAR,HPAST,HI,WBD
      DOUBLE PRECISION RNT
      DIMENSION RNT(6,7),PRE(6,6)
C BEG SEP 2005
      DIMENSION FNSKNV(2,100),FNSKNF(2,100),CSKIN(6,6,100)
C END SEP 2005
      DIMENSION UB(7),VB(7),WB(7),HS(*),WBD(7),Z(*)

  (many lines skipped to save space)

      VB(3) = 0.5
      VB(6) = 0.5
      FN = FLOAT(N)
C BEG SEP 2005
      ISKINS = ISKIN
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         FNTRY = FLOAT(NUMSTF/2) + 0.1
         NTRY  = FNTRY
         IF (NTRY.NE.N) ISKINS = 0
      ENDIF
      IF (ISKINS.EQ.1.AND.IBUCK.EQ.1) THEN
        WRITE(IFILE4,'(/,A,A,I4,A,I4,A,I4)')
     1' ****** SKIN BUCKLING *******',
     1' Shell segment no.',ISEG,'; Number of stringers=',NUMSTF,
     1' No. of circ. waves=',N
        WRITE(IFILE4,'(A,1P,E12.4,/,A,1P,E12.4)')
     1' "Variable" meridional resultant, FNSKNV(1,5)=',FNSKNV(1,5),
     1' "Fixed"    meridional resultant, FNSKNF(1,5)=',FNSKNF(1,5) 
        WRITE(IFILE4,'(A,1P,E12.4,/,A,1P,E12.4)')
     1' "Variable" circumfer. resultant, FNSKNV(2,5)=',FNSKNV(2,5),
     1' "Fixed"    circumfer. resultant, FNSKNF(2,5)=',FNSKNF(2,5)
      ENDIF
C END SEP 2005

  (many lines skipped to save space)

140   CONTINUE
C     DIFFERENCE EXPRESSIONS FOR W,W' FOR VARIABLE SPACING
C
      CALL GETWWD(H,HI,HPAST,WB,WBD)
C     CONSTITUTIVE EQUATION COEFFICIENTS
C BEG SEP 2005
C  Wall stiffeness for buckling of skin between "smeared" stringers...
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         C(1,1) = CSKIN(1,1,I)*RDS
         C(1,2) = CSKIN(1,2,I)*RDS
         C(1,4) = CSKIN(1,4,I)*RDS
         C(1,5) = CSKIN(1,5,I)*RDS
         C(2,2) = CSKIN(2,2,I)*RDS
         C(2,4) = CSKIN(2,4,I)*RDS
         C(2,5) = CSKIN(2,5,I)*RDS
         C(3,3) = CSKIN(3,3,I)*RDS
         C(3,6) = CSKIN(3,6,I)*RDS
         C(4,4) = CSKIN(4,4,I)*RDS
         C(4,5) = CSKIN(4,5,I)*RDS
         C(5,5) = CSKIN(5,5,I)*RDS
         C(6,6) = CSKIN(6,6,I)*RDS
         C(2,1) = C(1,2)
         C(4,1) = C(1,4)
         C(5,1) = C(1,5)
         C(4,2) = C(2,4)
         C(5,2) = C(2,5)
         C(6,3) = C(3,6)
         C(5,4) = C(4,5)
      ELSE
         CALL GETC(L5,I,COEF,C)
      ENDIF
C END SEP 2005
C     KINEMATIC RELATIONS FOR UNDEFORMED SHELL
      CALL GETROT(ROT,I,L5,ISIG,WB,WBD)
      CHIFIX = PSFIX(I,3)

  (many lines skipped to save space)

160   IF (IBUCK.NE.2) GO TO 200
C     VN1 = MERIDONAL PRESTRESS RESULTANT
C     VN2 = CIRCUMFERENTIAL PRESTRESS RESULTANT
C BEG SEP 2005
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         IF (INDIC.NE.4) THEN
          VN1 = RDS*(FNSKNV(1,I)-     FNSKNF(1,I))
          VN2 = RDS*(FNSKNV(2,I)-     FNSKNF(2,I))
         ELSE
          VN1 = RDS*FNSKNV(1,I)
          VN2 = RDS*FNSKNV(2,I)
         ENDIF
      ELSE
C END SEP 2005
         IF (INDIC.NE.4) THEN
          VN1 = RDS*(PSVAR(I,1)-     PSFIX(I,1))
          VN2 = RDS*(PSVAR(I,2)-     PSFIX(I,2)) + FN2MOR*RDS
         ELSE
          VN1 = RDS*PSVAR(I,1)
          VN2 = RDS*PSVAR(I,2) + FN2MOR*RDS
         ENDIF
C BEG SEP 2005
      ENDIF
C END SEP 2005
C     'VARIABLE' PRESSURE-ROTATION EFFECT
      IF (INDIC.NE.4)
     1  CALL GETPB5(STEP,PR(I,3),0.,0.,UB,VB,WB,B1,ROT,U)
      IF (INDIC.EQ.4.AND.IPRE.EQ.1)
     1  CALL GETPB5(PSVAR(I,3),PR(I,3),0.,0.,UB,VB,WB,B1,ROT,U)
      PRE(1,1) = VN1
      PRE(2,2) = VN2
---------------------------------------------------------------------


SUBROUTINE B4POST was modified as follows:
--------------------------------------------------------------------
290   CONTINUE
300   IINCR = IABS(INCRB)
      IWAVEB = 0
      DO 320 N = NMINB,NMAXB,IINCR
      IWAVEB = IWAVEB + 1
      NVEC = NVECRL(IWAVEB)
      CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
      CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
      NVECTL = NVECTL + NVECRL(IWAVEB)
      IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
320   CONTINUE
C BEG SEP 2005
      IBEG = 1
      KOUNT = 1
  327 CONTINUE
      IISKIN = 0
      DO 328 I = IBEG,NSEG
         IF (NUMSTF(I).GE.2) THEN
            N = NUMSTF(I)/2 + 0.1
            NSAVE(KOUNT) = N
            IF (KOUNT.GT.1) THEN
               KOUNT1 = KOUNT - 1
               DO 3272 J = 1,KOUNT1
                  IF (N.EQ.NSAVE(J)) GO TO 328
 3272          CONTINUE
            ENDIF
            IISKIN = 1
            IBEG = I + 1
            KOUNT = KOUNT + 1
            GO TO 329
         ENDIF
  328 CONTINUE
  329 CONTINUE
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1) THEN
         WRITE(IFILE4,'(/,A,/,A,/,A,/,A)')
     1 ' *********** SKIN BUCKLING MODES ***************',
     1 ' The following modes are for buckling of the shell',
     1 ' skin between adjacent stringers.',
     1 ' *********** SKIN BUCKLING MODES ***************'
         IWAVEB = IWAVEB + 1
         NVEC = NVECRL(IWAVEB)
         CALL MODE1(1,BBB,BMODE,TMODE,SMODE)
         CALL B4OUT(1,BBB,BMODE,TMODE,SMODE)
         NVECTL = NVECTL + NVECRL(IWAVEB)
         IF (NLAST.GE.0) CALL PLOT11(1,BBB,BMODE,TMODE,SMODE)
      ENDIF
      IF (INDIC.EQ.1.AND.IISKIN.EQ.1.AND.
     1                   IBEG.GT.1.AND.IBEG.LE.NSEG) GO TO 327
C END SEP 2004
      GO TO 400
C
340   CONTINUE
350   CONTINUE
--------------------------------------------------------------------


There is new output from SUBROUTINE B4POST for the skin buckling
modes:
--------------------------------------------------------------------
 (lines omitted to save space)

   92   1.957E+02   1.902E-02   1.692E-03   8.815E-03
   93   1.968E+02   1.911E-02   1.263E-03   6.552E-03
   94   1.979E+02   1.918E-02   8.396E-04   4.340E-03
   95   1.989E+02   1.922E-02   4.239E-04   2.189E-03
   96   1.997E+02   1.923E-02   1.148E-04   5.948E-04
   97   2.000E+02   1.923E-02   5.004E-18   3.652E-17

 *********** SKIN BUCKLING MODES ***************
 The following modes are for buckling of the shell
 skin between adjacent stringers.
 *********** SKIN BUCKLING MODES ***************

 BUCKLING LOADS AND MODES FOLLOW

 CIRCUMFERENTIAL WAVE NUMBER, N =     10

 EIGENVALUES =
  3.1723E+04  3.2191E+04

 CRITICAL LOAD COMBINATION FOR EIGENVALUE NO.  1 FOLLOWS


 ANALYSIS TYPE (INDIC) = 1
 NEWTON-RAPHSON ITERATIONS REQUIRED FOR LAST PRESTRESS SOLUTION = 2

 PRESSURE, TEMPERATURE RISE, ANGULAR VELOCITY, AND LINE LOADS FOLLOW...

 PRESSURE MULTIPLIER    (LOAD SYSTEM "A") =   0.000000E+00
 TEMPERATURE MULTIPLIER (LOAD SYSTEM "A") =   0.000000E+00
 ANGULAR VELOCITY, OMEGA                  =   0.000000E+00

 LINE LOADS FOLLOW...(LOAD SYSTEM "A")

 I =  1, AXIAL LOAD/LENGTH V(I)=  3.1723E+04
 RADIAL LOAD/LENGTH H(I)=  0.0000E+00 MOMENT/LENGTH M(I)=  0.0000E+00

 LINE LOADS FOLLOW...(LOAD SYSTEM "B")

 I =  1, AXIAL LOAD/LENGTH VFIX(I)=  0.0000E+00
 RADIAL LOAD/LENGTH HFIX(I)=  0.0000E+00 MOMENT/LENGTH MFIX(I)=  0.0000E+00

 MODE SHAPE FOR EIGENVALUE NO.  1 FOLLOWS

 BUCKLING MODE FOR SEGMENT  1

 POINT    STATION       U            V            W
        (ARC LENGTH)  MERID.      CIRCUMF.      NORMAL
                    DISPLACEMENT   DISP.    DISPLACEMENT

    1   0.000E+00   1.360E-04   8.206E-22   3.429E-20
    2   2.926E-01   1.361E-04   2.369E-06   1.655E-05
    3   1.077E+00   1.366E-04   8.692E-06   6.087E-05
    4   2.128E+00   1.381E-04   1.706E-05   1.193E-04
    5   3.191E+00   1.405E-04   2.532E-05   1.765E-04
    6   4.255E+00   1.438E-04   3.326E-05   2.308E-04

   (lines omitted to save space)
-----------------------------------------------------------------------------





20. September 2005
bigbosor4 was modified to permit computation of the following
additional behaviors:

a. Local buckling of the skin of a shell when that skin is
stiffened by an isogrid.

b. Buckling of a stiffener in a model in which the set of
like stiffeners (stringers or isogrid or rings) is smeared out
in the bigBOSOR4 model.

c. Maximum stress in a stiffener in a manner analogous to b.

For each shell segment bigBOSOR4 now computes the minimum
skin buckling load factor, the minimum stiffener buckling load
factor, and the maximum effective stress in a smeared stiffener.

NOTE: bigBOSOR4 does this ONLY FOR AXISYMMETRICALLY LOADED SHELLS:
      (Analysis types, INDIC = -2, -1, 0, 1, 2). The smeared
      stiffeners (stringers, rings, isogrid) MUST HAVE RECTANGULAR 
      CROSS SECTIONS.

The new output (for an externally pressurized isogrid-stiffened
torispherical head) in the *.OUT file appears as follows:
--------------------------------------------------------------------------------------
 ISEG,ISOGRD(IS)=    1    1
 Segment no.    1 Minimum skin buckling load factor,BUCMIN(IS)=  2.4114E+01
 Segment no.    1 Minimum isogrid member buckling load factor, BUCMNS(IS)=  9.8306E-01
 Segment no.    1 Maximum stringer (or isogrid member) stress, STFMXS(IS)=  2.0268E+05
 ISEG,ISOGRD(IS)=    2    1
 Segment no.    2 Minimum skin buckling load factor,BUCMIN(IS)=  8.2028E+00
 Segment no.    2 Minimum isogrid member buckling load factor, BUCMNS(IS)=  3.0349E-01
 Segment no.    2 Maximum stringer (or isogrid member) stress, STFMXS(IS)=  4.2003E+05

 Minimum local skin buckling load factor      BUCSKN=  8.2028E+00
 Minimum local stiffener buckling load factor BUCSTF=  3.0349E-01
 Maximum local stiffener stress               STRSTF=  4.2003E+05
--------------------------------------------------------------------------------------

This modification was implemented by adding new code to SUBROUTINES
WALLCF, CFB1, and PLOCAL, as follows:
------------------------------------------------------------------
C=DECK      WALLCF
      SUBROUTINE WALLCF(II,NWALL,I5,TT,ILT,RAD,C,THERM,ZREF,S,TEMP,
     1TIO,NSEG,RADD,CUR1,CUR2,ZAXIAL,DS,ITOT)
C
C     CALLED FROM READIT, WHICH IS CALLED FROM MAIN.
C     THE WALL STIFFNESS COEFFICIENTS CIJ ARE CALCULATED FOR THE
C     CURRENT SEGMENT, II. SEVERAL TYPES OF SHELL WALLS MAY BE
C     INCLUDED IN THE ANALYSIS OF A COMPOSITE SHELL STRUCTURE, AS LONG
C     AS THE MODEL REMAINS AXISYMMETRIC.
C BEG AUG 1999
      COMMON/TOTMAX/TOTMAS
      COMMON/CWWALL/CW11,CW12,CW14,CW15,CW22,CW24,CW25,
     1              CW44,CW45,CW55,CW33,CW36,CW66,SMPAW
C END AUG 1999
      COMMON/OUTP/NPRT
      COMMON/IDZREF/IZREF(195)
C BEG SEP 2005
      COMMON/IDCSKN/ICSKIN(195)
      COMMON/CSKINX/CSKIN(6,6,100)
      COMMON/IDSTFP/ISTFPR(195)
      COMMON/STFPRX/STFPRP(4,2,100)
C END SEP 2005

  (many lines skipped to save space)

C     SHELL MASS/SURFACEAREA
      C(I,14) = SMPA
C BEG SEP 2005
      CALL GASP(CSKIN,3600,1,ICSKIN(II))
      CALL GASP(STFPRP,800,1,ISTFPR(II))
C END SEP 2005
      IF (C11.EQ.0.) THEN
         WRITE(IFILE4,*)
     1 ' ZERO STIFFNESS C11 DETECTED AT NODAL POINT', I
         REWIND IFILE2
         GO TO 25
      ENDIF

-------------------------------------------------------
C=DECK      CFB1
      SUBROUTINE CFB1(I,RAD,NWALL,Z,TD,I5,S,C,RADD)
C     CALLED FROM WALLCF, WHICH IS CALLED FROM READIT, WHICH IS CALLED
C     FROM MAIN. CAUSES CIJ TO BE READ IN DIRECTLY OR MODIFIES SHELL
C     WALL STIFFNESS COEFFICIENTS CIJ TO ACCOUNT FOR MERIDIONAL AND/OR
C     CIRCUMFERENTIAL STIFFENERS WHICH ARE SMEARED OUT ACCORDING TO
C     THE BARUCH-SINGER THEORY.
C
C     ALSO CALLED FROM CFB2,CFB4,CFB5,CFB6,CFB7, AND CFB8.
C
C BEG SEP 2005
      COMMON/ISOGRX/ISOGRD(195),IRECT(2,195),INTEXT(2,195),ISTSMR(2,195)
      COMMON/NUMSTX/NUMSTF(195)
      COMMON/CSKINX/CSKIN(6,6,100)
      COMMON/STFPRX/STFPRP(4,2,100)
C END SEP 2005


 (many, many lines skipped to save space)


740   CONTINUE
      IF (D1.EQ.0.0) D1 = 1.0
C BEG SEP 2005
C
      IF (I.EQ.1) THEN
         IRECT(1,ISEGMT) = IRECT1
         IRECT(2,ISEGMT) = IRECT2
         INTEXT(1,ISEGMT) = K1
         INTEXT(2,ISEGMT) = K2
         IF (E1.GT.0.0) ISTSMR(1,ISEGMT) = 1
         IF (E2.GT.0.0) ISTSMR(2,ISEGMT) = 1
      ENDIF
C
      STFPRP(1,1,I) = T1
      STFPRP(2,1,I) = H1
      STFPRP(3,1,I) = D1
      STFPRP(4,1,I) = E1
C
      STFPRP(1,2,I) = T2
      STFPRP(2,2,I) = H2
      STFPRP(3,2,I) = D2
      STFPRP(4,2,I) = E2
C
      CSKIN(1,1,I) = C11
      CSKIN(1,2,I) = C12
      CSKIN(1,3,I) = C13
      CSKIN(1,4,I) = C14
      CSKIN(1,5,I) = C15
      CSKIN(1,6,I) = C16
      CSKIN(2,1,I) = C12
      CSKIN(2,2,I) = C22
      CSKIN(2,3,I) = C23
      CSKIN(2,4,I) = C24
      CSKIN(2,5,I) = C25
      CSKIN(2,6,I) = C26
      CSKIN(3,1,I) = C13
      CSKIN(3,2,I) = C23
      CSKIN(3,3,I) = C33
      CSKIN(3,4,I) = C34
      CSKIN(3,5,I) = C35
      CSKIN(3,6,I) = C36
      CSKIN(4,1,I) = C14
      CSKIN(4,2,I) = C24
      CSKIN(4,3,I) = C34
      CSKIN(4,4,I) = C44
      CSKIN(4,5,I) = C45
      CSKIN(4,6,I) = C46
      CSKIN(5,1,I) = C15
      CSKIN(5,2,I) = C25
      CSKIN(5,3,I) = C35
      CSKIN(5,4,I) = C45
      CSKIN(5,5,I) = C55
      CSKIN(5,6,I) = C56
      CSKIN(6,1,I) = C16
      CSKIN(6,2,I) = C26
      CSKIN(6,3,I) = C36
      CSKIN(6,4,I) = C46
      CSKIN(6,5,I) = C56
      CSKIN(6,6,I) = C66
C
      IF (ISOGRD(ISEGMT).EQ.0) THEN
         C11=C11+E1*A1/D1
         C14=C14+(X1*E1*A1/D1)
         C22=C22+E2*A2/D2
         C25=C25+(X2*E2*A2/D2)
         C44=C44+(E1*XI1/D1+X1**2*E1*A1/D1)
         C55=C55+(E2*XI2/D2+X2**2*E2*A2/D2)
         C66=C66+0.25*(E1*XJ1/(2.*(1.+U1)*D1)+E2*XJ2/(2.*(1.+U2)*D2))
         SMPA = SMPA + STIFMD*A1/D1 + RGMD*A2/D2
      ELSE
         EEFF = E1*T1/D1
         FNUEFF = 0.3
         FNUDEN = 1. - FNUEFF**2
         C11ISO = EEFF*H1/FNUDEN
         C12ISO = FNUEFF*C11ISO
         C22ISO = C11ISO
         C33ISO = EEFF*H1/(2.*(1.+FNUEFF))
         C44ISO = EEFF*H1**3/(12.*FNUDEN)
         C55ISO = C44ISO
         C45ISO = FNUEFF*C44ISO
         C66ISO = C33ISO*H1**2/12.
         SMPA = SMPA + 3.0*STIFMD*A1/D1 + RGMD*A2/D2
         IF (K1.EQ.1) DSHIFT = -(H1/2. + TD - Z)
         IF (K1.EQ.0) DSHIFT = H1/2. + Z
C        IF (I.EQ.1) WRITE (IFILE4,'(A,I4,1P3E12.4)')
C    1 ' in CFB1: K1, TD, Z, DSHIFT=',K1, TD, Z, DSHIFT
         C11 = C11 + C11ISO
         C22 = C22 + C22ISO
         C12 = C12 + C12ISO
         C33 = C33 + C33ISO
         C14 = C14 + DSHIFT*C11ISO
         C15 = C15 + DSHIFT*C12ISO
         C24 = C24 + DSHIFT*C12ISO
         C25 = C25 + DSHIFT*C22ISO
         C36 = C36 - DSHIFT*C33ISO
         C44 = C44 + C44ISO + DSHIFT*DSHIFT*C11ISO
         C45 = C45 + C45ISO + DSHIFT*DSHIFT*C12ISO
         C55 = C55 + C55ISO + DSHIFT*DSHIFT*C22ISO
         C66 = C66 + C66ISO + DSHIFT*DSHIFT*C33ISO
       ENDIF
C END SEP 2005
      RETURN
      END

------------------------------------------------------------
C=DECK      PLOCAL
C./      ADD   NAME=PLOCAL
      SUBROUTINE PLOCAL(IW,IS,HC,I5,F,C,B,PSTS,PMODE,PSMODE,NSEG,RHF,
     1THERM,INDIC,TIO,IFIX,IALL,ISTEP,RHFIX)
C
C     CALLED FROM PREB, WHOSE TRACE IS PRE,MAIN.
C     PREBUCKLING STRESSES AND DISPLACEMENTS CALCULATED FROM INPUT
C     SOLUTION F.
C
      DOUBLE PRECISION F
      DOUBLE PRECISION H,HPAST,HI,C1,C2,C3,W,U,R,RD,FK1,FK2,CURD
      DOUBLE PRECISION UD,WD,WDD,BETA,CFNLIN,UV,UH
      DIMENSION F(*),C(I5,14),B(I5,5),PSTS(I5,3),T(100),RHFIX(198)
      DIMENSION PMODE(IALL,9),PSMODE(IALL,9),THERM(I5,8),RHF(198)
      DIMENSION IW(*)
C BEG SEP 2005
C23456789012345678901234567890123456789012345678901234567890123456789012
      COMMON/ISOGRX/ISOGRD(195),IRECT(2,195),INTEXT(2,195),ISTSMR(2,195)
      COMMON/NUMSTX/NUMSTF(195)
      COMMON/IDCSKN/ICSKIN(195)
      COMMON/CSKINX/CSKIN(6,6,100)
      COMMON/IDMSKN/INSKIN(2,195)
      COMMON/IDSTFP/ISTFPR(195)
      COMMON/STFPRX/STFPRP(4,2,100)
      COMMON/BUCCON/BUCMIN(195),BUCMNS(195),BUCMNR(195)
      COMMON/STRCON/STFMXS(195),STFMXR(195)
      DIMENSION FNSKIN(2,100)
      REAL N1SKIN, N2SKIN, NSCRIT, NSMAX, NUSTIF
C END SEP 2005
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      COMMON/SHEL/ISHL(195),IWAL(195),ITHK(195),IARC(195),ILOAD(195)
      COMMON/ISTUFF/KK,I5TOT,IC,NUNK,KLAP
      COMMON/SMOAD/IMOAD(100),IPMODE(195),IPSMD(195)

 (many lines skipped to save space)

      N10 = N10 + THERM(I,1)*TEMP + THERM(I,5)
      N20 = N20 + THERM(I,2)*TEMP + THERM(I,6)
      M10 = M10 + THERM(I,3)*TEMP + THERM(I,7)
      M20 = M20 + THERM(I,4)*TEMP + THERM(I,8)
C
C BEG SEP 2005
C new stuff when there are smeared stiffeners...
C23456789012345678901234567890123456789012345678901234567890123456789012
      IF (I.EQ.1.AND.(ISTSMR(1,IS).NE.0.OR.ISTSMR(2,IS).NE.0)) THEN
         BUCMIN(IS) = 10.E+16
         BUCMNS(IS) = 10.E+16
         BUCMNR(IS) = 10.E+16
         STFMXS(IS) = 0.
         STFMXR(IS) = 0.
         WRITE(IFILE4,'(A,2I5)')' ISEG,ISOGRD(IS)=',IS,ISOGRD(IS)
         CALL GASP(STFPRP,800,3,ISTFPR(IS))
         CALL GASP(CSKIN,3600,3,ICSKIN(IS))
      ENDIF
C   
      IF (I.EQ.1) CALL MOVER(0.,0,FNSKIN,1,200)
      IF (ISTSMR(1,IS).NE.0.OR.ISTSMR(2,IS).NE.0) THEN
C      N1SKIN, N2SKIN are meridional, hoop resultants in the skin...
         N1SKIN = CSKIN(1,1,I)*EPS1 + CSKIN(1,2,I)*EPS2 
     1           +CSKIN(1,4,I)*K1   + CSKIN(1,5,I)*K2
         N2SKIN = CSKIN(1,2,I)*EPS1 + CSKIN(2,2,I)*EPS2
     1           +CSKIN(2,4,I)*K1   + CSKIN(2,5,I)*K2
         FNSKIN(1,I) = N1SKIN
         FNSKIN(2,I) = N2SKIN
         IF (I.EQ.I5.AND.IFIX.EQ.0) CALL GASP(FNSKIN,200,1,INSKIN(1,IS))
         IF (I.EQ.I5.AND.IFIX.EQ.1) CALL GASP(FNSKIN,200,1,INSKIN(2,IS))
C
         STRSTR = 0. 
         STRRNG = 0. 
         BUCLOD = 10.E+16
         BUCSTR = 10.E+16
         BUCRNG = 10.E+16
         IF (ISOGRD(IS).EQ.1.AND.(N1SKIN.LT.0.0.OR.N2SKIN.LT.0.0)) THEN
C      Get buckling load factor for flat equilateral triangular piece of skin:
C      Formula is from NACA TN-3781, July 1957 by Gerard & Becker: "Handbook of
C      Structural Stability, Part I - Buckling of Flat Plates". Formula is for
C      buckling of equilateral flat plate with N1SKIN = N2SKIN (compression).
C      NOTE: result is approximate here because in general N1SKIN is not equal
C      to N2SKIN, and in general the skin is not isotropic.
            FCOEF = 5.0
            SIDE = STFPRP(3,1,I)*2./SQRT(3.)
            PI = 3.1415927
C      The critical buckling resultant is NSCRIT. BUCLOD = buckling load factor:
            NSCRIT = FCOEF*PI**2*CSKIN(4,4,I)/SIDE**2
            NSMAX  = MIN(N1SKIN,N2SKIN)
            BUCLOD = NSCRIT/ABS(NSMAX)
            BUCMIN(IS) = MIN(BUCMIN(IS),BUCLOD)
C23456789012345678901234567890123456789012345678901234567890123456789012
C           WRITE(IFILE4,'(A,2I5,A,1P,4E12.4)')
C    1    ' ISEG,IPOINT=',IS,I,'; N1SKIN,N2SKIN,BUCLOD,BUCMIN(IS)=',
C    1                            N1SKIN,N2SKIN,BUCLOD,BUCMIN(IS)
            IF (I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Minimum skin buckling load factor,BUCMIN(IS)=',BUCMIN(IS)
         ENDIF
C
C      STRSTR = maximum stress in a (smeared) stringer or isogrid member..
C      BUCMNS = minimum buckling load factor in (smeared) stringer or isogrid member
         IF (ISTSMR(1,IS).EQ.1.AND.IRECT(1,IS).EQ.1) THEN
            IF (INTEXT(1,IS).EQ.0) ZTIP = -(STFPRP(2,1,I) + Z(I))
            IF (INTEXT(1,IS).EQ.1) ZTIP = STFPRP(2,1,I) + T(I) - Z(I)
            STRTIP = STFPRP(4,1,I)*(EPS1 - ZTIP*K1)
C
C           Critical buckling load of stiffener. Use formulas from ROARK:
C           FORMULAS FOR STRESS AND STRAIN, 3rd Edition, McGraw-Hill, 1954,
C           Table XVI, p. 312, Formulas 4 (s.s.,free) and 5 (clamped,free).
C           Roark gives: SIGCR = k*[ESTIFF/(1-NUSTIF**2)]*(TSTIFF/HEIGHT)**2
C           in which k is a coefficient that depends on the aspect ratio of the
C           plate (stiffener), For long, uniformly axially compressed plates:
C            a. k = 0.375 if the plate is s.s.( MDC G4295, 4.1.7)
C            b. k = 1.1   if the plate is clamped,free (Roark, Table XVI, Formula 5)
C
            EDGSTF = 0.5
            NUSTIF = 0.3
C23456789012345678901234567890123456789012345678901234567890123456789012
            SIGCR = (0.375+0.7*EDGSTF)*(STFPRP(4,1,I)/(1.-NUSTIF**2))*
     1                                  (STFPRP(1,1,I)/STFPRP(2,1,I))**2
            IF (STRTIP.LT.0.0) THEN
               BUCSTR = SIGCR/ABS(STRTIP)
               BUCMNS(IS) = MIN(BUCMNS(IS),BUCSTR)
            ENDIF
            IF (INTEXT(1,IS).EQ.0) ZROOT = -Z(I)
            IF (INTEXT(1,IS).EQ.1) ZROOT =  T(I) - Z(I)
            STRROT = STFPRP(4,1,I)*(EPS1 - ZROOT*K1)
            STRSTR = MAX(ABS(STRTIP),ABS(STRROT))
            STFMXS(IS) = MAX(STFMXS(IS),STRSTR)
C           WRITE(IFILE4,'(A,1P,5E12.4)')
C    1    ' STRTIP,STRROT,STRSTR,STFMXS(IS),BUCMNS(IS)=',
C    1      STRTIP,STRROT,STRSTR,STFMXS(IS),BUCMNS(IS)
            IF (I.EQ.I5.AND.ISOGRD(IS).EQ.0)
     1       WRITE(IFILE4,'(A,I5,A,1P,E12.4)') ' Segment no.',IS,
     1     ' Minimum stringer buckling load factor, BUCMNS(IS)=',
     1       BUCMNS(IS)
            IF (I.EQ.I5.AND.ISOGRD(IS).EQ.1)
     1       WRITE(IFILE4,'(A,I5,A,1P,E12.4)') ' Segment no.',IS,
     1     ' Minimum isogrid member buckling load factor, BUCMNS(IS)=',
     1       BUCMNS(IS)
            IF (I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Maximum stringer (or isogrid member) stress, STFMXS(IS)=',
     1      STFMXS(IS)
         ENDIF
C
C      STRRNG = maximum stress in a (smeared) ring...
C      BUCMNR = minimum buckling load factor in (smearee) ring
         IF (ISTSMR(2,IS).EQ.1.AND.IRECT(2,IS).EQ.1) THEN
            IF (INTEXT(2,IS).EQ.0) ZTIP = -(STFPRP(2,2,I) + Z(I))
            IF (INTEXT(2,IS).EQ.1) ZTIP = STFPRP(2,2,I) + T(I) - Z(I)
            STRTIP = STFPRP(4,2,I)*(EPS2 - ZTIP*K2)
C
C           Critical buckling load of stiffener. Use formulas from ROARK:
C           FORMULAS FOR STRESS AND STRAIN, 3rd Edition, McGraw-Hill, 1954,
C           Table XVI, p. 312, Formulas 4 (s.s.,free) and 5 (clamped,free).
C           Roark gives: SIGCR = k*[ESTIFF/(1-NUSTIF**2)]*(TSTIFF/HEIGHT)**2
C           in which k is a coefficient that depends on the aspect ratio of the
C           plate (stiffener), For long, uniformly axially compressed plates:
C            a. k = 0.375 if the plate is s.s.( MDC G4295, 4.1.7)
C            b. k = 1.1   if the plate is clamped,free (Roark, Table XVI, Formula 5)
C
            EDGSTF = 0.5
            NUSTIF = 0.3
C23456789012345678901234567890123456789012345678901234567890123456789012
            SIGCR = (0.375+0.7*EDGSTF)*(STFPRP(4,2,I)/(1.-NUSTIF**2))*
     1                                  (STFPRP(1,2,I)/STFPRP(2,2,I))**2
            IF (STRTIP.LT.0.0) THEN
               BUCRNG = SIGCR/ABS(STRTIP)
               BUCMNR(IS) = MIN(BUCMNR(IS),BUCRNG)
            ENDIF
            IF (INTEXT(2,IS).EQ.0) ZROOT = -Z(I)
            IF (INTEXT(2,IS).EQ.1) ZROOT =  T(I) - Z(I)
            STRROT = STFPRP(4,2,I)*(EPS2 - ZROOT*K2)
            STRRNG = MAX(ABS(STRTIP),ABS(STRROT))
            STFMXR(IS) = MAX(STFMXR(IS),STRRNG)
C           WRITE(IFILE4,'(A,1P,5E12.4)')
C    1    ' STRTIP,STRROT,STRRNG,STFMXR(IS),BUCMNR(IS)=',
C    1      STRTIP,STRROT,STRRNG,STFMXR(IS),BUCMNR(IS)
            IF (I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Minimum ring buckling load factor, BUCMNR(IS)=', BUCMNR(IS)
            IF (I.EQ.I5) WRITE(IFILE4,'(A,I5,A,1P,E12.4)')
     1    ' Segment no.',IS,
     1    ' Maximum ring stress, STFMXR(IS)=', STFMXR(IS)
         ENDIF
      ENDIF
C END SEP 2005
C
      IF (I.EQ.1.OR.I.EQ.I5) GO TO 30
      GO TO 70
30    IF (R.GT.0.0) GO TO 40
      GO TO 70
-------------------------------------------------------------------



21. October 2005
bigBOSOR4 was modified with respect to callout points at the
first and last nodal points in segments. Previously there was
no account for the fact that an initial axisymmetric imperfection
changes the locations of these points. Hence, runs bombed off
with a diagnostic message about how the first or last callout
does not correspond to the endpoint of the segment. addbosor4.src
and b4util.src were modified as follows:

SUBROUTINE GEOM in addbosor4.src was modified as follows:
-----------------------------------------------------------
C=DECK      GEOM  
      SUBROUTINE GEOM(ISEG,NCST,I5,R,RD,C1,C2,C1D,S,IMP,NFLAG,SEND,     
     1DS,DSTOT,ZAX)     
C     
C     CALLED FROM GEOMTY, WHICH IS CALLED FROM READIT, WHICH IS CALLED  
C     FROM MAIN.  
C     GEOMETRY PARAMETERS FOR SEGMENT NUMBER ISEG ARE CALCULATED. 
C     THESE PARAMETERS ARE R - - PARALLEL CIRCLE RADIUS     
C                          RD -DERIVATIVE OF PARALLEL CIRCLE RADIUS WITH
C                              RESPECT TO ARC LENGTH S.     
C                          C1 -MERIDIONAL CURVATURE   
C                          C2 -CIRCUMFERENTIAL NORMAL CURVATURE   
C                          C1D-DERIVATIVE OF MERIDIONAL CURVATURE 
C     MESH STATION SPACING HC(ISEG) AND ARC LENGTH S ALSO OBTAINED.     
C     GEOM1,GEOM2, ETC. CORRESPOND TO VARIOUS TYPES OF SHELLS     
C     
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
      CHARACTER*4 CHARAC
      DIMENSION R(*),RD(*),C1(*),C2(*),C1D(*),S(*),ZAX(*),DS(500)  
C BEG OCT 2005
      COMMON/GORIGL/RORIGL(100),ZORIGL(100)
C END OCT 2005
C BEG MARCH 1990
      COMMON/ZZZGLB/ZGLOBL
      ZGLOBL = 0.
C END MARCH 1990
      GO TO (10,20,30,40,50),NCST   
10    CALL GEOM1(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
20    CALL GEOM2(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
30    CALL GEOM3(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
40    CALL GEOM4(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
      GO TO 60    
50    CALL GEOM5(ISEG,I5,R,RD,C1,C2,C1D,S,DS,DSTOT,ZAX)     
60    CONTINUE    
C
      WRITE(IOUT,5)
    5 FORMAT(6X,'H',9X,'$ IMPERFECTION SHAPE FOLLOWS...')
C BEG MARCH 1990  (The following statement is commented out...)
C     CALL DATUM(IFILE2,132,0,0,INT,REALL,CHARAC,IOUT,0,1)
C END MARCH 1990
      CALL DATUM(IFILE2,133,1,1,IMP,REALL,CHARAC,IOUT,0,1)
      IF (IMP.NE.0.AND.IMP.NE.1) THEN
        WRITE(IFILE4,*)' IMP MUST BE EITHER 0 OR 1'
        CALL ERREX
      ENDIF
C BEG OCT 2005
      DO 65 I = 1,I5
         RORIGL(I) = R(I)
         ZORIGL(I) = ZAX(I)
   65 CONTINUE
C END OCT 2005
      IF (IMP.EQ.0) GO TO 70  
C     VARIOUS IMPERFECTION SHAPES READ IN IN IMPERF   
C BEG AUG 2005
      CALL IMPERF(NFLAG,I5,R,RD,C1,C2,C1D,S,SEND,ISEG,ZAX)
C END AUG 2005
70    CONTINUE    
      DO 80 I=1,I5
80    S(I) = S(I) + SEND
      RETURN
      END   
------------------------------------------------------------------------


SUBROUTINE STA in the b4util.src library was modified as follows:
------------------------------------------------------------------------
C=DECK      STA   
      SUBROUTINE STA(IPOINT,ZAXIAL,RAD,RADD,S,NPOINT,NMESH) 
C     CALLED FROM SEVERAL SUBROUTINES IN READIT LINK  
      DIMENSION IPOINT(50),ZAXIAL(100),RAD(100),RADD(100),S(100),Z(50)  
      DIMENSION R(50),SARC(50),THETA(50)  
      COMMON/PRMFIL/IFILE,IFILE2,IOUT,IPRM(5)
      COMMON/ALOFIT/INDSIG,II,ITOT,JJ,III,IBOUND,IPT,IRIGID,ISEG,I5I,   
     1KRING,NWALL,NLTYPE,NRINGS,DSTOT,SEND,IPOS,IEND,IENDS,IMAX,ITOTL,  
     2LINTYP
      COMMON/PRMOUT/IFILE3,IFILE4,IFILE8,IFILE9,IFIL11   
C BEG OCT 2005
      COMMON/GORIGL/RORIGL(100),ZORIGL(100)
C END OCT 2005
      COMMON/RERUN/IFLAG
      COMMON/JRING/JJRING
      CHARACTER*4 CHARAC
      DIMENSION ITEMP(50)     
10    FORMAT(10I6)
20    FORMAT(6E12.8)
      CALL DATUM(IFILE2,IPRM(2),1,2,NTYPE,REALL,CHARAC,IOUT,0,1)
      IF (NTYPE.NE.2.AND.NTYPE.NE.3) THEN
       WRITE(IFILE4,*)' NTYPE  MUST BE EITHER   2   or   3'
       CALL ERREX
      ENDIF
C
C     NTYPE = 1    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY 
C                   MESH POINT NUMBERS    
C           = 2    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY 
C                  AXIAL COORDINATE, Z    
C           = 3    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY 
C                  RADIAL COORDINATE, R   
C           = 4    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY 
C                  ARC LENGTH FROM BEGINNING OF CURRENT SEGMENT, S
C           = 5    LOCATIONS OF FOLLOWING INPUT VARIABLES IDENTIFIED BY 
C                  ANGLE BETWEEN AXIS OF REVOLUTION AND NORMAL TO WALL  
C     
      GO TO (30,50,70,90,110),NTYPE 
C     IPOINT = LOCAL MESH POINT TAGS TO WHICH INPUT DATA CORRESPOND     
30    READ (5,10)(IPOINT(J),J=1,NPOINT)   
      IF (IPOINT(NPOINT).GE.(NMESH-1)) IPOINT(NPOINT) = NMESH-2   
      JSTART = 1  
      IF (IPOINT(1).EQ.1) JSTART = 2
      IF (NPOINT.LT.JSTART) RETURN  
      DO 40 J=JSTART,NPOINT   
40    IPOINT(J) = IPOINT(J) + 1     
      IF (IPOINT(NPOINT).EQ.(NMESH-1)) IPOINT(NPOINT)=IPOINT(NPOINT) + 1
      RETURN
   50 CONTINUE
      DO 55 J = 1,NPOINT
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,IPRM(2)+1,1,2,INT,Z(J),CHARAC,IOUT,J,IPROMP)
   55 CONTINUE
      DO 60 J=1,NPOINT  
C BEG OCT 2005
C     CALL INTER(ZAXIAL,Z(J),IPOINT(J),NMESH)   
      CALL INTER(ZORIGL,Z(J),IPOINT(J),NMESH)
C END OCT 2005
      IF (IFLAG.EQ.0) GO TO 60
      CALL ERREX
   60 CONTINUE
      IF (IPOINT(1).NE.1.AND.JJRING.EQ.0) THEN
C BEG OCT 2005
C        DIFF = ABS(Z(1) - ZAXIAL(1))/ABS(ZAXIAL(NMESH)-ZAXIAL(1))
         DIFF = ABS(Z(1) - ZORIGL(1))/ABS(ZORIGL(NMESH)-ZORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(1).LE.3) IPOINT(1) = 1
C        WRITE(IFILE4,62) Z(1), ZAXIAL(1), IPOINT(1)
         WRITE(IFILE4,62) Z(1), ZORIGL(1), IPOINT(1)
C END OCT 2005
   62    FORMAT(/,' BAD AXIAL CALLOUT AT BEGINNING OF SEGMENT:',/,
     1'  Z( 1 ) =',1PE14.5,'.  Z( 1 ) SHOULD BE EQUAL TO',
     1   1PE14.5,'.',/,'  IPOINT(1) =',I4,' IT SHOULD BE EQUAL TO 1')
      ENDIF
C
      IF (IPOINT(NPOINT).NE.NMESH.AND.JJRING.EQ.0) THEN
C BEG OCT 2005
C        DIFF = ABS(Z(NPOINT) - ZAXIAL(NMESH))/
C    1               ABS(ZAXIAL(NMESH)-ZAXIAL(1))
         DIFF = ABS(Z(NPOINT) - ZORIGL(NMESH))/
     1               ABS(ZORIGL(NMESH)-ZORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(NPOINT).GE.(NMESH-2))
     1                                 IPOINT(NPOINT) = NMESH
C        WRITE(IFILE4,64) Z(NPOINT), ZAXIAL(NMESH),IPOINT(NPOINT),NMESH
         WRITE(IFILE4,64) Z(NPOINT), ZORIGL(NMESH),IPOINT(NPOINT),NMESH
C END OCT 2005
   64    FORMAT(/,' BAD AXIAL CALLOUT AT    END    OF SEGMENT:',/,
     1'  Z(end) =',1PE14.5,'.  Z(end) SHOULD BE EQUAL TO',
     1   1PE14.5,'.',/,'  IPOINT(NPOINT) =',I4,
     1'  IT SHOULD BE EQUAL TO',I4)
      ENDIF
C
      IF (JJRING.EQ.0) THEN
         IF (IPOINT(1).NE.1.OR.IPOINT(NPOINT).NE.NMESH) CALL ERREX
      ENDIF
C
      GO TO 130
   70 CONTINUE
      DO 75 J = 1,NPOINT
      IPROMP = 1
      IF (J.GT.1) IPROMP = 0
      CALL DATUM(IFILE2,IPRM(2)+2,1,2,INT,R(J),CHARAC,IOUT,J,IPROMP)
   75 CONTINUE
      DO 80 J=1,NPOINT  
C BEG OCT 2005
C     CALL INTER(RAD,R(J),IPOINT(J),NMESH)
      CALL INTER(RORIGL,R(J),IPOINT(J),NMESH)
C END OCT 2005
      IF (IFLAG.EQ.0) GO TO 80
      CALL ERREX
   80 CONTINUE
C
      IF (IPOINT(1).NE.1.AND.JJRING.EQ.0) THEN
C BEG OCT 2005
C        DIFF = ABS(R(1) - RAD(1))/ABS(RAD(NMESH)-RAD(1))
         DIFF = ABS(R(1) - RORIGL(1))/ABS(RORIGL(NMESH)-RORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(1).LE.3) IPOINT(1) = 1
C        WRITE(IFILE4,82) R(1), RAD(1), IPOINT(1)
         WRITE(IFILE4,82) R(1), RORIGL(1), IPOINT(1)
C END OCT 2005
   82    FORMAT(/,' BAD RADIAL CALLOUT AT BEGINNING OF SEGMENT:',/,
     1'  R( 1 ) =',1PE14.5,'.  R( 1 ) SHOULD BE EQUAL TO',
     1   1PE14.5,'.',/,'  IPOINT(1) =',I4,' IT SHOULD BE EQUAL TO 1')
      ENDIF
C
      IF (IPOINT(NPOINT).NE.NMESH.AND.JJRING.EQ.0) THEN
C BEG OCT 2005
C        DIFF = ABS(R(NPOINT) - RAD(NMESH))/
C    1               ABS(RAD(NMESH)-RAD(1))
         DIFF = ABS(R(NPOINT) - RORIGL(NMESH))/
     1               ABS(RORIGL(NMESH)-RORIGL(1))
         IF (DIFF.LT.0.01.AND.IPOINT(NPOINT).GE.(NMESH-2))
     1                                 IPOINT(NPOINT) = NMESH
C        WRITE(IFILE4,84) R(NPOINT), RAD(NMESH),IPOINT(NPOINT),NMESH
         WRITE(IFILE4,84) R(NPOINT), RORIGL(NMESH),IPOINT(NPOINT),NMESH
C23456789012345678901234567890123456789012345678901234567890123456789012
C END OCT 2005
   84    FORMAT(/,' BAD RADIAL CALLOUT AT    END    OF SEGMENT:',/,
     1'  R(end) =',1PE14.5,'.  R(end) SHOULD BE EQUAL TO',
     1   1PE14.5,'.',/,'  IPOINT(NPOINT) =',I4,
     1'  IT SHOULD BE EQUAL TO',I4)
      ENDIF
C
      IF (JJRING.EQ.0) THEN
         IF (IPOINT(1).NE.1.OR.IPOINT(NPOINT).NE.NMESH) CALL ERREX
      ENDIF
-------------------------------------------------------------------------

The modifications result in the user's input for callout location being
compared to the original radial or axial coordinate, RORIGL or ZORIGL.
RORIGL and ZORIGL are the radial and axial coordinates before the addition
of any axisymmetric imperfection.





22. October 2005
A case was encountered for which bigBOSOR4 got hung up in SUBROUTINE FACTR.
This happened in a nonlinear axisymmetric collapse analysis very near the
collapse load when the stiffness matrix of the loaded shell was almost
singular. To avoid this problem, SUBROUTINE PRE was modified as follows:
-----------------------------------------------------------------------
      CALL PRE1(BBB,IW,DS,ILOC,FTOT,F,B)
C BEG OCT 2005
C     IF (NPRT.GT.1) WRITE(IFILE4,150)ITER
                     WRITE(IFILE4,150)ITER
C END OCT 2005
150   FORMAT(' PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION',
     1' NO. ',I3,'. START FACTORING AND SOLVING')
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (NPRT.LT.3) GO TO 170
      WRITE(IFILE4,160)ITER
160   FORMAT(/,' RIGHT-HAND-SIDE FOR ',I2,'TH ITERATION',/)          
      WRITE(IFILE4,200)(F(I),I=1,M2)
C
C     FACTR FACTORS THE COEFFICIENT MATRIX IN BLOCKS.
C
170   CONTINUE
      CALL FACTR(TP,B,IPRW,DET,NEX,IBLKP,NGBKP,NKFP,ILOC,PDIAG,DI,KMAXP)
C BEG OCT 2005
      WRITE(IFILE4,'(A,I4,A,I4)')' Factoring done for iteration',ITER,
     1'; Load step, ISTEP=',ISTEP
      IABORT = 0
      DIAMAX = 0.
      DO 175 I = 1,M2
         DIAMAX = MAX(DIAMAX,ABS(PDIAG(I)))
  175 CONTINUE
      IF (INDIC.NE.0.AND.ITER.EQ.0) DIAMX0 = DIAMAX
      IF ((STEPM/STEPMI).GT.0.1.AND.ITER.EQ.0) DIAMX0 = DIAMAX
      IF (DIAMAX.GT.DIAMX0*10.E+06) THEN
         WRITE(IFILE4,'(/,A,/,A,1P,E12.4,/,A,1P,E12.4,/,A,/,A)')
     1 ' ********** ALMOST SINGULAR STIFFNESS MATRIX **********',
     1 ' Maximum diagonal of factored matrix at iteration 0=',DIAMX0,
     1 ' Maximum diagonal of factored matrix, current iter.=',DIAMAX,
     1 ' Newton iterations now aborting.',
     1 ' ********** ALMOST SINGULAR STIFFNESS MATRIX **********'
         IABORT = 1
      ENDIF
C END OCT 2005
C
C     S0LVE SOLVES THE SYSTEM IN BLOCKS.
C
      CALL SOLVE(B,F,IBLKP,IPRW,NGBKP,ILOC,PDIAG,M2,1)
C BEG OCT 2005
C     IF (NPRT.GT.1) WRITE(IFILE4,180)ITER
                     WRITE(IFILE4,180)ITER
C END OCT 2005
180   FORMAT(' FACTORING AND SOLVING COMPLETED FOR PRESTRESS',
     1' ITERATION NO.',I3)
      IF (NPRT.GT.1) CALL SR100T(2)
      IF (NPRT.LT.3) GO TO 210
      WRITE(IFILE4,190)ITER
190   FORMAT(/,' RESIDUE FOR ITERATION NO.',I3,/)                  
      WRITE(IFILE4,200)(F(I),I=1,M2)
200   FORMAT(1P10E12.3)                                                
210   NFAIL = 0
      FMAX = 0.0
      DO 220 I=1,M2
220   FTOT(I) = FTOT(I) -F(I)
      I = 0
230   I = I + 1
      DO 240 J=1,NCOND
      IF (I.NE.IROWCP(J)) GO TO 240
      I = I + 3
240   CONTINUE
      IF (I.GT.M2) GO TO 260
C
C     CONVERGENCE TESTED.
C
250   FORMAT(2P10E11.3)
      FFTOT = FTOT(I)
      FMAX = AMAX1(ABS(FFTOT),FMAX)
      IF (ITER.EQ.0) GO TO 230
      IF (ABS(FFTOT)/FMAXS.LT.0.1) GO TO 230
      DELP = ABS(F(I)/FTOT(I))
C     CONVERGENCE CRITERION
      IF (DELP.GT.ERR) NFAIL = 1
      GO TO 230
260   CONTINUE
      IF (ITER.EQ.0) NFAIL = 1
      FMAXS = FMAX
      IF (FMAXS.EQ.0.0) FMAXS = 1.0
      IF (NFAIL.EQ.0) GO TO 280
      ITER = ITER + 1
      IF (ITER.GT.10) GO TO 270
C BEG OCT 2005
      IF (IABORT.EQ.1) GO TO 270
C END OCT 2005
      GO TO 130
270   CONTINUE
      IF (INDIC.GT.0) GO TO 360
      IF (INDIC.EQ.-1) GO TO 360
C
C     IF PREBUCKLING SOLUTION DOES NOT CONVERGE WITHIN TEN ITERATIONS,
C     GO BACK TO LAST LOAD LEVEL, REDUCE STEP SIZE BY A FACTOR OF TEN,
C     AND TRY AGAIN.
C
      CALL UNLOAD(V,HF,FM,NSEG1)
      IF (INDIC.EQ.0) ISTEP = ISTEP - 1
C     WHEN LOAD INCREMENT IS TOO SMALL CALCULATIONS TERMINATE
C     ERR IS SET INTERNALLY AT 0.001, AND MAY BE TOO SMALL IF CALCULA-
C     TIONS ARE PERFORMED IN SINGLE PRECISION. USER BEWARE OF THIS.
C
C BEG OCT 2005
      WRITE(IFILE4,'(A,1P,3E12.4,I8)')
     1' STEPM, STEPMI, ERR, ISTEP=',STEPM, STEPMI, ERR, ISTEP
C     IF ((STEPM/STEPMI).LT.ERR) GO TO 340
      IF ((STEPM/STEPMI).LE.ERR) GO TO 340
      IF (IABORT.EQ.1) GO TO 340
C END OCT 2005
      IF (IFTOT.NE.0) GO TO 90
      KNT = 0
      GO TO 90
280   CONTINUE
---------------------------------------------------------------------

The most important part of the modification listed above is the following
-------------------------------------------------------------------------
C BEG OCT 2005
      WRITE(IFILE4,'(A,I4,A,I4)')' Factoring done for iteration',ITER,
     1'; Load step, ISTEP=',ISTEP
      IABORT = 0
      DIAMAX = 0.
      DO 175 I = 1,M2
         DIAMAX = MAX(DIAMAX,ABS(PDIAG(I)))
  175 CONTINUE
      IF (INDIC.NE.0.AND.ITER.EQ.0) DIAMX0 = DIAMAX
      IF ((STEPM/STEPMI).GT.0.1.AND.ITER.EQ.0) DIAMX0 = DIAMAX
      IF (DIAMAX.GT.DIAMX0*10.E+06) THEN
         WRITE(IFILE4,'(/,A,/,A,1P,E12.4,/,A,1P,E12.4,/,A,/,A)')
     1 ' ********** ALMOST SINGULAR STIFFNESS MATRIX **********',
     1 ' Maximum diagonal of factored matrix at iteration 0=',DIAMX0,
     1 ' Maximum diagonal of factored matrix, current iter.=',DIAMAX,
     1 ' Newton iterations now aborting.',
     1 ' ********** ALMOST SINGULAR STIFFNESS MATRIX **********'
         IABORT = 1
      ENDIF
C END OCT 2005
---------------------------------------------------------------------------

in particular, the following criterion:

      IF (DIAMAX.GT.DIAMX0*10.E+06) THEN

DIAMX0 is the maximum diagonal corresponding to the factored stiffness
matrix the last time that the load step was not cut because of failure
of the Newton iterations to converge.

DIAMAX is the current value of the maximum diagonal of the factored
stiffness matrix. When DIAMAX gets very large compared to DIAMX0, the
matrix is almost singular. If this happens, the index IABORT is set
equal to 1 and the shell is deemed to have collapsed axisymmetrically.
This new strategy prevents the computations from getting hung up in
SUBROUTINE FACTOR.





23. October 2005
SUBROUTINE IMPERF (See ITEM No. 17) was modified as follows:
-------------------------------------------------------------------
< C BEG OCT 2005
<       RMAX = MAX(RMAX,R(I))
< C END OCT 2005
4628,4645d4621
< C BEG OCT 2005
<       DO 215 I = 1,I5
<          IF (ABS(R(I))/RMAX.LT.0.00001) THEN
<             IF (ABS(RD(I)).GT.0.95) THEN
<                IF (I.EQ.1) THEN
<                   C2(1) = C1(1)
<                   C2(2) = C1(2)
<                   C2(3) = C1(3)
<                ENDIF
<                IF (I.EQ.I5) THEN
<                   C2(I5) = C1(I5)
<                   C2(I5-1) = C1(I5-1)
<                   C2(I5-2) = C1(I5-2)
<                ENDIF
<             ENDIF
<          ENDIF
<   215 CONTINUE
< C END OCT 2005
--------------------------------------------------------------------

This modification led to correction of bad values for the circumferential
radius of curvature in the neighborhood of the apex of a spherical cap in
a case for which the imperfection shape was given point-by-point. The bad
values formerly gave rise to a huge stress concentration at the pole.





24. January 2006
In an effort to avoid finite element "lockup" in the analysis of
axisymmetrically imperfect ellipsoidal shells, an "equivalent"
ellipsoidal shell was constructed of 12 toroidal segments that match
very well the meridional profile of the perfect ellipsoidal shell.
The perfect "equivalent" ellipsoidal shell does not "lock up"
because each of the 12 toroidal segments of which it is composed
has a constant meridional curvature.

Unfortunately, there is some "lock up" for the axisymmetrically
imperfect "equivalent" ellipsoidal shell, probably because
the maximum axisymetric buckling modal normal displacement occurs
fairly near the equator of the shell. The presence of the buckling
modal imperfection gives rise to considerable meridional variation
in the meridional radius of curvature of the imperfect shell. It
is this meridional variation that is causing the "lockup".

The evidence of the presence of "lockup" is provided by the value
of the axial resultant in a very soft cylindrical segment to which
the 12-segment "equivalent" ellipsoidal head is attached. This 13-
segment shell (12 toroidal segments + the very soft cylindrical
shell segment) is subjected to uniform external pressure applied to
the 12-segment "equivalent" ellipsoidal head only, not to the
cylindrical shell segment (Seg. 13 in the model listed below).

An external pressure of 1.0 psi is applied to the head. With no
"lockup" the axial stress reaultant in the soft cylindrical segment
should be constant and equal to N10 = p*r/2 = -12.375 lb/in. Table 24.1
lists the values of N10 in the soft cylindrical shell segment
corresponding to various amplitudes of the axisymmetric buckling
modal imperfection.

Table 24.1  Axial resultant N10 in the soft cylindrical segment
as a function of amplitude of the axisymmetric buckling modal
imperfection shape
==============================================================
Imperfection  amplitude(in.)       axial resultant N10 (lb/in)
--------------------------------------------------------------
     0.01                            -12.22
     0.05                             -9.50
     0.10                             -5.50
     0.20                             -2.17
==============================================================


A list of the input file (test2.ALL) for the "lockup" test follows:
-----------------------------------------------------------------
 Nonlinear axisymmetric stress analysis (INDIC=0)                       
         0      $ INDIC = analysis type indicator
         1      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         1      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
        13      $ NSEG  = number of shell segments (less than 195)
      H         $
      H         $ SEGMENT NUMBER    1    1    1    1    1    1    1    1
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 1)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   0.000000     $ R1     = radius at beginning of segment (see p. 66)
  -12.37500     $ Z1     = global axial coordinate at beginning of segment
   2.554500     $ R2     = radius at end of segment
  -12.30904     $ Z2     = global axial coordinate at end of segment
   0.000000     $ RC     = radius from axis of rev. to center of curvature
   37.12500     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.6923627     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.6919552     $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.6868559     $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.6708855     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.6441861     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.6075153     $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.5620109     $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.5093329     $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.4516352     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.3914957     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.3325257     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.2905001     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.2755859     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   2.554500     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   2.554500     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.2367852     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.1990217     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   2.554500     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    2    2    2    2    2    2    2    2
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 2)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   2.554500     $ R1     = radius at beginning of segment (see p. 66)
  -12.30904     $ Z1     = global axial coordinate at beginning of segment
   5.666450     $ R2     = radius at end of segment
  -12.04630     $ Z2     = global axial coordinate at end of segment
  0.8364234E-01 $ RC     = radius from axis of rev. to center of curvature
   35.51750     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.2755864     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.2580025     $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.2146914     $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.1646458     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.1215457     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.8435547E-01 $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.5171487E-01 $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.2260389E-01 $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.3735518E-02 $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.2786926E-01 $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.4995339E-01 $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.6550345E-01 $ Imperfection normal displacement (normalized), WSHAPE(12)
  0.7112631E-01 $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   2.554500     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   5.666450     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   2.554500     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   5.666450     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.1990217     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.6174027     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   2.554500     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   5.666450     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    3    3    3    3    3    3    3    3
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 3)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   5.666450     $ R1     = radius at beginning of segment (see p. 66)
  -12.04630     $ Z1     = global axial coordinate at beginning of segment
   8.753630     $ R2     = radius at end of segment
  -11.57515     $ Z2     = global axial coordinate at end of segment
  0.4623073     $ RC     = radius from axis of rev. to center of curvature
   32.40297     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  0.7112148E-01 $ Imperfection normal displacement (normalized), WSHAPE( 1)
  0.7665271E-01 $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.9102403E-01 $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.1091396     $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.1260122     $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.1411505     $ Imperfection normal displacement (normalized), WSHAPE( 6)
  0.1541840     $ Imperfection normal displacement (normalized), WSHAPE( 7)
  0.1645790     $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.1715712     $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.1740675     $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.1706012     $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.1629543     $ Imperfection normal displacement (normalized), WSHAPE(12)
  0.1586265     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   5.666450     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   8.753630     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   5.666450     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   8.753630     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.6174027     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.2770599     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   5.666450     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   8.753630     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    4    4    4    4    4    4    4    4
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 4)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   8.753630     $ R1     = radius at beginning of segment (see p. 66)
  -11.57515     $ Z1     = global axial coordinate at beginning of segment
   11.79770     $ R2     = radius at end of segment
  -10.87861     $ Z2     = global axial coordinate at end of segment
   1.338907     $ RC     = radius from axis of rev. to center of curvature
   27.82925     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  0.1586327     $ Imperfection normal displacement (normalized), WSHAPE( 1)
  0.1534746     $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.1355610     $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.1033326     $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.6274914E-01 $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.1612391E-01 $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.3455417E-01 $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.8735429E-01 $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.1404613     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.1922134     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.2405386     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.2740739     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.2858879     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   8.753630     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   11.79770     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   8.753630     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   11.79770     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.2770599     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.3275212     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   8.753630     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   11.79770     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    5    5    5    5    5    5    5    5
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 5)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   11.79770     $ R1     = radius at beginning of segment (see p. 66)
  -10.87861     $ Z1     = global axial coordinate at beginning of segment
   14.77232     $ R2     = radius at end of segment
  -9.929011     $ Z2     = global axial coordinate at end of segment
   2.895449     $ RC     = radius from axis of rev. to center of curvature
   22.14145     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.2858756     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.2972927     $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.3257456     $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.3576137     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.3807404     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.3924121     $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.3902557     $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.3719321     $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.3353564     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.2790163     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.2034816     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.1346991     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.1065203     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   11.79770     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   14.77232     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   11.79770     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   14.77232     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.3275212     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.2227204     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   11.79770     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   14.77232     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    6    6    6    6    6    6    6    6
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 6)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   14.77232     $ R1     = radius at beginning of segment (see p. 66)
  -9.929011     $ Z1     = global axial coordinate at beginning of segment
   17.63477     $ R2     = radius at end of segment
  -8.682992     $ Z2     = global axial coordinate at end of segment
   5.259145     $ RC     = radius from axis of rev. to center of curvature
   15.83630     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.1065912     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.7718433E-01 $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.6467023E-02 $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.1242570     $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.2433481     $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.3555473     $ Imperfection normal displacement (normalized), WSHAPE( 6)
  0.4553841     $ Imperfection normal displacement (normalized), WSHAPE( 7)
  0.5387398     $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.6027907     $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.6458668     $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.6671345     $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.6692568     $ Imperfection normal displacement (normalized), WSHAPE(12)
  0.6670482     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   14.77232     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   17.63477     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   14.77232     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   17.63477     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.2227204     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.2764978     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   14.77232     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   17.63477     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    7    7    7    7    7    7    7    7
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 7)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   17.63477     $ R1     = radius at beginning of segment (see p. 66)
  -8.682992     $ Z1     = global axial coordinate at beginning of segment
   19.63631     $ R2     = radius at end of segment
  -7.532891     $ Z2     = global axial coordinate at end of segment
   7.971097     $ RC     = radius from axis of rev. to center of curvature
   10.45158     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  0.6670405     $ Imperfection normal displacement (normalized), WSHAPE( 1)
  0.6643472     $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.6527871     $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.6270145     $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.5886003     $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.5375963     $ Imperfection normal displacement (normalized), WSHAPE( 6)
  0.4739929     $ Imperfection normal displacement (normalized), WSHAPE( 7)
  0.3980025     $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.3100932     $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.2110222     $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.1032867     $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.1722591E-01 $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.1596604E-01 $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   17.63477     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   19.63631     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   17.63477     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   19.63631     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
  0.2764978     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.2434033     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   17.63477     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   19.63631     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    8    8    8    8    8    8    8    8
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 8)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   19.63631     $ R1     = radius at beginning of segment (see p. 66)
  -7.532891     $ Z1     = global axial coordinate at beginning of segment
   21.26065     $ R2     = radius at end of segment
  -6.335362     $ Z2     = global axial coordinate at end of segment
   10.52211     $ RC     = radius from axis of rev. to center of curvature
   6.530096     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.1591269E-01 $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.4547044E-01 $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.1264560     $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.2382080     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.3537340     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.4695574     $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.5830691     $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.6910898     $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.7898495     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.8750125     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.9410837     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.9758450     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.9850229     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         2      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
  -7.532891     $ Z(I)  = axial coordinate of Ith loading callout, z( 1)
  -6.335362     $ Z(I)  = axial coordinate of Ith loading callout, z( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         2      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
  -7.532891     $ Z(I)  = axial coordinate of Ith thickness callout, z( 1)
  -6.335362     $ Z(I)  = axial coordinate of Ith thickness callout, z( 2)
  0.2434033     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.1739170     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         2      $ NTYPE=control for meaning of section callout (2=z, 3=r)
  -7.532891     $ Z(I)  = axial coordinate of Ith section callout, z( 1)
  -6.335362     $ Z(I)  = axial coordinate of Ith section callout, z( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    9    9    9    9    9    9    9    9
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)( 9)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   21.26065     $ R1     = radius at beginning of segment (see p. 66)
  -6.335362     $ Z1     = global axial coordinate at beginning of segment
   22.70426     $ R2     = radius at end of segment
  -4.926436     $ Z2     = global axial coordinate at end of segment
   13.07984     $ RC     = radius from axis of rev. to center of curvature
   3.490870     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.9849845     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.9920479     $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.9999984     $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.9850930     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.9405349     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.8681337     $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.7711711     $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.6542436     $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.5230126     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.3838824     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.2453394     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.1450258     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.1089037     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         2      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
  -6.335362     $ Z(I)  = axial coordinate of Ith loading callout, z( 1)
  -4.926436     $ Z(I)  = axial coordinate of Ith loading callout, z( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         2      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
  -6.335362     $ Z(I)  = axial coordinate of Ith thickness callout, z( 1)
  -4.926436     $ Z(I)  = axial coordinate of Ith thickness callout, z( 2)
  0.1739170     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.1633636     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         2      $ NTYPE=control for meaning of section callout (2=z, 3=r)
  -6.335362     $ Z(I)  = axial coordinate of Ith section callout, z( 1)
  -4.926436     $ Z(I)  = axial coordinate of Ith section callout, z( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER   10   10   10   10   10   10   10   10
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)(10)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   22.70426     $ R1     = radius at beginning of segment (see p. 66)
  -4.926436     $ Z1     = global axial coordinate at beginning of segment
   23.86535     $ R2     = radius at end of segment
  -3.279007     $ Z2     = global axial coordinate at end of segment
   15.55374     $ RC     = radius from axis of rev. to center of curvature
   1.346049     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
 -0.1091330     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.7366822E-01 $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.1618486E-01 $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.1232923     $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.2150023     $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.2895935     $ Imperfection normal displacement (normalized), WSHAPE( 6)
  0.3477109     $ Imperfection normal displacement (normalized), WSHAPE( 7)
  0.3905728     $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.4197043     $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.4367398     $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.4432608     $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.4423138     $ Imperfection normal displacement (normalized), WSHAPE(12)
  0.4408525     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         2      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
  -4.926436     $ Z(I)  = axial coordinate of Ith loading callout, z( 1)
  -3.279006     $ Z(I)  = axial coordinate of Ith loading callout, z( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         2      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
  -4.926436     $ Z(I)  = axial coordinate of Ith thickness callout, z( 1)
  -3.279006     $ Z(I)  = axial coordinate of Ith thickness callout, z( 2)
  0.1633636     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.2256139     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         2      $ NTYPE=control for meaning of section callout (2=z, 3=r)
  -4.926436     $ Z(I)  = axial coordinate of Ith section callout, z( 1)
  -3.279006     $ Z(I)  = axial coordinate of Ith section callout, z( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER   11   11   11   11   11   11   11   11
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)(11)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   23.86535     $ R1     = radius at beginning of segment (see p. 66)
  -3.279007     $ Z1     = global axial coordinate at beginning of segment
   24.54286     $ R2     = radius at end of segment
  -1.597695     $ Z2     = global axial coordinate at end of segment
   17.45365     $ RC     = radius from axis of rev. to center of curvature
  0.2818448     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  0.4408707     $ Imperfection normal displacement (normalized), WSHAPE( 1)
  0.4390719     $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.4318010     $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.4162642     $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.3933464     $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.3627339     $ Imperfection normal displacement (normalized), WSHAPE( 6)
  0.3239970     $ Imperfection normal displacement (normalized), WSHAPE( 7)
  0.2768404     $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.2212661     $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.1578413     $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.8900472E-01 $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.3527322E-01 $ Imperfection normal displacement (normalized), WSHAPE(12)
  0.1520127E-01 $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         2      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
  -3.279006     $ Z(I)  = axial coordinate of Ith loading callout, z( 1)
  -1.597695     $ Z(I)  = axial coordinate of Ith loading callout, z( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         2      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
  -3.279006     $ Z(I)  = axial coordinate of Ith thickness callout, z( 1)
  -1.597695     $ Z(I)  = axial coordinate of Ith thickness callout, z( 2)
  0.2256139     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.1179917     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         2      $ NTYPE=control for meaning of section callout (2=z, 3=r)
  -3.279006     $ Z(I)  = axial coordinate of Ith section callout, z( 1)
  -1.597695     $ Z(I)  = axial coordinate of Ith section callout, z( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER   12   12   12   12   12   12   12   12
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        11      $ NMESH = number of node points (5 = min.; 98 = max.)(12)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   24.54286     $ R1     = radius at beginning of segment (see p. 66)
  -1.597695     $ Z1     = global axial coordinate at beginning of segment
   24.75000     $ R2     = radius at end of segment
   0.000000     $ Z2     = global axial coordinate at end of segment
   18.40842     $ RC     = radius from axis of rev. to center of curvature
  0.9905365E-02 $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.1000000E-01 $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        13      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  0.1495269E-01 $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.2839571E-02 $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.4921147E-01 $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.1066101     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.1576810     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.2008514     $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.2359997     $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.2634267     $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.2836621     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.2973354     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.3050291     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.3073655     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.3075533     $ Imperfection normal displacement (normalized), WSHAPE(13)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         2      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
  -1.597695     $ Z(I)  = axial coordinate of Ith loading callout, z( 1)
   0.000000     $ Z(I)  = axial coordinate of Ith loading callout, z( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         2      $ NTVALU= number of callouts along segment for thickness
         2      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
  -1.597695     $ Z(I)  = axial coordinate of Ith thickness callout, z( 1)
   0.000000     $ Z(I)  = axial coordinate of Ith thickness callout, z( 2)
  0.1179917     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.1933856     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4155000E-03 $ STIFMD= stringer mass density
   0.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         2      $ NSTATN=number of merid. callouts for cross section props.
         2      $ NTYPE=control for meaning of section callout (2=z, 3=r)
  -1.597695     $ Z(I)  = axial coordinate of Ith section callout, z( 1)
   0.000000     $ Z(I)  = axial coordinate of Ith section callout, z( 2)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 1)
   0.000000     $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-04 $ H(i) = height of stringer at ith callout, H( 2)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER   13   13   13   13   13   13   13   13
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        51      $ NMESH = number of node points (5 = min.; 98 = max.)(13)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   24.75000     $ R1     = radius at beginning of segment (see p. 66)
   12.37500     $ Z1     = global axial coordinate at beginning of segment
   24.75000     $ R2     = radius at end of segment
   30.00000     $ Z2     = global axial coordinate at end of segment
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         0      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
   100.0000     $ E     = Young's modulus for skin
   0.000000     $ U     = Poisson's ratio for skin
  0.1000000E-07 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
         0      $ NSUR   = control for thickness input (0 or 1 or -1)
      N         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ GLOBAL DATA BEGINS...
         1      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
   1.000000     $ P      = pressure or surface traction multiplier
   1.000000     $ DP     = pressure or surface traction multiplier increment
   0.000000     $ TEMP   = temperature rise multiplier
   0.000000     $ DTEMP  = temperature rise multiplier increment
         1      $ Number of load steps
   0.000000     $ OMEGA  = angular vel. about axis of revolution (rad/sec)
   0.000000     $ DOMEGA = angular velocity increment (rad/sec)
      H         $ CONSTRAINT CONDITIONS FOLLOW....
        13      $ How many segments in the structure?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    1    1    1    1
      H         $ POLES INPUT FOLLOWS...
         1      $ Number of poles (places where r=0) in SEGMENT( 1)
         1      $ IPOLE = nodal point number of pole, IPOLE( 1)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      N         $ Is this segment joined to any lower-numbered segments?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    2    2    2    2
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 2)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         1      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    3    3    3    3
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 3)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         2      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    4    4    4    4
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 4)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         3      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    5    5    5    5
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 5)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         4      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    6    6    6    6
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 6)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         5      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    7    7    7    7
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 7)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         6      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    8    8    8    8
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 8)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         7      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    9    9    9    9
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 9)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         8      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.   10   10   10   10
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT(10)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         9      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.   11   11   11   11
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT(11)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
        10      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.   12   12   12   12
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT(12)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
        11      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.   13   13   13   13
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT(13)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         1      $ At how many stations is this segment constrained to ground?
        51      $ INODE = nodal point number of constraint to ground, INODE( 1)
         1      $ IUSTAR=axial displacement constraint (0 or 1 or 2)
         1      $ IVSTAR=circumferential displacement(0=free,1=0,2=imposed)
         0      $ IWSTAR=radial displacement(0=free,1=constrained,2=imposed)
         1      $ ICHI=meridional rotation (0=free,1=constrained,2=imposed)
   0.000000     $ D1    = radial component of offset of ground support
   0.000000     $ D2    = axial component of offset of ground support
      N         $ Is this constraint the same for both prebuckling and buckling?
         1      $ IUSTARB= axial displacement for buckling or vibration phase
         1      $ IVSTARB= circ. displacement for buckling or vibration phase
         0      $ IWSTARB= radial displacement for buckling or vibration
         1      $ ICHIB  = meridional rotation for buckling or vibration
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
        12      $ JSEG  = segment no. of lowest segment involved in junction
        11      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $ RIGID BODY CONSTRAINT INPUT FOLLOWS...
      N         $ Given existing constraints, are rigid body modes possible?
      H         $ "GLOBAL3" QUESTIONS (AT END OF CASE)...
      Y         $ Do you want to list output for segment( 1)
      Y         $ Do you want to list output for segment( 2)
      Y         $ Do you want to list output for segment( 3)
      Y         $ Do you want to list output for segment( 4)
      Y         $ Do you want to list output for segment( 5)
      Y         $ Do you want to list output for segment( 6)
      Y         $ Do you want to list output for segment( 7)
      Y         $ Do you want to list output for segment( 8)
      Y         $ Do you want to list output for segment( 9)
      Y         $ Do you want to list output for segment(10)
      Y         $ Do you want to list output for segment(11)
      Y         $ Do you want to list output for segment(12)
      Y         $ Do you want to list output for segment(13)
      Y         $ Do you want to list forces in the discrete rings, if any?
-----------------------------------------------------------------------------


In another case, a torispherical head (casename = testtori), the 0.20-inch
imperfection amplitude caused insignificant "lockup", most likely because
the maximum amplitude of the axisymmetric buckling modal imperfection shape
is at the shell apex rather than near the shell equator, as is so for
the previous case called "test2".  Corresponding to an imperfection
amplitude of 0.2 inch the value of the axial resultant in the soft cylindrical
segment to which the torispherical head is attached is N10 = -11.92 lb/in,
which is not too different from the "no-lockup" value , N10 = -12.375 lb/in.

A list of the input data, testtori.ALL, follows:
-------------------------------------------------------------------------
 Nonlinear axisymmetric collapse analysis (INDIC=0)                     
         0      $ INDIC = analysis type indicator
         1      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         1      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
         3      $ NSEG  = number of shell segments (less than 195)
      H         $
      H         $ SEGMENT NUMBER    1    1    1    1    1    1    1    1
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        71      $ NMESH = number of node points (5 = min.; 98 = max.)( 1)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   0.000000     $ R1     = radius at beginning of segment (see p. 66)
   0.000000     $ Z1     = global axial coordinate at beginning of segment
   19.03857     $ R2     = radius at end of segment
   3.807736     $ Z2     = global axial coordinate at end of segment
   0.000000     $ RC     = radius from axis of rev. to center of curvature
   49.50000     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.2000000     $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        73      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  -1.000000     $ Imperfection normal displacement (normalized), WSHAPE( 1)
 -0.9989110     $ Imperfection normal displacement (normalized), WSHAPE( 2)
 -0.9853710     $ Imperfection normal displacement (normalized), WSHAPE( 3)
 -0.9456044     $ Imperfection normal displacement (normalized), WSHAPE( 4)
 -0.8837606     $ Imperfection normal displacement (normalized), WSHAPE( 5)
 -0.8051077     $ Imperfection normal displacement (normalized), WSHAPE( 6)
 -0.7150401     $ Imperfection normal displacement (normalized), WSHAPE( 7)
 -0.6189956     $ Imperfection normal displacement (normalized), WSHAPE( 8)
 -0.5220971     $ Imperfection normal displacement (normalized), WSHAPE( 9)
 -0.4288828     $ Imperfection normal displacement (normalized), WSHAPE(10)
 -0.3431278     $ Imperfection normal displacement (normalized), WSHAPE(11)
 -0.2677508     $ Imperfection normal displacement (normalized), WSHAPE(12)
 -0.2047939     $ Imperfection normal displacement (normalized), WSHAPE(13)
 -0.1554585     $ Imperfection normal displacement (normalized), WSHAPE(14)
 -0.1130776     $ Imperfection normal displacement (normalized), WSHAPE(15)
 -0.7477422E-01 $ Imperfection normal displacement (normalized), WSHAPE(16)
 -0.3910680E-01 $ Imperfection normal displacement (normalized), WSHAPE(17)
 -0.5268953E-02 $ Imperfection normal displacement (normalized), WSHAPE(18)
  0.2722945E-01 $ Imperfection normal displacement (normalized), WSHAPE(19)
  0.5870612E-01 $ Imperfection normal displacement (normalized), WSHAPE(20)
  0.8937787E-01 $ Imperfection normal displacement (normalized), WSHAPE(21)
  0.1192526     $ Imperfection normal displacement (normalized), WSHAPE(22)
  0.1482941     $ Imperfection normal displacement (normalized), WSHAPE(23)
  0.1763826     $ Imperfection normal displacement (normalized), WSHAPE(24)
  0.2032198     $ Imperfection normal displacement (normalized), WSHAPE(25)
  0.2280841     $ Imperfection normal displacement (normalized), WSHAPE(26)
  0.2490946     $ Imperfection normal displacement (normalized), WSHAPE(27)
  0.2605150     $ Imperfection normal displacement (normalized), WSHAPE(28)
  0.2630510     $ Imperfection normal displacement (normalized), WSHAPE(29)
  0.2578161     $ Imperfection normal displacement (normalized), WSHAPE(30)
  0.2461064     $ Imperfection normal displacement (normalized), WSHAPE(31)
  0.2292464     $ Imperfection normal displacement (normalized), WSHAPE(32)
  0.2084916     $ Imperfection normal displacement (normalized), WSHAPE(33)
  0.1849732     $ Imperfection normal displacement (normalized), WSHAPE(34)
  0.1596717     $ Imperfection normal displacement (normalized), WSHAPE(35)
  0.1334103     $ Imperfection normal displacement (normalized), WSHAPE(36)
  0.1068608     $ Imperfection normal displacement (normalized), WSHAPE(37)
  0.8055702E-01 $ Imperfection normal displacement (normalized), WSHAPE(38)
  0.5491107E-01 $ Imperfection normal displacement (normalized), WSHAPE(39)
  0.3028015E-01 $ Imperfection normal displacement (normalized), WSHAPE(40)
  0.6987760E-02 $ Imperfection normal displacement (normalized), WSHAPE(41)
 -0.1467976E-01 $ Imperfection normal displacement (normalized), WSHAPE(42)
 -0.3447628E-01 $ Imperfection normal displacement (normalized), WSHAPE(43)
 -0.5219854E-01 $ Imperfection normal displacement (normalized), WSHAPE(44)
 -0.6768814E-01 $ Imperfection normal displacement (normalized), WSHAPE(45)
 -0.8083303E-01 $ Imperfection normal displacement (normalized), WSHAPE(46)
 -0.9156825E-01 $ Imperfection normal displacement (normalized), WSHAPE(47)
 -0.9987593E-01 $ Imperfection normal displacement (normalized), WSHAPE(48)
 -0.1057846     $ Imperfection normal displacement (normalized), WSHAPE(49)
 -0.1093675     $ Imperfection normal displacement (normalized), WSHAPE(50)
 -0.1108349     $ Imperfection normal displacement (normalized), WSHAPE(51)
 -0.1104157     $ Imperfection normal displacement (normalized), WSHAPE(52)
 -0.1083478     $ Imperfection normal displacement (normalized), WSHAPE(53)
 -0.1048703     $ Imperfection normal displacement (normalized), WSHAPE(54)
 -0.1002166     $ Imperfection normal displacement (normalized), WSHAPE(55)
 -0.9460974E-01 $ Imperfection normal displacement (normalized), WSHAPE(56)
 -0.8825807E-01 $ Imperfection normal displacement (normalized), WSHAPE(57)
 -0.8135284E-01 $ Imperfection normal displacement (normalized), WSHAPE(58)
 -0.7406642E-01 $ Imperfection normal displacement (normalized), WSHAPE(59)
 -0.6655145E-01 $ Imperfection normal displacement (normalized), WSHAPE(60)
 -0.5894082E-01 $ Imperfection normal displacement (normalized), WSHAPE(61)
 -0.5134647E-01 $ Imperfection normal displacement (normalized), WSHAPE(62)
 -0.4387064E-01 $ Imperfection normal displacement (normalized), WSHAPE(63)
 -0.3660512E-01 $ Imperfection normal displacement (normalized), WSHAPE(64)
 -0.2963092E-01 $ Imperfection normal displacement (normalized), WSHAPE(65)
 -0.2301789E-01 $ Imperfection normal displacement (normalized), WSHAPE(66)
 -0.1682465E-01 $ Imperfection normal displacement (normalized), WSHAPE(67)
 -0.1109871E-01 $ Imperfection normal displacement (normalized), WSHAPE(68)
 -0.5876693E-02 $ Imperfection normal displacement (normalized), WSHAPE(69)
 -0.1184755E-02 $ Imperfection normal displacement (normalized), WSHAPE(70)
  0.2912410E-02 $ Imperfection normal displacement (normalized), WSHAPE(71)
  0.5619691E-02 $ Imperfection normal displacement (normalized), WSHAPE(72)
  0.6554092E-02 $ Imperfection normal displacement (normalized), WSHAPE(73)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   19.03857     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4144000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         8      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   3.000000     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
   5.000000     $ R(I)  = radial coordinate of Ith thickness callout, r( 3)
   7.000000     $ R(I)  = radial coordinate of Ith thickness callout, r( 4)
   10.00000     $ R(I)  = radial coordinate of Ith thickness callout, r( 5)
   13.00000     $ R(I)  = radial coordinate of Ith thickness callout, r( 6)
   16.00000     $ R(I)  = radial coordinate of Ith thickness callout, r( 7)
   19.03857     $ R(I)  = radial coordinate of Ith thickness callout, r( 8)
  0.1940100     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.2299800     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
  0.8000000     $ TVAL(i) = thickness at Ith callout, TVAL( 3)
  0.2363800     $ TVAL(i) = thickness at Ith callout, TVAL( 4)
  0.3458700     $ TVAL(i) = thickness at Ith callout, TVAL( 5)
  0.3346000     $ TVAL(i) = thickness at Ith callout, TVAL( 6)
  0.3822400     $ TVAL(i) = thickness at Ith callout, TVAL( 7)
  0.3667000     $ TVAL(i) = thickness at Ith callout, TVAL( 8)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4144000E-03 $ STIFMD= stringer mass density
   9.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         8      $ NSTATN=number of merid. callouts for cross section props.
         3      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith section callout, r( 1)
   3.000000     $ R(I)  = radial coordinate of Ith section callout, r( 2)
   5.000000     $ R(I)  = radial coordinate of Ith section callout, r( 3)
   7.000000     $ R(I)  = radial coordinate of Ith section callout, r( 4)
   10.00000     $ R(I)  = radial coordinate of Ith section callout, r( 5)
   13.00000     $ R(I)  = radial coordinate of Ith section callout, r( 6)
   16.00000     $ R(I)  = radial coordinate of Ith section callout, r( 7)
   19.03857     $ R(I)  = radial coordinate of Ith section callout, r( 8)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 1)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 3)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 4)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 5)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 6)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 7)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 8)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 2)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 3)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 4)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 5)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 6)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 7)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 8)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    2    2    2    2    2    2    2    2
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        51      $ NMESH = number of node points (5 = min.; 98 = max.)( 2)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         2      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   19.03857     $ R1     = radius at beginning of segment (see p. 66)
   3.807736     $ Z1     = global axial coordinate at beginning of segment
   24.75000     $ R2     = radius at end of segment
   12.37500     $ Z2     = global axial coordinate at end of segment
   15.46879     $ RC     = radius from axis of rev. to center of curvature
   12.37500     $ ZC     = axial coordinate of center of curvature
  -1.000000     $ SROT=indicator for direction of increasing arc (-1. or +1.)
      H         $ IMPERFECTION SHAPE FOLLOWS...
         1      $ IMP   = indicator for imperfection (0=none, 1=some)
         4      $ ITYPE = index (1 or 2 or 3 or 4) for imperfection type
  0.2000000     $ Imperfection multiplier, AMPIMP(IMODE)
         1      $ Starting nodal point number, ISTART(IMODE)
        53      $ Number of values of WSHAPE to be read, NUMB(IMODE)
  0.6554146E-02 $ Imperfection normal displacement (normalized), WSHAPE( 1)
  0.7301384E-02 $ Imperfection normal displacement (normalized), WSHAPE( 2)
  0.9171983E-02 $ Imperfection normal displacement (normalized), WSHAPE( 3)
  0.1137789E-01 $ Imperfection normal displacement (normalized), WSHAPE( 4)
  0.1326401E-01 $ Imperfection normal displacement (normalized), WSHAPE( 5)
  0.1480538E-01 $ Imperfection normal displacement (normalized), WSHAPE( 6)
  0.1601094E-01 $ Imperfection normal displacement (normalized), WSHAPE( 7)
  0.1689302E-01 $ Imperfection normal displacement (normalized), WSHAPE( 8)
  0.1746703E-01 $ Imperfection normal displacement (normalized), WSHAPE( 9)
  0.1775101E-01 $ Imperfection normal displacement (normalized), WSHAPE(10)
  0.1776519E-01 $ Imperfection normal displacement (normalized), WSHAPE(11)
  0.1753156E-01 $ Imperfection normal displacement (normalized), WSHAPE(12)
  0.1707336E-01 $ Imperfection normal displacement (normalized), WSHAPE(13)
  0.1641466E-01 $ Imperfection normal displacement (normalized), WSHAPE(14)
  0.1557988E-01 $ Imperfection normal displacement (normalized), WSHAPE(15)
  0.1459338E-01 $ Imperfection normal displacement (normalized), WSHAPE(16)
  0.1347907E-01 $ Imperfection normal displacement (normalized), WSHAPE(17)
  0.1226008E-01 $ Imperfection normal displacement (normalized), WSHAPE(18)
  0.1095842E-01 $ Imperfection normal displacement (normalized), WSHAPE(19)
  0.9594808E-02 $ Imperfection normal displacement (normalized), WSHAPE(20)
  0.8188435E-02 $ Imperfection normal displacement (normalized), WSHAPE(21)
  0.6755637E-02 $ Imperfection normal displacement (normalized), WSHAPE(22)
  0.5312772E-02 $ Imperfection normal displacement (normalized), WSHAPE(23)
  0.3876287E-02 $ Imperfection normal displacement (normalized), WSHAPE(24)
  0.2462836E-02 $ Imperfection normal displacement (normalized), WSHAPE(25)
  0.1089466E-02 $ Imperfection normal displacement (normalized), WSHAPE(26)
 -0.2261642E-03 $ Imperfection normal displacement (normalized), WSHAPE(27)
 -0.1465505E-02 $ Imperfection normal displacement (normalized), WSHAPE(28)
 -0.2608816E-02 $ Imperfection normal displacement (normalized), WSHAPE(29)
 -0.3634888E-02 $ Imperfection normal displacement (normalized), WSHAPE(30)
 -0.4520831E-02 $ Imperfection normal displacement (normalized), WSHAPE(31)
 -0.5242070E-02 $ Imperfection normal displacement (normalized), WSHAPE(32)
 -0.5772700E-02 $ Imperfection normal displacement (normalized), WSHAPE(33)
 -0.6086480E-02 $ Imperfection normal displacement (normalized), WSHAPE(34)
 -0.6158838E-02 $ Imperfection normal displacement (normalized), WSHAPE(35)
 -0.5996115E-02 $ Imperfection normal displacement (normalized), WSHAPE(36)
 -0.5614045E-02 $ Imperfection normal displacement (normalized), WSHAPE(37)
 -0.5038024E-02 $ Imperfection normal displacement (normalized), WSHAPE(38)
 -0.4302962E-02 $ Imperfection normal displacement (normalized), WSHAPE(39)
 -0.3452569E-02 $ Imperfection normal displacement (normalized), WSHAPE(40)
 -0.2537947E-02 $ Imperfection normal displacement (normalized), WSHAPE(41)
 -0.1615362E-02 $ Imperfection normal displacement (normalized), WSHAPE(42)
 -0.7431129E-03 $ Imperfection normal displacement (normalized), WSHAPE(43)
  0.2250205E-04 $ Imperfection normal displacement (normalized), WSHAPE(44)
  0.6664724E-03 $ Imperfection normal displacement (normalized), WSHAPE(45)
  0.1189308E-02 $ Imperfection normal displacement (normalized), WSHAPE(46)
  0.1599680E-02 $ Imperfection normal displacement (normalized), WSHAPE(47)
  0.1909730E-02 $ Imperfection normal displacement (normalized), WSHAPE(48)
  0.2132282E-02 $ Imperfection normal displacement (normalized), WSHAPE(49)
  0.2279330E-02 $ Imperfection normal displacement (normalized), WSHAPE(50)
  0.2360645E-02 $ Imperfection normal displacement (normalized), WSHAPE(51)
  0.2385022E-02 $ Imperfection normal displacement (normalized), WSHAPE(52)
  0.2386953E-02 $ Imperfection normal displacement (normalized), WSHAPE(53)
      N         $ Do you want to provide any more imperfection modes?
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         2      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   3.807736     $ Z(I)  = axial coordinate of Ith loading callout, z( 1)
   12.37500     $ Z(I)  = axial coordinate of Ith loading callout, z( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
        10      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
         2      $ NWALL2=index (2, 4, 5, 9) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4144000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
   0.000000     $ ALPHA = coefficient of thermal expansion
         1      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         5      $ NTVALU= number of callouts along segment for thickness
         2      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   3.807740     $ Z(I)  = axial coordinate of Ith thickness callout, z( 1)
   6.000000     $ Z(I)  = axial coordinate of Ith thickness callout, z( 2)
   8.500000     $ Z(I)  = axial coordinate of Ith thickness callout, z( 3)
   10.50000     $ Z(I)  = axial coordinate of Ith thickness callout, z( 4)
   12.37500     $ Z(I)  = axial coordinate of Ith thickness callout, z( 5)
  0.3667000     $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.3007500     $ TVAL(i) = thickness at Ith callout, TVAL( 2)
  0.1758400     $ TVAL(i) = thickness at Ith callout, TVAL( 3)
  0.1507600     $ TVAL(i) = thickness at Ith callout, TVAL( 4)
  0.2448200     $ TVAL(i) = thickness at Ith callout, TVAL( 5)
      Y         $ Do you want to print out ref. surf. location and thickness?
      H         $ SMEARED STIFFENER INPUT FOLLOWS...
      Y         $ Are there stringers or isogrid (please answer Y or N)?
         0      $ K1 =control (0 or 1) for internal or external stringers
  0.1600000E+08 $ E1    = stringer modulus
  0.2500000     $ U1    = stringer Poisson ratio
  0.4144000E-03 $ STIFMD= stringer mass density
   9.000000     $ SPACNG= spacing of the isogrid members
      N         $ Is the stringer cross section constant in this segment?
         5      $ NSTATN=number of merid. callouts for cross section props.
         2      $ NTYPE=control for meaning of section callout (2=z, 3=r)
   3.807740     $ Z(I)  = axial coordinate of Ith section callout, z( 1)
   6.000000     $ Z(I)  = axial coordinate of Ith section callout, z( 2)
   8.500000     $ Z(I)  = axial coordinate of Ith section callout, z( 3)
   10.50000     $ Z(I)  = axial coordinate of Ith section callout, z( 4)
   12.37500     $ Z(I)  = axial coordinate of Ith section callout, z( 5)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 1)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 2)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 3)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 4)
  0.3000000E-03 $ T(i) = thickness of stringer at ith callout, T( 5)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 1)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 2)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 3)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 4)
  0.3000000E-03 $ H(i) = height of stringer at ith callout, H( 5)
      N         $ Are there rings (please answer Y or N)?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    3    3    3    3    3    3    3    3
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        51      $ NMESH = number of node points (5 = min.; 98 = max.)( 3)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
   24.75000     $ R1     = radius at beginning of segment (see p. 66)
   12.37500     $ Z1     = global axial coordinate at beginning of segment
   24.75000     $ R2     = radius at end of segment
   30.00000     $ Z2     = global axial coordinate at end of segment
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         0      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
   100.0000     $ E     = Young's modulus for skin
   0.000000     $ U     = Poisson's ratio for skin
  0.1000000E-07 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
         0      $ NSUR   = control for thickness input (0 or 1 or -1)
      N         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ GLOBAL DATA BEGINS...
         1      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
   1.000000     $ P      = pressure or surface traction multiplier
   0.000000     $ DP     = pressure or surface traction multiplier increment
   0.000000     $ TEMP   = temperature rise multiplier
   0.000000     $ DTEMP  = temperature rise multiplier increment
         1      $ Number of load steps
   0.000000     $ OMEGA  = angular vel. about axis of revolution (rad/sec)
   0.000000     $ DOMEGA = angular velocity increment (rad/sec)
      H         $ CONSTRAINT CONDITIONS FOLLOW....
         3      $ How many segments in the structure?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    1    1    1    1
      H         $ POLES INPUT FOLLOWS...
         1      $ Number of poles (places where r=0) in SEGMENT( 1)
         1      $ IPOLE = nodal point number of pole, IPOLE( 1)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      N         $ Is this segment joined to any lower-numbered segments?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    2    2    2    2
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 2)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         1      $ JSEG  = segment no. of lowest segment involved in junction
        71      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    3    3    3    3
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 3)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         1      $ At how many stations is this segment constrained to ground?
        51      $ INODE = nodal point number of constraint to ground, INODE( 1)
         1      $ IUSTAR=axial displacement constraint (0 or 1 or 2)
         0      $ IVSTAR=circumferential displacement(0=free,1=0,2=imposed)
         0      $ IWSTAR=radial displacement(0=free,1=constrained,2=imposed)
         1      $ ICHI=meridional rotation (0=free,1=constrained,2=imposed)
   0.000000     $ D1    = radial component of offset of ground support
   0.000000     $ D2    = axial component of offset of ground support
      N         $ Is this constraint the same for both prebuckling and buckling?
         1      $ IUSTARB= axial displacement for buckling or vibration phase
         0      $ IVSTARB= circ. displacement for buckling or vibration phase
         0      $ IWSTARB= radial displacement for buckling or vibration
         1      $ ICHIB  = meridional rotation for buckling or vibration
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         2      $ JSEG  = segment no. of lowest segment involved in junction
        51      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
   0.000000     $ D1    = radial component of juncture gap
   0.000000     $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $ RIGID BODY CONSTRAINT INPUT FOLLOWS...
      N         $ Given existing constraints, are rigid body modes possible?
      H         $ "GLOBAL3" QUESTIONS (AT END OF CASE)...
      Y         $ Do you want to list output for segment( 1)
      Y         $ Do you want to list output for segment( 2)
      Y         $ Do you want to list output for segment( 3)
      Y         $ Do you want to list forces in the discrete rings, if any?
------------------------------------------------------------------------------





25. November 2006
This is a significant modification to BIGBOSOR4 (original BOSOR4 not modified).
A case was run involving an internally pressurized ellipsoidal shell. Results
from BIGBOSOR4 and BOSOR5 were compared for a shell with elastic material
The results from BOSOR5 agreed with results from STAGS, but the results from
BOSOR4 were a bit different. There was enough of a difference to investigate.
It was found that in the nonlinear prebuckling analysis, the "live" pressure
effect (the effect of the normal to the shell rotating during axisymmetric
prebuckling deformations and the pressure remaining normal to the deformed
shell) was handled differently in BIGBOSOR4 and in BOSOR5. This difference
in formulation of the prebuckling analysis caused the difference in results
from BIGBOSOR4 and BOSOR5. The "live" pressure terms in the BOSOR5 formulation
are given in lines 3 and 4 of Eq.(3) in the paper, "Buckling of elastic-plastic
shells of revolution with discrete elastic-plastic ring stiffeners", Int. J.
Solids Structures, Vol. 12, pp. 51-66, 1976. These terms originate from the
theory of G. A. Cohen, given the the paper, "Conservativeness of a normal pressure
field acting on a shell", AIAA J. Vol. 4, p. 1886, 1966. In the "live" pressure
formulation given in BIGBOSOR4 (and also in BOSOR4) some of Cohen's terms are
absent. Apparently they should have been included.

Accordingly, SUBROUTINE PRESTS in the addbosor4.src library of BIGBOSOR4
was modified as follows:
------------------------------------------------------------------------------
C     PSI(I) = NEW LOCAL RIGHT-HAND-SIDE VECTOR. CONTRIBUTION FROM
C     SHELL STRAIN ENERGY,    PRESSURE AND SURFACE TRACTIONS.
C     ALSO, ELASTIC FOUNDATION WITH STIFFNESS FSTIF(JSEG)
C
C  From BIGBOSOR4 pre  NOV 9, 2006:
C     PSI(I)=RDS*(QBCB(I) +TNB(I) +CHI*CHI*CB(1,I)/2. + ROT(I)*F1
C    1- F3*UB(I) - F4*WB(I) +FSTIF(JSEG)*W*WB(I))
C
C  from BIGBOSOR4 post NOV 9, 2006 (taken directly from BOSOR5):
      PSI(I)=RDS*(QBCB(I) +TNB(I) +CHI*CHI*CB(1,I)/2. + ROT(I)*F1
     1 - P1*UB(I) -.5*P3*(2.*WB(I) +W*(B(1,I)+B(2,I))
     1 + WB(I)*(QB(1)+QB(2)) - CHI*UB(I) - ROT(I)*U )
     1 + FSTIF(JSEG)*W*WB(I)   )
C
C     BCB(I,J) = LOCAL SHELL STRAIN ENERGY MATRIX,WITH 'LIVE' PRESSURE
C                AND ELASTIC FOUNDATION STIFFNESS, FSTIF(JSEG).
C
      DO 50 J=1,I
C
C  From BIGBOSOR4 pre  NOV 9, 2006:
C     BCB(I,J) = RDS*(B(1,J)*CB(1,I)+B(2,J)*CB(2,I)+B(3,J)*CB(3,I)
C    1+B(4,J)*CB(4,I) +F2*ROT(I)*ROT(J) +CHI*(ROT(J)*CB(1,I) +ROT(I)*
C    2CB(1,J)) +FSTIF(JSEG)*WB(I)*WB(J)              )
C
C  from BIGBOSOR4 post NOV 9, 2006 (taken directly from BOSOR5):
      BCB(I,J) = RDS*(B(1,J)*CB(1,I)+B(2,J)*CB(2,I)+B(3,J)*CB(3,I)
     1 +B(4,J)*CB(4,I) +F2*ROT(I)*ROT(J) +CHI*(ROT(J)*CB(1,I) +ROT(I)*
     2 CB(1,J)) -.5*P3*(WB(J)*(B(1,I)+B(2,I)) +WB(I)*(B(1,J)+B(2,J))
     3 -ROT(J)*UB(I) - ROT(I)*UB(J) ) + FSTIF(JSEG)*WB(I)*WB(J)  )
C END NOV 2006
50    CONTINUE
--------------------------------------------------------------------------

With this modification the predictions from BOSOR4, BOSOR5, and STAGS
now all agree for a particular internally pressurized ellipsoidal shell.

The BIGBOSOR4 input data for the case that was used in this study are
as follows (the test.ALL file):
--------------------------------------------------------------------
Nonlinear axisymmetric stress analysis (INDIC=0)                        
         0      $ INDIC = analysis type indicator
         1      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         1      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
         1      $ NSEG  = number of shell segments (less than 195)
      H         $
      H         $ SEGMENT NUMBER    1    1    1    1    1    1    1    1
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        17      $ NMESH = number of node points (5 = min.; 98 = max.)( 1)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         4      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
         4      $ NST   = indicator for geometry: 1=general, 4=ellipsoid
   12.53700     $ ZMAX  = length of half of axial axis of ellipsoid (p.66)
   19.82300     $ XMAX  = length of half of radial axis of ellipsoid
   0.000000     $ ZA    = axial distance to beginning of segment (p.66)
   12.53700     $ ZB    = axial distance to end of segment (p. 66)
         0      $ ALPHAT= radial distance from axis of rev. to center.
  -12.53700     $ ZGLOBL= global axial coordinate of the point ZA
      Y         $ Do you want to print out the (z,r) coordinates (input data)?
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
   0.000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      Y         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         0      $ NRINGS= number (max=20) of discrete rings in this segment
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         1      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SURFACE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ NLTYPE=control (0,1,2,3) for type of surface loading
         2      $ NPSTAT= number of meridional callouts for surface loading
         0      $ NLOAD(1)=indicator for meridional traction (0=none, 1=some)
         0      $ NLOAD(2)=indicator for circumferential traction
         1      $ NLOAD(3)=indicator for normal pressure     (0=none, 1=some)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 1)
  -1.000000     $ PN(i)   = normal pressure (p.74) at ith callout, PN( 2)
         3      $ NTYPE = control for meaning of loading callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith loading callout, r( 1)
   19.82300     $ R(I)  = radial coordinate of Ith loading callout, r( 2)
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
  0.1600000E+08 $ E     = Young's modulus for skin
  0.2500000     $ U     = Poisson's ratio for skin
  0.4155000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
        -1      $ NSUR   = control for thickness input (0 or 1 or -1)
         1      $ NTYPET= index (1 or 3) for type of input for thickness
         4      $ NTVALU= number of callouts along segment for thickness
         3      $ NTYPE = control for meaning of thickness callout (2=z, 3=r)
   0.000000     $ R(I)  = radial coordinate of Ith thickness callout, r( 1)
   18.00000     $ R(I)  = radial coordinate of Ith thickness callout, r( 2)
   19.00000     $ R(I)  = radial coordinate of Ith thickness callout, r( 3)
   19.82300     $ R(I)  = radial coordinate of Ith thickness callout, r( 4)
  0.4500000E-01 $ TVAL(i) = thickness at Ith callout, TVAL( 1)
  0.4500000E-01 $ TVAL(i) = thickness at Ith callout, TVAL( 2)
  0.4500000E-01 $ TVAL(i) = thickness at Ith callout, TVAL( 3)
  0.4500000E-01 $ TVAL(i) = thickness at Ith callout, TVAL( 4)
      Y         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ GLOBAL DATA BEGINS...
         1      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
  -1000.000     $ P      = pressure or surface traction multiplier
  -1000.000     $ DP     = pressure or surface traction multiplier increment
   0.000000     $ TEMP   = temperature rise multiplier
   0.000000     $ DTEMP  = temperature rise multiplier increment
         1      $ Number of load steps
   0.000000     $ OMEGA  = angular vel. about axis of revolution (rad/sec)
   0.000000     $ DOMEGA = angular velocity increment (rad/sec)
      H         $ CONSTRAINT CONDITIONS FOLLOW....
         1      $ How many segments in the structure?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    1    1    1    1
      H         $ POLES INPUT FOLLOWS...
         1      $ Number of poles (places where r=0) in SEGMENT( 1)
         1      $ IPOLE = nodal point number of pole, IPOLE( 1)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         1      $ At how many stations is this segment constrained to ground?
        17      $ INODE = nodal point number of constraint to ground, INODE( 1)
         1      $ IUSTAR=axial displacement constraint (0 or 1 or 2)
         1      $ IVSTAR=circumferential displacement(0=free,1=0,2=imposed)
         0      $ IWSTAR=radial displacement(0=free,1=constrained,2=imposed)
         1      $ ICHI=meridional rotation (0=free,1=constrained,2=imposed)
         0      $ D1    = radial component of offset of ground support
         0      $ D2    = axial component of offset of ground support
      N         $ Is this constraint the same for both prebuckling and buckling?
         1      $ IUSTARB= axial displacement for buckling or vibration phase
         0      $ IVSTARB= circ. displacement for buckling or vibration phase
         0      $ IWSTARB= radial displacement for buckling or vibration
         1      $ ICHIB  = meridional rotation for buckling or vibration
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      N         $ Is this segment joined to any lower-numbered segments?
      H         $ RIGID BODY CONSTRAINT INPUT FOLLOWS...
      N         $ Given existing constraints, are rigid body modes possible?
      H         $ "GLOBAL3" QUESTIONS (AT END OF CASE)...
      Y         $ Do you want to list output for segment( 1)
      Y         $ Do you want to list forces in the discrete rings, if any?
-------------------------------------------------------------------------------

Some output for the axisymmetric nonlinear elastic analysis from the modified
BIGBOSOR4 follow:
-----------------------------------------------------------------------------
 PRESSURE MULTIPLIER, P=  -1.000000E+03, TEMPERATURE MULTIPLIER,TEMP =   0.000000E+00
 ANGULAR VELOCITY, OMEGA=   0.000000E+00

 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   0. START FACTORING AND SOLVING
 Factoring done for iteration   0; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  0
 ITERATION NO.  0 MAXIMUM DISPLACEMENT=  8.8191E-01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   1. START FACTORING AND SOLVING
 Factoring done for iteration   1; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  1
 ITERATION NO.  1 MAXIMUM DISPLACEMENT=  7.3191E-01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   2. START FACTORING AND SOLVING
 Factoring done for iteration   2; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  2
 ITERATION NO.  2 MAXIMUM DISPLACEMENT=  7.2787E-01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   3. START FACTORING AND SOLVING
 Factoring done for iteration   3; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  3
 ITERATION NO.  3 MAXIMUM DISPLACEMENT=  7.2787E-01
------------------------------------------------------------------------------------------

The analogous results from BOSOR5 are identical:
-----------------------------------------------------------------------------------------
 ENTER THE NEWTON-RAPHSON ITERATION LOOP FOR TIME STEP NO.  1    TIME =    1.000000E+03

 TRIAL NO.  1  ITERATION NO.  1  MAXIMUM DISPLACEMENT =  8.81913126E-01
 TRIAL NO.  1  ITERATION NO.  2  MAXIMUM DISPLACEMENT =  7.31911898E-01
 TRIAL NO.  1  ITERATION NO.  3  MAXIMUM DISPLACEMENT =  7.27873504E-01
 TRIAL NO.  1  ITERATION NO.  4  MAXIMUM DISPLACEMENT =  7.27870286E-01
-----------------------------------------------------------------------------------------

The results from BIGBOSOR4 before the modification were as follows:
-----------------------------------------------------------------------------------------
 PRESSURE MULTIPLIER, P=  -1.000000E+03, TEMPERATURE MULTIPLIER,TEMP =   0.000000E+00
 ANGULAR VELOCITY, OMEGA=   0.000000E+00

 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   0. START FACTORING AND SOLVING
 Factoring done for iteration   0; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  0
 ITERATION NO.  0 MAXIMUM DISPLACEMENT=  8.9583E-01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   1. START FACTORING AND SOLVING
 Factoring done for iteration   1; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  1
 ITERATION NO.  1 MAXIMUM DISPLACEMENT=  7.3854E-01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   2. START FACTORING AND SOLVING
 Factoring done for iteration   2; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  2
 ITERATION NO.  2 MAXIMUM DISPLACEMENT=  7.3442E-01
 PRESTRESS STIFFNESS MATRIX CALCULATED FOR ITERATION NO.   3. START FACTORING AND SOLVING
 Factoring done for iteration   3; Load step, ISTEP=   1
 FACTORING AND SOLVING COMPLETED FOR PRESTRESS ITERATION NO.  3
 ITERATION NO.  3 MAXIMUM DISPLACEMENT=  7.3442E-01
-----------------------------------------------------------------------------------------

BOSOR4 (not BIGBOSOR4) will still give the results just listed because it
was not modified.




26. March 2007
The capacity of BIGBOSOR4 was approximately doubled. The maximum number
of shell segments was increased from 195 to 295, the maximum number
of constraint conditions was increased from 198 to 298, and the
maximum allowable number of degrees of freedom was doubled. Also,
the maximum block size, IMAX, was doubled.




27. February, 2008
Three new files have been added to the ...genopt/doc directory:

1. bosor4papers.tar	(contains a collection of BOSOR4 papers)
2. bushnell.bio.pdf     (short biography/photograph of David Bushnell)
3. howtorunlinux.pdf    (directions on how to get started)

In order to "unpack" the compressed "tar" file, bosor4papers.tar, type the
following command:

tar xvf bosor4papers.tar

This command will generate the following *.pdf files:

-rw-r--r--   1 bush bush  2349718 Feb  9 13:29 1974bosor4.pdf
-rw-r--r--   1 bush bush  7846088 Feb  8  2006 1981pitfalls.pdf
-r--r--r--   1 bush bush  4017513 Feb  7 13:46 BIGBOSOR4-Vol-1.pdf
-r--r--r--   1 bush bush  4367312 Feb  7 13:51 BIGBOSOR4-Vol-2.pdf
-r--r--r--   1 bush bush  3309691 Feb  7 15:03 BIGBOSOR4-Vol-3.pdf
-rw-r--r--   1 bush bush  2242182 Nov 20  2006 bosor4nikulari.pdf
-rw-r--r--   1 bush bush  4695863 Dec  1  2005 governingequations.pdf
-rw-r--r--   1 bush bush 11786187 Nov 24  2006 oldusersmanual.pdf
-rw-r--r--   1 bush bush   439788 Jan 25  2006 prismaticshells.pdf

The three files, BIGBOSOR4-Vol-1.pdf, BIGBOSOR4-Vol-2.pdf, BIGBOSOR4-Vol-3.pdf, are:

 BIGBOSOR4-Vol-1.pdf  (first  third of Lockheed report LMMS P525674, Nov. 1999)
 BIGBOSOR4-Vol-2.pdf  (second third of Lockheed report LMMS P525674, Nov. 1999)
 BIGBOSOR4-Vol-3.pdf  (final  third of Lockheed report LMMS P525674, Nov. 1999)




28. February 2008
The size of the BBB vector was increased from 100000 to 200000. The purpose is
to avoid breaking up the BBB data into more than one block of data. The breaking
up of the BBB data into more than one block requires multiple GASPs and resulted
in unknown errors when bigbosor4 was used in connection with genopt.



29. March 2008

ADDITION OF SPRINGS IN BIGBOSOR4 CONNECTING A "FAKE" RING TO GROUND

David Bushnell

March 25, 2008

ABSTRACT

Connection of an otherwise unconstrained shell structure to
ground by means of linear elastic springs pinned at their ends
simulates a strut-supported structure with pin-ended struts.
The springs are entered into the BIGBOSOR4 input file as
discrete elastic structures attached at one end to user-defined discrete
points around the circumference of a "fake" ring joined to the
shell and attached at the other end to user-defined discrete points at
ground. Even so, since BIGBOSOR4 can handle only axisymmetric structures,
the effect of the springs is "smeared out" by BIGBOSOR4 over the
circumference where the springs are attached to the "fake" ring.
Essentially, the springs act as a thick conical shell extending from
the "fake" ring where the springs are attached to the shell structure
to ground where the springs are attached to ground. The overall
extensional and shear stiffnesses of this imaginary conical shell match
those of the assemblage of springs. In a linear non-axisymmetric
stress and buckling analysis the springs contribute strain energy
to the structure only in the n = 0 and n = 1 circumferential
wave harmonics. The springs thus prevent rigid body displacements
of the structure. The internal concentrated loads applied
by the springs to the "fake" ring (and therefore to the
shell) are computed by BIGBOSOR4 and listed in the BIGBOSOR4 
output file. These concentrated loads can be applied to the
same shell structure without springs in a separate and subsequent
execution of BIGBOSOR4 in order to determine local deformations
and stresses caused by them and in order to determine
lowered "effective" spring constants because the springs
react against a deformable structure, not against a rigid 
structure. An example is given of a sequence of two
BIGBOSOR4 runs, the first run involving a spring-supported
cylindrical shell subjected to an overall static bending moment
at its top end and the second run involving the same shell
with the springs replaced by line loads applied to the
"fake" ring that simulate the concentrated spring reaction loads 
applied by the springs to the bottom of the cylindrical
shell in the first execution of BIGBOSOR4.


THEORY

The theory is presented in SUBROUTINE SPRING, a copy of which
follows:
--------------------------------------------------------------
C BEG MAR 2008
C=DECK      SPRING
      SUBROUTINE SPRING(IFILE4,K,IANGLE,TBAR,U)
C
C  March 16, 2008
C  Purpose is to add strain energy of the IANGLEth spring
C  attached to ring no. K.
C
C  For a complete description of the theory on which
C  BIGBOSOR4 is based, please see pp.485-508 of the paper:
C
C    Bushnell, D.,
C    "Computerized analysis of shells - governing
C    equations", Computers & Structures, Vol.18, No. 3,
C    pp.471-536 (1984)
C
C  Then you will understand better what goes on here.
C
C  NOTE: This subroutine only works if the springs are
C        attached to ground.
C
C  Meanings of variables:
C
C IFILE4 = file for listed output (<casename>.OUT)
C K      = global ring number
C IANGLE = number of spring attached to the "fake" ring
C
C TBAR   = transformation from ustar,v,wstar,beta to nodal
C          unknowns, q . Same as "D" in the calling routine.
C          See Eqs.(155,156) on p.499 of the paper cited below.
C
C U      = strain energy matrix divided by pi. The strain energy
C          of the assemblage of springs connected at this
C          particular meridional nodal point contributes to
C          this 7 x 7 local "finite element" stiffness matrix.
C          See Fig. 24 on p.498 of the paper, Bushnell, D.,
C          "Computerized analysis of shells - governing
C          equations", Computers & Structures, Vol.18, No. 3,
C          pp.471-536 (1984), for a schematic of an assemblage
C          of these local 7x7 "finite element" stiffness
C          matrices into the total stiffness matrix of a very
C          simple structure shown in Fig.20(b) on p. 493 of
C          the paper just cited.
C
C The following are input quantities relating to springs
C attached to this ring:
C
C NTYPAL = index for type of ring (NTYPAL = -1 means
C          a "fake" ring with springs attached to it.)
C NGROUN = 1 if springs are attached to ground,
C          0 if springs are attached to a previous
C          ring. (NOTE: The coding has not been
C          written for the NGROUN = 0 option.)
C NSPRNG = number of springs attached to this ring
C SPRAXL = global axial coordinate of this ring
C SPRANG = circumferential angles of the NSPRNG
C          spring attachment points on this ring
C SPRKON = spring constant for each of the NSPRNG
C          springs attached to this ring
C SPREC1 = radial eccentricity e1 of the attachment
C          points of all the springs to this ring
C SPREC2 = axial  eccentricity e2 of the attachment
C          points of all the springs to this ring
C SPRAXG = global axial coordinate of the attachment
C          of all the springs associated with this
C          ring to ground
C SPRRAD = radius of spring ground attachment points
C SPRAGG = circumferential angles of NSPRNG spring
C          attachment points at ground for springs
C          associated with this ring.
C
C ******************* IMPORTANT NOTE **************************
C This model essentially smears out the springs. Only the n = 0
C (axisymmetric up-and-down displacement and/or uniform rolling 
C about the axis of revolution) and n = 1 (uniform lateral
C displacement and/or pitching displacement) are predicted accurately.
C In order to obtain the static response for higher circumferential
C wavenumbers, n, than n = 0 and/or n = 1, you must include as
C BIGBOSOR4 input the concentrated forces that the springs apply
C to the "fake" ring and therefore to the shell where they are
C attached. 
C ***************************************************************
      COMMON/RING4/SPRAXL(198),SPRANG(30,198),SPRKON(30,198),SPRAXG(198)
      COMMON/RING5/SPREC1(198),SPREC2(198),SPRRAD(198),SPRAGG(30,198)
      COMMON/RING6/NSPRNG(198),ISPRSG(198),ISPRRG(198),NTYPAL(198)
      COMMON/RING7/NGROUN(198)
      COMMON/GGG/ R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION  R,RD,FK1,FK2,CURD,RDS,FN,H
      DOUBLE PRECISION  TBAR,EBAR,XBAR,FKBAR,U,A,B,C,FKEFF
      DOUBLE PRECISION  THETRI,THETGI,CTHETR,STHETR,CTHETG,STHETG
      DOUBLE PRECISION  XRING,YRING,ZRING,XGROUN,YGROUN,ZGROUN
      DOUBLE PRECISION  FKX,FKXE
      DIMENSION TBAR(4,7),EBAR(3,4),XBAR(3,3),FKBAR(3,3),U(7,7)
      DIMENSION FKX(3,3),FKXE(4,4)
C
C     WRITE(IFILE4,'(A,2I5)')
C    1' Entering SUBROUTINE SPRING. K, IANGLE=',K, IANGLE
C
C  EBAR is the transformation matrix from axial, circumferential,
C       and radial displacements, 
C       ustar(attach pt.), v(attach pt.), wstar(attach pt.)
C       at the attachment point of the IANGLEth spring to the "fake"
C       ring to the axial displacement, circumferential displacement,
C       radial displacement, and meridional rotation at the shell
C       reference surface:
C       ustar(shell ref. surf), v(shell ref. surf.),
C       wstar(shell ref. surf), and beta(merid. rot.):
C       See Eqs.(152,153) on p.499 of the paper cited above
C       in connection with the 7 x 7 local stiffness matrix, U.
C
C                              3 x 4
C      |ustar(attach pt.)|   |        | |ustar(shell ref. surf.)  |
C      |    v(attach pt.)| = |  EBAR  |*|    v(shell ref. surf.)  |
C      |wstar(attach pt.)|   |        | |wstar(shell ref. surf.)  |
C                                       |beta(meridional rotation)|
C
C   FN is the number of circumferential waves
C    R is the radius of the parallel circle (at the ref. surface).
C
      EBAR(1,1) = 1.
      EBAR(1,2) = 0.
      EBAR(1,3) = 0.
      EBAR(1,4) = -SPREC1(K)
      EBAR(2,1) = -SPREC2(K)*FN/R
      EBAR(2,2) = 1. + SPREC1(K)/R
      EBAR(2,3) = -SPREC1(K)*FN/R
      EBAR(2,4) = 0.
      EBAR(3,1) = 0.
      EBAR(3,2) = 0.
      EBAR(3,3) = 1.
      EBAR(3,4) = SPREC2(K)
C
C     WRITE(IFILE4,'(/,A)')' EBAR(i,j)='
C     DO 10 I = 1,3
C       WRITE(IFILE4,'(1P4E12.4)') (EBAR(I,J),J=1,4)
C  10 CONTINUE
C
C  Next, find the length of each spring.
      PI = 3.1415927
      THETRI = SPRANG(IANGLE,K)*PI/180.
      CTHETR = DCOS(THETRI)
      STHETR = DSIN(THETRI)
      XRING  = (R + SPREC1(K))*CTHETR
      YRING  = SPRAXL(K)
      ZRING  = (R + SPREC1(K))*STHETR
      THETGI = SPRAGG(IANGLE,K)*PI/180.
      CTHETG = DCOS(THETGI)
      STHETG = DSIN(THETGI)
      XGROUN = SPRRAD(K)*CTHETG
      YGROUN = SPRAXG(K)
      ZGROUN = SPRRAD(K)*STHETG
      A = XRING - XGROUN
      B = YRING - YGROUN
      C = ZRING - ZGROUN
C
C     FLONG2 is the square of the undeformed length L of the IANGLEth
C     spring with spring constant SPRKON(IANGLE,K), where K = global
C     ring number. Each spring attached to a given ring may have a
C     different spring constant, SPRKON(IANGLE,K). Originally all the
C     spring constants at a given ring are the same. However, when we
C     take into account the softening effect of local shell deformation
C     on the "effective" stiffness of a spring, each spring may develop
C     a different "effective" spring constant. Usually the following
C     will happen: The "effective" stiffnesses of the springs at
C     circumferential coordinates 0 and 180 degrees will have one
C     "effective" spring constant and those at 90 and 270 degrees will
C     have a different "effective" spring constant.
C
      FLONG2 = A*A + B*B + C*C 
C
C     FKEFF is the "effective" stiffness divided by PI to be
C           consistent with the shell strain energy. It is also
C           divided by the square of the undeformed spring length,
C           L x L, because this quantity is common to all the
C           elements of the stiffness matrix. The 0.5 factor
C           comes from the strain energy being of the form,
C
C           U(spring) = 0.5*SPRKON(IANGLE,K)*(delta L)**2 .
C
C           in which "delta L" is the change in length of the
C           IANGLEth spring due to reference surface displacements
C           components, u,v,w, of the shell wall with which the
C           spring attachment points on the "fake" ring are
C           linked.
C
      FKEFF = 0.5*SPRKON(IANGLE,K)/(PI*FLONG2)
C
C     FKBAR is the spring stiffness matrix for the IANGLEth spring
C           attached to global ring number K. This stiffness matrix
C           is valid only if one end of each spring is connected to
C           ground. All springs from a given "fake" ring must be
C           connected at their other ends to ground at the same
C           global axial coordinate, SPRAXG(K), and at the same
C           radial coordinate, SPRRAD(K).
C
C     The quantity, (delta L) in the expression for the strain
C     energy, U(spring), above is given by:
C
C     (delta L) =    (A*dx + B*dy + C*dz)/L
C
C     in which A, B, and C are the x-direction, y-direction, and
C     z-direction distances from the ring end of the spring to the
C     ground end of the spring, and x, y, and z are global cartesian
C     coordinates, with y containing the axis of revolution of the
C     shell. The undeformed spring length, L, is the square root
C     of (A*A + B*B + C*C).
C
C     The strain energy of the spring, U(spring), can be expressed
C     in the form,
C
C     U(spring) =
C     [0.5*SPRKON(IANGLE,K)/(L*L)]*[dx, dy, dz]*| A*A  A*B  A*C | |dx|
C                                               | A*B  B*B  B*C |*|dy|
C                                               | A*C  B*C  C*C | |dz|
C
C     Accordingly, the 3 x 3 stiffness matrix, FKBAR, is given
C     as follows:
C
      FKBAR(1,1) = FKEFF*A*A
      FKBAR(1,2) = FKEFF*A*B
      FKBAR(1,3) = FKEFF*A*C
      FKBAR(2,1) = FKBAR(1,2)
      FKBAR(2,2) = FKEFF*B*B
      FKBAR(2,3) = FKEFF*B*C
      FKBAR(3,1) = FKBAR(1,3)
      FKBAR(3,2) = FKBAR(2,3)
      FKBAR(3,3) = FKEFF*C*C
C
C     WRITE(IFILE4,'(/,A)')' FKBAR(i,j)='
C     DO 20 I = 1,3
C       WRITE(IFILE4,'(1P3E12.4)') (FKBAR(I,J),J=1,3)
C  20 CONTINUE
C
C     XBAR is the transformation matrix from dx, dy, dz
C          to ustar(attach pt.), v(attach pt.), wstar(attach pt.),
C          as follows:
C
C  |dx|   | 0.0   -sin(THETRI)  cos(THETRI)|   |ustar(attach pt.)|
C  |dy| = | 1.0        0.0          0.0    | * |    v(attach pt.)|
C  |dz|   | 0.0    cos(THETRI)  sin(THETRI)|   |wstar(attach pt.)|
C
      XBAR(1,1) = 0.
      XBAR(1,2) = -STHETR
      XBAR(1,3) =  CTHETR
      XBAR(2,1) = 1.
      XBAR(2,2) = 0.
      XBAR(2,3) = 0.
      XBAR(3,1) = 0.
      XBAR(3,2) =  CTHETR
      XBAR(3,3) =  STHETR
C
C     WRITE(IFILE4,'(/,A)')' XBAR(i,j)='
C     DO 30 I = 1,3
C       WRITE(IFILE4,'(1P3E12.4)') (XBAR(I,J),J=1,3)
C  30 CONTINUE
C
C     We need one more transformation: from the
C     ustar(shell ref. surf.), v(shell ref. surf.)
C     wstar(shell ref. surf.), beta(meridional rotation)
C     to the nodal degrees of freedom, which are in this
C     analysis:
C
C      {q} = w(i-1), u(i-1), v(i-1), w(i), u(i), v(i), w(i+1)
C
C     That transformation is accomplished via the 4 x 7 matrix,
C     TBAR, defined near the beginning of this subroutine. TBAR
C     is the same as the D matrix used previously in SUBROUTINE
C     STABIL. TBAR is given in Eq.(156) on p.499 of the paper
C     cited above in connection with the 7 x 7 local stiffness
C     matrix, U .
C
C  Next we must obtain the strain energy, given now in the form:
C
C  U = q(transpose) x TBAR(transpose) x EBAR(transpose)
C       x XBAR(transpose) x FKBAR x XBAR x EBAR x TBAR x q
C
C  The next line gets FKX = XBAR(transpose) x FKBAR x XBAR
C
      CALL MATMU2(FKBAR,XBAR,FKX,3,3,0)
C
C     WRITE(IFILE4,'(/,A)')' FKX(i,j)='
C     DO 35 I = 1,3
C       WRITE(IFILE4,'(1P3E12.4)') (FKX(I,J),J=1,3)
C  35 CONTINUE
C
C  The next line gets FKXE = EBAR(transpose) x FKX x EBAR
C
      CALL MATMU2(  FKX,EBAR,FKXE,3,4,0)
C
C     WRITE(IFILE4,'(/,A)')' FKXE(i,j)='
C     DO 37 I = 1,4
C       WRITE(IFILE4,'(1P4E12.4)') (FKXE(I,J),J=1,4)
C  37 CONTINUE
C
C  The next line gets U = TBAR(transpose) x FKXE x TBAR
C
      CALL MATMU4(FKXE,TBAR,U,4,7,1)
C
C23456789012345678901234567890123456789012345678901234567890123456789012
C     WRITE(IFILE4,'(A,I5)')
C    1' In SUBROUTINE SPRING. strain energy computed for spring no.',
C    1  IANGLE
C     WRITE(IFILE4,'(/,A)')' U(i,j)='
C     DO 40 I = 1,7
C       WRITE(IFILE4,'(1P7E10.2)') (U(I,J),J=1,7)
C  40 CONTINUE
C
C   To obtain later the force in the spring, we have
C
C    (force in the spring) = SPRKON(IANGLE,K) * (delta L),
C
C   in which
C
C     (delta L) =    (A*dx + B*dy + C*dz)/L
C
C   and                                                     |w(i-1)|
C             3 x 3          3 x 4             4 x 7        |u(i-1)|
C  |dx|   |          |   |           |   |              |   |v(i-1)|
C  |dy|   |   XBAR   | * |   EBAR    | * |     TBAR     | * | w(i) |
C  |dx|   |          |   |           |   |              |   | u(i) |
C                                        |              |   | v(i) |
C                                                           |w(i+1)|
C   in which the w(i-1) etc. are the shell reference
C   surface nodal degrees of freedom associated with
C   the shell finite element to which the "fake" ring
C   that holds one spring end is attached. The force
C   in each spring is derived later in SUBROUTINES SPOSE
C   and SUPER and is given by:
C
C   F = SPRKON(IANGLE,K) x (delta L)
C
      RETURN
      END
C
C END MAR 2008
----------------------------------------------------------------

The theory outlined above is not quite correct concerning the
transformation,


 and                                                     |w(i-1)|
           3 x 3          3 x 4             4 x 7        |u(i-1)|
|dx|   |          |   |           |   |              |   |v(i-1)|
|dy|   |   XBAR   | * |   EBAR    | * |     TBAR     | * | w(i) |
|dx|   |          |   |           |   |              |   | u(i) |
                                      |              |   | v(i) |
                                                         |w(i+1)|

The actual transformation computations are carried out
in SUBROUTINE RINGF as follows:
-----------------------------------------------------------------------
         UC = ED(1,1)*U + ED(1,2)*V + ED(1,3)*W +ED(1,4)*CHI
         VC = ED(2,1)*U + ED(2,2)*V + ED(2,3)*W +ED(2,4)*CHI
         WC = ED(3,1)*U + ED(3,2)*V + ED(3,3)*W +ED(3,4)*CHI
C
C   in which U, V, W, CHI are the meridional, circumferential,
C   and normal shell reference surface displacement components
C   at the nodal point where the "fake" ring with the springs
C   attached to it is fastened to the shell reference surface.
C   CHI is the meridional rotation of the shell reference
C   surface at the same nodal point. UC, VC, WC are the axial,
C   circumferential, and radial displacement components of the
C   circumferential line in the "fake" ring to which the springs
C   are attached. ED is the matrix which transforms U, V, W, CHI
C   into UC, VC, WC.
C
         ARG = ABS(FN*THETRI)
         SNTHET = DSIN(ARG)
         CNTHET = DCOS(ARG)
C
C   FN is the number of circumferential waves in the deformation
C   pattern and THETRI is the value of the circumferential
C   coordinate of the attachement point of a spring to the "fake"
C   ring.
C
C   DXGLOB, DYGLOB, DZGLOB are the global cartesian coordinate
C   components of the displacement at the ring-end of the
C   spring. FN = number of circ. waves in the current harmonic.
C
         IF (FN.GT.0.0) THEN
            DXGLOB(IGROUN,IANGLE) = DXGLOB(IGROUN,IANGLE)
     1     +XBAR(1,1)*UC*SNTHET +XBAR(1,2)*VC*CNTHET
     1     +XBAR(1,3)*WC*SNTHET
C
            DYGLOB(IGROUN,IANGLE) = DYGLOB(IGROUN,IANGLE)
     1     +XBAR(2,1)*UC*SNTHET +XBAR(2,2)*VC*CNTHET
     1     +XBAR(2,3)*WC*SNTHET
C
            DZGLOB(IGROUN,IANGLE) = DZGLOB(IGROUN,IANGLE)
     1     +XBAR(3,1)*UC*SNTHET +XBAR(3,2)*VC*CNTHET
     1     +XBAR(3,3)*WC*SNTHET
         ENDIF
C
         IF (FN.LT.0.0) THEN
            DXGLOB(IGROUN,IANGLE) = DXGLOB(IGROUN,IANGLE)
     1     +XBAR(1,1)*UC*CNTHET +XBAR(1,2)*VC*SNTHET
     1     +XBAR(1,3)*WC*CNTHET
C
            DYGLOB(IGROUN,IANGLE) = DYGLOB(IGROUN,IANGLE)
     1     +XBAR(2,1)*UC*CNTHET +XBAR(2,2)*VC*SNTHET
     1     +XBAR(2,3)*WC*CNTHET
C
            DZGLOB(IGROUN,IANGLE) = DZGLOB(IGROUN,IANGLE)
     1     +XBAR(3,1)*UC*CNTHET +XBAR(3,2)*VC*SNTHET
     1     +XBAR(3,3)*WC*CNTHET
         ENDIF
C
         IF (FN.EQ.0.0) THEN
            DXGLOB(IGROUN,IANGLE) = DXGLOB(IGROUN,IANGLE)
     1     +XBAR(1,1)*UC +XBAR(1,2)*VC
     1     +XBAR(1,3)*WC
C
            DYGLOB(IGROUN,IANGLE) = DYGLOB(IGROUN,IANGLE)
     1     +XBAR(2,1)*UC +XBAR(2,2)*VC
     1     +XBAR(2,3)*WC
C
            DZGLOB(IGROUN,IANGLE) = DZGLOB(IGROUN,IANGLE)
     1     +XBAR(3,1)*UC +XBAR(3,2)*VC
     1     +XBAR(3,3)*WC
         ENDIF
----------------------------------------------------------------


NEW INPUT DATA IN BIGBOSOR4

The BIGBOSOR4 user supplies input data interactively. These
user-provided data are elicited by means of prompting questions
and "help" paragraphs that are stored in files called
"PROMPT.DAT", "PROMPT2.DAT", and "PROMPT3.DAT" located in the
directory, ...bigbosor4/execute .

The PROMPT2.DAT file was modified to add a section relating to
springs, as follows:

------- NEW SECTION ADDED TO THE  PROMPT2.DAT FILE --------------
800.0
      Input of NTYPER = -1 for ring type means that the ring is
      a "fake" ring, needed as a place to "hang" springs from.
      Let us call the end of the springs attached here "Ends 2"
      and the other ends of the springs "Ends 1". All of the
      springs attached to this ring must have the same spring
      constant and the same eccentricities, e1 and e2. The other
      ends of the springs,"Ends 1", must all be attached to the
      same previous ring or to ground at a global axial coordinate
      that is the same for all the springs at Ends 1 and at a
      radius from the axis of revolution that is the same for all
      the springs at Ends 1. If Ends 1 of the springs are
      connected to ground, then these springs are used to
      simulate elastic, pinned struts upon which the shell of
      revolution is supported. If Ends 1 of the springs are
      connected to a previous NTYPER=-1 type of "fake" ring,
      then these springs are used to represent elastic fasteners
      that join one part of the shell to another part in an
      intermittant manner.

      You will next be asked to provide the following input data
      relating to the attachment of springs to a "fake" ring:
      1. The global axial coordinate of the line of attachment of
         one end of the springs to this ring: SPRAXL
      2. The number of springs attached to this ring: NSPRNG
      3. The circumferential angles in degrees to the attachment
         point of each spring to this ring (use 0 to 360 degrees):
         SPRANG
      4. The spring constant k of each of the springs attached here:
         SPRKON
      5. The radial and axial eccentricities, e1 and e2, of the
         attachment points of spring to this ring measured
         from the line of attachment of the ring to the shell
         reference surface. See Fig. 18 of the paper, "Computerized
         analysis of shells - Governing equations...",p 490,
         Computers & Structures, 1984: e1=SPREC1; e2=SPREC2
      6. Are the other ends (Ends 1) of the springs that are
         attached to this ring (Ends 2) attached to ground?
         If yes, then:
         6a. The global axial coordinate of the attachment of
             Ends 1 of the springs to ground: SPRAXG
         6b. The radius from the shell axis of revolution to the
             circumferential line of attachment of Ends 1 of the
             springs to ground: SPRRAD
         6c. The circumferential angles in degrees of the 
             attachment points of Ends 1 of the springs to ground.
             Use only positive values from 0 to 360 degrees:
             SPRAGG
      7. Are the other ends (Ends 1) of the springs that are
         attached to this ring (Ends 2) attached to a previously
         identified NTYPER = -1 type of "fake" ring? If yes, then:
         7a. The shell segment number to which that previous
             NTYPER = -1 "fake" ring is attached:    ISPRSG
         7b. The ring number in that shell segment:  ISPRRG

815.1 Global axial coordinate of ring ends of springs, SPRAXL
815.2
      All springs attached here must have the same global
      axial coordinate. This global axial coordinate may
      differ from that of the circumferential line of
      attachment of the "fake" ring to the shell wall
      reference surface by an amount equal to the axial
      eccentricity e2. We are concerned here with the
      global axial coordinate of the ends of the springs
      that are attached to the ring.

820.1 Number of springs attached to this "fake" ring, NSPRNG
820.2
      Don't use more that 30 springs.

825.1 Circumfer.angles to spring attach points at ring, SPRANG
825.2
      Provide angles in degrees measured from the origin
      of the circumferential coordinate, theta. Use only
      positive values in the interval from 0 to 360 degrees.
      We are concerned here with the attachment points at
      the ends of the springs attached to the ring.

830.1 Spring constant (e.g. lb/in) of each spring, SPRKON
830.2
      All springs attached here originally probably have the
      same SPRKON. Each spring attached to a given ring MAY have
      a different spring constant, SPRKON(IANGLE,K). Originally
      all the spring constants at a given ring may be the same.
      However, when we take into account the softening effect of
      local shell deformation on the "effective" stiffness of a
      spring, each spring may develop a different "effective"
      spring constant. Usually the following will happen:
      The "effective" stiffnesses of the springs at
      circumferential coordinates 0 and 180 degrees will have
      one "effective" spring constant and those at 90 and 270
      degrees will have a different "effective" spring constant.
      We allow the user to supply a different spring constant
      for each spring attached to this ring because he/she may
      later want to account for the "softening" effect that
      local deformation of the shell at the spring attachment
      point has on the "effective" spring constant.

835.1 Radial eccentricity of spring attachment point, SPREC1
835.2
      SPREC1 is the radial distance measured from the shell
      wall reference surface at the line of attachment of
      the "fake" ring to the shell to the attachment point
      of each spring to the "fake" ring, positive if the spring
      attachment  point lies at a greater radius from the axis
      of revolution than that of the shell wall reference surface
      to which the "fake" ring is attached. See e1 in Fig. 18 in
      the paper, "Computerized analysis of shells - Governing
      equations", p. 490, Computers & Structures, 1984

840.1 Axial eccentricity of spring attachment point, SPREC2
840.2 
      SPREC2 is the axial distance measured from the shell
      wall reference surface at the line of attachment of
      the "fake" ring to the shell to the attachment point
      of each spring to the "fake" ring, positive if the spring
      attachment point lies above the line of attachment of
      the "fake" ring to the shell wall reference surface.
      See e2 in Fig. 18 in the paper, "Computerized analysis
      of shells - Governing equations", p 490,
      Computers & Structures, 1984

845.1 Are the other ends of the springs attached to ground?
845.2
      If the other ends of the springs are connected to ground,
      then these springs are used to simulate elastic, pinned
      struts upon which the shell of revolution is supported
      or otherwise constrained. Note: If you answer yes, all
      the springs attached to this ring must be attached to
      ground at the same global axial coordinate and at the
      same radius from the axis of revolution. This global
      axial coordinate and radius can, of course, differ from
      those of the ring to which the springs are attached.

850.1 Global axial coordinate of attachment to ground, SPRAXG
850.2
      All springs attached at global axial coordinate, SPRAXL,
      must be attached at their other ends at the same
      global axial coordinate, SPRAXG. Of course, SPRAXG can
      be different from SPRAXL and usually is different.

855.1 Radius to the spring attachment point to ground, SPRRAD
855.2 
      This is the radius from the axis of revolution to the
      attachment point of the other ends of the springs to
      ground. All the springs attached to this ring must have
      the same SPRRAD. Of course, SPRRAD can differ from the
      radius of the "fake" ring and usually does differ.

860.1 Circumferential angles to spring attach points, SPRAGG
860.2 
      Provide angles in degrees measured from the origin
      of the circumferential coordinate, theta. These are
      the circumferential angles of the ends of the springs
      that are attached to ground. Use only positive
      values in the interval from 0 to 360 degrees. It is
      emphasized that we are referring to the circumferential
      angle for a line from the AXIS OF REVOLUTION to the
      point at which the ground-ends of the springs are
      attached to ground, NOT the azimuthal angle of the
      spring for a line drawn from its attachment point to
      the ring to its attachment point to ground.

865.1 Are the other ends of the springs at a previous ring?
865.2 
      Asked more clearly, are the other ends of the springs
      attached to a previously identified "fake" ring?
      If the other ends of the springs are connected to a
      previously identified NTYPER=-1 type of "fake" ring,
      then these springs are used to represent elastic fasteners
      that join one part of the shell to another part in an
      intermittant manner. Note: If you answer Y, then all
      the springs at the current ring must be connected to the
      same previous "fake" ring.

870.1 Previous shell segment number, ISPRSG
870.2 
      This is the previous shell segment number to which
      a previously identified "fake" ring is attached, that
      is, where the other ends of the springs are attached.

875.1 Ring number in shell segment ISPRSG, ISPRRG
875.2
      Rings are numbered consecutively from the beginning of
      the shell segment to the end of the shell segment. In
      counting rings, include ALL rings, real and "fake".
      What is wanted here is the previously identified ring
      number to which the other ends of the springs are
      attached.
------------ End of new section of PROMPT2.DAT------------------



The section of PROMPT2.DAT just listed is invoked by means of
a control index, NTYPER (type of ring), as follows:
------------------------------------------------------------------
152.1 NTYPER= type (-1 or 0 or 1 or 2 or 4 or 5) of discrete ring no.
152.2
      -1 means fake ring, needed as a place to "hang" springs from
       0 means fake ring, needed as a place to "hang" a line load
       1 means read in E, A, Iy, Ix, Ixy, E1, E2, GJ, RM (see p.70)
       2 means read in E, A, Is, In, Isn, ZC, SC, GJ, RM (see fig.)
       3 do not use
       4 means read L(1), L(2), L(3),  T(1), T(2), T(3)
                   E, NU, X1P, Y(1), Y(2), Y(3), and RM (see p.72)
       5 means read same quantities, but in the (s,n) rather than
        in the (x,y) axis system (see bottom of p. 70 for the two
        axis systems.)
------------------------------------------------------------------
NOTE: A new option, NTYPER = -1, has been added. In this way, old
      BIGBOSOR4 input files remain valid.



A SIMPLE EXAMPLE

As mentioned previously we determine the effect of springs on the
behavior of a shell structure in two successive BIGBOSOR4 executions:

1. In the first BIGBOSOR4 execution the model includes springs but
no line loads that represent the concentrated reactions of the springs
on the shell. Circumferential wavenumbers used for the linear stress
analysis phase of the computations, that is, NSTART, NFIN, INCR, which
occur near the beginning of the <casename>.ALL file, have values
such as the following:

   0      $ NSTART= starting number of circ. waves (lin. stress analysis)
 -60      $ NFIN  = ending number of circ. waves (linear stress analysis)
  -1      $ INCR  = step in number of circ. waves (linear stress)

NOTE: n = 0 (axisymmetric up-and-down and/or rolling) and n = -1 
(lateral and/or tilting) harmonics MUST be included, since these are
the only two harmonics for which the springs contribute strain energy.

2. In the second BIGBOSOR4 execution the model includes springs WITH 
ZERO SPRING CONSTANTS, SPRKON(IANGLE,K), and line loads that represent
approximately (by Fourier series expansion) the concentrated reactions
from BIGBOSOR4 execution no. 1 of the springs acting on the shell
to which the springs are attached. The proper BIGBOSOR4 input for
these concentrated loads is printed out at the end of the
<casename>.OUT file generated by the first BIGBOSOR4 execution.
Only circumferential wave numbers the absolute values of which
are greater than or equal to 2 are explored in the linear stress
analysis phase of the computations, that is, NSTART, NFIN, INCR, which
occur near the beginning of the <casename>.ALL file, have values
such as the following:

  -2      $ NSTART= starting number of circ. waves (lin. stress analysis)
 -60      $ NFIN  = ending number of circ. waves (linear stress analysis)
  -1      $ INCR  = step in number of circ. waves (linear stress)

Here the two cases are called "cylspr1" and "cylspr2".

In the relatively simple example explored here a monocoque cylindrical
shell is modeled as consisting of two segments: the springs occur at the
bottom of the first segment, and the overall bending load [vertical
force, V, that varies around the circumference as cos(theta)] is
applied at the top of the second segment. We need two segments
because there is a BIGBOSOR4 rule that all rings in a given segment
that have line loads applied to them must have the same circumferential
distribution of line load, that is, the same g(theta). Since the
circumferential distribution, g1(THETA), of the line loads that
represent the reaction of the springs against the shell is different
from the simple cos(theta) distribution of the vertical line load, V,
at the top of the shell, g2(theta), the springs and the overall
applied moment, Vo x cos(theta), must occur in different shell segments.


The BIGBOSOR4 input file for the first of the two runs described above
is as follows:

------------------------ cylspr1.ALL ---------------------------
 cylinder with springs                                                  
         3      $ INDIC = analysis type indicator
         2      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         0      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
         2      $ NSEG  = number of shell segments (less than 195)
         0      $ NSTART= starting number of circ. waves (lin. stress analysis)
        -1      $ NFIN  = ending number of circ. waves (linear stress analysis)
        -1      $ INCR  = step in number of circ. waves (linear stress)
   180.0000     $ THETAM= range of circumferential Fourier expansion & output
      H         $
      H         $ SEGMENT NUMBER    1    1    1    1    1    1    1    1
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        97      $ NMESH = number of node points (5 = min.; 98 = max.)( 1)
         1      $ NTYPEH= control integer (1 or 3) for nodal point spacing
         4      $ NHVALU= number of callouts for nodal point spacing
         1      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 1)
        51      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 2)
        52      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 3)
        96      $ IHVALU(I)= Ith callout for nodal point spacing, IHVALU( 4)
  0.2000000     $ HVALU=meridional arc length between nodal points,HVALU( 1)
  0.2000000     $ HVALU=meridional arc length between nodal points,HVALU( 2)
   1.000000     $ HVALU=meridional arc length between nodal points,HVALU( 3)
   1.000000     $ HVALU=meridional arc length between nodal points,HVALU( 4)
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
       100      $ R1     = radius at beginning of segment (see p. 66)
         0      $ Z1     = global axial coordinate at beginning of segment
       100      $ R2     = radius at end of segment
        50      $ Z2     = global axial coordinate at end of segment
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         1      $ NRINGS= number (max=20) of discrete rings in this segment
         2      $ NTYPE = control for identification of ring location (2=z, 3=r)
         0      $ Z(I)  = axial coordinate of Ith ring, z( 1)
        -1      $ NTYPER= type (-1 or 0 or 1 or 2 or 4 or 5) of discrete ring no.( 1)
         0      $ Global axial coordinate of ring ends of springs, SPRAXL( 1)
         8      $ Number of springs attached to this "fake" ring, NSPRNG( 1)
         0      $ Circumfer.angles to spring attach points at ring, SPRANG( 1)
         0      $ Circumfer.angles to spring attach points at ring, SPRANG( 2)
        90      $ Circumfer.angles to spring attach points at ring, SPRANG( 3)
        90      $ Circumfer.angles to spring attach points at ring, SPRANG( 4)
       180      $ Circumfer.angles to spring attach points at ring, SPRANG( 5)
       180      $ Circumfer.angles to spring attach points at ring, SPRANG( 6)
       270      $ Circumfer.angles to spring attach points at ring, SPRANG( 7)
       270      $ Circumfer.angles to spring attach points at ring, SPRANG( 8)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 1)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 2)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 3)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 4)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 5)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 6)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 7)
   100000.0     $ Spring constant (e.g. lb/in) of each spring, SPRKON( 8)
         0      $ Radial eccentricity of spring attachment point, SPREC1( 1)
         0      $ Axial eccentricity of spring attachment point, SPREC2( 1)
      Y         $ Are the other ends of the springs attached to ground?
        20      $ Global axial coordinate of attachment to ground, SPRAXG( 1)
   150.0000     $ Radius to the spring attachment point to ground, SPRRAD( 1)
        45      $ Circumferential angles to spring attach points, SPRAGG( 1)
       -45      $ Circumferential angles to spring attach points, SPRAGG( 2)
       135      $ Circumferential angles to spring attach points, SPRAGG( 3)
        45      $ Circumferential angles to spring attach points, SPRAGG( 4)
       225      $ Circumferential angles to spring attach points, SPRAGG( 5)
       135      $ Circumferential angles to spring attach points, SPRAGG( 6)
       315      $ Circumferential angles to spring attach points, SPRAGG( 7)
       225      $ Circumferential angles to spring attach points, SPRAGG( 8)
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         0      $ LINAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         0      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
  0.1000000E+08 $ E     = Young's modulus for skin
  0.3000000     $ U     = Poisson's ratio for skin
  0.2500000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
         0      $ NSUR   = control for thickness input (0 or 1 or -1)
      N         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    2    2    2    2    2    2    2    2
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        97      $ NMESH = number of node points (5 = min.; 98 = max.)( 2)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
       100      $ R1     = radius at beginning of segment (see p. 66)
        50      $ Z1     = global axial coordinate at beginning of segment
       100      $ R2     = radius at end of segment
       100      $ Z2     = global axial coordinate at end of segment
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         1      $ NRINGS= number (max=20) of discrete rings in this segment
         2      $ NTYPE = control for identification of ring location (2=z, 3=r)
       100      $ Z(I)  = axial coordinate of Ith ring, z( 1)
         0      $ NTYPER= type (-1 or 0 or 1 or 2 or 4 or 5) of discrete ring no.( 1)
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         1      $ LINAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
         4      $ NTYPEL=index (use 4) for input of nonsymmetric line loads
         1      $ NLOAD(1)=indicator for axial load or disp.(0=none,1=some)
         0      $ NLOAD(2)=indicator for shear load or disp.(0=none,1=some)
         0      $ NLOAD(3)=indicator for radial load or disp.(0 or 1)
         0      $ NLOAD(4)=indicator for line moment or rotation (0 or 1)
  -1000.000     $ V(i)=fixed or initial axial load or displacement, V( 1)
         7      $ NTHETA= number of circumferential callouts for load
         2      $ NOPT  = control for how g(THETA) is to be input (1,2,or 3)
         1      $ NODD  = control integer for oddness, evenness, of g(THETA)
         0      $ THETA = circumferential coordinate, in degrees, THETA( 1)
        30      $ THETA = circumferential coordinate, in degrees, THETA( 2)
        60      $ THETA = circumferential coordinate, in degrees, THETA( 3)
        90      $ THETA = circumferential coordinate, in degrees, THETA( 4)
       120      $ THETA = circumferential coordinate, in degrees, THETA( 5)
       150      $ THETA = circumferential coordinate, in degrees, THETA( 6)
       180      $ THETA = circumferential coordinate, in degrees, THETA( 7)
   1.000000     $ YPLUS = value of g(THETA) at THETA( 1)
  0.8660000     $ YPLUS = value of g(THETA) at THETA( 2)
  0.5000000     $ YPLUS = value of g(THETA) at THETA( 3)
         0      $ YPLUS = value of g(THETA) at THETA( 4)
 -0.5000000     $ YPLUS = value of g(THETA) at THETA( 5)
 -0.8660000     $ YPLUS = value of g(THETA) at THETA( 6)
  -1.000000     $ YPLUS = value of g(THETA) at THETA( 7)
      Y         $ Do you want to print out output Fourier expansion of load?
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         0      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
  0.1000000E+08 $ E     = Young's modulus for skin
  0.3000000     $ U     = Poisson's ratio for skin
  0.2500000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
         0      $ NSUR   = control for thickness input (0 or 1 or -1)
      N         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ GLOBAL DATA BEGINS...
         1      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
         2      $ NDIST = number of circ. stations for meridional output
   0.000000     $ THETA = circ. stations (in deg.) for meridional output.( 1)
   90.00000     $ THETA = circ. stations (in deg.) for meridional output.( 2)
         2      $ NCIRC = number of meridional stations for circ. distibutions
      1001      $ ITHETA= meridional location for circumferential output( 1)
      2097      $ ITHETA= meridional location for circumferential output( 2)
        61      $ NTHETA= number of output points along circ. from 0 to THETAM.
         0      $ THETAS= Nx & Ny along this meridian used in buckling analysis.
         0      $ OMEGA  = angular vel. about axis of revolution (rad/sec)
         1      $ IOMGAB = control for OMEGA as "A" or "B" load (1 or 2)
      N         $ Do you want response to harmonic forcing (INDIC = 3 or 4)?
      H         $ CONSTRAINT CONDITIONS FOLLOW....
         2      $ How many segments in the structure?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    1    1    1    1
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 1)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      N         $ Is this segment joined to any lower-numbered segments?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    2    2    2    2
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT( 2)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE( 1)
         1      $ JSEG  = segment no. of lowest segment involved in junction
        97      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
         0      $ D1    = radial component of juncture gap
         0      $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $ RIGID BODY CONSTRAINT INPUT FOLLOWS...
      N         $ Given existing constraints, are rigid body modes possible?
      H         $ "GLOBAL3" QUESTIONS (AT END OF CASE)...
      Y         $ Do you want to list output for segment( 1)
      Y         $ Do you want to list output for segment( 2)
      Y         $ Do you want to list forces in the discrete rings, if any?
------------------------------------------------------------------------


The new output from BIGBOSOR4, contained in the cylspr1.OUT file, follows:

----------------------- cylspr1.OUT file (abridged) --------------------------
 ***************** OUTPUT RELATING TO SPRINGS ****************
 The following output is for springs attached to ring no.  1
 *************************************************************
 The following are input quantities relating
 to all the springs attached to this ring:
 NTYPAL =          -1 =index for type of ring (NTYPAL = -1
           means a ring with springs attached to it.)
 NGROUN =           1 = 1 if springs are attached to ground,
           = 0 if springs are attached to a previous
           ring. (NOTE: The coding has not been
           written for the NGROUN = 0 option.)
 NSPRNG =           8 = number of springs attached to this
                         ring.
 SPRAXL =  0.0000E+00 = global axial coordinate of this
                         ring.
 SPRANG = 8 circumferential angles of spring attachment points on this ring:
  0.0000E+00  0.0000E+00  9.0000E+01  9.0000E+01  1.8000E+02
  1.8000E+02  2.7000E+02  2.7000E+02
 SPRKON = 8 spring constants for the 8 springs attached to this ring:
  1.0000E+05  1.0000E+05  1.0000E+05  1.0000E+05  1.0000E+05
  1.0000E+05  1.0000E+05  1.0000E+05
 SPREC1 =  0.0000E+00 = radial eccentricity e1 of the
           attachment points of all the springs to this ring.
 SPREC2 =  0.0000E+00 = axial  eccentricity e2 of the
           attachment points of all the springs to this ring.
 SPRAXG =  2.0000E+01 = global axial coordinate of the
           attachment of all the springs associated with this
           ring to ground.
 SPRRAD =  1.5000E+02 = radius of spring ground attachment
                         points
 SPRAGG = 8 circumferential angles of spring attachment points to ground:
  4.5000E+01 -4.5000E+01  1.3500E+02  4.5000E+01  2.2500E+02
  1.3500E+02  3.1500E+02  2.2500E+02

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

           SPRANG(i)                           SPRKON(i)   SPRFCE(i)
 SPRING   CIRC. ANGLE   SPRING    CHANGE IN      SPRING     SPRING
  NO.    OF ATTACHMENT LENGTH, L  LENGTH, dL    CONSTANT     FORCE
         POINT ON RING
   1      0.0000E+00  1.0811E+02 -4.1491E+00  1.0000E+05 -4.1491E+05
   2      0.0000E+00  1.0811E+02 -4.1491E+00  1.0000E+05 -4.1491E+05
   3      9.0000E+01  1.0811E+02 -2.3729E-01  1.0000E+05 -2.3729E+04
   4      9.0000E+01  1.0811E+02  2.3729E-01  1.0000E+05  2.3729E+04
   5      1.8000E+02  1.0811E+02  4.1491E+00  1.0000E+05  4.1491E+05
   6      1.8000E+02  1.0811E+02  4.1491E+00  1.0000E+05  4.1491E+05
   7      2.7000E+02  1.0811E+02  2.3729E-01  1.0000E+05  2.3729E+04
   8      2.7000E+02  1.0811E+02 -2.3729E-01  1.0000E+05 -2.3729E+04

 IN THE FOLLOWING LIST THE CONCENTRATED SPRING LOADS AT RING  1
 ARE RESOLVED IN THE SHELL COORDINATE DIRECTIONS: RADIAL,
 CIRCUMFERENTIAL, AND AXIAL. CONCENTRATED LOADS IN THESE
 SHELL COORDINATE DIRECTIONS MAY BE CALLED FOR AS PART OF THE
 INPUT DATA IN A SUBSEQUENT BIGBOSOR4 MODEL CONSTRUCTED BY
 YOU IN ORDER TO DETERMINE THE CONTRIBUTION OF HIGH-CIRCUMFER-
 ENTIAL-WAVENUMBER HARMONICS TO STRESS AND BUCKLING BEHAVIOR.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 SPRING    AZIMUTHAL  INCLINATION   RADIAL      CIRCUMF.    VERTICAL
  NO.       ANGLE        ANGLE      FORCE        FORCE       FORCE
           RELATIVE     RELATIVE   ON RING      ON RING     ON RING
           TO RING      TO RING
   1      8.6727E+01  1.0661E+01 -2.3282E+04 -4.0708E+05  7.6761E+04
   2     -8.6727E+01  1.0661E+01 -2.3282E+04  4.0708E+05  7.6761E+04
   3      8.6727E+01  1.0661E+01 -1.3315E+03 -2.3282E+04  4.3900E+03
   4     -8.6727E+01  1.0661E+01  1.3315E+03 -2.3282E+04 -4.3900E+03
   5      8.6727E+01  1.0661E+01  2.3282E+04  4.0709E+05 -7.6761E+04
   6     -8.6727E+01  1.0661E+01  2.3282E+04 -4.0708E+05 -7.6761E+04
   7      8.6727E+01  1.0661E+01  1.3315E+03  2.3282E+04 -4.3900E+03
   8     -8.6727E+01  1.0661E+01 -1.3315E+03  2.3282E+04  4.3900E+03

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 SPRING    AZIMUTHAL  INCLINATION   FORCES       SPRING 
  NO.       ANGLE       ANGLE     ON SPRING     CONSTANT
           RELATIVE    RELATIVE  DERIVED FROM DERIVED FROM
           TO RING     TO RING   SHELL LOADS  SHELL LOADS
   1       8.6727E+01  1.0661E+01  4.1491E+05  1.0000E+05
   2      -8.6727E+01  1.0661E+01  4.1491E+05  1.0000E+05
   3       8.6727E+01  1.0661E+01  2.3729E+04  1.0000E+05
   4      -8.6727E+01  1.0661E+01 -2.3729E+04  1.0000E+05
   5       8.6727E+01  1.0661E+01 -4.1491E+05  1.0000E+05
   6      -8.6727E+01  1.0661E+01 -4.1491E+05  1.0000E+05
   7       8.6727E+01  1.0661E+01 -2.3729E+04  1.0000E+05
   8      -8.6727E+01  1.0661E+01  2.3729E+04  1.0000E+05

 THE SPRINGS MAY BE ARRANGED IN PAIRS THAT MEET AT THE "FAKE"
 RING. THEREFORE, SOME OF THE SPRING FORCES FROM INDIVIDUAL
 SPRINGS MAY COMBINE TO CANCEL EACHOTHER OR TO DOUBLE THE
 LOAD "SEEN" AT A PARTICULAR CIRCUMFERENTIAL LOCATION ON THE
 "FAKE" RING. THIS COMBINING HAS BEEN ACCOUNTED FOR IN THE
 FOLLOWING LIST OF CONCENTRATED LOADS RESOLVED IN THE SHELL
 COORDINATE DIRECTIONS: RADIAL, CIRCUMFERENTIAL, AND AXIAL.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 CIRCUMFERENTIAL  NET RADIAL    NET CIRCUMFER. NET VERTICAL   NET MERIDIONAL
   COORDINATE    FORCE ON RING  FORCE ON RING FORCE ON RING   MOMENT ON RING
   0.0000E+00    -4.6563E+04     0.0000E+00     1.5352E+05     0.0000E+00
   9.0000E+01     2.1973E-03    -4.6563E+04    -1.6602E-02     0.0000E+00
   1.8000E+02     4.6563E+04     6.2500E-02    -1.5352E+05     0.0000E+00
   2.7000E+02     1.2207E-04     4.6563E+04     8.7891E-03     0.0000E+00

 ******************* IMPORTANT NOTE **************************
 This model essentially smears out the springs. Only the n = 0
 (axisymmetric up-and-down displacement and/or uniform rolling
 about the axis of revolution) and n = 1 (uniform lateral
 displacement and/or pitching displacement) are predicted
 accurately. In order to obtain the static response for higher
 circumferential wavenumbers, n, than n = 0 and/or n = 1, you
 must include as BIGBOSOR4 input in another run the
 concentrated forces that the springs apply to the "fake" ring
 and therefore to the shell where they are attached.
 ***************************************************************

 THE FOLLOWING CAN BE USED AS A GUIDE FOR BIGBOSOR4 INPUT FOR
 LINEAR NON-AXISYMMETRIC STATIC RESPONSE INCLUDING
 CONCENTRATED LOADS APPLIED BY THE SPRINGS TO THE SHELL. IN
 THE FOLLOWING OUTPUT THE CONCENTRATED SPRING LOADS ARE
 MODELED AS LINE LOADS WITH TRIANGULAR-SHAPED "PULSES". THE
 AREA UNDERNEATH EACH "PULSE" IS EQUAL TO THE CONCENTRATED
 SPRING LOAD AS RESOLVED IN THE RADIAL, CIRCUMFERENTIAL, AND
 AXIAL SHELL COORDINATE DIRECTIONS. THESE LINE LOADS ARE THE
 "H", "S", "V", AND "M" LINE LOADS, INPUT FOR WHICH IS CALLED
 FOR BY BIGBOSOR4.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 CIRCUMFERENTIAL  RADIAL LINE   CIRCUMFER.LINE VERTICAL LINE  MERIDIONAL LINE
   COORDINATE     LOAD ON RING   LOAD ON RING  LOAD ON RING   MOMENT ON RING
   0.0000E+00    -5.3357E+03     0.0000E+00     1.7592E+04     0.0000E+00
   5.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   8.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.0000E+01     2.5179E-04    -5.3357E+03    -1.9024E-03     0.0000E+00
   9.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.7500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.8000E+02     5.3357E+03     7.1620E-03    -1.7592E+04     0.0000E+00
   1.8500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   2.6500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   2.7000E+02     1.3988E-05     5.3357E+03     1.0072E-03     0.0000E+00
   2.7500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00

 FOR EVEN AND ODD DISTRIBUTIONS OF LINE LOAD ABOUT THE ORIGIN
 OF THE CIRCUMFERENTIAL COORDINATE, theta, BIGBOSOR4 REQUIRES
 INPUT DATA ONLY IN THE RANGE: 0.0.LE.theta.LE.180. DEGREES.
 ALSO, IT IS BEST TO SUPPLY THE CIRCUMFERENTIAL DISTRIBUTION
 OF LINE LOAD AS NORMALIZED, THAT IS, WITH THE PEAK LINE LOAD
 EQUAL TO UNITY AND THE ENTIRE DISTRIBUTION MULTIPLIED BY THE
 ACTUAL VALUE OF THE PEAK LINE LOAD. THE FOLLOWING LIST
 PRESENTS THE CIRCUMFERENTIAL DISTRIBUTION OF SPRING LOADS AT
 THIS "FAKE" RING IN THIS MANNER.

 IN BIGBOSOR4 THERE IS A RULE THAT THE CIRCUMFERENTIAL
 DISTRIBUTIONS OF RADIAL LINE LOAD, H, AXIAL LINE LOAD, V, AND
 MERIDIONAL LINE MOMENT, M, MUST BE THE SAME. THEREFORE, WE
 TRY TO ARRANGE THE SIGNS OF THE LINE LOAD FACTORS SO THAT
 THIS IS TRUE FOR THIS CASE. IF ANY CIRCUMFERENTIAL DISTRIBU-
 TION CONSISTS ENTIRELY OF ZEROES, THAT DOES N0T COUNT.
 IN THE BIGBOSOR4 INPUT YOU SIMPLY INDICATE THAT THERE IS NO
 LINE LOAD OF THAT PARTICULAR TYPE. THE CIRCUMFERENTIAL
 DISTRIBUTION OF THE CIRCUMFERENTIALLY ORIENTED LINE LOAD, S,
 CAN BE DIFFERENT FROM THAT FOR H, V, AND M. NOTE: IF YOU HAVE
 MORE THAN ONE RING WITH SPRINGS ATTACHED, MAKE SURE THAT IF
 THE SPRINGS ARE ARRANGED DIFFERENTLY ON THE TWO RINGS THAT
 EACH OF THE RINGS IS LOCATED IN A DIFFERENT SHELL SEGMENT.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

                  RADIAL LOAD     CIRC.LOAD     VERT.LOAD     MOMENT LOAD
                    FACTOR         FACTOR        FACTOR         FACTOR
                 -5.3357E+03     5.3357E+03     1.7592E+04     1.0000E-07

 CIRCUMFERENTIAL  RADIAL LINE   CIRCUMFER.LINE VERTICAL LINE  MERIDIONAL LINE
   COORDINATE     LOAD ON RING   LOAD ON RING  LOAD ON RING   MOMENT ON RING
   0.0000E+00     1.0000E+00     0.0000E+00     1.0000E+00     0.0000E+00
   5.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   8.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.0000E+01     0.0000E+00    -1.0000E+00     0.0000E+00     0.0000E+00
   9.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.7500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.8000E+02    -1.0000E+00     0.0000E+00    -1.0000E+00     0.0000E+00

 ******** NOTE ************* NOTE ************ NOTE *********
 THE FOLLOWING SAMPLE BOSOR4 INPUT IS VALID ONLY IF:
 1. ONLY LOAD SET A EXISTS. THERE IS NO LOAD SET B.
 2. THE LINE LOADS, V, H, AND M, ARE EVEN FUNCTIONS OF THETA.
 3. THE LINE LOAD, S, IS AN ODD FUNCTION OF THETA.
 4. THERE IS ONLY ONE RING IN THIS SHELL SEGMENT WITH ATTACHED SPRINGS.
 ************************************************************

 BOSOR4 INPUT FOR LINE LOADS CORRESPONDING TO THE OUTPUT JUST LISTED
 H    $ LINE LOAD INPUT FOLLOWS...
 1    $ LINAB=indicator (0, 1, 2 or 3) for load set A and B
 H    $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS
 1    $ LINTYP=indicator (0,1,2 or 3) for type of line loads
 4    $ NTYPEL=index (use 4) for input of nonsymmetric loads
 1    $ NLOAD(1)=indicator for axial load or disp. (1 = some)
 1    $ NLOAD(2)=indicator for shear load or disp. (1 = some)
 1    $ NLOAD(3)=indicator for radial load or disp.(1 = some)
 1    $ NLOAD(4)=indicator for line moment or rot. (1 = some)
  1.7592E+04 $ V(i)=fixed or initial axial load or disp.  V(1)
  5.3357E+03 $ S(i)=fixed or initial shear load or disp.  S(1)
 -5.3357E+03 $ H(i)=fixed or initial radial load or disp. H(1)
  1.0000E-07 $ M(i)=fixed or initial moment or rotation.  M(1)
    7 $ NTHETA=number of circumferential callouts for load
 2    $ NOPT=control for how g(THETA) is to be input
 1    $ NODD=control for the oddness or evenness of g(THETA)
  0.0000E+00 $ circumferential coordinate, THETA( 1)
  5.0000E+00 $ circumferential coordinate, THETA( 2)
  8.5000E+01 $ circumferential coordinate, THETA( 3)
  9.0000E+01 $ circumferential coordinate, THETA( 4)
  9.5000E+01 $ circumferential coordinate, THETA( 5)
  1.7500E+02 $ circumferential coordinate, THETA( 6)
  1.8000E+02 $ circumferential coordinate, THETA( 7)
  1.0000E+00 $ YPLUS=value of g(THETA) at THETA( 1)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 2)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 3)
 -1.0814E-07 $ YPLUS=value of g(THETA) at THETA( 4)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 5)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 6)
 -1.0000E+00 $ YPLUS=value of g(THETA) at THETA( 7)
 Y    $ Do you want to print out output Fourier expansion?
    7 $ NTHETA=number of circumferential callouts for load
 2    $ NOPT=control for how g(THETA) is to be input
 2    $ NODD=control for the oddness or evenness of g(THETA)
  0.0000E+00 $ circumferential coordinate, THETA( 1)
  5.0000E+00 $ circumferential coordinate, THETA( 2)
  8.5000E+01 $ circumferential coordinate, THETA( 3)
  9.0000E+01 $ circumferential coordinate, THETA( 4)
  9.5000E+01 $ circumferential coordinate, THETA( 5)
  1.7500E+02 $ circumferential coordinate, THETA( 6)
  1.8000E+02 $ circumferential coordinate, THETA( 7)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 1)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 2)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 3)
 -1.0000E+00 $ YPLUS=value of g(THETA) at THETA( 4)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 5)
  0.0000E+00 $ YPLUS=value of g(THETA) at THETA( 6)
  1.3423E-06 $ YPLUS=value of g(THETA) at THETA( 7)
 Y    $ Do you want to print out output Fourier expansion?

 JUST LEFT SUBROUTINE OUT2
--------------- end of abridged cylspr1.OUT file ------------

Note that the end of the cylspr1.OUT file just listed contains
valid input data for BIGBOSOR4 for the second run in the
sequence of two runs, that is, for the BIGBOSOR4 run in
which the springs are replaced by the line loads that are
approximate representations of the concentrated reaction
forces of the springs acting at the bottom of the cylindrical
shell. This second case is called "cylspr2".



The following file repesents input for the second of the
two BIGBOSOR4 runs:
--------------------- cylspr2.ALL ----------------------------
cylinder with weak springs, with concentrated loads                         
         3      $ INDIC = analysis type indicator
         1      $ NPRT = output options (1=minimum, 2=medium, 3=maximum)
         0      $ ISTRES= output control (0=resultants, 1=sigma, 2=epsilon)
         2      $ NSEG  = number of shell segments (less than 295)
         0      $ NSTART= starting number of circ. waves (lin. stress analysis)
       -60      $ NFIN  = ending number of circ. waves (linear stress analysis)
        -1      $ INCR  = step in number of circ. waves (linear stress)
   180.0000     $ THETAM= range of circumferential Fourier expansion & output
      H         $
      H         $ SEGMENT NUMBER    1    1    1    1    1    1    1    1
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        97      $ NMESH = number of node points (5 = min.; 98 = max.)(  1)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
       100      $ R1     = radius at beginning of segment (see p. 66)
         0      $ Z1     = global axial coordinate at beginning of segment
       100      $ R2     = radius at end of segment
        50      $ Z2     = global axial coordinate at end of segment
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         1      $ NRINGS= number (max=20) of discrete rings in this segment
         2      $ NTYPE = control for identification of ring location (2=z, 3=r)
         0      $ Z(I)  = axial coordinate of Ith ring, z(  1)
        -1      $ NTYPER= type (-1 or 0 or 1 or 2 or 4 or 5) of discrete ring no.(  1)
         0      $ Global axial coordinate of ring ends of springs, SPRAXL(  1)
         8      $ Number of springs attached to this "fake" ring, NSPRNG(  1)
         0      $ Circumfer.angles to spring attach points at ring, SPRANG(  1)
         0      $ Circumfer.angles to spring attach points at ring, SPRANG(  2)
        90      $ Circumfer.angles to spring attach points at ring, SPRANG(  3)
        90      $ Circumfer.angles to spring attach points at ring, SPRANG(  4)
       180      $ Circumfer.angles to spring attach points at ring, SPRANG(  5)
       180      $ Circumfer.angles to spring attach points at ring, SPRANG(  6)
       270      $ Circumfer.angles to spring attach points at ring, SPRANG(  7)
       270      $ Circumfer.angles to spring attach points at ring, SPRANG(  8)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  1)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  2)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  3)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  4)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  5)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  6)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  7)
   0.000000     $ Spring constant (e.g. lb/in) of each spring, SPRKON(  8)
         0      $ Radial eccentricity of spring attachment point, SPREC1(  1)
         0      $ Axial eccentricity of spring attachment point, SPREC2(  1)
      Y         $ Are the other ends of the springs attached to ground?
        20      $ Global axial coordinate of attachment to ground, SPRAXG(  1)
   150.0000     $ Radius to the spring attachment point to ground, SPRRAD(  1)
        45      $ Circumferential angles to spring attach points, SPRAGG(  1)
       -45      $ Circumferential angles to spring attach points, SPRAGG(  2)
       135      $ Circumferential angles to spring attach points, SPRAGG(  3)
        45      $ Circumferential angles to spring attach points, SPRAGG(  4)
       225      $ Circumferential angles to spring attach points, SPRAGG(  5)
       135      $ Circumferential angles to spring attach points, SPRAGG(  6)
       315      $ Circumferential angles to spring attach points, SPRAGG(  7)
       225      $ Circumferential angles to spring attach points, SPRAGG(  8)
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         1      $ LINAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
         4      $ NTYPEL=index (use 4) for input of nonsymmetric line loads
         1      $ NLOAD(1)=indicator for axial load or disp.(0=none,1=some)
         1      $ NLOAD(2)=indicator for shear load or disp.(0=none,1=some)
         1      $ NLOAD(3)=indicator for radial load or disp.(0 or 1)
         1      $ NLOAD(4)=indicator for line moment or rotation (0 or 1)
   17592.00     $ V(i)=fixed or initial axial load or displacement, V(  1)
   5335.700     $ S(i)=fixed or initial shear load or displacement, S(  1)
  -5335.700     $ H(i)=fixed or initial radial load or displacement, H(  1)
  0.1000000E-06 $ M(i)=fixed or initial meridional moment or rot., M(  1)
         7      $ NTHETA= number of circumferential callouts for load
         2      $ NOPT  = control for how g(THETA) is to be input (1,2,or 3)
         1      $ NODD  = control integer for oddness, evenness, of g(THETA)
   0.000000     $ THETA = circumferential coordinate, in degrees, THETA(  1)
   5.000000     $ THETA = circumferential coordinate, in degrees, THETA(  2)
   85.00000     $ THETA = circumferential coordinate, in degrees, THETA(  3)
   90.00000     $ THETA = circumferential coordinate, in degrees, THETA(  4)
   95.00000     $ THETA = circumferential coordinate, in degrees, THETA(  5)
   175.0000     $ THETA = circumferential coordinate, in degrees, THETA(  6)
   180.0000     $ THETA = circumferential coordinate, in degrees, THETA(  7)
   1.000000     $ YPLUS = value of g(THETA) at THETA(  1)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  2)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  3)
 -0.1081400E-06 $ YPLUS = value of g(THETA) at THETA(  4)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  5)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  6)
  -1.000000     $ YPLUS = value of g(THETA) at THETA(  7)
      Y         $ Do you want to print out output Fourier expansion of load?
         7      $ NTHETA= number of circumferential callouts for load
         2      $ NOPT  = control for how g(THETA) is to be input (1,2,or 3)
         2      $ NODD  = control integer for oddness, evenness, of g(THETA)
   0.000000     $ THETA = circumferential coordinate, in degrees, THETA(  1)
   5.000000     $ THETA = circumferential coordinate, in degrees, THETA(  2)
   85.00000     $ THETA = circumferential coordinate, in degrees, THETA(  3)
   90.00000     $ THETA = circumferential coordinate, in degrees, THETA(  4)
   95.00000     $ THETA = circumferential coordinate, in degrees, THETA(  5)
   175.0000     $ THETA = circumferential coordinate, in degrees, THETA(  6)
   180.0000     $ THETA = circumferential coordinate, in degrees, THETA(  7)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  1)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  2)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  3)
  -1.000000     $ YPLUS = value of g(THETA) at THETA(  4)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  5)
   0.000000     $ YPLUS = value of g(THETA) at THETA(  6)
  0.1342300E-05 $ YPLUS = value of g(THETA) at THETA(  7)
      Y         $ Do you want to print out output Fourier expansion of load?
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         0      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
  0.1000000E+08 $ E     = Young's modulus for skin
  0.3000000     $ U     = Poisson's ratio for skin
  0.2500000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
         0      $ NSUR   = control for thickness input (0 or 1 or -1)
      N         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ SEGMENT NUMBER    2    2    2    2    2    2    2    2
      H         $ NODAL POINT DISTRIBUTION FOLLOWS...
        97      $ NMESH = number of node points (5 = min.; 98 = max.)(  2)
         3      $ NTYPEH= control integer (1 or 3) for nodal point spacing
      H         $ REFERENCE SURFACE GEOMETRY FOLLOWS...
         1      $ NSHAPE= indicator (1,2 or 4) for geometry of meridian
       100      $ R1     = radius at beginning of segment (see p. 66)
        50      $ Z1     = global axial coordinate at beginning of segment
       100      $ R2     = radius at end of segment
       100      $ Z2     = global axial coordinate at end of segment
      H         $ IMPERFECTION SHAPE FOLLOWS...
         0      $ IMP   = indicator for imperfection (0=none, 1=some)
      H         $ REFERENCE SURFACE LOCATION RELATIVE TO WALL
         3      $ NTYPEZ= control (1 or 3) for reference surface location
  0.5000000     $ ZVAL  = distance from leftmost surf. to reference surf.
      N         $ Do you want to print out r(s), r'(s), etc. for this segment?
      H         $ DISCRETE RING INPUT FOLLOWS...
         1      $ NRINGS= number (max=20) of discrete rings in this segment
         2      $ NTYPE = control for identification of ring location (2=z, 3=r)
       100      $ Z(I)  = axial coordinate of Ith ring, z(  1)
         0      $ NTYPER= type (-1 or 0 or 1 or 2 or 4 or 5) of discrete ring no.(  1)
         0      $ K=elastic foundation modulus (e.g. lb/in**3)in this seg.
      H         $ LINE LOAD INPUT FOLLOWS...
         1      $ LINAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS
         1      $ LINTYP= indicator (0, 1, 2 or 3) for type of line loads
         4      $ NTYPEL=index (use 4) for input of nonsymmetric line loads
         1      $ NLOAD(1)=indicator for axial load or disp.(0=none,1=some)
         0      $ NLOAD(2)=indicator for shear load or disp.(0=none,1=some)
         0      $ NLOAD(3)=indicator for radial load or disp.(0 or 1)
         0      $ NLOAD(4)=indicator for line moment or rotation (0 or 1)
  -1000.000     $ V(i)=fixed or initial axial load or displacement, V(  1)
         7      $ NTHETA= number of circumferential callouts for load
         2      $ NOPT  = control for how g(THETA) is to be input (1,2,or 3)
         1      $ NODD  = control integer for oddness, evenness, of g(THETA)
         0      $ THETA = circumferential coordinate, in degrees, THETA(  1)
        30      $ THETA = circumferential coordinate, in degrees, THETA(  2)
        60      $ THETA = circumferential coordinate, in degrees, THETA(  3)
        90      $ THETA = circumferential coordinate, in degrees, THETA(  4)
       120      $ THETA = circumferential coordinate, in degrees, THETA(  5)
       150      $ THETA = circumferential coordinate, in degrees, THETA(  6)
       180      $ THETA = circumferential coordinate, in degrees, THETA(  7)
   1.000000     $ YPLUS = value of g(THETA) at THETA(  1)
  0.8660000     $ YPLUS = value of g(THETA) at THETA(  2)
  0.5000000     $ YPLUS = value of g(THETA) at THETA(  3)
         0      $ YPLUS = value of g(THETA) at THETA(  4)
 -0.5000000     $ YPLUS = value of g(THETA) at THETA(  5)
 -0.8660000     $ YPLUS = value of g(THETA) at THETA(  6)
  -1.000000     $ YPLUS = value of g(THETA) at THETA(  7)
      Y         $ Do you want to print out output Fourier expansion of load?
      H         $ DISTRIBUTED LOAD INPUT FOLLOWS...
         0      $ IDISAB= indicator (0, 1, 2 or 3) for load set A and B
      H         $ SHELL WALL CONSTRUCTION FOLLOWS...
         2      $ NWALL=index (1, 2, 4, 5, 6, 7, 8, 9, 10) for wall construction
  0.1000000E+08 $ E     = Young's modulus for skin
  0.3000000     $ U     = Poisson's ratio for skin
  0.2500000E-03 $ SM =mass density of skin (e.g. alum.=.00025 lb-sec**2/in**4)
         0      $ ALPHA = coefficient of thermal expansion
         0      $ NRS  = control (0 or 1) for addition of smeared stiffeners
         0      $ NSUR   = control for thickness input (0 or 1 or -1)
      N         $ Do you want to print out ref. surf. location and thickness?
      N         $ Do you want to print out the C(i,j) at meridional stations?
      N         $ Do you want to print out distributed loads along meridian?
      H         $
      H         $ GLOBAL DATA BEGINS...
         1      $ NLAST = plot options  (-1=none, 0=geometry, 1=u,v,w)
      N         $ Are there any regions for which you want expanded plots?
         2      $ NDIST = number of circ. stations for meridional output
   0.000000     $ THETA = circ. stations (in deg.) for meridional output.(  1)
   90.00000     $ THETA = circ. stations (in deg.) for meridional output.(  2)
         2      $ NCIRC = number of meridional stations for circ. distibutions
      1001      $ ITHETA= meridional location for circumferential output(  1)
      2097      $ ITHETA= meridional location for circumferential output(  2)
        61      $ NTHETA= number of output points along circ. from 0 to THETAM.
         0      $ THETAS= Nx & Ny along this meridian used in buckling analysis.
         0      $ OMEGA  = angular vel. about axis of revolution (rad/sec)
         1      $ IOMGAB = control for OMEGA as "A" or "B" load (1 or 2)
      N         $ Do you want response to harmonic forcing (INDIC = 3 or 4)?
      H         $ CONSTRAINT CONDITIONS FOLLOW....
         2      $ How many segments in the structure?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    1    1    1    1
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT(  1)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         1      $ At how many stations is this segment constrained to ground?
         1      $ INODE = nodal point number of constraint to ground, INODE(  1)
         0      $ IUSTAR=axial displacement constraint (0 or 1 or 2)
         0      $ IVSTAR=circumferential displacement(0=free,1=0,2=imposed)
         0      $ IWSTAR=radial displacement(0=free,1=constrained,2=imposed)
         0      $ ICHI=meridional rotation (0=free,1=constrained,2=imposed)
   0.000000     $ D1    = radial component of offset of ground support
   0.000000     $ D2    = axial component of offset of ground support
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      N         $ Is this segment joined to any lower-numbered segments?
      H         $
      H         $ CONSTRAINT CONDITIONS FOR SEGMENT NO.    2    2    2    2
      H         $ POLES INPUT FOLLOWS...
         0      $ Number of poles (places where r=0) in SEGMENT(  2)
      H         $ INPUT FOR CONSTRAINTS TO GROUND FOLLOWS...
         0      $ At how many stations is this segment constrained to ground?
      H         $ JUNCTION CONDITION INPUT FOLLOWS...
      Y         $ Is this segment joined to any lower-numbered segments?
         1      $ At how may stations is this segment joined to previous segs.?
         1      $ INODE = node in current segment (ISEG) of junction, INODE(  1)
         1      $ JSEG  = segment no. of lowest segment involved in junction
        97      $ JNODE = node in lowest segmnt (JSEG) of junction
         1      $ IUSTAR= axial displacement (0=not slaved, 1=slaved)
         1      $ IVSTAR= circumferential displacement (0=not slaved, 1=slaved)
         1      $ IWSTAR= radial displacement (0=not slaved, 1=slaved)
         1      $ ICHI  = meridional rotation (0=not slaved, 1=slaved)
         0      $ D1    = radial component of juncture gap
         0      $ D2    = axial component of juncture gap
      Y         $ Is this constraint the same for both prebuckling and buckling?
      H         $ RIGID BODY CONSTRAINT INPUT FOLLOWS...
      Y         $ Given existing constraints, are rigid body modes possible?
      Y         $ Do you wish to prevent rigid body motion?
         1      $ ISEG  = segment no. at which to prevent rigid body motion
         1      $ INODE = node no. at which to prevent rigid body motion
         1      $ IUSTAR= axial n=0 rigid body constraint (0=none, 1=some)
         1      $ IVSTAR= circ. n=0 rigid body constraint (usually equals 1)
         0      $ IWSTAR= radial n=0 rigid body constraint (usually equals 0)
         0      $ ICHI  = meridional rot. rigid body constraint
         1      $ IUSTAR= axial n=1 rigid body constraint (usually equals 1)
         1      $ IVSTAR= circ. n=1 rigid body constraint (usually equals 1)
         0      $ IWSTAR= radial n=1 rigid body constraint (usually equals 0)
         0      $ ICHI  = meridional rot. rigid body constraint
      N         $ Do you want inertial reactions to Load Set A?
      N         $ Do you want inertial reactions to Load Set B?
      H         $ "GLOBAL3" QUESTIONS (AT END OF CASE)...
      Y         $ Do you want to list output for segment(  1)
      Y         $ Do you want to list output for segment(  2)
      Y         $ Do you want to list forces in the discrete rings, if any?
-------------------------------------------------------------------------

NOTE: You can see where the end of the file, cylspr1.OUT, which contains
the valid line load input for BIGBOSOR4, has been copied into the proper
location with the input data for shell segment no. 1.



Abridged output from the case cylspr2.ALL, called cylspr2.OUT, follows:
------------------------ abridged cylspr2.OUT file ---------------------------
 ***************** OUTPUT RELATING TO SPRINGS ****************
 The following output is for springs attached to ring no.  1
 *************************************************************
 The following are input quantities relating
 to all the springs attached to this ring:
 NTYPAL =          -1 =index for type of ring (NTYPAL = -1
           means a ring with springs attached to it.)
 NGROUN =           1 = 1 if springs are attached to ground,
           = 0 if springs are attached to a previous
           ring. (NOTE: The coding has not been
           written for the NGROUN = 0 option.)
 NSPRNG =           8 = number of springs attached to this
                         ring.
 SPRAXL =  0.0000E+00 = global axial coordinate of this
                         ring.
 SPRANG = 8 circumferential angles of spring attachment points on this ring:
  0.0000E+00  0.0000E+00  9.0000E+01  9.0000E+01  1.8000E+02
  1.8000E+02  2.7000E+02  2.7000E+02
 SPRKON = 8 spring constants for the 8 springs attached to this ring:
  0.0000E+00  0.0000E+00  0.0000E+00  0.0000E+00  0.0000E+00
  0.0000E+00  0.0000E+00  0.0000E+00
 SPREC1 =  0.0000E+00 = radial eccentricity e1 of the
           attachment points of all the springs to this ring.
 SPREC2 =  0.0000E+00 = axial  eccentricity e2 of the
           attachment points of all the springs to this ring.
 SPRAXG =  2.0000E+01 = global axial coordinate of the
           attachment of all the springs associated with this
           ring to ground.
 SPRRAD =  1.5000E+02 = radius of spring ground attachment
                         points
 SPRAGG = 8 circumferential angles of spring attachment points to ground:
  4.5000E+01 -4.5000E+01  1.3500E+02  4.5000E+01  2.2500E+02
  1.3500E+02  3.1500E+02  2.2500E+02

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

           SPRANG(i)                           SPRKON(i)   SPRFCE(i)
 SPRING   CIRC. ANGLE   SPRING    CHANGE IN      SPRING     SPRING
  NO.    OF ATTACHMENT LENGTH, L  LENGTH, dL    CONSTANT     FORCE
         POINT ON RING
   1      0.0000E+00  1.0811E+02  1.6679E+00  0.0000E+00  0.0000E+00
   2      0.0000E+00  1.0811E+02  1.6679E+00  0.0000E+00  0.0000E+00
   3      9.0000E+01  1.0811E+02  5.6020E+00  0.0000E+00  0.0000E+00
   4      9.0000E+01  1.0811E+02 -5.6020E+00  0.0000E+00  0.0000E+00
   5      1.8000E+02  1.0811E+02 -1.6679E+00  0.0000E+00  0.0000E+00
   6      1.8000E+02  1.0811E+02 -1.6679E+00  0.0000E+00  0.0000E+00
   7      2.7000E+02  1.0811E+02 -5.6020E+00  0.0000E+00  0.0000E+00
   8      2.7000E+02  1.0811E+02  5.6020E+00  0.0000E+00  0.0000E+00

 IN THE FOLLOWING LIST THE CONCENTRATED SPRING LOADS AT RING  1
 ARE RESOLVED IN THE SHELL COORDINATE DIRECTIONS: RADIAL,
 CIRCUMFERENTIAL, AND AXIAL. CONCENTRATED LOADS IN THESE
 SHELL COORDINATE DIRECTIONS MAY BE CALLED FOR AS PART OF THE
 INPUT DATA IN A SUBSEQUENT BIGBOSOR4 MODEL CONSTRUCTED BY
 YOU IN ORDER TO DETERMINE THE CONTRIBUTION OF HIGH-CIRCUMFER-
 ENTIAL-WAVENUMBER HARMONICS TO STRESS AND BUCKLING BEHAVIOR.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 SPRING    AZIMUTHAL  INCLINATION   RADIAL      CIRCUMF.    VERTICAL
  NO.       ANGLE        ANGLE      FORCE        FORCE       FORCE
           RELATIVE     RELATIVE   ON RING      ON RING     ON RING
           TO RING      TO RING
   1      8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   2     -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   3      8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   4     -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   5      8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   6     -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   7      8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00
   8     -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00  0.0000E+00

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 SPRING    AZIMUTHAL  INCLINATION   FORCES       SPRING 
  NO.       ANGLE       ANGLE     ON SPRING     CONSTANT
           RELATIVE    RELATIVE  DERIVED FROM DERIVED FROM
           TO RING     TO RING   SHELL LOADS  SHELL LOADS
   1       8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   2      -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   3       8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   4      -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   5       8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   6      -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   7       8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00
   8      -8.6727E+01  1.0661E+01  0.0000E+00  0.0000E+00

 THE SPRINGS MAY BE ARRANGED IN PAIRS THAT MEET AT THE "FAKE"
 RING. THEREFORE, SOME OF THE SPRING FORCES FROM INDIVIDUAL
 SPRINGS MAY COMBINE TO CANCEL EACHOTHER OR TO DOUBLE THE
 LOAD "SEEN" AT A PARTICULAR CIRCUMFERENTIAL LOCATION ON THE
 "FAKE" RING. THIS COMBINING HAS BEEN ACCOUNTED FOR IN THE
 FOLLOWING LIST OF CONCENTRATED LOADS RESOLVED IN THE SHELL
 COORDINATE DIRECTIONS: RADIAL, CIRCUMFERENTIAL, AND AXIAL.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 CIRCUMFERENTIAL  NET RADIAL    NET CIRCUMFER. NET VERTICAL   NET MERIDIONAL
   COORDINATE    FORCE ON RING  FORCE ON RING FORCE ON RING   MOMENT ON RING
   0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.0000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.8000E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   2.7000E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00

 ******************* IMPORTANT NOTE **************************
 This model essentially smears out the springs. Only the n = 0
 (axisymmetric up-and-down displacement and/or uniform rolling
 about the axis of revolution) and n = 1 (uniform lateral
 displacement and/or pitching displacement) are predicted
 accurately. In order to obtain the static response for higher
 circumferential wavenumbers, n, than n = 0 and/or n = 1, you
 must include as BIGBOSOR4 input in another run the
 concentrated forces that the springs apply to the "fake" ring
 and therefore to the shell where they are attached.
 ***************************************************************

 THE FOLLOWING CAN BE USED AS A GUIDE FOR BIGBOSOR4 INPUT FOR
 LINEAR NON-AXISYMMETRIC STATIC RESPONSE INCLUDING
 CONCENTRATED LOADS APPLIED BY THE SPRINGS TO THE SHELL. IN
 THE FOLLOWING OUTPUT THE CONCENTRATED SPRING LOADS ARE
 MODELED AS LINE LOADS WITH TRIANGULAR-SHAPED "PULSES". THE
 AREA UNDERNEATH EACH "PULSE" IS EQUAL TO THE CONCENTRATED
 SPRING LOAD AS RESOLVED IN THE RADIAL, CIRCUMFERENTIAL, AND
 AXIAL SHELL COORDINATE DIRECTIONS. THESE LINE LOADS ARE THE
 "H", "S", "V", AND "M" LINE LOADS, INPUT FOR WHICH IS CALLED
 FOR BY BIGBOSOR4.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

 CIRCUMFERENTIAL  RADIAL LINE   CIRCUMFER.LINE VERTICAL LINE  MERIDIONAL LINE
   COORDINATE     LOAD ON RING   LOAD ON RING  LOAD ON RING   MOMENT ON RING
   0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   5.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   8.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.0000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.7500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.8000E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.8500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   2.6500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   2.7000E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   2.7500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00

 FOR EVEN AND ODD DISTRIBUTIONS OF LINE LOAD ABOUT THE ORIGIN
 OF THE CIRCUMFERENTIAL COORDINATE, theta, BIGBOSOR4 REQUIRES
 INPUT DATA ONLY IN THE RANGE: 0.0.LE.theta.LE.180. DEGREES.
 ALSO, IT IS BEST TO SUPPLY THE CIRCUMFERENTIAL DISTRIBUTION
 OF LINE LOAD AS NORMALIZED, THAT IS, WITH THE PEAK LINE LOAD
 EQUAL TO UNITY AND THE ENTIRE DISTRIBUTION MULTIPLIED BY THE
 ACTUAL VALUE OF THE PEAK LINE LOAD. THE FOLLOWING LIST
 PRESENTS THE CIRCUMFERENTIAL DISTRIBUTION OF SPRING LOADS AT
 THIS "FAKE" RING IN THIS MANNER.

 IN BIGBOSOR4 THERE IS A RULE THAT THE CIRCUMFERENTIAL
 DISTRIBUTIONS OF RADIAL LINE LOAD, H, AXIAL LINE LOAD, V, AND
 MERIDIONAL LINE MOMENT, M, MUST BE THE SAME. THEREFORE, WE
 TRY TO ARRANGE THE SIGNS OF THE LINE LOAD FACTORS SO THAT
 THIS IS TRUE FOR THIS CASE. IF ANY CIRCUMFERENTIAL DISTRIBU-
 TION CONSISTS ENTIRELY OF ZEROES, THAT DOES N0T COUNT.
 IN THE BIGBOSOR4 INPUT YOU SIMPLY INDICATE THAT THERE IS NO
 LINE LOAD OF THAT PARTICULAR TYPE. THE CIRCUMFERENTIAL
 DISTRIBUTION OF THE CIRCUMFERENTIALLY ORIENTED LINE LOAD, S,
 CAN BE DIFFERENT FROM THAT FOR H, V, AND M. NOTE: IF YOU HAVE
 MORE THAN ONE RING WITH SPRINGS ATTACHED, MAKE SURE THAT IF
 THE SPRINGS ARE ARRANGED DIFFERENTLY ON THE TWO RINGS THAT
 EACH OF THE RINGS IS LOCATED IN A DIFFERENT SHELL SEGMENT.

 QUANTITIES RELATED TO SPRINGS ATTACHED TO RING NO.  1 (LOAD SYSTEM "A")

                  RADIAL LOAD     CIRC.LOAD     VERT.LOAD     MOMENT LOAD
                    FACTOR         FACTOR        FACTOR         FACTOR
                  1.0000E-07     1.0000E-07     1.0000E-07     1.0000E-07

 CIRCUMFERENTIAL  RADIAL LINE   CIRCUMFER.LINE VERTICAL LINE  MERIDIONAL LINE
   COORDINATE     LOAD ON RING   LOAD ON RING  LOAD ON RING   MOMENT ON RING
   0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   5.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   8.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.0000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   9.5000E+01     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.7500E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
   1.8000E+02     0.0000E+00     0.0000E+00     0.0000E+00     0.0000E+00
--------------------------------------------------------------------------



Note that most of the sping-related output is a bunch of zeroes. This is
because the spring constants, SPRKON(i), i = 1,8, are set equal to zero
in the input file for the second BIGBOSOR4 case, cylspr2.ALL.

********** IMPORTANT NOTE ************* IMPORTANT NOTE ***************
The number of circumferential waves starts at -2 and goes to -60 in
steps of -1 . (Negative wave numbers correspond to V, H, and M line
loads being even with respect to the circumferential coordinate, THETA).
We leave out n = 0 and n = -1 because these harmonics were accounted for
in the first BIGBOSOR4 case, cylspr1.
**********************************************************************


One of the main reasons we wanted to run
this second case, cylspr2, is to obtain ADDITIONAL shell wall displacement
components, u, v, w, that represent the displacements that occur at the
ring-end of each spring that are generated because the cylindrical shell
is flexible and therefore deforms under the concentrated spring reaction
loads. These ADDITIONAL displacements, not accounted for in the first
BIGBOSOR4 case, cylspr1, are now used to compute additional changes
in length, dL(i), of the springs. The additional lengths, dL(i), i=1,8,
are used in the computation of "effective" spring constants for each spring.

The "effective" spring constants are less than the original spring constants,
SPRKON(i), i = 1,8, because each original spring effectively acts in series
with a second spring: the flexible shell. The "effective" spring stiffnesses
of the flexible-shell-spring combination may be different for each spring
because the additional change in length, dL(i), may be different for each
spring and the spring forces listed in the output from the first BIGBOSOR4
execution, cylspr1.OUT, are all different.

For two springs in series, the "effective" spring constant of the combination
can be shown to be given by:

K(effective) = 1/[1/K(shell) + 1/K(spring)]

in which K(spring), the original spring constant, is equal to SPRKON(i),
and K(shell) is given by:

K(shell) =
   ABS{[ith spring force, SPRFCE(i)]/[ith additional change in length, dL(i)]}

where the index, i, is the number of the spring attached at the "fake"
ring. The quantities, SPRFCE(i), are listed in the output from the first case,
cylspr1.OUT, as follows:

           SPRANG(i)                           SPRKON(i)   SPRFCE(i)
 SPRING   CIRC. ANGLE   SPRING    CHANGE IN      SPRING     SPRING
  NO.    OF ATTACHMENT LENGTH, L  LENGTH, dL    CONSTANT     FORCE
         POINT ON RING
   1      0.0000E+00  1.0811E+02 -4.1491E+00  1.0000E+05 -4.1491E+05
   2      0.0000E+00  1.0811E+02 -4.1491E+00  1.0000E+05 -4.1491E+05
   3      9.0000E+01  1.0811E+02 -2.3729E-01  1.0000E+05 -2.3729E+04
   4      9.0000E+01  1.0811E+02  2.3729E-01  1.0000E+05  2.3729E+04
   5      1.8000E+02  1.0811E+02  4.1491E+00  1.0000E+05  4.1491E+05
   6      1.8000E+02  1.0811E+02  4.1491E+00  1.0000E+05  4.1491E+05
   7      2.7000E+02  1.0811E+02  2.3729E-01  1.0000E+05  2.3729E+04
   8      2.7000E+02  1.0811E+02 -2.3729E-01  1.0000E+05 -2.3729E+04


The additional changes in length, dL(i), are listed in the output from
the second case, cylspr2.OUT, as follows:

           SPRANG(i)                           SPRKON(i)   SPRFCE(i)
 SPRING   CIRC. ANGLE   SPRING    CHANGE IN      SPRING     SPRING
  NO.    OF ATTACHMENT LENGTH, L  LENGTH, dL    CONSTANT     FORCE
         POINT ON RING
   1      0.0000E+00  1.0811E+02  1.6679E+00  0.0000E+00  0.0000E+00
   2      0.0000E+00  1.0811E+02  1.6679E+00  0.0000E+00  0.0000E+00
   3      9.0000E+01  1.0811E+02  5.6020E+00  0.0000E+00  0.0000E+00
   4      9.0000E+01  1.0811E+02 -5.6020E+00  0.0000E+00  0.0000E+00
   5      1.8000E+02  1.0811E+02 -1.6679E+00  0.0000E+00  0.0000E+00
   6      1.8000E+02  1.0811E+02 -1.6679E+00  0.0000E+00  0.0000E+00
   7      2.7000E+02  1.0811E+02 -5.6020E+00  0.0000E+00  0.0000E+00
   8      2.7000E+02  1.0811E+02  5.6020E+00  0.0000E+00  0.0000E+00


We are permitted to use the spring force SPRFCE(i) from the first case, cylspr1,
because the ith set of two springs act in series. Therefore, the spring force
in the second spring (the one that represents the flexible shell) is the
same as the spring force from the first case, cylspr1.

Computing the "effective" spring constants as outlined above, we obtain
the following values:

 71327.0, 71327.0, 4063.0, 4063.0, 71327.0, 71327.0, 4063.0, 4063.0

Note that all eight of the original values are the same and equal to 100000.

We see that in this case the original spring constants are considerably
reduced by the flexibility of the shell.





30. March, 2009

    BEG MAR 2009
      compiling bigbosor4 on the hp700:
        It is assumed here that the hp700 workstation is called "goethe"
        and that the "home" directory is called "~bushnell" .
        telnet goethe
        login to goethe
        cd ~bushnell/bigbosor4
        mkdir objects.hp700  (if objects.hp700 does not exist already)
        cd ~bushnell/bigbosor4/objects.hp700
        if there is no file called "gasp.a" in the "objects.hp700" directory,
        type the following:
         cp ~bushnell/bigbosor4/sources/gasp.hp700.a  gasp.a
        cd ~bushnell/bigbosor4/execute
        make -f makefile.hp700 |& tee makehp700.log
      end, compiling bigbosor4 on the hp700
    END MAR 2009





31. April, 2009, January, 2010
BIGBOSOR4 was modified to permit the analysis of prismatic shells.
The analysis is similar to the "huge torus" model described in the
paper, David Bushnell, "Stress, buckling, and vibration of prismatic
shells", AIAA Journal, Vol. 9, No. 10, pp.204-213, October, 1971.
In that paper the equations governing the behavior remain unchanged
from those governing shells of revolution. The "huge torus" is simply
a type of shell of revolution.

In the "rigorous" prismatic shell model the governing kinematic
relationships and other relationships are actually changed from
those applicable to a shell of revolution to those applicable
to a true prismatic shell or assemblage of true prismatic shells.
Details and examples are given in the file,
.../bigbosor4/case/prismatic/prismatic.tar.gz 
In order to unpack the compressed tar file, prismatic.tar.gz,
type the following commands:
gunzip prismatic.tar.gz
tar xvf prismatic.tar
Then read the file, prismaticshell.readme, for more information
about the analysis of true prismatic shells with BIGBOSOR4.




32. June, 2009
BIGBOSOR4 made bigger. The maximum number of shell segments
remains the same at 295, but the maximum number of constraint
sites has been increased from 298 to 598, and the working
space has been doubled. The modifications are dated "JUN 2009".




33. July, 2010
SUBROUTINE GETPST reads in the prebuckling resultants and
prebuckling ring loads for the case INDIC=4, IPRE = 0.
Previously, you could only read in "eigenvalue" loads, that
is, loads that are to be multiplied by a buckling load
factor (the eigenvalue). No "fixed" loads (non-eigenvalue
loads) were provided for with the INDIC=4, IPRE = 0 option.
Now you read in BOTH "eigenvalue" loads and "fixed" loads
for the shell (FN10 and FN20) and for the discrete rings
(RHF, RHFIX).

The library, QUESTIONS.src, also had to be changed, of
course.




34. August, 2010
SUBROUTINES DATUM and PHOUT in the prompter.src library were
modified to permit proper output for cases in which there are
100 or more rings and 100 or more shell segments.

SUBROUTINE DATUM was modified as follows:
-------------------------------------------------------------
   20 CONTINUE
      IF (ITYPE) 30,40,50
   30 CONTINUE
C     INPUT DATA IS OF CHARACTER TYPE...
      CALL I2C(INTEGR,CHARAC)
      IF (IARRAY.EQ.0)
     1WRITE(OUTFIL,'(6X,A1,9X,A,A)') CHARAC(1:1),'$ ',PHRASE(1:IBLANK)
C BEG AUG 2010
C     IF(IARRAY.GT.0)WRITE(OUTFIL,'(6X,A1,9X,A,A,A,I2,A)')CHARAC(1:1),
C    1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
      IF(IARRAY.GT.0)WRITE(OUTFIL,'(6X,A1,9X,A,A,A,I3,A)')CHARAC(1:1),
     1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
C END AUG 2010
      WRITE(6,'(1X,A1)') CHARAC(1:1)
      GO TO 100
   40 CONTINUE
C
C     INPUT DATA IS OF INTEGER TYPE...
C
      IF (IARRAY.EQ.0)WRITE(OUTFIL,'(1X,I9,6X,A,A)')INTEGR,'$ ',
     1 PHRASE(1:IBLANK)
C BEG AUG 2010
C     IF (IARRAY.GT.0) WRITE(OUTFIL,'(1X,I9,6X,A,A,A,I2,A)') INTEGR,
C    1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
      IF (IARRAY.GT.0) WRITE(OUTFIL,'(1X,I9,6X,A,A,A,I3,A)') INTEGR,
     1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
C END AUG 2010
      WRITE(6,'(1X,I9)') INTEGR
      GO TO 100
   50 CONTINUE
C
C     INPUT DATA IS OF FLOATING POINT TYPE...
C
      IF (IARRAY.EQ.0) WRITE(OUTFIL,'(1X,G14.7,1X,A,A)')REALL,
     1 '$ ',PHRASE(1:IBLANK)
C BEG AUG 2010
C     IF (IARRAY.GT.0) WRITE(OUTFIL,'(1X,G14.7,1X,A,A,A,I2,A)') REALL,
C    1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
      IF (IARRAY.GT.0) WRITE(OUTFIL,'(1X,G14.7,1X,A,A,A,I3,A)') REALL,
     1 '$ ',PHRASE(1:IBLANK),'(',IARRAY,')'
C END AUG 2010
C
      WRITE(6,'(1X,G14.7)') REALL
  100 CONTINUE
      RETURN
      END
-----------------------------------------------------------------------

SUBROUTINE PHOUT was modified as follows:
----------------------------------------------------------------------
C=DECK      PHOUT
      SUBROUTINE PHOUT(IARRAY,PHRASE,IBLANK)
C
C     PRINT OUT THE SHORTEST PROMPT...
C
      CHARACTER*80 PHRASE
      CALL IBLNK(PHRASE,IBLANK)
      IF (IARRAY.EQ.0) WRITE(6,'(1X,A,A,$)') PHRASE(1:IBLANK),'='
C BEG AUG 2010
C     IF (IARRAY.GT.0) WRITE(6,'(1X,A,A,I2,A,$)')PHRASE(1:IBLANK),'(',
C    1 IARRAY,')='
      IF (IARRAY.GT.0) WRITE(6,'(1X,A,A,I3,A,$)')PHRASE(1:IBLANK),'(',
     1 IARRAY,')='
C END AUG 2010
C
      RETURN
      END
------------------------------------------------------------------------




35. August, 2010
The library, addbosor4.src was modified to let the
BIGBOSOR4 user know that he or she is using the AUGUST, 2010 version,
as follows:
---------------------------------------------------------------
C BEG AUG 2010
      WRITE(IFILE4,'(A)')
     1' ********** AUGUST, 2010 VERSION OF BIGBOSOR4 ***********'
C END AUG 2010
---------------------------------------------------------------



36. October, 2010
In August bigbosor4 was updated to allow "fixed" (non-eigenvalue or
"Load set B" loads) in analyses in which INDIC = 4 and IPRE = 0.
This update was incomplete. The following "addbosor4.diff" file
shows what had to be done in October in addition to what had been
done in August:
------------------------------------------------------------------
ush-> diff addbosor4.src addbosor4.old
1733c1733
< C BEG OCT 2010
---
> C BEG AUG 2010
1735,1736c1735,1736
<      1' ********** October, 2010 VERSION OF BIGBOSOR4 ***********'
< C END OCT 2010
---
>      1' ********** AUGUST, 2010 VERSION OF BIGBOSOR4 ***********'
> C END AUG 2010
15653,15658c15653,15654
< C BEG OCT 2010
< C         VN1 = RDS*FNSKNV(1,I)
< C         VN2 = RDS*FNSKNV(2,I)
<           VN1 = RDS*(FNSKNV(1,I)-     FNSKNF(1,I))
<           VN2 = RDS*(FNSKNV(2,I)-     FNSKNF(2,I))
< C END OCT 2010
---
>           VN1 = RDS*FNSKNV(1,I)
>           VN2 = RDS*FNSKNV(2,I)
15668,15673c15664,15666
< C BEG OCT 2010
< C         VN1 = RDS*PSVAR(I,1)
< C         VN2 = RDS*PSVAR(I,2) + FN2MOR*RDS
<           VN1 = RDS*(PSVAR(I,1)-     PSFIX(I,1))
<           VN2 = RDS*(PSVAR(I,2)-     PSFIX(I,2)) + FN2MOR*RDS
< C END OCT 2010
---
>           VN1 = RDS*PSVAR(I,1)
> C BEG NOV 1999
>           VN2 = RDS*PSVAR(I,2) + FN2MOR*RDS
15784,15787c15777
< C BEG OCT 2010
< C     RHFIK = RHF(IK)
<       RHFIK = RHF(IK) - RHFIX(IK)
< C END OCT 2010
---
>       RHFIK = RHF(IK)
16006c15996
< C BEG APR 2009
---
> C BEG APR 2009
--------------------------------------------------------------------




37. October 2011
This item has to do with the section of BIGBOSOR4 in which springs
are attached to a shell of revolution.

There was an error in the logic for a case in which there was no spring
at THETA = 0 degrees. SUBROUTINE SUPER in the addbosor4.src library was
modified as follows:
-------------------------------------------------------------------
  169    CONTINUE
  170    CONTINUE
         NCIRC = ICIRC - 1
C
C BEG OCT 2011
C        IF (ILOOP.EQ.1.AND.(RADAMP(1).NE.0.0.OR.VERAMP(1).NE.0.0
C    1       .OR.RADAMP(NCIRC).NE.0.0.OR.VERAMP(NCIRC).NE.0.0)) THEN
C23456789012345678901234567890123456789012345678901234567890123456789012
         IF (ILOOP.EQ.1.AND.(RADMAX.GT.0.0000001.OR.VERMAX.GT.0.0000001
     1                                                       )) THEN
C END OCT 2011
          WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,A,/,A)')
     1  ' ******** NOTE ************* NOTE ************ NOTE *********',
     1  ' THE FOLLOWING SAMPLE BOSOR4 INPUT IS VALID ONLY IF:',
          WRITE(IFILE4,'(/,A,/,A,/,A,/,A,/,A,/,A,A,/,A)')
     1  ' ******** NOTE ************* NOTE ************ NOTE *********',
     1  ' THE FOLLOWING SAMPLE BOSOR4 INPUT IS VALID ONLY IF:',
     1  ' 1. ONLY LOAD SET A EXISTS. THERE IS NO LOAD SET B.',
     1  ' 2. THE LINE LOADS, V, H, AND M, ARE EVEN FUNCTIONS OF THETA.',
     1  ' 3. THE LINE LOAD, S, IS AN ODD FUNCTION OF THETA.',
     1  ' 4. THERE IS ONLY ONE RING IN THIS SHELL SEGMENT WITH',
     1  ' ATTACHED SPRINGS.',
     1  ' ************************************************************'
C
          WRITE(IFILE4,'(/,A,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,/,A,)')
     1  ' BOSOR4 INPUT FOR LINE LOADS CORRESPONDING TO THE OUTPUT',
     1  ' JUST LISTED',
     1  ' H    $ LINE LOAD INPUT FOLLOWS...',
     1  ' 1    $ LINAB=indicator (0, 1, 2 or 3) for load set A and B',
     1  ' H    $ LINE LOAD INPUT FOR LOAD SET "A" FOLLOWS',
     1  ' 1    $ LINTYP=indicator (0,1,2 or 3) for type of line loads',
     1  ' 4    $ NTYPEL=index (use 4) for input of nonsymmetric loads',
     1  ' 1    $ NLOAD(1)=indicator for axial load or disp. (1 = some)',
     1  ' 1    $ NLOAD(2)=indicator for shear load or disp. (1 = some)',
     1  ' 1    $ NLOAD(3)=indicator for radial load or disp.(1 = some)',
     1  ' 1    $ NLOAD(4)=indicator for line moment or rot. (1 = some)'
          WRITE(IFILE4,
     1               '(1PE12.4,A,/,1PE12.4,A,/,1PE12.4,A,/,1PE12.4,A)')
     1    VERMAX,' $ V(i)=fixed or initial axial load or disp.  V(1)',
     1    CIRMAX,' $ S(i)=fixed or initial shear load or disp.  S(1)',
     1    RADMAX,' $ H(i)=fixed or initial radial load or disp. H(1)',
     1    FMOMAX,' $ M(i)=fixed or initial moment or rotation.  M(1)'
C BEG OCT 2011
          MCIRC = NCIRC
          IF (CIRC(NCIRC).LT.0.99*180.0) MCIRC = NCIRC + 1
          WRITE(IFILE4,'(I5,A,/,A,/,A)')
     1    MCIRC,' $ NTHETA=number of circumferential callouts for load',
     1  ' 2    $ NOPT=control for how g(THETA) is to be input',
     1  ' 1    $ NODD=control for the oddness or evenness of g(THETA)'
C END OCT 2011
          DO 172 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     CIRC(ICIRC),' $ circumferential coordinate, THETA(',ICIRC,')'
  172     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A,I2,A)')
     1         ' 180.0   $ circumferential coordinate, THETA(',MCIRC,')'
C END OCT 2011
          DO 174 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     VERAMP(ICIRC)/VERMAX,
     1                  ' $ YPLUS=value of g(THETA) at THETA(',ICIRC,')'
  174     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A)')
     1           ' 0.0    $ YPLUS=value of g(THETA) at 180 degrees'
C END OCT 2011
          WRITE(IFILE4,'(A,/,I5,A,/,A,/,A)')
     1  ' Y    $ Do you want to print out output Fourier expansion?',
C BEG OCT 2011
     1    MCIRC,' $ NTHETA=number of circumferential callouts for load',
     1  ' 2    $ NOPT=control for how g(THETA) is to be input',
     1  ' 2    $ NODD=control for the oddness or evenness of g(THETA)'
C END OCT 2011
          DO 176 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     CIRC(ICIRC),' $ circumferential coordinate, THETA(',ICIRC,')'
  176     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A,I2,A)')
     1         ' 180.0   $ circumferential coordinate, THETA(',MCIRC,')'
C END OCT 2011
          DO 178 ICIRC = 1,NCIRC
           WRITE(IFILE4,'(1PE12.4,A,I2,A)')
     1     CIRAMP(ICIRC)/CIRMAX,
     1                  ' $ YPLUS=value of g(THETA) at THETA(',ICIRC,')'
  178     CONTINUE
C BEG OCT 2011
          IF ((MCIRC-NCIRC).EQ.1) WRITE(IFILE4,'(A)')
     1           ' 0.0    $ YPLUS=value of g(THETA) at 180 degrees'
C END OCT 2011
          WRITE(IFILE4,'(A)')
     1  ' Y    $ Do you want to print out output Fourier expansion?'
         ENDIF
      ENDIF
C23456789012345678901234567890123456789012345678901234567890123456789012
C
C END MAR 2008
  200 CONTINUE
  205 CONTINUE
      RETURN
      END
-------------------------------------------------------------------------



38. May 2012
SUBROUTINE STABIL was modified as follows because of wrong
results for the genopt/bigbosor4 case called "oneskirt":
--------------------------------------------------------------
C BEG SEP 2005
      IF (ISKINS.EQ.1.AND.NUMSTF.GE.2) THEN
         IF (INDIC.NE.4) THEN
          VN1 = RDS*(FNSKNV(1,I)-     FNSKNF(1,I))
          VN2 = RDS*(FNSKNV(2,I)-     FNSKNF(2,I))
         ELSE
C BEG MAY 2012
C The October 2010 modification is incorrect.
C Go back to the way it was in August 2010...
C BEG OCT 2010
          VN1 = RDS*FNSKNV(1,I)
          VN2 = RDS*FNSKNV(2,I)
C         VN1 = RDS*(FNSKNV(1,I)-     FNSKNF(1,I))
C         VN2 = RDS*(FNSKNV(2,I)-     FNSKNF(2,I))
C END OCT 2010
C END MAY 2012
         ENDIF
      ELSE
C END SEP 2005
         IF (INDIC.NE.4) THEN
          VN1 = RDS*(PSVAR(I,1)-     PSFIX(I,1))
C BEG NOV 1999
          VN2 = RDS*(PSVAR(I,2)-     PSFIX(I,2)) + FN2MOR*RDS
C END NOV 1999
         ELSE
C BEG MAY 2012
C The October 2010 modification is incorrect.
C Go back to the way it was in August 2010...
C BEG OCT 2010
          VN1 = RDS*PSVAR(I,1)
          VN2 = RDS*PSVAR(I,2) + FN2MOR*RDS
C         VN1 = RDS*(PSVAR(I,1)-     PSFIX(I,1))
C         VN2 = RDS*(PSVAR(I,2)-     PSFIX(I,2)) + FN2MOR*RDS
C END OCT 2010
C END MAY 2012
C END NOV 1999
         ENDIF
C BEG SEP 2005
      ENDIF
C END SEP 2005
C     'VARIABLE' PRESSURE-ROTATION EFFECT
-----------------------------------------------------------



39. May 2012
SUBROUTINE EBAND2 in the addbosor4.src library was modified
as follows:
----------------------------------------------------------
=DECK      EBAND2
      SUBROUTINE EBAND2(B,C,DI,DIAG,ILOC)
C     CALLED FROM BUCKLE WHICH IS CALLED FROM MAIN.
C     THIS SUBROUTINE IS USED TO CALCULATE NVEC VIBRATION FREQUENCIES
C     OR BUCKLING LOADS
C     FOR A GIVEN CIRCUMFERENTIAL WAVENUMBER N.  THE EIGENVALUE
C     PROBLEM HAS THE FORM . .
C                               A*X  - OMEGA**2*M*X  = 0
C
C     SEE ADDITIONAL COMMENTS SPRINKLED THROUGHOUT EBAND
C
 (many lines skipped to save space)

      DIMENSION SM(50),ISAVE1(50),ISAVE2(50)
C BEG MAY 2012
      DIMENSION IFLGKT(50)
C END MAY 2012
      COMMON/OUTP/NPRINT

 (many lines skipped to save space)

90    FORMAT (' GENERALIZED MASS= ',E15.8,/)
C BEG MAY 2012
      CALL MOVER(0,0,IFLGKT,1,50)
C END MAY 2012
C BEG FEB 2010
      IF (IPRISM.EQ.0) THEN

 (many lines skipped to save space)

280   CONTINUE
C BEG MAY 2012
      IF (INDIC.EQ.4.AND.KT.LT.0) THEN
        IFLGKT(N7) = KT
        GO TO 350
      ENDIF
C END MAY 2012
      IF (N7.GE.NVEC) GO TO 820

 (many lines skipped to save space)

820   CONTINUE
      NVEC = N4
C BEG MAY 2012
      IF (INDIC.EQ.4) THEN
         IF (KT.LT.0) IFAIL = 1
         DO 825 I = 1,NVEC
           IF (IFLGKT(I).LT.0) ROOT(I) = -ROOT(I)
  825    CONTINUE
      ENDIF
C END MAY 2012
830   IF (NPRINT.GT.1) WRITE(IFILE4,840)
840   FORMAT(/,' LEAVING SUBROUTINE EBAND2.')
      RETURN
      END
----------------------------------------------------------
With the index, KT, equal to -1 and analysis type INDIC = 4, one
obtains from EBAND2 the nonsensical message:

THERE ARE   -1 EIGENVALUES BETWEEN   0.0000000E+00 AND   0.6160795E-01

which, with INDIC = 4, indicates that there are unwanted negative
eigenvalues in the neighborhood of 0.06160795 (in this particular
case). A proper, sensible message reads as follows:

THERE ARE    1 EIGENVALUES BETWEEN   0.0000000E+00 AND   0.4987643E+01

for example.

The modifications to SUBROUTINE EBAND2 lead to the rejection of
eigenvalues that correspond to negative values of the index, KT.



40. August 2013
SUBROUTINE EBAND2 in the addbosor4.src library was modified
as follows:
----------------------------------------------------------
      N9=5
C BEG AUG 2013
C     IMAX=10
      IMAX=20
C END AUG 2013
      ITP1(1) = 0
----------------------------------------------------------

The modification to SUBROUTINE EBAND2 makes it less likely
that iterations to an eigenvalue will fail.



41. September 23, 2013
A new "bigbosor4" code was developed that permits up to 2950
shell segments (increased from 296 shell segments.
This new capability is presently called
"hugebosor4" and does not replace "bigbosor4". The "hugebosor4"
is activated when the user gives the command, "HUGEBOSOR4LOG".
The command set for "hugebosor4" is the same as that for
"bigbosor4", but the FORTRAN coding has been modified, of
course. The modified coding is stored in the files:

.../genopt/case/sources/addbosor4.src.huge
.../genopt/case/sources/b4plot.src.huge
.../genopt/case/sources/b4util.src.huge
.../genopt/case/sources/resetup.src.huge

In order to run GENOPT with the "hugebosor4" capability
(GENOPT/HUGEBOSOR4) do the following:

cp ../genopt/case/sources/addbosor4.src.huge ../bosdec/sources/addbosor4.src
cp ../genopt/case/sources/b4plot.src.huge ../bosdec/sources/b4plot.src
cp ../genopt/case/sources/b4util.src.huge ../bosdec/sources/b4util.src
cp ../genopt/case/sources/resetup.src.huge ../bosdec/sources/resetup.src
cp  behavior.span9.huge ../genoptcase/behavior.new
cp  bosdec.span9.hugecyl.huge ../bosdec/sources/bosdec.src (for "corners")
  or
cp bosdec.span9.smoothing.huge ../bosdec/sources/bosdec.src (for smoothing)

In order to get stand-alone "hugebosor4" results (e.g. plots)
go to a working directory where you want to run "hugebosor4"
and first give the command, HUGEBOSOR4LOG, followed by the
same commands that are used in connection with bigbosor4:
bigbosorall, bosorplot, etc.

The main purpose of "hugebosor4" is to work with GENOPT, in
which context valid input files for "hugebosor4" are gemerated
via the new software, bosdec.span9.hugecyl.huge (no smoothing)
and bosdec.span9.smoothing.huge (yes smoothing).




42. February - May 2014
The strategy used in connection with INDIC = -2 was modified
as a result of trying to optimize circumferentially corrugated
shells of revolution subject to external lateral normal pressure
(the project called "michelin"). The modifications are identified
by bracketed "comment" records: "BEG FEB 2014 - - "END FEB 2014",
"BEG MAR 2014 - - "END MAR 2014", "BEG APR 2014 - - "END APR 2014",
"BEG MAY 2014 - - "END MAY 2014". The new coding occurs mainly in
B4MAIN and EBAND2. The purpose is to avoid:
1. BIGBOSOR4 getting into an infinite loop
2. BIGBOSOR4 bombing during an INDIC=-2 execution.
The "infinite loop" problem seems to have been solved, but the
"bombing" problem, although occurring less frequently than before,
still happens occasionally, especially in the following
situations:
1. There exist negative eigenvalues with smaller load factors
than those corresponding to the lowest positive eigenvalue.
2. There exist a cluster of positive eigenvalues near the
critical (smallest) positive eigenvalue.
3. The critical bifurcation buckling load factor is in a
region where nonlinear effects are significant, especially
when the critical bifurcation point is close to the load at
which the shell collapses axisymmetrically.
NOTE: HUGEBOSOR4 was not updated.



43. 
